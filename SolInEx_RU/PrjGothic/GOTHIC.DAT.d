// var __class ÿinstance_help;

// func string inttostring(var int par0);

// func string floattostring(var float par0);

// func int floattoint(var float par0);

// func float inttofloat(var int par0);

// func string concatstrings(var string par0, var string par1);

// func void print(var string par0);

// func void printdebug(var string par0);

// func int printscreen(var string par0, var int par1, var int par2, var string par3, var int par4);

// func int printdialog(var int par0, var string par1, var int par2, var int par3, var string par4, var int par5);

// func void printdebuginst(var string par0);

// func void printdebuginstch(var int par0, var string par1);

// func void printdebugch(var int par0, var string par1);

// func void printmulti(var string par0, var string par1, var string par2, var string par3, var string par4);

// func void exitgame();

// func int playvideo(var string par0);

// func void setpercentdone(var int par0);

// func void introducechapter(var string par0, var string par1, var string par2, var string par3, var int par4);

// func void npc_memoryentry(var __class par0, var int par1, var __class par2, var int par3, var __class par4);

// func void npc_memoryentryguild(var __class par0, var int par1, var __class par2, var int par3, var __class par4);

// func int npc_hasnews(var __class par0, var int par1, var __class par2, var __class par3);

// func __class npc_getnewswitness(var __class par0, var int par1);

// func __class npc_getnewsoffender(var __class par0, var int par1);

// func __class npc_getnewsvictim(var __class par0, var int par1);

// func int npc_isnewsgossip(var __class par0, var int par1);

// func int npc_deletenews(var __class par0, var int par1);

// func int npc_getguildattitude(var __class par0, var __class par1);

// func int npc_getactivespell(var __class par0);

// func int npc_getactivespellcat(var __class par0);

// func int npc_getactivespelllevel(var __class par0);

// func int npc_setactivespellinfo(var __class par0, var int par1);

// func int wld_detectitem(var __class par0, var int par1);

// func int wld_detectplayer(var __class par0);

// func int wld_detectnpc(var __class par0, var int par1, var func par2, var int par3);

// func int wld_detectnpcex(var __class par0, var int par1, var func par2, var int par3, var int par4);

// func void wld_setguildattitude(var int par0, var int par1, var int par2);

// func int wld_getguildattitude(var int par0, var int par1);

// func int wld_ismobavailable(var __class par0, var string par1);

// func int wld_isfpavailable(var __class par0, var string par1);

// func int wld_isnextfpavailable(var __class par0, var string par1);

// func void npc_createspell(var __class par0, var int par1);

// func void npc_learnspell(var __class par0, var int par1);

// func int npc_hasitems(var __class par0, var __class par1);

// func void npc_giveitem(var __class par0, var int par1, var __class par2);

// func void createinvitem(var __class par0, var __class par1);

// func void createinvitems(var __class par0, var __class par1, var int par2);

// func int npc_getinvitem(var __class par0, var int par1);

// func int npc_getinvitembyslot(var __class par0, var int par1, var int par2);

// func int npc_removeinvitem(var __class par0, var int par1);

// func int npc_removeinvitems(var __class par0, var __class par1, var int par2);

// func int npc_isinstate(var __class par0, var func par1);

// func int npc_wasinstate(var __class par0, var func par1);

// func int npc_isinroutine(var __class par0, var func par1);

// func void ai_setnpcstostate(var __class par0, var func par1, var int par2);

// func int npc_hasdetectednpc(var __class par0, var __class par1);

// func void npc_setattitude(var __class par0, var int par1);

// func void npc_settempattitude(var __class par0, var int par1);

// func int npc_getattitude(var __class par0, var __class par1);

// func int npc_getpermattitude(var __class par0, var __class par1);

// func void npc_changeattribute(var __class par0, var int par1, var int par2);

// func int npc_getcomrades(var __class par0);

// func int npc_isnear(var __class par0, var __class par1);

// func int npc_getdisttonpc(var __class par0, var __class par1);

// func int npc_getdisttoplayer(var __class par0);

// func int npc_getdisttoitem(var __class par0, var __class par1);

// func int npc_getdisttowp(var __class par0, var string par1);

// func int npc_canseenpc(var __class par0, var __class par1);

// func int npc_canseenpcfreelos(var __class par0, var __class par1);

// func int npc_canseeitem(var __class par0, var __class par1);

// func int npc_isplayer(var __class par0);

// func int npc_knowsplayer(var __class par0, var __class par1);

// func void npc_setknowsplayer(var __class par0, var __class par1);

// func int npc_isinfightmode(var __class par0, var int par1);

// func int npc_isaiming(var __class par0, var __class par1);

// func int npc_startitemreactmodules(var __class par0, var __class par1, var __class par2);

// func int npc_hasoffered(var __class par0, var __class par1, var int par2);

// func void equipitem(var __class par0, var int par1);

// func void npc_settofistmode(var __class par0);

// func void npc_settofightmode(var __class par0, var int par1);

// func int npc_isdead(var __class par0);

// func void ai_startstate(var __class par0, var func par1, var int par2, var string par3);

// func void ai_continueroutine(var __class par0);

// func int npc_getstatetime(var __class par0);

// func void npc_setstatetime(var __class par0, var int par1);

// func void ai_output(var __class par0, var __class par1, var string par2);

// func void ai_outputsvm(var __class par0, var __class par1, var string par2);

// func void ai_outputsvm_overlay(var __class par0, var __class par1, var string par2);

// func void ai_playcutscene(var __class par0, var string par1);

// func void ai_canseenpc(var __class par0, var __class par1, var func par2);

// func void ai_wait(var __class par0, var float par1);

// func void ai_waitms(var __class par0, var int par1);

// func void ai_waittillend(var __class par0, var __class par1);

// func void ai_aligntowp(var __class par0);

// func void ai_setwalkmode(var __class par0, var int par1);

// func void ai_playani(var __class par0, var string par1);

// func void ai_playanibs(var __class par0, var string par1, var int par2);

// func void ai_gotowp(var __class par0, var string par1);

// func void ai_teleport(var __class par0, var string par1);

// func void ai_gotoitem(var __class par0, var __class par1);

// func void ai_gotonpc(var __class par0, var __class par1);

// func void ai_aligntofp(var __class par0);

// func void ai_gotofp(var __class par0, var string par1);

// func int npc_isonfp(var __class par0, var string par1);

// func void ai_gotonextfp(var __class par0, var string par1);

// func void ai_gotosound(var __class par0);

// func void ai_takeitem(var __class par0, var __class par1);

// func void ai_dropitem(var __class par0, var int par1);

// func void ai_drawweapon(var __class par0);

// func void ai_removeweapon(var __class par0);

// func int npc_hasrangedweaponwithammo(var __class par0);

// func int npc_hasequippedweapon(var __class par0);

// func int npc_hasequippedmeleeweapon(var __class par0);

// func int npc_hasequippedrangedweapon(var __class par0);

// func int npc_hasequippedarmor(var __class par0);

// func int npc_hasreadiedweapon(var __class par0);

// func int npc_hasreadiedmeleeweapon(var __class par0);

// func int npc_hasreadiedrangedweapon(var __class par0);

// func int npc_gettrueguild(var __class par0);

// func int npc_settrueguild(var __class par0, var int par1);

// func int npc_arewestronger(var __class par0, var __class par1);

// func int npc_gettarget(var __class par0);

// func int npc_getnexttarget(var __class par0);

// func int npc_isnexttargetavailable(var __class par0);

// func void npc_settarget(var __class par0, var __class par1);

// func int npc_getbodystate(var __class par0);

// func int npc_hasbodyflag(var __class par0, var int par1);

// func int npc_isincutscene(var __class par0);

// func int npc_isvoiceactive(var __class par0);

// func string npc_getdetectedmob(var __class par0);

// func void npc_playani(var __class par0, var string par1);

// func int npc_isdetectedmobownedbynpc(var __class par0, var __class par1);

// func int npc_isdetectedmobownedbyguild(var __class par0, var int par1);

// func int wld_getmobstate(var __class par0, var string par1);

// func void npc_clearaiqueue(var __class par0);

// func int infomanager_hasfinished();

// func void ai_stopprocessinfos(var __class par0);

// func void ai_processinfos(var __class par0);

// func void info_addchoice(var int par0, var string par1, var func par2);

// func void info_clearchoices(var int par0);

// func int npc_knowsinfo(var __class par0, var int par1);

// func int npc_checkinfo(var __class par0, var int par1);

// func int npc_giveinfo(var __class par0, var int par1);

// func int npc_gettalentskill(var __class par0, var int par1);

// func int npc_gettalentvalue(var __class par0, var int par1);

// func void npc_settalentskill(var __class par0, var int par1, var int par2);

// func void npc_settalentvalue(var __class par0, var int par1, var int par2);

// func void tal_configure(var int par0, var int par1);

// func string npc_getnearestwp(var __class par0);

// func string npc_getnextwp(var __class par0);

// func int npc_iswayblocked(var __class par0);

// func __class npc_getreadiedweapon(var __class par0);

// func __class npc_getequippedmeleeweapon(var __class par0);

// func __class npc_getequippedrangedweapon(var __class par0);

// func __class npc_getequippedarmor(var __class par0);

// func void ai_lookforitem(var __class par0, var int par1);

// func int ai_equipbestmeleeweapon(var __class par0);

// func int ai_equipbestrangedweapon(var __class par0);

// func void ai_equipbestarmor(var __class par0);

// func void ai_unequipweapons(var __class par0);

// func void ai_unequiparmor(var __class par0);

// func void ai_equiparmor(var __class par0, var int par1);

// func void ai_readymeleeweapon(var __class par0);

// func void ai_readyrangedweapon(var __class par0);

// func void ai_turnaway(var __class par0, var __class par1);

// func void ai_turntonpc(var __class par0, var __class par1);

// func void ai_whirlaround(var __class par0, var __class par1);

// func void ai_whirlaroundtosource(var __class par0);

// func void ai_turntosound(var __class par0);

// func void ai_quicklook(var __class par0, var __class par1);

// func void ai_lookat(var __class par0, var string par1);

// func void ai_lookatnpc(var __class par0, var __class par1);

// func void ai_stoplookat(var __class par0);

// func void ai_pointat(var __class par0, var string par1);

// func void ai_pointatnpc(var __class par0, var __class par1);

// func void ai_stoppointat(var __class par0);

// func void ai_standup(var __class par0);

// func void ai_standupquick(var __class par0);

// func void ai_flee(var __class par0);

// func void ai_aimat(var __class par0, var __class par1);

// func void ai_stopaim(var __class par0);

// func void ai_shootat(var __class par0, var __class par1);

// func void ai_defend(var __class par0);

// func void ai_combatreacttodamage(var __class par0);

// func void ai_readyspell(var __class par0, var int par1, var int par2);

// func void ai_unreadyspell(var __class par0);

// func int npc_hasspell(var __class par0, var int par1);

// func void ai_attack(var __class par0);

// func void ai_finishingmove(var __class par0, var __class par1);

// func void ai_dodge(var __class par0);

// func void ai_useitem(var __class par0, var int par1);

// func void ai_useitemtostate(var __class par0, var int par1, var int par2);

// func int npc_refusetalk(var __class par0);

// func void npc_setrefusetalk(var __class par0, var int par1);

// func void ai_ask(var __class par0, var func par1, var func par2);

// func void ai_asktext(var __class par0, var func par1, var func par2, var string par3, var string par4);

// func void ai_waitforquestion(var __class par0, var func par1);

// func int hlp_isitem(var __class par0, var int par1);

// func int hlp_getinstanceid(var __class par0);

// func int hlp_random(var int par0);

// func int hlp_strcmp(var string par0, var string par1);

// func __class hlp_getnpc(var __class par0);

// func int hlp_isvalidnpc(var __class par0);

// func int hlp_isvaliditem(var __class par0);

// func void snd_play(var string par0);

// func void snd_play3d(var __class par0, var string par1);

// func int snd_getdisttosource(var __class par0);

// func int snd_issourcenpc(var __class par0);

// func int snd_issourceitem(var __class par0);

// func int npc_canseesource(var __class par0);

// func int mis_getstatus(var int par0);

// func void mis_setstatus(var int par0, var int par1);

// func int mis_ontime(var int par0);

// func void log_createtopic(var string par0, var int par1);

// func void log_addentry(var string par0, var string par1);

// func void log_settopicstatus(var string par0, var int par1);

// func void mis_addmissionentry(var __class par0, var string par1);

// func void mis_removemission(var __class par0);

// func int npc_checkavailablemission(var __class par0, var int par1, var int par2);

// func int npc_checkrunningmission(var __class par0, var int par1);

// func int npc_checkoffermission(var __class par0, var int par1);

// func void mdl_setvisual(var __class par0, var string par1);

// func void mdl_setvisualbody(var __class par0, var string par1, var int par2, var int par3, var string par4, var int par5, var int par6, var int par7);

// func void mdl_applyoverlaymds(var __class par0, var string par1);

// func void mdl_applyoverlaymdstimed(var __class par0, var string par1, var int par2);

// func void mdl_removeoverlaymds(var __class par0, var string par1);

// func void mdl_applyrandomani(var __class par0, var string par1, var string par2);

// func void mdl_applyrandomanifreq(var __class par0, var string par1, var float par2);

// func void mdl_setmodelscale(var __class par0, var float par1, var float par2, var float par3);

// func void mdl_setmodelfatness(var __class par0, var float par1);

// func void mdl_startfaceani(var __class par0, var string par1, var float par2, var float par3);

// func void mdl_applyrandomfaceani(var __class par0, var string par1, var float par2, var float par3, var float par4, var float par5, var float par6);

// func int wld_istime(var int par0, var int par1, var int par2, var int par3);

// func int wld_getday();

// func void wld_settime(var int par0, var int par1);

// func void wld_insertnpc(var int par0, var string par1);

// func void wld_spawnnpcrange(var __class par0, var int par1, var int par2, var float par3);

// func void wld_playeffect(var string par0, var __class par1, var __class par2, var int par3, var int par4, var int par5, var int par6);

// func void wld_removenpc(var int par0);

// func void wld_insertnpcandrespawn(var int par0, var string par1, var int par2);

// func void wld_insertitem(var int par0, var string par1);

// func void wld_insertobject(var string par0, var string par1);

// func int wld_removeitem(var __class par0);

// func void wld_exchangeguildattitudes(var string par0);

// func void wld_setobjectroutine(var int par0, var int par1, var string par2, var int par3);

// func void wld_setmobroutine(var int par0, var int par1, var string par2, var int par3);

// func void wld_sendtrigger(var string par0);

// func void wld_senduntrigger(var string par0);

// func int npc_ownedbynpc(var __class par0, var __class par1);

// func int npc_ownedbyguild(var __class par0, var int par1);

// func void ai_takemob(var __class par0, var string par1);

// func void ai_dropmob(var __class par0);

// func int ai_usemob(var __class par0, var string par1, var int par2);

// func void mob_createitems(var string par0, var int par1, var int par2);

// func int mob_hasitems(var string par0, var int par1);

// func int doc_create();

// func int doc_createmap();

// func void doc_setpages(var int par0, var int par1);

// func void doc_setpage(var int par0, var int par1, var string par2, var int par3);

// func void doc_setfont(var int par0, var int par1, var string par2);

// func void doc_setlevel(var int par0, var string par1);

// func void doc_setmargins(var int par0, var int par1, var int par2, var int par3, var int par4, var int par5, var int par6);

// func void doc_printline(var int par0, var int par1, var string par2);

// func void doc_printlines(var int par0, var int par1, var string par2);

// func void doc_show(var int par0);

// func void doc_open(var string par0);

// func void doc_font(var string par0);

// func void doc_print(var string par0);

// func void doc_mapcoordinates(var string par0, var float par1, var float par2, var float par3, var float par4, var float par5, var float par6, var float par7, var float par8);

// func void ta(var __class par0, var int par1, var int par2, var func par3, var string par4);

// func void ta_min(var __class par0, var int par1, var int par2, var int par3, var int par4, var func par5, var string par6);

// func void ta_cs(var __class par0, var string par1, var string par2);

// func void ta_beginoverlay(var __class par0);

// func void ta_endoverlay(var __class par0);

// func void ta_removeoverlay(var __class par0);

// func void npc_exchangeroutine(var __class par0, var string par1);

// func void rtn_exchange(var string par0, var string par1);

// func void perc_setrange(var int par0, var int par1);

// func void npc_setperctime(var __class par0, var float par1);

// func void npc_percenable(var __class par0, var int par1, var func par2);

// func void npc_percdisable(var __class par0, var int par1);

// func void npc_sendpassiveperc(var __class par0, var int par1, var __class par2, var __class par3);

// func void npc_sendsingleperc(var __class par0, var __class par1, var int par2);

// func void npc_perceiveall(var __class par0);

// func void wld_assignroomtoguild(var string par0, var int par1);

// func void wld_assignroomtonpc(var string par0, var __class par1);

// func __class wld_getplayerportalowner();

// func int wld_getplayerportalguild();

// func __class wld_getformerplayerportalowner();

// func int wld_getformerplayerportalguild();

// func int npc_isplayerinmyroom(var __class par0);

// func int npc_wasplayerinmyroom(var __class par0);

// func int hlp_cutsceneplayed(var string par0);

// func int set_urizel_in_righthand();

const int atr_hitpoints = 0;

const int atr_hitpoints_max = 1;

const int atr_mana = 2;

const int atr_mana_max = 3;

const int atr_strength = 4;

const int atr_dexterity = 5;

const int atr_regeneratehp = 6;

const int atr_regeneratemana = 7;

const int atr_index_max = 8;

const int npc_flag_friend = 1;

const int npc_flag_immortal = 2;

const int fmode_none = 0;

const int fmode_fist = 1;

const int fmode_melee = 2;

const int fmode_far = 5;

const int fmode_magic = 7;

const int npc_run = 0;

const int npc_walk = 1;

const int npc_sneak = 2;

const int npc_run_weapon = 128;

const int npc_walk_weapon = 129;

const int npc_sneak_weapon = 130;

const int wear_torso = 1;

const int wear_head = 2;

const int inv_weapon = 1;

const int inv_armor = 2;

const int inv_rune = 3;

const int inv_magic = 4;

const int inv_food = 5;

const int inv_potion = 6;

const int inv_doc = 7;

const int inv_misc = 8;

const int inv_cat_max = 9;

const int inv_max_weapons = 6;

const int inv_max_armors = 2;

const int inv_max_runes = 1000;

const int inv_max_food = 15;

const int inv_max_docs = 1000;

const int inv_max_potions = 1000;

const int inv_max_magic = 1000;

const int inv_max_misc = 1000;

const int itm_text_max = 6;

const int item_kat_none = 1;

const int item_kat_nf = 2;

const int item_kat_ff = 4;

const int item_kat_mun = 8;

const int item_kat_armor = 16;

const int item_kat_food = 32;

const int item_kat_docs = 64;

const int item_kat_potions = 128;

const int item_kat_light = 256;

const int item_kat_rune = 512;

const int item_kat_magic = -2147483648;

const int item_kat_keys = 1;

const int item_burn = 1024;

const int item_mission = 4096;

const int item_multi = 2097152;

const int item_torch = 268435456;

const int item_throw = 536870912;

const int item_swd = 16384;

const int item_axe = 32768;

const int item_2hd_swd = 65536;

const int item_2hd_axe = 131072;

const int item_bow = 524288;

const int item_crossbow = 1048576;

const int item_amulet = 4194304;

const int item_ring = 2048;

const int dam_invalid = 0;

const int dam_barrier = 1;

const int dam_blunt = 2;

const int dam_edge = 4;

const int dam_fire = 8;

const int dam_fly = 16;

const int dam_magic = 32;

const int dam_point = 64;

const int dam_fall = 128;

const int dam_index_barrier = 0;

const int dam_index_blunt = 1;

const int dam_index_edge = 2;

const int dam_index_fire = 3;

const int dam_index_fly = 4;

const int dam_index_magic = 5;

const int dam_index_point = 6;

const int dam_index_fall = 7;

const int dam_index_max = 8;

const int npc_attack_finish_distance = 180;

const int npc_burn_ticks_per_damage_point = 100;

const int dam_critical_multiplier = 2;

const int blood_size_divisor = 1000;

const int blood_damage_max = 200;

const int damage_fly_cm_max = 2000;

const int damage_fly_cm_min = 300;

const int damage_fly_cm_per_point = 5;

const int npc_dam_dive_time = 100;

const int prot_barrier = 0;

const int prot_blunt = 1;

const int prot_edge = 2;

const int prot_fire = 3;

const int prot_fly = 4;

const int prot_magic = 5;

const int prot_point = 6;

const int prot_fall = 7;

const int prot_index_max = 8;

const int npc_talent_unknown = 0;

const int npc_talent_1h = 1;

const int npc_talent_2h = 2;

const int npc_talent_bow = 3;

const int npc_talent_crossbow = 4;

const int npc_talent_picklock = 5;

const int npc_talent_pickpocket = 6;

const int npc_talent_mage = 7;

const int npc_talent_sneak = 8;

const int npc_talent_regenerate = 9;

const int npc_talent_firemaster = 10;

const int npc_talent_acrobat = 11;

const int npc_talent_max = 12;

const int perc_assessplayer = 1;

const int perc_assessenemy = 2;

const int perc_assessfighter = 3;

const int perc_assessbody = 4;

const int perc_assessitem = 5;

const int sense_see = 1;

const int sense_hear = 2;

const int sense_smell = 4;

const int perc_assessmurder = 6;

const int perc_assessdefeat = 7;

const int perc_assessdamage = 8;

const int perc_assessothersdamage = 9;

const int perc_assessthreat = 10;

const int perc_assessremoveweapon = 11;

const int perc_observeintruder = 12;

const int perc_assessfightsound = 13;

const int perc_assessquietsound = 14;

const int perc_assesswarn = 15;

const int perc_catchthief = 16;

const int perc_assesstheft = 17;

const int perc_assesscall = 18;

const int perc_assesstalk = 19;

const int perc_assessgivenitem = 20;

const int perc_assessfakeguild = 21;

const int perc_movemob = 22;

const int perc_movenpc = 23;

const int perc_drawweapon = 24;

const int perc_observesuspect = 25;

const int perc_npccommand = 26;

const int perc_assessmagic = 27;

const int perc_assessstopmagic = 28;

const int perc_assesscaster = 29;

const int perc_assesssurprise = 30;

const int perc_assessenterroom = 31;

const int perc_assessusemob = 32;

const int news_dont_spread = 0;

const int news_spread_npc_friendly_towards_victim = 1;

const int news_spread_npc_friendly_towards_witness = 2;

const int news_spread_npc_friendly_towards_offender = 3;

const int news_spread_npc_same_guild_victim = 4;

const int important = 1;

const int inf_tell = 0;

const int inf_unknown = 2;

const int log_running = 1;

const int log_success = 2;

const int log_failed = 3;

const int log_obsolete = 4;

const int att_friendly = 3;

const int att_neutral = 2;

const int att_angry = 1;

const int att_hostile = 0;

const int gil_none = 0;

const int gil_human = 1;

const int gil_ebr = 1;

const int gil_grd = 2;

const int gil_stt = 3;

const int gil_kdf = 4;

const int gil_vlk = 5;

const int gil_kdw = 6;

const int gil_sld = 7;

const int gil_org = 8;

const int gil_bau = 9;

const int gil_sfb = 10;

const int gil_gur = 11;

const int gil_nov = 12;

const int gil_tpl = 13;

const int gil_dmb = 14;

const int gil_bab = 15;

const int gil_seperator_hum = 16;

const int max_guilds = 16;

const int gil_waran = 17;

const int gil_slf = 18;

const int gil_gobbo = 19;

const int gil_troll = 20;

const int gil_snapper = 21;

const int gil_minecrawler = 22;

const int gil_meatbug = 23;

const int gil_scavenger = 24;

const int gil_demon = 25;

const int gil_wolf = 26;

const int gil_shadowbeast = 27;

const int gil_bloodfly = 28;

const int gil_swampshark = 29;

const int gil_zombie = 30;

const int gil_undeadorc = 31;

const int gil_skeleton = 32;

const int gil_orcdog = 33;

const int gil_molerat = 34;

const int gil_golem = 35;

const int gil_lurker = 36;

const int gil_seperator_orc = 37;

const int gil_orcshaman = 38;

const int gil_orcwarrior = 39;

const int gil_orcscout = 40;

const int gil_orcslave = 41;

const int gil_max = 42;

class c_gilvalues {
    var int water_depth_knee[42];
    var int water_depth_chest[42];
    var int jumpup_height[42];
    var int swim_time[42];
    var int dive_time[42];
    var int step_height[42];
    var int jumplow_height[42];
    var int jumpmid_height[42];
    var int slide_angle[42];
    var int slide_angle2[42];
    var int disable_autoroll[42];
    var int surface_align[42];
    var int climb_heading_angle[42];
    var int climb_horiz_angle[42];
    var int climb_ground_angle[42];
    var int fight_range_base[42];
    var int fight_range_fist[42];
    var int fight_range_1hs[42];
    var int fight_range_1ha[42];
    var int fight_range_2hs[42];
    var int fight_range_2ha[42];
    var int falldown_height[42];
    var int falldown_damage[42];
    var int blood_disabled[42];
    var int blood_max_distance[42];
    var int blood_amount[42];
    var int blood_flow[42];
    var string blood_emitter[42];
    var string blood_texture[42];
    var int turn_speed[42];
};

const int npc_sound_droptake = 1;

const int npc_sound_speak = 3;

const int npc_sound_steps = 4;

const int npc_sound_throwcoll = 5;

const int npc_sound_drawweapon = 6;

const int npc_sound_scream = 7;

const int npc_sound_fight = 8;

const int mat_wood = 0;

const int mat_stone = 1;

const int mat_metal = 2;

const int mat_leather = 3;

const int mat_clay = 4;

const int mat_glas = 5;

const int log_mission = 0;

const int log_note = 1;

const int time_infinite = -1000;

const int npc_voice_variation_max = 10;

const string font_book_heading = "font_15_book.tga";

const string font_book_text = "font_10_book.tga";

const string font_old_10 = "FONT_OLD_10_WHITE.TGA";

const string font_old_20 = "font_old_20_white.tga";

const int max_chapter = 5;

const int max_missions = 5;

class c_npc {
    var int id;
    var string name[5];
    var string slot;
    var int npctype;
    var int flags;
    var int attribute[8];
    var int protection[8];
    var int damage[8];
    var int damagetype;
    var int guild;
    var int level;
    var func mission[5];
    var int fight_tactic;
    var int weapon;
    var int voice;
    var int voicepitch;
    var int bodymass;
    var func daily_routine;
    var func start_aistate;
    var string spawnpoint;
    var int spawndelay;
    var int senses;
    var int senses_range;
    var int aivar[50];
    var string wp;
    var int exp;
    var int exp_next;
    var int lp;
};

class c_mission {
    var string name;
    var string description;
    var int duration;
    var int important;
    var func offerconditions;
    var func offer;
    var func successconditions;
    var func success;
    var func failureconditions;
    var func failure;
    var func obsoleteconditions;
    var func obsolete;
    var func running;
};

class c_item {
    var int id;
    var string name;
    var string nameid;
    var int hp;
    var int hp_max;
    var int mainflag;
    var int flags;
    var int weight;
    var int value;
    var int damagetype;
    var int damagetotal;
    var int damage[8];
    var int wear;
    var int protection[8];
    var int nutrition;
    var int cond_atr[3];
    var int cond_value[3];
    var int change_atr[3];
    var int change_value[3];
    var func magic;
    var func on_equip;
    var func on_unequip;
    var func on_state[4];
    var func owner;
    var int ownerguild;
    var int disguiseguild;
    var string visual;
    var string visual_change;
    var int visual_skin;
    var string scemename;
    var int material;
    var int munition;
    var int spell;
    var int range;
    var int mag_circle;
    var string description;
    var string text[6];
    var int count[6];
};

class c_focus {
    var float npc_longrange;
    var float npc_range1;
    var float npc_range2;
    var float npc_azi;
    var float npc_elevdo;
    var float npc_elevup;
    var int npc_prio;
    var float item_range1;
    var float item_range2;
    var float item_azi;
    var float item_elevdo;
    var float item_elevup;
    var int item_prio;
    var float mob_range1;
    var float mob_range2;
    var float mob_azi;
    var float mob_elevdo;
    var float mob_elevup;
    var int mob_prio;
};

class c_info {
    var int npc;
    var int nr;
    var int important;
    var func condition;
    var func information;
    var string description;
    var int trade;
    var int permanent;
};

class c_itemreact {
    var int npc;
    var int trade_item;
    var int trade_amount;
    var int requested_cat;
    var int requested_item;
    var int requested_amount;
    var func reaction;
};

var c_npc self;

var c_npc other;

var c_npc victim;

var c_item item;

var c_npc hero;

const int target_collect_none = 0;

const int target_collect_caster = 1;

const int target_collect_focus = 2;

const int target_collect_all = 3;

const int target_collect_focus_fallback_none = 4;

const int target_collect_focus_fallback_caster = 5;

const int target_collect_all_fallback_none = 6;

const int target_collect_all_fallback_caster = 7;

const int target_type_all = 1;

const int target_type_items = 2;

const int target_type_npcs = 4;

const int target_type_orcs = 8;

const int target_type_humans = 16;

const int target_type_undead = 32;

const int max_spell = 59;

const int spl_light = 0;

const int spl_fireball = 1;

const int spl_transform = 2;

const int spl_fear = 3;

const int spl_heal = 4;

const int spl_lightning = 5;

const int spl_summondemon = 6;

const int spl_summonskeleton = 7;

const int spl_forget = 8;

const int spl_windfist = 9;

const int spl_telekinesis = 10;

const int spl_charm = 11;

const int spl_sleep = 12;

const int spl_pyrokinesis = 13;

const int spl_massdeath = 14;

const int spl_control = 15;

const int spl_destroyundead = 16;

const int spl_firebolt = 17;

const int spl_firestorm = 18;

const int spl_firerain = 19;

const int spl_speed = 20;

const int spl_teleport1 = 21;

const int spl_teleport2 = 22;

const int spl_teleport3 = 23;

const int spl_teleport4 = 24;

const int spl_teleport5 = 25;

const int spl_trf_bloodfly = 26;

const int spl_trf_bloodhound = 27;

const int spl_trf_crawler = 28;

const int spl_trf_lurker = 29;

const int spl_trf_meatbug = 30;

const int spl_trf_molerat = 31;

const int spl_trf_orcdog = 32;

const int spl_trf_razor = 33;

const int spl_trf_scavenger = 34;

const int spl_trf_scavenger2 = 35;

const int spl_trf_shadowbeast = 36;

const int spl_trf_snapper = 37;

const int spl_trf_waran = 38;

const int spl_trf_wolf = 39;

const int spl_chainlightning = 40;

const int spl_thunderbolt = 41;

const int spl_thunderball = 42;

const int spl_icecube = 43;

const int spl_icewave = 44;

const int spl_summongolem = 45;

const int spl_armyofdarkness = 46;

const int spl_stormfist = 47;

const int spl_telekinesis2 = 48;

const int spl_breathofdeath = 49;

const int spl_shrink = 50;

const int spl_undress = 51;

const int spl_dance = 52;

const int spl_berzerk = 53;

const int spl_new1 = 54;

const int spl_new2 = 55;

const int spl_new3 = 56;

const int spl_new4 = 57;

const int spl_new5 = 58;

class c_spell {
    var float time_per_mana;
    var int damage_per_level;
    var int damagetype;
    var int spelltype;
    var int canturnduringinvest;
    var int canchangetargetduringinvest;
    var int ismultieffect;
    var int targetcollectalgo;
    var int targetcollecttype;
    var int targetcollectrange;
    var int targetcollectazi;
    var int targetcollectelev;
};

prototype c_spell_proto(c_spell) {
    time_per_mana = 500.0;
    damage_per_level = 1;
    damagetype = dam_blunt;
    spelltype = spell_bad;
    canturnduringinvest = 1;
    canchangetargetduringinvest = 1;
    ismultieffect = 0;
    targetcollectalgo = target_collect_focus_fallback_none;
    targetcollecttype = target_type_all;
    targetcollectrange = 10000;
    targetcollectazi = 60;
    targetcollectelev = 60;
};

const int bs_flag_interruptable = 32768;

const int bs_flag_freehands = 65536;

const int bs_stand = 98304;

const int bs_walk = 32769;

const int bs_sneak = 32770;

const int bs_run = 3;

const int bs_sprint = 4;

const int bs_swim = 5;

const int bs_crawl = 6;

const int bs_dive = 7;

const int bs_jump = 8;

const int bs_climb = 32777;

const int bs_fall = 10;

const int bs_sit = 65547;

const int bs_lie = 12;

const int bs_inventory = 13;

const int bs_iteminteract = 32782;

const int bs_mobinteract = 15;

const int bs_mobinteract_interrupt = 32784;

const int bs_takeitem = 17;

const int bs_dropitem = 18;

const int bs_throwitem = 19;

const int bs_pickpocket = 32788;

const int bs_stumble = 21;

const int bs_unconscious = 22;

const int bs_dead = 23;

const int bs_aimnear = 24;

const int bs_aimfar = 25;

const int bs_hit = 32794;

const int bs_parade = 27;

const int bs_casting = 32796;

const int bs_petrified = 29;

const int bs_controlling = 32798;

const int bs_max = 31;

const int bs_mod_hidden = 128;

const int bs_mod_drunk = 256;

const int bs_mod_nuts = 512;

const int bs_mod_burning = 1024;

const int bs_mod_controlled = 2048;

const int bs_mod_transformed = 4096;

const string mob_sit = "BENCH,CHAIR,GROUND,THRONE";

const string mob_lie = "BED,BEDHIGH,BEDLOW";

const string mob_climb = "CLIMB,LADDER,RANKE";

const string mob_notinterruptable = "BARRELO,DOOR,HERB,IDOL,LEVER,LOVEBED,PAN,SECRETDOOR,SMOKE,TOUCHPLATE,TURNSWITCH,VWHEEL";

const int pd_ta_frame = 1;

const int pd_ta_loop = 2;

const int pd_ta_check = 3;

const int pd_ta_detail = 4;

const int pd_zs_frame = 6;

const int pd_zs_loop = 7;

const int pd_zs_check = 8;

const int pd_zs_detail = 9;

const int pd_mst_frame = 11;

const int pd_mst_loop = 12;

const int pd_mst_check = 13;

const int pd_mst_detail = 14;

const int pd_orc_frame = 16;

const int pd_orc_loop = 17;

const int pd_orc_check = 18;

const int pd_orc_detail = 19;

const int pd_mission = 21;

const int pd_cutscene = 22;

const int pd_spell = 23;

const int pd_item_mobsi = 24;

const int pd_magic = 25;

func void printdebugs(var string txt) {
    printdebug(self.name);
    printdebug(txt);
};

func void printdebugnpc(var int type, var string text) {
    var string pipe;
    var int instance_id;
    var string inst_id;

    instance_id = self.id;
    inst_id = inttostring(instance_id);
    pipe = concatstrings("### ", self.name);
    pipe = concatstrings(pipe, "(");
    pipe = concatstrings(pipe, inst_id);
    pipe = concatstrings(pipe, ")");
    pipe = concatstrings(pipe, " ### -> ");
    pipe = concatstrings(pipe, text);
    printdebuginstch(type, pipe);
};

func void printglobals(var int channel) {
    var string pipe;

    printdebugnpc(channel, "PrintGlobals");
    if (hlp_isvalidnpc(self)) {
        pipe = concatstrings("...self:   ", self.name);
        printdebugnpc(channel, pipe);
    };
    if (hlp_isvalidnpc(other)) {
        pipe = concatstrings("...other:  ", other.name);
        printdebugnpc(channel, pipe);
    };
    if (hlp_isvalidnpc(victim)) {
        pipe = concatstrings("...victim: ", victim.name);
        printdebugnpc(channel, pipe);
    };
    if (hlp_isvalidnpc(hero)) {
        pipe = concatstrings("...hero:   ", hero.name);
        printdebugnpc(channel, pipe);
    };
    if (hlp_isvaliditem(item)) {
        pipe = concatstrings("...item:   ", item.name);
        printdebugnpc(channel, pipe);
    };
};

func void printguild(var int channel, var int guild) {
    printdebugnpc(channel, "PrintGuild");
    if (guild == gil_none) {
        printdebugnpc(channel, "...Gilde: GIL_NONE");
    };
    if (guild == gil_ebr) {
        printdebugnpc(channel, "...Gilde: GIL_EBR");
    };
    if (guild == gil_grd) {
        printdebugnpc(channel, "...Gilde: GIL_GRD");
    };
    if (guild == gil_stt) {
        printdebugnpc(channel, "...Gilde: GIL_STT");
    };
    if (guild == gil_kdf) {
        printdebugnpc(channel, "...Gilde: GIL_KDF");
    };
    if (guild == gil_vlk) {
        printdebugnpc(channel, "...Gilde: GIL_VLK");
    };
    if (guild == gil_kdw) {
        printdebugnpc(channel, "...Gilde: GIL_KDW");
    };
    if (guild == gil_sld) {
        printdebugnpc(channel, "...Gilde: GIL_SLD");
    };
    if (guild == gil_org) {
        printdebugnpc(channel, "...Gilde: GIL_ORG");
    };
    if (guild == gil_bau) {
        printdebugnpc(channel, "...Gilde: GIL_BAU");
    };
    if (guild == gil_sfb) {
        printdebugnpc(channel, "...Gilde: GIL_SFB");
    };
    if (guild == gil_gur) {
        printdebugnpc(channel, "...Gilde: GIL_GUR");
    };
    if (guild == gil_nov) {
        printdebugnpc(channel, "...Gilde: GIL_NOV");
    };
    if (guild == gil_tpl) {
        printdebugnpc(channel, "...Gilde: GIL_TPL");
    };
    if (guild == gil_dmb) {
        printdebugnpc(channel, "...Gilde: GIL_DMB");
    };
    if (guild == gil_bab) {
        printdebugnpc(channel, "...Gilde: GIL_BAB");
    };
};

func void printattitudes(var int channel) {
    var int temp_attitude;
    var int perm_attitude;

    printdebugnpc(channel, "PrintAttitudes");
    temp_attitude = npc_getattitude(self, hero);
    perm_attitude = npc_getpermattitude(self, hero);
    if (temp_attitude == att_hostile) {
        printdebugnpc(channel, "TempAttitude == ATT_HOSTILE");
    };
    if (temp_attitude == att_angry) {
        printdebugnpc(channel, "TempAttitude == ATT_ANGRY");
    };
    if (temp_attitude == att_neutral) {
        printdebugnpc(channel, "TempAttitude == ATT_NEUTRAL");
    };
    if (temp_attitude == att_friendly) {
        printdebugnpc(channel, "TempAttitude == ATT_FRIENDLY");
    };
    if (perm_attitude == att_hostile) {
        printdebugnpc(channel, "PermAttitude == ATT_HOSTILE");
    };
    if (perm_attitude == att_angry) {
        printdebugnpc(channel, "PermAttitude == ATT_ANGRY");
    };
    if (perm_attitude == att_neutral) {
        printdebugnpc(channel, "PermAttitude == ATT_NEUTRAL");
    };
    if (perm_attitude == att_friendly) {
        printdebugnpc(channel, "PermAttitude == ATT_FRIENDLY");
    };
};

func void printdebugint(var int channel, var string pretext, var int value) {
    var string printtext;

    printtext = inttostring(value);
    printtext = concatstrings(pretext, printtext);
    printdebugnpc(channel, printtext);
};

func void printdebugstring(var int channel, var string pretext, var string text) {
    printdebugnpc(channel, concatstrings(pretext, text));
};

const int aiv_wanteditem = 0;

const int aiv_pcisstronger = 1;

const int aiv_beenattacked = 2;

const int aiv_highwaymen = 3;

const int aiv_has_erpressed = 4;

const int aiv_beggar = 5;

const int aiv_observeintruder = 6;

const int aiv_findable = 7;

const int aiv_plundered = 8;

const int aiv_warntarget = 9;

const int aiv_lasthitbyrangedweapon = 10;

const int aiv_hasbeendefeatedinportalroom = 11;

const int aiv_hangaroundstatus = 12;

const int aiv_trigger3 = 13;

const int aiv_guardmemory = 14;

const int aiv_guarditerator = 15;

const int aiv_fightspeachflag = 16;

const int aiv_itemstatus = 17;

const int aiv_itemfreq = 18;

const int aiv_wasdefeatedbysc = 19;

const int aiv_hasdefeatedsc = 20;

const int aiv_islooking = 21;

const int aiv_important = 22;

const int aiv_movingmob = 23;

const int aiv_mission1 = 24;

const int aiv_mission2 = 25;

const int aiv_mission3 = 26;

const int aiv_guardpassage_status = 27;

const int aiv_gps_begin = 0;

const int aiv_gps_firstwarn = 1;

const int aiv_gps_lastwarn = 2;

const int aiv_gps_punish = 3;

const int aiv_lastdisttowp = 28;

const int aiv_passgate = 29;

const int aiv_didwaittoclearroom = 30;

const int aiv_foundperson = 31;

const int aiv_location = 32;

const int aiv_invincible = 33;

const int aiv_dontusemob = 34;

const int aiv_attackreason = 35;

const int aiv_ar_none = 0;

const int aiv_ar_intruder = 1;

const int aiv_partymember = 36;

const int aiv_specialcombatdamagereaction = 37;

const int aiv_respawn = 38;

const int aiv_lasttarget = 39;

const int aiv_talkbeforeattack = 40;

const int aiv_dealday = 41;

const int aiv_itemschwein = 42;

const int aiv_pcstartedtalk = 21;

const int npctype_ambient = 0;

const int npctype_main = 1;

const int npctype_guard = 2;

const int npctype_friend = 3;

const int npctype_mine_ambient = 4;

const int npctype_mine_guard = 5;

const int npctype_ow_ambient = 6;

const int npctype_ow_guard = 7;

const int npctype_rogue = 8;

const int fai_monster_master = 1;

const int fai_human_coward = 2;

const int fai_human_strong = 3;

const int fai_human_master = 4;

const int fai_minecrawler = 5;

const int fai_demon = 6;

const int fai_gobbo = 7;

const int fai_golem = 8;

const int fai_lurker = 9;

const int fai_monster_coward = 10;

const int fai_molerat = 11;

const int fai_orc = 12;

const int fai_orcdog = 13;

const int fai_orcundead = 14;

const int fai_scavenger = 15;

const int fai_shadowbeast = 16;

const int fai_skeleton = 17;

const int fai_snapper = 18;

const int fai_swampshark = 19;

const int fai_troll = 20;

const int fai_waran = 21;

const int fai_wolf = 22;

const int fai_zombie = 23;

const int fai_bloodfly = 24;

const int fai_human_mage = 25;

const int fai_monster_strong = 26;

const int fai_minecrawlerqueen = 27;

const int fai_sleeper = 28;

const int fai_human_ranged = 29;

const int default = 0;

const int face_normal = 0;

const int face_mage = 1;

const int face_fighter = 2;

const int face_thief = 3;

const int face_guru = 4;

const int face_novice = 5;

const int npc_angry_time = 120;

const int start_loop = 1;

const int start_noloop = 0;

const int loop_continue = 0;

const int loop_end = 1;

const int true = 1;

const int false = 0;

const int hai_dist_melee = 600;

const int hai_dist_ranged = 3000;

const int hai_dist_abort_melee = 1000;

const int hai_dist_abort_ranged = 3500;

const int hai_dist_abort_flee = 3000;

const int hai_dist_assesscaster = 2000;

const int hai_dist_helpattackedcharges = 2000;

const int hai_dist_assess_monster = 1000;

const int hai_dist_abort_assess_monster = 1200;

const int hai_dist_attack_monster = 1000;

const int hai_dist_catchthief = 150;

const int hai_dist_assesstheft = 800;

const int hai_dist_abortpursuit = 1000;

const int hai_dist_actionrange = 1500;

const int hai_dist_clearroom = 700;

const int hai_dist_hearroomintruder = 700;

const int hai_dist_smalltalk = 500;

const int hai_dist_observeintruder = 100;

const int hai_dist_guardobserveintruder = 500;

const int hai_dist_guardpassage_reset = 1500;

const int hai_dist_guardpassage_attention = 1200;

const int hai_dist_followpc = 500;

const int hai_dist_guidepc = 500;

const int hai_dist_assesstoleratedenemy = 1000;

const int hai_dist_watch = 1500;

const int hai_dist_detectusemob = 1500;

const int hai_dist_regaindroppedweapon = 1500;

const int hai_time_pursuit = 20;

const int hai_time_follow = 10;

const int hai_time_unconscious = 20;

const int hai_time_turnaway = 20;

const int aiv_mm_percrange = 1;

const int aiv_mm_drohrange = 2;

const int aiv_mm_attackrange = 3;

const int aiv_mm_drohtime = 4;

const int aiv_mm_followtime = 5;

const int aiv_mm_followinwater = 6;

const int aiv_mm_behaviour = 7;

const int passive = 0;

const int hunter = 1;

const int packhunter = 2;

const int aiv_mm_temp_prio = 8;

const int prio_prey = 0;

const int prio_attacker = 1;

const int aiv_mm_sleepstart = 9;

const int aiv_mm_sleepend = 10;

const int aiv_mm_reststart = 11;

const int aiv_mm_restend = 12;

const int aiv_mm_roamstart = 13;

const int aiv_mm_roamend = 14;

const int aiv_mm_eatgroundstart = 15;

const int aiv_mm_eatgroundend = 16;

const int aiv_mm_wuselstart = 17;

const int aiv_mm_wuselend = 18;

const int onlyroutine = -1;

const int aiv_mm_shrinkstate = 19;

const int aiv_mm_disttomaster = 20;

const int aiv_mm_timeloosehp = 21;

const int aiv_mm_real_id = 22;

const int id_none = 0;

const int id_wolf = 1;

const int id_blackwolf = 2;

const int id_snapper = 3;

const int id_orcbiter = 4;

const int id_shadowbeast = 5;

const int id_bloodhound = 6;

const int id_troll = 7;

const int id_waran = 8;

const int id_firewaran = 9;

const int id_razor = 10;

const int id_lurker = 11;

const int id_swampshark = 12;

const int id_minecrawler = 13;

const int id_minecrawlerwarrior = 14;

const int id_bloodfly = 15;

const int id_blackgobbo = 16;

const int id_gobbo = 17;

const int id_scavenger = 18;

const int id_skeleton = 19;

const int id_skeletonwarrior = 20;

const int id_skeletonscout = 21;

const int id_skeletonmage = 22;

const int id_demon = 23;

const int id_demonlord = 24;

const int id_minecrawlerqueen = 25;

const int id_molerat = 26;

const int id_undeadorcwarrior = 27;

const int id_undeadorcshaman = 28;

const int id_harpie = 29;

const int id_sleeper = 30;

const int id_stonegolem = 31;

const int id_firegolem = 32;

const int id_icegolem = 33;

const int id_meatbug = 34;

const int id_zombie = 35;

const int aiv_mm_partymember = 23;

const int aiv_mm_deathinvgiven = 24;

const int mid_canyontroll = 5000;

const int mid_thekeeper = 5001;

const int mid_damlurker = 5002;

const int mid_youngtroll = 5003;

const int perc_dist_close = 100;

const int perc_dist_flee = 300;

const int perc_dist_dialog = 500;

const int perc_dist_watchfight = 600;

const int perc_dist_intermediat = 1000;

const int perc_dist_max = 2000;

func void b_setcutsceneperceptions() {
    printdebugnpc(pd_zs_check, self.name);
    printdebugnpc(pd_zs_check, "CutscenePerceptions");
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assessthreat, b_assessfighter);
    npc_percenable(self, perc_assesstheft, b_assesstheft);
    npc_percenable(self, perc_drawweapon, b_assessfighter);
    npc_percenable(self, perc_assesstalk, b_assesstalk);
    npc_percenable(self, perc_assessdamage, zs_reacttodamage);
    npc_percenable(self, perc_catchthief, zs_catchthief);
};

func void initperceptions() {
    perc_setrange(perc_assessmurder, hai_dist_ranged);
    perc_setrange(perc_assessdefeat, hai_dist_ranged);
    perc_setrange(perc_assessdamage, perc_dist_flee);
    perc_setrange(perc_assessothersdamage, perc_dist_intermediat);
    perc_setrange(perc_assessthreat, hai_dist_ranged);
    perc_setrange(perc_assessremoveweapon, perc_dist_max);
    perc_setrange(perc_observeintruder, hai_dist_observeintruder);
    perc_setrange(perc_assessfightsound, hai_dist_helpattackedcharges);
    perc_setrange(perc_assessquietsound, perc_dist_intermediat);
    perc_setrange(perc_assesswarn, 3000);
    perc_setrange(perc_catchthief, hai_dist_catchthief);
    perc_setrange(perc_assesstheft, hai_dist_assesstheft);
    perc_setrange(perc_assesscall, perc_dist_intermediat);
    perc_setrange(perc_assesstalk, perc_dist_dialog);
    perc_setrange(perc_assessmagic, hai_dist_ranged);
    perc_setrange(perc_assessstopmagic, hai_dist_ranged);
    perc_setrange(perc_movemob, perc_dist_dialog);
    perc_setrange(perc_movenpc, perc_dist_dialog);
    perc_setrange(perc_drawweapon, hai_dist_melee);
    perc_setrange(perc_observesuspect, perc_dist_dialog);
    perc_setrange(perc_npccommand, perc_dist_dialog);
    perc_setrange(perc_assesscaster, hai_dist_assesscaster);
    perc_setrange(perc_assesssurprise, perc_dist_dialog);
    perc_setrange(perc_assessenterroom, hai_dist_actionrange);
    perc_setrange(perc_assessusemob, hai_dist_detectusemob);
};

func void guardperception() {
    npc_percenable(self, perc_assessenemy, b_assessenemy);
    npc_percenable(self, perc_assessplayer, b_assesssc);
    npc_percenable(self, perc_assessfighter, b_assessfighter);
    npc_percenable(self, perc_assessdamage, zs_reacttodamage);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assesscaster, b_assesscaster);
    npc_percenable(self, perc_assessthreat, b_assessfighter);
    npc_percenable(self, perc_drawweapon, b_assessfighter);
    npc_percenable(self, perc_assesswarn, b_assesswarn);
    npc_percenable(self, perc_assessmurder, zs_assessmurder);
    npc_percenable(self, perc_assessdefeat, zs_assessdefeat);
    npc_percenable(self, perc_assessfightsound, b_assessfightsound);
    npc_percenable(self, perc_assessquietsound, b_assessquietsound);
    npc_percenable(self, perc_catchthief, zs_catchthief);
    npc_percenable(self, perc_assesstheft, b_assesstheft);
    npc_percenable(self, perc_assesssurprise, zs_assesssurprise);
    npc_percenable(self, perc_observesuspect, b_observesuspect);
    npc_percenable(self, perc_observeintruder, b_observeintruder);
    npc_percenable(self, perc_assesstalk, b_assesstalk);
    npc_percenable(self, perc_assesscall, zs_reacttocall);
    npc_percenable(self, perc_assessusemob, b_assessusemob);
    npc_percenable(self, perc_assessenterroom, b_assessenterroom);
    npc_percenable(self, perc_movemob, b_movemob);
    npc_percenable(self, perc_movenpc, b_movenpc);
    npc_setperctime(self, 0.5);
};

func void observingperception() {
    npc_percenable(self, perc_assessenemy, b_assessenemy);
    npc_percenable(self, perc_assessfighter, b_assessfighter);
    npc_percenable(self, perc_assessplayer, b_assesssc);
    npc_percenable(self, perc_assessdamage, zs_reacttodamage);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assesscaster, b_assesscaster);
    npc_percenable(self, perc_assessthreat, b_assessfighter);
    npc_percenable(self, perc_assesswarn, b_assesswarn);
    npc_percenable(self, perc_assessmurder, zs_assessmurder);
    npc_percenable(self, perc_assessdefeat, zs_assessdefeat);
    npc_percenable(self, perc_drawweapon, b_assessfighter);
    npc_percenable(self, perc_assessfightsound, b_assessfightsound);
    npc_percenable(self, perc_assessquietsound, b_assessquietsound);
    npc_percenable(self, perc_catchthief, zs_catchthief);
    npc_percenable(self, perc_assesstheft, b_assesstheft);
    npc_percenable(self, perc_assesssurprise, zs_assesssurprise);
    npc_percenable(self, perc_observesuspect, b_observesuspect);
    npc_percenable(self, perc_observeintruder, b_observeintruder);
    npc_percenable(self, perc_assesstalk, b_assesstalk);
    npc_percenable(self, perc_assesscall, zs_reacttocall);
    npc_percenable(self, perc_assessusemob, b_assessusemob);
    npc_percenable(self, perc_assessenterroom, b_assessenterroom);
    npc_percenable(self, perc_movemob, b_movemob);
    npc_percenable(self, perc_movenpc, b_movenpc);
    npc_setperctime(self, 1.0);
};

func void occupiedperception() {
    npc_percenable(self, perc_assessdamage, zs_reacttodamage);
    npc_percenable(self, perc_assessthreat, b_assessfighter);
    npc_percenable(self, perc_drawweapon, b_assessfighter);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assesscaster, b_assesscaster);
    npc_percenable(self, perc_assesswarn, b_assesswarn);
    npc_percenable(self, perc_assessmurder, zs_assessmurder);
    npc_percenable(self, perc_assessdefeat, zs_assessdefeat);
    npc_percenable(self, perc_assessfightsound, b_assessfightsound);
    npc_percenable(self, perc_assesstheft, b_assesstheft);
    npc_percenable(self, perc_catchthief, zs_catchthief);
    npc_percenable(self, perc_assesssurprise, zs_assesssurprise);
    npc_percenable(self, perc_observesuspect, b_observesuspect);
    npc_percenable(self, perc_assesstalk, b_assesstalk);
    npc_percenable(self, perc_assesscall, zs_reacttocall);
    npc_percenable(self, perc_assessusemob, b_assessusemob);
    npc_percenable(self, perc_assessenterroom, b_assessenterroom);
    npc_percenable(self, perc_movemob, b_movemob);
    npc_percenable(self, perc_movenpc, b_movenpc);
};

func void deepsleepperception() {
    npc_percenable(self, perc_assessdamage, zs_reacttodamage);
    npc_percenable(self, perc_observeintruder, b_tossandturn);
    npc_percenable(self, perc_assessfightsound, b_tossandturn);
    npc_percenable(self, perc_assesswarn, b_tossandturn);
    npc_percenable(self, perc_assesstalk, b_tossandturn);
    npc_percenable(self, perc_assesscall, b_tossandturn);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
};

func void lightsleepperception() {
    npc_percenable(self, perc_assessdamage, zs_reacttodamage);
    npc_percenable(self, perc_assesswarn, zs_wakeup);
    npc_percenable(self, perc_assessfightsound, zs_wakeup);
    npc_percenable(self, perc_catchthief, zs_catchthief);
    npc_percenable(self, perc_assessquietsound, b_sleepquietsound);
    npc_percenable(self, perc_assesstalk, zs_wakeup);
    npc_percenable(self, perc_assesscall, zs_wakeup);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
};

func void b_setperception(var c_npc self) {
    observingperception();
};

func int c_amistronger(var c_npc slf, var c_npc oth) {
    printdebugnpc(pd_zs_detail, "C_AmIStronger");
    if ((2 * slf.level) > oth.level) {
        printdebugnpc(pd_zs_detail, "...yes");
        return true;
    }
    else {
        printdebugnpc(pd_zs_detail, "...no");
        return false;
    };
};

func int c_amiweaker(var c_npc slf, var c_npc oth) {
    printdebugnpc(pd_zs_detail, "C_AmIWeaker");
    if ((2 * slf.level) <= oth.level) {
        printdebugnpc(pd_zs_detail, "...yes");
        return true;
    }
    else {
        printdebugnpc(pd_zs_detail, "...no");
        return false;
    };
};

func int c_npcisinfightmode(var c_npc oth) {
    printdebugnpc(pd_zs_check, "C_NpcIsInFightMode");
    if ((npc_isinfightmode(oth, fmode_far) || npc_isinfightmode(oth, fmode_melee)) || npc_isinfightmode(oth, fmode_fist)) {
        printdebugnpc(pd_zs_check, "...true");
        return true;
    }
    else if (npc_isinfightmode(oth, fmode_magic)) {
        if (npc_getactivespellcat(oth) == spell_bad) {
            printdebugnpc(pd_zs_check, "...true");
            return true;
        }
        else {
            if ((npc_isinstate(self, zs_guardpassage) || npc_wasinstate(self, zs_guardpassage)) && ((npc_getactivespell(oth) == spl_sleep) || (npc_getactivespell(oth) == spl_charm))) {
                printdebugnpc(pd_zs_check, "...true");
                return true;
            };
        };
    }
    else {
        printdebugnpc(pd_zs_check, "...false");
        return false;
    };
};

func int c_npcisinneutralspellmode(var c_npc oth) {
    printdebugnpc(pd_zs_check, "C_NpcIsInNeutralSpellMode");
    if (npc_isinfightmode(oth, fmode_magic) && ((npc_getactivespellcat(oth) == spell_good) || (npc_getactivespellcat(oth) == spell_neutral))) {
        printdebugnpc(pd_zs_check, "...true");
        return true;
    }
    else {
        printdebugnpc(pd_zs_check, "...false");
        return false;
    };
};

func int c_npcisdown(var c_npc slf) {
    printdebugnpc(pd_zs_detail, "C_NpcIsDown");
    if ((npc_isinstate(slf, zs_unconscious) || npc_isinstate(slf, zs_magicsleep)) || npc_isdead(slf)) {
        printdebugnpc(pd_zs_detail, "...true");
        return true;
    }
    else {
        printdebugnpc(pd_zs_detail, "...false");
        return false;
    };
};

func int c_npcishuman(var c_npc slf) {
    printdebugnpc(pd_zs_detail, "C_NpcIsHuman");
    printdebugstring(pd_zs_detail, "...name: ", slf.name);
    if (slf.guild < gil_seperator_hum) {
        printdebugnpc(pd_zs_detail, "...true");
        return true;
    }
    else {
        printdebugnpc(pd_zs_detail, "...false");
        return false;
    };
};

func int c_npcismonster(var c_npc slf) {
    printdebugnpc(pd_zs_detail, "C_NpcIsMonster");
    printdebugstring(pd_zs_detail, "...name: ", slf.name);
    if ((slf.guild > gil_seperator_hum) && (slf.guild < gil_seperator_orc)) {
        printdebugnpc(pd_zs_detail, "...true");
        return true;
    }
    else {
        printdebugnpc(pd_zs_detail, "...false");
        return false;
    };
};

func int c_npcisorc(var c_npc slf) {
    printdebugnpc(pd_zs_detail, "C_NpcIsOrc");
    if (slf.guild > gil_seperator_orc) {
        printdebugnpc(pd_zs_detail, "...true");
        return true;
    }
    else {
        printdebugnpc(pd_zs_detail, "...false");
        return false;
    };
};

func int c_npcisdangerousmonster(var c_npc slf, var c_npc oth) {
    printdebugnpc(pd_zs_detail, "C_NpcIsDangerousMonster");
    if ((((c_npcismonster(oth) || c_npcisorc(oth)) && (wld_getguildattitude(oth.guild, slf.guild) == att_hostile)) && (!oth.aivar[23])) && (!c_npcisdown(oth))) {
        printdebugnpc(pd_zs_detail, "...true");
        return true;
    };
    printdebugnpc(pd_zs_detail, "...false");
    return false;
};

func int c_npcismonstermage(var c_npc slf) {
    printdebugnpc(pd_zs_detail, "C_NpcIsMonsterMage");
    if ((slf.fight_tactic == fai_human_mage) && ((((slf.guild == gil_demon) || (slf.guild == gil_orcshaman)) || (slf.guild == gil_undeadorc)) || (slf.guild == gil_golem))) {
        printdebugnpc(pd_zs_detail, "...true");
        return true;
    }
    else {
        printdebugnpc(pd_zs_detail, "...false");
        return false;
    };
};

func void npc_setpermattitude(var c_npc slf, var int att) {
    printdebugnpc(pd_zs_detail, "Npc_SetPermAttitude()");
    npc_setattitude(slf, att);
    npc_settempattitude(slf, att);
};

func int npc_gettempattitude(var c_npc slf, var c_npc oth) {
    printdebugnpc(pd_zs_detail, "Npc_GetTempAttitude()");
    if (hlp_isvalidnpc(slf) && hlp_isvalidnpc(oth)) {
        return npc_getattitude(slf, oth);
    }
    else {
        return att_neutral;
    };
};

func int c_bodystatecontains(var c_npc slf, var int bodystate) {
    printdebugnpc(pd_zs_detail, "C_BodyStateContains()");
    printdebugint(pd_zs_detail, "bodystate: ", bodystate);
    printdebugint(pd_zs_detail, "bodystate&(BS_MAX|BS_FLAG_INTERRUPTABLE|BS_FLAG_FREEHANDS): ", bodystate & ((bs_max | bs_flag_interruptable) | bs_flag_freehands));
    printdebugint(pd_zs_detail, "Npc_GetBodyState(slf): ", npc_getbodystate(slf));
    printdebugint(pd_zs_detail, "Npc_GetBodyState(slf)&(BS_MAX|BS_FLAG_INTERRUPTABLE|BS_FLAG_FREEHANDS): ", npc_getbodystate(slf) & ((bs_max | bs_flag_interruptable) | bs_flag_freehands));
    if ((npc_getbodystate(slf) & ((bs_max | bs_flag_interruptable) | bs_flag_freehands)) == (bodystate & ((bs_max | bs_flag_interruptable) | bs_flag_freehands))) {
        printdebugnpc(pd_zs_detail, "...true");
        return true;
    }
    else {
        printdebugnpc(pd_zs_detail, "...false");
        return false;
    };
};

func int c_npctypeisfriend(var c_npc slf, var c_npc oth) {
    printdebugnpc(pd_zs_detail, "C_NpcTypeIsFriend()");
    if (npc_isplayer(oth) && (slf.npctype == npctype_friend)) {
        printdebugnpc(pd_zs_detail, "...true");
        return true;
    }
    else {
        printdebugnpc(pd_zs_detail, "...false");
        return false;
    };
};

func int c_npcisguard(var c_npc slf) {
    printdebugnpc(pd_zs_detail, "C_NpcIsGuard");
    if ((((slf.npctype == npctype_guard) || (slf.npctype == npctype_ow_guard)) || (slf.npctype == npctype_mine_guard)) || (((slf.npctype == npctype_main) || (slf.npctype == npctype_friend)) && (((slf.guild == gil_grd) || (slf.guild == gil_sld)) || (slf.guild == gil_tpl)))) {
        if (slf.fight_tactic != fai_human_ranged) {
            printdebugnpc(pd_zs_detail, "...true!");
            return true;
        };
    };
    printdebugnpc(pd_zs_detail, "...false!");
    return false;
};

func int c_npcisguardarcher(var c_npc slf) {
    printdebugnpc(pd_zs_detail, "C_NpcIsGuardArcher");
    if ((((slf.npctype == npctype_guard) || (slf.npctype == npctype_ow_guard)) || (slf.npctype == npctype_mine_guard)) || (((slf.npctype == npctype_main) || (slf.npctype == npctype_friend)) && (((slf.guild == gil_grd) || (slf.guild == gil_sld)) || (slf.guild == gil_tpl)))) {
        if (slf.fight_tactic == fai_human_ranged) {
            printdebugnpc(pd_zs_detail, "...true!");
            return true;
        };
    };
    printdebugnpc(pd_zs_detail, "...false!");
    return false;
};

func int c_npcisboss(var c_npc slf) {
    printdebugnpc(pd_zs_detail, "C_NpcIsBoss");
    if ((((slf.guild == gil_ebr) || (slf.guild == gil_kdf)) || (slf.guild == gil_kdw)) || (slf.guild == gil_gur)) {
        printdebugnpc(pd_zs_detail, "...true");
        return true;
    }
    else {
        printdebugnpc(pd_zs_detail, "...false");
        return false;
    };
};

func int c_npcisworker(var c_npc slf) {
    printdebugnpc(pd_zs_detail, "C_NpcIsWorker");
    if ((((((slf.guild == gil_vlk) || (slf.guild == gil_stt)) || (slf.guild == gil_bau)) || (slf.guild == gil_sfb)) || (slf.guild == gil_org)) || (slf.guild == gil_nov)) {
        printdebugnpc(pd_zs_detail, "...true");
        return true;
    }
    else {
        printdebugnpc(pd_zs_detail, "...false");
        return false;
    };
};

func int c_npcismage(var c_npc slf) {
    printdebugnpc(pd_zs_detail, "C_NpcIsMage");
    if (slf.attribute[atr_mana_max] /*3*/ > 0) {
        printdebugnpc(pd_zs_detail, "...true");
        return true;
    }
    else {
        printdebugnpc(pd_zs_detail, "...false");
        return false;
    };
};

func int c_npcbelongstooldcamp(var c_npc slf) {
    printdebugnpc(pd_zs_detail, "C_NpcBelongsToOldCamp");
    if (((((slf.guild == gil_vlk) || (slf.guild == gil_stt)) || (slf.guild == gil_grd)) || (slf.guild == gil_kdf)) || (slf.guild == gil_ebr)) {
        printdebugnpc(pd_zs_detail, "...TRUE");
        return true;
    }
    else {
        printdebugnpc(pd_zs_detail, "...FALSE");
        return false;
    };
};

func int c_npcbelongstonewcamp(var c_npc slf) {
    printdebugnpc(pd_zs_detail, "C_NpcBelongsToNewCamp");
    if (((((slf.guild == gil_bau) || (slf.guild == gil_sfb)) || (slf.guild == gil_org)) || (slf.guild == gil_sld)) || (slf.guild == gil_kdw)) {
        printdebugnpc(pd_zs_detail, "...TRUE");
        return true;
    }
    else {
        printdebugnpc(pd_zs_detail, "...FALSE");
        return false;
    };
};

func int c_npcbelongstopsicamp(var c_npc slf) {
    printdebugnpc(pd_zs_detail, "C_NpcBelongsToPsiCamp");
    if (((slf.guild == gil_nov) || (slf.guild == gil_tpl)) || (slf.guild == gil_gur)) {
        printdebugnpc(pd_zs_detail, "...TRUE");
        return true;
    }
    else {
        printdebugnpc(pd_zs_detail, "...FALSE");
        return false;
    };
};

func int c_chargewasattacked(var c_npc guard, var c_npc charge, var c_npc attacker) {
    printdebugnpc(pd_zs_detail, "C_ChargeWasAttacked");
    if (((c_npcisguard(guard) || c_npcisguardarcher(guard)) || (guard.npctype == npctype_guard)) || (guard.npctype == npctype_mine_guard)) {
        printdebugnpc(pd_zs_detail, "...NSC ist Wache oder FK-Wache!");
        if ((npc_getattitude(guard, charge) == att_friendly) && (npc_getattitude(guard, attacker) != att_friendly)) {
            printdebugnpc(pd_zs_detail, "...true");
            return true;
        };
    };
    printdebugnpc(pd_zs_detail, "...false");
    return false;
};

func int c_npchasspell(var c_npc slf, var int spell) {
    return npc_hasspell(slf, spell);
};

func int c_npchasammo(var c_npc slf, var int category) {
    var int count;

    printdebugnpc(pd_zs_detail, "C_NpcHasAmmo");
    if ((category != itamarrow /*4894*/) && (category != itambolt /*4895*/)) {
        printdebugnpc(pd_zs_detail, "...ung*ltige Kategorie !!!");
        return 0;
    };
    count = npc_getinvitembyslot(slf, inv_weapon, 0);
    if (hlp_isvaliditem(item) && (item.mainflag == item_kat_mun)) {
        printdebugint(pd_zs_detail, "...gefundene Anzahl: ", count);
        if (hlp_getinstanceid(item) == category) {
            printdebugstring(pd_zs_detail, "...Munitionstyp: ", item.name);
            return count;
        };
    };
    count = npc_getinvitembyslot(slf, inv_weapon, 1);
    if (hlp_isvaliditem(item) && (item.mainflag == item_kat_mun)) {
        printdebugint(pd_zs_detail, "...gefundene Anzahl: ", count);
        if (hlp_getinstanceid(item) == category) {
            printdebugstring(pd_zs_detail, "...Munitionstyp: ", item.name);
            return count;
        };
    };
    count = npc_getinvitembyslot(slf, inv_weapon, 2);
    if (hlp_isvaliditem(item) && (item.mainflag == item_kat_mun)) {
        printdebugint(pd_zs_detail, "...gefundene Anzahl: ", count);
        if (hlp_getinstanceid(item) == category) {
            printdebugstring(pd_zs_detail, "...Munitionstyp: ", item.name);
            return count;
        };
    };
    count = npc_getinvitembyslot(slf, inv_weapon, 3);
    if (hlp_isvaliditem(item) && (item.mainflag == item_kat_mun)) {
        printdebugint(pd_zs_detail, "...gefundene Anzahl: ", count);
        if (hlp_getinstanceid(item) == category) {
            printdebugstring(pd_zs_detail, "...Munitionstyp: ", item.name);
            return count;
        };
    };
    count = npc_getinvitembyslot(slf, inv_weapon, 4);
    if (hlp_isvaliditem(item) && (item.mainflag == item_kat_mun)) {
        printdebugint(pd_zs_detail, "...gefundene Anzahl: ", count);
        if (hlp_getinstanceid(item) == category) {
            printdebugstring(pd_zs_detail, "...Munitionstyp: ", item.name);
            return count;
        };
    };
    count = npc_getinvitembyslot(slf, inv_weapon, 5);
    if (hlp_isvaliditem(item) && (item.mainflag == item_kat_mun)) {
        printdebugint(pd_zs_detail, "...gefundene Anzahl: ", count);
        if (hlp_getinstanceid(item) == category) {
            printdebugstring(pd_zs_detail, "...Munitionstyp: ", item.name);
            return count;
        };
    };
    count = npc_getinvitembyslot(slf, inv_weapon, 6);
    if (hlp_isvaliditem(item) && (item.mainflag == item_kat_mun)) {
        printdebugint(pd_zs_detail, "...gefundene Anzahl: ", count);
        if (hlp_getinstanceid(item) == category) {
            printdebugstring(pd_zs_detail, "...Munitionstyp: ", item.name);
            return count;
        };
    };
    return 0;
};

func int c_npchasweapon(var c_npc slf, var int category) {
    printdebugnpc(pd_zs_frame, "C_NpcHasWeapon");
    if ((category != item_kat_nf) && (category != item_kat_ff)) {
        printdebugnpc(pd_zs_check, "...ung*ltige Kategorie !!!");
        return false;
    };
    npc_getinvitembyslot(slf, inv_weapon, 0);
    if (hlp_isvaliditem(item) && (item.mainflag == category)) {
        printdebugnpc(pd_zs_check, "...Waffe in Slot 0 !!!");
        if (category == item_kat_nf) {
            printdebugnpc(pd_zs_check, "...Nahkampfwaffe gefunden!");
            return true;
        }
        else {
            if (c_npchasammo(slf, item.munition)) {
                printdebugnpc(pd_zs_check, "...Fernkampfwaffe mit ausreichend Ammo gefunden!");
                return true;
            };
        };
    };
    npc_getinvitembyslot(slf, inv_weapon, 1);
    if (hlp_isvaliditem(item) && (item.mainflag == category)) {
        printdebugnpc(pd_zs_check, "...Waffe in Slot 1 !!!");
        if (category == item_kat_nf) {
            printdebugnpc(pd_zs_check, "...Nahkampfwaffe gefunden!");
            return true;
        }
        else {
            if (c_npchasammo(slf, item.munition)) {
                printdebugnpc(pd_zs_check, "...Fernkampfwaffe mit ausreichend Ammo gefunden!");
                return true;
            };
        };
    };
    npc_getinvitembyslot(slf, inv_weapon, 2);
    if (hlp_isvaliditem(item) && (item.mainflag == category)) {
        printdebugnpc(pd_zs_check, "...Waffe in Slot 2 !!!");
        if (category == item_kat_nf) {
            printdebugnpc(pd_zs_check, "...Nahkampfwaffe gefunden!");
            return true;
        }
        else {
            if (c_npchasammo(slf, item.munition)) {
                printdebugnpc(pd_zs_check, "...Fernkampfwaffe mit ausreichend Ammo gefunden!");
                return true;
            };
        };
    };
    npc_getinvitembyslot(slf, inv_weapon, 3);
    if (hlp_isvaliditem(item) && (item.mainflag == category)) {
        printdebugnpc(pd_zs_check, "...Waffe in Slot 3 !!!");
        if (category == item_kat_nf) {
            printdebugnpc(pd_zs_check, "...Nahkampfwaffe gefunden!");
            return true;
        }
        else {
            if (c_npchasammo(slf, item.munition)) {
                printdebugnpc(pd_zs_check, "...Fernkampfwaffe mit ausreichend Ammo gefunden!");
                return true;
            };
        };
    };
    npc_getinvitembyslot(slf, inv_weapon, 4);
    if (hlp_isvaliditem(item) && (item.mainflag == category)) {
        printdebugnpc(pd_zs_check, "...Waffe in Slot 4 !!!");
        if (category == item_kat_nf) {
            printdebugnpc(pd_zs_check, "...Nahkampfwaffe gefunden!");
            return true;
        }
        else {
            if (c_npchasammo(slf, item.munition)) {
                printdebugnpc(pd_zs_check, "...Fernkampfwaffe mit ausreichend Ammo gefunden!");
                return true;
            };
        };
    };
    npc_getinvitembyslot(slf, inv_weapon, 5);
    if (hlp_isvaliditem(item) && (item.mainflag == category)) {
        printdebugnpc(pd_zs_check, "...Waffe in Slot 5 !!!");
        if (category == item_kat_nf) {
            printdebugnpc(pd_zs_check, "...Nahkampfwaffe gefunden!");
            return true;
        }
        else {
            if (c_npchasammo(slf, item.munition)) {
                printdebugnpc(pd_zs_check, "...Fernkampfwaffe mit ausreichend Ammo gefunden!");
                return true;
            };
        };
    };
    npc_getinvitembyslot(slf, inv_weapon, 6);
    if (hlp_isvaliditem(item) && (item.mainflag == category)) {
        printdebugnpc(pd_zs_check, "...Waffe in Slot 6 !!!");
        if (category == item_kat_nf) {
            printdebugnpc(pd_zs_check, "...Nahkampfwaffe gefunden!");
            return true;
        }
        else {
            if (c_npchasammo(slf, item.munition)) {
                printdebugnpc(pd_zs_check, "...Fernkampfwaffe mit ausreichend Ammo gefunden!");
                return true;
            };
        };
    };
    return false;
};

func int c_getattackreason(var c_npc slf) {
    printdebugnpc(pd_zs_detail, "C_GetAttackReason");
    return slf.aivar[35];
};

func int c_otheristoleratedenemy(var c_npc slf, var c_npc oth) {
    var c_item weapon;
    var int weaponinstance;

    printdebugnpc(pd_zs_detail, "C_OtherIsToleratedEnemy");
    if (c_npcisorc(slf)) {
        printdebugnpc(pd_zs_detail, "...'self' ist Ork!");
        weapon = npc_getreadiedweapon(oth);
        if (hlp_isvaliditem(weapon)) {
            weaponinstance = hlp_getinstanceid(weapon);
            printdebugstring(pd_zs_detail, "...gezogene Waffe von 'other': ", weapon.name);
            if (weaponinstance == ulumulu /*4750*/) {
                printdebugnpc(pd_zs_detail, "...true!");
                return true;
            };
        };
        weapon = npc_getequippedmeleeweapon(oth);
        if (hlp_isvaliditem(weapon)) {
            weaponinstance = hlp_getinstanceid(weapon);
            printdebugstring(pd_zs_detail, "...equippte Waffe von 'other': ", weapon.name);
            if (weaponinstance == ulumulu /*4750*/) {
                printdebugnpc(pd_zs_detail, "...true!");
                return true;
            };
        };
    };
    printdebugnpc(pd_zs_detail, "...false!");
    return false;
};

func void b_tolerateenemy(var c_npc slf, var c_npc oth) {
    var int npcinstance;

    printdebugnpc(pd_zs_detail, "B_TolerateEnemy");
    if (c_npcisorc(slf) && (npc_getdisttonpc(slf, oth) < hai_dist_assesstoleratedenemy)) {
        printdebugnpc(pd_zs_detail, "...'self' ist Ork und nah genug dran!");
        npcinstance = hlp_getinstanceid(slf);
        if (((npcinstance == orcscout /*6793*/) || (npcinstance == orcwarrior1 /*6806*/)) || (npcinstance == orcwarrior2 /*6807*/)) {
            printdebugnpc(pd_zs_detail, "...'self' ist anderer Ork!");
            if (!npc_isinstate(slf, zs_upset)) {
                printdebugnpc(pd_zs_detail, "...'self' noch nicht in ZS_FollowPC");
                npc_clearaiqueue(slf);
                ai_standup(slf);
                ai_startstate(slf, zs_upset, 1, "");
            };
        }
        else {
            if (npcinstance == orcwarrior3 /*6808*/) {
                printdebugnpc(pd_zs_detail, "...'self' ist Ork Tempelkrieger!");
                if (!npc_isinstate(slf, zs_followpc)) {
                    printdebugnpc(pd_zs_detail, "...'self' noch nicht in ZS_FollowPC");
                    npc_clearaiqueue(slf);
                    ai_standup(slf);
                    ai_startstate(slf, zs_followpc, 1, "");
                };
            };
        };
    };
};

func void b_gotowpnexttonpc(var c_npc slf, var c_npc oth) {
    var string waypoint;

    printdebugnpc(pd_zs_detail, "B_GotoWPNextToNpc");
    waypoint = npc_getnextwp(oth);
    ai_gotowp(slf, waypoint);
};

func void b_cantseeturn() {
    printdebugnpc(pd_zs_detail, "B_CantSeeTurn");
    if ((!c_bodystatecontains(self, bs_sit)) && (!npc_canseenpc(self, other))) {
        printdebugnpc(pd_zs_check, "B_CantSeeTurn If");
        ai_turntonpc(self, other);
    };
};

func int c_lookatnpc(var c_npc slf, var c_npc oth) {
    ai_lookatnpc(slf, oth);
    printdebugnpc(pd_zs_detail, "C_LookAtNpc");
    return 1;
};

func int c_stoplookat(var c_npc slf) {
    ai_stoplookat(slf);
    printdebugnpc(pd_zs_detail, "C_StopLookAt");
    return 1;
};

func void b_smartturntonpc(var c_npc slf, var c_npc oth) {
    printdebugnpc(pd_zs_detail, "B_SmartTurnToNpc");
    if (!(((c_bodystatecontains(slf, bs_sit) || c_bodystatecontains(slf, bs_iteminteract)) || c_bodystatecontains(slf, bs_mobinteract)) || c_bodystatecontains(slf, bs_mobinteract_interrupt))) {
        printdebugnpc(pd_zs_detail, "...sitzt nicht und ist nicht am Mobsi");
        if (!npc_canseenpc(slf, oth)) {
            printdebugnpc(pd_zs_detail, "...kann Ziel nicht sehen!");
            ai_turntonpc(slf, oth);
        }
        else {
            c_lookatnpc(slf, oth);
        };
    };
};

func void b_say(var c_npc slf, var c_npc oth, var string text) {
    var string pipe;

    pipe = concatstrings("B_Say: ", text);
    printdebugnpc(pd_zs_frame, pipe);
    b_smartturntonpc(slf, oth);
    ai_outputsvm(slf, oth, text);
};

func void b_sayoverlay(var c_npc slf, var c_npc oth, var string text) {
    var string pipe;

    pipe = concatstrings("B_SayOverlay: ", text);
    printdebugnpc(pd_zs_frame, pipe);
    b_smartturntonpc(slf, oth);
    ai_outputsvm_overlay(slf, oth, text);
};

func void b_standup(var c_npc slf) {
    printdebugnpc(pd_zs_detail, "B_StandUp");
    if (c_bodystatecontains(slf, bs_sit)) {
        if (slf.aivar[12] == 1) {
            ai_playani(slf, "T_SIT_2_STAND");
            slf.aivar[12] = 0;
        }
        else if (slf.aivar[12] == 4) {
            ai_usemob(slf, "SMALL THRONE", -1);
            slf.aivar[12] = 0;
        }
        else if (slf.aivar[12] == 2) {
            ai_usemob(slf, "BENCH", -1);
            slf.aivar[12] = 0;
        }
        else {
            if (slf.aivar[12] == 3) {
                ai_usemob(slf, "CHAIR", -1);
                slf.aivar[12] = 0;
            };
        };
    };
};

func void b_callcomrades() {
    printdebugnpc(pd_zs_detail, "B_CallComrades");
    b_sayoverlay(self, NULL, "$COMRADESHELP");
    npc_sendpassiveperc(self, perc_assesswarn, self, other);
};

func void b_callguards() {
    printdebugnpc(pd_zs_detail, "B_CallGuards");
    if ((npc_isplayer(other) && c_amistronger(self, other)) && self.aivar[19]) {
        b_sayoverlay(self, NULL, "$WEWILLMEETAGAIN");
    }
    else {
        b_sayoverlay(self, NULL, "$HELP");
    };
    npc_sendpassiveperc(self, perc_assesswarn, self, other);
};

func void b_intruderalert(var c_npc slf, var c_npc oth) {
    printdebugnpc(pd_zs_detail, "B_IntruderAlert");
    b_sayoverlay(slf, NULL, "$IntruderAlert");
    npc_sendpassiveperc(slf, perc_assesswarn, slf, oth);
};

func void b_fullstop(var c_npc npc) {
    printdebugnpc(pd_zs_detail, "B_FullStop");
    npc_clearaiqueue(npc);
    ai_standupquick(npc);
};

func void b_resettempattitude(var c_npc slf) {
    printdebugnpc(pd_zs_detail, "B_ResetTempAttitude");
    npc_settempattitude(slf, npc_getpermattitude(slf, hero));
};

func void b_whirlaround(var c_npc slf, var c_npc oth) {
    printdebugnpc(pd_zs_detail, "B_WhirlAround");
    if (npc_canseenpc(slf, oth)) {
        printdebugnpc(pd_zs_detail, "...KANN Ziel sehen!");
        ai_turntonpc(slf, oth);
    }
    else {
        printdebugnpc(pd_zs_detail, "...kann Ziel NICHT sehen!");
        ai_whirlaround(slf, oth);
    };
};

func void b_dropweapon(var c_npc slf) {
    var c_item itm;
    var int itemid;

    printdebugnpc(pd_zs_detail, "B_DropWeapon");
    itm = npc_getreadiedweapon(slf);
    if (hlp_isvaliditem(itm)) {
        itemid = hlp_getinstanceid(itm);
        printdebugnpc(pd_zs_detail, itm.name);
        ai_dropitem(slf, itemid);
    };
};

func void b_regaindroppedweapon(var c_npc slf) {
    printdebugnpc(pd_zs_detail, "B_RegainDroppedWeapon");
    npc_perceiveall(slf);
    if (wld_detectitem(slf, item_kat_nf)) {
        printdebugstring(pd_zs_check, "...Waffe entdeckt : ", item.name);
        if ((!npc_isplayer(slf)) && (npc_getdisttoitem(slf, item) < hai_dist_regaindroppedweapon)) {
            printdebugnpc(pd_zs_check, "...NSC hebt seine Waffen wieder auf!");
            ai_takeitem(slf, item);
            ai_equipbestmeleeweapon(slf);
        };
    };
    if (wld_detectitem(slf, item_kat_ff)) {
        printdebugstring(pd_zs_check, "...Waffe entdeckt : ", item.name);
        if ((!npc_isplayer(slf)) && (npc_getdisttoitem(slf, item) < hai_dist_regaindroppedweapon)) {
            printdebugnpc(pd_zs_check, "...NSC hebt seine Waffen wieder auf!");
            ai_takeitem(slf, item);
            ai_equipbestrangedweapon(slf);
        };
    };
};

func void b_regaindroppedarmor(var c_npc slf) {
    npc_perceiveall(slf);
    if (wld_detectitem(slf, item_kat_armor)) {
        if (!npc_isplayer(slf)) {
            printdebugnpc(pd_zs_check, "...NSC hebt seine R*stung wieder auf!");
            ai_takeitem(slf, item);
            ai_equipbestarmor(slf);
        };
    };
};

func void b_gotofp(var c_npc slf, var string fp) {
    printdebugnpc(pd_ta_loop, "B_GotoFP");
    if (!npc_isonfp(self, fp)) {
        printdebugstring(pd_ta_check, "...nicht auf passendem Freepoint ", fp);
        if (wld_isnextfpavailable(self, fp)) {
            printdebugstring(pd_ta_check, "Gehe zu Freepoint ", fp);
            ai_setwalkmode(self, npc_walk);
            ai_gotonextfp(self, fp);
        };
    };
};

func void b_stopgotohero() {
    printdebugnpc(pd_zs_frame, "B_StopGotoHero");
    if (npc_isplayer(other)) {
        printdebugnpc(pd_zs_detail, "...Kollision mit Spieler!");
        npc_percdisable(self, perc_movenpc);
        b_fullstop(self);
    };
};

func void b_setattackreason(var c_npc slf, var int reason) {
    printdebugnpc(pd_zs_detail, "B_SetAttackReason");
    slf.aivar[35] = reason;
};

func void b_killnpc(var int npcinstance) {
    var c_npc npc;
    var int iteminstance;

    printdebugnpc(pd_zs_detail, "B_KillNpc");
    npc = hlp_getnpc(npcinstance);
    npc.flags = 0;
    createinvitem(npc, itmi_stuff_oldcoin_02);
    npc_changeattribute(npc, atr_hitpoints, -npc.attribute[atr_hitpoints_max] /*1*/);
    if (npc_getinvitembyslot(npc, inv_weapon, 0)) {
        printdebugnpc(pd_zs_detail, "...Waffe in Slot 0 gefunden!");
        iteminstance = hlp_getinstanceid(item);
        npc_removeinvitem(npc, iteminstance);
    };
    if (npc_getinvitembyslot(npc, inv_weapon, 1)) {
        printdebugnpc(pd_zs_detail, "...Waffe in Slot 1 gefunden!");
        iteminstance = hlp_getinstanceid(item);
        npc_removeinvitem(npc, iteminstance);
    };
    if (npc_getinvitembyslot(npc, inv_weapon, 2)) {
        printdebugnpc(pd_zs_detail, "...Waffe in Slot 2 gefunden!");
        iteminstance = hlp_getinstanceid(item);
        npc_removeinvitem(npc, iteminstance);
    };
    if (npc_getinvitembyslot(npc, inv_weapon, 3)) {
        printdebugnpc(pd_zs_detail, "...Waffe in Slot 3 gefunden!");
        iteminstance = hlp_getinstanceid(item);
        npc_removeinvitem(npc, iteminstance);
    };
    if (npc_getinvitembyslot(npc, inv_weapon, 4)) {
        printdebugnpc(pd_zs_detail, "...Waffe in Slot 4 gefunden!");
        iteminstance = hlp_getinstanceid(item);
        npc_removeinvitem(npc, iteminstance);
    };
    if (npc_getinvitembyslot(npc, inv_weapon, 5)) {
        printdebugnpc(pd_zs_detail, "...Waffe in Slot 5 gefunden!");
        iteminstance = hlp_getinstanceid(item);
        npc_removeinvitem(npc, iteminstance);
    };
    if (npc_getinvitembyslot(npc, inv_weapon, 6)) {
        printdebugnpc(pd_zs_detail, "...Waffe in Slot 6 gefunden!");
        iteminstance = hlp_getinstanceid(item);
        npc_removeinvitem(npc, iteminstance);
    };
};

func void b_usefakescroll() {
    if (c_bodystatecontains(self, bs_sit)) {
        ai_standup(self);
        ai_turntonpc(self, hero);
    };
    createinvitem(self, fakescroll);
    ai_useitemtostate(self, fakescroll /*4715*/, 1);
    ai_wait(self, 3.0);
    ai_useitemtostate(self, fakescroll /*4715*/, -1);
};

func void b_changeguild(var int npcinstance, var int newguild) {
    var c_npc npc;

    printdebugnpc(pd_zs_detail, "B_ChangeGuild");
    npc = hlp_getnpc(npcinstance);
    npc_settrueguild(npc, newguild);
    npc.guild = newguild;
};

func void b_exchangeroutine(var int npcinstance, var string newroutine) {
    var c_npc npc;

    printdebugnpc(pd_zs_detail, "B_ExchangeRoutine");
    npc = hlp_getnpc(npcinstance);
    npc_exchangeroutine(npc, newroutine);
    ai_continueroutine(npc);
};

func void b_setpermattitude(var int npcinstance, var int newattitude) {
    var c_npc npc;

    printdebugnpc(pd_zs_detail, "B_SetPermAttitude");
    npc = hlp_getnpc(npcinstance);
    npc_setattitude(npc, newattitude);
    npc_settempattitude(npc, newattitude);
};

func void b_logentry(var string topic, var string entry) {
    printdebugnpc(pd_zs_detail, "B_LogEntry");
    log_addentry(topic, entry);
    printscreen(name_newlogentry, -1, _ypos_message_logentry, font_old_10, _time_message_logentry);
    snd_play("LogEntry");
};

func void b_clearimmortal(var int npcinstance) {
    var c_npc npc;

    printdebugnpc(pd_zs_detail, "B_ClearImmortal");
    npc = hlp_getnpc(npcinstance);
    npc.flags = 0;
};

func void b_setnpctype(var int npcinstance, var int newnpctype) {
    var c_npc npc;

    printdebugnpc(pd_zs_detail, "B_SetNpcType");
    npc = hlp_getnpc(npcinstance);
    npc.npctype = newnpctype;
};

func void b_giveinvitems(var c_npc giver, var c_npc taker, var int iteminstance, var int amount) {
    var string msg;

    printdebugnpc(pd_zs_detail, "B_GiveInvItems");
    npc_removeinvitems(giver, iteminstance, amount);
    createinvitems(taker, iteminstance, amount);
    if (npc_isplayer(giver)) {
        if (iteminstance == itminugget /*4517*/) {
            msg = concatstrings(_str_message_ore_given, inttostring(amount));
            printscreen(msg, -1, _ypos_message_given, "FONT_OLD_10_WHITE.TGA", _time_message_given);
        }
        else if (amount == 1) {
            msg = concatstrings(_str_message_item_given, " ");
            printscreen(msg, -1, _ypos_message_given, "FONT_OLD_10_WHITE.TGA", _time_message_given);
        }
        else {
            msg = concatstrings(_str_message_items_given, inttostring(amount));
            printscreen(msg, -1, _ypos_message_given, "FONT_OLD_10_WHITE.TGA", _time_message_given);
        };
    }
    else if (npc_isplayer(taker)) {
        if (iteminstance == itminugget /*4517*/) {
            msg = concatstrings(inttostring(amount), _str_message_ore_taken);
            printscreen(msg, -1, _ypos_message_taken, "FONT_OLD_10_WHITE.TGA", _time_message_taken);
        }
        else if (amount == 1) {
            msg = concatstrings(_str_message_item_taken, " ");
            printscreen(msg, -1, _ypos_message_taken, "FONT_OLD_10_WHITE.TGA", _time_message_taken);
        }
        else {
            msg = concatstrings(_str_message_items_taken, inttostring(amount));
            printscreen(msg, -1, _ypos_message_taken, "FONT_OLD_10_WHITE.TGA", _time_message_taken);
        };
    };
};

func int b_checkforimportantinfo(var c_npc slf, var c_npc oth) {
    var c_npc her;
    var c_npc rock;

    printdebugnpc(pd_zs_frame, "B_CheckForImportantInfo");
    if ((oth.aivar[33] == false) && c_npcishuman(oth)) {
        printdebugnpc(pd_zs_check, "...SC spricht nicht!");
        her = hlp_getnpc(pc_hero);
        rock = hlp_getnpc(pc_rockefeller);
        if ((hlp_getinstanceid(her) != hlp_getinstanceid(hero)) && (hlp_getinstanceid(rock) != hlp_getinstanceid(hero))) {
            printdebugnpc(pd_zs_check, "...SC steckt im K*rper eines anderen!");
            return false;
        };
        if (npc_checkinfo(slf, 1)) {
            printdebugnpc(pd_zs_check, "...wichtige Info zu vergeben!");
            printdebugnpc(pd_zs_check, "...SC springt nicht oder NSC ist Durchgangswache!");
            if (!c_bodystatecontains(oth, bs_fall)) {
                printdebugnpc(pd_zs_check, "...f*llt nicht!");
                if (!c_bodystatecontains(oth, bs_swim)) {
                    printdebugnpc(pd_zs_check, "...schwimmt nicht!");
                    if (!c_bodystatecontains(oth, bs_dive)) {
                        printdebugnpc(pd_zs_check, "...taucht nicht!");
                        hero.aivar[22] = true;
                        b_fullstop(oth);
                        if (c_bodystatecontains(slf, bs_sit) || (!npc_canseenpc(slf, oth))) {
                            npc_clearaiqueue(slf);
                            ai_standup(slf);
                        }
                        else {
                            b_fullstop(slf);
                        };
                        ai_startstate(slf, zs_talk, 0, "");
                        npc_percdisable(slf, perc_assessfighter);
                        return true;
                    };
                };
            };
        };
    };
    return false;
};

var int b_initguildattitudes_onetime;

func void b_initguildattitudes() {
    if (b_initguildattitudes_onetime == false) {
        printdebugnpc(pd_zs_frame, "B_InitGuildAttitudes");
        if (kapitel <= 3) {
            wld_exchangeguildattitudes("GIL_ATTITUDES");
        }
        else {
            wld_exchangeguildattitudes("GIL_ATTITUDES_FMTAKEN");
        };
        b_initguildattitudes_onetime = true;
    };
};

func void b_practicecombat(var string waypoint) {
    printdebugnpc(pd_zs_frame, "B_PracticeCombat");
};

func void b_printguildcondition(var int level) {
    var string msg;

    printdebugnpc(pd_zs_frame, "B_PrintGuildCondition");
    msg = concatstrings(_str_message_joincamp, inttostring(level));
    printscreen(msg, -1, _ypos_message_joincamp, font_old_10, _time_message_joincamp);
};

const int npc_minimal_damage = 1;

const int zivilanquatschdist = 300;

const int durstigebauern = 10;

var int slf_fire;

var int kapitel;

var int play_lute;

var int firstjoint;

var int secondjoint;

var int thirdjoint;

var int wissen_almanach;

var int points_oc;

var int points_nc;

var int points_st;

var int knows_getteeth;

var int knows_getclaws;

var int knows_getfur;

var int knows_gethide;

var int knows_gettongue;

var int knows_getmcmandibles;

var int knows_getmcplates;

var int knows_getbfsting;

var int knows_getulumulu;

var int lesterguide;

var int jackal_protectionpaid;

var int jackal_payday;

var int bloodwyn_protectionpaid;

var int bloodwyn_payday;

var int herek_protectionbully;

var int grim_protectionbully;

var int jesse_payforme;

var int nc_joints_verteilt;

var int cronos_messenger;

var int thorus_mordragmagemessenger;

var int fisk_scknows110;

var int fisk_forgetsword;

var int fisk_swordsold;

var int mordrag_gotonc_day;

var int enteredoldmine;

var int kalom_talkedto;

var int kalom_krautbote;

var int kalom_deliveredweed;

var int lefty_workday;

var int lefty_mission;

var int ricelord_askedforwater;

var int an_bauern_verteilt;

var int lares_informmordrag;

var int psi_walk;

var int ghorim_kickharlok;

var int joru_joinpsi;

var int joru_tips_mage;

var int baalnamib_ansprechbar;

var int baalnamib_sakrileg;

var int baalorun_fetchweed;

var int kalom_drugmonopol;

var int stooges_fled;

var int idiots_deal;

var int inextremoplaying;

var int inextremoonstage;

var int aaron_lock;

var int snipes_deal;

var int ian_gearwheel;

var int corkalom_bringbook;

var int corkalom_bringmcqballs;

var int yberion_bringfocus;

var int pressetourjanuar2001;

var int corristo_kdfaufnahme;

var int saturas_kdwaufnahme;

var int corangar_gotoogy;

var int corangar_findherb;

var int fortuno_hasyberionherbs;

var int yberion_dead;

var int baallukor_bringparchment;

var int corangar_sendtonc;

var int saturas_bringfoci;

var int monasteryruin_gateopen;

var int troll_wheel;

var int warned_gorn_or_lester;

var int oldheroguild;

var int fmtaken;

var int lee_freeminereport;

var int findxardas;

var int findgolemhearts;

var int findorcshaman;

var int urshak_spokeofulumulu;

var int friendofurshak;

var int gorn_joinedforfm;

var int gorn_gotowolf;

var int enteredfreemine;

var int freemineorc_suchepotion;

var int freemineorc_lookingulumulu;

var int mcplatesdelivered;

var int orccity_sanctum_outergateopen;

var int orccity_sanctum_outergatetried;

var int enteredtemple;

const int highpriest_maxhit = 3;

var int encounteredhighpriest;

var int exploresunkentower;

var int loadsword;

var int startchapterssix;

var int knowstone;

const int xp_diegobringlist = 750;

const int xp_fingerstrain = 100;

const int xp_whistlerssword = 200;

const int xp_kirgovictory = 150;

const int xp_kharimlost = 50;

const int xp_kharimvictory = 200;

const int xp_snafcook = 100;

const int xp_slysearchfornek = 250;

const int xp_thorusmordragko = 250;

const int xp_thorusmordragdead = 300;

const int xp_fiskdealer = 300;

const int xp_becomeshadow = 1000;

const int xp_dexterkalom = 350;

const int xp_gilbertfound = 100;

const int xp_xardasletter = 200;

const int xp_xardasletteropen = 100;

const int xp_arrivedatpsicamp = 200;

const int xp_weedforjoru = 50;

const int xp_impressbaalcadar = 250;

const int xp_impressbaalnamib = 250;

const int xp_dustyjoined = 250;

const int xp_bribeddustyguard = 250;

const int xp_delivereddusty = 500;

const int xp_sentharlok = 300;

const int xp_baaloruntalks = 100;

const int xp_weedfrombalor = 100;

const int xp_balornamedcipher = 50;

const int xp_weedfromviran = 500;

const int xp_deliveredweedharvest = 100;

const int xp_reporttobaalorun = 200;

const int xp_impressedbaalorun = 250;

const int xp_impressedbaaltyon = 200;

const int xp_becomenovice = 750;

const int xp_weedshipmentdelivered = 200;

const int xp_weedshipmentreported = 200;

const int xp_jackoretired = 500;

const int xp_drugmonopol = 750;

const int xp_arrivedwithmordrag = 200;

const int xp_leftycarriedwater = 100;

const int xp_leftyconfronted = 300;

const int xp_kickedshrike = 200;

const int xp_reportedkickedshrike = 100;

const int xp_reportdeaddamlurker = 300;

const int xp_cronosletter = 200;

const int xp_cheatedintolareshut = 250;

const int xp_giveringtolares = 250;

const int xp_givelisttolares = 250;

const int xp_reportlistdeliverytolares = 750;

const int xp_distributedweedforkagan = 200;

const int xp_baalisidrospenddrink = 100;

const int xp_baalisidrotellplans = 200;

const int xp_baalisidropayshare = 500;

const int xp_baalisidropaylares = 500;

const int xp_becomebandit = 1000;

const int xp_assistmordrag = 250;

const int xp_bringfocustoyberion = 750;

const int xp_bringfocustocorkalom = 250;

const int xp_lureaaronaway = 75;

const int xp_sellkeytoaaron = 75;

const int xp_lureulbertaway = 75;

const int xp_bringgearwheel = 750;

const int xp_hiregornakosh = 250;

const int xp_hiregornabar = 250;

const int xp_hiregornavid = 250;

const int xp_openasghansgate = 1500;

const int xp_bringmceggs = 2500;

const int xp_bringbook = 2500;

const int xp_reporttomordrag = 500;

const int xp_reporttoraven = 500;

const int xp_savebaallukor = 750;

const int xp_reporttocorangar = 2000;

const int xp_findherbs = 1500;

const int xp_getcronospermission = 250;

const int xp_saycorrectparole = 250;

const int xp_deliverfocustosaturas = 500;

const int xp_deliverbooktosaturas = 500;

const int xp_deliversecondfocus = 3500;

const int xp_deliverthirdfocus = 3500;

const int xp_deliverfourthfocus = 3500;

const int xp_deliverfifthfocus = 4000;

const int xp_messageforgorn = 1000;

const int xp_reporttosaturas = 1000;

const int xp_deliveredgolemhearts = 2000;

const int xp_foundorcshaman = 1000;

const int xp_returnedfromurshak = 1000;

const int xp_gornjoins = 1000;

const int xp_foundorcslave = 2000;

const int xp_curedorcslave = 2000;

const int xp_deliveredmcplates = 2000;

const int xp_gotulumulu = 10000;

const int xp_gormcplatearmor = 1000;

const int xp_retreatfromlastpriest = 1000;

const int xp_showurizieltoxardas = 1000;

const int xp_returnedfromsunkentower = 2000;

const int xp_loadeduriziel = 5000;

const int lpcost_attribute_strength = 1;

const int lpcost_attribute_dexterity = 1;

const int lpcost_attribute_mana = 1;

const int lpcost_talent_mage_1 = 10;

const int lpcost_talent_mage_2 = 15;

const int lpcost_talent_mage_3 = 20;

const int lpcost_talent_mage_4 = 25;

const int lpcost_talent_mage_5 = 30;

const int lpcost_talent_mage_6 = 40;

const int lpcost_talent_1h_1 = 10;

const int lpcost_talent_1h_2 = 20;

const int lpcost_talent_2h_1 = 30;

const int lpcost_talent_2h_2 = 40;

const int lpcost_talent_bow_1 = 10;

const int lpcost_talent_bow_2 = 20;

const int lpcost_talent_crossbow_1 = 10;

const int lpcost_talent_crossbow_2 = 20;

const int lpcost_talent_acrobat = 10;

const int lpcost_talent_sneak = 10;

const int lpcost_talent_picklock_1 = 10;

const int lpcost_talent_picklock_2 = 20;

const int lpcost_talent_pickpocket_1 = 10;

const int lpcost_talent_pickpocket_2 = 20;

var int log_gornatothfight;

var int log_gornatothtrain;

var int log_wolftrain;

var int log_baalcadarsell;

var int log_baalcadartrain;

var int log_diegotrain;

var int log_scorpiocrossbow;

var int log_thorustrain;

var int log_thorusfight;

var int log_wedgelearn;

var int log_scattytrain;

var int log_cavalorntrain;

var int dexter_traded;

var int scorpio_exile;

var int leftydead;

const string baloros_waffe = "Îðóæèå Áàëîðî";

const string baloros_waffe_1 = "Áàëîðî îáåùàë äàòü ìíå îòëè÷íîå îðóæèå, åñëè ÿ ïðèíåñó åìó 5 ÿáëîê, 2 áóòûëêè ðèñîâîãî øíàïñà, 5 áóòûëîê ïèâà, 3 áóõàíêè õëåáà, 2 êóñêà ñûðà è 2 âåòêè âèíîãðàäà.";

const string baloros_waffe_2 = "Íå íàäî áûëî âåðèòü íà ñëîâî ýòîìó ïðèäóðêó! Íó íè÷åãî, òåïåðü-òî ÿ óñâîþ ýòîò óðîê.";

const string theriddle_log = "Íåçíàêîìåö";

const string theriddle_log_1 = "Ó ìàãà â Áàøíå òóìàíà ÿ çàáðàë î÷åíü ñòðàííóþ êíèãó. Õðîìàíèí! Ïîõîæå, ÷òî åå àâòîð ïèøåò ñïëîøíûìè çàãàäêàìè... Ìóäðåö ðàññìàòðèâàåò ñèòóàöèþ â öåëîì, ïðåæäå ÷åì ïðèñòóïàòü ê ñëåäóþùåìó çàäàíèþ Õì! Ïîêà ÿ íè÷åãî íå ïîíèìàþ, íî, âîçìîæíî, ïðîñòî åùå âðåìÿ íå ïðèøëî.";

const string theriddle_log_2 = "ß íàøåë âòîðóþ êíèãó ïîä íàçâàíèåì Õðîìàíèí. È ñíîâà îäíè çàãàäêèÐàçäåëåííîå âîññîåäèíèòñÿ âíîâü, åñëè íà êîðîòêîå âðåìÿ ðàçëó÷åíî áóäåò íàäåæíî";

const string theriddle_log_3 = "Íàøåë ÿ òðåòüþ êíèãó. Ïîõîæå, ÿ íà÷èíàþ ïîíèìàòü, â ÷åì òóò äåëî! ...Ìóäðûé ðûáàê âðåìÿ îò âðåìåíè èùåò óäà÷è íà äðóãîé ñòîðîíå îçåðà";

const string theriddle_log_4 = "Íîìåð ÷åòûðå. Óæ íå ïûòàåòñÿ ëè ýòîò ïàðåíü ïðîñòî çàìîðî÷èòü ìíå ãîëîâó?! ...Äàâíî çàáûòû ïîñòóïêè òåõ, êòî íåêîãäà áûë â êîìàíäå";

const string theriddle_log_5 = "Ïîõîæå, ýòî ïîñëåäíÿÿ. Ìíå íå òåðïèòñÿ óçíàòü, êòî èëè ÷òî ïîäæèäàåò ìåíÿ âïåðåäè Òû íàéäåøü ìåíÿ òàì, ãäå âñå ýòî íà÷àëîñü";

const string theriddle_log_6 = "Òàèíñòâåííûé íåçíàêîìåö ìåðòâ. Åãî óáèëè ýòè äåìîíû. ß ÷óâñòâóþ, ÷òî ìåæäó íèì è ýòèìè ñîçäàíèÿìè àäà åñòü êàêàÿ-òî ñâÿçü. Âðÿä ëè áû îí âåðíóëñÿ ñþäà, åñëè áû ýòî áûëî íå òàê. Ïîõîæå, ÷òî ñâîé ñåêðåò îí óíåñ â ìîãèëó.";

const string orctemple_note = "Õðàì îðêîâ";

const string orctemple_note_1 = "Ãîð Áîáà õîòåë îñòàíîâèòü ìåíÿ. Îí ñêàçàë ìíå, ÷òî Ãàëîì è åãî ïîñëåäîâàòåëè áûëè áëàãîñëîâëåíû ñèëàìè âåðõîâíîãî æðåöà, è òåïåðü ïðîñòîå îðóæèå íå ìîæåò ïðè÷èíèòü èì âðåäà.";

const string ge_becomeshadow = "Íàçíà÷åíèå Ïðèçðàêîì";

const string ge_becometemplar = "Íàçíà÷åíèå Ñòðàæåì";

const string ge_becometemplar_1 = "Ñåãîäíÿ Êîð Àíãàð íàçíà÷èë ìåíÿ ñòðàæåì. Ãîð Íà Òîô äàñò ìíå íîâûå äîñïåõè. Îáû÷íî åãî ìîæíî íàéòè íà òðåíèðîâî÷íîé ïëîùàäêå.";

const string ge_becometemplar_2 = "Ïîñëå òîãî êàê ÿ ïðèíåñó ÿéöà ïîëçóíîâ, íàäî ïîãîâîðèòü ê Êîð Àíãàðîì. Âîçìîæíî, îí ïîçâîëèò ìíå ïðèñîåäèíèòüñÿ ê ñòðàæàì.";

const string ge_becometemplar_3 = "ß äîëæåí ïîãîâîðèòü ñ Êîð Àíãàðîì. Âîçìîæíî, îí ïîçâîëèò ìíå ïðèñîåäèíèòüñÿ ê ñòðàæàì.";

const string ge_becometemplar_4 = "Ãîð Íà Òîô äàë ìíå äîñïåõè ñòðàæà. Òåïåðü ÿ âõîæó â íàñòîÿùèé âîèíñêèé êëàí!";

const string ge_becomeguard = "Íàçíà÷åíèå Ñòðàæíèêîì";

const string ge_becomeguard_1 = "Êàê òîëüêî ÿ ïðèíåñó ÿéöà, íàäî áû ïîãîâîðèòü ñ Òîðóñîì. Âîçìîæíî, îí ïîçâîëèò ìíå ïðèñîåäèíèòüñÿ ê ñòðàæàì.";

const string ge_becomeguard_2 = "ß çàáðàë ñâîè ïåðâûå äîñïåõè ó êóçíåöà Ñòîóíà. ß ìîã áû òàì æå êóïèòü äîñïåõè è ïîëó÷øå, íî öåíà óæ î÷åíü âûñîêà.";

const string ge_becomeguard_3 = "Ñåãîäíÿ Òîðóñ ïðèíÿë ìåíÿ â ñòðàæíèêè. ß ìîãó ïîéòè è çàáðàòü ñâîè äîñïåõè ó êóçíåöà Ñòîóíà, â çàìêå.";

const string ge_becomefiremage = "Êðóã ìàãîâ îãíÿ";

const string ge_becomefiremage_1 = "Êîððèñòî ñêàçàë ìíå, ÷òî îí ïîçâîëÿåò ìíå ïðèñîåäèíèòüñÿ ê êðóãó ìàãîâ îãíÿ. Íî òîëüêî ïîñëå íåáîëüøîé ïðîâåðêè.";

const string ge_becomefiremage_2 = "ß ïðîøåë ïðîâåðêó è ïðèíåñ êëÿòâó îãíþ. Ñ ýòîãî ìîìåíòà ÿ íîøó êðàñíîå îáëà÷åíèå ìàãîâ êðóãà îãíÿ!";

const string ge_becomemercenary = "Íàçíà÷åíèå Íàåìíèêîì";

const string ge_becomemercenary_1 = "ß äîëæåí ïîãîâîðèòü ñ Ëè. Ìîæåò áûòü, îí ïîçâîëèò ìíå ïðèñîåäèíèòüñÿ ê íàåìíèêàì.";

const string ge_becomemercenary_2 = "Ëè ïðèíÿë ìåíÿ â íàåìíèêè.";

const string ge_traderoc = "Òîðãîâöû â Ñòàðîì Ëàãåðå";

const string ge_traderoc_1 = "Ó Äèåãî åñòü äîñïåõè ïîëó÷øå äëÿ ëþäåé Ãîìåçà. Îí ïîäæèäàåò ó âõîäà â çàìîê.";

const string ge_traderoc_2 = "Ñòðàæíèê Ñêèï ïðèòîðãîâûâàåò îðóæèåì íà çàäíåì äâîðå. Íî òîëüêî äëÿ ëþäåé Ãîìåçà.";

const string ge_traderoc_3 = "Òîððåç ïðîäàåò ñâèòêè è ðóíû. Äíåì åãî ìîæíî íàéòè âî âíóòðåííåì äâîðå.";

const string ge_traderoc_4 = "Âîð Ìîðäðàã â Ñòàðîì Ëàãåðå ïðîäàåò ðàçëè÷íûå òîâàðû ïî ïðèåìëåìûì öåíàì.";

const string ge_traderoc_5 = "Âîð Ìîðäðàã ïðîäàåò êðàäåííîå íà ðûíêå.";

const string ge_traderoc_6 = "Ïðèçðàê ïî èìåíè Ôèñê òîðãóåò âñÿêèìè òîâàðàìè, íî â îñîáåííîñòè îðóæèåì. Îáû÷íî åãî ìîæíî íàéòè íà ðûíêå.";

const string ge_traderoc_7 = "Ïðèçðàê ïî èìåíè Äåêñòåð òîðãóåò ýëèêñèðàìè è áîëîòíèêîì îò Ëàãåðÿ Áðàòñòâà.";

const string ge_traderoc_8 = "Êàâàëîðí òîðãóåò ëóêàìè è ñòðåëàìè. Åãî ìîæíî íàéòè íà äîðîãå ê Íîâîìó Ëàãåðþ, â êàíüîíå ê çàïàäó îò Ñòàðîãî Ëàãåðÿ.";

const string ge_traderoc_9 = "Ðóäîêîï Ãðåõýì ïðîäàåò êàðòû ñëåâà îò öåíòðàëüíûõ âîðîò.";

const string ge_traderoc_10 = "Ðóäîêîï Ãðàâî ïðåäëàãàåò ñïåöèàëüíûå óñëóãè. Åñëè ÿ ïîïàäó â íåïðèÿòíîñòè â Ëàãåðå, òî ÿ ìîãó çàïëàòèòü åìó çà èõ ðåøåíèå.";

const string ge_traderoc_11 = "Äåêñòåð è Ôèñê òîðãóþò ðàçëè÷íûìè òîâàðàìè íà ðûíî÷íîé ïëîùàäè.";

const string ge_tradernc = "Òîðãîâöû â Íîâîì Ëàãåðå";

const string ge_tradernc_1 = "Ðèîðäàí, ìàã âîäû, òîðãóåò ýëèêñèðàìè. Åãî ìîæíî íàéòè â ëàáîðàòîðèè íà âåðõíåì óðîâíå.";

const string ge_tradernc_2 = "Êðîíîñ ïðîäàåò ðóíû, ñâèòêè è êîëüöà. Åãî ìîæíî íàéòè ó ðåøåòêè íàä ãîðîé ðóäû â ëþáîå âðåìÿ äíÿ è íî÷è.";

const string ge_tradernc_3 = "Ñàéôåð ïðîäàåò è ïîêóïàåò ñàìûå ðàçíûå âåùè â áàðå ó îçåðà. Îñîáåííî îí çàèíòåðåñîâàí â êðóïíûõ ïàðòèÿõ áîëîòíèêà.";

const string ge_tradernc_4 = "Èäîë Êàãàí ïðîäàåò áîëîòíèê âîðàì è íàåìíèêàì â Íîâîì Ëàãåðå.";

const string ge_tradernc_5 = "Âîð Øàðêè çàíèìàåòñÿ îðóæèåì è äðóãèìè òîâàðàìè. Îáû÷íî îí øàòàåòñÿ ïî Íîâîìó Ëàãåðþ.";

const string ge_tradernc_6 = "Âîëê ñíàáæàåò âîðîâ äîñïåõàìè. Åãî ìîæíî íàéòè ïåðåä ñâîåé õèæèíîé â áîëüøîé æèëîé ïåùåðå.";

const string ge_tradernc_7 = "Âîëê òîðãóåò ëóêàìè.";

const string ge_traderpsi = "Òîðãîâöû â Áîëîòíîì Ëàãåðå";

const string ge_traderpsi_1 = "Ãóðó Èäîë Êàäàð ïðîäàåò ðóíû, ìàãè÷åñêèå ñâèòêè, ýëèêñèðû, àìóëåòû è êîëüöà.";

const string ge_traderpsi_2 = "ß ìîãó ïîëó÷èòü áîëåå õîðîøèå äîñïåõè îò Èäîëà Íàìèáà.";

const string ge_traderpsi_3 = "Íîâè÷îê Äàððèîí çàíèìàåòñÿ îðóæèåì. Ïðàêòè÷åñêè âñå âðåìÿ îí ñèäèò â êóçíèöå.";

const string ge_traderpsi_4 = "Èäîë Êàäàð ïðîäàåò ðóíû è ñâèòêè.";

const string ge_traderpsi_5 = "Ôîðòóíî çàíèìàåòñÿ òðàâàìè ïîä àëõèìè÷åñêîé ëàáîðàòîðèåé.";

const string ge_traderpsi_6 = "Ó Ãîð Íà Òîôà åñòü äîñïåõè è ïîëó÷øå. Íî â îáìåí íà íèõ îí îæèäàåò ïîëó÷èòü âåñîìûé âçíîñ â êîïèëêó Áðàòñòâà. Â òå÷åíèå äíÿ ÿ ìîãó íàòè åãî íà òðåíèðîâî÷íîé ïëîùàäêå.";

const string ge_traderow = "Òîðãîâöû âíå Ëàãåðåé";

const string ge_traderow_scorpio = "Ñêîðïèî ïîêèíóë Ñòàðûé Ëàãåðü è òåïåðü íàõîäèòñÿ ñ Êàâàëîðíîì â îõîòíè÷üåé õèæèíå ãäå-òî ìåæäó Ëàãåðÿìè.";

const string ge_teacheroc = "Ó÷èòåëÿ â Ñòàðîì Ëàãåðå";

const string ge_teacheroc_scorpio = "Ñêîðïèî ìîæåò íàó÷èòü ìåíÿ èñïîëüçîâàòü àðáàëåò.";

const string ge_teacheroc_scatty = "Ñêàòòè, ìàñòåð àðåíû, ìîæåò íàó÷èòü ìåíÿ ñðàæàòüñÿ îäíîðó÷íûì îðóæèåì.";

const string ge_teacheroc_thorus1 = "Òîðóñ ïîìîæåò ìíå â òðåíèðîâêå ñèëû è ëîâêîñòè.";

const string ge_teacheroc_thorus2 = "Òîðóñ ìîæåò íàó÷èòü ìåíÿ ñðàæàòüñÿ äâóðó÷íûì îðóæèåì, êàê òîëüêî ÿ îñâîþ îäíîðó÷íîå.";

const string ge_teacheroc_torrez = "Òîððåç ìîæåò ïîìî÷ü ìíå â òðåíèðîâêå ìàíû. Â òå÷åíèå äíÿ åãî ìîæíî íàéòè âî âíóòðåííåì äâîðå.";

const string ge_teacheroc_corristo = "Êîððèñòî ìîæåò ïîñâÿòèòü ìåíÿ â íîâûå êðóãè ìàãèè, à òàêæå ïîìî÷ü ñ òðåíèðîâêîé ìàíû. Åãî ìîæíî íàéòè â äîìå ìàãîâ îãíÿ.";

const string ge_teacheroc_fingers1 = "Ôèíãåðñ ìîæåò îáó÷èòü êàðìàííûì êðàæàì è âñêðûâàíèþ çàìêîâ.";

const string ge_teacheroc_fingers2 = "Ôèíãåðñ ìîæåò îáó÷èòü êàðìàííûì êðàæàì è âñêðûâàíèþ çàìêîâ. Îí æèâåò â äîìå ó àðåíû, ñëåãêà íà îòøèáå, ó ñòåíû çàìêà.";

const string ge_teacheroc_diego = "Äèåãî ìîæåò ïîìî÷ü ìíå ñòàòü ñèëüíåå è ãîðàçäî áîëåå ëîâêèì.";

const string ge_teachernc = "Ó÷èòåëÿ â Íîâîì Ëàãåðå";

const string ge_teachernc_cronos = "Êðîíîñ ìîæåò ïîìî÷ü ìíå â òðåíèðîâêå ìàíû. Åãî ìîæíî íàéòè ó ðåøåòêè íàä ãîðîé ðóäû â ëþáîå âðåìÿ äíÿ è íî÷è.";

const string ge_teachernc_saturas = "Ñàòóðàñ, ëèäåð ìàãîâ âîäû, ìîæåò ïîñâÿòèòü ìåíÿ â íîâûå êðóãè ìàãèè. Åãî âñåãäà ìîæíî íàéòè ðÿäîì ñ ïåíòàãðàììîé, íàâåðõó.";

const string ge_teachernc_buster = "Âîð Áàñòåð îáó÷àåò àêðîáàòèêå.";

const string ge_teachernc_lares = "Ëàðñ ìîæåò ïîìî÷ü ìíå ïîòðåíèðîâàòü è ñèëó, è óìåíèå.";

const string ge_teachernc_wedge = "Âîð ïî èìåíè Âåäæ ìîæåò ïîìî÷ü ìíå â ÷àñòè ïîäêðàäûâàíèÿ, êàðìàííûõ êðàæ è îòêðûâàíèÿ çàìêîâ.";

const string ge_teachernc_wolf1 = "Âîð ïî èìåíè Âîëê ìîæåò íàó÷èòü ìåíÿ, êàê ïîëüçîâàòüñÿ ëóêîì.";

const string ge_teachernc_wolf2 = "Âîëê ìîæåò ïîìî÷ü ìíå íàòðåíèðîâàòü ëîâêîñòü.";

const string ge_teachernc_cord = "Íàåìíèê Êîðä ìîæåò íàó÷èòü ìåíÿ ñðàæàòüñÿ ñ îäíîðó÷íûì îðóæèåì. Â òå÷åíèå äíÿ åãî ìîæíî íàéòè íà ñêàëèñòîì ïëàòî ó îçåðà.";

const string ge_teachernc_lee = "Ëè ìîæåò íàó÷èòü ìåíÿ ñðàæàòüñÿ äâóðó÷íûì îðóæèåì. Êðîìå òîãî, îí ìîæåò ïîìî÷ü ìíå ñ òðåíèðîâêàìè ñèëû è ëîâêîñòè.";

const string ge_teacherpsi = "Ó÷èòåëÿ â Áîëîòíîì Ëàãåðå";

const string ge_teacherpsi_1 = "Ãóðó Èäîë Êàäàð ìîæåò ïîìî÷ü ìíå â òðåíèðîâêàõ ïî óâåëè÷åíèþ ìàíû.";

const string ge_teacherpsi_2 = "Èäîë Êàäàð ìîæåò íàó÷èòü ìåíÿ êðóãàì ðóíè÷åñêîé ìàãèè.";

const string ge_teacherpsi_3 = "Êîð Àíãàð òðåíèðóåò ÑÈËÓ, ËÎÂÊÎÑÒÜ è ìîæåò íàó÷èòü ñðàæàòüñÿ ÄÂÓÐÓ×ÍÛÌ îðóæèåì. Íî îáó÷àòü îí ìåíÿ ñòàíåò òîëüêî òîãäà, êîãäà ÿ áóäó õîðîø â áèòâå ñ ÎÄÍÎÐÓ×ÍÛÌ îðóæèåì. Îáû÷íî Êîð Àíãàðà ìîæíî íàéòè íà òðåíèðîâî÷íîé ïëîùàäêå, íà âòîðîì óðîâíå ìîñòèêîâ.";

const string ge_teacherpsi_4 = "Ñòðàæ Ãîð Íà Òîô ìîæåò ïîìî÷ü ìíå òðåíèðîâàòü ñâîþ ÑÈËÓ, ËÎÂÊÎÑÒÜ è ÌÀÍÓ.";

const string ge_teacherpsi_5 = "Ñòðàæ Ãîð Íà Òîô ìîæåò íàó÷èòü ìåíÿ ñðàæàòüñÿ îäíîðó÷íûì îðóæèåì.";

const string ge_teacherow = "Ó÷èòåëÿ âíå Ëàãåðåé";

const string ge_teacherow_1 = "Âîð Äðàêñ ñêàçàë, ÷òî  çà îïðåäåëåííóþ öåíó ìîæåò íàó÷èòü ìåíÿ ïîòðîøèòü æèâîòíûõ. Îí îõîòèòñÿ â ðàéîíå îò òîðãîâîé ïëîùàäè äî Ñòàðîãî Ëàãåðÿ.";

const string ge_teacherow_2 = "Ýéäàí, îõîòíèê, æèâóùèé ìåæäó Ñòàðûì è Íîâûì Ëàãåðÿìè, ìîæåò íàó÷èòü ìåíÿ òîìó, êàê íàäî ïîòðîøèòü æèâîòíûõ.";

const string ge_teacherow_3 = "Êàâàëîðí ìîæåò íàó÷èòü ìåíÿ ïîäêðàäûâàòüñÿ. Åãî õèæèíà íàõîäèòñÿ â êàíüîíå ê çàïàäó îò Ñòàðîãî Ëàãåðÿ.";

const string ge_teacherow_4 = "Êàâàëîðí - îõîòíèê. Îí ìîæåò íàó÷èòü ìåíÿ ïîäêðàäûâàòüñÿ è ñòðåëÿòü èç ëóêà. Æèâåò Êàâàëîðí â õèæèíå ìåæäó Ëàãåðÿìè.";

const string ge_animaltrophies = "Îõîòà çà äîáû÷åé";

const string ge_animaltrophies_stinger = "Êàê óäàëÿòü æàëà - øåðøíè";

const string ge_animaltrophies_teeth = "Çíàíèå îá âûðåçàíèè çóáîâ ó âîëêîâ, îðî÷üèõ ãîí÷èõ, ãëîðõîâ, ìðàêîðèñîâ, èùååê è êóñà÷åé.";

const string ge_animaltrophies_fur = "Çíàíèå î òîì, êàê ñíÿòü øêóðó ñ âîëêà, îðî÷åé ãîí÷åé, ìðàêîðèñà, òðîëëÿ.";

const string ge_animaltrophies_claws = "Çíàíèå î òîì, êàê âûðåçàòü êîãòè ó ÿùåðèö, ãëîðõîâ, øíûã, êóñà÷åé è îñòåðîâ.";

const string ge_animaltrophies_skin = "Çíàíèå î ñíÿòèè êîæè ñ áîëîòîæîðîâ, øíûã.";

const string ge_animaltrophies_crawlerplates = "Çíàíèå òîãî, êàê âûðåçàòü ïëàñòèíû èç ïàíöèðÿ ïîëçóíîâ-âîèíîâ.";

const string ge_animaltrophies_crawlermandibles = "Êàê óäàëÿòü ÷åëþñòè ïîëçóíîâ";

const string ch1_mordragko = "Çàäàíèå Òîðóñà";

const string ch1_mordragko_1 = "Òîðóñ ïîðó÷èë ìíå èçáàâèòüñÿ îò Ìîðäðàãà, âîðà èç Ëàãåðÿ. Ñïîñîá ÿ äîëæåí âûáðàòü ñàì. Íî íèêòî íå äîëæåí çíàòü, ÷òî Òîðóñ çàìåøàí â ýòîì.";

const string ch1_mordragko_2 = "Ìîðäðàã íàõîäèòñÿ ó þæíûõ âîðîò, ïîçàäè çàìêà.";

const string ch1_mordragko_3 = "Íà Òîðóñà ïðîèçâåëî âïå÷àòëåíèå òî, êàê ÿ ðåøèë ïðîáëåìó ñ Ìîðäðàãîì.";

const string ch1_mordragko_4 = "Ïîõîæå, Òîðóñ ðàä, ÷òî Ìîðäðàã áîëüøå íå øàòàåòñÿ ïî Ëàãåðþ.";

const string ch1_mordragko_5 = "Òîðóñ íåäîâîëåí òåì, ÷òî ÿ óïîìÿíóë åãî èìÿ â ðàçãîâîðå ñ Ìîðäðàãîì. Ïîõîæå, ìíå ëó÷øå íå ïîêàçûâàòüñÿ åìó íà ãëàçà íåêîòîðîå âðåìÿ.";

const string ch1_mordragko_6 = "ß õîðîøåíüêî îáúÿñíèë Ìîðäðàãó, ÷òî â Ñòàðîì Ëàãåðå åìó ïîÿâëÿòüñÿ íå ñëåäóåò.";

const string ch1_joinoc = "Âñòóïëåíèå â Ñòàðûé Ëàãåðü";

const string ch1_joinoc_1 = "Ñ ñåãîäíÿøíåãî äíÿ ÿ ðàáîòàþ íà Ãîìåçà è Ñòàðûé Ëàãåðü. Äåòàëè ìíå ðàññêàæåò Ðàâåí.";

const string ch1_joinoc_2 = "Íà Ñêàòòè, ìàñòåðà àðåíû, ïðîèçâåäåò âïå÷àòëåíèå, åñëè ÿ âûçîâó íà áîé îäíîãî èç âîèíîâ.";

const string ch1_joinoc_3 = "Ïîáåäà Êèðãî íàäî ìíîé âðÿä ëè ïðîèçâåëà íà Ñêàòòè âïå÷àòëåíèå.";

const string ch1_joinoc_4 = "Ìîé áîé ïðîòèâ Êèðãî ïðîèçâåë íà Ñêàòòè âïå÷àòëåíèå.";

const string ch1_joinoc_5 = "Õàðèì ïîáèë ìåíÿ! Ìîÿ ñìåëîñòü ïîíðàâèëàñü Ñêàòòè, íî âîò ìîé áîé - íåò.";

const string ch1_joinoc_6 = "ß íàäàâàë Õàðèìó! Ñêàòòè îñòàëñÿ ïîä âïå÷àòëåíèåì.";

const string ch1_joinoc_7 = "Òîðóñ îáúÿñíèë, ÷òî äëÿ âñòóïëåíèÿ â Ñòàðûé Ëàãåðü ìíå íàäî ïîãîâîðèòü ñ Äèåãî. Îí äàñò ìíå ïðîáíîå çàäàíèå.";

const string ch1_joinoc_8 = "Ïîñêîëüêó ÿ âñåðüåç ðåøèë ïðèìêíóòü ê Áðàòñòâó, òî ÿ íå ìîãó áîëüøå ïðåòåíäîâàòü íà çâàíèå îäíîãî èç ëþäåé Ãîìåçà.";

const string ch1_joinoc_9 = "Ó÷àñòíèê áàíäû Ëàðñà íå ìîæåò ïðèñîåäèíèòüñÿ ê Ñòàðîìó Ëàãåðþ. Ýòî ïðîñòî íåâîçìîæíî.";

const string ch1_joinoc_10 = "ß îòäàë Ñëàþ àìóëåò Íåêà. Òåïåðü îí ïîãîâîðèò îáî ìíå ñ Äèåãî.";

const string ch1_joinoc_11 = "ß îòäàë Ñëàþ àìóëåò Íåêà. Ñäåëàë ÿ ýòî ïðîñòî òàê, íå èç êîðûñòè - âåäü Ñòàðûé Ëàãåðü âñå ðàâíî íå ïîçâîëèò ìíå ê íèì ïðèñîåäèíèòüñÿ.";

const string ch1_joinoc_12 = "Óèñòëåð ïîìîæåò ìíå, åñëè ÿ ñõîæó íà ðûíîê ê Ôèñêó è êóïëþ åìó ìå÷. Äëÿ ýòîãî îí äàë ìíå 100 êóñêîâ ðóäû.";

const string ch1_joinoc_13 = "ß âñå èñïîðòèë. Óèñòëåð íèêîãäà íå ïîëó÷èò ñâîé ìå÷.";

const string ch1_joinoc_14 = "ß âñå èñïîðòèë. Óèñòëåð òåïåðü î÷åíü çîë íà ìåíÿ.";

const string ch1_joinoc_15 = "Óèñòëåð îñòàëñÿ äîâîëåí ìå÷îì. Îí ïîðåêîìåíäóåò ìåíÿ Äèåãî.";

const string ch1_joinoc_16 = "Óèñòëåð îñòàëñÿ äîâîëåí ìå÷îì. Ê ñîæàëåíèþ, ýòî äëÿ ìåíÿ ðîâíûì ñ÷åòîì íè÷åãî íå çíà÷èò: ïðèçðàêîì ñòàòü ÿ óæå íå ìîãó.";

const string ch1_joinoc_17 = "Ôèíãåðñ îñòàëñÿ äîâîëåí òåì, êàê ÿ ñïðàâèëñÿ.";

const string ch1_joinoc_18 = "Ôèíãåðñ âûñêàæåòñÿ â ìîþ ïîëüçó, êàê òîëüêî ÿ îâëàäåþ îäíèì èç âîðîâñêèõ óìåíèé.";

const string ch1_joinoc_19 = "×òîáû ïðèñîåäèíèòüñÿ ê ëþäÿì Ãîìåçà â Ñòàðîì Ëàãåðå, ìíå íóæíî óâèäåòüñÿ ñ Òîðóñîì.";

const string ch1_joinoc_20 = "×òîáû ìíå ïîçâîëèëè ïðèñîåäèíèòüñÿ, ìíå íóæíî ïðîèçâåñòè âïå÷àòëåíèå íà ëþäåé èç âíåøíåãî êðóãà è ïðîéòè èñïûòàíèå íà âåðíîñòü Äèåãî.";

const string ch1_joinoc_21 = "Äèåãî óñòðîèë ìíå àóäèåíöèþ ó Ãîìåçà. Òåïåðü ÿ ìîãó ñòàòü ÷åëîâåêîì Ãîìåçà è âõîäèòü â çàìîê. Íàäî òîëüêî ñíà÷àëà ïîãîâîðèòü ñ Òîðóñîì.";

const string ch1_joinoc_22 = "Äåêñòåð, Ñëàé è Ôèíãåðñ - âåñüìà âëèÿòåëüíûå Ïðèçðàêè.";

const string ch1_snafsrecipe = "Ðåöåïò Ñíàôà";

const string ch1_snafsrecipe_1 = "Ïîâàð Ñíàô, æèâóùèé âî âíåøíåì êîëüöå Ñòàðîãî Ëàãåðÿ, ïîñëàë ìåíÿ ðàçäîáûòü 3 ìÿñíûõ æóêà è 5  àäñêèõ ãðèáîâ äëÿ ñâîåãî íîâîãî ðåöåïòà.";

const string ch1_snafsrecipe_2 = "Ïîâàð Ñíàô, æèâóùèé âî âíåøíåì êîëüöå Ñòàðîãî Ëàãåðÿ, ïîñëàë ìåíÿ ðàçäîáûòü 3 ìÿñíûõ æóêà è 5  àäñêèõ ãðèáîâ äëÿ ñâîåãî íîâîãî ðåöåïòà. ß äàæå ñìîãó ïîïðîáîâàòü åãî âàðåâî.";

const string ch1_snafsrecipe_3 = "Ñíàô îñòàëñÿ âåñüìà äîâîëåí ïðèíåñåííûìè èíãðåäèåíòàìè.";

const string ch1_snafsrecipe_4 = "Òåïåðü îí êàæäûé äåíü áóäåò äàâàòü ìíå ðàãó èç ìÿñíûõ æóêîâ.";

const string ch1_snafsrecipe_5 = "Ìÿñíûå æóêè îáèòàþò íåïîäàëåêó îò ïîêèíóòûõ õèæèí ó ñòåí çàìêà.";

const string ch1_snafsrecipe_6 = "Àäñêèå ãðèáû ìîæíî íàéòè íà ïîëÿíå ïåðåä óïàâøåé áàøíåé ó þæíûõ âîðîò.";

const string ch1_lostnek = "Ïðîïàâøèé ñòðàæíèê";

const string ch1_lostnek_1 = "Ìîæåò, êîïàòåëè â ðàéîíå àðåíû çíàþò, êóäà ïðîïàë Íåê.";

const string ch1_lostnek_2 = "Ïðèçðàê ïî èìåíè Ñëàé îáåùàë ïîãîâîðèòü ñ Äèåãî, åñëè ÿ ñóìåþ îòûñêàòü Íåêà. Ýòîò ñòðàæíèê, äîëæíî áûòü, ïðèñîåäèíèëñÿ ê Íîâîìó Ëàãåðþ. Íàäî ñõîäèòü ê àðåíå è ñïðîñèòü î íåì Ôëåò÷åðà.";

const string ch1_lostnek_3 = "Ïðèçðàê ïî èìåíè Ñëàé ïîïðîñèë ìåíÿ íàéòè ïðîïàâøåãî ñòðàæíèêà Íåêà. Âîçìîæíî, ÷òî îí ïðèñîåäèíèëñÿ ê Íîâîìó Ëàãåðþ. Íàäî ñõîäèòü ê àðåíå è ïîãîâîðèòü îá ýòîì ñ Ôëåò÷åðîì.";

const string ch1_lostnek_4 = "ß îòäàë àìóëåò Íåêà Ñëàþ. Îí áûë î÷åíü óäèâëåí ìîåé ÷åñòíîñòüþ.";

const string ch1_lostnek_5 = "Ñëàþ íóæåí àìóëåò Íåêà.";

const string ch1_lostnek_6 = "Ïîâàð Ñíàô âèäåë Íåêà ïîñëåäíèé ðàç, êîãäà òîò øåë ñîáèðàòü ãðèáû.";

const string ch1_fisknewdealer = "Êðûøà äëÿ Ôèñêà";

const string ch1_fisknewdealer_1 = "Òîðãîâåö Ôèñê íà ðûíêå â Ñòàðîì Ëàãåðå õî÷åò, ÷òîáû ÿ ïîäûñêàë åìó íîâóþ êðûøó âçàìåí ïîáèòîãî ìíîé Ìîðäðàãà.";

const string ch1_fisknewdealer_2 = "Ôèñê äîâîëåí, ïîòîìó ÷òî Øàðêè çàéìåòñÿ òåì, ÷åì çàíèìàëñÿ Ìîðäðàã.";

const string ch1_kalomsrecipe = "Ðåöåïò ñåêòàíòîâ";

const string ch1_kalomsrecipe_1 = "Êîð Ãàëîì íå äàñò ìíå ðåöåïòà. Íî â åãî ëàáîðàòîðèè åñòü ñóíäóêè À îí òàê óâëå÷åí äðóãèìè äåëàìè";

const string ch1_kalomsrecipe_2 = "Ïðèçðàê ïî èìåíè Äåêñòåð, òîðãóþùèé íà ðûíêå, ïîðó÷èë ìíå îòïðàâèòüñÿ ê Èäîëó Ãàëîìó â Áîëîòíûé Ëàãåðü è ïðèíåñòè åìó ðåöåïò.";

const string ch1_kalomsrecipe_3 = "×òîáû ïîïàñòü òóäà, ìíå íàäî áûòü îäíèì èç ñîþçíèêîâ Áîëîòíîãî Ëàãåðÿ. Òàê ñêàçàë Äåêñòåð.";

const string ch1_kalomsrecipe_6 = "Áîëîòíûé Ëàãåðü ðàñïîëîæåí ê âîñòîêó îò ñòàðîãî Ëàãåðÿ.";

const string ch1_kalomsrecipe_7 = "Äåêñòåð îñòàëñÿ ïîä âïå÷àòëåíèåì. Óâåðåí, îí ðàññêàæåò îá ýòîì Äèåãî.";

const string ch1_kalomsrecipe_8 = "Äåêñòåð îñòàëñÿ ïîä âïå÷àòëåíèåì. Íî ÷òî òîëêó - ÿ íå ìîãó ñòàòü ïðèçðàêîì â ëþáîì ñëó÷àå.";

const string ch1_bringlist = "Èñïûòàíèå âåðû";

const string ch1_bringlist_1 = "ßí äàë ìíå ñïèñîê áåç âñÿêèõ ïðîáëåì.";

const string ch1_bringlist_2 = "Äèåãî ïîñëàë ìåíÿ â Ñòàðóþ Øàõòó. ß äîëæåí çàáðàòü ñïèñîê ó ïàðíÿ ïî èìåíè ßí. Ýòà áóìàãà íå äîëæíà ïîïàñòü â ðóêè Íîâîãî Ëàãåðÿ.";

const string ch1_bringlist_3 = "ßí îòäàñò ìíå ñïèñîê, åñëè ÿ ñêàæó åìó, ÷òî ìåíÿ ïîñëàë Äèåãî.";

const string ch1_bringlist_4 = "Ãðåõýì äàñò ìíå êàðòó. ß ìîãó íàéòè åãî ñëåâà îò ñåâåðíûõ âîðîò.";

const string ch1_bringlist_5 = "Äèåãî áûë ïðîñòî ñ÷àñòëèâ, êîãäà ÿ äàë åìó ñïèñîê ßíà.";

const string ch1_bringlist_6 = "Äèåãî áûë î÷åíü äîâîëåí, êîãäà ÿ äàë åìó ñïèñîê ßíà. Ïîõîæå, îí íå çàìåòèë ïîääåëêè Ëàðñà Õîòÿ ×òî ýòî çà ñòðàííûé áëåñê áûë â åãî ãëàçàõ?";

const string ch1_gotopsi = "Áîëüøèå ïëàíû Áðàòñòâà";

const string ch1_gotopsi_1 = "ß óâåðåí, ÷òî òåïåðü çíàþ äîñòàòî÷íî î äåëàõ ñåêòû. Íàäî ðàññêàçàòü Ðàâåíó îáî âñåì, êàê òîëüêî îêàæóñü â Ñòàðîì Ëàãåðå.";

const string ch1_gotopsi_2 = "Ðàâåí ïîñëàë ìåíÿ ê Áðàòñòâó â Áîëîòíûé Ëàãåðü îò ëèöà Ñòàðîãî Ëàãåðÿ. ß äîëæåí îñìîòðåòüñÿ è äåðæàòü óøè íàñòîðîæå. Âîçìîæíî ïîäâåðíåòñÿ êàêàÿ-òî öåííàÿ äëÿ Áàðîíîâ èíôîðìàöèÿ.";

const string ch1_gotopsi_raven = "Ðàâåí íàãîâîðèë ìíå âñÿêîé ÷óøè! ß íå ñòàíó ìèðèòüñÿ ñ òàêèì îòíîøåíèåì. Ýòî íå ïî ìíå. Ñ ýòîãî ìîìåíòà áóäó äåëàòü òî, ÷òî ñàì çàõî÷ó.";

const string ch1_joinnc = "Âñòóïëåíèå â Íîâûé Ëàãåðü";

const string ch1_joinnc_1 = "Ïîñêîëüêó ÿ ïðèíàäëåæó ê ëþäÿì Ãîìåçà, áàíäà Ëàðñà òåïåðü íå äëÿ ìåíÿ!";

const string ch1_joinnc_2 = "Ïîñêîëüêó ÿ âñåðüåç ðåøèë ïðèìêíóòü ê Áðàòñòâó, òî ÿ íå ìîãó áîëüøå ïðåòåíäîâàòü íà çâàíèå îäíîãî èç âîðîâ Íîâîãî Ëàãåðÿ.";

const string ch1_joinnc_3 = "Ëàðñ, ëèäåð âîðîâ, áûë î÷åíü óäèâëåí, êîãäà óâèäåë ñïèñîê. Îí äîïîëíèë åãî, è òåïåðü ÿ äîëæåí îòíåñòè åãî Äèåãî.";

const string ch1_joinnc_4 = "Ëàðñ óæå îãðàáèë êîíâîé èç Ñòàðîãî Ëàãåðÿ. Ñîâïàäåíèå? Èëè ðàñ÷åò? Âîò â ÷åì âîïðîñ.";

const string ch1_joinnc_5 = "Ãîðí, íàåìíèê, êàêèì-òî îáðàçîì ïðèíèìàë ó÷àñòèå â íàëåòå íà êîíâîé. Îò íåãî-òî ÿ è ïîëó÷ó ñâîþ äîëþ.";

const string ch1_joinnc_6 = "Ëàðñ ïîñëàë ìåíÿ ê Ìîðäðàãó. Îí õî÷åò, ÷òîáû ÿ ïåðåäàë åìó ñëåäóþùåå: â Ëàãåðü Áðàòñòâà áóäåò çàñëàí øïèîí ñ öåëüþ âûÿñíåíèÿ ïëàíîâ Áðàòñòâà.";

const string ch1_joinnc_7 = "Ìíå áûëî ñêàçàíî âçÿòü áîëîòíèê Èäîëà Èñèäðî è ïðîäàòü åãî çà 400 êóñêîâ ðóäû. Ëàðñ õî÷åò ïîëó÷èòü ïðèáûëü.";

const string ch1_joinnc_8 = "Ëàðñ íå ñìîã ñêðûòü ñâîåãî óäîâëåòâîðåíèÿ, êîãäà ÿ äàë åìó 400 êóñêîâ ðóäû, âûðó÷åííûå ñ ïðîäàæè áîëîòíèêà Èñèäðî.";

const string ch1_joinnc_9 = "Ëàðñ ïðèíÿë ìåíÿ â áàíäó. Òåïåðü Íîâûé Ëàãåðü - ýòî ìîé äîì!";

const string ch1_joinnc_10 = "Ìîðäðàã ñîãëàñèëñÿ ïîêàçàòü ìíå äîðîãó â Íîâûé Ëàãåðü. Íàäåþñü, ýòî íå ëîâóøêà.";

const string ch1_joinnc_11 = "Âîò ìû è ñòîèì ïåðåä âîðîòàìè Íîâîãî Ëàãåðÿ. Ìîðäðàã äàë ìíå êîëüöî, êîòîðîå ÿ äîëæåí ïåðåäàòü Ëàðñó, ëèäåðó âîðîâ, åñëè ðåøó ïðèñîåäèíèòüñÿ ê ýòîìó Ëàãåðþ. Ñàì æå Ìîðäðàã îñòàíåòñÿ â áàðå.";

const string ch1_joinnc_12 = "ß ïåðåäàë Ìîðäðàãó ñëîâà Ëàðñà. Îí ÷òî-òî ïðîáîðìîòàë â îòâåò. ×òî-òî î òîì, ÷òî âñå ñàìî ñîáîé óëàæèâàåòñÿ. Ïîíÿòèÿ íå èìåþ, î ÷åì ýòî îí!";

const string ch1_carrywater = "Âîäîíîñ äëÿ Ëåôòè";

const string ch1_carrywater_1 = "Òåïåðü, êîãäà Ëåôòè ìåðòâ, âîïðîñ ñ âîäîé ìîæíî ñ÷èòàòü çàêðûòûì. ×åñòíî ãîâîðÿ, ìíå ýòîò ïàðåíü íèêîãäà íå íðàâèëñÿ.";

const string ch1_carrywater_2 = "Ëîðä äàë ìíå äþæèíó áóòûëîê.";

const string ch1_carrywater_3 = "Âîð èç Íîâîãî Ëàãåðÿ ïî èìåíè Ëåôòè õî÷åò, ÷òîáû ÿ îòíåñ âîäó êðåñòüÿíàì íà ðèñîâûå ïîëÿ.";

const string ch1_carrywater_4 = "Ìîæåò, ýòî è ãëóïàÿ çàäà÷à, íî ÿ ñîãëàñèëñÿ, ïîòîìó ÷òî èìåííî òàê è çàâîäÿò çíàêîìñòâà. Ìíå íóæíî ñíà÷àëà çàáðàòü âîäó ó òàê íàçûâàåìîãî Ëîðäà.";

const string ch1_carrywater_5 = "Ëåôòè î÷åíü íå ïîíðàâèëîñü òî, ÷òî ÿ îòâåðã åãî ïðåäëîæåíèå. À ÿ-òî äóìàë, ÷òî ýòî â Ñòàðîì Ëàãåðå æèòü òÿæåëî.";

const string ch1_carrywater_6 = "ß ñíîâà âñòðåòèë Ëåôòè! Îí õî÷åò, ÷òîáû ÿ ïîøåë ê Ëîðäó è çàáðàë âîäó äëÿ êðåñòüÿí íà ðèñîâûõ ïîëÿõ.";

const string ch1_carrywater_7 = "Ëåôòè ïðîñòî ñ óìà ñîøåë, êîãäà óñëûøàë, ÷òî ÿ òàê è íå ðàçîáðàëñÿ ñ âîäîé äî ñèõ ïîð! Çàáàâíûé ïàðåíåê ýòîò Ëåôòè.";

const string ch1_carrywater_8 = "Óøàì ñâîèì íå âåðþ. ß äîñòàâèë âîäó âñåì íóæäàâøèìñÿ, íî òåïåðü Ëåôòè õî÷åò, ÷òîáû ÿ ýòèì êàæäûé äåíü çàíèìàëñÿ. Äóìàþ, ýòîìó òóïèöå íàäî îáúÿñíèòü ïàðó âåùåé ïîäîñòóïíåå.";

const string ch1_carrywater_9 = "ß âòîëêîâàë Ëåôòè, ÷òî åìó ëó÷øå áîëüøå íå ïðèñòàâàòü êî ìíå ñî ñâîèìè ïðåäëîæåíèÿìè. Íåêîòîðûå ëþäè íå ñïîñîáíû ïîíÿòü, êîãäà èì îáúÿñíÿåøü ïî-õîðîøåìó.";

const string ch1_damlurker = "Øíûã è ïëîòèíà";

const string ch1_damlurker_1 = "Ãîìåð ñêàçàë ìíå, ÷òî îäíà èç øíûã ïîðòèò ïëîòèíó. Åñëè ÿ ñìîãó îñòàíîâèòü åå, òî ñìîãó è ïëîòèíó ïî÷èíèòü.";

const string ch1_damlurker_2 = "Ó øíûãè äîëæíà áûòü íîðà èëè äðóãîå óêðûòèå ãäå-òî ó äàëüíåãî êðàÿ çàïðóäû.";

const string ch1_damlurker_3 = "Ñî øíûãîé ïîêîí÷åíî, Ãîìåð ñíîâà ìîæåò ñïàòü ñïîêîéíî.";

const string ch1_spreadjoints = "Ïîèñê êëèåíòîâ";

const string ch1_spreadjoints_1 = "Èäîë Êàãàí äàë ìíå 10 øòóê Çåëåíîãî íîâè÷êà, êîòîðûå ìíå íàäî ðàñïðîñòðàíèòü â Íîâîì Ëàãåðå.";

const string ch1_spreadjoints_2 = "Èäîë Êàãàí ïîëó÷èë íîâûõ ïîêóïàòåëåé, à ÿ - ñâîå âîçíàãðàæäåíèå.";

const string ch1_dealerjob = "Òîðãîâåö áîëîòíèêîì";

const string ch1_dealerjob_1 = "Èäîë Èñèäðî ïîñòîÿííî îøèâàåòñÿ â áàðå ó îçåðà è íàïèâàåòñÿ. Îí äîëæåí ðàñïðîäàòü ñâîþ ÷àñòü áîëîòíèêà, íî ýòî åìó ÿâíî íå óäàåòñÿ. Âîçìîæíî, óäàñòñÿ óãîâîðèòü åãî ïîðó÷èòü ýòî ìíå... Âîò òîëüêî êàê?";

const string ch1_dealerjob_2 = "Èäîë Èñèäðî ñèëüíî ðàññòðîèëñÿ, êîãäà ÿ èçëîæèë ïëàí ïî åãî çàìåíå. Íî ýòîãî âñå ðàâíî îêàçàëîñü íåäîñòàòî÷íî äëÿ òîãî, ÷òîáû ïîçâîëèòü ìíå ñäåëàòü åãî ðàáîòó.";

const string ch1_dealerjob_3 = "Ïëàí Èäîëà Êàãàíà ïî çàìåíå àëêîãîëèêà Èäîëà Èñèäðî ïðîñòî äîêîíàë åãî. Äóìàþ, òåïåðü îí ïðèìåò ìîå ïðåäëîæåíèå.";

const string ch1_dealerjob_4 = "Ìîå ùåäðîå ïðåäëîæåíèå ñíÿëî ïîñëåäíèå îïàñåíèÿ Èäîëà Èñèäðî. Óâåðåí, òåïåðü îí åãî ïðèìåò.";

const string ch1_dealerjob_5 = "Èäîë Èñèäðî ñ ãîòîâíîñòüþ ïðèíÿë âûïèâêó, íî îòäàâàòü ìíå áîëîòíèê äëÿ ïðîäàæè îòêàçàëñÿ.";

const string ch1_dealerjob_6 = "Èäîë Èñèäðî îòäàë ìíå áîëîòíèê. Åñëè ÿ ïðîäàì åãî, òî ïîëó÷ó ïîëîâèíó âûðó÷êè, ÷òî ñîñòàâèò 200 êóñêîâ ðóäû.";

const string ch1_dealerjob_7 = "Èäîë Èñèäðî áûë ðàä ïîëó÷èòü ñâîè 200 êóñêîâ ðóäû.";

const string ch1_dealerjob_8 = "Èäîë Èñèäðî öåëûìè äíÿìè ñèäèò â áàðå ó îçåðà è ïüåò.";

const string ch1_shrikeshut = "Õèæèíà Øðàéêà";

const string ch1_shrikeshut_1 = "ß ñìîã óãîâîðèòü Øðàéêà ïîèñêàòü äðóãîé äîì. Î÷åíü èíòåðåñíî, ÷òî Ãîðí íà ýòî ñêàæåò.";

const string ch1_shrikeshut_2 = "Íàåìíèê Ãîðí ñêàçàë ìíå, ÷òî Øðàéê çàíÿë õèæèíó áåç ñïðîñà. Ïîñêîëüêó ÿ ïîãîâîðèë ñ Ãîðíîì, òî îñòàëüíûå íàåìíèêè íå áóäóò ìíå ìåøàòü áåñåäîâàòü ñî Øðàéêîì ïî äóøàì.";

const string ch1_shrikeshut_3 = "Ãîðí óäèâèëñÿ, êîãäà óçíàë, ÷òî ÿ ñóìåë óáåäèòü Øðàéêà ïîêèíóòü äîì. Äóìàþ, îí ÷åñòíûé ïàðåíü. Êðóòîé, íî ñïðàâåäëèâûé. Íàäî áóäåò ïðîäîëæèòü íàøå çíàêîìñòâî â áóäóùåì.";

const string ch1_horatiosteachings = "Êðåñòüÿíèí Ãîðàöèî";

const string ch1_horatiosteachings_1 = "Ãîðàöèî, ôåðìåð íà ðèñîâûõ ïîëÿõ Íîâîãî Ëàãåðÿ, ìîæåò íàó÷èòü ìåíÿ, êàê íàíîñèòü áîëåå ñèëüíûå óäàðû. Íî ïîêà ìíå íå óäàåòñÿ îòâåòèòü íà åãî âîïðîñ - çà÷åì?";

const string ch1_horatiosteachings_2 = "Ãîðàöèî ïîêàçàë ìíå, êàê èñïîëüçîâàòü ñâîþ ñèëó â áîþ è êàê ñèëüíåå áèòü. ×èñòåéøåé äóøè ÷åëîâåê.";

const string ch1_gotopsicamp = "Áîëüøèå ïëàíû Áðàòñòâà";

const string ch1_gotopsicamp_1 = "ß óâåðåí, ÷òî òåïåðü çíàþ äîñòàòî÷íî î äåëàõ ñåêòû. Ìîæíî âîçâðàùàòüñÿ ê Ìîðäðàãó.";

const string ch1_gotopsicamp_2 = "Áðàòñòâî â Áîëîòíîì Ëàãåðå ïëàíèðóåò ÷òî-òî áîëüøîå.";

const string ch1_gotopsicamp_3 = "ß äîëæåí ïîìî÷ü Ìîðäðàãó ðàçîáðàòüñÿ â òîì, ÷òî æå çäåñü ïðîèñõîäèò.";

const string ch1_gotopsicamp_4 = "Îí îòïðàâèë ìåíÿ ïðÿìî â Ëàãåðü Áðàòñòâà.";

const string ch1_gotopsicamp_5 = "Âîð ïî èìåíè Ìîðäðàã äîëæåí îá ýòîì ïîçàáîòèòüñÿ. Îáû÷íî åãî ìîæíî íàéòè â áàðå íà îçåðå, ðÿäîì ñ Íîâûì Ëàãåðåì.";

const string ch1_gotopsicamp_6 = "Ìîðäðàã ðåøèë ïðåäîñòàâèòü ìíå âîçìîæíîñòü çàíÿòüñÿ ðàçâåäêîé â Áîëîòíîì Ëàãåðå. Ãóðó ãîòîâÿòñÿ ê áîëüøîé öåðåìîíèè, íî ìíå íóæíî óçíàòü áîëüøå äåòàëåé.";

const string ch1_gotopsicamp_7 = "ß äîëæåí ïîãîâîðèòü ñ Ëåñòåðîì â Ëàãåðå Áðàòñòâà. Ïîõîæå, åìó ìîæíî äîâåðÿòü, ê òîìó æå îí è ðàíüøå ïîìîãàë Ìîðäðàãó.";

const string ch1_gotopsicamp_8 = "Ìîðäðàã ÷óòü îò ñìåõà íå ëîïíóë, êîãäà ÿ åìó ðàññêàçàë î ÿéöàõ ïîëçóíîâ. Ïîõîæå, ÷òî òåïåðü îí îêîí÷àòåëüíî ïîòåðÿë èíòåðåñ ê ïîäãëÿäûâàíèþ çà Ãóðó. Áóäåì ñ÷èòàòü, ÷òî äåëî óëàæåíî!";

const string ch1_joinpsi = "Âñòóïëåíèå â Áîëîòíûé Ëàãåðü";

const string ch1_joinpsi_1 = "Ñ ñåãîäíÿøíåãî äíÿ Ñòàðûé Ëàãåðü ñòàíîâèòñÿ ìîèì äîìîì. Áðàòñòâó ïðèäåòñÿ êàê-òî îáõîäèòüñÿ áåç ìåíÿ.";

const string ch1_joinpsi_2 = "Çàäóìêà Ëåñòåðà ñðàáîòàëà. Èäîë Íàìèá ïîãîâîðèë ñî ìíîé: îí óâåðåí, ÷òî ÿ èñòèííûé ïîñëåäîâàòåëü. Òåïåðü íàäî óâèäåòüñÿ ñ Ãóðó Êîð Ãàëîìîì â åãî ëàáîðàòîðèè.";

const string ch1_joinpsi_3 = "Èäîë Òîíäðàë ñ÷èòàåò, ÷òî ÿ äîñòîèí íîñèòü ðîáó ïîñëóøíèêà!";

const string ch1_joinpsi_4 = "Áëàãîäàðÿ ìîåìó ñïåöèàëüíîìó ïîäàðêó Èäîëà Òèîíà ïîñåòèëî âèäåíèå! Òåïåðü îí õî÷åò, ÷òîáû ìíîé çàíÿëñÿ Êîð Ãàëîì.";

const string ch1_joinpsi_5 = "Èäîë Îðàí íàçâàë ìåíÿ äîñòîéíûì ñëóãîé Ñïÿùåãî, ïîñêîëüêó ÿ çàùèòèë äðóãèõ ïîñëóøíèêîâ îò øåðøíåé íà áîëîòå.";

const string ch1_joinpsi_6 = "Èäîë Êàäàð ñ÷èòàåò ìåíÿ ñïîñîáíûì ó÷åíèêîì.";

const string ch1_joinpsi_7 = "Êîð Ãàëîì ïîçâîëèò ìíå ïðèñîåäèíèòüñÿ ê Áðàòñòâó â êà÷åñòâå ïîñëóøíèêà, åñëè ÿ ñìîãó óãîâîðèòü ÷åòûðåõ Èäîëîâ âûñòóïèòü â ìîþ ïîëüçó.";

const string ch1_joinpsi_8 = "Ñåãîäíÿ Êîð Ãàëîì ïðèíÿë ìåíÿ ïîñëóøíèêîì. Êîíå÷íî, îí ñíîâà áûë íåïåðåäàâàåìî íåâûíîñèì, îäíàêî òåïåðü ÿ ïðèíàäëåæó ê Áðàòñòâó Ñïÿùåãî.";

const string ch1_joinpsi_9 = "Éîðó õîòåë áû ïîëó÷èòü ìîþ ïîðöèþ áîëîòíèêà, êîòîðóþ ÿ âçÿë ó Ôîðòóíî.";

const string ch1_joinpsi_10 = "Èäîë Êàäàð áóäåò óäèâëåí, åñëè ÿ ñìîãó ïðîèçíåñòè çàêëèíàíèå ñíà íà åãî ñëóøàòåëÿ.";

const string ch1_joinpsi_11 = "Íàäî ñïðîñèòü ó Ëåñòåðà, êàê ìíå óäèâèòü Èäîëà Íàìèáà. Åãî ìîæíî íàéòè ó ãëàâíûõ âîðîò. Íàäî óáåäèòüñÿ, ÷òî ðÿäîì íåò íè îäíîãî Ãóðó.";

const string ch1_joinpsi_12 = "Èäîë Ïàðâåç ÿâëÿåòñÿ ïîñëàííèêîì Áðàòñòâà. Îí îñòàåòñÿ â Ñòàðîì Ëàãåðå, ÷òîáû èñêàòü íîâûõ ïîñëåäîâàòåëåé Ñïÿùåãî. Îí ïðåäëîæèë ïðîâîäèòü ìåíÿ äî Áîëîòíîãî Ëàãåðÿ, äîìà Áðàòñòâà.";

const string ch1_joinpsi_13 = "Áîëîòíûé Ëàãåðü ïåðåäî ìíîé. Ìîé êîìïàíüîí ïîñîâåòîâàë ïîãîâîðèòü ñ Êîð Ãàëîìîì. Îí çàâåäóåò îáó÷åíèåì íîâè÷êîâ.";

const string ch1_joinpsi_14 = "Ïàðåíü ïî èìåíè Èäîë Ïàðâåç ìîæåò îòâåñòè â Áîëîòíûé Ëàãåðü Áðàòñòâà. Åãî ìîæíî íàéòè íà òîðãîâîé ïëîùàäè çà çàìêîì, â Ñòàðîì Ëàãåðå.";

const string ch1_joinpsi_15 = "Èäîë Êàãàí äàë ìíå Çîâ ñíà, ÷òîáû ÿ äîñòàâèë åãî Èäîëó Òèîíó. Ýòî ïîìîæåò ìíå ïðèñîåäèíèòüñÿ ê Áðàòñòâó.";

const string ch1_joinpsi_16 = "Áðàòñòâó ïðèäåòñÿ êàê-òî îáõîäèòüñÿ áåç ìåíÿ, ïîñêîëüêó òåïåðü Íîâûé Ëàãåðü ÿâëÿåòñÿ ìîèì äîìîì.";

const string ch1_joinpsi_17 = "Åñëè ÿ õî÷ó ïðèñîåäèíèòüñÿ ê Áðàòñòâó Áîëîòíîãî Ëàãåðÿ, òî ìíå íóæíî ïðîèçâåñòè âïå÷àòëåíèå íà Ãóðó. Ê ñîæàëåíèþ, îíè íå ðàçãîâàðèâàþò ñ íåçíàêîìöàìè. Ëåñòåð, òîæå íîâè÷îê, ñêàçàë ìíå, ÷òî îíè áóäóò íàáëþäàòü çà ìíîé, è ïîýòîìó íàäî ñòàðàòüñÿ ïðîèçâåñòè íà íèõ âïå÷àòëåíèå. Íå èìåþ íè ìàëåéøåãî ïðåäñòàâëåíèÿ, êàê ýòî ñäåëàòü! Ïîêà æå ñòîèò îñìîòðåòüñÿ ïîëó÷øå â Ëàãåðå.";

const string ch1_joinpsi_18 = "×òîáû ïðîèçâåñòè âïå÷àòëåíèå íà Èäîëà Íàìèáà, íàäî çàâåñòè ñ ñ Ëåñòåðîì ðàçãîâîð î ñòàðûõ áîãàõ è Ñïÿùåì, êîãäà îí áóäåò ðÿäîì.";

const string ch1_ghorimsrelief = "Ñìåíà äëÿ Ãîðèìà";

const string ch1_ghorimsrelief_1 = "Õàðëîê çàìåíèë Ãîðèìà. ×óäåñà âñå-òàêè èíîãäà ïðîèñõîäÿò.";

const string ch1_ghorimsrelief_2 = "Ïîñëóøíèê Ãîðèì ïîïðîñèë ìåíÿ óãîâîðèòü ëåíèâöà Õàðëîêà ñìåíèòü åãî. Õàðëîê îáû÷íî îøèâàåòñÿ ó ìàãàçèíà Ôîðòóíî.";

const string ch1_ghorimsrelief_3 = "Ïîõîæå, Õàðëîê íå òîëüêî ëåíèâ, íî è óïðÿì. Âîçìîæíî, ìíå íóæíî ïîìî÷ü åìó";

const string ch1_ghorimsrelief_4 = "Äî Õàðëîêà íàêîíåö-òî äîøëî. Òåïåðü îí ðàçáåðåòñÿ ñ Ãîðèìîì.";

const string ch1_ghorimsrelief_5 = "Êàæåòñÿ, ÿ ñëèøêîì ñèëüíî óäàðèë Õàðëîêà. Îí áîëüøå íå ñìîæåò çàìåíèòü Ãîðèìà...";

const string ch1_ghorimsrelief_6 = "Ãîðèì áûë íå îñîáî ðàä íîâîñòè ïðî Õàðëîêà. Òåïåðü åìó ïðèäåòñÿ òîëî÷ü äàëüøå ñàìîìó.";

const string ch1_deliverweed = "Ñáîð áîëîòíèêà";

const string ch1_deliverweed_1 = "Ïîõîæå, äåëî Õàðëîêà ïðîèçâåëî âïå÷àòëåíèå íà Ãóðó Èäîëà Îðàíà. Òåïåðü ÿ óäîñòîåí ÷åñòè çàáèðàòü âåñü óðîæàé áîëîòíèêà ó íîâè÷êîâ è îòäàâàòü åãî Êîð Ãàëîìó.";

const string ch1_deliverweed_2 = "Êîãäà ÿ âðó÷àë åìó ñåãîäíÿøíèé óðîæàé, Êîð Ãàëîì áûë ñíîâà ïðîñòî íåâûíîñèì.";

const string ch1_deliverweed_3 = "Âàéðàí äàñò ìíå áîëîòíèê òîëüêî â òîì ñëó÷àå, åñëè ÿ óáüþ âñåõ øåðøíåé â ðàäèóñå 20 øàãîâ.";

const string ch1_deliverweed_4 = "Âàéðàí îòäàë ìíå âòîðóþ ÷àñòü ñåãîäíÿøíåãî óðîæàÿ áîëîòíèêà. Ïîñìîòðèì, áóäåò ëè Êîð Ãàëîì óäîâëåòâîðåí ðåçóëüòàòîì.";

const string ch1_deliverweed_5 = "Âàéðàí îòäàë ìíå ñåãîäíÿøíèé óðîæàé áîëîòíèêà. Íå ãóñòî. Âîçìîæíî, ãäå-òî çäåñü åñòü âòîðàÿ ãðóïïà ñáîðùèêîâ.";

const string ch1_deliverweed_6 = "Áýëîð îòäàë ìíå ñåãîäíÿøíèé ñáîð áîëîòíèêà äëÿ Êîð Ãàëîìà.";

const string ch1_deliverweed_7 = "Ïî ñëîâàì Áýëîðà, âòîðàÿ ãðóïïà ñáîðùèêîâ ðàáîòàåò íà äðóãîé ñòîðîíå áîëîòà. Ïîñêîëüêó ìíå íå ïîçâîëåíî çàäàâàòü Èäîëó Îðàíó âîïðîñû, ïðèäåòñÿ ñàìîìó îáûñêèâàòü áîëîòî.";

const string ch1_deliverweed_8 = "Áýëîð óïîìÿíóë ÷åëîâåêà ïî èìåíè Ñàéôåð, êîòîðûé õîòåë áû êóïèòü ñáîð áîëîòíèêà. Åãî ìîæíî íàéòè â áàðå ó îçåðà, ðÿäîì ñ Íîâûì Ëàãåðåì. Íî â ýòîì ñëó÷àå ìåíÿ îæèäàþò ñåðüåçíûå íåïðèÿòíîñòè ñ Ãóðó.";

const string ch1_recruitdusty = "Íîâûå ðåêðóòû äëÿ Áðàòñòâà";

const string ch1_recruitdusty_1 = "Ìíå óäàëîñü ïîäêóïèòü ñòðàæíèêîâ ó þæíûõ âîðîò. Ó êàæäîãî åñòü öåíà!";

const string ch1_recruitdusty_2 = "Èäîë Òîíäðàë ïîñëàë ìåíÿ â Ñòàðûé Ëàãåðü, ÷òîáû íàíÿòü íîâîãî ÷åëîâåêà äëÿ Áðàòñòâà. Ýòî õîðîøèé øàíñ çàñëóæèòü åãî ðàñïîëîæåíèå.";

const string ch1_recruitdusty_3 = "Äàñòè òåïåðü ÿâëÿåòñÿ ó÷åíèêîì Èäîëà Òîíäðàëà. ß âûïîëíèë çàäàíèå.";

const string ch1_recruitdusty_4 = "Ðóäîêîï èç Ñòàðîãî Ëàãåðÿ ïî èìåíè Äàñòè áîëüøå íå õî÷åò æèòü òàì. Îí ïîäóìûâàåò î ïðèñîåäèíåíèè ê Ëàãåðþ Áðàòñòâà.";

const string ch1_recruitdusty_5 = "ß ñóìåë óãîâîðèòü ðóäîêîïà Äàñòè ïðèñîåäèíèòüñÿ ê Áðàòñòâó. Íî ìíå ïðèäåòñÿ îòäàòü íåêîòîðîå êîëè÷åñòâî ðóäû ñòðàæíèêàì. Ñàìîãî æå Äàñòè ëó÷øå ïðÿìèêîì îòâåñòè ê Èäîëó Òîíäðàëó.";

const string ch1_recruitdusty_6 = "Äàñòè ïðåäîñòåðåã ìåíÿ îò ïðîõîäà ÷åðåç ñåâåðíûå âîðîòà. Ïîõîæå, ÷òî ïîäêóïèòü ñòðàæíèêîâ ëåã÷å ó âîðîò þæíûõ.";

const string ch1_recruitdusty_7 = "Ðóäîêîï Ìåëâèí ïðèñîåäèíèëñÿ ê Áðàòñòâó. Åãî çíàêîìûé Äàñòè òîæå ïîäóìûâàåò î òîì, ÷òîáû ïîêèíóòü Ñòàðûé Ëàãåðü.";

const string ch1_krautbote = "Áîëîòíèê äëÿ Ãîìåçà";

const string ch1_krautbote_1 = "Áàðòîëî çàïëàòèë ìíå 500 êóñêîâ ðóäû çà ãðóç áîëîòíèêà.";

const string ch1_krautbote_2 = "Çàïàñ áîëîòíèêà äëÿ Ãîìåçà íàäî îñòàâèòü ó Áàðòîëî. ß ñìîãó íàéòè åãî â äîìå Áàðîíîâ.";

const string ch1_krautbote_3 = "Êîð Ãàëîì ïîñëàë ìåíÿ ê Ãîìåçó â Ñòàðûé Ëàãåðü, ÷òîáû ÿ äîñòàâèë áîëîòíèê.";

const string ch1_krautbote_4 = "Êîð Ãàëîì ïîëó÷èë äåíüãè çà äîñòàâëåííûé Áàðîíàì áîëîòíèê.";

const string ch1_drugmonopol = "Ìîíîïîëèÿ íà áîëîòíèê";

const string ch1_drugmonopol_1 = "Êîð Ãàëîì õî÷åò, ÷òîáû ÿ ðàçîáðàëñÿ ñ êîíêóðèðóþùèì ïðîèçâîäñòâîì áîëîòíèêà â Íîâîì Ëàãåðå. ß íå ïðåäñòàâëÿþ ñåáå, ãäå íà÷àòü. Âèäèìî, ïðèäåòñÿ ïðîñòî ïîéòè â Íîâûé Ëàãåðü.";

const string ch1_drugmonopol_2 = "ß ïðîèíôîðìèðîâàë Êîð Ãàëîìà, ÷òî ïðî êîíêóðåíòîâ èç Íîâîãî Ëàãåðÿ îí ìîæåò çàáûòü. Îí ñíîâà áûë î÷åíü 'äðóæåëþáåí'.";

const string ch1_drugmonopol_3 = "ß ðàñêðûë ñåêðåò ïðîèçâîäñòâà áîëîòíèêà. Äæàêî è äâîå äðóãèõ âîðîâ äåëàþò åãî çäåñü.";

const string ch1_drugmonopol_4 = "Íåáîëüøîé òðþê ñ íåñóùåñòâóþùèìè ñòðàæàìè çàñòàâèë áåçäåëüíèêîâ óáðàòüñÿ. Ïðîáëåìà ðåøåíà. Íà êàêîå-òî âðåìÿ.";

const string ch1_drugmonopol_5 = "Áëàãîäàðÿ ìîåìó òàëàíòó äèïëîìàòà ïðîáëåìà áûëà ðåøåíà. Äåëüöå ñòàíîâèëîñü ñëèøêîì ãîðÿ÷èì äëÿ Äæàêî, è îí ñìûëñÿ.";

const string ch2_focus = "Þíèòîð äëÿ Ãóðó";

const string ch2_focus_1 = "Þ'Áåðèîí ïîñëàë íîâè÷êà Íèðàñà çà þíèòîðîì, íî ïàðíèøêà òàê è íå âåðíóëñÿ. Ãóðó äàë ìíå êàðòó ñ ìàðøðóòîì ñ ìàãè÷åñêîìó êàìíþ.";

const string ch2_focus_2 = "Þ'Áåðèîí ïîðó÷èë ìíå çàáðàòü þíèòîð ó äðóãîãî Ãóðó, ïî èìåíè Êîð Ãàëîì. Ýòîò Êîð Ãàëîì öåëûìè äíÿìè ñèäèò â ñâîåé ëàáîðàòîðèè.";

const string ch2_focus_3 = "Þ'Áåðèîí ïîðó÷èë ìíå çàáðàòü þíèòîð ó Êîð Ãàëîìà. Êàêîå ìíå ïðåäñòîèò óäîâîëüñòâèå - âñòðåòèòü ñíîâà ýòîãî ìèëîãî ÷åëîâåêà!";

const string ch2_focus_4 = "ß äîñòàâèë þíèòîð Êîð Ãàëîìó!";

const string ch2_focus_5 = "Íèðàñ îïîëîóìåë. Îí çàõîòåë îñòàâèòü þíèòîð ñåáå è â ÿðîñòè íàïàë íà ìåíÿ.";

const string ch2_focus_6 = "Ëåñòåð ñêàçàë ìíå, ÷òî Þ'Áåðèîí èùåò ìàãè÷åñêèé êàìåíü-þíèòîð. Ãóðó ìîæíî íàéòè âíóòðè õðàìîâîé ãîðû.";

const string ch2_mceggs = "Ñëþíà ïîëçóíîâ";

const string ch2_mceggs_1 = "Àñãõàí, íà÷àëüíèê ñòðàæíèêîâ øàõòû, íå îòêðîåò âîðîòà. Äëÿ ýòîãî íåîáõîäèìî èìåòü ðàçðåøåíèå ßíà.";

const string ch2_mceggs_2 = "Õîòÿ ßí è äàë ìíå ðàçðåøåíèå, Àñãõàí âñå ðàâíî íå îòêðîåò âîðîòà äî òåõ ïîð, ïîêà ÿ íå ñîáåðó ïîäêðåïëåíèå èç íåñêîëüêèõ ñòðàæåé.";

const string ch2_mceggs_3 = "Ìíå óäàëîñü ñîáðàòü íåñêîëüêî ñòðàæåé ïåðåä âîðîòàìè. ×òî æå æäåò íàñ òàì, â òåìíîòå?";

const string ch2_mceggs_4 = "Ãóðó Êîð Ãàëîì ïîïðîñèë ìåíÿ ïîèñêàòü èñòî÷íèê ñëþíû ïîëçóíîâ â Ñòàðîé Øàõòå. Äî ñèõ ïîð èñïîëüçîâàëèñü ÷åëþñòè ýòèõ ìîíñòðîâ, íî ìíå íàäî íàéòè èñòî÷íèê áîëåå êîíöåíòðèðîâàííîé æèäêîñòè.";

const string ch2_mceggs_5 = "ß äàë Êîð Ãàëîìó òðè ÿéöà ïîëçóíîâ. Îí áûë âåñüìà íåäðóæåëþáåí: ìíå ïðèøëîñü ïðîñòî âûïðàøèâàòü ñâîþ íàãðàäó!";

const string ch2_mceggs_6 = "ßí, íà÷àëüíèê øàõòû, íå áóäåò ìíå ïîìîãàòü â ïîèñêàõ ãíåçäà. Ëó÷øå áû ìíå ïîòîðîïèòüñÿ è ðàçäîáûòü åìó øåñòåðåíêó äëÿ ïðåññà. Îí ÷òî-òî ãîâîðèë î ñòàðûõ ïðåññàõ â çàáðîøåííûõ áîêîâûõ òóííåëÿõ.";

const string ch2_mceggs_7 = "ß ïðèíåñ ßíó øåñòåðåíêó îò ñòàðîãî ïðåññà. Îí ïîâåäàë ìíå, ÷òî Àñãõàíó ñëåäóåò ñêàçàòü ÂÑÅ ÁÓÄÅÒ Â ÏÎÐßÄÊÅ. Êàêèì-òî îáðàçîì ýòî çàñòàâèò åãî îòêðûòü âîðîòà.";

const string ch2_mceggs_8 = "Åñëè ÿ õî÷ó ðàçûñêàòü êëàäêó ÿèö ïîëçóíîâ, òî ìíå íàäî ïîãîâîðèòü ñ Àñãõàíîì.";

const string ch2_mceggs_9 = "Êîãäà ÿ ðàññêàçàë î ëîãîâå ïîëçóíîâ, ñòðàæ Ãîð Íà Áàð ïðèñîåäèíèëñÿ ê ìîèì ñèëàì ó âîðîò Àñãõàíà. Òàì ÿ åãî è ìîãó íàéòè òåïåðü.";

const string ch2_mceggs_10 = "ß óãîâîðèë ñòðàæà Ãîð Íà Êîøà ïðèñîåäèíèòüñÿ ê ìîèì ñèëàì ó âîðîò Àñãõàíà. Îí áóäåò æäàòü ìåíÿ òàì.";

const string ch2_mceggs_11 = "Ìíå íàäî îòíåñòè ÿéöà ïîëçóíîâ Êîð Ãàëîìó, îí èõ áóäåò æäàòü.";

const string ch2_mceggs_12 = "Ìíå íàäî îòäàòü öåëåáíûé ýëèêñèð Ãîð Íà Âèäó. Òîãäà îí ïðèñîåäèíèòñÿ ê íàøèì ñèëàì ó âîðîò Àñãõàíà.";

const string ch2_mceggs_13 = "ß ñïðîñèë ó ñòðàæà ó âõîäà â Ñòàðóþ Øàõòó î ëîãîâå ïîëçóíîâ. Îí îòîñëàë ìåíÿ ê äðóãèì ñòðàæàì: Ãîð Íà Âèäó, Ãîð Íà Êîøó è Ãîð Íà Áàðó. Èíòåðåñíî, êòî æå èç Áðàòñòâà çàíèìàåòñÿ ïðèäóìûâàíèåì òàêèõ çàêîâûðèñòûõ èìåí?";

const string ch2_book = "Àëüìàíàõ";

const string ch2_book_1 = "ß ïðåäëîæèë Òàëàñó âåðíóòü àëüìàíàõ äëÿ íåãî. Îí ïðîâîäèò ìåíÿ äî ìåñòà, ãäå íàõîäèòñÿ êíèãà.";

const string ch2_book_2 = "Âîò ìû ñòîèì ïåðåä âõîäîì â ïåùåðó ãîáëèíîâ. Ýòîò ïîäëûé ïîñëóøíèê õî÷åò, ÷òîáû ÿ òóäà ñóíóëñÿ îäèí.";

const string ch2_book_3 = "Êîð Ãàëîìó íóæåí ïîñëåäíèé ïðåäìåò äëÿ ïðîâåäåíèÿ öåðåìîíèè. Ýòî êíèãà îá èñïîëüçîâàíèè êàìíåé-þíèòîðîâ. Ïîñëóøíèê Òàëàñ íå ñìîã åå óáåðå÷ü, è ãîáëèíû óòàùèëè àëüìàíàõ. Ñåé÷àñ îí èùåò íà õðàìîâîé ïëîùàäè êîãî-íèáóäü, êòî ïîìîã áû åìó âåðíóòü êíèãó.";

const string ch2_book_4 = "ß íàøåë àëüìàíàõ è îòíåñó åãî â Áîëîòíûé Ëàãåðü âìåñòå ñ Òàëàñîì.";

const string ch2_book_5 = "Âîò ìû è â Áîëîòíîì Ëàãåðå. Òàëàñ îêàçàëñÿ äàæå áîëüøèì ïîäëåöîì, ÷åì ÿ îæèäàë. Îòíåñó êíèãó Êîð Ãàëîìó ñàì.";

const string ch2_book_6 = "Ïîñëå òîãî êàê ÿ ïðèíåñ àëüìàíàõ Êîð Ãàëîìó, îí  íà÷àë ãîòîâèòüñÿ ê âûçîâó Ñïÿùåãî. Öåðåìîíèÿ äîëæíà ñîñòîÿòüñÿ íà õðàìîâîé ïëîùàäè. Íî÷üþ.";

const string ch2_snipesdeal = "Ñóíäóê Àðîíà";

const string ch2_snipesdeal_1 = "ß ñóìåë îòîãíàòü Àðîíà îò ñóíäóêà ïîä òåì ïðåäëîãîì, ÷òî ßí õî÷åò åãî âèäåòü. Íàäåþñü, îí îòíåñåòñÿ ê ýòîìó ñ þìîðîì.";

const string ch2_snipesdeal_2 = "ß ñíîâà âñòðåòèë Àðîíà. Ìîþ âûõîäêó îí âîñïðèíÿë ÁÅÇ þìîðà.";

const string ch2_snipesdeal_3 = "Àðîí ïðåäëîæèë ìíå 20 êóñêîâ ðóäû çà êëþ÷ ê åãî ñóíäóêó.";

const string ch2_snipesdeal_4 = "ß ïðîäàë Àðîíó åãî æå ñîáñòâåííûé êëþ÷. Åñëè ïîñ÷èòàòü, òî âûãîäíîå âûøëî äåëüöå.";

const string ch2_snipesdeal_5 = "Ðóäîêîï Ñíàéïñ ïðåäëîæèë ìíå 10 êóñêîâ ðóäû, ÷òîáû ÿ îòâàäèë ñòðàæà Àðîíà îò åãî ñóíäóêà.";

const string ch2_snipesdeal_6 = "Åùå çà 30 êóñêîâ Ñíàéïñ ïðåäëîæèë ìíå êëþ÷ ê ñóíäóêó Àðîíà.";

const string ch2_snipesdeal_7 = "ß êóïèë ó Ñíàéïñà êëþ÷ ê ñóíäóêó! Èíòåðåñíî, ÷òî áóäåò äåëàòü Àðîí, êîãäà ÿ ðàññêàæó åìó îá ýòîì?";

const string ch2_storageshed = "Ñêëàä Óëüáåðòà";

const string ch2_storageshed_1 = "Ñòðàæíèê Óëüáåðò îõðàíÿåò ñêëàä â Ñòàðîé Øàõòå. ß äîëæåí ïðèíåñòè åìó ÷òî-íèáóäü âûïèòü!";

const string ch2_storageshed_2 = "Êàê òîëüêî ÿ ïðèíåñ Óëüáåðòó âûïèòü, îí ðàññêàçàë, ÷òî ïðîïàë êëþ÷ îò åãî ñóíäóêà. Â ýòî äåëî êàê-òî çàìåøàí ðóäîêîï Àëåô.";

const string ch2_storageshed_3 = "Óâåñòè Óëüáåðòà îò ñêëàäà áûëî íåñëîæíî: íå î÷åíü-òî ñîîáðàçèòåëåí ýòîò ïàðåíü!";

const string ch2_storageshed_4 = "ß ñíîâà âñòðåòèë Óëüáåðòà. Îí òàê íè÷åãî è íå ïîíÿë! Òàêóþ íàèâíîñòü ðåäêî âñòðåòèøü â íàøè äíè.";

const string ch2_storageshed_5 = "Àëåô ïðîäàë ìíå êëþ÷ ê ñóíäóêó íà ñêëàäå!";

const string ch3_orcgraveyard = "Êëàäáèùå îðêîâ";

const string ch3_orcgraveyard_1 = "ß ðàññêàçàë Êîð Àíãàðó î ñîáûòèÿõ íà êëàäáèùå îðêîâ. Îí áûë î÷åíü ðàññòðîåí. Òåïåðü åäèíñòâåííîé åãî íàäåæäîé îñòàëñÿ Þ'Áåðèîí, êîòîðûé âñå åùå íàõîäèòñÿ áåç ñîçíàíèÿ.";

const string ch3_orcgraveyard_2 = "Âåëèêàÿ öåðåìîíèÿ ïî âûçîâó Ñïÿùåãî íå îïðàâäàëà îæèäàíèé. Áûëè âèäíû ëèøü âåñüìà ðàñïëûâ÷àòûå êàðòèíû îðêîâ è èõ ïåùåð. Þ'Áåðèîí, äóõîâíûé ëèäåð Áðàòñòâà, óïàë â îáìîðîê â ðåçóëüòàòå ÷ðåçìåðíûõ óñèëèé, ïðèëîæåííûõ â õîäå öåðåìîíèè.";

const string ch3_orcgraveyard_3 = "Êîð Àíãàð, ëèäåð ñòðàæåé, ïîïðîñèë ìåíÿ îòïðàâèòüñÿ íà îðî÷üå êëàäáèùå, ÷òî íåïîäàëåêó îò Áîëîòíîãî Ëàãåðÿ. Ãóðó Èäîë Ëþêîð óæå îòïðàâèëñÿ òóäà ñ íåêîòîðûìè ñòðàæàìè, ÷òîáû ïîïûòàòüñÿ ÿñíåå ïîíÿòü âèäåíèÿ îá îðêàõ.";

const string ch3_orcgraveyard_4 = "Ïîñëóøíèê Òàëàñ ïîêàæåò ìíå ïóòü íà îðî÷üå êëàäáèùå. Îí æäåò ìåíÿ íà õðàìîâîé ïëîùàäè.";

const string ch3_orcgraveyard_5 = "ß ñïàñ æèçíü Ãóðó Èäîëó Ëþêîðó íà îðî÷üåì êëàäáèùå, êîãäà îðêè àòàêîâàëè åãî. Âñå ñòðàæè Ëþêîðà áûëè óáèòû ýòèìè ñóùåñòâàìè.";

const string ch3_orcgraveyard_6 = "Èäîë Ëþêîð ïðèñîåäèíèëñÿ êî ìíå. Âìåñòå ìû ñìîæåì ðàñêðûòü ñåêðåò ýòîãî äðåâíåãî ìåñòà!";

const string ch3_orcgraveyard_7 = "Ìû íàøëè äâå ïîëîâèíêè îðî÷üåãî ñâèòêà ñ çàêëèíàíèåì, íî Ëþêîð íå ìîæåò ïðî÷åñòü åãî. Ïðîäîëæèì ñâîè ïîèñêè.";

const string ch3_orcgraveyard_8 = "Èäîë Ëþêîð ñìîã ïåðåâåñòè ñâèòîê ïðè ïîìîùè íàäïèñåé íà ñòåíàõ â îäíîì èç çàëîâ. Ïîõîæå, ýòî çàêëèíàíèå òåëåïîðòàöèè íà î÷åíü êîðîòêóþ äèñòàíöèþ.";

const string ch3_orcgraveyard_9 = "Êàê òîëüêî ìû âîøëè â áîëüøîé ïðÿìîóãîëüíûé çàë, Ãóðó ïî÷óâñòâîâàë ÷òî-òî. Íî òî÷íåå îí ïîêà ñêàçàòü íå ìîæåò.";

const string ch3_orcgraveyard_10 = "Èäîë Ëþêîð, âåäîìûé íåâåäîìîé ñèëîé, ïîäîøåë ê îäíîé èç ñòåí áîëüøîãî çàëà.";

const string ch3_orcgraveyard_11 = "Ïðè ïîìîùè çàêëèíàíèÿ òåëåïîðòàöèè ÿ îáíàðóæèë òóííåëü, âåäóùèé ïðî÷ü îò áîëüøîãî çàëà.";

const string ch3_orcgraveyard_12 = "Èäîë Ëþêîð ïðîñòî ñîøåë ñ óìà, êîãäà ïîíÿë, ÷òî òàì âíèçó íåò àáñîëþòíî íè÷åãî. Â ïðèïàäêå ÿðîñòè îí äàæå íàïàë íà ìåíÿ. Êîð Àíãàð áóäåò î÷åíü ðàññòðîåí, óñëûøàâ ýòó èñòîðèþ.";

const string ch3_findherbs = "Òðàâû äëÿ Þ'Áåðèîíà";

const string ch3_findherbs_1 = "Þ'Áåðèîí ïî-ïðåæíåìó áåç ñîçíàíèÿ. Êîð Àíãàð ïîïðîñèë ìåíÿ ñîáðàòü ïÿòü öåëåáíûõ òðàâ.";

const string ch3_findherbs_2 = "Íóæíûå òðàâû ðàñòóò â áîëîòàõ çà Ëàãåðåì. Íî òàì æå îáèòàþò îïàñíåéøèå òâàðè - áîëîòîæîðû.  Íàäî äåðæàòü ãëàçà îòêðûòûìè.";

const string ch3_findherbs_3 = "Öåëåáíûå òðàâû ïîõîæè íà çâåçäó ñ ÷åòûðüìÿ çåëåíûìè è ñ ÷åòûðüìÿ îðàíæåâûìè ëèñòüÿìè.";

const string ch3_findherbs_4 = "Âîçìîæíî, îíè åñòü ó Ôîðòóíî, òîðãîâöà òðàâàìè èç Áðàòñòâà.";

const string ch3_findherbs_5 = "ß äîñòàâèë Êîð Àíãàðó äîñòàòî÷íî öåëåáíûõ òðàâ. Îñòàåòñÿ íàäåÿòüñÿ, ÷òî åùå íå ñëèøêîì ïîçäíî.";

const string ch3_escapeplannc = "Ïëàí ïîáåãà Íîâîãî Ëàãåðÿ";

const string ch3_escapeplannc_1 = "ß ïðåäëîæèë Ñàòóðàñó ïîìîùü â îêîí÷àíèè ðåàëèçàöèè ïëàíà ïîáåãà. Ñëåäóþùåé ìîåé çàäà÷åé ñòàíåò ðîçûñê îñòàâøèõñÿ ÷åòûðåõ þíèòîðîâ.";

const string ch3_escapeplannc_2 = "Þ'Áåðèîí, äóõîâíûé ëèäåð Áðàòñòâà, ìåðòâ! Ïóñòü äóõ åãî ïðåáóäåò â ïîêîå. Â ñâîèõ ïîñëåäíèõ ñëîâàõ îí âîçëîæèë âñþ íàäåæäó íà ïîáåã íà ïëå÷è ìàãîâ êðóãà âîäû.";

const string ch3_escapeplannc_3 = "ß ðåøèëñÿ. Ïîéäó â Íîâûé Ëàãåðü è ïîääåðæó ïëàí ìàãîâ âîäû. Êîð Àíãàð îòäàë ìíå êëþ÷è îò ñóíäóêà â ëàáîðàòîðèè Êîð Ãàëîìà. Þíèòîð è àëüìàíàõ, êîòîðûå ÿ ïðèíåñ ðàíåå, äîëæíû áûòü òàì. Êîð Àíãàð óâåðåí, ÷òî ýòè àðòåôàêòû ïðèãîäÿòñÿ ìàãàì Íîâîãî Ëàãåðÿ äëÿ çàâåðøåíèÿ ïëàíà.";

const string ch3_escapeplannc_4 = "Êðîíîñ äàë ìíå ðàçðåøåíèå íà âèçèò ê Ñàòóðàñó íà âåðõíåì óðîâíå. Îáû÷íî åãî ìîæíî íàéòè ó ïåíòàãðàììû. Ïàðîëü äëÿ îõðàííèêîâ Ïðîêëÿòüå, êàê æå çâó÷èò ïàðîëü?";

const string ch3_escapeplannc_5 = "ß ðàññêàçàë Ñàòóðàñó î ñëó÷àå â Áîëîòíîì Ëàãåðå. Îí áûë î÷åíü äîâîëåí òåì, ÷òî Êîð Àíãàð òåïåðü âîçãëàâëÿåò Áðàòñòâî.";

const string ch3_escapeplannc_6 = "Ãîðí ïîðåêîìåíäîâàë ìíå ïîéòè ïðÿìî ê ãëàâíîìó ìàãó âîäû ïî èìåíè Ñàòóðàñ. Êðîíîñ, õðàíèòåëü ðóäû, ìîæåò óñòðîèòü ìíå ýòó àóäèåíöèþ. Åãî ìîæíî íàéòè â öåíòðå Ëàãåðÿ, ó ðåøåòêè íàä ãîðîé ðóäû.";

const string ch3_bringfoci = "Ïîèñê þíèòîðîâ";

const string ch3_bringfoci_1 = "Ïîñëå òîãî êàê ÿ ïåðåäàë â ðóêè Ñàòóðàñà þíèòîð è àëüìàíàõ èç Áîëîòíîãî Ëàãåðÿ, îí ïîïðîñèë ìåíÿ íàéòè îñòàâøèåñÿ ÷åòûðå êàìíÿ, êîòîðûå ïîêà íå ïîïàëè â ðóêè ìàãîâ âîäû.";

const string ch3_bringfoci_2 = "Ñàòóðàñ äàë ìíå ñòàðóþ êàðòó, íà êîòîðîé îòìå÷åíî, ãäå íàõîäèëèñü þíèòîðû, à òàêæå ìàãè÷åñêèé ñâèòîê äëÿ òåëåïîðòàöèè, êîòîðûé ïåðåíåñåò ìåíÿ îáðàòíî ê ìàãàì âîäû.";

const string ch3_bringfoci_3 = "Ðèîðäàí, îäèí èç ìàãîâ âîäû, èçãîòîâèë äëÿ ìåíÿ íåñêîëüêî ýëèêñèðîâ. ß ìîãó çàáðàòü èõ â åãî ëàáîðàòîðèè íà âåðõíåì óðîâíå Íîâîãî Ëàãåðÿ.";

const string ch3_bringfoci_4 = "Ðèîðäàí áûë îòêðîâåíåí, êàê îáû÷íî. Îí äàë ìíå ìíîãî ýëèêñèðîâ. Óâåðåí, îíè ìíå ïðèãîäÿòñÿ.";

const string ch3_bringfoci_5 = "Êðîíîñ äàë ìíå ìíîãî ðóäû, íî ýòî íå î÷åíü èñòîùèò èõ ãèãàíòñêóþ êó÷ó.";

const string ch3_bringfoci_6 = "ß ñóìåë îòûñêàòü âñå ÷åòûðå þíèòîðà. Ñàòóðàñ ñ÷àñòëèâ áåç ìåðû. Äóìàþ, òåïåðü Áîëîòíûé Ëàãåðü â äîëãó ïåðåäî ìíîé.";

const string ch3_bringfoci_7 = "Ìàãè âîäû Êðîíîñ è Ðèîðäàí ïîîáåùàëè ìíå íàãðàäó çà âñå þíèòîðû. Âîçìîæíî, ñòîèò ïîéòè ïîãîâîðèòü ñ íèìè.";

const string ch3_stonehenge = "Þíèòîð ïîä êîëüöîì êàìíåé";

const string ch3_stonehenge_1 = "ß îòäàë Ñàòóðàñó þíèòîð èç ñêëåïà ïîä êðóãîì êàìíåé.";

const string ch3_stonehenge_2 = "ß âñòðåòèë Ìèëüòåíà, ìàãà îãíÿ, ðÿäîì ñ êàìåííûì êðóãîì. Îí ðàññêàçàë, ÷òî îäèí èç êàìíåé-þíèòîðîâ íàõîäèòñÿ â ñêëåïå ïîä ýòèì êðóãîì.";

const string ch3_stonehenge_3 = "Ìèëüòåí äàë ìíå ñâèòîê, ÷òîáû ÿ ñìîã ïîáåäèòü ñòåðåãóùåãî ñêëåï óìåðòâèÿ. Ìû ïîéäåì â ýòîò ñêëåï âìåñòå.";

const string ch3_stonehenge_4 = "Âìåñòå ìû ïîáåäèëè ñòðàæà ïîä êîëüöîì èç êàìíåé. Ìèëüòåí âçÿë ñâîþ ÷àñòü äîáû÷è è âåðíóëñÿ â Ñòàðûé Ëàãåðü.";

const string ch3_stonehenge_5 = "Ñàòóðàñ áóäåò ðàä, ÷òî ÿ íàøåë ýòîò þíèòîð!";

const string ch3_fortress = "Þíèòîð â ôîðòå";

const string ch3_fortress_1 = "Ñàòóðàñ ïîëó÷èë îò ìåíÿ þíèòîð èç ôîðòà.";

const string ch3_fortress_2 = "ß âñòðåòèë Ëåñòåðà èç Áîëîòíîãî Ëàãåðÿ ïåðåä êðåïîñòüþ, êîòîðàÿ ïðîñòî âðîñëà â ãîðó. Îí ðàçûñêèâàåò â çäàíèè äîêóìåíò è ïðèñîåäèíèëñÿ ê ìîèì ïîèñêàì þíèòîðà.";

const string ch3_fortress_3 = "Þíèòîð, êîòîðûé ÿ ðàçûñêèâàë, ïîêîèòñÿ íà ïüåäåñòàëå. Îí ñëèøêîì âûñîê, ÷òîáû íà íåãî âçîáðàòüñÿ. Íàäî íàéòè äðóãîé ïóòü.";

const string ch3_fortress_4 = "Äîêóìåíò íà ïðàâî ñîáñòâåííîñòè, êîòîðûé èñêàë Ëåñòåð, áûë â ñóíäóêå. Â îáìåí íà íåãî ïàðåíü äàë ìíå ÷åòûðå ñâèòêà ñ çàêëèíàíèåì òåëåêèíåçà. ß ñìîãó èñïîëüçîâàòü èõ, ÷òîáû äîáðàòüñÿ äî þíèòîðà.";

const string ch3_fortress_5 = "Þíèòîð â ìîèõ ðóêàõ. Ëåñòåð õî÷åò åùå íåìíîãî ïîáðîäèòü ïî áèáëèîòåêå êðåïîñòè. Èíòåðåñíî, êîãäà íàøè ïóòè âíîâü ïåðåñåêóòñÿ?";

const string ch3_monasteryruin = "Þíèòîð â ðàçâàëèíàõ ìîíàñòûðÿ";

const string ch3_monasteryruin_1 = "Íàêîíåö-òî ÿ ñìîã îòäàòü þíèòîð èç ìîíàñòûðÿ Ñàòóðàñó.";

const string ch3_monasteryruin_2 = "Êîãäà ÿ ïîäõîäèë ê ðóèíàì ìîíàñòûðÿ, òî âñòðåòèëñÿ ñ íàåìíèêîì Ãîðíîì. Îí èùåò çäåñü êëàäû.";

const string ch3_monasteryruin_3 = "Ìû ïðîäîëæèì ïîèñêè âìåñòå. Ãîðí ïðåäóïðåäèë î áîëüøèõ ñòàÿõ ãðîëõîâ, áðîäÿùèõ ïî îêðóãå.";

const string ch3_monasteryruin_4 = "Ìû íàøëè ïîòàéíóþ ïåùåðó, èñïîëüçîâàâøóþñÿ êàê ñêëàä. Ïî êðàéíåé ìåðå îäèí êëþ÷ è äâà ñâèòêà ñ çàêëèíàíèÿìè îêàçàëèñü äîñòîéíûìè âíèìàíèÿ.";

const string ch3_monasteryruin_5 = "Ìû ñòîèì ïðÿìî ïåðåä âîðîòàìè. Ïîõîæå, ÷òî îòêðûòü èõ ñíàðóæè íåëüçÿ.";

const string ch3_monasteryruin_6 = "Ïðè ïîìîùè íàéäåííîãî â ïåùåðå ñâèòêà ÿ ïðåâðàòèëñÿ â æóêà. Òàê ÿ ñìîã ïðîáðàòüñÿ ÷åðåç ùåëü â ñòåíå.";

const string ch3_monasteryruin_7 = "Âîðîòà òåïåðü îòêðûòû.";

const string ch3_monasteryruin_8 = "ß íàøåë þíèòîð â çàëå, ïîõîæåé íà êëàññ. Ãîðí ïîêà îñòàíåòñÿ ñî ìíîé.";

const string ch3_monasteryruin_9 = "Ïî äîðîãå îáðàòíî, âî äâîð ìîíàñòûðÿ, íàì âñòðåòèëñÿ ìîëîäîé òðîëëü. Áîé áûë æåñòîêèì, íî ìû ñóìåëè ïîáåäèòü.";

const string ch3_monasteryruin_10 = "Íàøè ñ Ãîðíîì ïóòè ðàçîøëèñü. Íî ìåíÿ íå ïîêèäàåò ÷óâñòâî, ÷òî ñêîðî ìû ñíîâà âñòðåòèìñÿ.";

const string ch3_trollcanyon = "Þíèòîð â êàíüîíå òðîëëÿ";

const string ch3_trollcanyon_1 = "Þíèòîð èç êàíüîíà òðîëëÿ òåïåðü íàõîäèòñÿ ó Ñàòóðàñà.";

const string ch3_trollcanyon_2 = "Êîãäà ÿ ïîäõîäèë ê ìåñòó þíèòîðà íà ñåâåðå, òî  íåîæèäàííî ñòîëêíóëñÿ ñ Äèåãî. Îí ïðåäóïðåäèë, ÷òî â êîíöå êàíüîíà ìåíÿ ïîäæèäàåò áîëüøîé ñþðïðèç.";

const string ch3_trollcanyon_3 = "Îí êàê-òî ðàçóçíàë î ìîåé äåÿòåëüíîñòè â Áîëîòíîì Ëàãåðå, à çàîäíî è î ïîèñêàõ þíèòîðà. Äàëüøå ìû ïîéäåì âìåñòå.";

const string ch3_trollcanyon_4 = "Ìû âûøëè íà îãðîìíîãî òðîëëÿ, çàãîðàæèâàþùåãî äîðîãó. Äèåãî õîòåë îáîéòè åãî, à ÿ ïðåäëîæèë ðàçîáðàòüñÿ ñ íèì.";

const string ch3_trollcanyon_5 = "Òðîëëü ïîâåðæåí. Òåïåðü ÿ ìîãó çàíÿòüñÿ ëåáåäêîé, êîòîðàÿ äâèãàåò ðåøåòêó ê ïëàòôîðìå ñ þíèòîðîì.";

const string ch3_trollcanyon_6 = "Äèåãî ïî÷èíèë çàåâøóþ ëåáåäêó. Òåïåðü ïóòü ñâîáîäåí.";

const string ch3_trollcanyon_7 = "Þíèòîð ó ìåíÿ. Íî ìíå åùå íàäî óáåäèòü íåñêîëüêèõ ãàðïèé, ÷òî ó ìåíÿ åñòü ïðàâî åãî ó ñåáÿ è îñòàâèòü.";

const string ch3_trollcanyon_8 = "Äèåãî âîçâðàùàåòñÿ â Ñòàðûé Ëàãåðü. ß ïî÷åìó-òî óâåðåí, ÷òî ýòî íå ïîñëåäíÿÿ íàøà âñòðå÷à.";

const string ch4_firemages = "Ïîìîùü ìàãîâ îãíÿ";

const string ch4_firemages_1 = "Äèåãî ñìîã ðàññêàçàòü ìíå áîëüøå î ñîáûòèÿõ â Ñòàðîì Ëàãåðå.";

const string ch4_firemages_2 = "Äèåãî ïåðåõâàòèë ìåíÿ íà ïîäõîäå ê Ñòàðîìó Ëàãåðþ è ïðåäóïðåäèë î òîëüêî ÷òî ïðîèçîøåäøåì ñåðüåçíîì ïðîèñøåñòâèè.";

const string ch4_firemages_3 = "Ïîñëå îáâàëà Ñòàðîé Øàõòû Ãîìåç îòäàë ðàñïîðÿæåíèå ñâîèì ëþäÿì íàïàñòü íà Ñâîáîäíóþ Øàõòó â Íîâîì Ëàãåðå. Êîððèñòî è åãî ìàãè îãíÿ ïîñòàðàëèñü ïîìåøàòü ýòîìó è áûëè óáèòû.";

const string ch4_firemages_4 = "Íóæíî ïðåäóïðåäèòü Íîâûé Ëàãåðü êàê ìîæíî áûñòðåå, à çàîäíî ðàññêàçàòü î ñëó÷èâøåìñÿ Ñàòóðàñó. Íàäåþñü, åùå íå ñëèøêîì ïîçäíî.";

const string ch4_firemages_5 = "Ñàòóðàñ, ëèäåð ìàãîâ âîäû, ïîïðîñèë ìåíÿ ñäåëàòü åìó ïîñëåäíåå îäîëæåíèå: ÷òîáû âçîðâàòü ãîðó ðóäû, åìó ïîíàäîáèòñÿ ïîìîùü ìàãîâ îãíÿ èç Ñòàðîãî Ëàãåðÿ. Ïîêà íå çíàþ, êàê ÿ ñìîãó çàñòàâèòü ìàãîâ Ãîìåçà óíè÷òîæèòü îñíîâó èõ ñèëû, íî ïðèäåòñÿ ÷òî-òî ïðèäóìàòü. ";

const string ch4_firemages_6 = "Âîðîòà Ñòàðîãî Ëàãåðÿ òåïåðü çàêðûòû è îõðàíÿþòñÿ ñòðàæíèêàìè. Îíè àòàêóþò ëþáîãî, êòî ïîäõîäèò áëèçêî.";

const string ch4_firemages_8 = "Ñàòóðàñ âîâñå íå áûë ñ÷àñòëèâ èñòîðèåé î ïðîèñøåñòâèè â Ñòàðîì Ëàãåðå. Êàê áû äàëüøå íè øåë èõ ïëàí ïîáåãà, òåïåðü èì ïðèäåòñÿ îñóùåñòâëÿòü åãî áåç ìàãîâ îãíÿ.";

const string ch4_firemages_9 = "Êàê è Äèåãî, Ìèëüòåí ïðÿ÷åòñÿ ðÿäîì ñî Ñòàðûì Ëàãåðåì. Ìàãè îãíÿ ïðåäóïðåæäàþò çàðàíåå âñåõ òåõ, êòî ïðèáëèæàåòñÿ ê ãëàâíûì âîðîòàì, ÷òîáû îíè íå ïîïàëè â ðóêè ñòðàæíèêîâ.";

const string ch4_firemages_10 = "Ïîñëå òîãî êàê Äèåãî ðàññêàçàë ìíå î ïðîèçîøåäøåì, ÿ âñòðåòèë Ìèëüòåíà ïåðåä Ñòàðûì Ëàãåðåì. Íàäåþñü, èõ íå ïîéìàþò";

const string ch4_firemages_11 = "Ìèëüòåí ïåðåõâàòèë ìåíÿ ïåðåä Ñòàðûì Ëàãåðåì è ðàññêàçàë îá îáâàëå Ñòàðîé Øàõòû è óáèéñòâå ìàãîâ îãíÿ.";

const string ch4_firemages_12 = "Äèåãî îñòàëñÿ íà äðóãîé ñòîðîíå Ñòàðîãî Ëàãåðÿ, íåïîäàëåêó îò çàäíèõ âîðîò. Íàäî áû ïîãîâîðèòü ñ íèì: îí çíàåò áîëüøå î òîì, ÷òî ñëó÷èëîñü.";

const string ch4_4friends = "Âñòðå÷à";

const string ch4_4friends_1 = "ß ðàññêàçàë Ëåñòåðó è Ãîðíó î âñòðå÷å ñ èõ äðóçüÿìè. Äàëüøå ýòî óæå íå ìîå äåëî. Îíè ñàìè ðàçáåðóòñÿ, ÷òî äåëàòü òåïåðü";

const string ch4_4friends_3 = "Âñå ìàãè îãíÿ ìåðòâû, à ñèòóàöèÿ âûõîäèò èç-ïîä êîíòðîëÿ. Äèåãî õî÷åò, ÷òîáû ÿ ðàññêàçàë Ëåñòåðó è Ãîðíó î èõ ñåêðåòíîì âñòðå÷å ñ Ìèëüòîíîì. Ïîõîæå íà òî, ÷òî îíè äåëàþò òàê óæå äàëåêî íå â ïåðâûé ðàç.";

const string ch4_bannedfromoc = "Èçãíàíèå èç Ñòàðîãî Ëàãåðÿ";

const string ch4_bannedfromoc_1 = "Áëàäâèí îêîïàëñÿ ó çàäíèõ âîðîò. Îí îòðåàãèðîâàë òî÷íî òàê æå, êàê è Ôëåò÷åð. ß íå çíàþ òî÷íî, ïî÷åìó, äîëæíî áûòü, ýòî êàê-òî ñâÿçàíî ñ ìîèìè ïîèñêàìè þíèòîðà äëÿ Íîâîãî Ëàãåðÿ.";

const string ch4_bannedfromoc_2 = "Ôëåò÷åð, îõðàíÿþùèé îñíîâíûå âîðîòà, íàçâàë ìåíÿ ïðåäàòåëåì è ïåðåáåæ÷èêîì. Îí íå ñòàë ñëóøàòü ìåíÿ è òóò æå íàïàë!";

const string ch4_bannedfromoc_3 = "Ïîõîæå, ìåíÿ èçãíàëè èç Ñòàðîãî Ëàãåðÿ!";

const string ch4_bannedfromoc_4 = "Ôëåò÷åð, îõðàíÿþùèé îñíîâíûå âîðîòà, îòðåàãèðîâàë òàê æå, êàê è Áëàäâèí. Íå çíàþ òî÷íî, ïî÷åìó, íî, äîëæíî áûòü, ýòî êàê-òî ñâÿçàíî ñ ìîèìè ïîèñêàìè þíèòîðà äëÿ Íîâîãî Ëàãåðÿ.";

const string ch4_bannedfromoc_5 = "Áëàäâèí, îõðàíÿþùèé çàäíèå âîðîòà Ñòàðîãî Ëàãåðÿ, íàçâàë ìåíÿ ïðåäàòåëåì è ïåðåáåæ÷èêîì. Îí íå õîòåë ñëóøàòü ìåíÿ è ñðàçó æå íàïàë!";

const string ch4_bannedfromoc_7 = "Ïîñëå ìîåãî èçãíàíèÿ èç Ñòàðîãî Ëàãåðÿ Ñàòóðàñ ïðèãëàñèë ìåíÿ â Íîâûé Ëàãåðü.";

const string ch4_bannedfromoc_8 = "Ëè, ëèäåð íàåìíèêîâ, õî÷åò ïîãîâîðèòü ñî ìíîé. ß äîëæåí ïîâèäàòüñÿ ñ íèì è âåðíóòüñÿ ê Ñàòóðàñó.";

const string ch4_bannedfromoc_9 = "Ñàòóðàñ ïîçâîëèò ìíå ïðèñîåäèíèòüñÿ ê êðóãó âîäû, è ìíå íå íàäî ðàçðûâàòü êëÿòâó îãíþ.";

const string ch4_bannedfromoc_10 = "ß ïðèñîåäèíèëñÿ ê êðóãó âîäû. Òåïåðü ó ìåíÿ åñòü äîñòóï ê îáåèì øêîëàì ìàãèè.";

const string ch4_bannedfromoc_11 = "Ñàòóðàñ îôèöèàëüíî ïðèâåòñòâîâàë ìåíÿ â êà÷åñòâå íàåìíèêà.";

const string ch4_bannedfromoc_12 = "ß ïðîèíôîðìèðîâàë Ëè î îïåðàöèè ïî çà÷èñòêå Ñâîáîäíîé Øàõòû, êîòîðóþ ìû ïðîâåðíóëè ñ Ãîðíîì. Ëè îñòàëñÿ î÷åíü äîâîëåí.";

const string ch4_bannedfromoc_13 = "ß ðåøèë ïåðåéòè íà äðóãóþ ñòîðîíó. Ïîñëå òîãî êàê Ñòàðûé Ëàãåðü ìåíÿ èçãíàë, ÿ ïðèñîåäèíèëñÿ ê íàåìíèêàì. Íó, à òåïåðü âðåìÿ ïîãîâîðèòü ñ Ñàòóðàñîì.";

const string ch4_findxardas = "Íåêðîìàíò Êñàðäàñ";

const string ch4_findxardas_1 = "ß ïåðåäàë âñå òðè ñåðäöà ãîëåìîâ äåìîíó-îõðàííèêó. Â îáìåí ïîëó÷èë ìàãè÷åñêóþ ðóíó ïîðòàëà. Íàäî ïðîâåðèòü, êóäà îíà ìåíÿ ïðèâåäåò.";

const string ch4_findxardas_2 = "ß íå ñêàæó Ñàòóðàñó î òîì, ÷òî, êàê ñêàçàë ìíå Êñàðäàñ, âñå ýòè ãîäû êîâûðÿíèÿ çåìëè â ïîèñêàõ ðóäû áûëè ïóñòîé òðàòîé âðåìåíè. Êàê òîëüêî íàéäó äðóãîé ñïîñîá ðàçðóøèòü áàðüåð, ÿ òóò æå ðàññêàæó åìó âñþ ïðàâäó. Äî òîé ïîðû ïðèäåòñÿ æèòü ñ ñîçíàíèåì òîãî, ÷òî ÿ íå ñïðàâèëñÿ ñ ïîñòàâëåííîé ìíå çàäà÷åé.";

const string ch4_findxardas_3 = "Íàêîíåö-òî ÿ âñòðåòèë Êñàðäàñà. Îäíàêî óñëûøàë ÿ ñîâñåì íå òî, ÷òî îæèäàë. Îí âîâñå íå áûë çàèíòåðåñîâàí â ãîðå ðóäû è ðàññêàçàë ìíå ïåðâóþ ÷àñòü èñòîðèè Ñïÿùåãî. Íå çíàþ òåïåðü, ÷òî è ñêàçàòü Ñàòóðàñó îá ýòîé áåñåäå.";

const string ch4_findxardas_4 = "Âñå ìàãè îãíÿ áûëè óáèòû. Êðîìå îäíîãî. Ñàòóðàñ ðàññêàçàë ìíå, ÷òî â ñîçäàíèè áàðüåðà ó÷àñòâîâàëè òðèíàäöàòü ìàãîâ. Òîëüêî ýòîò, ïîñëåäíèé, ìîæåò ïîìî÷ü âçîðâàòü ðóäó.";

const string ch4_findxardas_5 = "Òðèíàäöàòûé ìàã, èçâåñòíûé ïîä èìåíåì Êñàðäàñ, æèâåò óåäèíåííî ïðÿìî ïîñðåäè îðî÷üèõ çåìåëü. ß ñîãëàñèëñÿ ïîéòè òóäà, ÷òîáû ïðîñèòü î ïîìîùè.";

const string ch4_findxardas_6 = "Ñàòóðàñ ïðåäîñòåðåã ìåíÿ î ìàãè÷åñêèõ ñîçäàíèÿõ Êñàðäàñà, íåêðîìàíòà. Ïî ïîâîäó èõ ñèëüíûõ è ñëàáûõ ñòîðîí â áèáëèîòåêå ìàãîâ âîäû èìåþòñÿ çàïèñè. Ìíå ñëåäóåò íàéòè âðåìÿ è êàê ñëåäóåò èõ ïðîñìîòðåòü.";

const string ch4_findxardas_7 = "Ïî ïîâîäó ñèëüíûõ è ñëàáûõ ñòîðîí ýòèõ ñîçäàíèé â áèáëèîòåêå ìàãîâ âîäû èìåþòñÿ çàïèñè. Ìíå ñëåäóåò íàéòè âðåìÿ è êàê ñëåäóåò èõ ïðîñìîòðåòü.";

const string ch4_findxardas_8 = "Â áàøíå Êñàðäàñà ÿ âñòðåòèë äåìîíà, êîòîðûé ðàçãîâàðèâàë ñî ìíîé â ìîèõ ìûñëÿõ. Ïðåæäå ÷åì ïóñòèòü ìåíÿ ê ñâîåìó õîçÿèíó, îí õî÷åò ïîëó÷èòü òðè äîêàçàòåëüñòâà î òðåõ ïîáåäàõ íà ýëåìåíòàëÿìè îãíÿ, ëüäà è êàìíÿ.";

const string ch4_findorcshaman = "Èçãíàííûé øàìàí";

const string ch4_findorcshaman_1 = "Êñàðäàñ õî÷åò âíîâü èñïûòàòü ìåíÿ. Çà âòîðîé ÷àñòüþ èñòîðèè î Ñïÿùåì ìíå ïðèäåòñÿ èäòè ê èçãíàííîìó îðî÷üåìó øàìàíó â ðàçâàëèíû çàìêà. Ýòî ê âîñòîêó îò áàøíè Êñàðäàñà, ðÿäîì ñ âåðøèíîé. Åäèíñòâåííàÿ ïðîáëåìà - ýòî çàñòàâèòü øàìàíà ïðåêðàòèòü êèäàòüñÿ â ìåíÿ îãíåííûìè øàðàìè. Ïðèäåòñÿ ÷òî-òî ïðèäóìàòü.";

const string ch4_findorcshaman_2 = "ß ñïàñ îðî÷üåãî øàìàíà ïî èìåíè Óð-Øàê îò åãî æå ñîáñòâåííîãî íàðîäà. Â áëàãîäàðíîñòü îí ðàññêàçàë ìíå îñòàâøóþñÿ ÷àñòü èñòîðèè Ñïÿùåãî. Òåïåðü ÿ ìîãó âåðíóòüñÿ ê Êñàðäàñó è çàâåðøèòü ñâîþ ìèññèþ.";

const string ch4_findorcshaman_3 = "Ïîõîæå Êñàðäàñ âåñüìà äîâîëåí òåì, ÷òî ÿ óçíàë îò Óð-Øàêà. Ìîé äàëüíåéøèé ïóòü ëåæèò â Ñâîáîäíóþ Øàõòó, ÷òîáû îòûñêàòü äðóãà Óð-Øàêà.";

const string ch4_mcplatearmor = "Äîñïåõè èç ïîëçóíîâ";

const string ch4_mcplatearmor_1 = "Âîð ïî èìåíè Âîëê èç Íîâîãî Ëàãåðÿ ïðåäëîæèë ìíå ñäåëàòü ìíå äîñïåõè èç ïëàñòèí ïàíöèðÿ ïîëçóíîâ. Îí ïîêàçàë ìíå, êàê âûðåçàòü ïëàñòèíû ó ìåðòâûõ òâàðåé.";

const string ch4_mcplatearmor_2 = "Âîëê ïîëó÷èë 15 ïëàñòèí îò ìåíÿ. Òåïåðü åìó íóæíî íåìíîãî âðåìåíè.";

const string ch4_mcplatearmor_3 = "Äîñïåõè ãîòîâû. Îòëè÷íàÿ ðàáîòà. Ýòî ëó÷øèå äîñïåõè äëÿ âîèíà, êîòîðûé ÿ âèäåë äî ñèõ ïîð.";

const string ch4_ulumulu = "Ïîèñê Óëó-Ìóëó";

const string ch4_ulumulu_1 = "Ñ òîé ïîðû êàê ÿ âûëå÷èë îðî÷üåãî ðàáà Òàððîêà, îí îêàçûâàåò ìíå íåîöåíèìóþ ïîìîùü.";

const string ch4_ulumulu_2 = "ß âñòðåòèë äðóãà Óð-Øàêà â îäíîì èç íèæíèõ òóííåëåé Ñâîáîäíîé Øàõòû. Îí íàçâàëñÿ Òàððîêîì. Òàððîê îòðàâëåí è åñëè íå íàéäåò ëåêàðñòâî, êîòîðîå ïîòåðÿë ïðè ïîáåãå, òî óìðåò. Äóìàþ, íàäî åìó ïîìî÷ü. Ëåêàðñòâî ãäå-òî â íèæíèõ òóííåëÿõ øàõòû.";

const string ch4_ulumulu_3 = "Óð-Øàê, èçãíàííûé øàìàí, ðàññêàçàë ìíå, êàê ïðîíèêíóòü â ïîäçåìíûé õðàì Ñïÿùåãî, íå ââÿçûâàÿñü â áîé ñî âñåìè îðêàìè ñðàçó. Ìíå ïîíàäîáèòñÿ ÓËÓ-ÌÓËÓ, ÷òî-òî âðîäå ñâÿùåííîãî çíàêà, ïî÷èòàåìîãî âñåìè îðêàìè. Îäèí èç ñîïëåìåííèêîâ Óð-Øàêà ìîæåò ïîìî÷ü â åãî èçãîòîâëåíèè. Äðóã øàìàíà ñîäåðæèòñÿ â îäíîé èç ëþäñêèõ øàõò.";

const string ch4_ulumulu_4 = "Ãîðí è ÿ äîëæíû îòáèòü ñâîáîäíóþ øàõòó, ïðîâåäÿ îïåðàöèþ. Òî, ÷òî äðóã Óð-Øàêà ñîäåðæèòñÿ êàê ðàç òàì, ìîæíî ñ÷åñòü çà áëàãîñêëîííîñòü ñóäüáû.";

const string ch4_ulumulu_5 = "Ñäåëàíî. Òàððîê ïîëó÷èë âñå ÷åòûðå êîìïîíåíòà è ñîáðàë èç íèõ Óëó-Ìóëó. Ìíå îñòàåòñÿ ëèøü íàäååòñÿ, ÷òî îðêè ãîðîäà íàä õðàìîì Ñïÿùåãî è â ñàìîì äåëå áóäóò óâàæàòü åãî.";

const string ch4_ulumulu_6 = "Òàððîêó íóæåí ÿçûê îãíåííîé ÿùåðèöû äëÿ èçãîòîâëåíèÿ Óëó-Ìóëó. Ýòè ñîçäàíèÿ îáèòàþò ïî áîëüøåé ÷àñòè â îðî÷üèõ ðàéîíàõ, íà ïåñ÷àíûõ ïëÿæàõ. Êàæåòñÿ, ÿ âèäåë ýòèõ ÿùåðèö íåïîäàëåêó îò îñòàòêîâ êîðàáëÿ.";

const string ch4_ulumulu_7 = "Òàððîêó íóæåí ðîã ìðàêîðèñà äëÿ èçãîòîâëåíèÿ Óëó-Ìóëó. Ïî áîëüøåé ÷àñòè îíè îáèòàþò â ÷àùàõ è ïåùåðàõ. Íàñêîëüêî ìíå èçâåñòíî, ñàìûé áîëüøîé ëåñíîé ìàññèâ ðàñïîëîæåí ìåæäó Ñòàðûì è Áîëîòíûì Ëàãåðÿìè.";

const string ch4_ulumulu_8 = "Äëÿ èçãîòîâëåíèÿ Óëó-Ìóëó Òàððîêó íóæåí çóá áîëîòîæîðà. Çà Ëàãåðåì Áðàòñòâà ìîæíî âñòðåòèòü äåñÿòêè ýòèõ òâàðåé.";

const string ch4_ulumulu_9 = "Äëÿ èçãîòîâëåíèÿ Óëó-Ìóëó Òàððîêó íóæåí çóá òðîëëÿ. Ýòè ñîçäàíèÿ îáèòàþò â ãîðàõ íà ñåâåðå êîëîíèè. Ìíå íóæíî îáûñêàòü òàìîøíèå óùåëüÿ.";

const string ch4_ulumulu_10 = "Âîëê õî÷åò ïîãîâîðèòü ñî ìíîé äî òîãî, êàê ÿ ïîéäó â øàõòó. Íàäî åãî íàéòè.";

const string ch4_entertemple = "Ïóòü â õðàì Ñïÿùåãî";

const string ch4_entertemple_1 = "ß ñóìåë ïðîíèêíóòü â õðàì Ñïÿùåãî. Ïîêà ó ìåíÿ íåò íè ìàëåéøåãî ïðåäñòàâëåíèÿ î òîì, ÷òî æäåò ìåíÿ òàì, íî ñêîðî ýòî âûÿñíèòñÿ ñàìî ñîáîé.";

const string ch4_entertemple_2 = "Êñàðäàñ áûë óäèâëåí, îáíàðóæèâ, ÷òî ÿ ñóìåë ïðîíèêíóòü â ïîäçåìíûé õðàì. Ïîõîæå, îí ñòàë ñ÷èòàòü ìåíÿ ãåðîåì îðî÷üåãî ïðîðî÷åñòâà.";

const string ch4_entertemple_3 = "ß íà÷èíàþ ïîíèìàòü öåëü, êîòîðóþ ïðåñëåäóåò Êñàðäàñ. ß ïîïðîñèë åãî ïîìî÷ü ìíå ñ ðàçðóøåíèåì áàðüåðà, è îí ïîäñêàçàë ìíå ïóòü. Îäíàêî ýòîò ïóòü íèêàê íå ñâÿçàí ñ ãîðîé ðóäû, êîòîðóþ ñîáðàëè ìàãè âîäû. Îí îòïðàâèë ìåíÿ èñêàòü ïóòü â ïîäçåìíûé õðàì Ñïÿùåãî.";

const string ch4_entertemple_4 = "Ãîðí íå áûë óâåðåí, ÷òî Óëó-Ìóëó ñèëüíî ïîìîæåò â ãîðîäå îðêîâ... Íó è ÷òî? Â ëþáîì ñëó÷àå, ÿ ñêîðî ýòî âûÿñíþ!";

const string ch4_entertemple_5 = "ß ñòîþ ïåðåä Âàððàã-Íàøîðîì, îäíèì èç ïÿòè îðî÷üèõ øàìàíîâ, êîòîðûå ïðèâåëè Ñïÿùåãî â íàø ìèð. ß ïîëîæó êîíåö åãî ñóùåñòâîâàíèþ.";

const string ch4_entertemple_6 = "Âàððàã-Êàñîðã, ñëåäóþùèé èç ïÿòè îðî÷üèõ øàìàíîâ, ñåé÷àñ ïðîñòèòñÿ ñî ñâîåé æàëêîé æèçíüþ!";

const string ch4_entertemple_7 = "Âàððàã-Óíõèëüêò, îäèí èç ïÿòè øàìàíîâ Ñïÿùåãî, ñòîèò ïåðåäî ìíîé. Òîëüêî îäèí èç íàñ âûéäåò îòñþäà æèâûì!";

const string ch4_entertemple_8 = "Âàððàã-Ðóóøê, îäèí èç øàìàíîâ Ñïÿùåãî, ïåðåøåë ìíå äîðîãó. Íî îí íå ñìîæåò ìíå ïîìåøàòü, çà ýòèì ÿ ïðîñëåæó ëè÷íî!";

const string ch4_entertemple_9 = "Ãðàø-Âàððàã-Àðóøàò, î÷åâèäíî, íå èç ÷èñëà îáû÷íûõ îðî÷üèõ øàìàíîâ. Îí ãîðàçäî ñèëüíåå, à ìîå îðóæèå ïðîñòî íå ñïîñîáíî åìó ïîâðåäèòü. Ìíå íóæíî íàéòè áîëåå ìîãóùåñòâåííîå îðóæèå!";

const string ch4_entertemple_10 = "ß ñíîâà âñòðåòèë øàìàíà Óð-Øàêà ïåðåä ïîñåëåíèåì îðêîâ. Îí ðàññêàçàë ìíå, ÷òî ïîïàñòü â ïîäçåìíûé îðî÷èé õðàì ÿ ñìîãó ïðè ïîìîùè ñïåöèàëüíîãî çàêëèíàíèÿ. Øàìàíû îðêîâ îáû÷íî õðàíÿò òàêèå çàêëèíàíèÿ â ñâîèõ ïåùåðàõ.";

const string ch4_entertemple_11 = "Â õðàì âåäåò è äðóãîé ïóòü. Íóæíî èñïîëüçîâàòü ñèìâîë Ñïÿùåãî ñî ñâÿùåííîãî ñòîëáà îðî÷üèõ øàìàíîâ. Îí îòêðîåò äâåðü â õðàì.";

const string ch4_entertemple_12 = "Åñòü è äðóãîé ïóòü â õðàì. Íà ñâÿùåííîì ñòîëáå îðî÷üèõ øàìàíîâ èìååòñÿ ñèìâîë Ñïÿùåãî. Åñëè ÿ èñïîëüçóþ åãî, òî ýòî ÿâíî íå äîáàâèò áëàãîäóøèÿ áðàòüÿì Óð-Øàêà.";

const string ch4_sldtokdw = "Âñòóïëåíèå â êðóã ìàãîâ âîäû";

const string ch4_sldtokdw_1 = "Ñàòóðàñ ïðèíÿë ìåíÿ â êðóã ìàãîâ âîäû.";

const string ch5_uriziel = "Ìàãè÷åñêèé ìå÷ Óðèçåëü";

const string ch5_uriziel_1 = "Ïîêà Êñàðäàñ çàíÿò èçãîòîâëåíèåì ìàãè÷åñêîé ôîðìóëû, êîòîðàÿ âîññòàíîâèò ñèëó ÓÐÈÇÅËß, ÿ ïðîíèêíó â çàòîïëåííóþ áàøíþ íåêðîìàíòîâ è ïîñòàðàþñü íàéòè àðòåôàêòû äëÿ áîÿ ïðîòèâ Ñïÿùåãî.";

const string ch5_uriziel_2 = "Êñàðäàñ ñîçäàë ìàãè÷åñêóþ ôîðìóëó. Òåïåðü ìíå íóæåí ïî-íàñòîÿùåìó áîëüøîé èñòî÷íèê ìàãè÷åñêîé ýíåðãèè è ìàã, êîòîðûé áóäåò ìíå ïîìîãàòü. Ê ñ÷àñòüþ, â êîëîíèè åñòü íåêàÿ îáùíîñòü, îáëàäàþùàÿ òàêîé ýíåðãèåé, è ýòà îáùíîñòü â äîëãó ïåðåäî ìíîé";

const string ch5_uriziel_3 = "Êñàðäàñ ñêàçàë, ÷òî íàéäåííûé ìíîé â õðàìå Ñïÿùåãî ìå÷ ÿâëÿåòñÿ ÓÐÈÇÅËÅÌ. Â áûëûå âðåìåíà êëèíîê îáëàäàë ìîãó÷èìè ñèëàìè, íî çàòåì óòåðÿë ìàãè÷åñêóþ ýíåðãèþ. Ìíå ïðèäåòñÿ îòûñêàòü âîçìîæíîñòü âåðíóòü ìå÷ó åãî áûëîå ìîãóùåñòâî.";

const string ch5_uriziel_4 = "Ñäåëàíî. Ïîõîæå, ñèëû ÓÐÈÇÅËß âåðíóëèñü. ß ÿâíî íàäîåë Ñàòóðàñó è åãî ìàãàì âîäû, òàê ÷òî ëó÷øå îñòàâèòü èõ â ïîêîå íà êàêîå-òî âðåìÿ. Íî ýòî è íå âàæíî, ïîòîìó ÷òî ìåíÿ îæèäàåò Ñïÿùèé!";

const string ch5_uriziel_5 = "Â ìîé ïðîøëûé âèçèò Êñàðäàñ óïîìÿíóë, ÷òî ÿ ñìîãó èñïîëüçîâàòü ñèëû ÓÐÈÇÅËß, äàæå áóäó÷è ìàãîì. Íî ñíà÷àëà íàäî ïîêàçàòü çàðÿæåííûé ìå÷ åìó.";

const string ch5_uriziel_6 = "Êñàðäàñ óäàëèë ìàãè÷åñêèé êàìåíü èç ìå÷à ÓÐÈÇÅËß. Òåïåðü ñèëà ìå÷à çàêëþ÷åíà â ìàãè÷åñêîé ðóíå íåñêàçàííîé ìîùè.";

const string ch5_uriziel_7 = "ß ñóìåë óãîâîðèòü ñâîåãî äðóãà Ìèëüòåíà ïîìî÷ü â ïåðåäà÷å ýíåðãèè ìå÷ó. Ìû âñòðåòèìñÿ âíèçó, ó ãîðû ðóäû, ïðèíàäëåæàùåé ìàãàì êðóãà âîäû.";

const string ch6_sleeper = "Ïðîáóæäåíèå Ñïÿùåãî";

const string ch6_sleeper_1 = "Âðåìÿ íàñòàëî. Îò ìåñòà îòäûõà Ñïÿùåãî ìåíÿ äîëæíî îòäåëÿòü òåïåðü ñîâñåì íåìíîãî. Êñàðäàñ ïîÿâèëñÿ íåîæèäàííî è äàë íåñêîëüêî ñîâåòîâ. Ïÿòü ñåðäåö îðî÷üèõ øàìàíîâ íàõîäÿòñÿ â ñâÿòèëèùàõ. Ìíå íàäî ïðîòêíóòü êàæäîå îòäåëüíûì ìå÷îì. Ýòî åäèíñòâåííûé ñïîñîá ïîáåäèòü Ñïÿùåãî. Çâó÷èò äîâîëüíî ïðîñòî...";

func void b_clearfmc() {
    b_killnpc(sld_750_soeldner /*8106*/);
    b_killnpc(sld_751_soeldner /*8108*/);
    b_killnpc(sld_752_okyl /*8110*/);
    b_killnpc(sld_753_baloro /*8112*/);
    b_killnpc(sld_755_soeldner /*8114*/);
    b_killnpc(sld_756_soeldner /*8116*/);
    b_killnpc(sld_757_soeldner /*8118*/);
    b_killnpc(sld_758_soeldner /*8120*/);
    b_killnpc(sld_759_soeldner /*8122*/);
    b_killnpc(sld_760_soeldner /*8124*/);
    b_killnpc(sld_761_soeldner /*8126*/);
    b_killnpc(sld_762_soeldner /*8128*/);
    b_killnpc(sld_763_soeldner /*8130*/);
    b_killnpc(sld_764_soeldner /*8132*/);
    b_killnpc(sld_765_soeldner /*8134*/);
    b_killnpc(sfb_1030_schuerfer /*8016*/);
    b_killnpc(sfb_1031_schuerfer /*8018*/);
    b_killnpc(sfb_1032_schuerfer /*8020*/);
    b_killnpc(sfb_1033_schuerfer /*8022*/);
    b_killnpc(sfb_1034_schuerfer /*8024*/);
    b_killnpc(sfb_1035_schuerfer /*8026*/);
    b_killnpc(sfb_1036_schuerfer /*8028*/);
    b_killnpc(sfb_1037_swiney /*8030*/);
    b_killnpc(sfb_1038_schuerfer /*8032*/);
    b_killnpc(sfb_1039_schuerfer /*8034*/);
    b_killnpc(sfb_1040_schuerfer /*8036*/);
    b_killnpc(sfb_1041_schuerfer /*8038*/);
    b_killnpc(sfb_1042_schuerfer /*8040*/);
    b_killnpc(sfb_1043_schuerfer /*8042*/);
    b_killnpc(sfb_1044_schuerfer /*8044*/);
    b_killnpc(org_890_organisator /*7943*/);
    b_killnpc(org_891_organisator /*7945*/);
    b_killnpc(org_892_organisator /*7947*/);
    wld_insertnpc(grd_283_gardist /*7412*/, "FMC_ENTRANCE");
    wld_insertnpc(grd_285_gardist /*7417*/, "FMC_ENTRANCE");
};

func void b_checkdeadmissionnpcs() {
    if (hlp_getinstanceid(org_844_lefty) == hlp_getinstanceid(self)) {
        if (lefty_mission == log_running) {
            b_logentry(ch1_carrywater, ch1_carrywater_1);
            log_settopicstatus(ch1_carrywater, log_success);
            leftydead = true;
        };
    };
    if (hlp_getinstanceid(nov_1358_harlok) == hlp_getinstanceid(self)) {
        if (ghorim_kickharlok == log_running) {
            b_logentry(ch1_ghorimsrelief, ch1_ghorimsrelief_5);
        };
    };
};

func void b_setguildattitude(var int fromguild, var int attitude, var int toguild) {
    if (toguild == gil_seperator_hum) {
        wld_setguildattitude(fromguild, attitude, gil_none);
        wld_setguildattitude(fromguild, attitude, gil_ebr);
        wld_setguildattitude(fromguild, attitude, gil_sld);
        wld_setguildattitude(fromguild, attitude, gil_stt);
        wld_setguildattitude(fromguild, attitude, gil_kdf);
        wld_setguildattitude(fromguild, attitude, gil_vlk);
        wld_setguildattitude(fromguild, attitude, gil_kdw);
        wld_setguildattitude(fromguild, attitude, gil_grd);
        wld_setguildattitude(fromguild, attitude, gil_org);
        wld_setguildattitude(fromguild, attitude, gil_bau);
        wld_setguildattitude(fromguild, attitude, gil_sfb);
        wld_setguildattitude(fromguild, attitude, gil_gur);
        wld_setguildattitude(fromguild, attitude, gil_nov);
        wld_setguildattitude(fromguild, attitude, gil_tpl);
        wld_setguildattitude(fromguild, attitude, gil_dmb);
        wld_setguildattitude(fromguild, attitude, gil_bab);
    }
    else if (fromguild == gil_seperator_hum) {
        wld_setguildattitude(gil_none, attitude, toguild);
        wld_setguildattitude(gil_ebr, attitude, toguild);
        wld_setguildattitude(gil_sld, attitude, toguild);
        wld_setguildattitude(gil_stt, attitude, toguild);
        wld_setguildattitude(gil_kdf, attitude, toguild);
        wld_setguildattitude(gil_vlk, attitude, toguild);
        wld_setguildattitude(gil_kdw, attitude, toguild);
        wld_setguildattitude(gil_grd, attitude, toguild);
        wld_setguildattitude(gil_org, attitude, toguild);
        wld_setguildattitude(gil_bau, attitude, toguild);
        wld_setguildattitude(gil_sfb, attitude, toguild);
        wld_setguildattitude(gil_gur, attitude, toguild);
        wld_setguildattitude(gil_nov, attitude, toguild);
        wld_setguildattitude(gil_tpl, attitude, toguild);
        wld_setguildattitude(gil_dmb, attitude, toguild);
        wld_setguildattitude(gil_bab, attitude, toguild);
    }
    else {
        wld_setguildattitude(fromguild, attitude, toguild);
    };
};

func void b_initmonsterattitudes() {
    b_setguildattitude(gil_waran, att_hostile, gil_seperator_hum);
    b_setguildattitude(gil_waran, att_friendly, gil_waran);
    b_setguildattitude(gil_waran, att_neutral, gil_slf);
    b_setguildattitude(gil_waran, att_neutral, gil_gobbo);
    b_setguildattitude(gil_waran, att_neutral, gil_troll);
    b_setguildattitude(gil_waran, att_neutral, gil_snapper);
    b_setguildattitude(gil_waran, att_neutral, gil_minecrawler);
    b_setguildattitude(gil_waran, att_neutral, gil_meatbug);
    b_setguildattitude(gil_waran, att_neutral, gil_scavenger);
    b_setguildattitude(gil_waran, att_neutral, gil_demon);
    b_setguildattitude(gil_waran, att_neutral, gil_wolf);
    b_setguildattitude(gil_waran, att_neutral, gil_shadowbeast);
    b_setguildattitude(gil_waran, att_neutral, gil_bloodfly);
    b_setguildattitude(gil_waran, att_neutral, gil_swampshark);
    b_setguildattitude(gil_waran, att_neutral, gil_zombie);
    b_setguildattitude(gil_waran, att_neutral, gil_undeadorc);
    b_setguildattitude(gil_waran, att_neutral, gil_skeleton);
    b_setguildattitude(gil_waran, att_neutral, gil_orcdog);
    b_setguildattitude(gil_waran, att_neutral, gil_molerat);
    b_setguildattitude(gil_waran, att_neutral, gil_golem);
    b_setguildattitude(gil_waran, att_neutral, gil_lurker);
    b_setguildattitude(gil_gobbo, att_hostile, gil_seperator_hum);
    b_setguildattitude(gil_gobbo, att_neutral, gil_waran);
    b_setguildattitude(gil_gobbo, att_neutral, gil_slf);
    b_setguildattitude(gil_gobbo, att_friendly, gil_gobbo);
    b_setguildattitude(gil_gobbo, att_friendly, gil_troll);
    b_setguildattitude(gil_gobbo, att_neutral, gil_snapper);
    b_setguildattitude(gil_gobbo, att_neutral, gil_minecrawler);
    b_setguildattitude(gil_gobbo, att_neutral, gil_meatbug);
    b_setguildattitude(gil_gobbo, att_neutral, gil_scavenger);
    b_setguildattitude(gil_gobbo, att_neutral, gil_demon);
    b_setguildattitude(gil_gobbo, att_neutral, gil_wolf);
    b_setguildattitude(gil_gobbo, att_neutral, gil_shadowbeast);
    b_setguildattitude(gil_gobbo, att_neutral, gil_bloodfly);
    b_setguildattitude(gil_gobbo, att_neutral, gil_swampshark);
    b_setguildattitude(gil_gobbo, att_neutral, gil_zombie);
    b_setguildattitude(gil_gobbo, att_neutral, gil_undeadorc);
    b_setguildattitude(gil_gobbo, att_neutral, gil_skeleton);
    b_setguildattitude(gil_gobbo, att_neutral, gil_orcdog);
    b_setguildattitude(gil_gobbo, att_neutral, gil_molerat);
    b_setguildattitude(gil_gobbo, att_neutral, gil_golem);
    b_setguildattitude(gil_gobbo, att_neutral, gil_lurker);
    b_setguildattitude(gil_troll, att_hostile, gil_seperator_hum);
    b_setguildattitude(gil_troll, att_neutral, gil_waran);
    b_setguildattitude(gil_troll, att_neutral, gil_slf);
    b_setguildattitude(gil_troll, att_friendly, gil_gobbo);
    b_setguildattitude(gil_troll, att_friendly, gil_troll);
    b_setguildattitude(gil_troll, att_neutral, gil_snapper);
    b_setguildattitude(gil_troll, att_neutral, gil_minecrawler);
    b_setguildattitude(gil_troll, att_neutral, gil_meatbug);
    b_setguildattitude(gil_troll, att_neutral, gil_scavenger);
    b_setguildattitude(gil_troll, att_neutral, gil_demon);
    b_setguildattitude(gil_troll, att_neutral, gil_wolf);
    b_setguildattitude(gil_troll, att_neutral, gil_shadowbeast);
    b_setguildattitude(gil_troll, att_neutral, gil_bloodfly);
    b_setguildattitude(gil_troll, att_neutral, gil_swampshark);
    b_setguildattitude(gil_troll, att_neutral, gil_zombie);
    b_setguildattitude(gil_troll, att_neutral, gil_undeadorc);
    b_setguildattitude(gil_troll, att_neutral, gil_skeleton);
    b_setguildattitude(gil_troll, att_neutral, gil_orcdog);
    b_setguildattitude(gil_troll, att_neutral, gil_molerat);
    b_setguildattitude(gil_troll, att_neutral, gil_golem);
    b_setguildattitude(gil_troll, att_neutral, gil_lurker);
    b_setguildattitude(gil_snapper, att_hostile, gil_seperator_hum);
    b_setguildattitude(gil_snapper, att_neutral, gil_waran);
    b_setguildattitude(gil_snapper, att_neutral, gil_slf);
    b_setguildattitude(gil_snapper, att_hostile, gil_gobbo);
    b_setguildattitude(gil_snapper, att_neutral, gil_troll);
    b_setguildattitude(gil_snapper, att_friendly, gil_snapper);
    b_setguildattitude(gil_snapper, att_neutral, gil_minecrawler);
    b_setguildattitude(gil_snapper, att_neutral, gil_meatbug);
    b_setguildattitude(gil_snapper, att_hostile, gil_scavenger);
    b_setguildattitude(gil_snapper, att_neutral, gil_demon);
    b_setguildattitude(gil_snapper, att_neutral, gil_wolf);
    b_setguildattitude(gil_snapper, att_neutral, gil_shadowbeast);
    b_setguildattitude(gil_snapper, att_neutral, gil_bloodfly);
    b_setguildattitude(gil_snapper, att_neutral, gil_swampshark);
    b_setguildattitude(gil_snapper, att_neutral, gil_zombie);
    b_setguildattitude(gil_snapper, att_neutral, gil_undeadorc);
    b_setguildattitude(gil_snapper, att_neutral, gil_skeleton);
    b_setguildattitude(gil_snapper, att_neutral, gil_orcdog);
    b_setguildattitude(gil_snapper, att_neutral, gil_molerat);
    b_setguildattitude(gil_snapper, att_neutral, gil_golem);
    b_setguildattitude(gil_snapper, att_neutral, gil_lurker);
    b_setguildattitude(gil_minecrawler, att_hostile, gil_seperator_hum);
    b_setguildattitude(gil_minecrawler, att_hostile, gil_waran);
    b_setguildattitude(gil_minecrawler, att_hostile, gil_slf);
    b_setguildattitude(gil_minecrawler, att_hostile, gil_gobbo);
    b_setguildattitude(gil_minecrawler, att_hostile, gil_troll);
    b_setguildattitude(gil_minecrawler, att_hostile, gil_snapper);
    b_setguildattitude(gil_minecrawler, att_friendly, gil_minecrawler);
    b_setguildattitude(gil_minecrawler, att_hostile, gil_meatbug);
    b_setguildattitude(gil_minecrawler, att_hostile, gil_scavenger);
    b_setguildattitude(gil_minecrawler, att_hostile, gil_demon);
    b_setguildattitude(gil_minecrawler, att_hostile, gil_wolf);
    b_setguildattitude(gil_minecrawler, att_hostile, gil_shadowbeast);
    b_setguildattitude(gil_minecrawler, att_hostile, gil_bloodfly);
    b_setguildattitude(gil_minecrawler, att_hostile, gil_swampshark);
    b_setguildattitude(gil_minecrawler, att_hostile, gil_zombie);
    b_setguildattitude(gil_minecrawler, att_hostile, gil_undeadorc);
    b_setguildattitude(gil_minecrawler, att_hostile, gil_skeleton);
    b_setguildattitude(gil_minecrawler, att_hostile, gil_orcdog);
    b_setguildattitude(gil_minecrawler, att_hostile, gil_molerat);
    b_setguildattitude(gil_minecrawler, att_hostile, gil_golem);
    b_setguildattitude(gil_minecrawler, att_hostile, gil_lurker);
    b_setguildattitude(gil_meatbug, att_neutral, gil_seperator_hum);
    b_setguildattitude(gil_meatbug, att_neutral, gil_waran);
    b_setguildattitude(gil_meatbug, att_neutral, gil_slf);
    b_setguildattitude(gil_meatbug, att_neutral, gil_gobbo);
    b_setguildattitude(gil_meatbug, att_neutral, gil_troll);
    b_setguildattitude(gil_meatbug, att_neutral, gil_snapper);
    b_setguildattitude(gil_meatbug, att_neutral, gil_minecrawler);
    b_setguildattitude(gil_meatbug, att_neutral, gil_meatbug);
    b_setguildattitude(gil_meatbug, att_neutral, gil_scavenger);
    b_setguildattitude(gil_meatbug, att_neutral, gil_demon);
    b_setguildattitude(gil_meatbug, att_neutral, gil_wolf);
    b_setguildattitude(gil_meatbug, att_neutral, gil_shadowbeast);
    b_setguildattitude(gil_meatbug, att_neutral, gil_bloodfly);
    b_setguildattitude(gil_meatbug, att_neutral, gil_swampshark);
    b_setguildattitude(gil_meatbug, att_neutral, gil_zombie);
    b_setguildattitude(gil_meatbug, att_neutral, gil_undeadorc);
    b_setguildattitude(gil_meatbug, att_neutral, gil_skeleton);
    b_setguildattitude(gil_meatbug, att_neutral, gil_orcdog);
    b_setguildattitude(gil_meatbug, att_neutral, gil_molerat);
    b_setguildattitude(gil_meatbug, att_neutral, gil_golem);
    b_setguildattitude(gil_meatbug, att_neutral, gil_lurker);
    b_setguildattitude(gil_scavenger, att_hostile, gil_seperator_hum);
    b_setguildattitude(gil_scavenger, att_neutral, gil_waran);
    b_setguildattitude(gil_scavenger, att_neutral, gil_slf);
    b_setguildattitude(gil_scavenger, att_neutral, gil_gobbo);
    b_setguildattitude(gil_scavenger, att_neutral, gil_troll);
    b_setguildattitude(gil_scavenger, att_hostile, gil_snapper);
    b_setguildattitude(gil_scavenger, att_neutral, gil_minecrawler);
    b_setguildattitude(gil_scavenger, att_neutral, gil_meatbug);
    b_setguildattitude(gil_scavenger, att_friendly, gil_scavenger);
    b_setguildattitude(gil_scavenger, att_neutral, gil_demon);
    b_setguildattitude(gil_scavenger, att_neutral, gil_wolf);
    b_setguildattitude(gil_scavenger, att_neutral, gil_shadowbeast);
    b_setguildattitude(gil_scavenger, att_hostile, gil_bloodfly);
    b_setguildattitude(gil_scavenger, att_hostile, gil_swampshark);
    b_setguildattitude(gil_scavenger, att_neutral, gil_zombie);
    b_setguildattitude(gil_scavenger, att_neutral, gil_undeadorc);
    b_setguildattitude(gil_scavenger, att_neutral, gil_skeleton);
    b_setguildattitude(gil_scavenger, att_neutral, gil_orcdog);
    b_setguildattitude(gil_scavenger, att_neutral, gil_molerat);
    b_setguildattitude(gil_scavenger, att_neutral, gil_golem);
    b_setguildattitude(gil_scavenger, att_neutral, gil_lurker);
    b_setguildattitude(gil_demon, att_hostile, gil_seperator_hum);
    b_setguildattitude(gil_demon, att_hostile, gil_waran);
    b_setguildattitude(gil_demon, att_neutral, gil_slf);
    b_setguildattitude(gil_demon, att_hostile, gil_gobbo);
    b_setguildattitude(gil_demon, att_hostile, gil_troll);
    b_setguildattitude(gil_demon, att_hostile, gil_snapper);
    b_setguildattitude(gil_demon, att_hostile, gil_minecrawler);
    b_setguildattitude(gil_demon, att_neutral, gil_meatbug);
    b_setguildattitude(gil_demon, att_hostile, gil_scavenger);
    b_setguildattitude(gil_demon, att_neutral, gil_demon);
    b_setguildattitude(gil_demon, att_hostile, gil_wolf);
    b_setguildattitude(gil_demon, att_hostile, gil_shadowbeast);
    b_setguildattitude(gil_demon, att_hostile, gil_bloodfly);
    b_setguildattitude(gil_demon, att_hostile, gil_swampshark);
    b_setguildattitude(gil_demon, att_neutral, gil_zombie);
    b_setguildattitude(gil_demon, att_neutral, gil_undeadorc);
    b_setguildattitude(gil_demon, att_neutral, gil_skeleton);
    b_setguildattitude(gil_demon, att_hostile, gil_orcdog);
    b_setguildattitude(gil_demon, att_hostile, gil_molerat);
    b_setguildattitude(gil_demon, att_neutral, gil_golem);
    b_setguildattitude(gil_demon, att_hostile, gil_lurker);
    b_setguildattitude(gil_wolf, att_hostile, gil_seperator_hum);
    b_setguildattitude(gil_wolf, att_neutral, gil_waran);
    b_setguildattitude(gil_wolf, att_neutral, gil_slf);
    b_setguildattitude(gil_wolf, att_neutral, gil_gobbo);
    b_setguildattitude(gil_wolf, att_neutral, gil_troll);
    b_setguildattitude(gil_wolf, att_neutral, gil_snapper);
    b_setguildattitude(gil_wolf, att_neutral, gil_minecrawler);
    b_setguildattitude(gil_wolf, att_neutral, gil_meatbug);
    b_setguildattitude(gil_wolf, att_neutral, gil_scavenger);
    b_setguildattitude(gil_wolf, att_neutral, gil_demon);
    b_setguildattitude(gil_wolf, att_friendly, gil_wolf);
    b_setguildattitude(gil_wolf, att_neutral, gil_shadowbeast);
    b_setguildattitude(gil_wolf, att_neutral, gil_bloodfly);
    b_setguildattitude(gil_wolf, att_neutral, gil_swampshark);
    b_setguildattitude(gil_wolf, att_neutral, gil_zombie);
    b_setguildattitude(gil_wolf, att_neutral, gil_undeadorc);
    b_setguildattitude(gil_wolf, att_neutral, gil_skeleton);
    b_setguildattitude(gil_wolf, att_neutral, gil_orcdog);
    b_setguildattitude(gil_wolf, att_hostile, gil_molerat);
    b_setguildattitude(gil_wolf, att_neutral, gil_golem);
    b_setguildattitude(gil_wolf, att_neutral, gil_lurker);
    b_setguildattitude(gil_shadowbeast, att_hostile, gil_seperator_hum);
    b_setguildattitude(gil_shadowbeast, att_hostile, gil_waran);
    b_setguildattitude(gil_shadowbeast, att_neutral, gil_slf);
    b_setguildattitude(gil_shadowbeast, att_neutral, gil_gobbo);
    b_setguildattitude(gil_shadowbeast, att_neutral, gil_troll);
    b_setguildattitude(gil_shadowbeast, att_hostile, gil_snapper);
    b_setguildattitude(gil_shadowbeast, att_hostile, gil_minecrawler);
    b_setguildattitude(gil_shadowbeast, att_neutral, gil_meatbug);
    b_setguildattitude(gil_shadowbeast, att_hostile, gil_scavenger);
    b_setguildattitude(gil_shadowbeast, att_hostile, gil_demon);
    b_setguildattitude(gil_shadowbeast, att_neutral, gil_wolf);
    b_setguildattitude(gil_shadowbeast, att_neutral, gil_shadowbeast);
    b_setguildattitude(gil_shadowbeast, att_neutral, gil_bloodfly);
    b_setguildattitude(gil_shadowbeast, att_neutral, gil_swampshark);
    b_setguildattitude(gil_shadowbeast, att_hostile, gil_zombie);
    b_setguildattitude(gil_shadowbeast, att_hostile, gil_undeadorc);
    b_setguildattitude(gil_shadowbeast, att_hostile, gil_skeleton);
    b_setguildattitude(gil_shadowbeast, att_neutral, gil_orcdog);
    b_setguildattitude(gil_shadowbeast, att_hostile, gil_molerat);
    b_setguildattitude(gil_shadowbeast, att_hostile, gil_golem);
    b_setguildattitude(gil_shadowbeast, att_neutral, gil_lurker);
    b_setguildattitude(gil_bloodfly, att_hostile, gil_seperator_hum);
    b_setguildattitude(gil_bloodfly, att_neutral, gil_waran);
    b_setguildattitude(gil_bloodfly, att_neutral, gil_slf);
    b_setguildattitude(gil_bloodfly, att_neutral, gil_gobbo);
    b_setguildattitude(gil_bloodfly, att_neutral, gil_troll);
    b_setguildattitude(gil_bloodfly, att_neutral, gil_snapper);
    b_setguildattitude(gil_bloodfly, att_neutral, gil_minecrawler);
    b_setguildattitude(gil_bloodfly, att_neutral, gil_meatbug);
    b_setguildattitude(gil_bloodfly, att_neutral, gil_scavenger);
    b_setguildattitude(gil_bloodfly, att_neutral, gil_demon);
    b_setguildattitude(gil_bloodfly, att_neutral, gil_wolf);
    b_setguildattitude(gil_bloodfly, att_neutral, gil_shadowbeast);
    b_setguildattitude(gil_bloodfly, att_friendly, gil_bloodfly);
    b_setguildattitude(gil_bloodfly, att_neutral, gil_swampshark);
    b_setguildattitude(gil_bloodfly, att_neutral, gil_zombie);
    b_setguildattitude(gil_bloodfly, att_neutral, gil_undeadorc);
    b_setguildattitude(gil_bloodfly, att_neutral, gil_skeleton);
    b_setguildattitude(gil_bloodfly, att_neutral, gil_orcdog);
    b_setguildattitude(gil_bloodfly, att_neutral, gil_molerat);
    b_setguildattitude(gil_bloodfly, att_neutral, gil_golem);
    b_setguildattitude(gil_bloodfly, att_neutral, gil_lurker);
    b_setguildattitude(gil_swampshark, att_hostile, gil_seperator_hum);
    b_setguildattitude(gil_swampshark, att_hostile, gil_waran);
    b_setguildattitude(gil_swampshark, att_neutral, gil_slf);
    b_setguildattitude(gil_swampshark, att_hostile, gil_gobbo);
    b_setguildattitude(gil_swampshark, att_neutral, gil_troll);
    b_setguildattitude(gil_swampshark, att_hostile, gil_snapper);
    b_setguildattitude(gil_swampshark, att_hostile, gil_minecrawler);
    b_setguildattitude(gil_swampshark, att_neutral, gil_meatbug);
    b_setguildattitude(gil_swampshark, att_hostile, gil_scavenger);
    b_setguildattitude(gil_swampshark, att_neutral, gil_demon);
    b_setguildattitude(gil_swampshark, att_hostile, gil_wolf);
    b_setguildattitude(gil_swampshark, att_neutral, gil_shadowbeast);
    b_setguildattitude(gil_swampshark, att_neutral, gil_bloodfly);
    b_setguildattitude(gil_swampshark, att_neutral, gil_swampshark);
    b_setguildattitude(gil_swampshark, att_neutral, gil_zombie);
    b_setguildattitude(gil_swampshark, att_neutral, gil_undeadorc);
    b_setguildattitude(gil_swampshark, att_neutral, gil_skeleton);
    b_setguildattitude(gil_swampshark, att_hostile, gil_orcdog);
    b_setguildattitude(gil_swampshark, att_hostile, gil_molerat);
    b_setguildattitude(gil_swampshark, att_neutral, gil_golem);
    b_setguildattitude(gil_swampshark, att_hostile, gil_lurker);
    b_setguildattitude(gil_zombie, att_hostile, gil_seperator_hum);
    b_setguildattitude(gil_zombie, att_hostile, gil_waran);
    b_setguildattitude(gil_zombie, att_friendly, gil_slf);
    b_setguildattitude(gil_zombie, att_hostile, gil_gobbo);
    b_setguildattitude(gil_zombie, att_hostile, gil_troll);
    b_setguildattitude(gil_zombie, att_hostile, gil_snapper);
    b_setguildattitude(gil_zombie, att_hostile, gil_minecrawler);
    b_setguildattitude(gil_zombie, att_neutral, gil_meatbug);
    b_setguildattitude(gil_zombie, att_hostile, gil_scavenger);
    b_setguildattitude(gil_zombie, att_friendly, gil_demon);
    b_setguildattitude(gil_zombie, att_hostile, gil_wolf);
    b_setguildattitude(gil_zombie, att_hostile, gil_shadowbeast);
    b_setguildattitude(gil_zombie, att_hostile, gil_bloodfly);
    b_setguildattitude(gil_zombie, att_hostile, gil_swampshark);
    b_setguildattitude(gil_zombie, att_friendly, gil_zombie);
    b_setguildattitude(gil_zombie, att_friendly, gil_undeadorc);
    b_setguildattitude(gil_zombie, att_friendly, gil_skeleton);
    b_setguildattitude(gil_zombie, att_hostile, gil_orcdog);
    b_setguildattitude(gil_zombie, att_hostile, gil_molerat);
    b_setguildattitude(gil_zombie, att_neutral, gil_golem);
    b_setguildattitude(gil_zombie, att_hostile, gil_lurker);
    b_setguildattitude(gil_undeadorc, att_hostile, gil_seperator_hum);
    b_setguildattitude(gil_undeadorc, att_hostile, gil_waran);
    b_setguildattitude(gil_undeadorc, att_friendly, gil_slf);
    b_setguildattitude(gil_undeadorc, att_hostile, gil_gobbo);
    b_setguildattitude(gil_undeadorc, att_hostile, gil_troll);
    b_setguildattitude(gil_undeadorc, att_hostile, gil_snapper);
    b_setguildattitude(gil_undeadorc, att_hostile, gil_minecrawler);
    b_setguildattitude(gil_undeadorc, att_neutral, gil_meatbug);
    b_setguildattitude(gil_undeadorc, att_hostile, gil_scavenger);
    b_setguildattitude(gil_undeadorc, att_friendly, gil_demon);
    b_setguildattitude(gil_undeadorc, att_hostile, gil_wolf);
    b_setguildattitude(gil_undeadorc, att_hostile, gil_shadowbeast);
    b_setguildattitude(gil_undeadorc, att_hostile, gil_bloodfly);
    b_setguildattitude(gil_undeadorc, att_hostile, gil_swampshark);
    b_setguildattitude(gil_undeadorc, att_friendly, gil_zombie);
    b_setguildattitude(gil_undeadorc, att_friendly, gil_undeadorc);
    b_setguildattitude(gil_undeadorc, att_friendly, gil_skeleton);
    b_setguildattitude(gil_undeadorc, att_hostile, gil_orcdog);
    b_setguildattitude(gil_undeadorc, att_hostile, gil_molerat);
    b_setguildattitude(gil_undeadorc, att_neutral, gil_golem);
    b_setguildattitude(gil_undeadorc, att_hostile, gil_lurker);
    b_setguildattitude(gil_orcdog, att_hostile, gil_seperator_hum);
    b_setguildattitude(gil_orcdog, att_neutral, gil_waran);
    b_setguildattitude(gil_orcdog, att_neutral, gil_slf);
    b_setguildattitude(gil_orcdog, att_neutral, gil_gobbo);
    b_setguildattitude(gil_orcdog, att_neutral, gil_troll);
    b_setguildattitude(gil_orcdog, att_neutral, gil_snapper);
    b_setguildattitude(gil_orcdog, att_neutral, gil_minecrawler);
    b_setguildattitude(gil_orcdog, att_neutral, gil_meatbug);
    b_setguildattitude(gil_orcdog, att_neutral, gil_scavenger);
    b_setguildattitude(gil_orcdog, att_neutral, gil_demon);
    b_setguildattitude(gil_orcdog, att_neutral, gil_wolf);
    b_setguildattitude(gil_orcdog, att_neutral, gil_shadowbeast);
    b_setguildattitude(gil_orcdog, att_neutral, gil_bloodfly);
    b_setguildattitude(gil_orcdog, att_neutral, gil_swampshark);
    b_setguildattitude(gil_orcdog, att_neutral, gil_zombie);
    b_setguildattitude(gil_orcdog, att_neutral, gil_undeadorc);
    b_setguildattitude(gil_orcdog, att_neutral, gil_skeleton);
    b_setguildattitude(gil_orcdog, att_friendly, gil_orcdog);
    b_setguildattitude(gil_orcdog, att_neutral, gil_molerat);
    b_setguildattitude(gil_orcdog, att_neutral, gil_golem);
    b_setguildattitude(gil_orcdog, att_neutral, gil_lurker);
    b_setguildattitude(gil_orcdog, att_neutral, gil_orcscout);
    b_setguildattitude(gil_orcdog, att_neutral, gil_orcwarrior);
    b_setguildattitude(gil_orcdog, att_neutral, gil_orcshaman);
    b_setguildattitude(gil_molerat, att_hostile, gil_seperator_hum);
    b_setguildattitude(gil_molerat, att_neutral, gil_waran);
    b_setguildattitude(gil_molerat, att_neutral, gil_slf);
    b_setguildattitude(gil_molerat, att_neutral, gil_gobbo);
    b_setguildattitude(gil_molerat, att_neutral, gil_troll);
    b_setguildattitude(gil_molerat, att_neutral, gil_snapper);
    b_setguildattitude(gil_molerat, att_neutral, gil_minecrawler);
    b_setguildattitude(gil_molerat, att_neutral, gil_meatbug);
    b_setguildattitude(gil_molerat, att_neutral, gil_scavenger);
    b_setguildattitude(gil_molerat, att_neutral, gil_demon);
    b_setguildattitude(gil_molerat, att_hostile, gil_wolf);
    b_setguildattitude(gil_molerat, att_neutral, gil_shadowbeast);
    b_setguildattitude(gil_molerat, att_neutral, gil_bloodfly);
    b_setguildattitude(gil_molerat, att_neutral, gil_swampshark);
    b_setguildattitude(gil_molerat, att_neutral, gil_zombie);
    b_setguildattitude(gil_molerat, att_neutral, gil_undeadorc);
    b_setguildattitude(gil_molerat, att_neutral, gil_skeleton);
    b_setguildattitude(gil_molerat, att_neutral, gil_orcdog);
    b_setguildattitude(gil_molerat, att_friendly, gil_molerat);
    b_setguildattitude(gil_molerat, att_neutral, gil_golem);
    b_setguildattitude(gil_molerat, att_neutral, gil_lurker);
    b_setguildattitude(gil_golem, att_hostile, gil_seperator_hum);
    b_setguildattitude(gil_golem, att_hostile, gil_waran);
    b_setguildattitude(gil_golem, att_hostile, gil_slf);
    b_setguildattitude(gil_golem, att_hostile, gil_gobbo);
    b_setguildattitude(gil_golem, att_hostile, gil_troll);
    b_setguildattitude(gil_golem, att_hostile, gil_snapper);
    b_setguildattitude(gil_golem, att_hostile, gil_minecrawler);
    b_setguildattitude(gil_golem, att_hostile, gil_meatbug);
    b_setguildattitude(gil_golem, att_hostile, gil_scavenger);
    b_setguildattitude(gil_golem, att_hostile, gil_demon);
    b_setguildattitude(gil_golem, att_hostile, gil_wolf);
    b_setguildattitude(gil_golem, att_hostile, gil_shadowbeast);
    b_setguildattitude(gil_golem, att_hostile, gil_bloodfly);
    b_setguildattitude(gil_golem, att_hostile, gil_swampshark);
    b_setguildattitude(gil_golem, att_hostile, gil_zombie);
    b_setguildattitude(gil_golem, att_hostile, gil_undeadorc);
    b_setguildattitude(gil_golem, att_hostile, gil_skeleton);
    b_setguildattitude(gil_golem, att_hostile, gil_orcdog);
    b_setguildattitude(gil_golem, att_hostile, gil_molerat);
    b_setguildattitude(gil_golem, att_neutral, gil_golem);
    b_setguildattitude(gil_golem, att_hostile, gil_lurker);
    b_setguildattitude(gil_golem, att_hostile, gil_orcshaman);
    b_setguildattitude(gil_golem, att_hostile, gil_orcwarrior);
    b_setguildattitude(gil_golem, att_hostile, gil_orcscout);
    b_setguildattitude(gil_lurker, att_hostile, gil_seperator_hum);
    b_setguildattitude(gil_lurker, att_neutral, gil_waran);
    b_setguildattitude(gil_lurker, att_neutral, gil_slf);
    b_setguildattitude(gil_lurker, att_hostile, gil_gobbo);
    b_setguildattitude(gil_lurker, att_neutral, gil_troll);
    b_setguildattitude(gil_lurker, att_neutral, gil_snapper);
    b_setguildattitude(gil_lurker, att_neutral, gil_minecrawler);
    b_setguildattitude(gil_lurker, att_neutral, gil_meatbug);
    b_setguildattitude(gil_lurker, att_neutral, gil_scavenger);
    b_setguildattitude(gil_lurker, att_neutral, gil_demon);
    b_setguildattitude(gil_lurker, att_neutral, gil_wolf);
    b_setguildattitude(gil_lurker, att_neutral, gil_shadowbeast);
    b_setguildattitude(gil_lurker, att_neutral, gil_bloodfly);
    b_setguildattitude(gil_lurker, att_neutral, gil_swampshark);
    b_setguildattitude(gil_lurker, att_neutral, gil_zombie);
    b_setguildattitude(gil_lurker, att_neutral, gil_undeadorc);
    b_setguildattitude(gil_lurker, att_neutral, gil_skeleton);
    b_setguildattitude(gil_lurker, att_neutral, gil_orcdog);
    b_setguildattitude(gil_lurker, att_neutral, gil_molerat);
    b_setguildattitude(gil_lurker, att_neutral, gil_golem);
    b_setguildattitude(gil_lurker, att_neutral, gil_lurker);
    b_setguildattitude(gil_skeleton, att_hostile, gil_seperator_hum);
    b_setguildattitude(gil_skeleton, att_hostile, gil_waran);
    b_setguildattitude(gil_skeleton, att_friendly, gil_slf);
    b_setguildattitude(gil_skeleton, att_hostile, gil_gobbo);
    b_setguildattitude(gil_skeleton, att_hostile, gil_troll);
    b_setguildattitude(gil_skeleton, att_hostile, gil_snapper);
    b_setguildattitude(gil_skeleton, att_hostile, gil_minecrawler);
    b_setguildattitude(gil_skeleton, att_neutral, gil_meatbug);
    b_setguildattitude(gil_skeleton, att_hostile, gil_scavenger);
    b_setguildattitude(gil_skeleton, att_friendly, gil_demon);
    b_setguildattitude(gil_skeleton, att_hostile, gil_wolf);
    b_setguildattitude(gil_skeleton, att_hostile, gil_shadowbeast);
    b_setguildattitude(gil_skeleton, att_hostile, gil_bloodfly);
    b_setguildattitude(gil_skeleton, att_hostile, gil_swampshark);
    b_setguildattitude(gil_skeleton, att_friendly, gil_zombie);
    b_setguildattitude(gil_skeleton, att_friendly, gil_undeadorc);
    b_setguildattitude(gil_skeleton, att_friendly, gil_skeleton);
    b_setguildattitude(gil_skeleton, att_hostile, gil_orcdog);
    b_setguildattitude(gil_skeleton, att_hostile, gil_molerat);
    b_setguildattitude(gil_skeleton, att_neutral, gil_golem);
    b_setguildattitude(gil_skeleton, att_hostile, gil_lurker);
    b_setguildattitude(gil_skeleton, att_hostile, gil_orcshaman);
    b_setguildattitude(gil_skeleton, att_hostile, gil_orcwarrior);
    b_setguildattitude(gil_skeleton, att_hostile, gil_orcscout);
    b_setguildattitude(gil_seperator_hum, att_hostile, gil_waran);
    b_setguildattitude(gil_seperator_hum, att_hostile, gil_slf);
    b_setguildattitude(gil_seperator_hum, att_hostile, gil_gobbo);
    b_setguildattitude(gil_seperator_hum, att_hostile, gil_troll);
    b_setguildattitude(gil_seperator_hum, att_hostile, gil_snapper);
    b_setguildattitude(gil_seperator_hum, att_hostile, gil_minecrawler);
    b_setguildattitude(gil_seperator_hum, att_neutral, gil_meatbug);
    b_setguildattitude(gil_seperator_hum, att_hostile, gil_scavenger);
    b_setguildattitude(gil_seperator_hum, att_hostile, gil_demon);
    b_setguildattitude(gil_seperator_hum, att_hostile, gil_wolf);
    b_setguildattitude(gil_seperator_hum, att_hostile, gil_shadowbeast);
    b_setguildattitude(gil_seperator_hum, att_hostile, gil_bloodfly);
    b_setguildattitude(gil_seperator_hum, att_hostile, gil_swampshark);
    b_setguildattitude(gil_seperator_hum, att_hostile, gil_zombie);
    b_setguildattitude(gil_seperator_hum, att_hostile, gil_undeadorc);
    b_setguildattitude(gil_seperator_hum, att_hostile, gil_skeleton);
    b_setguildattitude(gil_seperator_hum, att_hostile, gil_orcdog);
    b_setguildattitude(gil_seperator_hum, att_hostile, gil_molerat);
    b_setguildattitude(gil_seperator_hum, att_hostile, gil_golem);
    b_setguildattitude(gil_seperator_hum, att_hostile, gil_lurker);
    b_setguildattitude(gil_seperator_hum, att_hostile, gil_orcshaman);
    b_setguildattitude(gil_seperator_hum, att_hostile, gil_orcwarrior);
    b_setguildattitude(gil_seperator_hum, att_hostile, gil_orcscout);
    b_setguildattitude(gil_seperator_hum, att_friendly, gil_orcslave);
    b_setguildattitude(gil_gur, att_friendly, gil_demon);
    b_setguildattitude(gil_gur, att_neutral, gil_minecrawler);
    b_setguildattitude(gil_gur, att_neutral, gil_skeleton);
    b_setguildattitude(gil_gur, att_neutral, gil_undeadorc);
    b_setguildattitude(gil_gur, att_neutral, gil_zombie);
    b_setguildattitude(gil_demon, att_friendly, gil_gur);
    b_setguildattitude(gil_minecrawler, att_neutral, gil_gur);
    b_setguildattitude(gil_skeleton, att_neutral, gil_gur);
    b_setguildattitude(gil_undeadorc, att_neutral, gil_gur);
    b_setguildattitude(gil_zombie, att_neutral, gil_gur);
    b_setguildattitude(gil_orcshaman, att_hostile, gil_seperator_hum);
    b_setguildattitude(gil_orcshaman, att_friendly, gil_orcdog);
    b_setguildattitude(gil_orcwarrior, att_hostile, gil_seperator_hum);
    b_setguildattitude(gil_orcwarrior, att_friendly, gil_orcdog);
    b_setguildattitude(gil_orcscout, att_hostile, gil_seperator_hum);
    b_setguildattitude(gil_orcscout, att_friendly, gil_orcdog);
    b_setguildattitude(gil_grd, att_friendly, gil_orcslave);
    b_setguildattitude(gil_stt, att_friendly, gil_orcslave);
    b_setguildattitude(gil_tpl, att_friendly, gil_orcslave);
    b_setguildattitude(gil_orcshaman, att_friendly, gil_orcshaman);
    b_setguildattitude(gil_orcshaman, att_friendly, gil_orcwarrior);
    b_setguildattitude(gil_orcshaman, att_friendly, gil_orcscout);
    b_setguildattitude(gil_orcshaman, att_friendly, gil_orcslave);
    b_setguildattitude(gil_orcwarrior, att_friendly, gil_orcshaman);
    b_setguildattitude(gil_orcwarrior, att_friendly, gil_orcwarrior);
    b_setguildattitude(gil_orcwarrior, att_friendly, gil_orcscout);
    b_setguildattitude(gil_orcwarrior, att_friendly, gil_orcslave);
    b_setguildattitude(gil_orcscout, att_friendly, gil_orcshaman);
    b_setguildattitude(gil_orcscout, att_friendly, gil_orcwarrior);
    b_setguildattitude(gil_orcscout, att_friendly, gil_orcscout);
    b_setguildattitude(gil_orcscout, att_friendly, gil_orcslave);
    b_setguildattitude(gil_orcslave, att_friendly, gil_orcshaman);
    b_setguildattitude(gil_orcslave, att_friendly, gil_orcwarrior);
    b_setguildattitude(gil_orcslave, att_friendly, gil_orcscout);
    b_setguildattitude(gil_orcslave, att_friendly, gil_orcslave);
};

func void b_give_baalcadarchapter1runes() {
    var c_npc npc;

    npc = hlp_getnpc(gur_1208_baalcadar);
    createinvitems(npc, itarscrollheal, 8);
    createinvitems(npc, itarscrolllight, 10);
    createinvitems(npc, itarscrollwindfist, 4);
    createinvitems(npc, itfo_potion_mana_01, 6);
    createinvitems(npc, itfo_potion_health_01, 8);
    createinvitems(npc, itfo_potion_water_01, 10);
    createinvitem(npc, schutzring_waffen1);
    createinvitem(npc, schutzring_magie1);
    createinvitem(npc, schutzring_geschosse1);
    createinvitem(npc, schutzring_feuer1);
    createinvitem(npc, itwr_bloodfly_01);
    createinvitem(npc, itwrpsimap);
};

func void b_give_baalcadarchapter2runes() {
    var c_npc npc;

    npc = hlp_getnpc(gur_1208_baalcadar);
    createinvitem(npc, itarrunelight);
    createinvitem(npc, itarrunewindfist);
    createinvitem(npc, itarruneheal);
    createinvitems(npc, itarscrollheal, 8);
    createinvitems(npc, itarscrolllight, 10);
    createinvitems(npc, itarscrollwindfist, 6);
    createinvitems(npc, itarscrolltelekinesis, 4);
    createinvitems(npc, itarscrolltrfwolf, 5);
    createinvitems(npc, itarscrolltrflurker, 3);
    createinvitems(npc, itarscrolltrfscavenger, 1);
    createinvitems(npc, itarscrolltrfmolerat, 5);
    createinvitems(npc, itarscrolltrfcrawler, 3);
    createinvitems(npc, itarscrolltrfbloodfly, 2);
    createinvitems(npc, itarscrollcharm, 4);
    createinvitem(npc, schutzring_feuer2);
    createinvitem(npc, schutzring_waffen2);
    createinvitem(npc, schutzring_geschosse2);
    createinvitem(npc, schutzring_magie2);
    createinvitem(npc, schutzring_waffen1);
    createinvitems(npc, itfo_potion_mana_01, 12);
    createinvitems(npc, itfo_potion_mana_02, 8);
    createinvitems(npc, itfo_potion_health_01, 16);
    createinvitems(npc, itfo_potion_health_02, 10);
    createinvitems(npc, itfo_potion_water_01, 20);
    createinvitems(npc, itfo_potion_haste_01, 6);
};

func void b_give_baalcadarchapter3runes() {
    var c_npc npc;

    npc = hlp_getnpc(gur_1208_baalcadar);
    createinvitem(npc, itarrunesleep);
    createinvitem(npc, itarrunetelekinesis);
    createinvitem(npc, itarrunecharm);
    createinvitems(npc, itarscrollheal, 8);
    createinvitems(npc, itarscrolllight, 10);
    createinvitems(npc, itarscrollwindfist, 6);
    createinvitems(npc, itarscrolltrfwolf, 4);
    createinvitems(npc, itarscrolltrflurker, 4);
    createinvitems(npc, itarscrolltrfscavenger, 2);
    createinvitems(npc, itarscrolltrfmolerat, 4);
    createinvitems(npc, itarscrolltrfcrawler, 3);
    createinvitems(npc, itarscrolltrfbloodfly, 1);
    createinvitems(npc, itarscrollfear, 4);
    createinvitems(npc, itarscrollsleep, 5);
    createinvitems(npc, itarscrollstormfist, 3);
    createinvitems(npc, itarscrolltrfmeatbug, 2);
    createinvitems(npc, itarscrolltrfwaran, 2);
    createinvitems(npc, itarscrollpyrokinesis, 5);
    createinvitems(npc, itarscrollcontrol, 3);
    createinvitems(npc, itarscrollcharm, 5);
    createinvitem(npc, schutzring_geschosse1_waffen1);
    createinvitem(npc, schutzring_total1);
    createinvitem(npc, schutzring_magie1_fire1);
    createinvitems(npc, itfo_potion_mana_01, 24);
    createinvitems(npc, itfo_potion_mana_02, 16);
    createinvitems(npc, itfo_potion_mana_03, 10);
    createinvitems(npc, itfo_potion_health_01, 32);
    createinvitems(npc, itfo_potion_health_02, 20);
    createinvitems(npc, itfo_potion_health_03, 12);
    createinvitems(npc, itfo_potion_haste_01, 12);
    createinvitems(npc, itfo_potion_haste_02, 6);
};

func void b_give_baalcadarchapter4runes() {
    var c_npc npc;

    npc = hlp_getnpc(gur_1208_baalcadar);
    createinvitem(npc, itarrunecontrol);
    createinvitem(npc, itarrunepyrokinesis);
    createinvitem(npc, itarrunestormfist);
    createinvitems(npc, itarscrollheal, 8);
    createinvitems(npc, itarscrolllight, 10);
    createinvitems(npc, itarscrollwindfist, 6);
    createinvitems(npc, itarscrolltelekinesis, 4);
    createinvitems(npc, itarscrolltrfwolf, 4);
    createinvitems(npc, itarscrolltrflurker, 4);
    createinvitems(npc, itarscrolltrfscavenger, 2);
    createinvitems(npc, itarscrolltrfcrawler, 4);
    createinvitems(npc, itarscrolltrfbloodfly, 2);
    createinvitems(npc, itarscrollfear, 4);
    createinvitems(npc, itarscrollsleep, 5);
    createinvitems(npc, itarscrollstormfist, 3);
    createinvitems(npc, itarscrolltrfmeatbug, 3);
    createinvitems(npc, itarscrolltrfwaran, 5);
    createinvitems(npc, itarscrollpyrokinesis, 5);
    createinvitems(npc, itarscrollcontrol, 3);
    createinvitems(npc, itarscrollcharm, 4);
    createinvitems(npc, itarscrolltrfsnapper, 3);
    createinvitems(npc, itarscrolltrforcdog, 5);
    createinvitem(npc, schutzring_magie2_fire2);
    createinvitem(npc, schutzring_geschosse2_waffen2);
    createinvitem(npc, schutzring_total2);
    createinvitems(npc, itfo_potion_mana_01, 48);
    createinvitems(npc, itfo_potion_mana_02, 32);
    createinvitems(npc, itfo_potion_mana_03, 20);
    createinvitems(npc, itfo_potion_health_01, 64);
    createinvitems(npc, itfo_potion_health_02, 40);
    createinvitems(npc, itfo_potion_health_03, 24);
    createinvitems(npc, itfo_potion_haste_01, 24);
    createinvitems(npc, itfo_potion_haste_02, 12);
    createinvitems(npc, itfo_potion_haste_02, 6);
};

func void b_give_baalcadarchapter5runes() {
    var c_npc npc;

    npc = hlp_getnpc(gur_1208_baalcadar);
    createinvitems(npc, itarscrollheal, 8);
    createinvitems(npc, itarscrolllight, 10);
    createinvitems(npc, itarscrollwindfist, 4);
    createinvitems(npc, itarscrolltelekinesis, 4);
    createinvitems(npc, itarscrolltrfwolf, 4);
    createinvitems(npc, itarscrolltrflurker, 4);
    createinvitems(npc, itarscrolltrfscavenger, 3);
    createinvitems(npc, itarscrolltrfcrawler, 3);
    createinvitems(npc, itarscrolltrfmeatbug, 4);
    createinvitems(npc, itarscrolltrfwaran, 5);
    createinvitems(npc, itarscrolltrfbloodfly, 2);
    createinvitems(npc, itarscrolltrfshadowbeast, 3);
    createinvitems(npc, itarscrollfear, 4);
    createinvitems(npc, itarscrollsleep, 4);
    createinvitems(npc, itarscrollstormfist, 3);
    createinvitems(npc, itarscrollpyrokinesis, 5);
    createinvitems(npc, itarscrollcontrol, 2);
    createinvitems(npc, itarscrollcharm, 4);
    createinvitems(npc, itarscrolldestroyundead, 16);
    createinvitems(npc, itfo_potion_mana_01, 18);
    createinvitems(npc, itfo_potion_mana_02, 16);
    createinvitems(npc, itfo_potion_mana_03, 10);
    createinvitems(npc, itfo_potion_health_01, 32);
    createinvitems(npc, itfo_potion_health_02, 20);
    createinvitems(npc, itfo_potion_health_03, 48);
    createinvitems(npc, itfo_potion_haste_01, 48);
    createinvitems(npc, itfo_potion_haste_02, 24);
    createinvitems(npc, itfo_potion_haste_03, 12);
};

func void b_give_cavalornchapter1weapons() {
    var c_npc npc;

    npc = hlp_getnpc(stt_336_cavalorn);
    createinvitems(npc, itrw_bow_small_02, 2);
    createinvitem(npc, itrw_bow_small_01);
    createinvitems(npc, itamarrow, 200);
    createinvitems(npc, itminugget, 200);
};

func void b_give_cavalornchapter2weapons() {
    var c_npc npc;

    npc = hlp_getnpc(stt_336_cavalorn);
    createinvitem(npc, itrw_bow_small_03);
    createinvitem(npc, itrw_bow_small_04);
    createinvitem(npc, itrw_bow_small_05);
    createinvitem(npc, itrw_bow_long_01);
    createinvitems(npc, itamarrow, 400);
    createinvitems(npc, itambolt, 200);
    createinvitems(npc, itminugget, 400);
};

func void b_give_cavalornchapter3weapons() {
    var c_npc npc;

    npc = hlp_getnpc(stt_336_cavalorn);
    createinvitem(npc, itrw_bow_long_02);
    createinvitem(npc, itrw_bow_long_03);
    createinvitem(npc, itrw_bow_long_04);
    createinvitem(npc, itrw_bow_long_05);
    createinvitems(npc, itamarrow, 600);
    createinvitems(npc, itambolt, 400);
    createinvitems(npc, itminugget, 600);
};

func void b_give_cavalornchapter4weapons() {
    var c_npc npc;

    npc = hlp_getnpc(stt_336_cavalorn);
    createinvitems(npc, itminugget, 400);
    createinvitem(npc, itrw_bow_long_06);
    createinvitem(npc, itrw_bow_long_07);
    createinvitem(npc, itrw_bow_long_08);
    createinvitems(npc, itamarrow, 800);
    createinvitems(npc, itambolt, 600);
};

func void b_give_cavalornchapter5weapons() {
    var c_npc npc;

    npc = hlp_getnpc(stt_336_cavalorn);
    createinvitems(npc, itminugget, 1000);
    createinvitem(npc, itrw_bow_long_09);
    createinvitem(npc, itrw_bow_war_01);
    createinvitem(npc, itrw_bow_war_02);
    createinvitem(npc, itrw_bow_war_03);
    createinvitems(npc, itamarrow, 600);
    createinvitems(npc, itambolt, 800);
};

func void b_give_cavalornchapter6weapons() {
    var c_npc npc;

    npc = hlp_getnpc(stt_336_cavalorn);
    createinvitems(npc, itminugget, 1200);
    createinvitem(npc, itrw_bow_war_04);
    createinvitem(npc, itrw_bow_war_05);
    createinvitems(npc, itamarrow, 400);
    createinvitems(npc, itambolt, 800);
};

func void b_give_cronoschapter1runes() {
    var c_npc npc;

    npc = hlp_getnpc(kdw_604_cronos);
    createinvitem(npc, itwrncmap);
    createinvitems(npc, itarscrollheal, 5);
    createinvitems(npc, itarscrolllight, 8);
    createinvitems(npc, itarscrollthunderbolt, 8);
    createinvitems(npc, itarscrollicecube, 2);
    createinvitem(npc, staerkering);
    createinvitem(npc, ring_des_geschicks);
    createinvitem(npc, ring_des_lebens);
    createinvitem(npc, ring_der_magie);
    createinvitem(npc, lehren_der_goetter1);
    createinvitem(npc, lehren_der_goetter2);
    createinvitem(npc, lehren_der_goetter3);
    createinvitem(npc, itwr_book_circle_01);
    createinvitem(npc, itwr_book_circle_02);
};

func void b_give_cronoschapter2runes() {
    var c_npc npc;

    npc = hlp_getnpc(kdw_604_cronos);
    createinvitems(npc, itarscrollheal, 5);
    createinvitems(npc, itarscrolllight, 7);
    createinvitems(npc, itarscrollfirebolt, 8);
    createinvitems(npc, itarscrollthunderbolt, 6);
    createinvitems(npc, itarscrollicecube, 2);
    createinvitems(npc, itarscrollchainlightning, 4);
    createinvitems(npc, itarscrollthunderball, 4);
    createinvitems(npc, itarscrolltrfwolf, 2);
    createinvitems(npc, itarscrolltrflurker, 3);
    createinvitems(npc, itarscrolltrfscavenger, 2);
    createinvitems(npc, itarscrolltrfmolerat, 4);
    createinvitems(npc, itarscrolltrfcrawler, 3);
    createinvitem(npc, ring_des_geschicks2);
    createinvitem(npc, ring_des_lebens2);
    createinvitem(npc, staerkering2);
    createinvitem(npc, itwr_book_circle_03);
    createinvitem(npc, itwr_book_circle_04);
};

func void b_give_cronoschapter3runes() {
    var c_npc npc;

    npc = hlp_getnpc(kdw_604_cronos);
    createinvitem(npc, itarrunelight);
    createinvitem(npc, itarruneheal);
    createinvitem(npc, itarrunethunderbolt);
    createinvitem(npc, itarruneicecube);
    createinvitem(npc, itarrunethunderball);
    createinvitems(npc, itarscrollheal, 5);
    createinvitems(npc, itarscrolllight, 12);
    createinvitems(npc, itarscrollthunderbolt, 5);
    createinvitems(npc, itarscrollicecube, 4);
    createinvitems(npc, itarscrollicewave, 3);
    createinvitems(npc, itarscrolltrfmeatbug, 2);
    createinvitems(npc, itarscrolltrfwaran, 3);
    createinvitems(npc, itarscrolltrfbloodfly, 2);
    createinvitem(npc, machtring);
    createinvitem(npc, ring_der_erleuchtung);
    createinvitem(npc, gewandtheitsamulett);
    createinvitem(npc, staerkeamulett);
    createinvitem(npc, lebensamulett);
    createinvitem(npc, amulett_der_magie);
    createinvitem(npc, itwr_book_circle_05);
    createinvitem(npc, itwr_book_circle_06);
};

func void b_give_cronoschapter4runes() {
    var c_npc npc;

    npc = hlp_getnpc(kdw_604_cronos);
    createinvitem(npc, itarruneicewave);
    createinvitem(npc, itarrunefirestorm);
    createinvitems(npc, itarscrollheal, 8);
    createinvitems(npc, itarscrolllight, 8);
    createinvitems(npc, itarscrollthunderbolt, 10);
    createinvitems(npc, itarscrollthunderball, 10);
    createinvitems(npc, itarscrollicecube, 4);
    createinvitems(npc, itarscrollicewave, 4);
    createinvitems(npc, itarscrolltrfmeatbug, 2);
    createinvitems(npc, itarscrolltrfwaran, 3);
    createinvitems(npc, itarscrolltrfsnapper, 3);
    createinvitems(npc, itarscrolltrforcdog, 4);
    createinvitems(npc, itarscrolltrfbloodfly, 2);
    createinvitems(npc, itarscrollfirebolt, 10);
    createinvitems(npc, itarscrollfireball, 10);
    createinvitem(npc, schutzamulett_feuer);
    createinvitem(npc, schutzamulett_magie);
    createinvitem(npc, schutzamulett_waffen);
    createinvitem(npc, schutzamulett_geschosse);
};

func void b_give_cronoschapter5runes() {
    var c_npc npc;

    npc = hlp_getnpc(kdw_604_cronos);
    createinvitem(npc, itarrunedestroyundead);
    createinvitems(npc, itarscrollheal, 5);
    createinvitems(npc, itarscrolllight, 10);
    createinvitems(npc, itarscrollthunderbolt, 10);
    createinvitems(npc, itarscrollicecube, 10);
    createinvitems(npc, itarscrollicewave, 8);
    createinvitems(npc, itarscrolltrfmeatbug, 2);
    createinvitems(npc, itarscrolltrfsnapper, 2);
    createinvitems(npc, itarscrolltrforcdog, 3);
    createinvitems(npc, itarscrolltrfbloodfly, 2);
    createinvitems(npc, itarscrolldestroyundead, 35);
    createinvitems(npc, itarscrolltrfshadowbeast, 2);
    createinvitem(npc, schutzamulett_magie_feuer);
    createinvitem(npc, schutzamulett_waffen_geschosse);
    createinvitem(npc, schutzamulett_total);
};

func void b_give_cronoschapter6runes() {
    var c_npc npc;

    npc = hlp_getnpc(kdw_604_cronos);
};

func void b_give_darrionchapter1weapons() {
    var c_npc npc;

    npc = hlp_getnpc(nov_1312_darrion);
    createinvitem(npc, itmw_1h_club_01);
    createinvitem(npc, itmw_1h_sledgehammer_01);
    createinvitem(npc, itmw_1h_mace_light_01);
    createinvitem(npc, itmw_1h_hatchet_01);
    createinvitem(npc, itmw_1h_nailmace_01);
    createinvitems(npc, itamarrow, 100);
    createinvitems(npc, itambolt, 100);
    createinvitems(npc, itminugget, 200);
};

func void b_give_darrionchapter2weapons() {
    var c_npc npc;

    npc = hlp_getnpc(nov_1312_darrion);
    createinvitem(npc, itmw_1h_mace_01);
    createinvitem(npc, itmw_1h_mace_02);
    createinvitem(npc, itmw_1h_mace_03);
    createinvitem(npc, itmw_1h_mace_04);
    createinvitem(npc, itmw_1h_mace_war_01);
    createinvitem(npc, itmw_1h_mace_war_02);
    createinvitem(npc, itmw_1h_mace_war_03);
    createinvitems(npc, itamarrow, 200);
    createinvitems(npc, itambolt, 200);
    createinvitems(npc, itminugget, 400);
};

func void b_give_darrionchapter3weapons() {
    var c_npc npc;

    npc = hlp_getnpc(nov_1312_darrion);
    createinvitem(npc, itmw_1h_warhammer_01);
    createinvitem(npc, itmw_1h_warhammer_02);
    createinvitem(npc, itmw_1h_warhammer_03);
    createinvitems(npc, itamarrow, 400);
    createinvitems(npc, itambolt, 400);
    createinvitems(npc, itminugget, 600);
};

func void b_give_darrionchapter4weapons() {
    var c_npc npc;

    npc = hlp_getnpc(nov_1312_darrion);
    createinvitem(npc, itmw_2h_sword_old_01);
    createinvitem(npc, itmw_2h_sword_light_01);
    createinvitem(npc, itmw_2h_sword_light_02);
    createinvitem(npc, itmw_2h_sword_light_03);
    createinvitems(npc, itamarrow, 800);
    createinvitems(npc, itambolt, 800);
    createinvitems(npc, itminugget, 800);
};

func void b_give_darrionchapter5weapons() {
    var c_npc npc;

    npc = hlp_getnpc(nov_1312_darrion);
    createinvitem(npc, itmw_2h_sword_light_04);
    createinvitem(npc, itmw_2h_sword_light_05);
    createinvitem(npc, itmw_2h_sword_01);
    createinvitem(npc, itmw_2h_sword_02);
    createinvitem(npc, itmw_2h_sword_03);
    createinvitem(npc, itmw_2h_sword_heavy_01);
    createinvitem(npc, itmw_2h_sword_heavy_02);
    createinvitem(npc, itmw_2h_sword_heavy_03);
    createinvitem(npc, itmw_2h_sword_heavy_04);
    createinvitems(npc, itminugget, 1000);
    createinvitems(npc, itamarrow, 800);
    createinvitems(npc, itambolt, 800);
};

func void b_give_darrionchapter6weapons() {
    var c_npc npc;

    npc = hlp_getnpc(nov_1312_darrion);
    createinvitems(npc, itminugget, 1200);
};

func void b_give_fiskchapter1weapons() {
    var c_npc npc;

    npc = hlp_getnpc(stt_311_fisk);
    createinvitems(self, itkelockpick, 10);
    createinvitem(npc, itmw_1h_sword_old_01);
    createinvitem(npc, itmw_1h_sword_short_01);
    createinvitem(npc, itmw_1h_sword_short_02);
    createinvitem(npc, itmw_1h_sword_short_03);
    createinvitem(npc, itmw_1h_sword_short_04);
    createinvitem(npc, itmw_1h_sword_short_05);
    createinvitem(npc, itmw_1h_sword_short_05);
    createinvitems(npc, itminugget, 200);
};

func void b_give_fiskchapter2weapons() {
    var c_npc npc;

    npc = hlp_getnpc(stt_311_fisk);
    createinvitems(self, itkelockpick, 20);
    createinvitem(npc, itmw_1h_sword_01);
    createinvitem(npc, itmw_1h_sword_02);
    createinvitem(npc, itmw_1h_sword_03);
    createinvitem(npc, itmw_1h_sword_04);
    createinvitem(npc, itmw_1h_sword_04);
    createinvitems(npc, itminugget, 400);
};

func void b_give_fiskchapter3weapons() {
    var c_npc npc;

    npc = hlp_getnpc(stt_311_fisk);
    createinvitems(self, itkelockpick, 30);
    createinvitem(npc, itmw_1h_sword_long_01);
    createinvitem(npc, itmw_1h_sword_long_02);
    createinvitem(npc, itmw_1h_sword_long_03);
    createinvitem(npc, itmw_1h_sword_long_04);
    createinvitem(npc, itmw_1h_sword_long_04);
    createinvitems(npc, itmw_1h_sword_broad_01, 2);
    createinvitems(npc, itminugget, 600);
};

func void b_giveriordianchapter1potions() {
    var c_npc npc;

    npc = hlp_getnpc(kdw_605_riordian);
    createinvitems(npc, itfo_potion_mana_01, 6);
    createinvitems(npc, itfo_potion_health_01, 8);
    createinvitems(npc, itfo_potion_water_01, 10);
};

func void b_giveriordianchapter2potions() {
    var c_npc npc;

    npc = hlp_getnpc(kdw_605_riordian);
    createinvitems(npc, itfo_potion_mana_01, 12);
    createinvitems(npc, itfo_potion_mana_02, 8);
    createinvitems(npc, itfo_potion_health_01, 16);
    createinvitems(npc, itfo_potion_health_02, 10);
    createinvitems(npc, itfo_potion_water_01, 10);
    createinvitems(npc, itfo_potion_haste_01, 6);
};

func void b_giveriordianchapter3potions() {
    var c_npc npc;

    npc = hlp_getnpc(kdw_605_riordian);
    createinvitems(npc, itfo_potion_mana_01, 24);
    createinvitems(npc, itfo_potion_mana_02, 16);
    createinvitems(npc, itfo_potion_mana_03, 10);
    createinvitems(npc, itfo_potion_health_01, 32);
    createinvitems(npc, itfo_potion_health_02, 20);
    createinvitems(npc, itfo_potion_health_03, 12);
    createinvitems(npc, itfo_potion_haste_01, 12);
    createinvitems(npc, itfo_potion_haste_02, 6);
};

func void b_giveriordianchapter4potions() {
    var c_npc npc;

    npc = hlp_getnpc(kdw_605_riordian);
    createinvitems(npc, itfo_potion_mana_01, 48);
    createinvitems(npc, itfo_potion_mana_02, 32);
    createinvitems(npc, itfo_potion_mana_03, 20);
    createinvitems(npc, itfo_potion_health_01, 64);
    createinvitems(npc, itfo_potion_health_02, 40);
    createinvitems(npc, itfo_potion_health_03, 24);
    createinvitems(npc, itfo_potion_haste_01, 24);
    createinvitems(npc, itfo_potion_haste_02, 12);
    createinvitems(npc, itfo_potion_haste_02, 6);
};

func void b_giveriordianchapter5potions() {
    var c_npc npc;

    npc = hlp_getnpc(kdw_605_riordian);
    createinvitems(npc, itfo_potion_mana_01, 18);
    createinvitems(npc, itfo_potion_mana_02, 16);
    createinvitems(npc, itfo_potion_mana_03, 10);
    createinvitems(npc, itfo_potion_health_01, 32);
    createinvitems(npc, itfo_potion_health_02, 20);
    createinvitems(npc, itfo_potion_health_03, 48);
    createinvitems(npc, itfo_potion_haste_01, 48);
    createinvitems(npc, itfo_potion_haste_02, 24);
    createinvitems(npc, itfo_potion_haste_03, 12);
};

func void b_giveriordianchapter6potions() {
    var c_npc npc;

    npc = hlp_getnpc(kdw_605_riordian);
    createinvitems(npc, itfo_potion_mana_01, 36);
    createinvitems(npc, itfo_potion_mana_02, 32);
    createinvitems(npc, itfo_potion_mana_03, 20);
    createinvitems(npc, itfo_potion_health_01, 64);
    createinvitems(npc, itfo_potion_health_02, 40);
    createinvitems(npc, itfo_potion_health_03, 96);
    createinvitems(npc, itfo_potion_haste_01, 96);
    createinvitems(npc, itfo_potion_haste_02, 48);
    createinvitems(npc, itfo_potion_haste_03, 24);
};

func void b_give_scorpiochapter4weapons() {
    var c_npc npc;

    npc = hlp_getnpc(grd_205_scorpio);
    createinvitem(npc, itmw_1h_sword_broad_01);
    createinvitem(npc, itmw_1h_sword_broad_02);
    createinvitem(npc, itmw_1h_sword_broad_03);
    createinvitem(npc, itmw_1h_sword_broad_04);
    createinvitem(npc, itmw_1h_sword_bastard_01);
    createinvitem(npc, itmw_1h_sword_bastard_02);
    createinvitem(npc, itmw_1h_sword_bastard_03);
    createinvitem(npc, itmw_1h_sword_bastard_03);
    createinvitem(npc, itmw_1h_sword_bastard_04);
    createinvitem(npc, itmw_1h_sword_bastard_04);
    createinvitem(npc, itmw_2h_sword_old_01);
    createinvitem(npc, itmw_2h_sword_light_01);
    createinvitem(npc, itmw_2h_sword_light_01);
    createinvitem(npc, itmw_2h_sword_light_02);
    createinvitem(npc, itmw_2h_sword_light_03);
    createinvitems(npc, itminugget, 800);
    createinvitem(npc, gewandtheitsamulett2);
    createinvitem(npc, staerkeamulett2);
    createinvitem(npc, itrw_crossbow_01);
    createinvitem(npc, itrw_crossbow_02);
    createinvitem(npc, itrw_crossbow_03);
};

func void b_give_scorpiochapter5weapons() {
    var c_npc npc;

    npc = hlp_getnpc(grd_205_scorpio);
    createinvitem(npc, itmw_2h_sword_light_02);
    createinvitem(npc, itmw_2h_sword_light_03);
    createinvitem(npc, itmw_2h_sword_light_04);
    createinvitem(npc, itmw_2h_sword_light_05);
    createinvitem(npc, itmw_2h_sword_01);
    createinvitem(npc, itmw_2h_sword_02);
    createinvitem(npc, itmw_2h_sword_03);
    createinvitem(npc, itmw_2h_sword_heavy_01);
    createinvitem(npc, itmw_2h_sword_heavy_02);
    createinvitem(npc, itmw_2h_sword_heavy_03);
    createinvitem(npc, itmw_2h_sword_heavy_04);
    createinvitems(npc, itminugget, 1000);
    createinvitems(npc, itrw_crossbow_04, 2);
};

func void b_give_scorpiochapter6weapons() {
    var c_npc npc;

    npc = hlp_getnpc(grd_205_scorpio);
    createinvitems(npc, itminugget, 600);
};

func void b_give_sharkychapter1weapons() {
    var c_npc npc;

    npc = hlp_getnpc(org_843_sharky);
    createinvitem(npc, itmw_1h_club_01);
    createinvitem(npc, itmw_1h_poker_01);
    createinvitem(npc, itmw_1h_sickle_01);
    createinvitem(npc, itmw_1h_sledgehammer_01);
    createinvitem(npc, itmw_1h_mace_light_01);
    createinvitem(npc, itmw_1h_hatchet_01);
    createinvitem(npc, itmw_1h_nailmace_01);
    createinvitem(npc, itmw_1h_scythe_01);
    createinvitem(npc, itmw_1h_axe_old_01);
    createinvitems(npc, itminugget, 200);
    createinvitems(npc, itkelockpick, 10);
};

func void b_give_sharkychapter2weapons() {
    var c_npc npc;

    npc = hlp_getnpc(org_843_sharky);
    createinvitem(npc, itmw_1h_axe_01);
    createinvitem(npc, itmw_1h_mace_01);
    createinvitem(npc, itmw_1h_mace_02);
    createinvitem(npc, itmw_1h_mace_03);
    createinvitem(npc, itmw_1h_mace_04);
    createinvitem(npc, itmw_1h_mace_war_01);
    createinvitem(npc, itmw_1h_mace_war_02);
    createinvitem(npc, itmw_1h_mace_war_03);
    createinvitems(npc, itkelockpick, 20);
    createinvitems(npc, itminugget, 400);
};

func void b_give_sharkychapter3weapons() {
    var c_npc npc;

    npc = hlp_getnpc(org_843_sharky);
    createinvitem(npc, itmw_1h_warhammer_01);
    createinvitem(npc, itmw_1h_warhammer_02);
    createinvitem(npc, itmw_1h_warhammer_03);
    createinvitem(npc, itmw_1h_axe_02);
    createinvitems(npc, itminugget, 600);
    createinvitems(npc, itkelockpick, 30);
};

func void b_give_sharkychapter4weapons() {
    var c_npc npc;

    npc = hlp_getnpc(org_843_sharky);
    createinvitem(npc, itmw_2h_axe_old_02);
    createinvitem(npc, itmw_2h_axe_old_01);
    createinvitem(npc, itmw_2h_axe_light_01);
    createinvitem(npc, itmw_2h_axe_light_02);
    createinvitems(npc, itminugget, 800);
    createinvitems(npc, itkelockpick, 20);
};

func void b_give_sharkychapter5weapons() {
    var c_npc npc;

    npc = hlp_getnpc(org_843_sharky);
    createinvitem(npc, itmw_2h_axe_light_01);
    createinvitem(npc, itmw_2h_axe_light_02);
    createinvitem(npc, itmw_2h_axe_light_03);
    createinvitem(npc, itmw_2h_axe_heavy_01);
    createinvitem(npc, itmw_2h_axe_heavy_02);
    createinvitem(npc, itmw_2h_axe_heavy_03);
    createinvitem(npc, itmw_2h_axe_heavy_04);
    createinvitems(npc, itminugget, 500);
    createinvitems(npc, itkelockpick, 10);
};

func void b_give_sharkychapter6weapons() {
    var c_npc npc;

    npc = hlp_getnpc(org_843_sharky);
    createinvitems(npc, itminugget, 600);
};

func void b_give_skipchapter2weapons() {
    var c_npc npc;

    npc = hlp_getnpc(grd_211_skip);
    createinvitems(npc, itkelockpick, 20);
    createinvitem(npc, itmw_1h_sword_01);
    createinvitem(npc, itmw_1h_sword_02);
    createinvitem(npc, itmw_1h_sword_03);
    createinvitem(npc, itmw_1h_sword_04);
    createinvitem(npc, itmw_1h_sword_04);
    createinvitems(npc, itminugget, 400);
    createinvitems(npc, itamarrow, 200);
    createinvitems(npc, itambolt, 200);
};

func void b_give_skipchapter3weapons() {
    var c_npc npc;

    npc = hlp_getnpc(grd_211_skip);
    createinvitems(npc, itkelockpick, 30);
    createinvitem(npc, itmw_1h_sword_long_01);
    createinvitem(npc, itmw_1h_sword_long_02);
    createinvitem(npc, itmw_1h_sword_long_03);
    createinvitem(npc, itmw_1h_sword_long_04);
    createinvitem(npc, itmw_1h_sword_long_04);
    createinvitems(npc, itamarrow, 400);
    createinvitems(npc, itambolt, 400);
    createinvitems(npc, itminugget, 600);
};

func void b_give_torrezchapter1runes() {
    var c_npc npc;

    npc = hlp_getnpc(kdf_405_torrez);
    createinvitems(npc, itarscrollheal, 10);
    createinvitems(npc, itarscrolllight, 16);
    createinvitems(npc, itarscrollfirebolt, 18);
    createinvitems(npc, itfo_potion_mana_01, 6);
    createinvitems(npc, itfo_potion_health_01, 8);
    createinvitems(npc, itfo_potion_water_01, 10);
    createinvitem(npc, itwr_book_circle_02);
    createinvitem(npc, itwr_book_circle_03);
    createinvitem(npc, lehren_der_goetter1);
    createinvitem(npc, lehren_der_goetter2);
    createinvitem(npc, lehren_der_goetter3);
};

func void b_give_torrezchapter2runes() {
    var c_npc npc;

    npc = hlp_getnpc(kdf_405_torrez);
    createinvitem(npc, itarrunelight);
    createinvitem(npc, itarrunefirebolt);
    createinvitem(npc, itarruneheal);
    createinvitem(npc, itarrunefireball);
    createinvitems(npc, itarscrollfirebolt, 12);
    createinvitems(npc, itarscrolllight, 14);
    createinvitems(npc, itarscrollheal, 16);
    createinvitems(npc, itarscrollfireball, 4);
    createinvitems(npc, itarscrollfirestorm, 2);
    createinvitems(npc, itarscrolltrfwolf, 3);
    createinvitems(npc, itarscrolltrflurker, 4);
    createinvitems(npc, itarscrolltrfscavenger, 2);
    createinvitems(npc, itarscrolltrfmolerat, 6);
    createinvitems(npc, itarscrolltrfcrawler, 3);
    createinvitems(npc, itarscrolltrfbloodfly, 3);
    createinvitem(npc, itwr_book_circle_04);
    createinvitem(npc, itwr_book_circle_05);
    createinvitem(npc, itwr_book_circle_06);
    createinvitems(npc, itfo_potion_mana_01, 12);
    createinvitems(npc, itfo_potion_mana_02, 8);
    createinvitems(npc, itfo_potion_health_01, 16);
    createinvitems(npc, itfo_potion_health_02, 10);
    createinvitems(npc, itfo_potion_water_01, 20);
    createinvitems(npc, itfo_potion_haste_01, 6);
};

func void b_give_torrezchapter3runes() {
    var c_npc npc;

    npc = hlp_getnpc(kdf_405_torrez);
    createinvitem(npc, itarrunefirestorm);
    createinvitems(npc, itarscrollfirebolt, 16);
    createinvitems(npc, itarscrolllight, 12);
    createinvitems(npc, itarscrollheal, 16);
    createinvitems(npc, itarscrollfireball, 4);
    createinvitems(npc, itarscrollfirestorm, 3);
    createinvitems(npc, itarscrolltrfwolf, 3);
    createinvitems(npc, itarscrolltrflurker, 4);
    createinvitems(npc, itarscrolltrfscavenger, 2);
    createinvitems(npc, itarscrolltrfmolerat, 6);
    createinvitems(npc, itarscrolltrfcrawler, 3);
    createinvitems(npc, itarscrolltrfbloodfly, 3);
    createinvitems(npc, itarscrolltrfmeatbug, 2);
    createinvitems(npc, itarscrolltrfwaran, 4);
    createinvitems(npc, itarscrollfirerain, 2);
    createinvitems(npc, itfo_potion_mana_01, 24);
    createinvitems(npc, itfo_potion_mana_02, 16);
    createinvitems(npc, itfo_potion_mana_03, 10);
    createinvitems(npc, itfo_potion_health_01, 32);
    createinvitems(npc, itfo_potion_health_02, 20);
    createinvitems(npc, itfo_potion_health_03, 12);
    createinvitems(npc, itfo_potion_haste_01, 12);
    createinvitems(npc, itfo_potion_haste_02, 6);
};

func void b_give_wolfchapter1weapons() {
    var c_npc npc;

    npc = hlp_getnpc(org_855_wolf);
    createinvitem(npc, itrw_bow_small_02);
    createinvitem(npc, itrw_bow_small_01);
    createinvitems(npc, itamarrow, 200);
    createinvitems(npc, itambolt, 200);
    createinvitems(npc, itminugget, 200);
    createinvitem(npc, itwr_bloodfly_01);
};

func void b_give_wolfchapter2weapons() {
    var c_npc npc;

    npc = hlp_getnpc(org_855_wolf);
    createinvitem(npc, itrw_bow_small_03);
    createinvitem(npc, itrw_bow_small_04);
    createinvitem(npc, itrw_bow_small_05);
    createinvitem(npc, itrw_bow_long_01);
    createinvitems(npc, itamarrow, 400);
    createinvitems(npc, itambolt, 400);
    createinvitems(npc, itminugget, 400);
};

func void b_give_wolfchapter3weapons() {
    var c_npc npc;

    npc = hlp_getnpc(org_855_wolf);
    createinvitem(npc, itrw_bow_long_02);
    createinvitem(npc, itrw_bow_long_03);
    createinvitem(npc, itrw_bow_long_04);
    createinvitem(npc, itrw_bow_long_05);
    createinvitems(npc, itamarrow, 600);
    createinvitems(npc, itambolt, 600);
    createinvitems(npc, itminugget, 600);
};

func void b_give_wolfchapter4weapons() {
    var c_npc npc;

    npc = hlp_getnpc(org_855_wolf);
    createinvitems(npc, itminugget, 800);
    createinvitem(npc, itrw_bow_long_06);
    createinvitem(npc, itrw_bow_long_07);
    createinvitems(npc, itamarrow, 800);
    createinvitems(npc, itambolt, 800);
    createinvitem(npc, itrw_bow_long_08);
    createinvitem(npc, itrw_crossbow_01);
    createinvitem(npc, itrw_crossbow_02);
    createinvitem(npc, itrw_crossbow_03);
};

func void b_give_wolfchapter5weapons() {
    var c_npc npc;

    npc = hlp_getnpc(org_855_wolf);
    createinvitems(npc, itminugget, 1000);
    createinvitem(npc, itrw_bow_long_09);
    createinvitem(npc, itrw_bow_war_01);
    createinvitem(npc, itrw_bow_war_02);
    createinvitems(npc, itamarrow, 800);
    createinvitems(npc, itambolt, 800);
    createinvitem(npc, itrw_bow_war_03);
    createinvitems(npc, itrw_crossbow_04, 2);
};

func void b_give_wolfchapter6weapons() {
    var c_npc npc;

    npc = hlp_getnpc(org_855_wolf);
    createinvitems(npc, itminugget, 1200);
    createinvitem(npc, itrw_bow_war_04);
    createinvitem(npc, itrw_bow_war_05);
    createinvitems(npc, itamarrow, 800);
    createinvitems(npc, itambolt, 800);
};

func void b_give_xardaschapter4runes() {
    var c_npc npc;

    npc = hlp_getnpc(kdf_404_xardas);
    createinvitem(npc, itarrunedestroyundead);
    createinvitems(npc, itarscrollsummonskeletons, 8);
    createinvitems(npc, itarscrollsummongolem, 4);
    createinvitems(npc, itarscrollshrink, 2);
};

func void b_give_xardaschapter5runes() {
    var c_npc npc;

    npc = hlp_getnpc(kdf_404_xardas);
    createinvitem(npc, itarrunefirerain);
    createinvitems(npc, itarscrollsummondemon, 4);
    createinvitems(npc, itarscrollsummonskeletons, 8);
    createinvitems(npc, itarscrollsummongolem, 4);
};

func void b_give_xardaschapter6runes() {
    var c_npc npc;

    npc = hlp_getnpc(kdf_404_xardas);
    createinvitems(npc, itarscrollsummondemon, 4);
    createinvitems(npc, itarscrollsummonskeletons, 8);
    createinvitems(npc, itarscrollsummongolem, 4);
    createinvitems(npc, itarscrollarmyofdarkness, 8);
    createinvitem(npc, amulett_der_macht);
    createinvitem(npc, amulett_der_erleuchtung);
};

const int lp_per_level = 10;

const int hp_per_level = 12;

const int xp_per_level_unconscious = 5;

const int xp_per_level_dead = 10;

func void b_givexp(var int add_xp) {
    var string msg;

    printdebugnpc(pd_zs_frame, "B_GiveXP");
    if (hero.level == 0) {
        hero.exp_next = 500;
    };
    hero.exp = hero.exp + add_xp;
    msg = name_xpgained;
    msg = concatstrings(msg, inttostring(add_xp));
    printscreen(msg, -1, _ypos_message_xpgained, font_old_10, _time_message_xpgained);
    if (hero.exp >= hero.exp_next) {
        hero.level = hero.level + 1;
        hero.exp_next = hero.exp_next + ((hero.level + 1) * 500);
        hero.attribute[atr_hitpoints_max] /*1*/ = hero.attribute[atr_hitpoints_max] /*1*/ + hp_per_level;
        hero.attribute[atr_hitpoints] /*0*/ = hero.attribute[atr_hitpoints] /*0*/ + hp_per_level;
        hero.lp = hero.lp + lp_per_level;
        printscreen(name_levelup, -1, _ypos_message_levelup, font_old_20, _time_message_levelup);
        snd_play("LevelUp");
    };
};

func void b_deathxp() {
    printdebugnpc(pd_zs_frame, "B_DeathXP");
    printglobals(pd_zs_check);
    if (c_npcishuman(self) && (npc_wasinstate(self, zs_unconscious) || self.aivar[19])) {
        printdebugnpc(pd_zs_check, "...Opfer ist bewu*tloser Mensch!");
    }
    else {
        printdebugnpc(pd_zs_check, "...Opfer ist entweder nicht bewu*tlos oder kein Mensch!");
        b_givexp(self.level * xp_per_level_dead);
    };
};

func void b_unconciousxp() {
    printdebugnpc(pd_zs_frame, "B_UnconciousXP");
    printglobals(pd_zs_check);
    if ((!c_npcishuman(self)) || (!self.aivar[19])) {
        printdebugnpc(pd_zs_check, "...erster Sieg!");
        b_givexp(self.level * xp_per_level_dead);
    };
};

func void b_magichurtnpc(var c_npc attacker, var int damage) {
    var int effectivedamage;

    printdebugnpc(pd_zs_frame, "B_MagicHurtNpc");
    effectivedamage = damage[dam_index_barrier] /*0*/ - self.protection[prot_magic] /*5*/;
    if (effectivedamage < 0) {
        effectivedamage = 0;
    };
    npc_changeattribute(self, atr_hitpoints, -effectivedamage);
    if (npc_isdead(self)) {
        if ((npc_isplayer(attacker) || (c_npcishuman(attacker) && attacker.aivar[36])) || (c_npcismonster(attacker) && attacker.aivar[23])) {
            b_deathxp();
        };
    };
};

func void b_insertinextremo() {
    wld_insertnpc(inextremo_drpymonte /*7494*/, "OCR_IE_PYMONTE");
    wld_insertnpc(inextremo_theflail /*7497*/, "OCR_IE_FLAIL");
    wld_insertnpc(inextremo_thomastheforger /*7500*/, "OCR_IE_THOMAS");
    wld_insertnpc(inextremo_unicorn /*7503*/, "OCR_IE_UNICORN");
    wld_insertnpc(inextremo_yellowpfeiffer /*7506*/, "OCR_IE_PFEIFFER");
    wld_insertnpc(inextremo_lutter /*7509*/, "OCR_IE_LUTTER");
    wld_insertnpc(inextremo_flex /*7512*/, "OCR_IE_FLEX");
    wld_insertnpc(ie_397_announcer /*7515*/, "OCR_AUDIENCE_02");
    wld_insertnpc(charlotte /*7519*/, "OCR_AUDIENCE_03");
    wld_insertnpc(iefan1 /*7523*/, "OCR_CROWD_01");
    wld_insertnpc(iefan2 /*7526*/, "OCR_CROWD_02");
    wld_insertnpc(iefan3 /*7529*/, "OCR_CROWD_03");
    wld_insertnpc(iefan4 /*7532*/, "OCR_CROWD_04");
    inextremoonstage = true;
};

func void b_killinextremo() {
    b_exchangeroutine(inextremo_drpymonte /*7494*/, "off");
    b_exchangeroutine(inextremo_theflail /*7497*/, "off");
    b_exchangeroutine(inextremo_thomastheforger /*7500*/, "off");
    b_exchangeroutine(inextremo_unicorn /*7503*/, "off");
    b_exchangeroutine(inextremo_yellowpfeiffer /*7506*/, "off");
    b_exchangeroutine(inextremo_lutter /*7509*/, "off");
    b_exchangeroutine(inextremo_flex /*7512*/, "off");
    b_exchangeroutine(ie_397_announcer /*7515*/, "off");
    b_exchangeroutine(charlotte /*7519*/, "off");
    b_exchangeroutine(iefan1 /*7523*/, "off");
    b_exchangeroutine(iefan2 /*7526*/, "off");
    b_exchangeroutine(iefan3 /*7529*/, "off");
    b_exchangeroutine(iefan4 /*7532*/, "off");
    b_exchangeroutine(vlk_580_grim /*8515*/, "start");
};

func void b_inextremostartmusic() {
    wld_sendtrigger("INEXTREMO_IE");
    wld_sendtrigger("INEXTREMO_MUSIK");
};

func void b_inextremostopmusic() {
    wld_senduntrigger("INEXTREMO_MUSIK");
    wld_senduntrigger("INEXTREMO_IE");
};

func void b_raiseattribute(var int attribute, var int value) {
    var string msg;

    printdebugnpc(pd_zs_frame, "B_RaiseAttribute");
    npc_changeattribute(self, attribute[atr_hitpoints] /*0*/, value);
    if (attribute[atr_hitpoints] /*0*/ == atr_strength) {
        msg = concatstrings(name_raisestrength, inttostring(value));
    }
    else if (attribute[atr_hitpoints] /*0*/ == atr_dexterity) {
        msg = concatstrings(name_raisedexterity, inttostring(value));
    }
    else if (attribute[atr_hitpoints] /*0*/ == atr_mana_max) {
        msg = concatstrings(name_raisemanamax, inttostring(value));
    }
    else {
        if (attribute[atr_hitpoints] /*0*/ == atr_hitpoints_max) {
            msg = concatstrings(name_raisehealthmax, inttostring(value));
        };
    };
    printscreen(msg, -1, -1, font_old_20, _time_message_raiseattribute);
};

func void b_story_accesstoxardas() {
    createinvitem(hero, itarruneteleport3);
    b_logentry(ch4_findxardas, ch4_findxardas_1);
    b_givexp(xp_deliveredgolemhearts);
    findgolemhearts = 4;
};

func void b_story_backfromorcgraveyard() {
    b_logentry(ch3_orcgraveyard, ch3_orcgraveyard_1);
    log_settopicstatus(ch3_orcgraveyard, log_success);
};

func void b_story_bringfirstfocus() {
    var c_npc nyras;

    createinvitem(self, itwrfocusmappsi);
    b_giveinvitems(self, hero, itwrfocusmappsi /*4679*/, 1);
    nyras = hlp_getnpc(nov_1303_nyras);
    npc_exchangeroutine(nyras, "PrepareRitual");
    ai_continueroutine(nyras);
    nyras.flags = 0;
    createinvitem(nyras, focus_1);
    yberion_bringfocus = log_running;
};

func void b_story_bringfoci() {
    var c_npc gorn;
    var c_npc lester;
    var c_npc lestermonster;
    var c_npc milten;
    var c_npc diego;
    var c_npc diegomonster;
    var c_npc sld723;
    var c_npc sld732;

    createinvitems(self, itwrfocimap, 2);
    b_giveinvitems(self, hero, itwrfocimap /*4698*/, 2);
    npc_removeinvitem(hero, itwrfocimap /*4698*/);
    createinvitem(hero, itarscrollteleport2);
    gorn = hlp_getnpc(pc_fighter);
    npc_exchangeroutine(gorn, "RuinWait");
    ai_continueroutine(gorn);
    lester = hlp_getnpc(pc_psionic);
    npc_exchangeroutine(lester, "FORTRESSWAIT");
    ai_continueroutine(lester);
    lestermonster = hlp_getnpc(bridgegolem);
    if (npc_isdead(lestermonster)) {
        wld_insertnpc(bridgegolem /*6760*/, "PATH_TO_PLATEAU04_BRIDGE2");
    };
    milten = hlp_getnpc(pc_mage);
    npc_exchangeroutine(milten, "SHWait");
    ai_continueroutine(milten);
    diego = hlp_getnpc(pc_thief);
    npc_exchangeroutine(diego, "TROLLWAIT");
    ai_continueroutine(diego);
    diegomonster = hlp_getnpc(troll);
    if (npc_isdead(diegomonster)) {
        wld_insertnpc(troll /*6848*/, "LOCATION_12_14");
    };
    sld723 = hlp_getnpc(sld_723_soeldner);
    sld723.aivar[29] = true;
    sld732 = hlp_getnpc(sld_732_soeldner);
    sld732.aivar[29] = true;
    b_logentry(ch3_escapeplannc, ch3_escapeplannc_1);
    log_settopicstatus(ch3_escapeplannc, log_success);
    log_createtopic(ch3_bringfoci, log_mission);
    log_settopicstatus(ch3_bringfoci, log_running);
    b_logentry(ch3_bringfoci, ch3_bringfoci_1);
    b_logentry(ch3_bringfoci, ch3_bringfoci_2);
    b_logentry(ch3_bringfoci, ch3_bringfoci_3);
    saturas_bringfoci = 1;
};

func void b_story_broughtfoci() {
    log_settopicstatus(ch3_bringfoci, log_success);
};

func void b_story_cancelfindxardas() {
    b_logentry(ch4_findxardas, ch4_findxardas_2);
    log_settopicstatus(ch4_findxardas, log_failed);
};

func void b_story_cordspost() {
    var c_npc gorn;

    gorn = hlp_getnpc(pc_fighter);
    npc_exchangeroutine(gorn, "GuardNC");
    b_exchangeroutine(sld_709_cord /*8066*/, "FMTaken");
    b_exchangeroutine(sld_735_soeldner /*8096*/, "FMTaken");
    b_exchangeroutine(sld_736_soeldner /*8099*/, "FMTaken");
};

func void b_story_curedorc() {
    var c_npc tarrok;

    b_logentry(ch4_ulumulu, ch4_ulumulu_1);
    b_givexp(xp_curedorcslave);
    tarrok = hlp_getnpc(freemineorc);
    tarrok.name = name_curedorc;
    freemineorc_suchepotion = log_success;
    freemineorc_lookingulumulu = log_running;
    knows_getulumulu = true;
};

func void b_story_encounteredhighpriest() {
    wld_insertnpc(skeletonwarrior /*6828*/, "TPL_017");
    wld_insertnpc(skeletonwarrior /*6828*/, "TPL_022");
    wld_insertnpc(skeletonmage /*6829*/, "TPL_022");
    wld_insertnpc(skeletonwarrior /*6828*/, "TPL_037");
    wld_insertnpc(skeletonmage /*6829*/, "TPL_039");
    wld_insertnpc(undeadowh /*6856*/, "TPL_017");
    wld_insertnpc(undeadowh /*6856*/, "TPL_020");
    wld_insertnpc(undeadowh /*6856*/, "TPL_030");
    wld_insertnpc(undeadowh /*6856*/, "TPL_051");
    wld_insertnpc(undeadowh /*6856*/, "TPL_120");
    wld_insertnpc(undeadowh /*6856*/, "TPL_115");
    wld_insertnpc(undeadowh /*6856*/, "TPL_083");
    wld_insertnpc(undeadowh /*6856*/, "TPL_156");
    wld_insertnpc(undeadowh /*6856*/, "TPL_162");
    wld_insertnpc(undeadowh /*6856*/, "TPL_191");
    wld_insertnpc(undeadowh /*6856*/, "TPL_164");
    wld_insertnpc(undeadowh /*6856*/, "TPL_171");
    wld_insertnpc(undeadowh /*6856*/, "TPL_183");
    wld_insertnpc(otminecrawler /*6780*/, "TPL_068");
    wld_insertnpc(otminecrawler /*6780*/, "TPL_069");
    wld_insertnpc(otminecrawler /*6780*/, "TPL_070");
    wld_insertnpc(otminecrawler /*6780*/, "TPL_076");
    wld_insertnpc(otminecrawler /*6780*/, "TPL_107");
    wld_insertnpc(otminecrawler /*6780*/, "TPL_106");
    wld_insertnpc(otminecrawler /*6780*/, "TPL_398");
    wld_insertnpc(undeadowh /*6856*/, "TPL_045");
    wld_insertnpc(undeadowh /*6856*/, "TPL_023");
    wld_insertnpc(undeadowh /*6856*/, "TPL_031");
    wld_insertnpc(otdemon /*6740*/, "TPL_267");
    encounteredhighpriest = true;
};

func void b_story_enteredtemple() {
    b_logentry(ch4_entertemple, ch4_entertemple_1);
    enteredtemple = true;
};

func void b_story_exploresunkentower() {
    var c_npc bartholo;
    var c_npc skip;
    var c_npc bullit;
    var c_npc stone;
    var c_npc gomez;
    var c_npc scorpio;
    var c_npc cutter;
    var c_npc grd_220;
    var c_npc grd_221;
    var c_npc grd_222;
    var c_npc grd_223;
    var c_npc grd_239;
    var c_npc grd_245;
    var c_npc raven;
    var c_npc scar;
    var c_npc arto;
    var c_npc thorus;

    createinvitem(hero, itke_sunkentower);
    b_logentry(ch5_uriziel, ch5_uriziel_1);
    bartholo = hlp_getnpc(ebr_106_bartholo);
    skip = hlp_getnpc(grd_211_skip);
    bullit = hlp_getnpc(grd_203_bullit);
    stone = hlp_getnpc(grd_219_stone);
    gomez = hlp_getnpc(ebr_100_gomez);
    scorpio = hlp_getnpc(grd_205_scorpio);
    cutter = hlp_getnpc(grd_208_cutter);
    grd_220 = hlp_getnpc(grd_220_gardist);
    grd_221 = hlp_getnpc(grd_221_gardist);
    grd_222 = hlp_getnpc(grd_222_gardist);
    grd_223 = hlp_getnpc(grd_223_gardist);
    grd_239 = hlp_getnpc(grd_239_gardist);
    grd_245 = hlp_getnpc(grd_245_gardist);
    raven = hlp_getnpc(ebr_105_raven);
    scar = hlp_getnpc(ebr_101_scar);
    arto = hlp_getnpc(ebr_102_arto);
    thorus = hlp_getnpc(grd_200_thorus);
    npc_exchangeroutine(gomez, "OT");
    npc_exchangeroutine(bartholo, "OT");
    npc_exchangeroutine(arto, "OT");
    npc_exchangeroutine(scar, "OT");
    npc_exchangeroutine(raven, "OT");
    npc_exchangeroutine(bullit, "OT");
    npc_exchangeroutine(scorpio, "OT");
    npc_exchangeroutine(cutter, "OT");
    npc_exchangeroutine(skip, "OT");
    npc_exchangeroutine(stone, "OT");
    npc_exchangeroutine(grd_220, "OT");
    npc_exchangeroutine(grd_221, "OT");
    npc_exchangeroutine(grd_222, "OT");
    npc_exchangeroutine(grd_223, "OT");
    npc_exchangeroutine(grd_239, "OT");
    npc_exchangeroutine(grd_245, "OT");
    stone.guild = gil_none;
    npc_settrueguild(stone, gil_none);
    bullit.guild = gil_none;
    npc_settrueguild(bullit, gil_none);
    bartholo.guild = gil_none;
    npc_settrueguild(bartholo, gil_none);
    gomez.guild = gil_none;
    npc_settrueguild(gomez, gil_none);
    grd_220.guild = gil_none;
    npc_settrueguild(grd_220, gil_none);
    grd_221.guild = gil_none;
    npc_settrueguild(grd_221, gil_none);
    npc_setpermattitude(stone, att_neutral);
    npc_settempattitude(stone, att_neutral);
    npc_setpermattitude(bullit, att_neutral);
    npc_settempattitude(bullit, att_neutral);
    npc_setpermattitude(bartholo, att_neutral);
    npc_settempattitude(bartholo, att_neutral);
    npc_setpermattitude(gomez, att_neutral);
    npc_settempattitude(gomez, att_neutral);
    npc_setpermattitude(grd_220, att_neutral);
    npc_settempattitude(grd_220, att_neutral);
    npc_setpermattitude(grd_221, att_neutral);
    npc_settempattitude(grd_221, att_neutral);
    thorus.flags = 0;
    gomez.flags = 0;
    bartholo.flags = 0;
    createinvitem(gomez, dungeonkey);
    createinvitem(bartholo, itke_storage_01);
    createinvitem(skip, itke_ob_smith_01);
    exploresunkentower = true;
};

func void b_story_feueraufnahme() {
    var c_npc magier_1;
    var c_npc magier_2;
    var c_npc magier_3;
    var c_npc magier_4;

    if (corristo_kdfaufnahme == 4) {
        npc_exchangeroutine(self, "KDFRITUAL");
        magier_1 = hlp_getnpc(kdf_400_rodriguez);
        ai_teleport(magier_1, "OCC_CHAPEL_MAGE_01");
        npc_exchangeroutine(magier_1, "KDFRITUAL");
        ai_continueroutine(magier_1);
        magier_2 = hlp_getnpc(kdf_401_damarok);
        ai_teleport(magier_2, "OCC_CHAPEL_MAGE_04");
        npc_exchangeroutine(magier_2, "KDFRITUAL");
        ai_continueroutine(magier_2);
        magier_3 = hlp_getnpc(kdf_403_drago);
        ai_teleport(magier_3, "OCC_CHAPEL_MAGE_03");
        npc_exchangeroutine(magier_3, "KDFRITUAL");
        ai_continueroutine(magier_3);
        magier_4 = hlp_getnpc(kdf_405_torrez);
        ai_teleport(magier_4, "OCC_CHAPEL_MAGE_02");
        npc_exchangeroutine(magier_4, "KDFRITUAL");
        ai_continueroutine(magier_4);
    }
    else if (corristo_kdfaufnahme == 5) {
        magier_1 = hlp_getnpc(kdf_400_rodriguez);
        ai_aligntowp(magier_1);
        magier_2 = hlp_getnpc(kdf_401_damarok);
        ai_aligntowp(magier_2);
        magier_3 = hlp_getnpc(kdf_403_drago);
        ai_aligntowp(magier_3);
        magier_4 = hlp_getnpc(kdf_405_torrez);
        ai_aligntowp(magier_4);
    }
    else {
        if (corristo_kdfaufnahme == 6) {
            npc_exchangeroutine(self, "START");
            magier_1 = hlp_getnpc(kdf_400_rodriguez);
            npc_exchangeroutine(magier_1, "START");
            ai_continueroutine(magier_1);
            magier_2 = hlp_getnpc(kdf_401_damarok);
            npc_exchangeroutine(magier_2, "START");
            magier_3 = hlp_getnpc(kdf_403_drago);
            npc_exchangeroutine(magier_3, "START");
            ai_continueroutine(magier_3);
            magier_4 = hlp_getnpc(kdf_405_torrez);
            npc_exchangeroutine(magier_4, "START");
            ai_continueroutine(magier_4);
        };
    };
};

func void b_story_findorcshaman() {
    b_logentry(ch4_findxardas, ch4_findxardas_3);
    log_createtopic(ch4_findorcshaman, log_mission);
    log_settopicstatus(ch4_findorcshaman, log_running);
    b_logentry(ch4_findorcshaman, ch4_findorcshaman_1);
    wld_insertnpc(orc_2200_shaman /*7786*/, "CASTLE_06");
    wld_insertnpc(orcwarrior4 /*6809*/, "CASTLE_07");
    wld_insertnpc(orcwarrior4 /*6809*/, "CASTLE_07");
    wld_insertnpc(orcwarrior4 /*6809*/, "CASTLE_07");
    wld_insertnpc(stonegolem /*6755*/, "CASTLE_04");
    findorcshaman = log_running;
};

func void b_story_findxardas() {
    log_createtopic(ch4_findxardas, log_mission);
    log_settopicstatus(ch4_findxardas, log_running);
    b_logentry(ch4_findxardas, ch4_findxardas_4);
    b_logentry(ch4_findxardas, ch4_findxardas_5);
    wld_insertnpc(xardasdemon /*6739*/, "DT_E1_06");
    findxardas = true;
};

func void b_story_fmtaken() {
    var c_npc fighter;

    fighter = hlp_getnpc(pc_fighter);
    npc_exchangeroutine(fighter, "NCREPORT");
    b_killnpc(sld_750_soeldner /*8106*/);
    b_killnpc(sld_751_soeldner /*8108*/);
    b_killnpc(sld_752_okyl /*8110*/);
    b_killnpc(sld_753_baloro /*8112*/);
    b_killnpc(sld_755_soeldner /*8114*/);
    b_killnpc(sld_756_soeldner /*8116*/);
    b_killnpc(sld_757_soeldner /*8118*/);
    b_killnpc(sld_758_soeldner /*8120*/);
    b_killnpc(sld_759_soeldner /*8122*/);
    b_killnpc(sld_760_soeldner /*8124*/);
    b_killnpc(sld_761_soeldner /*8126*/);
    b_killnpc(sld_762_soeldner /*8128*/);
    b_killnpc(sld_763_soeldner /*8130*/);
    b_killnpc(sld_764_soeldner /*8132*/);
    b_killnpc(sld_765_soeldner /*8134*/);
    b_killnpc(sfb_1030_schuerfer /*8016*/);
    b_killnpc(sfb_1031_schuerfer /*8018*/);
    b_killnpc(sfb_1032_schuerfer /*8020*/);
    b_killnpc(sfb_1033_schuerfer /*8022*/);
    b_killnpc(sfb_1034_schuerfer /*8024*/);
    b_killnpc(sfb_1035_schuerfer /*8026*/);
    b_killnpc(sfb_1036_schuerfer /*8028*/);
    b_killnpc(sfb_1037_swiney /*8030*/);
    b_killnpc(sfb_1038_schuerfer /*8032*/);
    b_killnpc(sfb_1039_schuerfer /*8034*/);
    b_killnpc(sfb_1040_schuerfer /*8036*/);
    b_killnpc(sfb_1041_schuerfer /*8038*/);
    b_killnpc(sfb_1042_schuerfer /*8040*/);
    b_killnpc(sfb_1043_schuerfer /*8042*/);
    b_killnpc(sfb_1044_schuerfer /*8044*/);
    b_killnpc(org_890_organisator /*7943*/);
    b_killnpc(org_891_organisator /*7945*/);
    b_killnpc(org_892_organisator /*7947*/);
    wld_insertnpc(grd_283_gardist /*7412*/, "FMC_ENTRANCE");
    wld_insertnpc(grd_285_gardist /*7417*/, "FMC_ENTRANCE");
    b_exchangeroutine(grd_201_jackal /*7198*/, "FMTaken");
    b_exchangeroutine(grd_250_gardist /*7341*/, "FMTaken");
    wld_sendtrigger("EVT_AM_LOB_GATE_BIG");
    wld_setobjectroutine(0, 0, "EVT_AM_LOB_GATE_BIG", 1);
    wld_setobjectroutine(1, 0, "EVT_AM_LOB_GATE_BIG", 1);
    wld_setobjectroutine(2, 0, "EVT_AM_LOB_GATE_BIG", 1);
    wld_setobjectroutine(3, 0, "EVT_AM_LOB_GATE_BIG", 1);
    wld_setobjectroutine(4, 0, "EVT_AM_LOB_GATE_BIG", 1);
    wld_setobjectroutine(5, 0, "EVT_AM_LOB_GATE_BIG", 1);
    wld_setobjectroutine(6, 0, "EVT_AM_LOB_GATE_BIG", 1);
    wld_setobjectroutine(7, 0, "EVT_AM_LOB_GATE_BIG", 1);
    wld_setobjectroutine(8, 0, "EVT_AM_LOB_GATE_BIG", 1);
    wld_setobjectroutine(9, 0, "EVT_AM_LOB_GATE_BIG", 1);
    wld_setobjectroutine(10, 0, "EVT_AM_LOB_GATE_BIG", 1);
    wld_setobjectroutine(11, 0, "EVT_AM_LOB_GATE_BIG", 1);
    wld_setobjectroutine(12, 0, "EVT_AM_LOB_GATE_BIG", 1);
    wld_setobjectroutine(13, 0, "EVT_AM_LOB_GATE_BIG", 1);
    wld_setobjectroutine(14, 0, "EVT_AM_LOB_GATE_BIG", 1);
    wld_setobjectroutine(15, 0, "EVT_AM_LOB_GATE_BIG", 1);
    wld_setobjectroutine(16, 0, "EVT_AM_LOB_GATE_BIG", 1);
    wld_setobjectroutine(17, 0, "EVT_AM_LOB_GATE_BIG", 1);
    wld_setobjectroutine(18, 0, "EVT_AM_LOB_GATE_BIG", 1);
    wld_setobjectroutine(19, 0, "EVT_AM_LOB_GATE_BIG", 1);
    wld_setobjectroutine(20, 0, "EVT_AM_LOB_GATE_BIG", 1);
    wld_setobjectroutine(21, 0, "EVT_AM_LOB_GATE_BIG", 1);
    wld_setobjectroutine(22, 0, "EVT_AM_LOB_GATE_BIG", 1);
    wld_setobjectroutine(23, 0, "EVT_AM_LOB_GATE_BIG", 1);
    if (npc_knowsinfo(hero, info_milten_ocwarn /*11618*/)) {
        b_logentry(ch4_firemages, ch4_firemages_1);
    }
    else {
        b_logentry(ch4_firemages, ch4_firemages_2);
    };
    b_logentry(ch4_firemages, ch4_firemages_3);
    b_logentry(ch4_firemages, ch4_firemages_4);
    if (scorpio_exile == false) {
        log_createtopic(ge_traderow, log_note);
        b_logentry(ge_traderow, ge_traderow_scorpio);
        scorpio_exile = true;
    };
    fmtaken = true;
};

func void b_story_foundorcslave() {
    b_logentry(ch4_ulumulu, ch4_ulumulu_2);
    b_givexp(xp_foundorcslave);
    freemineorc_suchepotion = log_running;
};

func void b_story_founduriziel() {
    createinvitem(hero, weltenspalter);
    createinvitem(hero, lichtbringer);
    createinvitem(hero, zeitenklinge);
    createinvitem(hero, daemonenstreich);
    createinvitem(hero, mythrilklinge);
};

func void b_story_foundurshak() {
    var c_npc riordian;

    b_logentry(ch4_findorcshaman, ch4_findorcshaman_2);
    log_createtopic(ch4_ulumulu, log_mission);
    log_settopicstatus(ch4_ulumulu, log_running);
    b_logentry(ch4_ulumulu, ch4_ulumulu_3);
    b_givexp(xp_foundorcshaman);
    riordian = hlp_getnpc(kdw_605_riordian);
    npc_exchangeroutine(riordian, "FoundUrShak");
    urshak_spokeofulumulu = true;
};

func void b_story_friendofurshak() {
    var c_npc urshak;

    createinvitem(hero, itmi_orctalisman);
    urshak = hlp_getnpc(orc_2200_shaman);
    urshak.name = name_orcshaman;
    friendofurshak = true;
};

func void b_story_gornjoins() {
    var c_npc gorn;

    createinvitem(hero, itke_freemine);
    wld_insertnpc(razor /*6812*/, "OW_PATH_3001_MOVE");
    wld_insertnpc(razor /*6812*/, "OW_PATH_3001_MOVE2");
    wld_insertnpc(razor /*6812*/, "OW_PATH_3001_MOVE3");
    wld_insertnpc(razor /*6812*/, "OW_PATH_3001_MOVE4");
    gorn = hlp_getnpc(pc_fighter);
    npc_exchangeroutine(gorn, "FollowToFMC");
    b_givexp(xp_gornjoins);
    b_logentry(ch4_ulumulu, ch4_ulumulu_4);
    gorn.aivar[36] = true;
    gorn_joinedforfm = true;
};

func void b_story_gotoorcgraveyard() {
    var c_npc kalom;
    var c_npc novize;
    var c_npc novize_1;
    var c_npc novize_2;
    var c_npc novize_3;
    var c_npc novize_4;
    var c_npc novize_5;
    var c_npc novize_6;
    var c_npc novize_7;
    var c_npc novize_8;
    var c_npc novize_9;
    var c_npc novize_10;
    var c_npc novize_11;
    var c_npc wache;
    var c_npc gorboba;

    log_createtopic(ch3_orcgraveyard, log_mission);
    log_settopicstatus(ch3_orcgraveyard, log_running);
    b_logentry(ch3_orcgraveyard, ch3_orcgraveyard_2);
    b_logentry(ch3_orcgraveyard, ch3_orcgraveyard_3);
    wld_insertnpc(orcbiter /*6787*/, "OW_PATH_198_ORCGRAVEYARD4");
    wld_insertnpc(orcbiter /*6787*/, "OW_PATH_198_ORCGRAVEYARD4");
    wld_insertnpc(orcbiter /*6787*/, "OW_PATH_198_ORCGRAVEYARD4");
    wld_insertnpc(orcbiter /*6787*/, "OW_PATH_198_ORCGRAVEYARD4");
    wld_insertnpc(orcscout /*6793*/, "OW_PATH_198_ORCGRAVEYARD5");
    wld_insertnpc(orcscout /*6793*/, "OW_PATH_198_ORCGRAVEYARD6");
    wld_insertnpc(orcscout /*6793*/, "OW_PATH_198_ORCGRAVEYARD7");
    wld_insertnpc(orcscout /*6793*/, "OW_PATH_198_ORCGRAVEYARD8");
    wld_insertnpc(tpl_1463_templer /*8348*/, "OW_PATH_198_ORCGRAVEYARD8");
    b_killnpc(tpl_1463_templer /*8348*/);
    kalom = hlp_getnpc(gur_1201_corkalom);
    npc_exchangeroutine(kalom, "FLEE");
    corangar_gotoogy = true;
    novize = hlp_getnpc(nov_1319_novize);
    npc_exchangeroutine(novize, "START");
    ai_continueroutine(novize);
    novize_1 = hlp_getnpc(nov_1320_novize);
    npc_exchangeroutine(novize_1, "START");
    ai_continueroutine(novize_1);
    novize_2 = hlp_getnpc(nov_1343_novize);
    npc_exchangeroutine(novize_2, "START");
    ai_continueroutine(novize_2);
    novize_3 = hlp_getnpc(nov_1344_novize);
    npc_exchangeroutine(novize_3, "START");
    ai_continueroutine(novize_3);
    novize_4 = hlp_getnpc(nov_1339_novize);
    npc_exchangeroutine(novize_4, "START");
    ai_continueroutine(novize_4);
    novize_5 = hlp_getnpc(nov_1341_novize);
    npc_exchangeroutine(novize_5, "START");
    ai_continueroutine(novize_5);
    novize_6 = hlp_getnpc(nov_1346_novize);
    npc_exchangeroutine(novize_6, "START");
    ai_continueroutine(novize_6);
    novize_7 = hlp_getnpc(nov_1347_novize);
    npc_exchangeroutine(novize_7, "START");
    ai_continueroutine(novize_7);
    novize_8 = hlp_getnpc(nov_1348_novize);
    npc_exchangeroutine(novize_8, "START");
    ai_continueroutine(novize_8);
    novize_9 = hlp_getnpc(nov_1349_novize);
    npc_exchangeroutine(novize_9, "START");
    ai_continueroutine(novize_9);
    novize_10 = hlp_getnpc(nov_1338_novize);
    npc_exchangeroutine(novize_10, "START");
    ai_continueroutine(novize_10);
    novize_11 = hlp_getnpc(nov_1337_novize);
    npc_exchangeroutine(novize_11, "START");
    ai_continueroutine(novize_11);
    wache = hlp_getnpc(tpl_1406_templer);
    npc_exchangeroutine(wache, "FLEE");
    gorboba = hlp_getnpc(tpl_1455_gorbobaow);
    npc_exchangeroutine(gorboba, "FLEE");
};

func void b_story_gotulumulu() {
    createinvitem(hero, ulumulu);
    b_logentry(ch4_ulumulu, ch4_ulumulu_5);
    log_settopicstatus(ch4_ulumulu, log_success);
    b_givexp(xp_gotulumulu);
    freemineorc_lookingulumulu = log_success;
};

func void b_story_jackalfight() {
    var c_npc jackal;

    b_exchangeroutine(grd_283_gardist /*7412*/, "FMTaken2");
    b_exchangeroutine(grd_285_gardist /*7417*/, "FMTaken2");
    jackal = hlp_getnpc(grd_201_jackal);
    npc_exchangeroutine(jackal, "FMTaken2");
    b_setpermattitude(grd_283_gardist /*7412*/, att_hostile);
    b_setpermattitude(grd_285_gardist /*7417*/, att_hostile);
    b_setpermattitude(grd_201_jackal /*7198*/, att_hostile);
};

func void b_story_leftfm() {
    var c_npc gorn;
    var c_npc urshak;

    gorn = hlp_getnpc(pc_fighter);
    npc_exchangeroutine(gorn, "WaitFM");
    gorn.aivar[36] = false;
    wld_insertnpc(firewaran /*6746*/, "OW_PATH_SCAVENGER15_SPAWN01");
    wld_insertnpc(firewaran /*6746*/, "SPAWN_OW_WARAN_DEMON_01");
    wld_insertnpc(firewaran /*6746*/, "OW_COAST_SHIPWRECK_WARAN");
    wld_insertnpc(swampshark /*6844*/, "PATH_AROUND_PSI16");
    wld_insertnpc(swampshark /*6844*/, "PATH_AROUND_PSI17");
    wld_insertnpc(swampshark /*6844*/, "PATH_AROUND_PSI18");
    wld_insertnpc(shadowbeast /*6819*/, "OW_PATH_260");
    wld_insertnpc(shadowbeast /*6819*/, "OW_PATH_033_TO_CAVE5");
    wld_insertnpc(shadowbeast /*6819*/, "SPAWN_OW_SHADOWBEAST2_PSIWOOD_02");
    wld_insertnpc(troll /*6848*/, "OW_RUIN_TROLL");
    wld_insertnpc(troll /*6848*/, "LOCATION_12_12");
    wld_insertnpc(troll /*6848*/, "OW_PATH_2_08");
    urshak = hlp_getnpc(orc_2200_shaman);
    npc_exchangeroutine(urshak, "LeftFM");
    enteredfreemine = true;
};

func void b_story_loadsword() {
    var c_npc milten;

    b_logentry(ch5_uriziel, ch5_uriziel_2);
    b_givexp(xp_returnedfromsunkentower);
    createinvitem(hero, scroll4milten);
    milten = hlp_getnpc(pc_mage);
    npc_exchangeroutine(milten, "LSWait");
    loadsword = true;
};

func void b_story_prepareritual() {
    var c_npc yberion;
    var c_npc corkalom;
    var c_npc corangar;
    var c_npc novize;
    var c_npc novize_1;
    var c_npc novize_2;
    var c_npc novize_3;
    var c_npc novize_4;
    var c_npc novize_5;
    var c_npc novize_6;
    var c_npc novize_7;
    var c_npc novize_8;
    var c_npc novize_9;
    var c_npc novize_10;
    var c_npc novize_11;
    var c_npc templer;
    var c_npc templer_1;

    corkalom_bringbook = log_success;
    yberion = hlp_getnpc(gur_1200_yberion);
    npc_exchangeroutine(yberion, "CALLSLEEPER");
    ai_continueroutine(yberion);
    corkalom = hlp_getnpc(gur_1201_corkalom);
    npc_exchangeroutine(corkalom, "CALLSLEEPER");
    corangar = hlp_getnpc(gur_1202_corangar);
    npc_exchangeroutine(corangar, "CALLSLEEPER");
    ai_continueroutine(corangar);
    novize = hlp_getnpc(nov_1319_novize);
    npc_exchangeroutine(novize, "RITUAL");
    ai_continueroutine(novize);
    novize.senses = (sense_see | sense_hear) | sense_smell;
    novize_1 = hlp_getnpc(nov_1320_novize);
    npc_exchangeroutine(novize_1, "RITUAL");
    ai_continueroutine(novize_1);
    novize_1.senses = (sense_see | sense_hear) | sense_smell;
    b_exchangeroutine(gur_1205_chani /*7464*/, "dead");
    b_exchangeroutine(gur_1207_natalia /*7467*/, "dead");
    novize_2 = hlp_getnpc(nov_1343_novize);
    npc_exchangeroutine(novize_2, "RITUAL");
    ai_continueroutine(novize_2);
    novize_3 = hlp_getnpc(nov_1344_novize);
    npc_exchangeroutine(novize_3, "RITUAL");
    ai_continueroutine(novize_3);
    novize_4 = hlp_getnpc(nov_1339_novize);
    npc_exchangeroutine(novize_4, "RITUAL");
    ai_continueroutine(novize_4);
    novize_5 = hlp_getnpc(nov_1341_novize);
    npc_exchangeroutine(novize_5, "RITUAL");
    ai_continueroutine(novize_5);
    novize_6 = hlp_getnpc(nov_1346_novize);
    npc_exchangeroutine(novize_6, "RITUAL");
    ai_continueroutine(novize_6);
    novize_7 = hlp_getnpc(nov_1347_novize);
    npc_exchangeroutine(novize_7, "RITUAL");
    ai_continueroutine(novize_7);
    novize_8 = hlp_getnpc(nov_1348_novize);
    npc_exchangeroutine(novize_8, "RITUAL");
    ai_continueroutine(novize_8);
    novize_9 = hlp_getnpc(nov_1349_novize);
    npc_exchangeroutine(novize_9, "RITUAL");
    ai_continueroutine(novize_9);
    novize_10 = hlp_getnpc(nov_1338_novize);
    npc_exchangeroutine(novize_10, "RITUAL");
    ai_continueroutine(novize_10);
    novize_11 = hlp_getnpc(nov_1337_novize);
    npc_exchangeroutine(novize_11, "RITUAL");
    ai_continueroutine(novize_11);
    templer = hlp_getnpc(tpl_1431_templer);
    templer.senses = (sense_see | sense_hear) | sense_smell;
    templer_1 = hlp_getnpc(tpl_1430_templer);
    templer_1.senses = (sense_see | sense_hear) | sense_smell;
    b_exchangeroutine(nov_1300_talas /*7581*/, "BackInCamp");
};

func int c_timeforgreatprayer() {
    if (wld_istime(20, 0, 4, 0)) {
        return true;
    };
};

func void b_story_prepareshowdown() {
};

func void b_story_respawnow() {
    wld_insertnpc(molerat /*6783*/, "OW_SAWHUT_MOLERAT_SPAWN01");
    wld_insertnpc(greengobbosword /*6750*/, "PATH_OC_NC_6");
    wld_insertnpc(greengobbosword /*6750*/, "OW_GOBBO_PLACE_SPAWN");
    wld_insertnpc(molerat /*6783*/, "OW_MOLERAT_CAVE_SPAWN");
    wld_insertnpc(scavenger /*6815*/, "OW_SCAVENGER_COAST_NEWCAMP_SPAWN");
    wld_insertnpc(bloodfly /*6729*/, "OW_BLOODFLY_NEW_COAST_SPAWN");
    wld_insertnpc(scavenger /*6815*/, "OW_SCAVENGER_AL_NL_SPAWN");
    wld_insertnpc(scavenger /*6815*/, "OW_SCAVENGER_CAVE3_SPAWN");
    wld_insertnpc(molerat /*6783*/, "OW_MOLERAT_CAVE_SPAWN");
    wld_insertnpc(snapper /*6841*/, "OW_CAVE2_SNAPPER_SPAWN");
    wld_insertnpc(scavenger /*6815*/, "OW_PATH_SCAVENGER13_SPAWN01");
    wld_insertnpc(molerat /*6783*/, "SPAWN_OW_MOLERAT_CAVE1_OC");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCA_05_01");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_OW_BLOODFLY_C3");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_OW_BLOODFLY_C3");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_06_04");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_OW_BLOODFLY_12");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_06_04");
    wld_insertnpc(molerat /*6783*/, "SPAWN_OW_SMALLCAVE01_MOLERAT");
    wld_insertnpc(molerat /*6783*/, "SPAWN_OW_MOLERAT_OCWOOD_OC2");
    wld_insertnpc(molerat /*6783*/, "SPAWN_OW_MOLERAT_OCWOOD_OLDMINE3");
    wld_insertnpc(wolf /*6862*/, "PATH_WALD_OC_WOLFSPAWN2");
    wld_insertnpc(wolf /*6862*/, "SPAWN_OW_WOLF_OC_PSI");
    wld_insertnpc(wolf /*6862*/, "SPAWN_OW_WOLF_WOOD05_02");
    wld_insertnpc(wolf /*6862*/, "OW_DEADWOOD_WOLF_SPAWN01");
    wld_insertnpc(bloodfly /*6729*/, "OW_LAKE_NC_BLOODFLY_SPAWN01");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_WALD_OC_BLOODFLY01");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_BLOODFLY_LOCATION_29_01");
    wld_insertnpc(bloodfly /*6729*/, "OW_PATH_BLOODFLY01_SPAWN01");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_OW_BLOODFLY_WOOD05_01");
    wld_insertnpc(lurker /*6766*/, "SPAWN_OW_NEARBGOBBO_LURKER_A1");
    wld_insertnpc(waran /*6859*/, "OW_PATH_WARAN06_SPAWN01");
    wld_insertnpc(waran /*6859*/, "OW_PATH_OW_PATH_WARAN05_SPAWN01");
    wld_insertnpc(blackgobbomace /*6725*/, "SPAWN_OW_BLACKGOBBO_A1");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_SCAVENGER_PATH_OC_PSI_03");
    wld_insertnpc(scavenger /*6815*/, "OW_PATH_SCAVENGER03_SPAWN01");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_OLDWOOD_C3");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SHADOWBEAST_NEAR_SHADOW4");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_OCWOOD1");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_O_SCAVENGER_05_02");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_O_SCAVENGER_OCWOODL2");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_SCAVENGERPATH_OC_PSI_14");
    wld_insertnpc(orcdog /*6790*/, "OW_PATH_WOLF04_SPAWN01");
    wld_insertnpc(bloodfly /*6729*/, "PATH_TAKE_HERB_MOVEMENT2");
    wld_insertnpc(firewaran /*6746*/, "OW_COAST_SHIPWRECK_WARAN_2");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_OW_BLOODFLYS_152");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_OW_BLOODFLY_06_01");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_OW_BLOODFLY_OC_PSI");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_OW_BLOODFLY_OC_WOOD03");
    wld_insertnpc(molerat /*6783*/, "SPAWN_OW_MOLERAT_A_6_NC4");
    wld_insertnpc(molerat /*6783*/, "PATH_WALD_OC_MOLERATSPAWN");
    wld_insertnpc(molerat /*6783*/, "SPAWN_OW_MOLERAT_06_CAVE_GUARD3");
    wld_insertnpc(molerat /*6783*/, "SPAWN_OW_MOLERAT_WOODOLDMINE2");
    wld_insertnpc(snapper /*6841*/, "SPAWN_OW_SNAPPER_WOOD05_05");
    wld_insertnpc(razor /*6812*/, "SPAWN_OW_SNAPPER_CAVE_DM");
    wld_insertnpc(wolf /*6862*/, "SPAWN_OW_WOLF2_WALD_OC2");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_INWALD_OC2");
    wld_insertnpc(molerat /*6783*/, "SPAWN_OW_MOLERAT2_WALD_OC1");
    wld_insertnpc(bloodfly /*6729*/, "OW_PATH_BLOODFLY02_SPAWN01");
    wld_insertnpc(lurker /*6766*/, "SPAWN_OW_LURKER_RIVER2");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_OCWOODEND2");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_PSIWOOD2");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_NSCAVENGER_04_PSIWOOD4");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_NEARSHAD2_PSIWOOD");
    wld_insertnpc(wolf /*6862*/, "SPAWN_OW_WOLF_PSIWOOD_5");
    wld_insertnpc(wolf /*6862*/, "SPAWN_OW_WOLF_04_PSI5");
    wld_insertnpc(wolf /*6862*/, "SPAWN_OW_NWOLF_04_PSIWOOD5");
    wld_insertnpc(wolf /*6862*/, "SPAWN_OW_WOLF_NEARSHADOW_PSIWOOD_02");
    wld_insertnpc(wolf /*6862*/, "SPAWN_OW_WOLFL__PSIWOOD_OUT4");
    wld_insertnpc(wolf /*6862*/, "SPAWN_OW_WOLF_NEARSHAD2_PSIWOOD_OUT");
    wld_insertnpc(greengobbosword /*6750*/, "SPAWN_OW_GOBBO_WATERFALLCAVE_2");
    wld_insertnpc(molerat /*6783*/, "FP_ROAM_OW_MOLERAT_04_PSI");
    wld_insertnpc(molerat /*6783*/, "SPAWN_OW_MOLERATN_PSIWOOD_1");
    wld_insertnpc(molerat /*6783*/, "SPAWN_OW_MOLERATL__PSIWOOD_01");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_NEARSHADOW_PSIWOOD_01");
    wld_insertnpc(razor /*6812*/, "SPAWN_OW_BLOCKGOBBO_CAVE_DM6");
    wld_insertnpc(blackgobbomace /*6725*/, "SPAWN_OW_BLACKGOBBO_A1");
    wld_insertnpc(orcdog /*6790*/, "SPAWN_OW_BLACKWOLF_02_01");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_LONE_WALD_OC3");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVNEGER_04_PSI3");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_NEARSHAD2_PSIWOOD3");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_OW_BLOODFLY_PSIWOOD_02");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_OW_BLOODFLYS_PSIWOOD_4");
    wld_insertnpc(wolf /*6862*/, "SPAWN_OW_WOLF2_WALD_OC3");
    wld_insertnpc(wolf /*6862*/, "SPAWN_OW_WOLFK__PSIWOOD_OUT3");
    wld_insertnpc(molerat /*6783*/, "SPAWN_OW_MOLERATT_04_PSI1");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_GOBBOCAVE_03_01");
    wld_insertnpc(snapper /*6841*/, "SPAWN_OW_SNAPPER_OCWOOD1_05_02");
    wld_insertnpc(waran /*6859*/, "SPAWN_OW_WARAN_OC_PSI_GOBBOCAVE_01");
    wld_insertnpc(blackgobbomace /*6725*/, "SPAWN_GOBBO_LOCATION_29_03");
    wld_insertnpc(blackgobbomace /*6725*/, "SPAWN_OW_GOBBO_CAVE03INDOOR_05");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_OC_PSI_RUIN1");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_04_02_1");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_AL_ORC");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_OCWALD_PSI_PATH2");
    wld_insertnpc(molerat /*6783*/, "SPAWN_OW_MOLERAT_PSI_PATH7");
    wld_insertnpc(molerat /*6783*/, "SPAWN_OW_MOLERAT_03_04");
    wld_insertnpc(waran /*6859*/, "SPAWN_OW_WARAN_OC_PSI3");
    wld_insertnpc(waran /*6859*/, "FP_ROAM_OW_WARAN_OCWALD_PSI_PATH4");
    wld_insertnpc(waran /*6859*/, "SPAWN_OW_WARAN_NC_03");
    wld_insertnpc(waran /*6859*/, "SPAWN_OW_WARAN_CAVE1_1");
    wld_insertnpc(firewaran /*6746*/, "SPAWN_OW_WARAN_DEMON_01");
    wld_insertnpc(waran /*6859*/, "SPAWN_OW_WARAN_EBENE2_02_05");
    wld_insertnpc(waran /*6859*/, "SPAWN_OW_WARAN_EBENE_02_05");
    wld_insertnpc(snapper /*6841*/, "SPAWN_OW_WARAN_01_BADITS6");
    wld_insertnpc(lurker /*6766*/, "SPAWN_OW_LURKER_RIVER2_BEACH3");
    wld_insertnpc(snapper /*6841*/, "SPAWN_OW_SCA_01_BADITS7");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_OW_BLOODFLY_01_OCWOOD1_OCW5");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_BLOODFLYPATH_OC_PSI_14");
    wld_insertnpc(razor /*6812*/, "OW_PATH_SNAPPER02_SPAWN01");
    wld_insertnpc(orcbiter /*6787*/, "SPAWN_OW_SCAVENGER_01_DEMONT5");
    wld_insertnpc(orcbiter /*6787*/, "SPAWN_OW_SCAVENGER_ORC_03");
    wld_insertnpc(orcdog /*6790*/, "FP_ROAM_OW_SNAPPER_OW_ORC");
    wld_insertnpc(orcwarrior1 /*6806*/, "OW_PATH_104");
    wld_insertnpc(orcdog /*6790*/, "OW_PATH_BLACKWOLF07_SPAWN01");
    wld_insertnpc(orcdog /*6790*/, "SPAWN_OW_BLACKWOLF_02_01");
    wld_insertnpc(orcdog /*6790*/, "OW_ORC_ORCDOG_SPAWN01");
    wld_insertnpc(orcbiter /*6787*/, "SPAWN_OW_MOLERAT_ORC_04");
    wld_insertnpc(orcbiter /*6787*/, "OW_PATH_3_07");
};

func void b_story_returnedfromurshak() {
    var c_npc riordian;

    b_logentry(ch4_findorcshaman, ch4_findorcshaman_3);
    log_settopicstatus(ch4_findorcshaman, log_success);
    log_createtopic(ch4_entertemple, log_mission);
    log_settopicstatus(ch4_entertemple, log_running);
    b_logentry(ch4_entertemple, ch4_entertemple_3);
    b_givexp(xp_returnedfromurshak);
    riordian = hlp_getnpc(kdw_605_riordian);
    npc_exchangeroutine(riordian, "FoundUrShak");
    urshak_spokeofulumulu = true;
};

func void b_story_senttonc() {
    var c_npc angar;
    var c_npc yberion;
    var c_npc gorn;

    angar = hlp_getnpc(gur_1202_corangar);
    npc_exchangeroutine(angar, "start");
    yberion = hlp_getnpc(gur_1200_yberion);
    npc_exchangeroutine(yberion, "dead");
    gorn = hlp_getnpc(pc_fighter);
    printdebugnpc(pd_mission, gorn.name);
    npc_exchangeroutine(gorn, "NCWAIT");
    ai_continueroutine(gorn);
    log_createtopic(ch3_escapeplannc, log_mission);
    log_settopicstatus(ch3_escapeplannc, log_running);
    b_logentry(ch3_escapeplannc, ch3_escapeplannc_2);
    b_logentry(ch3_escapeplannc, ch3_escapeplannc_3);
    createinvitem(self, itarruneteleport5);
    b_giveinvitems(self, hero, itarruneteleport5 /*4175*/, 1);
    corangar_sendtonc = true;
};

func void b_story_showedurizieltoxardas() {
    b_logentry(ch4_entertemple, ch4_entertemple_2);
    log_settopicstatus(ch4_entertemple, log_success);
    log_createtopic(ch5_uriziel, log_mission);
    log_settopicstatus(ch5_uriziel, log_running);
    b_logentry(ch5_uriziel, ch5_uriziel_3);
    b_givexp(xp_showurizieltoxardas);
};

func void b_story_urizielloaded() {
    b_logentry(ch5_uriziel, ch5_uriziel_4);
    if (npc_gettrueguild(hero) != gil_kdw) {
        log_settopicstatus(ch5_uriziel, log_success);
    }
    else {
        b_logentry(ch5_uriziel, ch5_uriziel_5);
    };
    b_givexp(xp_loadeduriziel);
    b_setpermattitude(kdw_600_saturas /*7557*/, att_hostile);
    b_setpermattitude(kdw_601_myxir /*7559*/, att_hostile);
    b_setpermattitude(kdw_602_merdarion /*7561*/, att_hostile);
    b_setpermattitude(kdw_603_nefarius /*7564*/, att_hostile);
    b_setpermattitude(kdw_604_cronos /*7566*/, att_hostile);
    b_setpermattitude(kdw_605_riordian /*7568*/, att_hostile);
    b_clearimmortal(kdw_600_saturas /*7557*/);
    b_clearimmortal(kdw_601_myxir /*7559*/);
    b_clearimmortal(kdw_602_merdarion /*7561*/);
    b_clearimmortal(kdw_603_nefarius /*7564*/);
    b_clearimmortal(kdw_604_cronos /*7566*/);
    b_clearimmortal(kdw_605_riordian /*7568*/);
    b_setnpctype(kdw_600_saturas /*7557*/, npctype_main);
    b_setnpctype(kdw_601_myxir /*7559*/, npctype_main);
    b_setnpctype(kdw_602_merdarion /*7561*/, npctype_main);
    b_setnpctype(kdw_603_nefarius /*7564*/, npctype_main);
    b_setnpctype(kdw_604_cronos /*7566*/, npctype_main);
    b_setnpctype(kdw_605_riordian /*7568*/, npctype_main);
};

func void b_kapitelwechsel(var int neues_kapitel) {
    var c_npc yberion;
    var c_npc templer;
    var c_npc templer_1;
    var c_npc novize;
    var c_npc novize_1;
    var c_npc lukor;

    kapitel = neues_kapitel;
    if (neues_kapitel == 1) {
        printdebugnpc(pd_mission, "---=== DAS ERSTES KAPITEL ===---");
        b_give_skipchapter2weapons();
        introducechapter(kapwechsel_1, kapwechsel_1_text, "chapter1.tga", "levelup.wav", 6000);
    }
    else if (neues_kapitel == 2) {
        printdebugnpc(pd_mission, "---=== DAS ZWEITE KAPITEL ===---");
        b_give_fiskchapter2weapons();
        b_give_darrionchapter2weapons();
        b_give_sharkychapter2weapons();
        b_give_baalcadarchapter2runes();
        b_give_torrezchapter2runes();
        b_give_cronoschapter2runes();
        b_giveriordianchapter2potions();
        b_give_cavalornchapter2weapons();
        b_give_wolfchapter2weapons();
        b_give_skipchapter2weapons();
        b_story_respawnow();
        introducechapter(kapwechsel_2, kapwechsel_2_text, "chapter2.tga", "levelup.wav", 6000);
    }
    else if (neues_kapitel == 3) {
        printdebugnpc(pd_mission, "---=== DAS DRITTE KAPITEL ===---");
        if (inextremoonstage == true) {
        };
        yberion_bringfocus = log_success;
        corkalom_bringmcqballs = log_success;
        corkalom_bringbook = log_success;
        b_give_fiskchapter3weapons();
        b_give_darrionchapter3weapons();
        b_give_sharkychapter3weapons();
        b_give_baalcadarchapter3runes();
        b_give_torrezchapter3runes();
        b_give_torrezchapter3runes();
        b_give_cronoschapter3runes();
        b_giveriordianchapter3potions();
        b_give_cavalornchapter3weapons();
        b_give_wolfchapter3weapons();
        b_give_skipchapter3weapons();
        playvideo("GREATPRAYER.BIK");
        yberion = hlp_getnpc(gur_1200_yberion);
        yberion.flags = 0;
        npc_changeattribute(yberion, atr_hitpoints, (-yberion.attribute[atr_hitpoints_max] /*1*/) + 1);
        yberion.flags = npc_flag_immortal;
        npc_exchangeroutine(yberion, "DRAINED");
        ai_continueroutine(yberion);
        templer = hlp_getnpc(tpl_1431_templer);
        templer.senses = hero.senses;
        templer_1 = hlp_getnpc(tpl_1430_templer);
        templer_1.senses = hero.senses;
        novize = hlp_getnpc(nov_1319_novize);
        novize.senses = hero.senses;
        novize_1 = hlp_getnpc(nov_1319_novize);
        novize_1.senses = hero.senses;
        lukor = hlp_getnpc(gur_1211_baallukorow);
        npc_exchangeroutine(lukor, "OGY");
        ai_teleport(lukor, "WP_INTRO01");
        introducechapter(kapwechsel_3, kapwechsel_3_text, "chapter3.tga", "levelup.wav", 6000);
    }
    else if (neues_kapitel == 4) {
        printdebugnpc(pd_mission, "---=== DAS VIERTE KAPITEL ===---");
        b_exchangeroutine(grd_205_scorpio /*7207*/, "BANNISHED");
        b_changeguild(grd_205_scorpio /*7207*/, gil_none);
        b_setpermattitude(grd_205_scorpio /*7207*/, att_neutral);
        b_changeguild(stt_336_cavalorn /*8185*/, gil_none);
        b_changeguild(grd_251_kirgo /*7344*/, gil_grd);
        b_changeguild(vlk_511_herek /*8384*/, gil_vlk);
        b_changeguild(vlk_574_mud /*8502*/, gil_vlk);
        b_give_scorpiochapter4weapons();
        b_give_darrionchapter4weapons();
        b_give_sharkychapter4weapons();
        b_give_baalcadarchapter4runes();
        b_give_xardaschapter4runes();
        b_give_cronoschapter4runes();
        b_giveriordianchapter4potions();
        b_give_cavalornchapter4weapons();
        b_give_wolfchapter4weapons();
        saturas_bringfoci = 5;
        createinvitem(hero, itarruneteleport2);
        log_createtopic(ch4_firemages, log_mission);
        log_settopicstatus(ch4_firemages, log_running);
        b_logentry(ch4_firemages, ch4_firemages_5);
        b_exchangeroutine(sld_700_lee /*8046*/, "DAMNPAST");
        b_exchangeroutine(bau_935_homer /*7152*/, "DAMNPAST");
        oldheroguild = npc_gettrueguild(hero);
        if (c_npcbelongstooldcamp(hero)) {
            npc_settrueguild(hero, gil_none);
            hero.guild = gil_none;
        };
        b_exchangeroutine(grd_228_gardist /*7274*/, "FMTaken");
        b_exchangeroutine(grd_230_gardist /*7284*/, "FMTaken");
        b_exchangeroutine(grd_280_gardist /*7404*/, "FMTaken");
        b_exchangeroutine(grd_281_gardist /*7407*/, "FMTaken");
        b_clearimmortal(grd_228_gardist /*7274*/);
        b_clearimmortal(grd_230_gardist /*7284*/);
        b_clearimmortal(grd_280_gardist /*7404*/);
        b_killnpc(kdf_400_rodriguez /*7535*/);
        b_killnpc(kdf_401_damarok /*7538*/);
        b_killnpc(kdf_402_corristo /*7541*/);
        b_killnpc(kdf_403_drago /*7545*/);
        b_killnpc(kdf_405_torrez /*7551*/);
        b_killnpc(nov_1330_baalparvez /*7658*/);
        b_killnpc(nov_1331_baaltaran /*7661*/);
        b_killnpc(tpl_1422_gorhanis /*8246*/);
        b_killnpc(sld_729_kharim /*8085*/);
        b_exchangeroutine(pc_thief /*8001*/, "OCWait");
        b_exchangeroutine(pc_mage /*7979*/, "OCWait");
        b_changeguild(pc_thief /*8001*/, gil_kdf);
        b_setpermattitude(pc_thief /*8001*/, att_friendly);
        b_setpermattitude(pc_mage /*7979*/, att_friendly);
        wld_exchangeguildattitudes("GIL_ATTITUDES_FMTAKEN");
        b_initmonsterattitudes();
        b_exchangeroutine(grd_255_fletcher /*7360*/, "FMTaken");
        b_exchangeroutine(grd_252_gardist /*7347*/, "FMTaken");
        b_exchangeroutine(grd_253_gardist /*7351*/, "FMTaken");
        b_exchangeroutine(grd_244_gardist /*7332*/, "FMTaken");
        b_exchangeroutine(grd_214_torwache /*7232*/, "FMTaken");
        b_exchangeroutine(grd_215_torwache /*7236*/, "FMTaken");
        b_exchangeroutine(grd_233_bloodwyn /*7295*/, "FMTaken");
        b_exchangeroutine(grd_232_gardist /*7291*/, "FMTaken");
        b_exchangeroutine(grd_229_gardist /*7280*/, "FMTaken");
        b_exchangeroutine(grd_216_torwache /*7240*/, "FMTaken");
        b_exchangeroutine(grd_217_torwache /*7244*/, "FMTaken");
        b_exchangeroutine(tpl_1439_gornadrak /*8279*/, "FMTaken");
        b_exchangeroutine(tpl_1440_templer /*8282*/, "FMTaken");
        introducechapter(kapwechsel_4, kapwechsel_4_text, "chapter4.tga", "levelup.wav", 6000);
    }
    else if (neues_kapitel == 5) {
        printdebugnpc(pd_mission, "---=== DAS F*NFTE KAPITEL ===---");
        b_give_scorpiochapter5weapons();
        b_give_darrionchapter5weapons();
        b_give_sharkychapter5weapons();
        b_give_xardaschapter5runes();
        b_give_cavalornchapter5weapons();
        b_give_wolfchapter5weapons();
        b_give_cronoschapter5runes();
        b_giveriordianchapter5potions();
        b_give_scorpiochapter6weapons();
        b_give_darrionchapter6weapons();
        b_give_sharkychapter6weapons();
        b_give_xardaschapter6runes();
        b_giveriordianchapter6potions();
        b_give_cavalornchapter6weapons();
        b_give_wolfchapter6weapons();
        b_logentry(ch4_entertemple, ch4_entertemple_4);
        b_story_respawnow();
        introducechapter(kapwechsel_5, kapwechsel_5_text, "chapter5.tga", "levelup.wav", 6000);
    }
    else {
        if (neues_kapitel == 6) {
            printdebugnpc(pd_mission, "---=== DAS SECHSTE KAPITEL ===---");
            b_give_xardaschapter6runes();
            playvideo("OREHEAP.BIK");
            createinvitem(hero, mythrilklinge02);
            introducechapter(kapwechsel_6, kapwechsel_6_text, "chapter6.tga", "levelup.wav", 6000);
        };
    };
};

func int c_ischapter(var int chapter) {
    if (kapitel == chapter) {
        return true;
    };
};

func void b_pointatnpc(var c_npc slf, var c_npc oth, var c_npc targ) {
    ai_waittillend(slf, oth);
    ai_pointatnpc(slf, targ);
    b_say(slf, oth, "$THEREHEIS");
    ai_stoppointat(slf);
};

instance info_findnpc_nc(c_info) {
    nr = 900;
    condition = info_findnpc_nc_condition;
    information = info_findnpc_nc_info;
    permanent = true;
    description = "Ãäå ÿ ìîãó íàéòè...";
};

func int info_findnpc_nc_condition() {
    return 1;
};

func void info_findnpc_nc_info() {
    var c_npc cronos;
    var c_npc gorn;
    var c_npc lares;
    var c_npc lee;

    info_clearchoices(info_findnpc_nc /*2784*/);
    info_addchoice(info_findnpc_nc /*2784*/, dialog_back, info_findnpc_nc_back);
    cronos = hlp_getnpc(kdw_604_cronos);
    if (cronos.aivar[7] == true) {
        info_addchoice(info_findnpc_nc /*2784*/, "...îäíîãî èç ìàãîâ?", info_findnpc_nc_mage);
    };
    gorn = hlp_getnpc(pc_fighter);
    if (gorn.aivar[7] == true) {
        info_addchoice(info_findnpc_nc /*2784*/, "...Ãîðíà?", info_findnpc_nc_gorn);
    };
    lares = hlp_getnpc(org_801_lares);
    if (lares.aivar[7] == true) {
        info_addchoice(info_findnpc_nc /*2784*/, "...Ëàðñà?", info_findnpc_nc_lares);
    };
    lee = hlp_getnpc(sld_700_lee);
    if (lee.aivar[7] == true) {
        info_addchoice(info_findnpc_nc /*2784*/, "...Ëè?", info_findnpc_nc_lee);
    };
};

func void info_findnpc_nc_back() {
    info_clearchoices(info_findnpc_nc /*2784*/);
};

func void info_findnpc_nc_gorn() {
    var c_npc gorn;

    ai_output(other, self, "Info_FindNPC_NC_Gorn_15_00"); //Ãäå ÿ ìîãó íàéòè Ãîðíà?
    gorn = hlp_getnpc(pc_fighter);
    if (npc_getdisttonpc(self, gorn) < perc_dist_intermediat) {
        b_pointatnpc(self, other, gorn);
    }
    else if (self.guild == gil_org) {
        if (self.voice == 6) {
            ai_output(self, other, "Info_FindNPC_NC_Gorn_06_01"); //Êîãäà çàéäåøü â ïåùåðó, äåðæèñü ïðàâîé ñòîðîíû. Òàì áóäåò íåñêîëüêî äîìèêîâ. Îí æèâåò â îäíîì èç íèõ.
        }
        else if (self.voice == 7) {
            ai_output(self, other, "Info_FindNPC_NC_Gorn_07_01"); //Êîãäà çàéäåøü â ïåùåðó, äåðæèñü ïðàâîé ñòîðîíû. Òàì áóäåò íåñêîëüêî äîìèêîâ. Îí æèâåò â îäíîì èç íèõ.
        }
        else {
            if (self.voice == 13) {
                ai_output(self, other, "Info_FindNPC_NC_Gorn_13_01"); //Êîãäà çàéäåøü â ïåùåðó, äåðæèñü ïðàâîé ñòîðîíû. Òàì áóäåò íåñêîëüêî äîìèêîâ. Îí æèâåò â îäíîì èç íèõ.
            };
        };
    }
    else if (self.guild == gil_sld) {
        if (self.voice == 8) {
            ai_output(self, other, "Info_FindNPC_NC_Gorn_08_01"); //Êîãäà çàéäåøü â ïåùåðó, äåðæèñü ïðàâîé ñòîðîíû. Òàì áóäåò íåñêîëüêî äîìèêîâ. Îí æèâåò â îäíîì èç íèõ.
        }
        else {
            if (self.voice == 11) {
                ai_output(self, other, "Info_FindNPC_NC_Gorn_11_01"); //Êîãäà çàéäåøü â ïåùåðó, äåðæèñü ïðàâîé ñòîðîíû. Òàì áóäåò íåñêîëüêî äîìèêîâ. Îí æèâåò â îäíîì èç íèõ.
            };
        };
    };
    info_clearchoices(info_findnpc_nc /*2784*/);
};

func void info_findnpc_nc_lares() {
    var c_npc lares;

    ai_output(other, self, "Info_FindNPC_NC_Lares_15_00"); //Ãäå ÿ ìîãó íàéòè Ëàðñà?
    lares = hlp_getnpc(org_801_lares);
    if (npc_getdisttonpc(self, lares) < perc_dist_intermediat) {
        b_pointatnpc(self, other, lares);
    }
    else if (self.guild == gil_org) {
        if (self.voice == 6) {
            ai_output(self, other, "Info_FindNPC_NC_Lares_06_01"); //Ñ ëåâîé ñòîðîíû áîëüøîé ïåùåðû, â äàëüíåì êîíöå. Òû íå ïðîìàõíåøüñÿ. Êàê òîëüêî òåáÿ îñòàíîâÿò, ñ÷èòàé, òû íàøåë åãî.
        }
        else if (self.voice == 7) {
            ai_output(self, other, "Info_FindNPC_NC_Lares_07_01"); //Ñ ëåâîé ñòîðîíû áîëüøîé ïåùåðû, â äàëüíåì êîíöå. Òû íå ïðîìàõíåøüñÿ. Êàê òîëüêî òåáÿ îñòàíîâÿò, ñ÷èòàé, òû íàøåë åãî.
        }
        else {
            if (self.voice == 13) {
                ai_output(self, other, "Info_FindNPC_NC_Lares_13_01"); //Ñ ëåâîé ñòîðîíû áîëüøîé ïåùåðû, â äàëüíåì êîíöå. Òû íå ïðîìàõíåøüñÿ. Êàê òîëüêî òåáÿ îñòàíîâÿò, ñ÷èòàé, òû íàøåë åãî.
            };
        };
    }
    else if (self.guild == gil_sld) {
        if (self.voice == 8) {
            ai_output(self, other, "Info_FindNPC_NC_Lares_08_01"); //Ñ ëåâîé ñòîðîíû áîëüøîé ïåùåðû, â äàëüíåì êîíöå. Òû íå ïðîìàõíåøüñÿ. Êàê òîëüêî òåáÿ îñòàíîâÿò, ñ÷èòàé, òû íàøåë åãî.
        }
        else {
            if (self.voice == 11) {
                ai_output(self, other, "Info_FindNPC_NC_Lares_11_01"); //Ñ ëåâîé ñòîðîíû áîëüøîé ïåùåðû, â äàëüíåì êîíöå. Òû íå ïðîìàõíåøüñÿ. Êàê òîëüêî òåáÿ îñòàíîâÿò, ñ÷èòàé, òû íàøåë åãî.
            };
        };
    };
    info_clearchoices(info_findnpc_nc /*2784*/);
};

func void info_findnpc_nc_lee() {
    var c_npc lee;

    ai_output(other, self, "Info_FindNPC_NC_Lee_15_00"); //Ãäå ÿ ìîãó íàéòè Ëè?
    lee = hlp_getnpc(sld_700_lee);
    if (npc_getdisttonpc(self, lee) < perc_dist_intermediat) {
        b_pointatnpc(self, other, lee);
    }
    else if (self.guild == gil_org) {
        if (self.voice == 6) {
            ai_output(self, other, "Info_FindNPC_NC_Lee_06_01"); //Èäè â áîëüøóþ ïåùåðó, äåðæèñü ïðàâîé ñòîðîíû è ïîäíèìàéñÿ íàâåðõ.
        }
        else if (self.voice == 7) {
            ai_output(self, other, "Info_FindNPC_NC_Lee_07_01"); //Èäè â áîëüøóþ ïåùåðó, äåðæèñü ïðàâîé ñòîðîíû è ïîäíèìàéñÿ íàâåðõ.
        }
        else {
            if (self.voice == 13) {
                ai_output(self, other, "Info_FindNPC_NC_Lee_13_01"); //Èäè â áîëüøóþ ïåùåðó, äåðæèñü ïðàâîé ñòîðîíû è ïîäíèìàéñÿ íàâåðõ.
            };
        };
    }
    else if (self.guild == gil_sld) {
        if (self.voice == 8) {
            ai_output(self, other, "Info_FindNPC_NC_Lee_08_01"); //Èäè â áîëüøóþ ïåùåðó, äåðæèñü ïðàâîé ñòîðîíû è ïîäíèìàéñÿ íàâåðõ.
        }
        else {
            if (self.voice == 11) {
                ai_output(self, other, "Info_FindNPC_NC_Lee_11_01"); //Èäè â áîëüøóþ ïåùåðó, äåðæèñü ïðàâîé ñòîðîíû è ïîäíèìàéñÿ íàâåðõ.
            };
        };
    };
    info_clearchoices(info_findnpc_nc /*2784*/);
};

func void info_findnpc_nc_mage() {
    var c_npc cronos;

    ai_output(other, self, "Info_FindNPC_NC_Cronos_15_00"); //Ãäå ÿ ìîãó íàéòè ìàãà?
    cronos = hlp_getnpc(kdw_604_cronos);
    if (npc_getdisttonpc(self, cronos) < perc_dist_intermediat) {
        b_pointatnpc(self, other, cronos);
    }
    else if (self.guild == gil_org) {
        if (self.voice == 6) {
            ai_output(self, other, "Info_FindNPC_NC_Cronos_06_01"); //Îíè æèâóò â îòäåëüíîé ÷àñòè ïåùåðû, íà ñàìîì âåðõó. Íî èíîãäà èõ ìîæíî óâèäåòü âîçëå æåëåçíîé ãîðû ïîñåðåäèíå ïåùåðû.
        }
        else if (self.voice == 7) {
            ai_output(self, other, "Info_FindNPC_NC_Cronos_07_01"); //Îíè æèâóò â îòäåëüíîé ÷àñòè ïåùåðû, íà ñàìîì âåðõó. Íî èíîãäà èõ ìîæíî óâèäåòü âîçëå æåëåçíîé ãîðû ïîñåðåäèíå ïåùåðû.
        }
        else {
            if (self.voice == 13) {
                ai_output(self, other, "Info_FindNPC_NC_Cronos_13_01"); //Îíè æèâóò â îòäåëüíîé ÷àñòè ïåùåðû, íà ñàìîì âåðõó. Íî èíîãäà èõ ìîæíî óâèäåòü âîçëå æåëåçíîé ãîðû ïîñåðåäèíå ïåùåðû.
            };
        };
    }
    else if (self.guild == gil_sld) {
        if (self.voice == 8) {
            ai_output(self, other, "Info_FindNPC_NC_Cronos_08_01"); //Îíè æèâóò â îòäåëüíîé ÷àñòè ïåùåðû, íà ñàìîì âåðõó. Íî èíîãäà èõ ìîæíî óâèäåòü âîçëå æåëåçíîé ãîðû ïîñåðåäèíå ïåùåðû.
        }
        else {
            if (self.voice == 11) {
                ai_output(self, other, "Info_FindNPC_NC_Cronos_11_01"); //Îíè æèâóò â îòäåëüíîé ÷àñòè ïåùåðû, íà ñàìîì âåðõó. Íî èíîãäà èõ ìîæíî óâèäåòü âîçëå æåëåçíîé ãîðû ïîñåðåäèíå ïåùåðû.
            };
        };
    };
    info_clearchoices(info_findnpc_nc /*2784*/);
};

func void b_assignfindnpc_nc(var c_npc slf) {
    info_findnpc_nc.npc = hlp_getinstanceid(slf);
};

instance info_findnpc_oc(c_info) {
    nr = 900;
    condition = info_findnpc_oc_condition;
    information = info_findnpc_oc_info;
    permanent = true;
    description = "Ãäå ÿ ìîãó íàéòè...";
};

func int info_findnpc_oc_condition() {
    return 1;
};

func void info_findnpc_oc_info() {
    var c_npc diego;
    var c_npc thorus;

    info_clearchoices(info_findnpc_oc /*2802*/);
    info_addchoice(info_findnpc_oc /*2802*/, dialog_back, info_findnpc_oc_back);
    diego = hlp_getnpc(pc_thief);
    if (diego.aivar[7] == true) {
        info_addchoice(info_findnpc_oc /*2802*/, "...Äèåãî?", info_findnpc_oc_diego);
    };
    thorus = hlp_getnpc(grd_200_thorus);
    if (thorus.aivar[7] == true) {
        info_addchoice(info_findnpc_oc /*2802*/, "...Òîðóñà?", info_findnpc_oc_thorus);
    };
};

func void info_findnpc_oc_back() {
    info_clearchoices(info_findnpc_oc /*2802*/);
};

func void info_findnpc_oc_diego() {
    var c_npc diego;

    ai_output(other, self, "Info_FindNPC_Diego_15_00"); //Ãäå ÿ ìîãó íàéòè Äèåãî?
    diego = hlp_getnpc(pc_thief);
    if (npc_getdisttonpc(self, diego) < perc_dist_intermediat) {
        b_pointatnpc(self, other, diego);
    }
    else if (self.guild == gil_vlk) {
        if (self.voice == 1) {
            ai_output(self, other, "Info_FindNPC_OC_Diego_01_01"); //Îáû÷íî îí ïðîâîäèò äåíü ó âõîäà â çàìîê, âìåñòå ñ Òîðóñîì.
        }
        else if (self.voice == 2) {
            ai_output(self, other, "Info_FindNPC_OC_Diego_02_01"); //Îáû÷íî îí ïðîâîäèò äåíü ó âõîäà â çàìîê, âìåñòå ñ Òîðóñîì.
        }
        else if (self.voice == 3) {
            ai_output(self, other, "Info_FindNPC_OC_Diego_03_01"); //Îáû÷íî îí ïðîâîäèò äåíü ó âõîäà â çàìîê, âìåñòå ñ Òîðóñîì.
        }
        else {
            if (self.voice == 4) {
                ai_output(self, other, "Info_FindNPC_OC_Diego_04_01"); //Îáû÷íî îí ïðîâîäèò äåíü ó âõîäà â çàìîê, âìåñòå ñ Òîðóñîì.
            };
        };
    }
    else if (self.guild == gil_grd) {
        if (self.voice == 6) {
            ai_output(self, other, "Info_FindNPC_OC_Diego_06_01"); //Îáû÷íî îí ïðîâîäèò äåíü ó âõîäà â çàìîê, âìåñòå ñ Òîðóñîì.
        }
        else if (self.voice == 7) {
            ai_output(self, other, "Info_FindNPC_OC_Diego_07_01"); //Îáû÷íî îí ïðîâîäèò äåíü ó âõîäà â çàìîê, âìåñòå ñ Òîðóñîì.
        }
        else {
            if (self.voice == 13) {
                ai_output(self, other, "Info_FindNPC_OC_Diego_13_01"); //Îáû÷íî îí ïðîâîäèò äåíü ó âõîäà â çàìîê, âìåñòå ñ Òîðóñîì.
            };
        };
    }
    else if (self.guild == gil_stt) {
        if (self.voice == 10) {
            ai_output(self, other, "Info_FindNPC_OC_Diego_10_01"); //Îáû÷íî îí ïðîâîäèò äåíü ó âõîäà â çàìîê, âìåñòå ñ Òîðóñîì.
        }
        else {
            if (self.voice == 12) {
                ai_output(self, other, "Info_FindNPC_OC_Diego_12_01"); //Îáû÷íî îí ïðîâîäèò äåíü ó âõîäà â çàìîê, âìåñòå ñ Òîðóñîì.
            };
        };
    };
    info_clearchoices(info_findnpc_oc /*2802*/);
};

func void info_findnpc_oc_thorus() {
    var c_npc thorus;

    ai_output(other, self, "Info_FindNPC_OC_Thorus_15_00"); //Ãäå ÿ ìîãó íàéòè Òîðóñà?
    thorus = hlp_getnpc(grd_200_thorus);
    if (npc_getdisttonpc(self, thorus) < perc_dist_intermediat) {
        b_pointatnpc(self, other, thorus);
    }
    else if (self.guild == gil_vlk) {
        if (self.voice == 1) {
            ai_output(self, other, "Info_FindNPC_OC_Thorus_01_01"); //Îáû÷íî îí ñòîèò ó âõîäà â çàìîê.
        }
        else if (self.voice == 2) {
            ai_output(self, other, "Info_FindNPC_OC_Thorus_02_01"); //Îáû÷íî îí ñòîèò ó âõîäà â çàìîê.
        }
        else if (self.voice == 3) {
            ai_output(self, other, "Info_FindNPC_OC_Thorus_03_01"); //Îáû÷íî îí ñòîèò ó âõîäà â çàìîê.
        }
        else {
            if (self.voice == 4) {
                ai_output(self, other, "Info_FindNPC_OC_Thorus_04_01"); //Îáû÷íî îí ñòîèò ó âõîäà â çàìîê.
            };
        };
    }
    else if (self.guild == gil_grd) {
        if (self.voice == 6) {
            ai_output(self, other, "Info_FindNPC_OC_Thorus_06_01"); //Îáû÷íî îí ñòîèò ó âõîäà â çàìîê.
        }
        else if (self.voice == 7) {
            ai_output(self, other, "Info_FindNPC_OC_Thorus_07_01"); //Îáû÷íî îí ñòîèò ó âõîäà â çàìîê.
        }
        else {
            if (self.voice == 13) {
                ai_output(self, other, "Info_FindNPC_OC_Thorus_13_01"); //Îáû÷íî îí ñòîèò ó âõîäà â çàìîê.
            };
        };
    }
    else if (self.guild == gil_stt) {
        if (self.voice == 10) {
            ai_output(self, other, "Info_FindNPC_OC_Thorus_10_01"); //Îáû÷íî îí ñòîèò ó âõîäà â çàìîê.
        }
        else {
            if (self.voice == 12) {
                ai_output(self, other, "Info_FindNPC_OC_Thorus_12_01"); //Îáû÷íî îí ñòîèò ó âõîäà â çàìîê.
            };
        };
    };
    info_clearchoices(info_findnpc_oc /*2802*/);
};

func void b_assignfindnpc_oc(var c_npc slf) {
    info_findnpc_oc.npc = hlp_getinstanceid(slf);
};

instance info_findnpc_st(c_info) {
    nr = 900;
    condition = info_findnpc_st_condition;
    information = info_findnpc_st_info;
    permanent = true;
    description = "Ãäå ÿ ìîãó íàéòè...";
};

func int info_findnpc_st_condition() {
    return 1;
};

func void info_findnpc_st_info() {
    var c_npc corangar;
    var c_npc corkalom;
    var c_npc yberion;

    info_clearchoices(info_findnpc_st /*2814*/);
    info_addchoice(info_findnpc_st /*2814*/, dialog_back, info_findnpc_st_back);
    corangar = hlp_getnpc(gur_1202_corangar);
    if (corangar.aivar[7] == true) {
        info_addchoice(info_findnpc_st /*2814*/, "...Êîð Àíãàðà?", info_findnpc_st_corangar);
    };
    corkalom = hlp_getnpc(gur_1201_corkalom);
    if ((corkalom.aivar[7] == true) && (corangar_gotoogy != true)) {
        info_addchoice(info_findnpc_st /*2814*/, "...Êîð Ãàëîìà?", info_findnpc_st_corkalom);
    };
    yberion = hlp_getnpc(gur_1200_yberion);
    if ((yberion.aivar[7] == true) && (kapitel < 3)) {
        info_addchoice(info_findnpc_st /*2814*/, "...Þ`Áåðèîíà?", info_findnpc_st_yberion);
    };
};

func void info_findnpc_st_back() {
    info_clearchoices(info_findnpc_st /*2814*/);
};

func void info_findnpc_st_corangar() {
    var c_npc corangar;

    ai_output(other, self, "Info_FindNPC_ST_CorAngar_15_00"); //Ãäå ÿ ìîãó íàéòè Êîð Àíãàðà?
    corangar = hlp_getnpc(gur_1202_corangar);
    if (npc_getdisttonpc(self, corangar) < perc_dist_intermediat) {
        b_pointatnpc(self, other, corangar);
    }
    else if (self.guild == gil_nov) {
        if (self.voice == 2) {
            ai_output(self, other, "Info_FindNPC_ST_CorAngar_02_01"); //Òðåíèðîâî÷íàÿ ïëîùàäêà äëÿ Ñòðàæåé íàõîäèòñÿ íà âòîðîì óðîâíå. Îáû÷íî îí ïðîâîäèò òàì âåñü äåíü.
        }
        else if (self.voice == 3) {
            ai_output(self, other, "Info_FindNPC_ST_CorAngar_03_01"); //Òðåíèðîâî÷íàÿ ïëîùàäêà äëÿ Ñòðàæåé íàõîäèòñÿ íà âòîðîì óðîâíå. Îáû÷íî îí ïðîâîäèò òàì âåñü äåíü.
        }
        else {
            if (self.voice == 5) {
                ai_output(self, other, "Info_FindNPC_ST_CorAngar_05_01"); //Òðåíèðîâî÷íàÿ ïëîùàäêà äëÿ Ñòðàæåé íàõîäèòñÿ íà âòîðîì óðîâíå. Îáû÷íî îí ïðîâîäèò òàì âåñü äåíü.
            };
        };
    }
    else if (self.guild == gil_tpl) {
        if (self.voice == 8) {
            ai_output(self, other, "Info_FindNPC_ST_CorAngar_08_01"); //Òðåíèðîâî÷íàÿ ïëîùàäêà äëÿ Ñòðàæåé íàõîäèòñÿ íà âòîðîì óðîâíå. Îáû÷íî îí ïðîâîäèò òàì âåñü äåíü.
        }
        else {
            if (self.voice == 13) {
                ai_output(self, other, "Info_FindNPC_ST_CorAngar_13_01"); //Òðåíèðîâî÷íàÿ ïëîùàäêà äëÿ Ñòðàæåé íàõîäèòñÿ íà âòîðîì óðîâíå. Îáû÷íî îí ïðîâîäèò òàì âåñü äåíü.
            };
        };
    };
    info_clearchoices(info_findnpc_st /*2814*/);
};

func void info_findnpc_st_corkalom() {
    var c_npc corkalom;

    ai_output(other, self, "Info_FindNPC_ST_CorKalom_15_00"); //Ãäå ÿ ìîãó íàéòè Êîð Ãàëîìà?
    corkalom = hlp_getnpc(gur_1201_corkalom);
    if (npc_getdisttonpc(self, corkalom) < perc_dist_intermediat) {
        b_pointatnpc(self, other, corkalom);
    }
    else if (self.guild == gil_nov) {
        if (self.voice == 2) {
            ai_output(self, other, "Info_FindNPC_ST_CorKalom_02_01"); //Ëàáîðàòîðèÿ íàõîäèòñÿ íà âòîðîì óðîâíå, ðÿäîì ñ Õîëìîì, íà êîòîðîì ñòîèò õðàì. Îí ðàáîòàåò òàì äíåì è íî÷üþ.
        }
        else if (self.voice == 3) {
            ai_output(self, other, "Info_FindNPC_ST_CorKalom_03_01"); //Ëàáîðàòîðèÿ íàõîäèòñÿ íà âòîðîì óðîâíå, ðÿäîì ñ Õîëìîì, íà êîòîðîì ñòîèò õðàì. Îí ðàáîòàåò òàì äíåì è íî÷üþ.
        }
        else {
            if (self.voice == 5) {
                ai_output(self, other, "Info_FindNPC_ST_CorKalom_05_01"); //Ëàáîðàòîðèÿ íàõîäèòñÿ íà âòîðîì óðîâíå, ðÿäîì ñ Õîëìîì, íà êîòîðîì ñòîèò õðàì. Îí ðàáîòàåò òàì äíåì è íî÷üþ.
            };
        };
    }
    else if (self.guild == gil_tpl) {
        if (self.voice == 8) {
            ai_output(self, other, "Info_FindNPC_ST_CorKalom_08_01"); //Ëàáîðàòîðèÿ íàõîäèòñÿ íà âòîðîì óðîâíå, ðÿäîì ñ Õîëìîì, íà êîòîðîì ñòîèò õðàì. Îí ðàáîòàåò òàì äíåì è íî÷üþ.
        }
        else {
            if (self.voice == 13) {
                ai_output(self, other, "Info_FindNPC_ST_CorKalom_13_01"); //Ëàáîðàòîðèÿ íàõîäèòñÿ íà âòîðîì óðîâíå, ðÿäîì ñ Õîëìîì, íà êîòîðîì ñòîèò õðàì. Îí ðàáîòàåò òàì äíåì è íî÷üþ.
            };
        };
    };
    info_clearchoices(info_findnpc_st /*2814*/);
};

func void info_findnpc_st_yberion() {
    var c_npc yberion;

    ai_output(other, self, "Info_FindNPC_ST_YBerion_15_00"); //Ãäå ÿ ìîãó íàéòè Þ`Áåðèîíà?
    yberion = hlp_getnpc(gur_1200_yberion);
    if (npc_getdisttonpc(self, yberion) < perc_dist_intermediat) {
        b_pointatnpc(self, other, yberion);
    }
    else if (self.guild == gil_nov) {
        if (self.voice == 2) {
            ai_output(self, other, "Info_FindNPC_ST_YBerion_02_01"); //Ïðîñâåùåííûé æèâåò â óåäèíåíèè ó ïîäíîæèÿ Õîëìà. Îí âûõîäèò ê ëþäÿì ëèøü ïî îñîáûì ñëó÷àÿì.
        }
        else if (self.voice == 3) {
            ai_output(self, other, "Info_FindNPC_ST_YBerion_03_01"); //Ïðîñâåùåííûé æèâåò â óåäèíåíèè ó ïîäíîæèÿ Õîëìà. Îí âûõîäèò ê ëþäÿì ëèøü ïî îñîáûì ñëó÷àÿì.
        }
        else {
            if (self.voice == 5) {
                ai_output(self, other, "Info_FindNPC_ST_YBerion_05_01"); //Ïðîñâåùåííûé æèâåò â óåäèíåíèè ó ïîäíîæèÿ Õîëìà. Îí âûõîäèò ê ëþäÿì ëèøü ïî îñîáûì ñëó÷àÿì.
            };
        };
    }
    else if (self.guild == gil_tpl) {
        if (self.voice == 8) {
            ai_output(self, other, "Info_FindNPC_ST_YBerion_08_01"); //Ïðîñâåùåííûé æèâåò â óåäèíåíèè ó ïîäíîæèÿ Õîëìà. Îí âûõîäèò ê ëþäÿì ëèøü ïî îñîáûì ñëó÷àÿì.
        }
        else {
            if (self.voice == 13) {
                ai_output(self, other, "Info_FindNPC_ST_YBerion_13_01"); //Ïðîñâåùåííûé æèâåò â óåäèíåíèè ó ïîäíîæèÿ Õîëìà. Îí âûõîäèò ê ëþäÿì ëèøü ïî îñîáûì ñëó÷àÿì.
            };
        };
    };
    info_clearchoices(info_findnpc_st /*2814*/);
};

func void b_assignfindnpc_st(var c_npc slf) {
    info_findnpc_st.npc = hlp_getinstanceid(slf);
};

instance info_bau_2_exit(c_info) {
    nr = 999;
    condition = info_bau_2_exit_condition;
    information = info_bau_2_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_bau_2_exit_condition() {
    return 1;
};

func void info_bau_2_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_bau_2_wichtigepersonen(c_info) {
    nr = 3;
    condition = info_bau_2_wichtigepersonen_condition;
    information = info_bau_2_wichtigepersonen_info;
    permanent = true;
    description = "Òû ïî äîáðîé âîëå ðàáîòàåøü íà ðèñîâûõ ïîëÿõ?";
};

func int info_bau_2_wichtigepersonen_condition() {
    return 1;
};

func void info_bau_2_wichtigepersonen_info() {
    var c_npc ricelord;

    ai_output(other, self, "Info_Bau_2_WichtigePersonen_15_00"); //Òû ïî äîáðîé âîëå ðàáîòàåøü íà ðèñîâûõ ïîëÿõ?
    ai_output(self, other, "Info_Bau_2_WichtigePersonen_02_01"); //Äà, âåðíî. Ëó÷øå ðàáîòàòü çäåñü ïî äîáðîé âîëå, ÷åì ïîä ïðèñìîòðîì ãîëîâîðåçîâ Ëîðäà.
    ai_output(other, self, "Info_Bau_2_WichtigePersonen_15_02"); //Ïîíÿòíî...
    ricelord = hlp_getnpc(bau_900_ricelord);
    ricelord.aivar[7] = true;
};

instance info_bau_2_daslager(c_info) {
    nr = 2;
    condition = info_bau_2_daslager_condition;
    information = info_bau_2_daslager_info;
    permanent = true;
    description = "Ðàññêàæè ìíå î Ëàãåðå.";
};

func int info_bau_2_daslager_condition() {
    return 1;
};

func void info_bau_2_daslager_info() {
    var c_npc lee;
    var c_npc cronos;

    ai_output(other, self, "Info_Bau_2_DasLager_15_00"); //Ðàññêàæè ìíå î Ëàãåðå.
    ai_output(self, other, "Info_Bau_2_DasLager_02_01"); //Òàì äîâîëüíî îïàñíî. Íàåìíèêè Ëè è ìàãè åùå íè÷åãî, íî áåðåãèñü âîðîâ!
    lee = hlp_getnpc(sld_700_lee);
    lee.aivar[7] = true;
    cronos = hlp_getnpc(kdw_604_cronos);
    cronos.aivar[7] = true;
};

instance info_bau_2_dielage(c_info) {
    nr = 1;
    condition = info_bau_2_dielage_condition;
    information = info_bau_2_dielage_info;
    permanent = true;
    description = "Âñå â ïîðÿäêå?";
};

func int info_bau_2_dielage_condition() {
    return 1;
};

func void info_bau_2_dielage_info() {
    var c_npc ricelord;

    ai_output(other, self, "Info_Bau_2_DieLage_15_00"); //Âñå â ïîðÿäêå?
    ai_output(self, other, "Info_Bau_2_DieLage_02_01"); //×òî òåáå íóæíî? Òåáÿ ïîñëàë Ëîðä? ß è òàê óæå ðàáîòàþ èçî âñåõ ñèë!
    ai_output(other, self, "Info_Bau_2_DieLage_15_02"); //Íèêòî íå ïîñûëàë ìåíÿ, ÿ ïðîñòî õî÷ó ïîãîâîðèòü.
    ricelord = hlp_getnpc(bau_900_ricelord);
    ricelord.aivar[7] = true;
};

instance info_bau_2_wasser(c_info) {
    nr = 800;
    condition = info_bau_2_wasser_condition;
    information = info_bau_2_wasser_info;
    permanent = true;
    description = "Ìåíÿ ïîñëàë Ëåôòè. ß ïðèíåñ òåáå âîäû.";
};

func int info_bau_2_wasser_condition() {
    if (((lefty_mission == log_running) || ((lefty_mission == log_success) && npc_hasitems(other, itfo_potion_water_01))) && (self.aivar[41] <= wld_getday())) {
        return 1;
    };
};

func void info_bau_2_wasser_info() {
    ai_output(other, self, "Info_Bau_2_Wasser_15_00"); //Ëåôòè ïîñëàë ìåíÿ. ß ïðèíåñ òåáå âîäû.
    if (npc_hasitems(other, itfo_potion_water_01) >= 1) {
        ai_output(self, other, "Info_Bau_2_Wasser_02_01"); //Ñïàñèáî, ïàðåíü! Â ìîåé ãëîòêå ñåé÷àñ ñóõî, êàê â ïóñòûíå!
        b_giveinvitems(other, self, itfo_potion_water_01 /*4324*/, 1);
        if (c_bodystatecontains(self, bs_sit)) {
            ai_standup(self);
            ai_turntonpc(self, hero);
        };
        ai_useitem(self, itfo_potion_water_01 /*4324*/);
        an_bauern_verteilt = an_bauern_verteilt + 1;
        if (an_bauern_verteilt >= durstigebauern) {
            lefty_mission = log_success;
        };
        self.aivar[41] = wld_getday() + 1;
    }
    else {
        ai_output(self, other, "Info_Bau_2_Wasser_NOWATER_02_00"); //Âîäà! Ýé, ïàðåíü! Çäåñü ñîâñåì íè÷åãî íå îñòàëîñü! Òîëüêî íå ãîâîðè ìíå, ÷òî âîäó îïÿòü ïîëó÷èëè âñå, êðîìå ìåíÿ!
    };
};

func void b_assignambientinfos_bau_2(var c_npc slf) {
    info_bau_2_exit.npc = hlp_getinstanceid(slf);
    info_bau_2_wichtigepersonen.npc = hlp_getinstanceid(slf);
    info_bau_2_daslager.npc = hlp_getinstanceid(slf);
    info_bau_2_dielage.npc = hlp_getinstanceid(slf);
    info_bau_2_wasser.npc = hlp_getinstanceid(slf);
};

instance info_bau_4_exit(c_info) {
    nr = 999;
    condition = info_bau_4_exit_condition;
    information = info_bau_4_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_bau_4_exit_condition() {
    return 1;
};

func void info_bau_4_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_bau_4_wichtigepersonen(c_info) {
    nr = 3;
    condition = info_bau_4_wichtigepersonen_condition;
    information = info_bau_4_wichtigepersonen_info;
    permanent = true;
    description = "Êòî ó âàñ ãëàâíûé?";
};

func int info_bau_4_wichtigepersonen_condition() {
    return 1;
};

func void info_bau_4_wichtigepersonen_info() {
    var c_npc ricelord;

    ai_output(other, self, "Info_Bau_4_WichtigePersonen_15_00"); //Êòî ó âàñ ãëàâíûé?
    ai_output(self, other, "Info_Bau_4_WichtigePersonen_04_01"); //Òû ìîæåøü ñ÷èòàòü ãëàâíûì íàøåãî Ëîðäà. Íî áîëüøèíñòâî ðàáîòàåò íà íåãî òîëüêî ïîòîìó, ÷òî áîèòñÿ åãî ãîëîâîðåçîâ.
    ai_output(self, other, "Info_Bau_4_WichtigePersonen_04_02"); //ß çäåñü íåñêîëüêî ëåò è ñûò ïî ãîðëî ïðîáëåìàìè ñ âîðàìè â Ëàãåðå... Ðèñîâûå ïîëÿ äëÿ ìåíÿ - â ñàìûé ðàç.
    ricelord = hlp_getnpc(bau_900_ricelord);
    ricelord.aivar[7] = true;
};

instance info_bau_4_daslager(c_info) {
    nr = 2;
    condition = info_bau_4_daslager_condition;
    information = info_bau_4_daslager_info;
    permanent = true;
    description = "Ðàññêàæè ìíå îá ýòîì ìåñòå.";
};

func int info_bau_4_daslager_condition() {
    return 1;
};

func void info_bau_4_daslager_info() {
    ai_output(other, self, "Info_Bau_4_DasLager_15_00"); //×òî ìíå ñòîèò óçíàòü îá ýòîì ìåñòå?
    ai_output(self, other, "Info_Bau_4_DasLager_04_01"); //Áóäü îñòîðîæåí â Ëàãåðå, ïàðåíü! Òàì ïîëíî ãîëîâîðåçîâ, êîòîðûå òîëüêî è æäóò î÷åðåäíîãî íîâè÷êà, âðîäå òåáÿ.
};

instance info_bau_4_dielage(c_info) {
    nr = 1;
    condition = info_bau_4_dielage_condition;
    information = info_bau_4_dielage_info;
    permanent = true;
    description = "Êàê äåëà?";
};

func int info_bau_4_dielage_condition() {
    return 1;
};

func void info_bau_4_dielage_info() {
    ai_output(other, self, "Info_Bau_4_DieLage_15_00"); //Êàê äåëà?
    ai_output(self, other, "Info_Bau_4_DieLage_04_01"); //Ïîëíî ðàáîòû. Íóæíî ìíîãî ðèñà, ÷òîáû ïðîêîðìèòü âñåõ ýòèõ ëþäåé.
};

instance info_bau_4_wasser(c_info) {
    nr = 800;
    condition = info_bau_4_wasser_condition;
    information = info_bau_4_wasser_info;
    permanent = true;
    description = "Ìåíÿ ïîñëàë Ëåôòè. ß ïðèíåñ òåáå âîäû.";
};

func int info_bau_4_wasser_condition() {
    if (((lefty_mission == log_running) || ((lefty_mission == log_success) && npc_hasitems(other, itfo_potion_water_01))) && (self.aivar[41] <= wld_getday())) {
        return 1;
    };
};

func void info_bau_4_wasser_info() {
    ai_output(other, self, "Info_Bau_4_Wasser_15_00"); //Ìåíÿ ïðèñëàë Ëåôòè. ß ïðèíåñ òåáå âîäû.
    if (npc_hasitems(other, itfo_potion_water_01) >= 1) {
        b_giveinvitems(other, self, itfo_potion_water_01 /*4324*/, 1);
        if (c_bodystatecontains(self, bs_sit)) {
            ai_standup(self);
            ai_turntonpc(self, hero);
        };
        ai_useitem(self, itfo_potion_water_01 /*4324*/);
        ai_output(self, other, "Info_Bau_4_Wasser_04_01"); //Ñïàñèáî, ïàðåíü! Ýòî êàê ðàç òî, ÷òî íóæíî!
        an_bauern_verteilt = an_bauern_verteilt + 1;
        if (an_bauern_verteilt >= durstigebauern) {
            lefty_mission = log_success;
        };
        self.aivar[41] = wld_getday() + 1;
    }
    else {
        ai_output(self, other, "Info_Bau_4_Wasser_NOWATER_04_00"); //Íî ó òåáÿ íè÷åãî íå îñòàëîñü. Íå ïåðåæèâàé, ïðèÿòåëü. ß ïîïðîøó ó îñòàëüíûõ.
    };
};

func void b_assignambientinfos_bau_4(var c_npc slf) {
    info_bau_4_exit.npc = hlp_getinstanceid(slf);
    info_bau_4_wichtigepersonen.npc = hlp_getinstanceid(slf);
    info_bau_4_daslager.npc = hlp_getinstanceid(slf);
    info_bau_4_dielage.npc = hlp_getinstanceid(slf);
    info_bau_4_wasser.npc = hlp_getinstanceid(slf);
};

instance info_bau_9_exit(c_info) {
    nr = 999;
    condition = info_bau_9_exit_condition;
    information = info_bau_9_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_bau_9_exit_condition() {
    return 1;
};

func void info_bau_9_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_bau_9_wichtigepersonen(c_info) {
    nr = 3;
    condition = info_bau_9_wichtigepersonen_condition;
    information = info_bau_9_wichtigepersonen_info;
    permanent = true;
    description = "Êòî ñëåäèò çà ðàáîòîé íà ïîëÿõ?";
};

func int info_bau_9_wichtigepersonen_condition() {
    return 1;
};

func void info_bau_9_wichtigepersonen_info() {
    var c_npc ricelord;

    ai_output(other, self, "Info_Bau_9_WichtigePersonen_15_00"); //Êòî ñëåäèò çà ðàáîòîé íà ïîëÿõ?
    ai_output(self, other, "Info_Bau_9_WichtigePersonen_09_01"); //Âñå! Âîîáùå-òî, çà ðàáîòîé äîëæåí ñëåäèòü Ëîðä, íî ïî-ìîåìó îí öåëûìè äíÿìè ïåðåñ÷èòûâàåò ìåøêè â ñâîèõ çàêðîìàõ.
    ai_output(self, other, "Info_Bau_9_WichtigePersonen_09_02"); //Íó, îíè ñ Ãîìåðîì âñå ýòî è îáóñòðîèëè...
    ricelord = hlp_getnpc(bau_900_ricelord);
    ricelord.aivar[7] = true;
};

instance info_bau_9_daslager(c_info) {
    nr = 2;
    condition = info_bau_9_daslager_condition;
    information = info_bau_9_daslager_info;
    permanent = true;
    description = "Ðàññêàæè ìíå îá ýòîì Ëàãåðå.";
};

func int info_bau_9_daslager_condition() {
    return 1;
};

func void info_bau_9_daslager_info() {
    ai_output(other, self, "Info_Bau_9_DasLager_15_00"); //Ðàññêàæè ìíå îá ýòîì Ëàãåðå.
    ai_output(self, other, "Info_Bau_9_DasLager_09_01"); //Îí äî îòêàçà çàïîëíåí ðàçíûìè óáëþäêàìè. Ìîÿ áû âîëÿ, ÿ áû ïîðó÷èë íàåìíèêàì âûøâûðíóòü âñåõ âîðîâ èç Ëàãåðÿ.
    ai_output(self, other, "Info_Bau_9_DasLager_09_02"); //Îíè íè÷åãî íå äåëàþò, è îò íèõ îäíè íåïðèÿòíîñòè.
};

instance info_bau_9_dielage(c_info) {
    nr = 1;
    condition = info_bau_9_dielage_condition;
    information = info_bau_9_dielage_info;
    permanent = true;
    description = "Êàê äåëà?";
};

func int info_bau_9_dielage_condition() {
    return 1;
};

func void info_bau_9_dielage_info() {
    ai_output(other, self, "Info_Bau_9_DieLage_15_00"); //Òû êàê?
    ai_output(self, other, "Info_Bau_9_DieLage_09_01"); //Ìû íàäðûâàåìñÿ çäåñü, ÷òîáû ïîëó÷èòü õîòü íåìíîãî åäû.
};

instance info_bau_9_wasser(c_info) {
    nr = 800;
    condition = info_bau_9_wasser_condition;
    information = info_bau_9_wasser_info;
    permanent = true;
    description = "Ìåíÿ ïîñëàë Ëåôòè. ß ïðèíåñ òåáå âîäû.";
};

func int info_bau_9_wasser_condition() {
    if (((lefty_mission == log_running) || ((lefty_mission == log_success) && npc_hasitems(other, itfo_potion_water_01))) && (self.aivar[41] <= wld_getday())) {
        return 1;
    };
};

func void info_bau_9_wasser_info() {
    ai_output(other, self, "Info_Bau_9_Wasser_15_00"); //Ìåíÿ ïðèñëàë Ëåôòè. ß ïðèíåñ òåáå âîäû.
    if (npc_hasitems(other, itfo_potion_water_01) >= 1) {
        b_giveinvitems(other, self, itfo_potion_water_01 /*4324*/, 1);
        if (c_bodystatecontains(self, bs_sit)) {
            ai_standup(self);
            ai_turntonpc(self, hero);
        };
        ai_useitem(self, itfo_potion_water_01 /*4324*/);
        ai_output(self, other, "Info_Bau_9_Wasser_09_01"); //Ñïàñèáî, ïðèÿòåëü. Åùå íåìíîãî, è ÿ íà÷àë áû ïèòü èç ëóæè.
        an_bauern_verteilt = an_bauern_verteilt + 1;
        if (an_bauern_verteilt >= durstigebauern) {
            lefty_mission = log_success;
        };
        self.aivar[41] = wld_getday() + 1;
    }
    else {
        ai_output(self, other, "Info_Bau_9_Wasser_NOWATER_09_00"); //Ó òåáÿ íè÷åãî íå îñòàëîñü. ß ïîïðîøó ó îñòàëüíûõ.
    };
};

func void b_assignambientinfos_bau_9(var c_npc slf) {
    info_bau_9_exit.npc = hlp_getinstanceid(slf);
    info_bau_9_wichtigepersonen.npc = hlp_getinstanceid(slf);
    info_bau_9_daslager.npc = hlp_getinstanceid(slf);
    info_bau_9_dielage.npc = hlp_getinstanceid(slf);
    info_bau_9_wasser.npc = hlp_getinstanceid(slf);
};

instance info_grd_13_exit(c_info) {
    nr = 999;
    condition = info_grd_13_exit_condition;
    information = info_grd_13_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_grd_13_exit_condition() {
    return 1;
};

func void info_grd_13_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_grd_13_einervoneuchwerden(c_info) {
    nr = 1;
    condition = info_grd_13_einervoneuchwerden_condition;
    information = info_grd_13_einervoneuchwerden_info;
    permanent = true;
    description = "ß õî÷ó ñòàòü ñòðàæíèêîì.";
};

func int info_grd_13_einervoneuchwerden_condition() {
    if ((((npc_gettrueguild(other) != gil_grd) && (npc_gettrueguild(other) != gil_kdf)) && (!c_npcbelongstonewcamp(other))) && (!c_npcbelongstopsicamp(other))) {
        return true;
    };
};

func void info_grd_13_einervoneuchwerden_info() {
    ai_output(other, self, "Info_grd_13_EinerVonEuchWerden_15_00"); //ß õî÷ó ñòàòü ñòðàæíèêîì.
    ai_output(self, other, "Info_grd_13_EinerVonEuchWerden_13_01"); //Íó, ýòî áóäåò íåëåãêî, ïðèÿòåëü.
};

instance info_grd_13_wichtigepersonen(c_info) {
    nr = 1;
    condition = info_grd_13_wichtigepersonen_condition;
    information = info_grd_13_wichtigepersonen_info;
    permanent = true;
    description = "Êòî çäåñü êîìàíäóåò?";
};

func int info_grd_13_wichtigepersonen_condition() {
    return 1;
};

func void info_grd_13_wichtigepersonen_info() {
    ai_output(other, self, "Info_grd_13_WichtigePersonen_15_00"); //À êòî çäåñü ãëàâíûé?
    ai_output(self, other, "Info_grd_13_WichtigePersonen_13_01"); //ß. È ñêàæó òåáå, ïàðåíü: ëó÷øå ñëåäè çà ñâîèì ÿçûêîì.
};

instance info_grd_13_daslager(c_info) {
    nr = 1;
    condition = info_grd_13_daslager_condition;
    information = info_grd_13_daslager_info;
    permanent = true;
    description = "Êàê ìíå ïîïàñòü â çàìîê?";
};

func int info_grd_13_daslager_condition() {
    if (kapitel == 1) {
        return 1;
    };
};

func void info_grd_13_daslager_info() {
    ai_output(other, self, "Info_grd_13_DasLager_15_00"); //Êàê ìíå ïîïàñòü â çàìîê?
    ai_output(self, other, "Info_grd_13_DasLager_13_01"); //À íèêàê. Òîëüêî ëþäè Ãîìåçà ìîãóò çàéòè òóäà.
    info_clearchoices(info_grd_13_daslager /*2895*/);
    info_addchoice(info_grd_13_daslager /*2895*/, "Ïîíÿòíî.", info_grd_13_daslager_verstehe);
    info_addchoice(info_grd_13_daslager /*2895*/, "À ÷òî åñëè ïîäêóïèòü ñòðàæíèêîâ?", info_grd_13_daslager_wachenbestechen);
    info_addchoice(info_grd_13_daslager /*2895*/, "À êàê ìíå âñòðåòèòüñÿ ñ Ãîìåçîì?", info_grd_13_daslager_gomezsprechen);
};

func void info_grd_13_daslager_verstehe() {
    ai_output(other, self, "Info_grd_13_DasLager_Verstehe_15_00"); //Ïîíÿòíî.
    info_clearchoices(info_grd_13_daslager /*2895*/);
};

func void info_grd_13_daslager_wachenbestechen() {
    ai_output(other, self, "Info_grd_13_DasLager_WachenBestechen_15_00"); //À ÷òî åñëè ïîäêóïèòü ñòðàæíèêîâ?
    ai_output(self, other, "Info_grd_13_DasLager_WachenBestechen_13_01"); //Íàãëîñòè òåáå íå çàíèìàòü, äà? Äóìàþ, îíè ìîãóò îòâåðíóòüñÿ â ñòîðîíó íà ìèíóòó-äðóãóþ, åñëè òû ïðåäëîæèøü èì äîñòàòî÷íî ðóäû.
    ai_output(self, other, "Info_grd_13_DasLager_WachenBestechen_13_02"); //Íî åñëè Ãîìåç óçíàåò î òîì, ÷òî îíè ïîçâîëèëè êîìó-òî ïðîáðàòüñÿ â çàìîê, ìíîãèõ áðîñÿò â ïîäçåìåëüå.
    ai_output(self, other, "Info_grd_13_DasLager_WachenBestechen_13_03"); //Çà ýòîò ðèñê òàêæå ïðèäåòñÿ äîïëàòèòü, è íåìàëî.
    ai_output(self, other, "Info_grd_13_DasLager_WachenBestechen_13_04"); //Íî äàæå åñëè òû è ïîïàäåøü â çàìîê, ÷òî òîëêó? Âíóòðè âñå çäàíèÿ îõðàíÿþòñÿ íå õóæå.
    ai_output(other, self, "Info_grd_13_DasLager_WachenBestechen_15_05"); //ß ïðîñòî òàê ñïðàøèâàë, èç ëþáîïûòñòâà.
};

func void info_grd_13_daslager_gomezsprechen() {
    var c_npc thorus;

    ai_output(other, self, "Info_grd_13_DasLager_GomezSprechen_15_00"); //À êàê ìíå âñòðåòèòüñÿ ñ Ãîìåçîì?
    ai_output(self, other, "Info_grd_13_DasLager_GomezSprechen_13_01"); //Ãîìåçà íå èíòåðåñóþò íîâè÷êè, êîòîðûå åùå íèêàê íå ïðîÿâèëè ñåáÿ.
    ai_output(self, other, "Info_grd_13_DasLager_GomezSprechen_13_02"); //Âïðî÷åì, ïîãîâîðè ñ Òîðóñîì.
    thorus = hlp_getnpc(grd_200_thorus);
    thorus.aivar[7] = true;
};

instance info_grd_13_dielage(c_info) {
    nr = 1;
    condition = info_grd_13_dielage_condition;
    information = info_grd_13_dielage_info;
    permanent = true;
    description = "Êàê äåëà?";
};

func int info_grd_13_dielage_condition() {
    if ((!c_npcbelongstonewcamp(other)) && (!c_npcbelongstopsicamp(other))) {
        return 1;
    };
};

func void info_grd_13_dielage_info() {
    ai_output(other, self, "Info_grd_13_DieLage_15_00"); //Êàê äåëà?
    ai_output(self, other, "Info_grd_13_DieLage_13_01"); //Âñå òèõî. Åñòü áîëüøàÿ ðàçíèöà â òîì, ñ êåì ññîðèòüñÿ - ñ Íîâûì Ëàãåðåì èëè ñ áîëîòíûìè ïðèäóðêàìè.
    ai_output(self, other, "Info_grd_13_DieLage_13_02"); //Ïîêà òû íîâåíüêèé, ýòî íå èìååò çíà÷åíèÿ. Íî, âûáðàâ ñâîé Ëàãåðü, òû ïîëó÷àåøü íå òîëüêî äðóçåé, íî è âðàãîâ.
};

func void b_assignambientinfos_grd_13(var c_npc slf) {
    b_assignfindnpc_oc(slf);
    info_grd_13_exit.npc = hlp_getinstanceid(slf);
    info_grd_13_einervoneuchwerden.npc = hlp_getinstanceid(slf);
    info_grd_13_wichtigepersonen.npc = hlp_getinstanceid(slf);
    info_grd_13_daslager.npc = hlp_getinstanceid(slf);
    info_grd_13_dielage.npc = hlp_getinstanceid(slf);
};

instance info_grd_6_exit(c_info) {
    nr = 999;
    condition = info_grd_6_exit_condition;
    information = info_grd_6_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_grd_6_exit_condition() {
    return 1;
};

func void info_grd_6_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_grd_6_einervoneuchwerden(c_info) {
    nr = 1;
    condition = info_grd_6_einervoneuchwerden_condition;
    information = info_grd_6_einervoneuchwerden_info;
    permanent = true;
    description = "ß õî÷ó ñòàòü ñòðàæíèêîì.";
};

func int info_grd_6_einervoneuchwerden_condition() {
    if ((((npc_gettrueguild(other) != gil_grd) && (npc_gettrueguild(other) != gil_kdf)) && (!c_npcbelongstonewcamp(other))) && (!c_npcbelongstopsicamp(other))) {
        return true;
    };
};

func void info_grd_6_einervoneuchwerden_info() {
    ai_output(other, self, "Info_Grd_6_EinerVonEuchWerden_15_00"); //Âàì íóæíû ëþäè?
    ai_output(self, other, "Info_Grd_6_EinerVonEuchWerden_06_01"); //Òû îäèí èç íîâåíüêèõ, äà? Åñëè òû èùåùü äëÿ ñåáÿ Ëàãåðü, ïîãîâîðè ñ ïðèäóðêàìè - èõ íå î÷åíü çàáîòèò, êòî ê íèì ïðèñîåäèíèòñÿ.
    ai_output(self, other, "Info_Grd_6_EinerVonEuchWerden_06_02"); //Ìû íå áåðåì ê ñåáå êîãî ïîïàëî... Åñëè, êîíå÷íî, òû íå õî÷åøü ðàáîòàòü â Ñòàðîé Øàõòå.
};

instance info_grd_6_wichtigepersonen(c_info) {
    nr = 1;
    condition = info_grd_6_wichtigepersonen_condition;
    information = info_grd_6_wichtigepersonen_info;
    permanent = true;
    description = "Êòî çäåñü êîìàíäóåò?";
};

func int info_grd_6_wichtigepersonen_condition() {
    return 1;
};

func void info_grd_6_wichtigepersonen_info() {
    var c_npc thorus;

    ai_output(other, self, "Info_Grd_6_WichtigePersonen_15_00"); //Êòî çäåñü êîìàíäóåò?
    ai_output(self, other, "Info_Grd_6_WichtigePersonen_06_01"); //Òîðóñ ñëåäèò çà òåì, ÷òîáû âñå íå ðàçâàëèëîñü ê ÷åðòÿì. Îí îäèí èç ëþäåé Ãîìåçà.
    thorus = hlp_getnpc(grd_200_thorus);
    thorus.aivar[7] = true;
};

instance info_grd_6_daslager(c_info) {
    nr = 1;
    condition = info_grd_6_daslager_condition;
    information = info_grd_6_daslager_info;
    permanent = true;
    description = "ß çäåñü íîâåíüêèé. Êàê èäóò äåëà?";
};

func int info_grd_6_daslager_condition() {
    if (((!c_npcbelongstooldcamp(other)) && (!c_npcbelongstonewcamp(other))) && (!c_npcbelongstopsicamp(other))) {
        return 1;
    };
};

func void info_grd_6_daslager_info() {
    ai_output(other, self, "Info_Grd_6_DasLager_15_00"); //ß çäåñü íåäàâíî.
    ai_output(self, other, "Info_Grd_6_DasLager_06_01"); //ß âèæó.
    ai_output(other, self, "Info_Grd_6_DasLager_15_02"); //Êàê îáñòîÿò äåëà?
    ai_output(self, other, "Info_Grd_6_DasLager_06_03"); //Âñå î÷åíü ïðîñòî: áóäóò ïðîáëåìû - òåáÿ íàêàæóò.
    info_clearchoices(info_grd_6_daslager /*2917*/);
    info_addchoice(info_grd_6_daslager /*2917*/, "Ïîíÿòíî.", info_grd_6_daslager_verstehe);
    info_addchoice(info_grd_6_daslager /*2917*/, "À ÷òî òû íàçûâàåøü ïðîáëåìàìè?", info_grd_6_daslager_wasistaerger);
};

func void info_grd_6_daslager_verstehe() {
    ai_output(other, self, "Info_Grd_6_DasLager_Verstehe_15_00"); //Ïîíÿòíî.
    info_clearchoices(info_grd_6_daslager /*2917*/);
};

func void info_grd_6_daslager_wasistaerger() {
    ai_output(other, self, "Info_Grd_6_DasLager_WasIstAerger_15_00"); //À ÷òî òû íàçûâàåøü ïðîáëåìàìè?
    ai_output(self, other, "Info_Grd_6_DasLager_WasIstAerger_06_01"); //Áîëüøèíñòâî ðóäîêîïîâ ïëàòèò íàì çà çàùèòó.
    ai_output(self, other, "Info_Grd_6_DasLager_WasIstAerger_06_02"); //Åñëè òû îáèäèøü êîãî-íèáóäü èç íèõ, ìû ñ òîáîé ðàçáåðåìñÿ.
    ai_output(self, other, "Info_Grd_6_DasLager_WasIstAerger_06_03"); //Åñëè ÿ çàìå÷ó, ÷òî òû øàñòàåøü ïî ÷óæèì äîìàì, ÿ...
    ai_output(other, self, "Info_Grd_6_DasLager_WasIstAerger_15_04"); //Ëàäíî, ëàäíî, ÿ âñå ïîíÿë.
    info_clearchoices(info_grd_6_daslager /*2917*/);
};

instance info_grd_6_dielage(c_info) {
    nr = 1;
    condition = info_grd_6_dielage_condition;
    information = info_grd_6_dielage_info;
    permanent = true;
    description = "Êàê äåëà?";
};

func int info_grd_6_dielage_condition() {
    return 1;
};

func void info_grd_6_dielage_info() {
    ai_output(other, self, "Info_Grd_6_DieLage_15_00"); //Êàê äåëà?
    ai_output(self, other, "Info_Grd_6_DieLage_06_01"); //Èùåøü íåïðèÿòíîñòè?
};

func void b_assignambientinfos_grd_6(var c_npc slf) {
    b_assignfindnpc_oc(slf);
    info_grd_6_exit.npc = hlp_getinstanceid(slf);
    info_grd_6_einervoneuchwerden.npc = hlp_getinstanceid(slf);
    info_grd_6_wichtigepersonen.npc = hlp_getinstanceid(slf);
    info_grd_6_daslager.npc = hlp_getinstanceid(slf);
    info_grd_6_dielage.npc = hlp_getinstanceid(slf);
};

instance info_grd_7_exit(c_info) {
    nr = 999;
    condition = info_grd_7_exit_condition;
    information = info_grd_7_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_grd_7_exit_condition() {
    return 1;
};

func void info_grd_7_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_grd_7_einervoneuchwerden(c_info) {
    nr = 1;
    condition = info_grd_7_einervoneuchwerden_condition;
    information = info_grd_7_einervoneuchwerden_info;
    permanent = true;
    description = "×òî íóæíî ñäåëàòü, ÷òîáû ñòàòü îäíèì èç ñòðàæíèêîâ Ãîìåçà?";
};

func int info_grd_7_einervoneuchwerden_condition() {
    if ((((npc_gettrueguild(other) != gil_grd) && (npc_gettrueguild(other) != gil_kdf)) && (!c_npcbelongstonewcamp(other))) && (!c_npcbelongstopsicamp(other))) {
        return true;
    };
};

func void info_grd_7_einervoneuchwerden_info() {
    ai_output(other, self, "Info_grd_7_EinerVonEuchWerden_15_00"); //×òî íóæíî ñäåëàòü, ÷òîáû ñòàòü îäíèì èç ñòðàæíèêîâ Ãîìåçà?
    ai_output(self, other, "Info_grd_7_EinerVonEuchWerden_07_01"); //Òåáå?! Òû øóòèøü. Òû ÷òî, äóìàåøü, ìîæíî ïðîñòî ïðèéòè ñþäà ñ âàæíûì âèäîì è ñðàçó îêàçàòüñÿ íàâåðõó, òàê?
    ai_output(self, other, "Info_grd_7_EinerVonEuchWerden_07_02"); //Ñòðàæíèêàìè ñòàíîâÿòñÿ ëó÷øèå èç ëó÷øèõ.
    ai_output(self, other, "Info_grd_7_EinerVonEuchWerden_07_03"); //Òû áóäåøü ïðîáèâàòüñÿ íàâåðõ òàê æå, êàê è âñå îñòàëüíûå, è äëÿ íà÷àëà äîêàæåøü ñâîþ âåðíîñòü Ëàãåðþ, ñòàâ îäíèì èç Ïðèçðàêîâ.
};

instance info_grd_7_wichtigepersonen(c_info) {
    nr = 1;
    condition = info_grd_7_wichtigepersonen_condition;
    information = info_grd_7_wichtigepersonen_info;
    permanent = true;
    description = "Êòî çäåñü êîìàíäóåò?";
};

func int info_grd_7_wichtigepersonen_condition() {
    if (npc_gettrueguild(hero) == gil_none) {
        return 1;
    };
};

func void info_grd_7_wichtigepersonen_info() {
    var c_npc diego;
    var c_npc thorus;

    ai_output(other, self, "Info_grd_7_WichtigePersonen_15_00"); //Êòî çäåñü êîìàíäóåò?
    ai_output(self, other, "Info_grd_7_WichtigePersonen_07_01"); //Òîðóñ ñëåäèò çà òåì, ÷òî ïðîèñõîäèò â Ëàãåðå. Äèåãî - åãî ïîìîùíèê.
    ai_output(self, other, "Info_grd_7_WichtigePersonen_07_02"); //Åñëè òû õî÷åøü ÷åãî-òî äîáèòüñÿ çäåñü, ãîâîðèòü íóæíî ñ íèìè.
    diego = hlp_getnpc(pc_thief);
    diego.aivar[7] = true;
    thorus = hlp_getnpc(grd_200_thorus);
    thorus.aivar[7] = true;
};

instance info_grd_7_daslager(c_info) {
    nr = 1;
    condition = info_grd_7_daslager_condition;
    information = info_grd_7_daslager_info;
    permanent = true;
    description = "È âñå ëþäè çäåñü ðàáîòàþò íà Ãîìåçà?";
};

func int info_grd_7_daslager_condition() {
    if (npc_gettrueguild(hero) == gil_none) {
        return 1;
    };
};

func void info_grd_7_daslager_info() {
    ai_output(other, self, "Info_grd_7_DasLager_15_00"); //Âñå ëþäè çäåñü ðàáîòàþò íà Ãîìåçà?
    ai_output(self, other, "Info_grd_7_DasLager_07_01"); //Íå-à. Áîëüøèíñòâî èç íèõ - ïðîñòûå ðóäîêîïû.
    ai_output(self, other, "Info_grd_7_DasLager_07_02"); //Ñ Ãîìåçîì òîëüêî ñòðàæà è Ïðèçðàêè.
    info_clearchoices(info_grd_7_daslager /*2938*/);
    info_addchoice(info_grd_7_daslager /*2938*/, dialog_back, info_grd_7_daslager_zurueck);
    info_addchoice(info_grd_7_daslager /*2938*/, "×òî äåëàþò ñòðàæíèêè?", info_grd_7_daslager_gardisten);
    info_addchoice(info_grd_7_daslager /*2938*/, "×åì çàíèìàþòñÿ Ïðèçðàêè?", info_grd_7_daslager_schatten);
    info_addchoice(info_grd_7_daslager /*2938*/, "×òî äåëàþò ðóäîêîïû?", info_grd_7_daslager_buddler);
};

func void info_grd_7_daslager_zurueck() {
    info_clearchoices(info_grd_7_daslager /*2938*/);
};

func void info_grd_7_daslager_gardisten() {
    ai_output(other, self, "Info_grd_7_DasLager_WasIstAerger_15_00"); //×òî äåëàþò ñòðàæíèêè?
    ai_output(self, other, "Info_grd_7_DasLager_WasIstAerger_07_01"); //Ìû îõðàíÿåì Ëàãåðü è çàùèùàåì ðóäîêîïîâ.
    ai_output(self, other, "Info_grd_7_DasLager_WasIstAerger_07_02"); //Äåíüãè íàì ïëàòèò Ãîìåç, äà è ðóäîêîïû îòñòåãèâàþò çà ñâîþ çàùèòó. Äåëî äîâîëüíî ïðèáûëüíîå.
};

func void info_grd_7_daslager_schatten() {
    ai_output(other, self, "Info_grd_7_DasLager_Schatten_15_00"); //×åì çàíèìàþòñÿ Ïðèçðàêè?
    ai_output(self, other, "Info_grd_7_DasLager_Schatten_07_01"); //Ïðèçðàêè ñëåäÿò çà òåì, ÷òîáû èñïîëíÿëèñü ïðèêàçû Ãîìåçà.
    ai_output(self, other, "Info_grd_7_DasLager_Schatten_07_02"); //Áîëüøèíñòâî èç íèõ - ïðîñòûå ïîäõàëèìû, ìå÷òàþùèå ïðîäâèíóòüñÿ ïî ñëóæáå. Åñëè òû õî÷åøü ÷åãî-íèáóäü äîáèòüñÿ çäåñü, ýòî ïðàâèëüíûé ïóòü.
    ai_output(self, other, "Info_grd_7_DasLager_Schatten_07_03"); //Ïðîñëóæèâ äîñòàòî÷íî äîëãî, òû ìîæåøü ñòàòü îäíèì èç íàñ.
    ai_output(self, other, "Info_grd_7_DasLager_Schatten_07_04"); //Íó à åñëè òû ñ Ãîìåçîì, íè îäèí ÷åëîâåê â ýòîé êîëîíèè íå ïîñìååò òåáÿ îáèäåòü, ìàëûø.
};

func void info_grd_7_daslager_buddler() {
    var c_npc thorus;

    ai_output(other, self, "Info_grd_7_DasLager_Buddler_15_00"); //×òî äåëàþò ðóäîêîïû?
    ai_output(self, other, "Info_grd_7_DasLager_Buddler_07_01"); //Õîðîøèé âîïðîñ. Îíè äàæå èç øàõòû-òî, ìîæíî ñ÷èòàòü, íå âûõîäÿò.
    ai_output(self, other, "Info_grd_7_DasLager_Buddler_07_02"); //Òî åñòü, îíè âûõîäÿò ñþäà ïîòðàòèòü ðóäó, êîãäà ïðîñèäÿò òàì äîñòàòî÷íî äîëãî.
    ai_output(self, other, "Info_grd_7_DasLager_Buddler_07_03"); //Íî, ïðîìîòàâ âñå, îòïðàâëÿþòñÿ îáðàòíî. Ýòèì çàíèìàåòñÿ áîëüøèíñòâî ëþäåé â îêðóãå.
    ai_output(self, other, "Info_grd_7_DasLager_Buddler_07_04"); //Ìíå êàæåòñÿ, òû ñïîñîáåí íà áîëüøåå, ÷åì ïðîñòî ìàõàòü êèðêîé. Ïîãîâîðè ñ Òîðóñîì, åñëè òû åùå íå ñäåëàë ýòîãî.
    thorus = hlp_getnpc(grd_200_thorus);
    thorus.aivar[7] = true;
};

instance info_grd_7_dielage(c_info) {
    nr = 1;
    condition = info_grd_7_dielage_condition;
    information = info_grd_7_dielage_info;
    permanent = true;
    description = "Êàê äåëà?";
};

func int info_grd_7_dielage_condition() {
    if (npc_gettrueguild(hero) == gil_none) {
        return 1;
    };
};

func void info_grd_7_dielage_info() {
    ai_output(other, self, "Info_grd_7_DieLage_15_00"); //Êàê äåëà?
    ai_output(self, other, "Info_grd_7_DieLage_07_01"); //Äëÿ òåáÿ, òû èìååøü â âèäó? Ïîêà òû íå ðåøèøü, â êàêîì òû Ëàãåðå, íèêòî íå áóäåò âîñïðèíèìàòü òåáÿ âñåðüåç, ìàëûø!
};

func void b_assignambientinfos_grd_7(var c_npc slf) {
    b_assignfindnpc_oc(slf);
    info_grd_7_exit.npc = hlp_getinstanceid(slf);
    info_grd_7_einervoneuchwerden.npc = hlp_getinstanceid(slf);
    info_grd_7_wichtigepersonen.npc = hlp_getinstanceid(slf);
    info_grd_7_daslager.npc = hlp_getinstanceid(slf);
    info_grd_7_dielage.npc = hlp_getinstanceid(slf);
};

instance info_mine_grd_13_exit(c_info) {
    nr = 999;
    condition = info_mine_grd_13_exit_condition;
    information = info_mine_grd_13_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_mine_grd_13_exit_condition() {
    return 1;
};

func void info_mine_grd_13_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_mine_grd_13_mine(c_info) {
    nr = 1;
    condition = info_mine_grd_13_mine_condition;
    information = info_mine_grd_13_mine_info;
    permanent = true;
    description = "Êàê äåëà íà øàõòå?";
};

func int info_mine_grd_13_mine_condition() {
    if (kapitel < 3) {
        return 1;
    };
};

func void info_mine_grd_13_mine_info() {
    ai_output(other, self, "Info_Mine_Grd_13_Mine_15_00"); //×òî ïðîèñõîäèò íà øàõòå?
    ai_output(self, other, "Info_Mine_Grd_13_Mine_13_01"); //Øàõòà - ñåðäöå Ñòàðîãî Ëàãåðÿ. Íåò øàõòû - íåò ðóäû. Íåò ðóäû - íåò òîâàðîâ èç âíåøíåãî ìèðà. Ïîíÿòíî?
};

instance info_mine_grd_13_wichtigepersonen(c_info) {
    nr = 1;
    condition = info_mine_grd_13_wichtigepersonen_condition;
    information = info_mine_grd_13_wichtigepersonen_info;
    permanent = true;
    description = "Êòî çäåñü êîìàíäóåò?";
};

func int info_mine_grd_13_wichtigepersonen_condition() {
    if (kapitel < 3) {
        return 1;
    };
};

func void info_mine_grd_13_wichtigepersonen_info() {
    ai_output(other, self, "Info_Mine_Grd_13_WichtigePersonen_15_00"); //Êòî çäåñü ãëàâíûé?
    ai_output(self, other, "Info_Mine_Grd_13_WichtigePersonen_13_01"); //Íàø áîññ - Àñãõàí. Íî òû ê íåìó íå ëåçü. ßí çàíèìàåòñÿ ïàðíÿìè òèïà òåáÿ.
};

instance info_mine_grd_13_daslager(c_info) {
    nr = 1;
    condition = info_mine_grd_13_daslager_condition;
    information = info_mine_grd_13_daslager_info;
    permanent = true;
    description = "Ðàññêàæè ìíå î ïîëçóíàõ.";
};

func int info_mine_grd_13_daslager_condition() {
    if (kapitel < 3) {
        return 1;
    };
};

func void info_mine_grd_13_daslager_info() {
    ai_output(other, self, "Info_Mine_Grd_13_DasLager_15_00"); //Ðàññêàæè ìíå î ïîëçóíàõ.
    ai_output(self, other, "Info_Mine_Grd_13_DasLager_13_01"); //×ëåíû Áðàòñòâà îòäàþò Ñòàðîìó Ëàãåðþ íåìàëî áîëîòíèêà, è èì ïîçâîëÿþò îõîòèòüñÿ íà ïîëçóíîâ â øàõòå.
};

instance info_mine_grd_13_dielage(c_info) {
    nr = 1;
    condition = info_mine_grd_13_dielage_condition;
    information = info_mine_grd_13_dielage_info;
    permanent = true;
    description = "Êàê æèçíü?";
};

func int info_mine_grd_13_dielage_condition() {
    if (kapitel < 3) {
        return 1;
    };
};

func void info_mine_grd_13_dielage_info() {
    ai_output(other, self, "Info_Mine_Grd_13_DieLage_15_00"); //Êàê æèçíü?
    ai_output(self, other, "Info_Mine_Grd_13_DieLage_13_01"); //ß íè ñ êåì íå äðàëñÿ óæå öåëóþ âå÷íîñòü!
};

func void b_assignambientinfos_mine_grd_13(var c_npc slf) {
    info_mine_grd_13_exit.npc = hlp_getinstanceid(slf);
    info_mine_grd_13_mine.npc = hlp_getinstanceid(slf);
    info_mine_grd_13_wichtigepersonen.npc = hlp_getinstanceid(slf);
    info_mine_grd_13_daslager.npc = hlp_getinstanceid(slf);
    info_mine_grd_13_dielage.npc = hlp_getinstanceid(slf);
};

instance info_mine_grd_6_exit(c_info) {
    nr = 999;
    condition = info_mine_grd_6_exit_condition;
    information = info_mine_grd_6_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_mine_grd_6_exit_condition() {
    return 1;
};

func void info_mine_grd_6_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_mine_grd_6_mine(c_info) {
    nr = 1;
    condition = info_mine_grd_6_mine_condition;
    information = info_mine_grd_6_mine_info;
    permanent = true;
    description = "Êàê äåëà íà øàõòå?";
};

func int info_mine_grd_6_mine_condition() {
    if (kapitel < 3) {
        return 1;
    };
};

func void info_mine_grd_6_mine_info() {
    ai_output(other, self, "Info_Mine_Grd_6_Mine_15_00"); //×òî ïðîèñõîäèò íà øàõòå?
    ai_output(self, other, "Info_Mine_Grd_6_Mine_06_01"); //Ðóäîêîïû äîáûâàþò ðóäó - âñå êàê âñåãäà. Åñëè îñòàíîâÿòñÿ, èõ æäåò õîðîøàÿ âçáó÷êà.
};

instance info_mine_grd_6_wichtigepersonen(c_info) {
    nr = 1;
    condition = info_mine_grd_6_wichtigepersonen_condition;
    information = info_mine_grd_6_wichtigepersonen_info;
    permanent = true;
    description = "Êòî çäåñü êîìàíäóåò?";
};

func int info_mine_grd_6_wichtigepersonen_condition() {
    if (kapitel < 3) {
        return 1;
    };
};

func void info_mine_grd_6_wichtigepersonen_info() {
    ai_output(other, self, "Info_Mine_Grd_6_WichtigePersonen_15_00"); //Êòî çäåñü ãëàâíûé?
    ai_output(self, other, "Info_Mine_Grd_6_WichtigePersonen_06_01"); //Íàìè êîìàíäóåò Àñãõàí, à ßí çàïðàâëÿåò äåëàìè - ïðèãëÿäûâàåò çà ðóäîêîïàìè, îðãàíèçóåò äîáû÷ó ðóäû.
};

instance info_mine_grd_6_minecrawler(c_info) {
    nr = 1;
    condition = info_mine_grd_6_minecrawler_condition;
    information = info_mine_grd_6_minecrawler_info;
    permanent = true;
    description = "Ðàññêàæè ìíå î ïîëçóíàõ.";
};

func int info_mine_grd_6_minecrawler_condition() {
    if (kapitel < 3) {
        return 1;
    };
};

func void info_mine_grd_6_minecrawler_info() {
    ai_output(other, self, "Info_Mine_Grd_6_Minecrawler_15_00"); //Êòî òàêèå ïîëçóíû?
    ai_output(self, other, "Info_Mine_Grd_6_Minecrawler_06_01"); //Îò ýòèõ òâàðåé îäíè íåïðèÿòíîñòè. Äàæå íå çíàþ, îò êîãî áîëüøå ãîëîâíîé áîëè - îò ïîëçóíîâ èëè îò ðóäîêîïîâ.
};

instance info_mine_grd_6_dielage(c_info) {
    nr = 1;
    condition = info_mine_grd_6_dielage_condition;
    information = info_mine_grd_6_dielage_info;
    permanent = true;
    description = "Êàê äåëà?";
};

func int info_mine_grd_6_dielage_condition() {
    if (kapitel < 3) {
        return 1;
    };
};

func void info_mine_grd_6_dielage_info() {
    ai_output(other, self, "Info_Mine_Grd_6_DieLage_15_00"); //Êàê æèçíü?
    ai_output(self, other, "Info_Mine_Grd_6_DieLage_06_01"); //Íó, à òû êàê äóìàåøü?
};

func void b_assignambientinfos_mine_grd_6(var c_npc slf) {
    info_mine_grd_6_exit.npc = hlp_getinstanceid(slf);
    info_mine_grd_6_mine.npc = hlp_getinstanceid(slf);
    info_mine_grd_6_wichtigepersonen.npc = hlp_getinstanceid(slf);
    info_mine_grd_6_minecrawler.npc = hlp_getinstanceid(slf);
    info_mine_grd_6_dielage.npc = hlp_getinstanceid(slf);
};

instance info_mine_grd_7_exit(c_info) {
    nr = 999;
    condition = info_mine_grd_7_exit_condition;
    information = info_mine_grd_7_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_mine_grd_7_exit_condition() {
    return 1;
};

func void info_mine_grd_7_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_mine_grd_7_mine(c_info) {
    nr = 1;
    condition = info_mine_grd_7_mine_condition;
    information = info_mine_grd_7_mine_info;
    permanent = true;
    description = "Ðàññêàæè ìíå î øàõòå.";
};

func int info_mine_grd_7_mine_condition() {
    if (kapitel < 3) {
        return 1;
    };
};

func void info_mine_grd_7_mine_info() {
    ai_output(other, self, "Info_Mine_Grd_7_Mine_15_00"); //Ðàññêàæè ìíå ïðî øàõòó.
    ai_output(self, other, "Info_Mine_Grd_7_Mine_07_01"); //Ðóäîêîïû äîáûâàþò ðóäó, à ìû çàùèùàåì èõ îò ïîëçóíîâ.
};

instance info_mine_grd_7_wichtigepersonen(c_info) {
    nr = 1;
    condition = info_mine_grd_7_wichtigepersonen_condition;
    information = info_mine_grd_7_wichtigepersonen_info;
    permanent = true;
    description = "Êòî çäåñü êîìàíäóåò?";
};

func int info_mine_grd_7_wichtigepersonen_condition() {
    if (kapitel < 3) {
        return 1;
    };
};

func void info_mine_grd_7_wichtigepersonen_info() {
    ai_output(other, self, "Info_Mine_Grd_7_WichtigePersonen_15_00"); //Êòî çäåñü ãëàâíûé?
    ai_output(self, other, "Info_Mine_Grd_7_WichtigePersonen_07_01"); //ßí è Àñãõàí. Åñëè òåáå ÷òî-íèáóäü íóæíî, ïîãîâîðè ñ íèìè.
};

instance info_mine_grd_7_minecrawler(c_info) {
    nr = 1;
    condition = info_mine_grd_7_minecrawler_condition;
    information = info_mine_grd_7_minecrawler_info;
    permanent = true;
    description = "×òî òû çíàåøü î ïîëçóíàõ?";
};

func int info_mine_grd_7_minecrawler_condition() {
    if (kapitel < 3) {
        return 1;
    };
};

func void info_mine_grd_7_minecrawler_info() {
    ai_output(other, self, "Info_Mine_Grd_7_Minecrawler_15_00"); //×òî òû çíàåøü î ïîëçóíàõ?
    ai_output(self, other, "Info_Mine_Grd_7_Minecrawler_07_01"); //Åñëè òåáÿ èíòåðåñóåò ìîå ìíåíèå - èõ âñåõ íóæíî ïåðåáèòü, è ÷åì ñêîðåå, òåì ëó÷øå.
};

instance info_mine_grd_7_dielage(c_info) {
    nr = 1;
    condition = info_mine_grd_7_dielage_condition;
    information = info_mine_grd_7_dielage_info;
    permanent = true;
    description = "Êàê äåëà?";
};

func int info_mine_grd_7_dielage_condition() {
    if (kapitel < 3) {
        return 1;
    };
};

func void info_mine_grd_7_dielage_info() {
    ai_output(other, self, "Info_Mine_Grd_7_DieLage_15_00"); //Òû êàê?
    ai_output(self, other, "Info_Mine_Grd_7_DieLage_07_01"); //Ïàðåíü, òû íà÷èíàåøü äåéñòâîâàòü ìíå íà íåðâû.
};

func void b_assignambientinfos_mine_grd_7(var c_npc slf) {
    info_mine_grd_7_exit.npc = hlp_getinstanceid(slf);
    info_mine_grd_7_mine.npc = hlp_getinstanceid(slf);
    info_mine_grd_7_wichtigepersonen.npc = hlp_getinstanceid(slf);
    info_mine_grd_7_minecrawler.npc = hlp_getinstanceid(slf);
    info_mine_grd_7_dielage.npc = hlp_getinstanceid(slf);
};

instance info_mine_org_13_exit(c_info) {
    nr = 999;
    condition = info_mine_org_13_exit_condition;
    information = info_mine_org_13_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_mine_org_13_exit_condition() {
    return 1;
};

func void info_mine_org_13_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_mine_org_13_mine(c_info) {
    nr = 1;
    condition = info_mine_org_13_mine_condition;
    information = info_mine_org_13_mine_info;
    permanent = true;
    description = "Ðàññêàæè ìíå îá ýòîì Ëàãåðå.";
};

func int info_mine_org_13_mine_condition() {
    return 1;
};

func void info_mine_org_13_mine_info() {
    ai_output(other, self, "Info_Mine_Org_13_Mine_15_00"); //Ðàññêàæè ìíå ÷òî-íèáóäü îá ýòîì Ëàãåðå.
    ai_output(self, other, "Info_Mine_Org_13_Mine_13_01"); //Ýòà äûðà â ñêàëå âûâåäåò íàñ îòñþäà. Êàê òîëüêî ó íàñ áóäåò äîñòàòî÷íî ðóäû, ìû ñìîæåì çàáûòü ïðî Ñòàðûé Ëàãåðü.
};

instance info_mine_org_13_wichtigepersonen(c_info) {
    nr = 1;
    condition = info_mine_org_13_wichtigepersonen_condition;
    information = info_mine_org_13_wichtigepersonen_info;
    permanent = true;
    description = "Êòî çäåñü êîìàíäóåò?";
};

func int info_mine_org_13_wichtigepersonen_condition() {
    return 1;
};

func void info_mine_org_13_wichtigepersonen_info() {
    ai_output(other, self, "Info_Mine_Org_13_WichtigePersonen_15_00"); //Êòî çäåñü êîìàíäóåò?
    ai_output(self, other, "Info_Mine_Org_13_WichtigePersonen_13_01"); //Îêèë.
    ai_output(self, other, "Info_Mine_Org_13_WichtigePersonen_13_02"); //Íî íàñ, âîðîâ, îí îáû÷íî íå òðîãàåò.
};

instance info_mine_org_13_dielage(c_info) {
    nr = 1;
    condition = info_mine_org_13_dielage_condition;
    information = info_mine_org_13_dielage_info;
    permanent = true;
    description = "Âñå â ïîðÿäêå?";
};

func int info_mine_org_13_dielage_condition() {
    return 1;
};

func void info_mine_org_13_dielage_info() {
    ai_output(other, self, "Info_Mine_Org_13_DieLage_15_00"); //Âñå â ïîðÿäêå?
    ai_output(self, other, "Info_Mine_Org_13_DieLage_13_01"); //Íå õóæå, ÷åì â÷åðà.
};

func void b_assignambientinfos_mine_org_13(var c_npc slf) {
    info_mine_org_13_exit.npc = hlp_getinstanceid(slf);
    info_mine_org_13_mine.npc = hlp_getinstanceid(slf);
    info_mine_org_13_wichtigepersonen.npc = hlp_getinstanceid(slf);
    info_mine_org_13_dielage.npc = hlp_getinstanceid(slf);
};

instance info_mine_org_6_exit(c_info) {
    nr = 999;
    condition = info_mine_org_6_exit_condition;
    information = info_mine_org_6_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_mine_org_6_exit_condition() {
    return 1;
};

func void info_mine_org_6_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_mine_org_6_mine(c_info) {
    nr = 1;
    condition = info_mine_org_6_mine_condition;
    information = info_mine_org_6_mine_info;
    permanent = true;
    description = "Êàê äåëà íà øàõòå?";
};

func int info_mine_org_6_mine_condition() {
    return 1;
};

func void info_mine_org_6_mine_info() {
    ai_output(other, self, "Info_Mine_Org_6_Mine_15_00"); //Êàê äåëà íà øàõòå?
    ai_output(self, other, "Info_Mine_Org_6_Mine_06_01"); //Íà øàõòå? Âñå êòî áûë òàì, òàì è îñòàþòñÿ. Íîâåíüêèõ íåò, íàðóæó òîæå íèêòî íå âûõîäèë.
    ai_output(self, other, "Info_Mine_Org_6_Mine_06_02"); //Ðàäóéñÿ, ÷òî òû ñåé÷àñ íå âíóòðè.
};

instance info_mine_org_6_wichtigepersonen(c_info) {
    nr = 1;
    condition = info_mine_org_6_wichtigepersonen_condition;
    information = info_mine_org_6_wichtigepersonen_info;
    permanent = true;
    description = "Êòî çäåñü êîìàíäóåò?";
};

func int info_mine_org_6_wichtigepersonen_condition() {
    return 1;
};

func void info_mine_org_6_wichtigepersonen_info() {
    ai_output(other, self, "Info_Mine_Org_6_WichtigePersonen_15_00"); //Êòî çäåñü êîìàíäóåò?
    ai_output(self, other, "Info_Mine_Org_6_WichtigePersonen_06_01"); //Ìíîé íèêòî íå êîìàíäóåò, íî íóæíî åùå çíàòü, êàê ïîïàñòü íà ýòî ìåñòî.
    ai_output(other, self, "Info_Mine_Org_6_WichtigePersonen_15_01"); //È êàê æå ñþäà ïîïàñòü?
    ai_output(self, other, "Info_Mine_Org_6_WichtigePersonen_06_02"); //À ýòî óæå ñåêðåò! Íî, ìåæäó íàìè, ýòî íå òàê óæ ñëîæíî äëÿ âîðà.
};

instance info_mine_org_6_dielage(c_info) {
    nr = 1;
    condition = info_mine_org_6_dielage_condition;
    information = info_mine_org_6_dielage_info;
    permanent = true;
    description = "Ïîõîæå, òû íå ïåðåãðóæàåøü ñåáÿ ðàáîòîé.";
};

func int info_mine_org_6_dielage_condition() {
    return 1;
};

func void info_mine_org_6_dielage_info() {
    ai_output(other, self, "Info_Mine_Org_6_DieLage_15_00"); //Ïîõîæå, òû íå ïåðåãðóæàåøü ñåáÿ ðàáîòîé.
    ai_output(self, other, "Info_Mine_Org_6_DieLage_06_01"); //ß - ðàáîòîé? Åñëè áû ÿ áûë ðàáîòÿãîé, ÿ áû íå îêàçàëñÿ ïîä Êóïîëîì, åñëè òû, êîíå÷íî, ïîíèìàåøü, î ÷åì ÿ.
};

func void b_assignambientinfos_mine_org_6(var c_npc slf) {
    info_mine_org_6_exit.npc = hlp_getinstanceid(slf);
    info_mine_org_6_mine.npc = hlp_getinstanceid(slf);
    info_mine_org_6_wichtigepersonen.npc = hlp_getinstanceid(slf);
    info_mine_org_6_dielage.npc = hlp_getinstanceid(slf);
};

instance info_mine_org_7_exit(c_info) {
    nr = 999;
    condition = info_mine_org_7_exit_condition;
    information = info_mine_org_7_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_mine_org_7_exit_condition() {
    return 1;
};

func void info_mine_org_7_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_mine_org_7_mine(c_info) {
    nr = 1;
    condition = info_mine_org_7_mine_condition;
    information = info_mine_org_7_mine_info;
    permanent = true;
    description = "Ðàññêàæè ìíå îá ýòîì Ëàãåðå.";
};

func int info_mine_org_7_mine_condition() {
    return 1;
};

func void info_mine_org_7_mine_info() {
    ai_output(other, self, "Info_Mine_Org_7_Mine_15_00"); //Ðàññêàæè ìíå îá ýòîì Ëàãåðå.
    ai_output(self, other, "Info_Mine_Org_7_Mine_07_01"); //Î Ëàãåðå? À, òû èìååøü â âèäó Ëîùèíó. Çäåñü íå òàê ïëîõî, ïðàâäà. 'Ñêðåáêè' ñîáèðàþò ðóäó, íàåìíèêè ñòîÿò íà ñòðàæå, à ìû, âîðû, çàïðàâëÿåì âñåìè äåëàìè.
};

instance info_mine_org_7_wichtigepersonen(c_info) {
    nr = 1;
    condition = info_mine_org_7_wichtigepersonen_condition;
    information = info_mine_org_7_wichtigepersonen_info;
    permanent = true;
    description = "Êòî çäåñü ãëàâíûé?";
};

func int info_mine_org_7_wichtigepersonen_condition() {
    return 1;
};

func void info_mine_org_7_wichtigepersonen_info() {
    ai_output(other, self, "Info_Mine_Org_7_WichtigePersonen_15_00"); //Êòî çäåñü ãëàâíûé?
    ai_output(self, other, "Info_Mine_Org_7_WichtigePersonen_07_01"); //Òîò, êîìó òû ïîä÷èíÿåøüñÿ.
    ai_output(self, other, "Info_Mine_Org_7_WichtigePersonen_07_02"); //Íî âñå ðàâíî, åñëè ÷òî-íèáóäü íóæíî Îêèëó, ëó÷øå íå ñïîðèòü. Îí áûâàåò â ÿðîñòè, êîãäà åãî îòøèâàþò.
};

instance info_mine_org_7_dielage(c_info) {
    nr = 1;
    condition = info_mine_org_7_dielage_condition;
    information = info_mine_org_7_dielage_info;
    permanent = true;
    description = "Êàê äåëà?";
};

func int info_mine_org_7_dielage_condition() {
    return 1;
};

func void info_mine_org_7_dielage_info() {
    ai_output(other, self, "Info_Mine_Org_7_DieLage_15_00"); //Òû êàê?
    ai_output(self, other, "Info_Mine_Org_7_DieLage_07_01"); //Ïàðåíü, òû äåéñòâóåøü ìíå íà íåðâû!
};

func void b_assignambientinfos_mine_org_7(var c_npc slf) {
    info_mine_org_7_exit.npc = hlp_getinstanceid(slf);
    info_mine_org_7_mine.npc = hlp_getinstanceid(slf);
    info_mine_org_7_wichtigepersonen.npc = hlp_getinstanceid(slf);
    info_mine_org_7_dielage.npc = hlp_getinstanceid(slf);
};

instance info_mine_sld_11_exit(c_info) {
    nr = 999;
    condition = info_mine_sld_11_exit_condition;
    information = info_mine_sld_11_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_mine_sld_11_exit_condition() {
    return 1;
};

func void info_mine_sld_11_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_mine_sld_11_einervoneuchwerden(c_info) {
    nr = 4;
    condition = info_mine_sld_11_einervoneuchwerden_condition;
    information = info_mine_sld_11_einervoneuchwerden_info;
    permanent = true;
    description = "Êàê ñòàòü îäíèì èç âàñ?";
};

func int info_mine_sld_11_einervoneuchwerden_condition() {
    if ((((npc_gettrueguild(other) != gil_sld) && (npc_gettrueguild(other) != gil_kdw)) && (!c_npcbelongstooldcamp(other))) && (!c_npcbelongstopsicamp(other))) {
        return true;
    };
};

func void info_mine_sld_11_einervoneuchwerden_info() {
    ai_output(other, self, "Info_Mine_Sld_11_EinerVonEuchWerden_15_00"); //Êàê ìíå ñòàòü îäíèì èç âàñ?
    ai_output(self, other, "Info_Mine_Sld_11_EinerVonEuchWerden_011_01"); //Ïðåæäå ÷åì ñòàòü îäíèì èç íàñ, òû äîëæåí êàê-òî ïðîÿâèòü ñåáÿ.
    ai_output(self, other, "Info_Mine_Sld_11_EinerVonEuchWerden_011_02"); //Ïîêàæè, íà ÷òî òû ñïîñîáåí, è ìîæåò áûòü òîãäà òåáå ïîçâîëÿò ïðèñëóæèâàòü â Ëîùèíå.
};

instance info_mine_sld_11_wichtigepersonen(c_info) {
    nr = 3;
    condition = info_mine_sld_11_wichtigepersonen_condition;
    information = info_mine_sld_11_wichtigepersonen_info;
    permanent = true;
    description = "Êòî çäåñü êîìàíäóåò?";
};

func int info_mine_sld_11_wichtigepersonen_condition() {
    return 1;
};

func void info_mine_sld_11_wichtigepersonen_info() {
    ai_output(other, self, "Info_Mine_Sld_11_WichtigePersonen_15_00"); //Êòî çäåñü êîìàíäóåò?
    ai_output(self, other, "Info_Mine_Sld_11_WichtigePersonen_011_01"); //Çäåñü, â Ëîùèíå, âñå äåëàþò òàê, êàê ñêàæåò Îêèë. Îí çíàêîì ñî âñåìè áîëüøèìè øèøêàìè â Ëàãåðå.
    ai_output(self, other, "Info_Mine_Sld_11_WichtigePersonen_011_02"); //Òàê ÷òî åñëè òû ñäåëàåøü ÷òî-íèáóäü íå òàê, ìàãè Âîäû â Íîâîì Ëàãåðå îáÿçàòåëüíî îá ýòîì óçíàþò.
};

instance info_mine_sld_11_daslager(c_info) {
    nr = 2;
    condition = info_mine_sld_11_daslager_condition;
    information = info_mine_sld_11_daslager_info;
    permanent = true;
    description = "×òî-íèáóäü èíòåðåñíîå?";
};

func int info_mine_sld_11_daslager_condition() {
    return 1;
};

func void info_mine_sld_11_daslager_info() {
    ai_output(other, self, "Info_Mine_Sld_11_DasLager_15_00"); //×òî-íèáóäü åùå?
    ai_output(self, other, "Info_Mine_Sld_11_DasLager_011_01"); //Ñäåëàåøü êàêóþ-íèáóäü ãëóïîñòü - çàðàáîòàåøü êó÷ó ïðîáëåì íà ñâîþ çàäíèöó. À òàê áîëüøå íè÷åãî...
    ai_output(self, other, "Info_Mine_Sld_11_DasLager_011_02"); //Äà, è ïðîáëåì áóäåò êóäà áîëüøå, åñëè òû ïîïûòàåøüñÿ áåç ðàçðåøåíèÿ ïðîíèêíóòü â øàõòó èëè â êàðàóëêó.
};

instance info_mine_sld_11_dielage(c_info) {
    nr = 1;
    condition = info_mine_sld_11_dielage_condition;
    information = info_mine_sld_11_dielage_info;
    permanent = true;
    description = "Êàê äåëà?";
};

func int info_mine_sld_11_dielage_condition() {
    return 1;
};

func void info_mine_sld_11_dielage_info() {
    ai_output(other, self, "Info_Mine_Sld_11_DieLage_15_00"); //Êàê äåëà?
    ai_output(self, other, "Info_Mine_Sld_11_DieLage_011_01"); //Âñå òèõî. Ñëèøîì òèõî, ïî-ìîåìó.
};

func void b_assignambientinfos_mine_sld_11(var c_npc slf) {
    info_mine_sld_11_exit.npc = hlp_getinstanceid(slf);
    info_mine_sld_11_einervoneuchwerden.npc = hlp_getinstanceid(slf);
    info_mine_sld_11_wichtigepersonen.npc = hlp_getinstanceid(slf);
    info_mine_sld_11_daslager.npc = hlp_getinstanceid(slf);
    info_mine_sld_11_dielage.npc = hlp_getinstanceid(slf);
};

instance info_mine_sld_8_exit(c_info) {
    nr = 999;
    condition = info_mine_sld_8_exit_condition;
    information = info_mine_sld_8_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_mine_sld_8_exit_condition() {
    return 1;
};

func void info_mine_sld_8_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_mine_sld_8_einervoneuchwerden(c_info) {
    nr = 4;
    condition = info_mine_sld_8_einervoneuchwerden_condition;
    information = info_mine_sld_8_einervoneuchwerden_info;
    permanent = true;
    description = "ß ìîãó ïðèñîåäèíèòüñÿ ê âàøåìó îòðÿäó?";
};

func int info_mine_sld_8_einervoneuchwerden_condition() {
    if ((((npc_gettrueguild(other) != gil_sld) && (npc_gettrueguild(other) != gil_kdw)) && (!c_npcbelongstooldcamp(other))) && (!c_npcbelongstopsicamp(other))) {
        return true;
    };
};

func void info_mine_sld_8_einervoneuchwerden_info() {
    ai_output(other, self, "Info_Mine_Sld_8_EinerVonEuchWerden_15_00"); //ß ìîãó ïðèñîåäèíèòüñÿ ê âàøåìó îòðÿäó?
    ai_output(self, other, "Info_Mine_Sld_8_EinerVonEuchWerden_08_01"); //Åñëè òû õî÷åøü ðàáîòàòü çäåñü, â Ëîùèíå, ïðåæäå òû äîëæåí ïðîáèòüñÿ íàâåðõ â Íîâîì Ëàãåðå.
    ai_output(self, other, "Info_Mine_Sld_8_EinerVonEuchWerden_08_02"); //Ðàññïðîñè ëþäåé òàì.
};

instance info_mine_sld_8_wichtigepersonen(c_info) {
    nr = 3;
    condition = info_mine_sld_8_wichtigepersonen_condition;
    information = info_mine_sld_8_wichtigepersonen_info;
    permanent = true;
    description = "Êòî çäåñü êîìàíäóåò?";
};

func int info_mine_sld_8_wichtigepersonen_condition() {
    return 1;
};

func void info_mine_sld_8_wichtigepersonen_info() {
    ai_output(other, self, "Info_Mine_Sld_8_WichtigePersonen_15_00"); //Êòî çäåñü êîìàíäóåò?
    ai_output(self, other, "Info_Mine_Sld_8_WichtigePersonen_08_01"); //Â Ëîùèíå ãëàâíûé - Îêèë. Ëè çàïðàâëÿåò âñåì â Ëàãåðå.
    ai_output(self, other, "Info_Mine_Sld_8_WichtigePersonen_08_02"); //Òàê ÷òî òåáå ñòîèò ïîãîâîðèòü ñ îáîèìè.
};

instance info_mine_sld_8_daslager(c_info) {
    nr = 2;
    condition = info_mine_sld_8_daslager_condition;
    information = info_mine_sld_8_daslager_info;
    permanent = true;
    description = "×òî íîâîãî â Ëàãåðå?";
};

func int info_mine_sld_8_daslager_condition() {
    return 1;
};

func void info_mine_sld_8_daslager_info() {
    ai_output(other, self, "Info_Mine_Sld_8_DasLager_15_00"); //×òî íîâîãî â Ëàãåðå?
    ai_output(self, other, "Info_Mine_Sld_8_DasLager_08_01"); //Ìû îõðàíÿåì âõîä â øàõòó.
    ai_output(self, other, "Info_Mine_Sld_8_DasLager_08_02"); //Êðîìå íàøèõ ëþäåé, âíóòðü íå äîëæåí ïðîéòè íèêòî.
};

instance info_mine_sld_8_dielage(c_info) {
    nr = 1;
    condition = info_mine_sld_8_dielage_condition;
    information = info_mine_sld_8_dielage_info;
    permanent = true;
    description = "Âñå â ïîðÿäêå?";
};

func int info_mine_sld_8_dielage_condition() {
    return 1;
};

func void info_mine_sld_8_dielage_info() {
    ai_output(other, self, "Info_Mine_Sld_8_DieLage_15_00"); //Âñå â ïîðÿäêå?
    ai_output(self, other, "Info_Mine_Sld_8_DieLage_08_01"); //Ïî÷åìó òû ñïðàøèâàåøü? Âñå ïîä êîíòðîëåì.
};

func void b_assignambientinfos_mine_sld_8(var c_npc slf) {
    info_mine_sld_8_exit.npc = hlp_getinstanceid(slf);
    info_mine_sld_8_einervoneuchwerden.npc = hlp_getinstanceid(slf);
    info_mine_sld_8_wichtigepersonen.npc = hlp_getinstanceid(slf);
    info_mine_sld_8_daslager.npc = hlp_getinstanceid(slf);
    info_mine_sld_8_dielage.npc = hlp_getinstanceid(slf);
};

instance info_mine_vlk_1_exit(c_info) {
    nr = 999;
    condition = info_mine_vlk_1_exit_condition;
    information = info_mine_vlk_1_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_mine_vlk_1_exit_condition() {
    return 1;
};

func void info_mine_vlk_1_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_mine_vlk_1_mine(c_info) {
    nr = 4;
    condition = info_mine_vlk_1_mine_condition;
    information = info_mine_vlk_1_mine_info;
    permanent = true;
    description = "Ðàññêàæè ìíå î øàõòå.";
};

func int info_mine_vlk_1_mine_condition() {
    if (kapitel < 3) {
        return 1;
    };
};

func void info_mine_vlk_1_mine_info() {
    ai_output(other, self, "Info_Mine_Vlk_1_Mine_15_00"); //Ðàññêàæè ìíå î øàõòå.
    ai_output(self, other, "Info_Mine_Vlk_1_Mine_01_01"); //Â ïåùåðàõ ðàñòóò ãðèáû è ðàçíûå òðàâû. Èõ ëåã÷å âñåãî äîáûòü, íî äëÿ âîññòàíîâëåíèÿ ñèë íåò íè÷åãî ëó÷øå, ÷åì äîáðûé êóñîê ìÿñà.
    ai_output(self, other, "Info_Mine_Vlk_1_Mine_01_02"); //Ïîëçóíû, êîíå÷íî, íà äåëèêàòåñ íå òÿíóò. Ïîëíîå äåðüìî, åñëè ÷åñòíî.
};

instance info_mine_vlk_1_wichtigepersonen(c_info) {
    nr = 3;
    condition = info_mine_vlk_1_wichtigepersonen_condition;
    information = info_mine_vlk_1_wichtigepersonen_info;
    permanent = true;
    description = "Êòî çäåñü ãëàâíûé?";
};

func int info_mine_vlk_1_wichtigepersonen_condition() {
    if (kapitel < 3) {
        return 1;
    };
};

func void info_mine_vlk_1_wichtigepersonen_info() {
    ai_output(other, self, "Info_Mine_Vlk_1_WichtigePersonen_15_00"); //Êòî çäåñü ãëàâíûé?
    ai_output(self, other, "Info_Mine_Vlk_1_WichtigePersonen_01_01"); //Â øàõòå âñåì ðàñïîðÿæàåòñÿ ßí. Îí ñëåäèò çà ðàáîòîé è îðãàíèçóåò îáìåí ñ Ëàãåðåì. Åñëè òåáå ÷òî-íèáóäü íóæíî, ëó÷øå ïîãîâîðèòü ñ íèì.
};

instance info_mine_vlk_1_minecrawler(c_info) {
    nr = 2;
    condition = info_mine_vlk_1_minecrawler_condition;
    information = info_mine_vlk_1_minecrawler_info;
    permanent = true;
    description = "×òî òû çíàåøü î ïîëçóíàõ?";
};

func int info_mine_vlk_1_minecrawler_condition() {
    if (kapitel < 3) {
        return 1;
    };
};

func void info_mine_vlk_1_minecrawler_info() {
    ai_output(other, self, "Info_Mine_Vlk_1_Minecrawler_15_00"); //×òî òû çíàåøü î ïîëçóíàõ?
    ai_output(self, other, "Info_Mine_Vlk_1_Minecrawler_01_01"); //Ñòðàæè çàêëþ÷èëè ñ Ãîìåçîì ñäåëêó. Îíè óáèâàþò ïîëçóíîâ è çàáèðàþò æâàëû ýòèõ òâàðåé.
};

instance info_mine_vlk_1_dielage(c_info) {
    nr = 1;
    condition = info_mine_vlk_1_dielage_condition;
    information = info_mine_vlk_1_dielage_info;
    permanent = true;
    description = "Êàê äåëà?";
};

func int info_mine_vlk_1_dielage_condition() {
    if (kapitel < 3) {
        return 1;
    };
};

func void info_mine_vlk_1_dielage_info() {
    ai_output(other, self, "Info_Mine_Vlk_1_DieLage_15_00"); //Êàê äåëà?
    ai_output(self, other, "Info_Mine_Vlk_1_DieLage_01_01"); //Ìíîãî ðàáîòû, ìàëî îòäûõà. Òàê ÷òî äàâàé, ñïðàøèâàé ïîáûñòðåå. Ó ìåíÿ ïîëíî äåë.
};

func void b_assignambientinfos_mine_vlk_1(var c_npc slf) {
    info_mine_vlk_1_exit.npc = hlp_getinstanceid(slf);
    info_mine_vlk_1_minecrawler.npc = hlp_getinstanceid(slf);
    info_mine_vlk_1_mine.npc = hlp_getinstanceid(slf);
    info_mine_vlk_1_wichtigepersonen.npc = hlp_getinstanceid(slf);
    info_mine_vlk_1_dielage.npc = hlp_getinstanceid(slf);
};

instance info_mine_vlk_2_exit(c_info) {
    nr = 999;
    condition = info_mine_vlk_2_exit_condition;
    information = info_mine_vlk_2_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_mine_vlk_2_exit_condition() {
    return 1;
};

func void info_mine_vlk_2_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_mine_vlk_2_mine(c_info) {
    nr = 4;
    condition = info_mine_vlk_2_mine_condition;
    information = info_mine_vlk_2_mine_info;
    permanent = true;
    description = "Ðàññêàæè ìíå î øàõòå.";
};

func int info_mine_vlk_2_mine_condition() {
    if (kapitel < 3) {
        return 1;
    };
};

func void info_mine_vlk_2_mine_info() {
    ai_output(other, self, "Info_Mine_Vlk_2_Mine_15_00"); //Ðàññêàæè ìíå î øàõòå.
    ai_output(self, other, "Info_Mine_Vlk_2_Mine_01_01"); //Òàì ïîëíî ïåùåð, ãäå åùå îñòàëàñü ðóäà. Íî èç-çà ïîëçóíîâ äîáû÷ó ïðèøëîñü ïðåêðàòèòü.
    ai_output(self, other, "Info_Mine_Vlk_2_Mine_01_02"); //Ñëèøêîì ìíîãî àòàê, ñëèøêîì áîëüøèå ïîòåðè.
};

instance info_mine_vlk_2_wichtigepersonen(c_info) {
    nr = 3;
    condition = info_mine_vlk_2_wichtigepersonen_condition;
    information = info_mine_vlk_2_wichtigepersonen_info;
    permanent = true;
    description = "Êòî çäåñü ãëàâíûé?";
};

func int info_mine_vlk_2_wichtigepersonen_condition() {
    if (kapitel < 3) {
        return 1;
    };
};

func void info_mine_vlk_2_wichtigepersonen_info() {
    ai_output(other, self, "Info_Mine_Vlk_2_WichtigePersonen_15_00"); //Êòî çäåñü ãëàâíûé?
    ai_output(self, other, "Info_Mine_Vlk_2_WichtigePersonen_01_01"); //Âàéïåð, ïëàâèëüùèê. Îí çíàåò âñå ïðî ïå÷è, íå áîèòñÿ æàðà, äà è ñàì îí ñëîâíî èç æåëåçà ñäåëàí. Öåëûìè äíÿìè òîëüêî è äåëàåò, ÷òî ïëàâèò ðóäó.
};

instance info_mine_vlk_2_minecrawler(c_info) {
    nr = 2;
    condition = info_mine_vlk_2_minecrawler_condition;
    information = info_mine_vlk_2_minecrawler_info;
    permanent = true;
    description = "×òî òû çíàåøü î ïîëçóíàõ?";
};

func int info_mine_vlk_2_minecrawler_condition() {
    if (kapitel < 3) {
        return 1;
    };
};

func void info_mine_vlk_2_minecrawler_info() {
    ai_output(other, self, "Info_Mine_Vlk_2_Minecrawler_15_00"); //×òî òû çíàåøü î ïîëçóíàõ?
    ai_output(self, other, "Info_Mine_Vlk_2_Minecrawler_01_01"); //Ìû áûëè âûíóæäåíû çàêðûòü áîëüøîé çàáîé âíèçó. Ñëèøêîì ìíîãî ýòèõ òâàðåé.
    ai_output(self, other, "Info_Mine_Vlk_2_Minecrawler_01_02"); //Ïîëçóíû òàì ïîâñþäó. Òû èõ ñëûøèøü? ß òî÷íî ñëûøó.
};

instance info_mine_vlk_2_dielage(c_info) {
    nr = 1;
    condition = info_mine_vlk_2_dielage_condition;
    information = info_mine_vlk_2_dielage_info;
    permanent = true;
    description = "Êàê äåëà?";
};

func int info_mine_vlk_2_dielage_condition() {
    if (kapitel < 3) {
        return 1;
    };
};

func void info_mine_vlk_2_dielage_info() {
    ai_output(other, self, "Info_Mine_Vlk_2_DieLage_15_00"); //Êàê äåëà?
    ai_output(self, other, "Info_Mine_Vlk_2_DieLage_01_01"); //ß äîëæåí ðàáîòàòü. Åñëè ñòðàæíèêè óâèäÿò, ÷òî ÿ ñ òîáîé áîëòàþ, ìíå óðåæóò ïàåê.
};

func void b_assignambientinfos_mine_vlk_2(var c_npc slf) {
    info_mine_vlk_2_exit.npc = hlp_getinstanceid(slf);
    info_mine_vlk_2_minecrawler.npc = hlp_getinstanceid(slf);
    info_mine_vlk_2_mine.npc = hlp_getinstanceid(slf);
    info_mine_vlk_2_wichtigepersonen.npc = hlp_getinstanceid(slf);
    info_mine_vlk_2_dielage.npc = hlp_getinstanceid(slf);
};

instance info_mine_vlk_3_exit(c_info) {
    nr = 999;
    condition = info_mine_vlk_3_exit_condition;
    information = info_mine_vlk_3_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_mine_vlk_3_exit_condition() {
    return 1;
};

func void info_mine_vlk_3_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_mine_vlk_3_mine(c_info) {
    nr = 4;
    condition = info_mine_vlk_3_mine_condition;
    information = info_mine_vlk_3_mine_info;
    permanent = true;
    description = "Ðàññêàæè ìíå î øàõòå.";
};

func int info_mine_vlk_3_mine_condition() {
    if (kapitel < 3) {
        return 1;
    };
};

func void info_mine_vlk_3_mine_info() {
    ai_output(other, self, "Info_Mine_Vlk_3_Mine_15_00"); //Ðàññêàæè ìíå î øàõòå.
    ai_output(self, other, "Info_Mine_Vlk_3_Mine_01_01"); //Ìû âñå îáðå÷åíû âêàëûâàòü çäåñü äî êîíöà ñâîèõ äíåé. Íå ïîäíèìàÿñü íàâåðõ, ãîäàìè íå âèäÿ ñîëíöà. Âûõîäà íåò. Åäèíñòâåííûé ñïîñîá âûáðàòüñÿ îòñþäà - óìåðåòü.
};

instance info_mine_vlk_3_wichtigepersonen(c_info) {
    nr = 3;
    condition = info_mine_vlk_3_wichtigepersonen_condition;
    information = info_mine_vlk_3_wichtigepersonen_info;
    permanent = true;
    description = "Êòî çäåñü êîìàíäóåò?";
};

func int info_mine_vlk_3_wichtigepersonen_condition() {
    if (kapitel < 3) {
        return 1;
    };
};

func void info_mine_vlk_3_wichtigepersonen_info() {
    ai_output(other, self, "Info_Mine_Vlk_3_WichtigePersonen_15_00"); //Êòî çäåñü êîìàíäóåò?
    ai_output(self, other, "Info_Mine_Vlk_3_WichtigePersonen_01_01"); //ßí - ãëàâíûé â øàõòå, Àñãõàí êîìàíäóåò ñòðàæíèêàìè.
};

instance info_mine_vlk_3_minecrawler(c_info) {
    nr = 2;
    condition = info_mine_vlk_3_minecrawler_condition;
    information = info_mine_vlk_3_minecrawler_info;
    permanent = true;
    description = "×òî òû çíàåøü î ïîëçóíàõ?";
};

func int info_mine_vlk_3_minecrawler_condition() {
    if (kapitel < 3) {
        return 1;
    };
};

func void info_mine_vlk_3_minecrawler_info() {
    ai_output(other, self, "Info_Mine_Vlk_3_Minecrawler_15_00"); //×òî òû çíàåøü î ïîëçóíàõ?
    ai_output(self, other, "Info_Mine_Vlk_3_Minecrawler_01_01"); //Òû èìååøü â âèäó, ÷òî íóæíî äåëàòü ïðè âñòðå÷å ñ íèìè? Áåæàòü. Óíîñèòü íîãè òàê áûñòðî, êàê òîëüêî ñìîæåøü.
    ai_output(self, other, "Info_Mine_Vlk_3_Minecrawler_01_02"); //Åñëè ïîòåðÿåøüñÿ - âñå , êîíåö. Èñêàòü òåáÿ íèêòî íå áóäåò.
};

instance info_mine_vlk_3_dielage(c_info) {
    nr = 1;
    condition = info_mine_vlk_3_dielage_condition;
    information = info_mine_vlk_3_dielage_info;
    permanent = true;
    description = "Êàê äåëà?";
};

func int info_mine_vlk_3_dielage_condition() {
    if (kapitel < 3) {
        return 1;
    };
};

func void info_mine_vlk_3_dielage_info() {
    ai_output(other, self, "Info_Mine_Vlk_3_DieLage_15_00"); //Êàê äåëà?
    ai_output(self, other, "Info_Mine_Vlk_3_DieLage_01_01"); //Íó, ó ìåíÿ äèêî áîëèò ñïèíà, ðóêè, êàæåòñÿ, ñåé÷àñ îòâàëÿòñÿ, â ãëîòêå ïåðåñîõëî, è âîîáùå, ÿ óñòàë, êàê ñîáàêà.
    ai_output(self, other, "Info_Mine_Vlk_3_DieLage_01_02"); //È ýòîò íåïðåðûâíûé ñòóê ìåäëåííî ñâîäèò ìåíÿ ñ óìà.
};

func void b_assignambientinfos_mine_vlk_3(var c_npc slf) {
    info_mine_vlk_3_exit.npc = hlp_getinstanceid(slf);
    info_mine_vlk_3_minecrawler.npc = hlp_getinstanceid(slf);
    info_mine_vlk_3_mine.npc = hlp_getinstanceid(slf);
    info_mine_vlk_3_wichtigepersonen.npc = hlp_getinstanceid(slf);
    info_mine_vlk_3_dielage.npc = hlp_getinstanceid(slf);
};

instance info_mine_vlk_4_exit(c_info) {
    nr = 999;
    condition = info_mine_vlk_4_exit_condition;
    information = info_mine_vlk_4_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_mine_vlk_4_exit_condition() {
    return 1;
};

func void info_mine_vlk_4_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_mine_vlk_4_mine(c_info) {
    nr = 4;
    condition = info_mine_vlk_4_mine_condition;
    information = info_mine_vlk_4_mine_info;
    permanent = true;
    description = "Ðàññêàæè ìíå î øàõòå.";
};

func int info_mine_vlk_4_mine_condition() {
    if (kapitel < 3) {
        return 1;
    };
};

func void info_mine_vlk_4_mine_info() {
    ai_output(other, self, "Info_Mine_Vlk_4_Mine_15_00"); //Ðàññêàæè ìíå î øàõòå.
    ai_output(self, other, "Info_Mine_Vlk_4_Mine_01_01"); //Êèðêà è ïîò - âîò è âñå, ÷òî çäåñü åñòü. Òû ïðèøåë è ñêîðî óéäåøü...
    ai_output(self, other, "Info_Mine_Vlk_4_Mine_01_02"); //À ÿ îñòàíóñü çäåñü, âûðóáàÿ ýòó ÷åðòîâó ðóäó èç ñêàëû. Ýòî ìîÿ ðàáîòà. Ýòî ìîÿ æèçíü.
};

instance info_mine_vlk_4_wichtigepersonen(c_info) {
    nr = 3;
    condition = info_mine_vlk_4_wichtigepersonen_condition;
    information = info_mine_vlk_4_wichtigepersonen_info;
    permanent = true;
    description = "Êòî çäåñü ãëàâíûé?";
};

func int info_mine_vlk_4_wichtigepersonen_condition() {
    if (kapitel < 3) {
        return 1;
    };
};

func void info_mine_vlk_4_wichtigepersonen_info() {
    ai_output(other, self, "Info_Mine_Vlk_4_WichtigePersonen_15_00"); //Êòî çäåñü ãëàâíûé?
    ai_output(self, other, "Info_Mine_Vlk_4_WichtigePersonen_01_01"); //Ñàíòèíî è Àëüáåðòî âûìåíèâàþò òîâàðû íà ðóäó, êîòîðóþ ìû äîáûâàåì. Îíè æå ðàçäàþò íàì äíåâíîé ïàåê.
};

instance info_mine_vlk_4_minecrawler(c_info) {
    nr = 2;
    condition = info_mine_vlk_4_minecrawler_condition;
    information = info_mine_vlk_4_minecrawler_info;
    permanent = true;
    description = "×òî òû çíàåøü î ïîëçóíàõ?";
};

func int info_mine_vlk_4_minecrawler_condition() {
    if (kapitel < 3) {
        return 1;
    };
};

func void info_mine_vlk_4_minecrawler_info() {
    ai_output(other, self, "Info_Mine_Vlk_4_Minecrawler_15_00"); //×òî òû çíàåøü î ïîëçóíàõ?
    ai_output(self, other, "Info_Mine_Vlk_4_Minecrawler_01_01"); //Åñëè âñòðåòèøü îäíó èç ýòèõ òâàðåé, âðåæü åé õîðîøåíüêî êèðêîé ïðîìåæ ãëàç. Òîëüêî íóæíî õîðîøåíüêî ïðèöåëèòüñÿ - âòîðîãî øàíñà ó òåáÿ íå áóäåò.
};

instance info_mine_vlk_4_dielage(c_info) {
    nr = 1;
    condition = info_mine_vlk_4_dielage_condition;
    information = info_mine_vlk_4_dielage_info;
    permanent = true;
    description = "Êàê äåëà?";
};

func int info_mine_vlk_4_dielage_condition() {
    if (kapitel < 3) {
        return 1;
    };
};

func void info_mine_vlk_4_dielage_info() {
    ai_output(other, self, "Info_Mine_Vlk_4_DieLage_15_00"); //Êàê äåëà?
    ai_output(self, other, "Info_Mine_Vlk_4_DieLage_01_01"); //Áûâàëî è ëó÷øå.
};

func void b_assignambientinfos_mine_vlk_4(var c_npc slf) {
    info_mine_vlk_4_exit.npc = hlp_getinstanceid(slf);
    info_mine_vlk_4_minecrawler.npc = hlp_getinstanceid(slf);
    info_mine_vlk_4_mine.npc = hlp_getinstanceid(slf);
    info_mine_vlk_4_wichtigepersonen.npc = hlp_getinstanceid(slf);
    info_mine_vlk_4_dielage.npc = hlp_getinstanceid(slf);
};

instance info_nov_2_exit(c_info) {
    nr = 999;
    condition = info_nov_2_exit_condition;
    information = info_nov_2_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_nov_2_exit_condition() {
    return 1;
};

func void info_nov_2_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_nov_2_einervoneuchwerden(c_info) {
    nr = 4;
    condition = info_nov_2_einervoneuchwerden_condition;
    information = info_nov_2_einervoneuchwerden_info;
    permanent = true;
    description = "ß õî÷ó ïðèñîåäèíèòüñÿ ê âàì.";
};

func int info_nov_2_einervoneuchwerden_condition() {
    if (npc_gettrueguild(other) == gil_none) {
        return true;
    };
};

func void info_nov_2_einervoneuchwerden_info() {
    var c_npc corkalom;

    ai_output(other, self, "Info_Nov_2_EinerVonEuchWerden_15_00"); //ß õî÷ó ïðèñîåäèíèòüñÿ ê âàì.
    ai_output(self, other, "Info_Nov_2_EinerVonEuchWerden_02_01"); //Òû ðåøèë ïîñëóæèòü Ñïÿùåìó? Ïåðåä òîáîé îòêðûò ïóòü ê óäà÷å è ïðîöâåòàíèþ!
    ai_output(self, other, "Info_Nov_2_EinerVonEuchWerden_02_02"); //Ïîãîâîðè ñ Êîð Ãàëîìîì. Îí ðåøèò, ÷åì òåáå ëó÷øå çàíèìàòüñÿ.
    corkalom = hlp_getnpc(gur_1201_corkalom);
    corkalom.aivar[7] = true;
};

instance info_nov_2_wichtigepersonen(c_info) {
    nr = 3;
    condition = info_nov_2_wichtigepersonen_condition;
    information = info_nov_2_wichtigepersonen_info;
    permanent = true;
    description = "Êòî âîçãëàâëÿåò âàñ?";
};

func int info_nov_2_wichtigepersonen_condition() {
    return 1;
};

func void info_nov_2_wichtigepersonen_info() {
    var c_npc yberion;
    var c_npc corkalom;
    var c_npc corangar;

    ai_output(other, self, "Info_Nov_2_WichtigePersonen_15_00"); //Êòî âîçãëàâëÿåò âàñ?
    ai_output(self, other, "Info_Nov_2_WichtigePersonen_02_01"); //Íàøè íàñòàâíèêè - Þ`Áåðèîí, Êîð Ãàëîì è Êîð Àíãàð.
    ai_output(self, other, "Info_Nov_2_WichtigePersonen_02_02"); //Îíè äàðóþò íàì ñâÿçü ñî Ñïÿùèì. Âî âðåìÿ Öåðåìîíèè îíè îáùàþòñÿ ñ íèì.
    yberion = hlp_getnpc(gur_1200_yberion);
    corkalom = hlp_getnpc(gur_1201_corkalom);
    corangar = hlp_getnpc(gur_1202_corangar);
    yberion.aivar[7] = true;
    corkalom.aivar[7] = true;
    corangar.aivar[7] = true;
};

instance info_nov_2_daslager(c_info) {
    nr = 2;
    condition = info_nov_2_daslager_condition;
    information = info_nov_2_daslager_info;
    permanent = true;
    description = "Ðàññêàæè ìíå îá ýòîì ìåñòå.";
};

func int info_nov_2_daslager_condition() {
    return 1;
};

func void info_nov_2_daslager_info() {
    ai_output(other, self, "Info_Nov_2_DasLager_15_00"); //Ðàññêàæè ìíå îá ýòîì ìåñòå.
    ai_output(self, other, "Info_Nov_2_DasLager_02_01"); //Ýòî ìåñòî âåðû, áðàò. Âñå, ÷òî ó íàñ åñòü, ìû ãîòîâû ðàçäåëèòü ñ êàæäûì, êòî âåðèò â ó÷åíèå Ñïÿùåãî.
    ai_output(self, other, "Info_Nov_2_DasLager_02_02"); //Ïîãîâîðè ñ îäíèì èç Ãóðó, îáîãàòè ñâîþ äóøó.
};

instance info_nov_2_dielage(c_info) {
    nr = 1;
    condition = info_nov_2_dielage_condition;
    information = info_nov_2_dielage_info;
    permanent = true;
    description = "Êàê äåëà?";
};

func int info_nov_2_dielage_condition() {
    return 1;
};

func void info_nov_2_dielage_info() {
    ai_output(other, self, "Info_Nov_2_DieLage_15_00"); //Êàê äåëà?
    ai_output(self, other, "Info_Nov_2_DieLage_02_01"); //Ó ìåíÿ íå òàê ìíîãî âðåìåíè. Âñåãäà åñòü äåëà.
};

func void b_assignambientinfos_nov_2(var c_npc slf) {
    b_assignfindnpc_st(slf);
    info_nov_2_exit.npc = hlp_getinstanceid(slf);
    info_nov_2_einervoneuchwerden.npc = hlp_getinstanceid(slf);
    info_nov_2_wichtigepersonen.npc = hlp_getinstanceid(slf);
    info_nov_2_daslager.npc = hlp_getinstanceid(slf);
    info_nov_2_dielage.npc = hlp_getinstanceid(slf);
};

instance info_nov_3_exit(c_info) {
    nr = 999;
    condition = info_nov_3_exit_condition;
    information = info_nov_3_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_nov_3_exit_condition() {
    return 1;
};

func void info_nov_3_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_nov_3_einervoneuchwerden(c_info) {
    nr = 4;
    condition = info_nov_3_einervoneuchwerden_condition;
    information = info_nov_3_einervoneuchwerden_info;
    permanent = true;
    description = "Êàê ìíå ïðèñîåäèíèòüñÿ ê ýòîìó Ëàãåðþ?";
};

func int info_nov_3_einervoneuchwerden_condition() {
    if (npc_gettrueguild(other) == gil_none) {
        return true;
    };
};

func void info_nov_3_einervoneuchwerden_info() {
    ai_output(other, self, "Info_Nov_3_EinerVonEuchWerden_15_00"); //Êàê ìíå ïðèñîåäèíèòüñÿ ê ýòîìó Ëàãåðþ?
    ai_output(self, other, "Info_Nov_3_EinerVonEuchWerden_03_01"); //Ýòî î÷åíü ïðîñòî. Èäè, äðóã.
    ai_output(self, other, "Info_Nov_3_EinerVonEuchWerden_03_02"); //Ïîãîâîðè ñ Ãóðó - îíè íàñòàâÿò òåáÿ íà ïóòü èñòèííûé.
};

instance info_nov_3_wichtigepersonen(c_info) {
    nr = 3;
    condition = info_nov_3_wichtigepersonen_condition;
    information = info_nov_3_wichtigepersonen_info;
    permanent = true;
    description = "Êòî çäåñü ãëàâíûé?";
};

func int info_nov_3_wichtigepersonen_condition() {
    return 1;
};

func void info_nov_3_wichtigepersonen_info() {
    ai_output(other, self, "Info_Nov_3_WichtigePersonen_15_00"); //Êòî çäåñü ãëàâíûé?
    ai_output(self, other, "Info_Nov_3_WichtigePersonen_03_01"); //Þ`Áåðèîí! Õâàëà Ñïÿùåìó! Îí ïðèâåë íàñ â ýòî ñëàâíîå ìåñòî.
    ai_output(self, other, "Info_Nov_3_WichtigePersonen_03_02"); //Âñå ýòî áûëî ñîçäàíî ïî åãî âîëå.
};

instance info_nov_3_daslager(c_info) {
    nr = 2;
    condition = info_nov_3_daslager_condition;
    information = info_nov_3_daslager_info;
    permanent = true;
    description = "Íà ÷òî çäåñü ñòîèò îáðàòèòü âíèìàíèå? ";
};

func int info_nov_3_daslager_condition() {
    return 1;
};

func void info_nov_3_daslager_info() {
    var c_npc corkalom;

    ai_output(other, self, "Info_Nov_3_DasLager_15_00"); //Ðàññêàæè ìíå ÷òî-íèáóäü îá ýòîì ìåñòå.
    ai_output(self, other, "Info_Nov_3_DasLager_03_01"); //Çäåñü åñòü òàêîé Ôîðòóíî. Îí áåñïëàòíî äàåò áîëîòíèê âñåì ïîñëåäîâàòåëÿì ñåêòû.
    ai_output(self, other, "Info_Nov_3_DasLager_03_02"); //Òû íàéäåøü åãî ïîä ëàáîðàòîðèåé Êîð Ãàëîìà.
    corkalom = hlp_getnpc(gur_1201_corkalom);
    corkalom.aivar[7] = true;
};

instance info_nov_3_dielage(c_info) {
    nr = 1;
    condition = info_nov_3_dielage_condition;
    information = info_nov_3_dielage_info;
    permanent = true;
    description = "Êàê äåëà?";
};

func int info_nov_3_dielage_condition() {
    return 1;
};

func void info_nov_3_dielage_info() {
    ai_output(other, self, "Info_Nov_3_DieLage_15_00"); //Êàê äåëà?
    ai_output(self, other, "Info_Nov_3_DieLage_03_01"); //ß íà íåáåñàõ, ïðèÿòåëü!
};

func void b_assignambientinfos_nov_3(var c_npc slf) {
    b_assignfindnpc_st(slf);
    info_nov_3_exit.npc = hlp_getinstanceid(slf);
    info_nov_3_einervoneuchwerden.npc = hlp_getinstanceid(slf);
    info_nov_3_wichtigepersonen.npc = hlp_getinstanceid(slf);
    info_nov_3_daslager.npc = hlp_getinstanceid(slf);
    info_nov_3_dielage.npc = hlp_getinstanceid(slf);
};

instance info_nov_5_exit(c_info) {
    nr = 999;
    condition = info_nov_5_exit_condition;
    information = info_nov_5_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_nov_5_exit_condition() {
    return 1;
};

func void info_nov_5_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_nov_5_einervoneuchwerden(c_info) {
    nr = 4;
    condition = info_nov_5_einervoneuchwerden_condition;
    information = info_nov_5_einervoneuchwerden_info;
    permanent = true;
    description = "Êàê ìíå ïðèñîåäèíèòüñÿ ê ýòîìó Ëàãåðþ?";
};

func int info_nov_5_einervoneuchwerden_condition() {
    if (npc_gettrueguild(other) == gil_none) {
        return true;
    };
};

func void info_nov_5_einervoneuchwerden_info() {
    ai_output(other, self, "Info_Nov_5_EinerVonEuchWerden_15_00"); //Êàê ìîæíî ïðèñîåäèíèòüñÿ ê ýòîìó Ëàãåðþ?
    ai_output(self, other, "Info_Nov_5_EinerVonEuchWerden_05_01"); //Íåò íè÷åãî ïðîùå. Ïîãîâîðè ñ ìëàäøèìè Ãóðó, îíè ïîìîãóò òåáå.
    ai_output(self, other, "Info_Nov_5_EinerVonEuchWerden_05_02"); //Òåáå çäåñü ïîíðàâèòñÿ, âîò óâèäèøü.
};

instance info_nov_5_wichtigepersonen(c_info) {
    nr = 3;
    condition = info_nov_5_wichtigepersonen_condition;
    information = info_nov_5_wichtigepersonen_info;
    permanent = true;
    description = "Êòî çäåñü êîìàíäóåò?";
};

func int info_nov_5_wichtigepersonen_condition() {
    return 1;
};

func void info_nov_5_wichtigepersonen_info() {
    ai_output(other, self, "Info_Nov_5_WichtigePersonen_15_00"); //Êòî çäåñü êîìàíäóåò?
    ai_output(self, other, "Info_Nov_5_WichtigePersonen_05_01"); //Çäåñü âñå ïîä âëàñòüþ Ãóðó. Íî åñëè òû íå áóäåøü ïðèâëåêàòü ê ñåáå âíèìàíèÿ, îíè òåáÿ íå òðîíóò.
};

instance info_nov_5_daslager(c_info) {
    nr = 2;
    condition = info_nov_5_daslager_condition;
    information = info_nov_5_daslager_info;
    permanent = true;
    description = "Ðàññêàæè ìíå îá ýòîì Ëàãåðå.";
};

func int info_nov_5_daslager_condition() {
    return 1;
};

func void info_nov_5_daslager_info() {
    var c_npc corkalom;

    ai_output(other, self, "Info_Nov_5_DasLager_15_00"); //Ðàññêàæè ìíå îá ýòîì Ëàãåðå.
    ai_output(self, other, "Info_Nov_5_DasLager_05_01"); //Ýòî ëó÷øåå ìåñòî âî âñåé Áîãîì çàáûòîé êîëîíèè.
    ai_output(self, other, "Info_Nov_5_DasLager_05_02"); //Äàæå åñëè òû íå âåðèøü â ó÷åíèå Ñïÿùåãî, òû âñå ðàâíî ïîëó÷èøü çäåñü åäó è áîëîòíèê. Âñå ÷òî òåáå íóæíî, ýòî ïîãîâîðèòü ñ Ôîðòóíî.
    ai_output(other, self, "Info_Nov_5_DasLager_15_03"); //Ãäå ìíå åãî íàéòè?
    ai_output(self, other, "Info_Nov_5_DasLager_05_04"); //Ïîä ëàáîðàòîðèåé Êîð Ãàëîìà, ðàäîì ñî âíóòðåííèì äâîðîì õðàìà.
    corkalom = hlp_getnpc(gur_1201_corkalom);
    corkalom.aivar[7] = true;
};

instance info_nov_5_dielage(c_info) {
    nr = 1;
    condition = info_nov_5_dielage_condition;
    information = info_nov_5_dielage_info;
    permanent = true;
    description = "Êàê äåëà?";
};

func int info_nov_5_dielage_condition() {
    return 1;
};

func void info_nov_5_dielage_info() {
    ai_output(other, self, "Info_Nov_5_DieLage_15_00"); //Êàê äåëà?
    ai_output(self, other, "Info_Nov_5_DieLage_05_01"); //Ïîæàëîâàòüñÿ íå íà ÷òî. Ñêàæè, òû íîâåíüêèé?
    ai_output(other, self, "Info_Nov_5_DieLage_15_02"); //ß òîëüêî ÷òî ïðèáûë.
};

func void b_assignambientinfos_nov_5(var c_npc slf) {
    b_assignfindnpc_st(slf);
    info_nov_5_exit.npc = hlp_getinstanceid(slf);
    info_nov_5_einervoneuchwerden.npc = hlp_getinstanceid(slf);
    info_nov_5_wichtigepersonen.npc = hlp_getinstanceid(slf);
    info_nov_5_daslager.npc = hlp_getinstanceid(slf);
    info_nov_5_dielage.npc = hlp_getinstanceid(slf);
};

instance info_orc_17_exit(c_info) {
    nr = 999;
    condition = info_orc_17_exit_condition;
    information = info_orc_17_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_orc_17_exit_condition() {
    return 1;
};

func void info_orc_17_exit_info() {
    ai_stopprocessinfos(self);
};

func void b_assignambientinfos_orc_17(var c_npc slf) {
    info_orc_17_exit.npc = hlp_getinstanceid(slf);
};

instance info_org_13_exit(c_info) {
    nr = 999;
    condition = info_org_13_exit_condition;
    information = info_org_13_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_org_13_exit_condition() {
    return 1;
};

func void info_org_13_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_org_13_einervoneuchwerden(c_info) {
    nr = 4;
    condition = info_org_13_einervoneuchwerden_condition;
    information = info_org_13_einervoneuchwerden_info;
    permanent = true;
    description = "×òî íóæíî ñäåëàòü, äëÿ òîãî ÷òîáû ïðèñîåäèíèòüñÿ ê ýòîìó Ëàãåðþ?";
};

func int info_org_13_einervoneuchwerden_condition() {
    if (npc_gettrueguild(other) == gil_none) {
        return true;
    };
};

func void info_org_13_einervoneuchwerden_info() {
    ai_output(other, self, "Info_Org_13_EinerVonEuchWerden_15_00"); //×òî íóæíî ñäåëàòü, ÷òîáû ïðèñîåäèíèòüñÿ ê Ëàãåðþ?
    ai_output(self, other, "Info_Org_13_EinerVonEuchWerden_13_01"); //Îòïðàâëÿéñÿ íà ïîëÿ è ïîìîãè êðåñòüÿíàì ñîáðàòü ðèñ.
};

instance info_org_13_wichtigepersonen(c_info) {
    nr = 3;
    condition = info_org_13_wichtigepersonen_condition;
    information = info_org_13_wichtigepersonen_info;
    permanent = true;
    description = "Êòî çäåñü êîìàíäóåò?";
};

func int info_org_13_wichtigepersonen_condition() {
    return 1;
};

func void info_org_13_wichtigepersonen_info() {
    var c_npc lee;

    ai_output(other, self, "Info_Org_13_WichtigePersonen_15_00"); //Êòî çäåñü ãëàâíûé?
    ai_output(self, other, "Info_Org_13_WichtigePersonen_13_01"); //Ëè êîìàíäóåò íàåìíèêàìè, åñëè òû ÝÒÎ èìååøü â âèäó. Íî ÿ íå íàåìíèê, è áóäü ÿ ïðîêëÿò, åñëè ÿ ïîçâîëþ èì ïîìûêàòü ìíîé!
    lee = hlp_getnpc(sld_700_lee);
    lee.aivar[7] = true;
};

instance info_org_13_daslager(c_info) {
    nr = 2;
    condition = info_org_13_daslager_condition;
    information = info_org_13_daslager_info;
    permanent = true;
    description = "Ðàññêàæè ìíå î Ëàãåðå.";
};

func int info_org_13_daslager_condition() {
    return 1;
};

func void info_org_13_daslager_info() {
    ai_output(other, self, "Info_Org_13_DasLager_15_00"); //Ìíå õîòåëîñü áû áîëüøå óçíàòü îá ýòîì Ëàãåðå.
    ai_output(self, other, "Info_Org_13_DasLager_13_01"); //Òîãäà èäè è îñìîòðè âñå ñàì. Òû íå ðàáîòàåøü íà Ãîìåçà, òàê ÷òî íèêòî òåáÿ íå îñòàíîâèò.
};

instance info_org_13_dielage(c_info) {
    nr = 1;
    condition = info_org_13_dielage_condition;
    information = info_org_13_dielage_info;
    permanent = true;
    description = "Êàê äåëà?";
};

func int info_org_13_dielage_condition() {
    return 1;
};

func void info_org_13_dielage_info() {
    ai_output(other, self, "Info_Org_13_DieLage_15_00"); //Êàê äåëà?
    ai_output(self, other, "Info_Org_13_DieLage_13_01"); //È ÷òî ÒÅÁÅ íóæíî?
};

instance info_org_13_krautprobe(c_info) {
    nr = 5;
    condition = info_org_13_krautprobe_condition;
    information = info_org_13_krautprobe_info;
    permanent = true;
    description = "Ïîõîæå, òåáå íå ïîìåøàåò íåìíîãî áîëîòíèêà.";
};

func int info_org_13_krautprobe_condition() {
    if (((baalkagan_verteilkraut == log_running) || (baalkagan_verteilkraut == log_success)) && (self.aivar[41] <= wld_getday())) {
        return true;
    };
};

func void info_org_13_krautprobe_info() {
    ai_output(other, self, "Info_Org_13_Krautprobe_15_00"); //Ïîõîæå, òåáå íå ïîìåøàåò íåìíîãî áîëîòíèêà.
    if (((npc_hasitems(other, itmijoint_1) > 0) || (npc_hasitems(other, itmijoint_2) > 0)) || (npc_hasitems(other, itmijoint_3) > 0)) {
        if (npc_hasitems(other, itmijoint_1)) {
            b_giveinvitems(other, self, itmijoint_1 /*4511*/, 1);
        }
        else if (npc_hasitems(other, itmijoint_2)) {
            b_giveinvitems(other, self, itmijoint_2 /*4513*/, 1);
        }
        else {
            if (npc_hasitems(other, itmijoint_3)) {
                b_giveinvitems(other, self, itmijoint_3 /*4515*/, 1);
            };
        };
        ai_output(self, other, "Info_Org_13_Krautprobe_13_01"); //À ó òåáÿ îí åñòü? ß áû êóïèë ñòåáåëü çà 10 êóñêîâ ðóäû.
        ai_output(self, other, "Info_Org_13_Krautprobe_13_02"); //Âîçâðàùàéñÿ â ëþáîå âðåìÿ, áðàò.
        createinvitems(self, itminugget, 10);
        b_giveinvitems(self, other, itminugget /*4517*/, 10);
        nc_joints_verteilt = nc_joints_verteilt + 1;
        self.aivar[41] = wld_getday() + 1;
    }
    else {
        ai_output(self, other, "Info_Org_13_Krautprobe_No_Joint_13_00"); //Íî ó òåáÿ æå íè÷åãî íåò. Ýé! Äàæå íå ïûòàéñÿ íàäóòü ìåíÿ!
    };
};

func void b_assignambientinfos_org_13(var c_npc slf) {
    b_assignfindnpc_nc(slf);
    info_org_13_exit.npc = hlp_getinstanceid(slf);
    info_org_13_einervoneuchwerden.npc = hlp_getinstanceid(slf);
    info_org_13_wichtigepersonen.npc = hlp_getinstanceid(slf);
    info_org_13_daslager.npc = hlp_getinstanceid(slf);
    info_org_13_dielage.npc = hlp_getinstanceid(slf);
    info_org_13_krautprobe.npc = hlp_getinstanceid(slf);
};

instance info_org_6_exit(c_info) {
    nr = 999;
    condition = info_org_6_exit_condition;
    information = info_org_6_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_org_6_exit_condition() {
    return 1;
};

func void info_org_6_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_org_6_einervoneuchwerden(c_info) {
    nr = 4;
    condition = info_org_6_einervoneuchwerden_condition;
    information = info_org_6_einervoneuchwerden_info;
    permanent = true;
    description = "ß õî÷ó ïðèñîåäèíèòüñÿ ê âàì!";
};

func int info_org_6_einervoneuchwerden_condition() {
    if (npc_gettrueguild(other) == gil_none) {
        return true;
    };
};

func void info_org_6_einervoneuchwerden_info() {
    var c_npc lares;

    ai_output(other, self, "Info_Org_6_EinerVonEuchWerden_15_00"); //ß õî÷ó ïðèñîåäèíèòüñÿ ê âàì.
    ai_output(self, other, "Info_Org_6_EinerVonEuchWerden_06_01"); //Ëàðñ ðåøàåò, êòî ìîæåò ïðèñîåäèíèòüñÿ ê øàéêå.
    ai_output(self, other, "Info_Org_6_EinerVonEuchWerden_06_02"); //Íî òåáå ïîíàäîáèòñÿ âåñêàÿ ïðè÷èíà, ÷òîáû óâèäåòü åãî.
    ai_output(other, self, "Info_Org_6_EinerVonEuchWerden_15_03"); //Íàïðèìåð?
    ai_output(self, other, "Info_Org_6_EinerVonEuchWerden_06_04"); //Äîïóñòèì, êòî-íèáóäü ïîøëåò òåáÿ ê íåìó.
    lares = hlp_getnpc(org_801_lares);
    lares.aivar[7] = true;
};

instance info_org_6_wichtigepersonen(c_info) {
    nr = 3;
    condition = info_org_6_wichtigepersonen_condition;
    information = info_org_6_wichtigepersonen_info;
    permanent = true;
    description = "Êòî çäåñü ãëàâíûé?";
};

func int info_org_6_wichtigepersonen_condition() {
    return 1;
};

func void info_org_6_wichtigepersonen_info() {
    var c_npc lee;
    var c_npc lares;

    ai_output(other, self, "Info_Org_6_WichtigePersonen_15_00"); //Êòî çäåñü ãëàâíûé?
    ai_output(self, other, "Info_Org_6_WichtigePersonen_06_01"); //Òû ïðèøåë èç Ñòàðîãî Ëàãåðÿ, äà?
    ai_output(self, other, "Info_Org_6_WichtigePersonen_06_02"); //Çäåñü íåò ãëàâíûõ. Ýòîò ÷åðòîâ Ëè ïûòàåòñÿ äåðæàòü âñåõ â óçäå, íî ìû âñå ðàâíî äåëàåì ëèøü òî, ÷òî ñ÷èòàåì íóæíûì.
    ai_output(self, other, "Info_Org_6_WichtigePersonen_06_03"); //Åñëè ó íàñ è åñòü ãëàâíûé, òî ýòî Ëàðñ. Íî îí äîñòàòî÷íî óìåí, ÷òîáû íå âñòðåâàòü â ÷óæèå äåëà.
    lee = hlp_getnpc(sld_700_lee);
    lee.aivar[7] = true;
    lares = hlp_getnpc(org_801_lares);
    lares.aivar[7] = true;
};

instance info_org_6_daslager(c_info) {
    nr = 2;
    condition = info_org_6_daslager_condition;
    information = info_org_6_daslager_info;
    permanent = true;
    description = "Ðàññêàæè ìíå îá ýòîì ìåñòå.";
};

func int info_org_6_daslager_condition() {
    return 1;
};

func void info_org_6_daslager_info() {
    ai_output(other, self, "Info_Org_6_DasLager_15_00"); //Ðàññêàæè ÷òî-íèáóäü åùå îá ýòîì ìåñòå.
    ai_output(self, other, "Info_Org_6_DasLager_06_01"); //Â ñåðåäèíå ïåùåðû åñòü çäîðîâåííàÿ ÿìà, ïîëíàÿ ðóäû. Åñëè òû ñîáèðàåøüñÿ ïðèáðàòü åå ê ðóêàì, çàáóäü îá ýòîì.
    ai_output(self, other, "Info_Org_6_DasLager_06_02"); //ß ñàì ïûòàëñÿ îäíàæäû, íî ýòè íàåìíèêè íåñóò ñòðàæó äíåì è íî÷üþ.
};

instance info_org_6_dielage(c_info) {
    nr = 1;
    condition = info_org_6_dielage_condition;
    information = info_org_6_dielage_info;
    permanent = true;
    description = "Êàê äåëà?";
};

func int info_org_6_dielage_condition() {
    return 1;
};

func void info_org_6_dielage_info() {
    ai_output(other, self, "Info_Org_6_DieLage_15_00"); //Êàê äåëà?
    ai_output(self, other, "Info_Org_6_DieLage_06_01"); //Ïàðåíü! À òû êàê äóìàåøü? Öåëûìè äíÿìè åñòü ðèñ è âñå âðåìÿ æäàòü, ïîêà ïîäâåðíåòñÿ øàíñ ïîëó÷èòü íåìíîãî ðóäû.
    ai_output(self, other, "Info_Org_6_DieLage_06_02"); //À ïîòîì èäåøü â áàð è íàáèðàåøüñÿ äî êðàåâ äðÿííûì ðèñîâûì øíàïñîì.
};

instance info_org_6_krautprobe(c_info) {
    nr = 5;
    condition = info_org_6_krautprobe_condition;
    information = info_org_6_krautprobe_info;
    permanent = true;
    description = "Ó ìåíÿ åñòü íåìíîãî áîëîòíèêà. Õî÷åøü?";
};

func int info_org_6_krautprobe_condition() {
    if (((baalkagan_verteilkraut == log_running) || (baalkagan_verteilkraut == log_success)) && (self.aivar[41] <= wld_getday())) {
        return true;
    };
};

func void info_org_6_krautprobe_info() {
    ai_output(other, self, "Info_Org_6_Krautprobe_15_00"); //Ó ìåíÿ åñòü íåìíîãî áîëîòíèêà. Õî÷åøü?
    if (((npc_hasitems(other, itmijoint_1) > 0) || (npc_hasitems(other, itmijoint_2) > 0)) || (npc_hasitems(other, itmijoint_3) > 0)) {
        if (npc_hasitems(other, itmijoint_1)) {
            b_giveinvitems(other, self, itmijoint_1 /*4511*/, 1);
        }
        else if (npc_hasitems(other, itmijoint_2)) {
            b_giveinvitems(other, self, itmijoint_2 /*4513*/, 1);
        }
        else {
            if (npc_hasitems(other, itmijoint_3)) {
                b_giveinvitems(other, self, itmijoint_3 /*4515*/, 1);
            };
        };
        ai_output(self, other, "Info_Org_6_Krautprobe_06_01"); //Êîíå÷íî. Âîò, çäåñü 10 êóñêîâ ðóäû.
        ai_output(self, other, "Info_Org_6_Krautprobe_06_02"); //Âîçâðàùàéñÿ, êîãäà ðàçäîáóäåøü åùå, ëàäíî?
        createinvitems(self, itminugget, 10);
        b_giveinvitems(self, other, itminugget /*4517*/, 10);
        self.aivar[41] = wld_getday() + 1;
        nc_joints_verteilt = nc_joints_verteilt + 1;
    }
    else {
        ai_output(self, other, "Info_Org_6_Krautprobe_No_Joint_06_00"); //Ãäå? ß íå âèæó íè ñòåáåëüêà.
    };
};

func void b_assignambientinfos_org_6(var c_npc slf) {
    b_assignfindnpc_nc(slf);
    info_org_6_exit.npc = hlp_getinstanceid(slf);
    info_org_6_einervoneuchwerden.npc = hlp_getinstanceid(slf);
    info_org_6_wichtigepersonen.npc = hlp_getinstanceid(slf);
    info_org_6_daslager.npc = hlp_getinstanceid(slf);
    info_org_6_dielage.npc = hlp_getinstanceid(slf);
    info_org_6_krautprobe.npc = hlp_getinstanceid(slf);
};

instance info_org_7_exit(c_info) {
    nr = 999;
    condition = info_org_7_exit_condition;
    information = info_org_7_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_org_7_exit_condition() {
    return 1;
};

func void info_org_7_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_org_7_einervoneuchwerden(c_info) {
    nr = 4;
    condition = info_org_7_einervoneuchwerden_condition;
    information = info_org_7_einervoneuchwerden_info;
    permanent = true;
    description = "×òî íóæíî ñäåëàòü, äëÿ òîãî ÷òîáû ïðèñîåäèíèòüñÿ ê ýòîìó Ëàãåðþ?";
};

func int info_org_7_einervoneuchwerden_condition() {
    if (npc_gettrueguild(other) == gil_none) {
        return true;
    };
};

func void info_org_7_einervoneuchwerden_info() {
    var c_npc lares;

    ai_output(other, self, "Info_Org_7_EinerVonEuchWerden_15_00"); //×òî ÿ äîëæåí ñäåëàòü, ÷òîáû ïðèñîåäèíèòüñÿ ê Ëàãåðþ?
    ai_output(self, other, "Info_Org_7_EinerVonEuchWerden_07_01"); //Òû ìîæåøü ïðèñîåäèíèòüñÿ ê íàøåé øàéêå. Íî ïðåæäå ìû äîëæíû óáåäèòüñÿ, ÷òî òû ïðîòèâ Ãîìåçà.
    ai_output(other, self, "Info_Org_7_EinerVonEuchWerden_15_02"); //×òî ÿ äîëæåí ñäåëàòü?
    ai_output(self, other, "Info_Org_7_EinerVonEuchWerden_07_03"); //Åñëè áû ÿ áûë íà òâîåì ìåñòå, ÿ áû ñòàùèë ÷òî-íèáóäü âàæíîå èç Ñòàðîãî Ëàãåðÿ èëè èç Ñòàðîé Øàõòû è ïðèíåñ Ëàðñó.
    lares = hlp_getnpc(org_801_lares);
    lares.aivar[7] = true;
};

instance info_org_7_wichtigepersonen(c_info) {
    nr = 3;
    condition = info_org_7_wichtigepersonen_condition;
    information = info_org_7_wichtigepersonen_info;
    permanent = true;
    description = "Êòî ó âàñ ãëàâíûé?";
};

func int info_org_7_wichtigepersonen_condition() {
    return 1;
};

func void info_org_7_wichtigepersonen_info() {
    var c_npc lares;

    ai_output(other, self, "Info_Org_7_WichtigePersonen_15_00"); //Êòî ó âàñ ãëàâíûé?
    ai_output(self, other, "Info_Org_7_WichtigePersonen_07_01"); //Ãëàâà øàéêè - Ëàðñ. Áîëüøèíñòâó èç íàøèõ îí ïî äóøå.
    ai_output(self, other, "Info_Org_7_WichtigePersonen_07_02"); //Íî îí íèêîãäà íå óêàçûâàåò íàì, ÷òî äåëàòü.
    lares = hlp_getnpc(org_801_lares);
    lares.aivar[7] = true;
};

instance info_org_7_daslager(c_info) {
    nr = 2;
    condition = info_org_7_daslager_condition;
    information = info_org_7_daslager_info;
    permanent = true;
    description = "Ðàññêàæè ìíå îá ýòîì Ëàãåðå.";
};

func int info_org_7_daslager_condition() {
    return 1;
};

func void info_org_7_daslager_info() {
    ai_output(other, self, "Info_Org_7_DasLager_15_00"); //Ðàññêàæè ìíå îá ýòîì Ëàãåðå.
    ai_output(self, other, "Info_Org_7_DasLager_07_01"); //Ýòî òàêîå îáùåñòâî ðàäè îáùåñòâà, åñëè òû ïîíèìàåøü, î ÷åì ÿ ãîâîðþ. Ìû âñå çäåñü ñàìè ïî ñåáå, íî íàñ òàê ìíîãî, ÷òî Ãîìåçó íåëåãêî îò íàñ èçáàâèòüñÿ.
    ai_output(self, other, "Info_Org_7_DasLager_07_02"); //Ïðàâäà, òîëüêî îá ýòîì îí è ìå÷òàåò.
    ai_output(other, self, "Info_Org_7_DasLager_15_03"); //×åì âû òàê äîñàäèëè Ãîìåçó?
    ai_output(self, other, "Info_Org_7_DasLager_07_04"); //Ìû âîðóåì ó íåãî!
};

instance info_org_7_dielage(c_info) {
    nr = 1;
    condition = info_org_7_dielage_condition;
    information = info_org_7_dielage_info;
    permanent = true;
    description = "×òî çäåñü ïðîèñõîäèò?";
};

func int info_org_7_dielage_condition() {
    return 1;
};

func void info_org_7_dielage_info() {
    ai_output(other, self, "Info_Org_7_DieLage_15_00"); //×òî çäåñü ïðîèñõîäèò?
    ai_output(self, other, "Info_Org_7_DieLage_07_01"); //Òû çäåñü äàâíî íå áûë, äà?
    ai_output(self, other, "Info_Org_7_DieLage_07_02"); //Äîëãèå ãîäû ìàãè ãîòîâèëèñü âçîðâàòü ãîðó ðóäû. Îíè ãîâîðÿò, ÷òî æäàòü îñòàëîñü óæå íåäîëãî.
    ai_output(self, other, "Info_Org_7_DieLage_07_03"); //Ïîõîæå íà ïðàâäó, åñëè ñóäèòü ïî ðàçìåðàì êó÷è, êîòîðóþ ðóäîêîïû óæå óñïåëè ñîáðàòü.
};

instance info_org_7_krautprobe(c_info) {
    nr = 5;
    condition = info_org_7_krautprobe_condition;
    information = info_org_7_krautprobe_info;
    permanent = true;
    description = "Õî÷åøü áîëîòíèêà?";
};

func int info_org_7_krautprobe_condition() {
    if (((baalkagan_verteilkraut == log_running) || (baalkagan_verteilkraut == log_success)) && (self.aivar[41] <= wld_getday())) {
        return true;
    };
};

func void info_org_7_krautprobe_info() {
    ai_output(other, self, "Info_Org_7_Krautprobe_15_00"); //Õî÷åøü áîëîòíèêà?
    if (((npc_hasitems(other, itmijoint_1) > 0) || (npc_hasitems(other, itmijoint_2) > 0)) || (npc_hasitems(other, itmijoint_3) > 0)) {
        if (npc_hasitems(other, itmijoint_1)) {
            b_giveinvitems(other, self, itmijoint_1 /*4511*/, 1);
        }
        else if (npc_hasitems(other, itmijoint_2)) {
            b_giveinvitems(other, self, itmijoint_2 /*4513*/, 1);
        }
        else {
            if (npc_hasitems(other, itmijoint_3)) {
                b_giveinvitems(other, self, itmijoint_3 /*4515*/, 1);
            };
        };
        ai_output(self, other, "Info_Org_7_Krautprobe_07_01"); //ß äàì òåáå 10 êóñêîâ ðóäû - âîò, äåðæè.
        ai_output(self, other, "Info_Org_7_Krautprobe_07_02"); //Çàõîäè, åñëè ïîÿâèòñÿ åùå ëèøíÿÿ ãîðñòêà.
        createinvitems(self, itminugget, 10);
        b_giveinvitems(self, other, itminugget /*4517*/, 10);
        self.aivar[41] = wld_getday() + 1;
        nc_joints_verteilt = nc_joints_verteilt + 1;
    }
    else {
        ai_output(self, other, "Info_Org_7_Krautprobe_No_Joint_07_00"); //Ãäå? ß íå âèæó íè ñòåáåëüêà.
    };
};

func void b_assignambientinfos_org_7(var c_npc slf) {
    b_assignfindnpc_nc(slf);
    info_org_7_exit.npc = hlp_getinstanceid(slf);
    info_org_7_einervoneuchwerden.npc = hlp_getinstanceid(slf);
    info_org_7_wichtigepersonen.npc = hlp_getinstanceid(slf);
    info_org_7_daslager.npc = hlp_getinstanceid(slf);
    info_org_7_dielage.npc = hlp_getinstanceid(slf);
    info_org_7_krautprobe.npc = hlp_getinstanceid(slf);
};

instance info_sfb_1_exit(c_info) {
    nr = 999;
    condition = info_sfb_1_exit_condition;
    information = info_sfb_1_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_sfb_1_exit_condition() {
    return 1;
};

func void info_sfb_1_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_sfb_1_einervoneuchwerden(c_info) {
    nr = 4;
    condition = info_sfb_1_einervoneuchwerden_condition;
    information = info_sfb_1_einervoneuchwerden_info;
    permanent = true;
    description = "Êàê ìíå ñòàòü îäíèì èç ðóäîêîïîâ?";
};

func int info_sfb_1_einervoneuchwerden_condition() {
    if (npc_gettrueguild(other) == gil_none) {
        return true;
    };
};

func void info_sfb_1_einervoneuchwerden_info() {
    ai_output(other, self, "Info_SFB_1_EinerVonEuchWerden_15_00"); //Êàê ìíå ñòàòü îäíèì èç ðóäîêîïîâ?
    ai_output(self, other, "Info_SFB_1_EinerVonEuchWerden_01_01"); //Ñòàòü îäíèì èç íàñ? Òû ÷òî, äóìàåøü, ðàç íàñ íèêòî íå çàñòàâëÿåò ðàáîòàòü, ìû íè÷åãî íå äåëàåì?
    ai_output(self, other, "Info_SFB_1_EinerVonEuchWerden_01_02"); //Åñëè òû äóìàåøü, ÷òî ñìîæåøü çäåñü ïðîñòî áåçäåëüíè÷àòü, çàéìèñü ëó÷øå ÷åì-íèáóäü åùå, äðóæèùå.
    ai_output(self, other, "Info_SFB_1_EinerVonEuchWerden_01_03"); //Òåïåðü, åñëè òû âñå åùå äóìàåøü, ÷òî ýòî äåëî òåáå ïîäõîäèò, ïîãîâîðè ñî Ñóèíè. Ýòî òîò ðóäîêîï, êîòîðûé âåñü äåíü ñòîèò â ñòîðîíêå è êóðèò.
};

instance info_sfb_1_wichtigepersonen(c_info) {
    nr = 3;
    condition = info_sfb_1_wichtigepersonen_condition;
    information = info_sfb_1_wichtigepersonen_info;
    permanent = true;
    description = "Êòî çäåñü êîìàíäóåò?";
};

func int info_sfb_1_wichtigepersonen_condition() {
    return 1;
};

func void info_sfb_1_wichtigepersonen_info() {
    ai_output(other, self, "Info_SFB_1_WichtigePersonen_15_00"); //Êòî çäåñü îòâå÷àåò çà âñå?
    ai_output(self, other, "Info_SFB_1_WichtigePersonen_01_01"); //Îòâå÷àåò çà âñå? Îãëÿíèñü âîêðóã. Çäåñü íåò íèêîãî, êòî áû öåëûé äåíü íå íàäðûâàë çàäíèöó, ñòàðàÿñü ñîáðàòü ïîáîëüøå ðóäû, ýòî òî÷íî.
};

instance info_sfb_1_daslager(c_info) {
    nr = 2;
    condition = info_sfb_1_daslager_condition;
    information = info_sfb_1_daslager_info;
    permanent = true;
    description = "×òî ýòî?";
};

func int info_sfb_1_daslager_condition() {
    return 1;
};

func void info_sfb_1_daslager_info() {
    ai_output(other, self, "Info_SFB_1_DasLager_15_00"); //×òî ýòî?
    ai_output(self, other, "Info_SFB_1_DasLager_01_01"); //À íà ÷òî ýòî ïîõîæå? Íà êîðîëåâñêèé äâîðåö?
    ai_output(self, other, "Info_SFB_1_DasLager_01_02"); //Åñëè òû äåéñòâèòåëüíî õî÷åøü ðàáîòàòü â Ñâîáîäíîé Øàõòå, òåáå ïðåæäå ïðèäåòñÿ ïðîáèòüñÿ íàâåðõ çäåñü, â Ëîùèíå, ÷òîáû äîêàçàòü, ÷òî îò òåáÿ åñòü ïðîê.
};

instance info_sfb_1_dielage(c_info) {
    nr = 1;
    condition = info_sfb_1_dielage_condition;
    information = info_sfb_1_dielage_info;
    permanent = true;
    description = "Êàê èäóò äåëà?";
};

func int info_sfb_1_dielage_condition() {
    return 1;
};

func void info_sfb_1_dielage_info() {
    ai_output(other, self, "Info_SFB_1_DieLage_15_00"); //Êàê äåëà?
    ai_output(self, other, "Info_SFB_1_DieLage_01_01"); //À òû êàê äóìàåøü? Êàê âñåãäà, ïàðøèâî. Ïîëíî ðàáîòû è ñîâñåì íå÷åãî æðàòü.
    ai_output(self, other, "Info_SFB_1_DieLage_01_02"); //Åäèíñòâåííûé èç íàñ, êòî íå ñëèøêîì çàãðóæåí, ýòî Ñóèíè. Îêèë íàçíà÷èë åãî íàøèì ïðåäñòàâèòåëåì. Ñóèíè òåïåðü ïðîâîäèò çäåñü âñå äíè íàïðîëåò - ñëåäèò çà òåì, ÷òîáû íèêòî íå íàæèë ñåáå ìîçîëåé.
};

func void b_assignambientinfos_sfb_1(var c_npc slf) {
    info_sfb_1_exit.npc = hlp_getinstanceid(slf);
    info_sfb_1_einervoneuchwerden.npc = hlp_getinstanceid(slf);
    info_sfb_1_wichtigepersonen.npc = hlp_getinstanceid(slf);
    info_sfb_1_daslager.npc = hlp_getinstanceid(slf);
    info_sfb_1_dielage.npc = hlp_getinstanceid(slf);
};

instance info_sfb_2_pre(c_info) {
    nr = 1;
    condition = info_sfb_2_pre_condition;
    information = info_sfb_2_pre_info;
    important = true;
};

func int info_sfb_2_pre_condition() {
    return 1;
};

func void info_sfb_2_pre_info() {
    ai_output(self, other, "Info_SFB_2_EinerVonEuchWerden_02_00"); //×òî òåáå íóæíî? ß íå õî÷ó íåïðèÿòíîñòåé.
};

instance info_sfb_2_exit(c_info) {
    nr = 999;
    condition = info_sfb_2_exit_condition;
    information = info_sfb_2_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_sfb_2_exit_condition() {
    return 1;
};

func void info_sfb_2_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_sfb_2_einervoneuchwerden(c_info) {
    nr = 4;
    condition = info_sfb_2_einervoneuchwerden_condition;
    information = info_sfb_2_einervoneuchwerden_info;
    permanent = true;
    description = "×òî íóæíî ñäåëàòü, ÷òîáû ïðèñîåäèíèòüñÿ ê âàì?";
};

func int info_sfb_2_einervoneuchwerden_condition() {
    if (npc_gettrueguild(other) == gil_none) {
        return true;
    };
};

func void info_sfb_2_einervoneuchwerden_info() {
    ai_output(other, self, "Info_SFB_2_EinerVonEuchWerden_15_00"); //×òî íóæíî ñäåëàòü, ÷òîáû ïðèñîåäèíèòüñÿ ê âàì?
    ai_output(self, other, "Info_SFB_2_EinerVonEuchWerden_02_01"); //Â ýòîì ÿ òåáå íå ïîìîùíèê. ß ñëèøêîì ìåëêàÿ ñîøêà. Ïîãîâîðè ñî Ñóèíè.
};

instance info_sfb_2_wichtigepersonen(c_info) {
    nr = 3;
    condition = info_sfb_2_wichtigepersonen_condition;
    information = info_sfb_2_wichtigepersonen_info;
    permanent = true;
    description = "Êòî çäåñü ãëàâíûé?";
};

func int info_sfb_2_wichtigepersonen_condition() {
    return 1;
};

func void info_sfb_2_wichtigepersonen_info() {
    ai_output(other, self, "Info_SFB_2_WichtigePersonen_15_00"); //Êòî çäåñü ãëàâíûé?
    ai_output(self, other, "Info_SFB_2_WichtigePersonen_02_01"); //Çäåñü, â Ëîùèíå, âñåì ðàñïîðÿæàþòñÿ íàåìíèêè, íî â Íîâîì Ëàãåðå âñå íåìíîãî ïî-äðóãîìó.
    ai_output(self, other, "Info_SFB_2_WichtigePersonen_02_02"); //Äóìàé ñàì, êîãî íå ñòîèò íàæèâàòü ñåáå â êà÷åñòâå âðàãîâ.
};

instance info_sfb_2_daslager(c_info) {
    nr = 2;
    condition = info_sfb_2_daslager_condition;
    information = info_sfb_2_daslager_info;
    permanent = true;
    description = "Ðàññêàæè ìíå î Ëàãåðå.";
};

func int info_sfb_2_daslager_condition() {
    return 1;
};

func void info_sfb_2_daslager_info() {
    ai_output(other, self, "Info_SFB_2_DasLager_15_00"); //Ìíå íóæíî áîëüøå óçíàòü îá ýòîì Ëàãåðå.
    ai_output(self, other, "Info_SFB_2_DasLager_02_01"); //Íå çíàþ, ÷åì è ïîìî÷ü òåáå. Òû ëó÷øå ïîãîâîðè ñî Ñóèíè èëè ñ íàåìíèêàìè.
};

instance info_sfb_2_dielage(c_info) {
    nr = 1;
    condition = info_sfb_2_dielage_condition;
    information = info_sfb_2_dielage_info;
    permanent = true;
    description = "È êàê çäåñü æèâåòñÿ?";
};

func int info_sfb_2_dielage_condition() {
    return 1;
};

func void info_sfb_2_dielage_info() {
    ai_output(other, self, "Info_SFB_2_DieLage_15_00"); //Êàê çäåñü æèâåòñÿ?
    ai_output(self, other, "Info_SFB_2_DieLage_02_01"); //ß íå æàëóþñü. Ìû âñå äîëæíû äåëàòü îäíî äåëî.
    ai_output(self, other, "Info_SFB_2_DieLage_02_02"); //Ïî êðàéíåé ìåðå, ëó÷øå ðàáîòàòü çäåñü, ÷åì â Ñòàðîì Ëàãåðå.
    ai_output(self, other, "Info_SFB_2_DieLage_02_03"); //Òû èç Ñòàðîãî Ëàãåðÿ?
    ai_output(self, other, "Info_SFB_2_DieLage_02_04"); //Åñëè òû èç Ñòàðîãî Ëàãåðÿ, çàïîìíè: ÿ íå õî÷ó íåïðèÿòíîñòåé!
    ai_stopprocessinfos(self);
};

func void b_assignambientinfos_sfb_2(var c_npc slf) {
    info_sfb_2_pre.npc = hlp_getinstanceid(slf);
    info_sfb_2_exit.npc = hlp_getinstanceid(slf);
    info_sfb_2_einervoneuchwerden.npc = hlp_getinstanceid(slf);
    info_sfb_2_wichtigepersonen.npc = hlp_getinstanceid(slf);
    info_sfb_2_daslager.npc = hlp_getinstanceid(slf);
    info_sfb_2_dielage.npc = hlp_getinstanceid(slf);
};

instance info_sfb_5_pre(c_info) {
    nr = 1;
    condition = info_sfb_5_pre_condition;
    information = info_sfb_5_pre_info;
    important = true;
};

func int info_sfb_5_pre_condition() {
    return 1;
};

func void info_sfb_5_pre_info() {
    ai_output(self, other, "Info_SFB_5_EinerVonEuchWerden_02_00"); //Ïðèâåò!
};

instance info_sfb_5_exit(c_info) {
    nr = 999;
    condition = info_sfb_5_exit_condition;
    information = info_sfb_5_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_sfb_5_exit_condition() {
    return 1;
};

func void info_sfb_5_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_sfb_5_einervoneuchwerden(c_info) {
    nr = 4;
    condition = info_sfb_5_einervoneuchwerden_condition;
    information = info_sfb_5_einervoneuchwerden_info;
    permanent = true;
    description = "×òî åñëè ÿ õî÷ó ïðèñîåäèíèòüñÿ ê âàì?";
};

func int info_sfb_5_einervoneuchwerden_condition() {
    if (npc_gettrueguild(other) == gil_none) {
        return true;
    };
};

func void info_sfb_5_einervoneuchwerden_info() {
    ai_output(other, self, "Info_SFB_5_EinerVonEuchWerden_15_00"); //×òî åñëè ÿ õî÷ó ïðèñîåäèíèòüñÿ ê âàì?
    ai_output(self, other, "Info_SFB_5_EinerVonEuchWerden_02_01"); //Ïðèñîåäèíèòüñÿ ê íàì? È êåì òû õî÷åøü áûòü - âîäîíîñîì?
    ai_output(other, self, "Info_SFB_5_EinerVonEuchWerden_15_02"); //Íåò, ðóäîêîïîì.
    ai_output(self, other, "Info_SFB_5_EinerVonEuchWerden_02_03"); //Ïîñëóøàé, ÷òî ÿ ñêàæó òåáå: íèêòî ÄÎÁÐÎÂÎËÜÍÎ íå ñòàíîâèòñÿ ðóäîêîïîì.
    ai_output(self, other, "Info_SFB_5_EinerVonEuchWerden_02_04"); //Êîíå÷íî, åñëè òû íàñòàèâàåøü... Èäè è ïîãîâîðè ñî Ñóèíè - óâåðåí, ó íåãî íàéäåòñÿ äëÿ òåáÿ ñòàðàÿ êèðêà.
};

instance info_sfb_5_wichtigepersonen(c_info) {
    nr = 3;
    condition = info_sfb_5_wichtigepersonen_condition;
    information = info_sfb_5_wichtigepersonen_info;
    permanent = true;
    description = "Êîãî çäåñü ìîæíî ñ÷èòàòü âàæíûì ÷åëîâåêîì?";
};

func int info_sfb_5_wichtigepersonen_condition() {
    return 1;
};

func void info_sfb_5_wichtigepersonen_info() {
    ai_output(other, self, "Info_SFB_5_WichtigePersonen_15_00"); //Êîãî çäåñü ìîæíî ñ÷èòàòü âàæíûì ÷åëîâåêîì?
    ai_output(self, other, "Info_SFB_5_WichtigePersonen_02_01"); //Âàæíûì? Ìåíÿ, êîíå÷íî.
    ai_output(self, other, "Info_SFB_5_WichtigePersonen_02_02"); //ß äóìàþ, òû õîòåë ñïðîñèòü, êòî çäåñü ãëàâíûé.
    ai_output(self, other, "Info_SFB_5_WichtigePersonen_02_03"); //ß äóìàþ, òåáå ñòîèò ïîãîâîðèòü ñ íàåìíèêàìè èëè ñ âîðàìè. Ìàãîâ Âîäû òû äàæå íå óâèäèøü.
    ai_output(self, other, "Info_SFB_5_WichtigePersonen_02_04"); //Ñóèíè - áîëüøàÿ çàäíèöà, íî ñ÷èòàåò ñåáÿ áîëüøîé øèøêîé. Íà ñàìîì äåëå îí ïðîñòî ðàñêëàäûâàåò êèðêè è äåëàåò òî, ÷òî åìó ïðèêàæåò Îêèë.
};

instance info_sfb_5_daslager(c_info) {
    nr = 2;
    condition = info_sfb_5_daslager_condition;
    information = info_sfb_5_daslager_info;
    permanent = true;
    description = "×òî õîðîøåãî â ýòîì Ëàãåðå?";
};

func int info_sfb_5_daslager_condition() {
    return 1;
};

func void info_sfb_5_daslager_info() {
    ai_output(other, self, "Info_SFB_5_DasLager_15_00"); //×òî õîðîøåãî â ýòîì Ëàãåðå?
    ai_output(self, other, "Info_SFB_5_DasLager_02_01"); //Ýòî çàâèñèò îò ÷åëîâåêà. Îäíèì íå äîñòàíåòñÿ íè÷åãî, êðîìå ðàáîòû, äðóãèå ïîëó÷àò ÷åðòîâó óéìó óäîâîëüñòâèÿ.
};

instance info_sfb_5_dielage(c_info) {
    nr = 1;
    condition = info_sfb_5_dielage_condition;
    information = info_sfb_5_dielage_info;
    permanent = true;
    description = "È êàê çäåñü æèâåòñÿ?";
};

func int info_sfb_5_dielage_condition() {
    return 1;
};

func void info_sfb_5_dielage_info() {
    ai_output(other, self, "Info_SFB_5_DieLage_15_00"); //Êàê çäåñü æèâåòñÿ?
    ai_output(self, other, "Info_SFB_5_DieLage_02_01"); //Îòëè÷íî!
    ai_output(self, other, "Info_SFB_5_DieLage_02_02"); //Èìåííî ïîòîìó, ÷òî íàì òàê íðàâèòñÿ çäåñü, ìû èçî âñåõ ñèë ïûòàåìñÿ îòñþäà âûáðàòüñÿ.
    ai_output(self, other, "Info_SFB_5_DieLage_02_03"); //Êàê, òû äóìàåøü, íàçûâàåòñÿ ýòî ìåñòî? Ýòî òþðüìà, à â òþðüìå æèòü íèêîìó íå íðàâèòñÿ.
};

func void b_assignambientinfos_sfb_5(var c_npc slf) {
    info_sfb_5_pre.npc = hlp_getinstanceid(slf);
    info_sfb_5_exit.npc = hlp_getinstanceid(slf);
    info_sfb_5_einervoneuchwerden.npc = hlp_getinstanceid(slf);
    info_sfb_5_wichtigepersonen.npc = hlp_getinstanceid(slf);
    info_sfb_5_daslager.npc = hlp_getinstanceid(slf);
    info_sfb_5_dielage.npc = hlp_getinstanceid(slf);
};

instance info_sld_11_exit(c_info) {
    nr = 999;
    condition = info_sld_11_exit_condition;
    information = info_sld_11_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_sld_11_exit_condition() {
    return 1;
};

func void info_sld_11_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_sld_11_einervoneuchwerden(c_info) {
    nr = 4;
    condition = info_sld_11_einervoneuchwerden_condition;
    information = info_sld_11_einervoneuchwerden_info;
    permanent = true;
    description = "ß õî÷ó ñòàòü íàåìíèêîì ó ìàãîâ.";
};

func int info_sld_11_einervoneuchwerden_condition() {
    if ((((npc_gettrueguild(other) != gil_sld) && (npc_gettrueguild(other) != gil_kdw)) && (!c_npcbelongstooldcamp(other))) && (!c_npcbelongstopsicamp(other))) {
        return true;
    };
};

func void info_sld_11_einervoneuchwerden_info() {
    var c_npc gorn;

    ai_output(other, self, "Info_Sld_11_EinerVonEuchWerden_15_00"); //ß õî÷ó ñòàòü íàåìíèêîì ó ìàãîâ.
    ai_output(self, other, "Info_Sld_11_EinerVonEuchWerden_11_01"); //Ýòî íå òàê óæ ñëîæíî. Åñëè òû ãîòîâ ñðàæàòüñÿ çà íàøå äåëî, Ëè ïðèìåò òåáÿ.
    ai_output(self, other, "Info_Sld_11_EinerVonEuchWerden_11_02"); //Íî îí áåðåò òîëüêî òåõ, êòî õîðîøî âëàäååò ìå÷îì. Íó, êàê ó òåáÿ ñ ýòèì?
    ai_output(other, self, "Info_Sld_11_EinerVonEuchWerden_15_03"); //Íó...
    ai_output(self, other, "Info_Sld_11_EinerVonEuchWerden_11_04"); //ß òàê è äóìàë. Åñëè òû ðåøèë ñåðüåçíî, òî ïîãîâîðè ñ Ãîðíîì. Îí ðàíüøå òðåíèðîâàë íîâè÷êîâ.
    ai_output(self, other, "Info_Sld_11_EinerVonEuchWerden_11_05"); //Ìîæåò áûòü, òåáå ïîâåçåò, è îí íàéäåò âðåìÿ ïîçàíèìàòüñÿ ñ òîáîé.
    gorn = hlp_getnpc(pc_fighter);
    gorn.aivar[7] = true;
};

instance info_sld_11_wichtigepersonen(c_info) {
    nr = 3;
    condition = info_sld_11_wichtigepersonen_condition;
    information = info_sld_11_wichtigepersonen_info;
    permanent = true;
    description = "Êòî çäåñü êîìàíäóåò?";
};

func int info_sld_11_wichtigepersonen_condition() {
    return 1;
};

func void info_sld_11_wichtigepersonen_info() {
    var c_npc lee;
    var c_npc cronos;

    ai_output(other, self, "Info_Sld_11_WichtigePersonen_15_00"); //Êòî çäåñü êîìàíäóåò?
    ai_output(self, other, "Info_Sld_11_WichtigePersonen_11_01"); //Ìû äåëàåì òî, ÷òî ãîâîðÿò ìàãè. Íî ÷àùå âñåãî îíè íè÷åãî íå ãîâîðÿò - ïðîñòî áîëòàþòñÿ âîçëå æåëåçíîé ãîðû èëè çàðûâàþòñÿ â ñâîè êíèãè.
    ai_output(self, other, "Info_Sld_11_WichtigePersonen_11_02"); //Â îñíîâíîì, êîìàíäóåò Ëè. Îí ó íàñ ãëàâíûé.
    lee = hlp_getnpc(sld_700_lee);
    lee.aivar[7] = true;
    cronos = hlp_getnpc(kdw_604_cronos);
    cronos.aivar[7] = true;
};

instance info_sld_11_daslager(c_info) {
    nr = 2;
    condition = info_sld_11_daslager_condition;
    information = info_sld_11_daslager_info;
    permanent = true;
    description = "Â Ëàãåðå âñå ñïîêîéíî?";
};

func int info_sld_11_daslager_condition() {
    return 1;
};

func void info_sld_11_daslager_info() {
    ai_output(other, self, "Info_Sld_11_DasLager_15_00"); //Â Ëàãåðå âñå ñïîêîéíî?
    ai_output(self, other, "Info_Sld_11_DasLager_11_01"); //Çíàåøü, ïàðåíü, ïðîáëåìû âñåãäà íàéäóòñÿ. Âîðû äåëàþò òî, ÷òî õîòÿò, à ìû, íàåìíèêè, äîëæíû îõðàíÿòü ìàãîâ è çàùèùàòü Ëàãåðü.
};

instance info_sld_11_dielage(c_info) {
    nr = 1;
    condition = info_sld_11_dielage_condition;
    information = info_sld_11_dielage_info;
    permanent = true;
    description = "Âñå â ïîðÿäêå?";
};

func int info_sld_11_dielage_condition() {
    return 1;
};

func void info_sld_11_dielage_info() {
    ai_output(other, self, "Info_Sld_11_DieLage_15_00"); //Òû â ïîðÿäêå?
    ai_output(self, other, "Info_Sld_11_DieLage_11_01"); //Ïîêà âñå òèõî...
    ai_output(other, self, "Info_Sld_11_DieLage_15_02"); //Ïîêà?
    ai_output(self, other, "Info_Sld_11_DieLage_11_03"); //Åñëè âîðû è äàëüøå áóäóò ãðàáèòü êàðàâàíû Ãîìåçà, âñêîðå îí è åãî àðìèÿ îêàæóòñÿ ïåðåä íàøèì Ëàãåðåì.
    ai_output(self, other, "Info_Sld_11_DieLage_11_04"); //È ýòî áóäåò íå ñëèøêîì çäîðîâî.
};

instance info_sld_11_krautprobe(c_info) {
    nr = 5;
    condition = info_sld_11_krautprobe_condition;
    information = info_sld_11_krautprobe_info;
    permanent = true;
    description = "Õî÷åøü áîëîòíèêà?";
};

func int info_sld_11_krautprobe_condition() {
    if (((baalkagan_verteilkraut == log_running) || (baalkagan_verteilkraut == log_success)) && (self.aivar[41] <= wld_getday())) {
        return true;
    };
};

func void info_sld_11_krautprobe_info() {
    ai_output(other, self, "Info_Sld_11_Krautprobe_15_00"); //Õî÷åøü áîëîòíèêà?
    if (((npc_hasitems(other, itmijoint_1) > 0) || (npc_hasitems(other, itmijoint_2) > 0)) || (npc_hasitems(other, itmijoint_3) > 0)) {
        if (npc_hasitems(other, itmijoint_1)) {
            b_giveinvitems(other, self, itmijoint_1 /*4511*/, 1);
        }
        else if (npc_hasitems(other, itmijoint_2)) {
            b_giveinvitems(other, self, itmijoint_2 /*4513*/, 1);
        }
        else {
            if (npc_hasitems(other, itmijoint_3)) {
                b_giveinvitems(other, self, itmijoint_3 /*4515*/, 1);
            };
        };
        ai_output(self, other, "Info_Sld_11_Krautprobe_11_01"); //Êîíå÷íî, õî÷ó. Âîò 10 êóñêîâ ðóäû.
        ai_output(self, other, "Info_Sld_11_Krautprobe_11_02"); //Åñëè òû äîñòàíåøü åùå íåìíîãî...
        createinvitems(self, itminugget, 10);
        b_giveinvitems(self, other, itminugget /*4517*/, 10);
        nc_joints_verteilt = nc_joints_verteilt + 1;
        self.aivar[41] = wld_getday() + 1;
    }
    else {
        ai_output(self, other, "Info_Sld_11_Krautprobe_No_Joint_11_00"); //Ñëîâîì, ïðèíåñè åùå, òîãäà è ïîãîâîðèì.
    };
};

func void b_assignambientinfos_sld_11(var c_npc slf) {
    b_assignfindnpc_nc(slf);
    info_sld_11_exit.npc = hlp_getinstanceid(slf);
    info_sld_11_einervoneuchwerden.npc = hlp_getinstanceid(slf);
    info_sld_11_wichtigepersonen.npc = hlp_getinstanceid(slf);
    info_sld_11_daslager.npc = hlp_getinstanceid(slf);
    info_sld_11_dielage.npc = hlp_getinstanceid(slf);
    info_sld_11_krautprobe.npc = hlp_getinstanceid(slf);
};

instance info_sld_8_exit(c_info) {
    nr = 999;
    condition = info_sld_8_exit_condition;
    information = info_sld_8_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_sld_8_exit_condition() {
    return 1;
};

func void info_sld_8_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_sld_8_einervoneuchwerden(c_info) {
    nr = 4;
    condition = info_sld_8_einervoneuchwerden_condition;
    information = info_sld_8_einervoneuchwerden_info;
    permanent = true;
    description = "Íóæíû ëè âàì âåðíûå ëþäè?";
};

func int info_sld_8_einervoneuchwerden_condition() {
    if ((((npc_gettrueguild(other) != gil_sld) && (npc_gettrueguild(other) != gil_kdw)) && (!c_npcbelongstooldcamp(other))) && (!c_npcbelongstopsicamp(other))) {
        return true;
    };
};

func void info_sld_8_einervoneuchwerden_info() {
    ai_output(other, self, "Info_Sld_8_EinerVonEuchWerden_15_00"); //Âàì íóæíû ëþäè?
    ai_output(self, other, "Info_Sld_8_EinerVonEuchWerden_08_01"); //Ëè ñ÷èòàåò, ÷òî ïðåæäå ÷åì ñòàòü íàåìíèêîì, ÷åëîâåê äîëæåí ïðîæèòü çäåñü íåñêîëüêî ëåò è íàáðàòüñÿ îïûòà.
    ai_output(self, other, "Info_Sld_8_EinerVonEuchWerden_08_02"); //Åñëè õî÷åøü îñòàòüñÿ â Ëàãåðå, ïîíà÷àëó òåáå ïðèäåòñÿ îáùàòüñÿ ñ âîðàìè.
};

instance info_sld_8_wichtigepersonen(c_info) {
    nr = 3;
    condition = info_sld_8_wichtigepersonen_condition;
    information = info_sld_8_wichtigepersonen_info;
    permanent = true;
    description = "Êòî çäåñü êîìàíäóåò?";
};

func int info_sld_8_wichtigepersonen_condition() {
    return 1;
};

func void info_sld_8_wichtigepersonen_info() {
    var c_npc lee;
    var c_npc cronos;

    ai_output(other, self, "Info_Sld_8_WichtigePersonen_15_00"); //Êòî çäåñü êîìàíäóåò?
    ai_output(self, other, "Info_Sld_8_WichtigePersonen_08_01"); //Ìû, íàåìíèêè, ïîä÷èíÿåìñÿ Ëè. Îí çàêëþ÷èë ñ ìàãàìè ñäåëêó: ìû çàùèùàåì èõ, à îíè äîëæíû âûòàùèòü íàñ îòñþäà.
    ai_output(other, self, "Info_Sld_8_WichtigePersonen_15_02"); //Çíà÷èò, ìàãè ãëàâíåå âñåõ?
    ai_output(self, other, "Info_Sld_8_WichtigePersonen_08_03"); //Íåò. Â Ëàãåðå íåò ãëàâíîãî. Áîëüøèíñòâî ëþäåé çäåñü - òå, êòî íå ñìîã èëè íå çàõîòåë îñòàòüñÿ â Ñòàðîì Ëàãåðå.
    ai_output(self, other, "Info_Sld_8_WichtigePersonen_08_04"); //Êàæäûé çäåñü çàíèìàåòñÿ ñâîèì äåëîì, è ñõîäèìñÿ ìû òîëüêî â îäíîì: ëó÷øå ñîáðàòü ðóäó â êó÷ó è âçîðâàòü åå, ÷åì ïîñëàòü õîòü êóñîê ýòîìó êîðîëþ!
    lee = hlp_getnpc(sld_700_lee);
    lee.aivar[7] = true;
    cronos = hlp_getnpc(kdw_604_cronos);
    cronos.aivar[7] = true;
};

instance info_sld_8_daslager(c_info) {
    nr = 2;
    condition = info_sld_8_daslager_condition;
    information = info_sld_8_daslager_info;
    permanent = true;
    description = "Ðàññêàæè ìíå îá ýòîì Ëàãåðå.";
};

func int info_sld_8_daslager_condition() {
    if (!c_npcbelongstonewcamp(other)) {
        return 1;
    };
};

func void info_sld_8_daslager_info() {
    var c_npc cronos;

    ai_output(other, self, "Info_Sld_8_DasLager_15_00"); //Ðàññêàæè ìíå îá ýòîì Ëàãåðå.
    ai_output(self, other, "Info_Sld_8_DasLager_08_01"); //Áóäü çäåñü ïîâíèìàòåëüíåå. Â Ëàãåðå ïîëíî ãîëîâîðåçîâ.
    ai_output(self, other, "Info_Sld_8_DasLager_08_02"); //Çäåñü åñòü íåñêîëüêî íåïèñàííûõ çàêîíîâ. Ïåðâûé: ê ìàãàì íå çàõîäèò íèêòî, êðîìå íàåìíèêîâ.
    ai_output(self, other, "Info_Sld_8_DasLager_08_03"); //Âòîðîé: åñëè ïîïûòàåøüñÿ ïîäîáðàòüñÿ ê íàøåé ðóäå, òû ïîêîéíèê. Òðåòèé: ëó÷øå íå çàõîäèòü â áàð íà îçåðå.
    ai_output(self, other, "Info_Sld_8_DasLager_08_04"); //Âèäèøü ëè, ýòîò áàð ïðèíàäëåæèò âîðàì, è èì íå íðàâèòñÿ êîãäà íîâåíüêèå, âðîäå òåáÿ, òóäà çàõîäÿò.
    cronos = hlp_getnpc(kdw_604_cronos);
    cronos.aivar[7] = true;
};

instance info_sld_8_dielage(c_info) {
    nr = 1;
    condition = info_sld_8_dielage_condition;
    information = info_sld_8_dielage_info;
    permanent = true;
    description = "Êàê äåëà?";
};

func int info_sld_8_dielage_condition() {
    return 1;
};

func void info_sld_8_dielage_info() {
    var c_npc cronos;

    ai_output(other, self, "Info_Sld_8_DieLage_15_00"); //Êàê äåëà?
    ai_output(self, other, "Info_Sld_8_DieLage_08_01"); //Êàê âñåãäà. Ñëåæó çà òåì, ÷òîáû íèêòî íå ïîäîáðàëñÿ ê ìàãàì, äà è ê ðóäå òîæå.
    cronos = hlp_getnpc(kdw_604_cronos);
    cronos.aivar[7] = true;
};

instance info_sld_8_krautprobe(c_info) {
    nr = 5;
    condition = info_sld_8_krautprobe_condition;
    information = info_sld_8_krautprobe_info;
    permanent = true;
    description = "Ó ìåíÿ åñòü áîëîòíèê. Õî÷åøü?";
};

func int info_sld_8_krautprobe_condition() {
    if (((baalkagan_verteilkraut == log_running) || (baalkagan_verteilkraut == log_success)) && (self.aivar[41] <= wld_getday())) {
        return true;
    };
};

func void info_sld_8_krautprobe_info() {
    ai_output(other, self, "Info_Sld_8_Krautprobe_15_00"); //Ó ìåíÿ åñòü áîëîòíèê. Õî÷åøü?
    if (((npc_hasitems(other, itmijoint_1) > 0) || (npc_hasitems(other, itmijoint_2) > 0)) || (npc_hasitems(other, itmijoint_3) > 0)) {
        if (npc_hasitems(other, itmijoint_1)) {
            b_giveinvitems(other, self, itmijoint_1 /*4511*/, 1);
        }
        else if (npc_hasitems(other, itmijoint_2)) {
            b_giveinvitems(other, self, itmijoint_2 /*4513*/, 1);
        }
        else {
            if (npc_hasitems(other, itmijoint_3)) {
                b_giveinvitems(other, self, itmijoint_3 /*4515*/, 1);
            };
        };
        ai_output(self, other, "Info_Sld_8_Krautprobe_08_01"); //Ïî÷åìó áû è íåò? ß äàì òåáå çà íåãî 10 êóñêîâ ðóäû.
        ai_output(self, other, "Info_Sld_8_Krautprobe_08_02"); //Ñïðîñè îñòàëüíûõ - äóìàþ, îíè òîæå áóäóò íå ïðîòèâ.
        createinvitems(self, itminugget, 10);
        b_giveinvitems(self, other, itminugget /*4517*/, 10);
        nc_joints_verteilt = nc_joints_verteilt + 1;
        self.aivar[41] = wld_getday() + 1;
    }
    else {
        ai_output(self, other, "Info_Sld_8_Krautprobe_No_Joint_08_00"); //Ñïåðâà ïîêàæè åãî. Ó òåáÿ âåäü íåò íè ñòåáëÿ, òàê?
    };
};

func void b_assignambientinfos_sld_8(var c_npc slf) {
    b_assignfindnpc_nc(slf);
    info_sld_8_exit.npc = hlp_getinstanceid(slf);
    info_sld_8_einervoneuchwerden.npc = hlp_getinstanceid(slf);
    info_sld_8_wichtigepersonen.npc = hlp_getinstanceid(slf);
    info_sld_8_daslager.npc = hlp_getinstanceid(slf);
    info_sld_8_dielage.npc = hlp_getinstanceid(slf);
    info_sld_8_krautprobe.npc = hlp_getinstanceid(slf);
};

instance info_stt_10_exit(c_info) {
    nr = 999;
    condition = info_stt_10_exit_condition;
    information = info_stt_10_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_stt_10_exit_condition() {
    return 1;
};

func void info_stt_10_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_stt_10_einervoneuchwerden(c_info) {
    nr = 4;
    condition = info_stt_10_einervoneuchwerden_condition;
    information = info_stt_10_einervoneuchwerden_info;
    permanent = true;
    description = "ß õî÷ó ñòàòü Ïðèçðàêîì.";
};

func int info_stt_10_einervoneuchwerden_condition() {
    if (npc_gettrueguild(other) == gil_none) {
        return true;
    };
};

func void info_stt_10_einervoneuchwerden_info() {
    var c_npc diego;

    ai_output(other, self, "Info_Stt_10_EinerVonEuchWerden_15_00"); //ß õî÷ó ñòàòü Ïðèçðàêîì.
    ai_output(self, other, "Info_Stt_10_EinerVonEuchWerden_10_01"); //Äà? Òû óæå ïîãîâîðèë ñ Äèåãî?
    diego = hlp_getnpc(pc_thief);
    diego.aivar[7] = true;
    info_clearchoices(info_stt_10_einervoneuchwerden /*3381*/);
    info_addchoice(info_stt_10_einervoneuchwerden /*3381*/, "Íåò.", info_stt_10_einervoneuchwerden_nein);
    info_addchoice(info_stt_10_einervoneuchwerden /*3381*/, "Äà.", info_stt_10_einervoneuchwerden_ja);
};

func void info_stt_10_einervoneuchwerden_nein() {
    ai_output(other, self, "Info_Stt_10_EinerVonEuchWerden_Nein_15_00"); //Åùå íåò.
    ai_output(self, other, "Info_Stt_10_EinerVonEuchWerden_Nein_10_01"); //Òàê ñäåëàé ýòî. Òû íàéäåøü åãî ïåðåä âõîäîì â çàìîê.
    info_clearchoices(info_stt_10_einervoneuchwerden /*3381*/);
};

func void info_stt_10_einervoneuchwerden_ja() {
    ai_output(other, self, "Info_Stt_10_EinerVonEuchWerden_Ja_15_00"); //ß òàê è ñäåëàþ.
    ai_output(self, other, "Info_Stt_10_EinerVonEuchWerden_Ja_10_01"); //Õîðîøî. Ìíå îò ýòîãî âñå ðàâíî õóæå íå áóäåò. Õîòÿ, êòî çíàåò...
    info_clearchoices(info_stt_10_einervoneuchwerden /*3381*/);
};

instance info_stt_10_wichtigepersonen(c_info) {
    nr = 3;
    condition = info_stt_10_wichtigepersonen_condition;
    information = info_stt_10_wichtigepersonen_info;
    permanent = true;
    description = "Êòî åùå çäåñü ìîæåò áûòü ìíå ïîëåçåí?";
};

func int info_stt_10_wichtigepersonen_condition() {
    return 1;
};

func void info_stt_10_wichtigepersonen_info() {
    ai_output(other, self, "Info_Stt_10_WichtigePersonen_15_00"); //Êòî åùå çäåñü ìîæåò áûòü ìíå ïîëåçåí?
    ai_output(self, other, "Info_Stt_10_WichtigePersonen_10_01"); //Åñëè ó òåáÿ âîçíèêíóò ïðîáëåìû ñî ñòðàæíèêàìè, ïîãîâîðè ñ Ãðàâî. Òû íàéäåøü åãî â êóïàëüíå ðÿäîì ñ âîðîòàìè çàìêà. Îí çàíèìàåòñÿ òåìè, êòî ïîïàë â íåïðèÿòíîñòè - à ýòî ñëó÷àåòñÿ ÷àùå, ÷åì òû äóìàåøü, îñîáåííî ñ íîâè÷êàìè.
};

instance info_stt_10_daslager(c_info) {
    nr = 2;
    condition = info_stt_10_daslager_condition;
    information = info_stt_10_daslager_info;
    permanent = true;
    description = "Ðàññêàæè ìíå î Ëàãåðå.";
};

func int info_stt_10_daslager_condition() {
    return 1;
};

func void info_stt_10_daslager_info() {
    ai_output(other, self, "Info_Stt_10_DasLager_15_00"); //Ðàññêàæè ìíå î Ëàãåðå.
    ai_output(self, other, "Info_Stt_10_DasLager_10_01"); //ß äóìàþ, ñàìîå èíòåðåñíîå ìåñòî - ýòî ðûíîê. Îáÿçàòåëüíî çàãëÿíè òóäà, åñëè òåáå ÷òî-òî ïîíàäîáèòñÿ.
    ai_output(self, other, "Info_Stt_10_DasLager_10_02"); //Îí íàõîäèòñÿ ïîä áîëüøîé êðûøåé ê þãó îò Âíåøíåãî Êîëüöà.
};

instance info_stt_10_dielage(c_info) {
    nr = 1;
    condition = info_stt_10_dielage_condition;
    information = info_stt_10_dielage_info;
    permanent = true;
    description = "Ïðèâåò!";
};

func int info_stt_10_dielage_condition() {
    return 1;
};

func void info_stt_10_dielage_info() {
    ai_output(other, self, "Info_Stt_10_DieLage_15_00"); //Ïðèâåò!
    ai_output(self, other, "Info_Stt_10_DieLage_10_01"); //×òî òåáå íóæíî?
};

func void b_assignambientinfos_stt_10(var c_npc slf) {
    b_assignfindnpc_oc(slf);
    info_stt_10_exit.npc = hlp_getinstanceid(slf);
    info_stt_10_einervoneuchwerden.npc = hlp_getinstanceid(slf);
    info_stt_10_wichtigepersonen.npc = hlp_getinstanceid(slf);
    info_stt_10_daslager.npc = hlp_getinstanceid(slf);
    info_stt_10_dielage.npc = hlp_getinstanceid(slf);
};

instance info_stt_12_exit(c_info) {
    nr = 999;
    condition = info_stt_12_exit_condition;
    information = info_stt_12_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_stt_12_exit_condition() {
    return 1;
};

func void info_stt_12_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_stt_12_einervoneuchwerden(c_info) {
    nr = 4;
    condition = info_stt_12_einervoneuchwerden_condition;
    information = info_stt_12_einervoneuchwerden_info;
    permanent = true;
    description = "ß õî÷ó ñòàòü îäíèì èç Ïðèçðàêîâ.";
};

func int info_stt_12_einervoneuchwerden_condition() {
    if (npc_gettrueguild(other) == gil_none) {
        return true;
    };
};

func void info_stt_12_einervoneuchwerden_info() {
    ai_output(other, self, "Info_Stt_12_EinerVonEuchWerden_15_00"); //ß õî÷ó ñòàòü îäíèì èç Ïðèçðàêîâ.
    ai_output(self, other, "Info_Stt_12_EinerVonEuchWerden_12_01"); //Îõ. Òîãäà òåáå ñòîèò çíàòü, ÷òî Ãîìåç íå âûíîñèò îòêàçîâ. Åñëè õî÷åøü ñòàòü îäíèì èç íàñ, òû äîëæåí áûòü ãîòîâ ïðîéòè ðàäè íåãî îãîíü è âîäó.
    ai_output(self, other, "Info_Stt_12_EinerVonEuchWerden_12_02"); //Â ëó÷øåì ñëó÷àå ïðèíèìàþò íå áîëåå ïîëîâèíû æåëàþùèõ.
    ai_output(other, self, "Info_Stt_12_EinerVonEuchWerden_15_03"); //À ÷òî ñëó÷àåòñÿ ñ îñòàëüíûìè?
    ai_output(self, other, "Info_Stt_12_EinerVonEuchWerden_12_04"); //Óõîäÿò â Íîâûé Ëàãåðü æåâàòü ðèñ. Õå-õå-õå.
};

instance info_stt_12_wichtigepersonen(c_info) {
    nr = 3;
    condition = info_stt_12_wichtigepersonen_condition;
    information = info_stt_12_wichtigepersonen_info;
    permanent = true;
    description = "Êòî çäåñü ãëàâíûé?";
};

func int info_stt_12_wichtigepersonen_condition() {
    return 1;
};

func void info_stt_12_wichtigepersonen_info() {
    var c_npc diego;
    var c_npc thorus;

    ai_output(other, self, "Info_Stt_12_WichtigePersonen_15_00"); //Êòî çäåñü ãëàâíûé?
    ai_output(self, other, "Info_Stt_12_WichtigePersonen_12_01"); //Ïîæàëóé, Äèåãî ìîæíî íàçâàòü ãëàâîé Ïðèçðàêîâ. Íî êòî ñìîæåò ïîãîâîðèòü ñ Ãîìåçîì, ðåøàåò Òîðóñ.
    diego = hlp_getnpc(pc_thief);
    diego.aivar[7] = true;
    thorus = hlp_getnpc(grd_200_thorus);
    thorus.aivar[7] = true;
};

instance info_stt_12_daslager(c_info) {
    nr = 2;
    condition = info_stt_12_daslager_condition;
    information = info_stt_12_daslager_info;
    permanent = true;
    description = "Õîòåëîñü áû çíàòü, ÷òî òàêîãî õîðîøåãî â ýòîì Ëàãåðå?";
};

func int info_stt_12_daslager_condition() {
    return 1;
};

func void info_stt_12_daslager_info() {
    ai_output(other, self, "Info_Stt_12_DasLager_15_00"); //Õîòåëîñü áû çíàòü, ÷òî òàêîãî õîðîøåãî â ýòîì Ëàãåðå?
    ai_output(self, other, "Info_Stt_12_DasLager_12_01"); //Òåáå ëó÷øå ïîãîâîðèòü îá ýòîì ñ ðóäîêîïàìè - èì âñå ðàâíî íå÷åì çàíÿòüñÿ.
};

instance info_stt_12_dielage(c_info) {
    nr = 1;
    condition = info_stt_12_dielage_condition;
    information = info_stt_12_dielage_info;
    permanent = true;
    description = "Êàê äåëà?";
};

func int info_stt_12_dielage_condition() {
    return 1;
};

func void info_stt_12_dielage_info() {
    ai_output(other, self, "Info_Stt_12_DieLage_15_00"); //Íó è êàê èäóò äåëà?
    ai_output(self, other, "Info_Stt_12_DieLage_12_01"); //×òî òåáå íóæíî?
};

func void b_assignambientinfos_stt_12(var c_npc slf) {
    b_assignfindnpc_oc(slf);
    info_stt_12_exit.npc = hlp_getinstanceid(slf);
    info_stt_12_einervoneuchwerden.npc = hlp_getinstanceid(slf);
    info_stt_12_wichtigepersonen.npc = hlp_getinstanceid(slf);
    info_stt_12_daslager.npc = hlp_getinstanceid(slf);
    info_stt_12_dielage.npc = hlp_getinstanceid(slf);
};

instance info_tpl_13_exit(c_info) {
    nr = 999;
    condition = info_tpl_13_exit_condition;
    information = info_tpl_13_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_tpl_13_exit_condition() {
    return 1;
};

func void info_tpl_13_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_tpl_13_einervoneuchwerden(c_info) {
    nr = 4;
    condition = info_tpl_13_einervoneuchwerden_condition;
    information = info_tpl_13_einervoneuchwerden_info;
    permanent = true;
    description = "ß õî÷ó ñòàòü Ñòðàæåì, êàê è òû.";
};

func int info_tpl_13_einervoneuchwerden_condition() {
    if (((npc_gettrueguild(other) != gil_tpl) && (!c_npcbelongstonewcamp(other))) && (!c_npcbelongstooldcamp(other))) {
        return true;
    };
};

func void info_tpl_13_einervoneuchwerden_info() {
    ai_output(other, self, "Info_Tpl_13_EinerVonEuchWerden_15_00"); //ß õî÷ó ñòàòü Ñòðàæåì, êàê è òû.
    ai_output(self, other, "Info_Tpl_13_EinerVonEuchWerden_13_01"); //À çíàåøü ëè òû, îò ÷åãî ìíå ïðèøëîñü îòêàçàòüñÿ, ïðåæäå ÷åì ÿ ñìîã âñòàòü íà ñòðàæå ïîêîÿ èçáðàííûõ Ñïÿùèì?
    ai_output(self, other, "Info_Tpl_13_EinerVonEuchWerden_13_02"); //Íå äóìàé, ÷òî ñìîæåøü òàê âîò çàïðîñòî ïîïàñòü íà ýòî ìåñòî è ïîëó÷èòü ïîäîáàþùèé ïî÷åò è óâàæåíèå.
    ai_output(self, other, "Info_Tpl_13_EinerVonEuchWerden_13_03"); //Ïðåæäå ÷åì ãîâîðèòü îá ýòîì, òû äîëæåí óçíàòü íåìíîãî îá ó÷åíèè Ñïÿùåãî.
    ai_output(self, other, "Info_Tpl_13_EinerVonEuchWerden_13_04"); //Ýòî çàéìåò íåêîòîðîå âðåìÿ è, âîçìîæíî, ïðèâåäåò òåáÿ â ÷óâñòâî.
};

instance info_tpl_13_wichtigepersonen(c_info) {
    nr = 3;
    condition = info_tpl_13_wichtigepersonen_condition;
    information = info_tpl_13_wichtigepersonen_info;
    permanent = true;
    description = "Êòî çäåñü êîìàíäóåò?";
};

func int info_tpl_13_wichtigepersonen_condition() {
    return 1;
};

func void info_tpl_13_wichtigepersonen_info() {
    ai_output(other, self, "Info_Tpl_13_WichtigePersonen_15_00"); //Êòî çäåñü êîìàíäóåò?
    ai_output(self, other, "Info_Tpl_13_WichtigePersonen_13_01"); //Íàøè Ãóðó è èçáðàííûå Ñïÿùåãî. Ñïÿùèé îïðåäåëÿåò íàøó ñóäüáó, è Ãóðó ñëóæàò åìó ïðîðîêàìè.
};

instance info_tpl_13_daslager(c_info) {
    nr = 2;
    condition = info_tpl_13_daslager_condition;
    information = info_tpl_13_daslager_info;
    permanent = true;
    description = "Ìíå õîòåëîñü áû çàãëÿíóòü â õðàì Ñïÿùåãî...";
};

func int info_tpl_13_daslager_condition() {
    if (kapitel <= 1) {
        return 1;
    };
};

func void info_tpl_13_daslager_info() {
    ai_output(other, self, "Info_Tpl_13_DasLager_15_00"); //Ìíå õîòåëîñü áû çàãëÿíóòü â õðàì Ñïÿùåãî...
    ai_output(self, other, "Info_Tpl_13_DasLager_13_01"); //È äóìàòü çàáóäü îá ýòîì! Íåâåðóþùèé â Õðàìå! Ïîêà òû íå ïîñâÿòèøü ñåáÿ ñëóæáå Ñïÿùåìó, òû íå ñìîæåøü ïåðåñòóïèòü ïîðîã ýòîãî ìåñòà!
};

instance info_tpl_13_dielage(c_info) {
    nr = 1;
    condition = info_tpl_13_dielage_condition;
    information = info_tpl_13_dielage_info;
    permanent = true;
    description = "Êàê äåëà?";
};

func int info_tpl_13_dielage_condition() {
    if (!c_npcbelongstopsicamp(other)) {
        return 1;
    };
};

func void info_tpl_13_dielage_info() {
    ai_output(other, self, "Info_Tpl_13_DieLage_15_00"); //Êàê äåëà?
    ai_output(self, other, "Info_Tpl_13_DieLage_13_01"); //Ñ òåõ ïîð êàê ÿ ñòàë îäíèì èç èçáðàííûõ çàùèòíèêîâ âåðû, ÿ ÷óâñòâóþ ñåáÿ, êàê íèêîãäà ðàíüøå.
    ai_output(other, self, "Info_Tpl_13_DieLage_15_02"); //Çâó÷èò çàíÿòíî...
    ai_output(self, other, "Info_Tpl_13_DieLage_13_03"); //Òû íåâåðóþùèé. Òåáå íå ïîíÿòü.
};

func void b_assignambientinfos_tpl_13(var c_npc slf) {
    b_assignfindnpc_st(slf);
    info_tpl_13_exit.npc = hlp_getinstanceid(slf);
    info_tpl_13_einervoneuchwerden.npc = hlp_getinstanceid(slf);
    info_tpl_13_wichtigepersonen.npc = hlp_getinstanceid(slf);
    info_tpl_13_daslager.npc = hlp_getinstanceid(slf);
    info_tpl_13_dielage.npc = hlp_getinstanceid(slf);
};

instance info_tpl_8_exit(c_info) {
    nr = 999;
    condition = info_tpl_8_exit_condition;
    information = info_tpl_8_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_tpl_8_exit_condition() {
    return 1;
};

func void info_tpl_8_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_tpl_8_einervoneuchwerden(c_info) {
    nr = 4;
    condition = info_tpl_8_einervoneuchwerden_condition;
    information = info_tpl_8_einervoneuchwerden_info;
    permanent = true;
    description = "Íóæíû ëè âàì âåðíûå ëþäè?";
};

func int info_tpl_8_einervoneuchwerden_condition() {
    if (((npc_gettrueguild(other) != gil_tpl) && (!c_npcbelongstonewcamp(other))) && (!c_npcbelongstooldcamp(other))) {
        return true;
    };
};

func void info_tpl_8_einervoneuchwerden_info() {
    ai_output(other, self, "Info_Tpl_8_EinerVonEuchWerden_15_00"); //Íóæíû ëè âàì âåðíûå ëþäè?
    ai_output(self, other, "Info_Tpl_8_EinerVonEuchWerden_08_01"); //Âåðíûå ëþäè íóæíû âñåãäà. Íî òåáå ïðèäåòñÿ ñåðüåçíî ïîðàáîòàòü íàä ñîáîé. Òîëüêî ëó÷øèå èç ëó÷øèõ ìîãóò ñòàòü Ñòðàæàìè.
    ai_output(self, other, "Info_Tpl_8_EinerVonEuchWerden_08_02"); //Ýòî âûñî÷àéøàÿ ÷åñòü äëÿ ëþáîãî ïîñëåäîâàòåëÿ Áðàòñòâà Ñïÿùåãî.
};

instance info_tpl_8_wichtigepersonen(c_info) {
    nr = 3;
    condition = info_tpl_8_wichtigepersonen_condition;
    information = info_tpl_8_wichtigepersonen_info;
    permanent = true;
    description = "Êòî çäåñü êîìàíäóåò?";
};

func int info_tpl_8_wichtigepersonen_condition() {
    return 1;
};

func void info_tpl_8_wichtigepersonen_info() {
    var c_npc yberion;
    var c_npc corkalom;
    var c_npc corangar;

    ai_output(other, self, "Info_Tpl_8_WichtigePersonen_15_00"); //Êòî çäåñü êîìàíäóåò?
    ai_output(self, other, "Info_Tpl_8_WichtigePersonen_08_01"); //Ìû ïîä÷èíÿåìñÿ Ãóðó. Ñëóæèòü èì - íàø ïî÷åòíûé äîëã.
    ai_output(other, self, "Info_Tpl_8_WichtigePersonen_15_02"); //Êòî îíè, ýòè Ãóðó?
    ai_output(self, other, "Info_Tpl_8_WichtigePersonen_08_03"); //Ãëàâíûé Ãóðó - Þ`Áåðèîí Ïðîñâåùåííûé. Åìó ïîìîãàþò Êîð Ãàëîì, Êîð Àíãàð è îñòàëüíûå.
    yberion = hlp_getnpc(gur_1200_yberion);
    corkalom = hlp_getnpc(gur_1201_corkalom);
    corangar = hlp_getnpc(gur_1202_corangar);
    yberion.aivar[7] = true;
    corkalom.aivar[7] = true;
    corangar.aivar[7] = true;
};

instance info_tpl_8_daslager(c_info) {
    nr = 2;
    condition = info_tpl_8_daslager_condition;
    information = info_tpl_8_daslager_info;
    permanent = true;
    description = "Ðàññêàæè ìíå îá ýòîì Ëàãåðå.";
};

func int info_tpl_8_daslager_condition() {
    if (!c_npcbelongstopsicamp(other)) {
        return 1;
    };
};

func void info_tpl_8_daslager_info() {
    ai_output(other, self, "Info_Tpl_8_DasLager_15_00"); //Ðàññêàæè ìíå îá ýòîì Ëàãåðå.
    ai_output(self, other, "Info_Tpl_8_DasLager_08_01"); //Òû íîâè÷îê è ìîæåøü õîäèòü ãäå òåáå âçäóìàåòñÿ. Äëÿ íåâåðóþùèõ çàêðûò ëèøü õðàì Ñïÿùåãî.
    ai_output(self, other, "Info_Tpl_8_DasLager_08_02"); //Ïîñòàðàéñÿ íå íàðóøàòü ýòè ïðàâèëà. È íå áåñïîêîé íàøèõ íàñòàâíèêîâ âî âðåìÿ ìåäèòàöèè.
};

instance info_tpl_8_dielage(c_info) {
    nr = 1;
    condition = info_tpl_8_dielage_condition;
    information = info_tpl_8_dielage_info;
    permanent = true;
    description = "Êàê èäóò äåëà?";
};

func int info_tpl_8_dielage_condition() {
    if (!c_npcbelongstopsicamp(other)) {
        return 1;
    };
};

func void info_tpl_8_dielage_info() {
    ai_output(other, self, "Info_Tpl_8_DieLage_15_00"); //Êàê æèçíü?
    ai_output(self, other, "Info_Tpl_8_DieLage_08_01"); //Ïðåäóïðåæäàþ òåáÿ: ÿ íå ïîòåðïëþ íåóâàæåíèÿ. Òû ðàçãîâàðèâàåøü ñ îäíèì èç èçáðàííûõ ñòðàæåé ïðîðîêîâ.
};

func void b_assignambientinfos_tpl_8(var c_npc slf) {
    b_assignfindnpc_st(slf);
    info_tpl_8_exit.npc = hlp_getinstanceid(slf);
    info_tpl_8_einervoneuchwerden.npc = hlp_getinstanceid(slf);
    info_tpl_8_wichtigepersonen.npc = hlp_getinstanceid(slf);
    info_tpl_8_daslager.npc = hlp_getinstanceid(slf);
    info_tpl_8_dielage.npc = hlp_getinstanceid(slf);
};

instance info_vlk_1_exit(c_info) {
    nr = 999;
    condition = info_vlk_1_exit_condition;
    information = info_vlk_1_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_vlk_1_exit_condition() {
    return 1;
};

func void info_vlk_1_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_vlk_1_einervoneuchwerden(c_info) {
    nr = 4;
    condition = info_vlk_1_einervoneuchwerden_condition;
    information = info_vlk_1_einervoneuchwerden_info;
    permanent = true;
    description = "Êàê ìíå ïðèñîåäèíèòüñÿ ê ýòîìó Ëàãåðþ?";
};

func int info_vlk_1_einervoneuchwerden_condition() {
    if (npc_gettrueguild(other) == gil_none) {
        return true;
    };
};

func void info_vlk_1_einervoneuchwerden_info() {
    ai_output(other, self, "Info_Vlk_1_EinerVonEuchWerden_15_00"); //Êàê ìíå ïðèñîåäèíèòüñÿ ê ýòîìó Ëàãåðþ?
    ai_output(self, other, "Info_Vlk_1_EinerVonEuchWerden_01_01"); //Ýòî î÷åíü ïðîñòî. Õâàòàåøü êèðêó è îòïðàâëÿåøüñÿ â øàõòó. Ïîëîâèíó äîáûòîé ðóäû ïðèäåòñÿ îòäàòü çà çàùèòó, íó à îñòàâøåéñÿ êàê ðàç õâàòèò íà òî, ÷òîáû íå ïðîòÿíóòü íîãè ñ ãîëîäà.
    ai_output(self, other, "Info_Vlk_1_EinerVonEuchWerden_01_02"); //Ãîìåç çàëàìûâàåò çà ñâîè ïðèïàñû ïðîñòî ãðàáèòåëüñêóþ öåíó. Íî âñå ðàâíî ýòî ëó÷øå, ÷åì öåëûìè äíÿìè æåâàòü ðèñ, êàê ýòî äåëàþò â Íîâîì Ëàãåðå.
};

instance info_vlk_1_wichtigepersonen(c_info) {
    nr = 3;
    condition = info_vlk_1_wichtigepersonen_condition;
    information = info_vlk_1_wichtigepersonen_info;
    permanent = true;
    description = "Êòî çäåñü êîìàíäóåò?";
};

func int info_vlk_1_wichtigepersonen_condition() {
    return 1;
};

func void info_vlk_1_wichtigepersonen_info() {
    ai_output(other, self, "Info_Vlk_1_WichtigePersonen_15_00"); //Êòî çäåñü ãëàâíûé?
    ai_output(self, other, "Info_Vlk_1_WichtigePersonen_01_01"); //Áàðîíû ðóäíèêà. Îíè íàëàäèëè îáìåí ñ êîðîëåì. Åñòåñòâåííî, ÷åì òû âàæíåå, òåì áîëüøå òû ïîëó÷àåøü.
};

instance info_vlk_1_daslager(c_info) {
    nr = 2;
    condition = info_vlk_1_daslager_condition;
    information = info_vlk_1_daslager_info;
    permanent = true;
    description = "Çäåñü åñòü ÷òî-íèáóäü, êðîìå ýòèõ õèæèí?";
};

func int info_vlk_1_daslager_condition() {
    return 1;
};

func void info_vlk_1_daslager_info() {
    ai_output(other, self, "Info_Vlk_1_DasLager_15_00"); //Çäåñü åñòü ÷òî-íèáóäü, êðîìå ýòèõ õèæèí?
    ai_output(self, other, "Info_Vlk_1_DasLager_01_01"); //Íó, âå÷åðîì ìîæíî ïîéòè íà àðåíó è ïîñìîòðåòü, êàê ñòðàæíèêè ñâîðà÷èâàþò äðóã äðóãó ÷åëþñòè.
    ai_output(self, other, "Info_Vlk_1_DasLager_01_02"); //Ïîèñòèíå, ýòî ñòîèò ñâîèõ äåíåã.
};

instance info_vlk_1_dielage(c_info) {
    nr = 1;
    condition = info_vlk_1_dielage_condition;
    information = info_vlk_1_dielage_info;
    permanent = true;
    description = "Êàê äåëà?";
};

func int info_vlk_1_dielage_condition() {
    return 1;
};

func void info_vlk_1_dielage_info() {
    ai_output(other, self, "Info_Vlk_1_DieLage_15_00"); //Êàê äåëà?
    ai_output(self, other, "Info_Vlk_1_DieLage_01_01"); //Ïîñëåäíèå äâå íåäåëè ÿ ïðîâåë â øàõòå. Âñå, ÷åãî ÿ ñåé÷àñ õî÷ó, ýòî ïîêîé, òàê ÷òî óáèðàéñÿ ñ ãëàç ìîèõ.
};

func void b_assignambientinfos_vlk_1(var c_npc slf) {
    b_assignfindnpc_oc(slf);
    info_vlk_1_exit.npc = hlp_getinstanceid(slf);
    info_vlk_1_einervoneuchwerden.npc = hlp_getinstanceid(slf);
    info_vlk_1_wichtigepersonen.npc = hlp_getinstanceid(slf);
    info_vlk_1_daslager.npc = hlp_getinstanceid(slf);
    info_vlk_1_dielage.npc = hlp_getinstanceid(slf);
};

instance info_vlk_2_exit(c_info) {
    nr = 999;
    condition = info_vlk_2_exit_condition;
    information = info_vlk_2_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_vlk_2_exit_condition() {
    return 1;
};

func void info_vlk_2_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_vlk_2_einervoneuchwerden(c_info) {
    nr = 4;
    condition = info_vlk_2_einervoneuchwerden_condition;
    information = info_vlk_2_einervoneuchwerden_info;
    permanent = true;
    description = "ß õî÷ó ïðèñîåäèíèòüñÿ ê âàì.";
};

func int info_vlk_2_einervoneuchwerden_condition() {
    if (npc_gettrueguild(other) == gil_none) {
        return true;
    };
};

func void info_vlk_2_einervoneuchwerden_info() {
    ai_output(other, self, "Info_Vlk_2_EinerVonEuchWerden_15_00"); //ß õî÷ó ñòàòü îäíèì èç âàñ.
    ai_output(self, other, "Info_Vlk_2_EinerVonEuchWerden_02_01"); //Íå ïîíèìàþ, çà÷åì òåáå äîáðîâîëüíî ñîâàòüñÿ â øàõòó. Ïàðíè âðîäå òåáÿ îáû÷íî äîâîëüíî áûñòðî ïåðååçæàþò â çàìîê.
};

instance info_vlk_2_wichtigepersonen(c_info) {
    nr = 3;
    condition = info_vlk_2_wichtigepersonen_condition;
    information = info_vlk_2_wichtigepersonen_info;
    permanent = true;
    description = "Êòî çäåñü êîìàíäóåò?";
};

func int info_vlk_2_wichtigepersonen_condition() {
    return 1;
};

func void info_vlk_2_wichtigepersonen_info() {
    ai_output(other, self, "Info_Vlk_2_WichtigePersonen_15_00"); //Êòî çäåñü êîìàíäóåò?
    ai_output(self, other, "Info_Vlk_2_WichtigePersonen_02_01"); //Çäåñü, âî Âíåøíåì Êîëüöå, äåíüãè çà çàùèòó ñîáèðàþò Ôëåò÷åð, Áëàäâèí è Øàêàë. Ó êàæäîãî èç íèõ åñòü ñâîé ðàéîí.
    ai_output(self, other, "Info_Vlk_2_WichtigePersonen_02_02"); //Åñëè ïîëàäèøü ñ íèìè, ñ÷èòàé, âñå â ïîðÿäêå.
};

instance info_vlk_2_daslager(c_info) {
    nr = 2;
    condition = info_vlk_2_daslager_condition;
    information = info_vlk_2_daslager_info;
    permanent = true;
    description = "Ðàññêàæè ìíå î Ëàãåðå.";
};

func int info_vlk_2_daslager_condition() {
    return 1;
};

func void info_vlk_2_daslager_info() {
    ai_output(other, self, "Info_Vlk_2_DasLager_15_00"); //Ðàññêàæè ìíå î Ëàãåðå.
    ai_output(self, other, "Info_Vlk_2_DasLager_02_01"); //Òåáå íóæíî ïîãîâîðèòü ñ Ïðèçðàêàìè. Îíè çíàþò îáî âñåì, ÷òî òåáå íóæíî. Íî áóäü îñòîðîæåí - áîëüøèíñòâó èç íèõ íåëüçÿ äîâåðÿòü.
};

instance info_vlk_2_dielage(c_info) {
    nr = 1;
    condition = info_vlk_2_dielage_condition;
    information = info_vlk_2_dielage_info;
    permanent = true;
    description = "È êàê çäåñü æèâåòñÿ?";
};

func int info_vlk_2_dielage_condition() {
    if (npc_gettrueguild(hero) == gil_none) {
        return 1;
    };
};

func void info_vlk_2_dielage_info() {
    ai_output(other, self, "Info_Vlk_2_DieLage_15_00"); //Êàê çäåñü æèâåòñÿ?
    ai_output(self, other, "Info_Vlk_2_DieLage_02_01"); //Åñëè òåáÿ ïðèñëàëè Áàðîíû, ñêàæè èì, ÷òî ÿ íå õî÷ó íåïðèÿòíîñòåé. ß íè ñ êåì íå ãîâîðþ îá ýòîì.
    ai_output(self, other, "Info_Vlk_2_DieLage_02_02"); //ß äîâîëåí òåì, ÷òî îíè äàþò íàì.
    ai_output(other, self, "Info_Vlk_2_DieLage_15_03"); //Íèêòî ìåíÿ íå ïîñûëàë. ß çäåñü íåäàâíî.
    ai_output(self, other, "Info_Vlk_2_DieLage_02_04"); //Íîâåíüêèé, à? Íîâè÷êè âñåãäà áûñòðî ïîïàäàþò â íåïðèÿòíîñòè. À ìíå íå íóæíû ïðîáëåìû, ïîíÿë?
};

func void b_assignambientinfos_vlk_2(var c_npc slf) {
    b_assignfindnpc_oc(slf);
    info_vlk_2_exit.npc = hlp_getinstanceid(slf);
    info_vlk_2_einervoneuchwerden.npc = hlp_getinstanceid(slf);
    info_vlk_2_wichtigepersonen.npc = hlp_getinstanceid(slf);
    info_vlk_2_daslager.npc = hlp_getinstanceid(slf);
    info_vlk_2_dielage.npc = hlp_getinstanceid(slf);
};

instance info_vlk_3_exit(c_info) {
    nr = 999;
    condition = info_vlk_3_exit_condition;
    information = info_vlk_3_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_vlk_3_exit_condition() {
    return 1;
};

func void info_vlk_3_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_vlk_3_einervoneuchwerden(c_info) {
    nr = 4;
    condition = info_vlk_3_einervoneuchwerden_condition;
    information = info_vlk_3_einervoneuchwerden_info;
    permanent = true;
    description = "Êàê ìíå ïðèñîåäèíèòüñÿ ê ýòîìó Ëàãåðþ?";
};

func int info_vlk_3_einervoneuchwerden_condition() {
    if (npc_gettrueguild(other) == gil_none) {
        return true;
    };
};

func void info_vlk_3_einervoneuchwerden_info() {
    ai_output(other, self, "Info_Vlk_3_EinerVonEuchWerden_15_00"); //Êàê ìíå ïðèñîåäèíèòüñÿ ê ýòîìó Ëàãåðþ?
    ai_output(self, other, "Info_Vlk_3_EinerVonEuchWerden_03_01"); //ß âñåãî ëèøü ðóäîêîï. Ìíå íå÷åãî òåáå ñêàçàòü. Òåáå íóæíî ïîãîâîðèòü ñ Ïðèçðàêàìè èëè ñî ñòðàæåé.
};

instance info_vlk_3_wichtigepersonen(c_info) {
    nr = 3;
    condition = info_vlk_3_wichtigepersonen_condition;
    information = info_vlk_3_wichtigepersonen_info;
    permanent = true;
    description = "Êòî çäåñü ãëàâíûé?";
};

func int info_vlk_3_wichtigepersonen_condition() {
    if (!c_npcbelongstooldcamp(other)) {
        return 1;
    };
};

func void info_vlk_3_wichtigepersonen_info() {
    ai_output(other, self, "Info_Vlk_3_WichtigePersonen_15_00"); //Êòî çäåñü ãëàâíûé?
    ai_output(self, other, "Info_Vlk_3_WichtigePersonen_03_01"); //Ãîìåç. Îí æèâåò â çàìêå. Íî íàì, ðóäîêîïàì, è ñî ñòðàæíèêàìè ïðîáëåì õâàòàåò.
    ai_output(self, other, "Info_Vlk_3_WichtigePersonen_03_02"); //Òåáå ëó÷øå íå âñòàâàòü ó íèõ íà ïóòè. Âïðî÷åì, ýòî íå ìîÿ ïðîáëåìà.
};

instance info_vlk_3_daslager(c_info) {
    nr = 2;
    condition = info_vlk_3_daslager_condition;
    information = info_vlk_3_daslager_info;
    permanent = true;
    description = "Íà ÷òî çäåñü ñòîèò îáðàòèòü âíèìàíèå? ";
};

func int info_vlk_3_daslager_condition() {
    return 1;
};

func void info_vlk_3_daslager_info() {
    ai_output(other, self, "Info_Vlk_3_DasLager_15_00"); //Íà ÷òî çäåñü ñòîèò îáðàòèòü âíèìàíèå?
    ai_output(self, other, "Info_Vlk_3_DasLager_03_01"); //Åñëè òåáå íðàâèòñÿ àçàðò, ïðèõîäè ïî âå÷åðàì ê àðåíå. Åñëè õî÷åøü êóïèòü ÷òî-íèáóäü, îòïðàâëÿéñÿ íà ðûíîê.
    ai_output(self, other, "Info_Vlk_3_DasLager_03_02"); //Òàì ïðîäàþò ïðàêòè÷åñêè âñå. Êðîìå êàðò. Åñëè íóæíû êàðòû, òåáå ñòîèò óâèäåòü Ãðåõýìà. Åãî äîì íàõîäèòñÿ íàïðîòèâ âîðîò çàìêà.
};

instance info_vlk_3_dielage(c_info) {
    nr = 1;
    condition = info_vlk_3_dielage_condition;
    information = info_vlk_3_dielage_info;
    permanent = true;
    description = "Êàê æèçíü?";
};

func int info_vlk_3_dielage_condition() {
    return 1;
};

func void info_vlk_3_dielage_info() {
    ai_output(other, self, "Info_Vlk_3_DieLage_15_00"); //Êàê äåëà?
    ai_output(self, other, "Info_Vlk_3_DieLage_03_01"); //Ñêîðî òû âñå ïîéìåøü. Âñåãäà áóäü íà÷åêó. Îñîáåííî ïî íî÷àì.
    ai_output(self, other, "Info_Vlk_3_DieLage_03_02"); //Çíàåøü, ñêîëüêî ÿ óæå íå ñïàë ïî-÷åëîâå÷åñêè? À åñëè òû íå ñïèøü â ýòîé êîëîíèè, ñ÷èòàé, ðàáîòàåøü â äâå ñìåíû.
};

func void b_assignambientinfos_vlk_3(var c_npc slf) {
    b_assignfindnpc_oc(slf);
    info_vlk_3_exit.npc = hlp_getinstanceid(slf);
    info_vlk_3_einervoneuchwerden.npc = hlp_getinstanceid(slf);
    info_vlk_3_wichtigepersonen.npc = hlp_getinstanceid(slf);
    info_vlk_3_daslager.npc = hlp_getinstanceid(slf);
    info_vlk_3_dielage.npc = hlp_getinstanceid(slf);
};

instance info_vlk_4_exit(c_info) {
    nr = 999;
    condition = info_vlk_4_exit_condition;
    information = info_vlk_4_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_vlk_4_exit_condition() {
    return 1;
};

func void info_vlk_4_exit_info() {
    ai_output(other, self, "Info_Vlk_4_EinerVonEuchWerden_15_00"); //Ñïàñèáî. Óäà÷è!
    ai_output(self, other, "Info_Vlk_4_EinerVonEuchWerden_04_01"); //Âûøå íîñ, ïðèÿòåëü.
    ai_stopprocessinfos(self);
};

instance info_vlk_4_einervoneuchwerden(c_info) {
    nr = 4;
    condition = info_vlk_4_einervoneuchwerden_condition;
    information = info_vlk_4_einervoneuchwerden_info;
    permanent = true;
    description = "×òî íóæíî ñäåëàòü, äëÿ òîãî ÷òîáû ïðèñîåäèíèòüñÿ ê ýòîìó Ëàãåðþ?";
};

func int info_vlk_4_einervoneuchwerden_condition() {
    if (npc_gettrueguild(other) == gil_none) {
        return true;
    };
};

func void info_vlk_4_einervoneuchwerden_info() {
    var c_npc thorus;

    ai_output(other, self, "Info_Vlk_4_EinerVonEuchWerden_15_01"); //×òî íóæíî ñäåëàòü, ÷òîáû ïðèñîåäèíèòüñÿ ê ýòîìó Ëàãåðþ?
    ai_output(self, other, "Info_Vlk_4_EinerVonEuchWerden_04_04"); //Òû õî÷åøü ñòàòü ñòðàæíèêîì èëè Ïðèçðàêîì? Ýòî áóäåò íåëåãêî, ïðèÿòåëü. Òåáå ïðèäåòñÿ ïðîéòè íåñêîëüêî èñïûòàíèé ïðåæäå ÷åì ñòàðûé Òîðóñ ïîçâîëèò òåáå âñòðåòèòüñÿ ñ Ãîìåçîì.
    ai_output(self, other, "Info_Vlk_4_EinerVonEuchWerden_04_02"); //Òåáå íóæíî çíàòü, ñ êåì èç ìåñòíûõ ñòîèò çàâîäèòü çíàêîìñòâî, à ñ êåì - âðàæäîâàòü. Íî ïîêà òû íå ïðèñîåäèíèøüñÿ ê îäíîìó èç Ëàãåðåé, íèêòî íå áóäåò âîñïðèíèìàòü òåáÿ âñåðüåç.
    ai_output(self, other, "Info_Vlk_4_EinerVonEuchWerden_04_03"); //Åñëè áû ÿ áûë íà òâîåì ìåñòå, ÿ áû ïîãîâîðèë ñ êåì-íèáóäü èç Ïðèçðàêîâ. Ìîæåò áûòü ñðåäè íèõ íàéäåòñÿ òîò, êòî çàõî÷åò ïîìî÷ü òåáå. Íå äàðîì,  ðàçóìååòñÿ.
    thorus = hlp_getnpc(grd_200_thorus);
    thorus.aivar[7] = true;
};

instance info_vlk_4_wichtigepersonen(c_info) {
    nr = 3;
    condition = info_vlk_4_wichtigepersonen_condition;
    information = info_vlk_4_wichtigepersonen_info;
    permanent = true;
    description = "Íà êîãî åùå èç ìåñòíûõ ìíå ñòîèò îáðàòèòü âíèìàíèå?";
};

func int info_vlk_4_wichtigepersonen_condition() {
    return 1;
};

func void info_vlk_4_wichtigepersonen_info() {
    ai_output(other, self, "Info_Vlk_4_WichtigePersonen_15_00"); //Íà êîãî åùå èç ìåñòíûõ ìíå ñòîèò îáðàòèòü âíèìàíèå?
    ai_output(self, other, "Info_Vlk_4_WichtigePersonen_04_01"); //Äëÿ íîâè÷êà î÷åíü âàæíî íå èñïîðòèòü îòíîøåíèÿ ñ Ãðàâî. Ìîæåò áûòü, îí âñåãî ëèøü ðóäîêîï, íî çàòî îí çíàåò, êàê âåñòè äåëà ñ Áàðîíàìè.
    ai_output(self, other, "Info_Vlk_4_WichtigePersonen_04_02"); //Åñëè ó òåáÿ âîçíèêíóò ïðîáëåìû ñ êîìïàíèåé Ãîìåçà, îí ïîìîæåò òåáå è èç ýòîãî âûïóòàòüñÿ.
};

instance info_vlk_4_daslager(c_info) {
    nr = 2;
    condition = info_vlk_4_daslager_condition;
    information = info_vlk_4_daslager_info;
    permanent = true;
    description = "Íà ÷òî çäåñü ñòîèò îáðàòèòü âíèìàíèå? ";
};

func int info_vlk_4_daslager_condition() {
    if (npc_gettrueguild(hero) == gil_none) {
        return 1;
    };
};

func void info_vlk_4_daslager_info() {
    ai_output(other, self, "Info_Vlk_4_DasLager_15_00"); //Íà ÷òî çäåñü ñòîèò îáðàòèòü âíèìàíèå?
    ai_output(self, other, "Info_Vlk_4_DasLager_04_01"); //Åñëè òåáå íå óëûáàåòñÿ èäåÿ êîïàòüñÿ â øàõòå, ïîïðîáóé ïîáðîäèòü ìåæäó ñåâåðíûìè âîðîòàìè è âîðîòàìè çàìêà.
    ai_output(self, other, "Info_Vlk_4_DasLager_04_02"); //Åñëè òåáå ïîâåçåò, Òîðóñ èëè Äèåãî ìîãóò äàòü òåáå êàêîå-íèáóäü ïîðó÷åíèå - à ýòî õîðîøèé øàíñ çàâîåâàòü èõ ðàñïîëîæåíèå. Íèêîìó íå ïîìåøàåò äðóæáà ñ ëþäüìè Ãîìåçà.
    ai_output(self, other, "Info_Vlk_4_DasLager_04_03"); //Èëè òû ìîæåøü âñòðåòèòü ìàãà. Èíîãäà îíè òîæå äàþò ïîðó÷åíèÿ è õîðîøî ïëàòÿò çà ýòî.
    ai_output(other, self, "Info_Vlk_4_DasLager_15_04"); //Ìàãè âûõîäÿò èç çàìêà? Êîãäà?
    ai_output(self, other, "Info_Vlk_4_DasLager_04_05"); //Åñëè áû ÿ çíàë. Ñïðîñè ó òåõ, êòî òàì æèâåò.
};

instance info_vlk_4_dielage(c_info) {
    nr = 1;
    condition = info_vlk_4_dielage_condition;
    information = info_vlk_4_dielage_info;
    permanent = true;
    description = "Âñå â ïîðÿäêå?";
};

func int info_vlk_4_dielage_condition() {
    return 1;
};

func void info_vlk_4_dielage_info() {
    ai_output(other, self, "Info_Vlk_4_DieLage_15_00"); //Âñå â ïîðÿäêå?
    ai_output(self, other, "Info_Vlk_4_DieLage_04_01"); //Â ïîëíîì, êàê è äâàäöàòü ëåò íàçàä. Ñ òåõ ïîð âñå íå ñëèøêîì-òî èçìåíèëîñü.
};

func void b_assignambientinfos_vlk_4(var c_npc slf) {
    b_assignfindnpc_oc(slf);
    info_vlk_4_exit.npc = hlp_getinstanceid(slf);
    info_vlk_4_einervoneuchwerden.npc = hlp_getinstanceid(slf);
    info_vlk_4_wichtigepersonen.npc = hlp_getinstanceid(slf);
    info_vlk_4_daslager.npc = hlp_getinstanceid(slf);
    info_vlk_4_dielage.npc = hlp_getinstanceid(slf);
};

func void b_assignambientinfos(var c_npc amb_self) {
    if ((amb_self.npctype == npctype_ambient) || (amb_self.npctype == npctype_guard)) {
        if (amb_self.guild == gil_vlk) {
            if (amb_self.voice == 1) {
                b_assignambientinfos_vlk_1(amb_self);
            }
            else if (amb_self.voice == 2) {
                b_assignambientinfos_vlk_2(amb_self);
            }
            else if (amb_self.voice == 3) {
                b_assignambientinfos_vlk_3(amb_self);
            }
            else {
                if (amb_self.voice == 4) {
                    b_assignambientinfos_vlk_4(amb_self);
                };
            };
        }
        else if (amb_self.guild == gil_grd) {
            if (amb_self.voice == 6) {
                b_assignambientinfos_grd_6(amb_self);
            }
            else if (amb_self.voice == 7) {
                b_assignambientinfos_grd_7(amb_self);
            }
            else {
                if (amb_self.voice == 13) {
                    b_assignambientinfos_grd_13(amb_self);
                };
            };
        }
        else if (amb_self.guild == gil_stt) {
            if (amb_self.voice == 10) {
                b_assignambientinfos_stt_10(amb_self);
            }
            else {
                if (amb_self.voice == 12) {
                    b_assignambientinfos_stt_12(amb_self);
                };
            };
        }
        else if (amb_self.guild == gil_sfb) {
            if (amb_self.voice == 1) {
                b_assignambientinfos_sfb_1(amb_self);
            }
            else if (amb_self.voice == 2) {
                b_assignambientinfos_sfb_2(amb_self);
            }
            else {
                if (amb_self.voice == 5) {
                    b_assignambientinfos_sfb_5(amb_self);
                };
            };
        }
        else if (amb_self.guild == gil_nov) {
            if (amb_self.voice == 2) {
                b_assignambientinfos_nov_2(amb_self);
            }
            else if (amb_self.voice == 3) {
                b_assignambientinfos_nov_3(amb_self);
            }
            else {
                if (amb_self.voice == 5) {
                    b_assignambientinfos_nov_5(amb_self);
                };
            };
        }
        else if (amb_self.guild == gil_tpl) {
            if (amb_self.voice == 8) {
                b_assignambientinfos_tpl_8(amb_self);
            }
            else {
                if (amb_self.voice == 13) {
                    b_assignambientinfos_tpl_13(amb_self);
                };
            };
        }
        else if (amb_self.guild == gil_bau) {
            if (amb_self.voice == 2) {
                b_assignambientinfos_bau_2(amb_self);
            }
            else if (amb_self.voice == 4) {
                b_assignambientinfos_bau_4(amb_self);
            }
            else {
                if (amb_self.voice == 9) {
                    b_assignambientinfos_bau_9(amb_self);
                };
            };
        }
        else if (amb_self.guild == gil_org) {
            if (amb_self.voice == 6) {
                b_assignambientinfos_org_6(amb_self);
            }
            else if (amb_self.voice == 7) {
                b_assignambientinfos_org_7(amb_self);
            }
            else {
                if (amb_self.voice == 13) {
                    b_assignambientinfos_org_13(amb_self);
                };
            };
        }
        else if (amb_self.guild == gil_sld) {
            if (amb_self.voice == 8) {
                b_assignambientinfos_sld_8(amb_self);
            }
            else {
                if (amb_self.voice == 11) {
                    b_assignambientinfos_sld_11(amb_self);
                };
            };
        }
        else {
            if (((amb_self.guild == gil_orcwarrior) || (amb_self.guild == gil_orcscout)) || (amb_self.guild == gil_orcshaman)) {
                b_assignambientinfos_orc_17(amb_self);
            };
        };
    };
    if ((amb_self.npctype == npctype_mine_ambient) || (amb_self.npctype == npctype_mine_guard)) {
        if (amb_self.guild == gil_vlk) {
            if (amb_self.voice == 1) {
                b_assignambientinfos_mine_vlk_1(amb_self);
            }
            else if (amb_self.voice == 2) {
                b_assignambientinfos_mine_vlk_2(amb_self);
            }
            else if (amb_self.voice == 3) {
                b_assignambientinfos_mine_vlk_3(amb_self);
            }
            else {
                if (amb_self.voice == 4) {
                    b_assignambientinfos_mine_vlk_4(amb_self);
                };
            };
        }
        else if (amb_self.guild == gil_grd) {
            if (amb_self.voice == 6) {
                b_assignambientinfos_mine_grd_6(amb_self);
            }
            else if (amb_self.voice == 7) {
                b_assignambientinfos_mine_grd_7(amb_self);
            }
            else {
                if (amb_self.voice == 13) {
                    b_assignambientinfos_mine_grd_13(amb_self);
                };
            };
        }
        else if (amb_self.guild == gil_sld) {
            if (amb_self.voice == 8) {
                b_assignambientinfos_mine_sld_8(amb_self);
            }
            else {
                if (amb_self.voice == 11) {
                    b_assignambientinfos_mine_sld_11(amb_self);
                };
            };
        }
        else if (amb_self.guild == gil_org) {
            if (amb_self.voice == 6) {
                b_assignambientinfos_mine_org_6(amb_self);
            }
            else if (amb_self.voice == 7) {
                b_assignambientinfos_mine_org_7(amb_self);
            }
            else {
                if (amb_self.voice == 13) {
                    b_assignambientinfos_mine_org_13(amb_self);
                };
            };
        };
    };
};

func void b_buyattributepoints(var c_npc typ, var int atr, var int atrplus) {
    var int typ_atr;
    var string atrplusstring;
    var string printstring;

    if (atr == atr_strength) {
        typ_atr = typ.attribute[atr_strength] /*4*/;
    }
    else if (atr == atr_dexterity) {
        typ_atr = typ.attribute[atr_dexterity] /*5*/;
    }
    else {
        if (atr == atr_mana_max) {
            typ_atr = typ.attribute[atr_mana_max] /*3*/;
        };
    };
    atrplusstring = inttostring(atrplus);
    if (!(typ.lp < atrplus)) {
        if ((typ_atr + atrplus) <= 100) {
            typ.lp = typ.lp - atrplus;
            if (atr == atr_strength) {
                typ.attribute[atr_strength] /*4*/ = typ.attribute[atr_strength] /*4*/ + atrplus;
                printstring = concatstrings(name_buyattributestr, atrplusstring);
                printscreen(printstring, -1, -1, font_old_20, 1);
            }
            else if (atr == atr_dexterity) {
                typ.attribute[atr_dexterity] /*5*/ = typ.attribute[atr_dexterity] /*5*/ + atrplus;
                printstring = concatstrings(name_buyattributedex, atrplusstring);
                printscreen(printstring, -1, -1, font_old_20, 1);
            }
            else {
                if (atr == atr_mana_max) {
                    typ.attribute[atr_mana_max] /*3*/ = typ.attribute[atr_mana_max] /*3*/ + atrplus;
                    printstring = concatstrings(name_buyattributeman, atrplusstring);
                    printscreen(printstring, -1, -1, font_old_20, 1);
                };
            };
        }
        else {
            printscreen(print_max_100, -1, -1, font_old_20, 1);
            b_say(self, other, "$NOLEARNOVERMAX");
        };
    }
    else {
        printscreen(print_notenoughskillpoints, -1, -1, font_old_20, 1);
        b_say(self, other, "$NOLEARNNOPOINTS");
    };
};

func string b_buildbuyarmorstring(var string text, var int price) {
    var string msg;

    msg = concatstrings(text, name_buyarmorprefix);
    msg = concatstrings(msg, inttostring(price));
    msg = concatstrings(msg, name_buyarmorpostfix);
    return msg;
};

func string b_buildlearnstring(var string text, var int lp, var int ore) {
    var string msg;

    msg = concatstrings(text, name_learnprefix);
    if (ore > 0) {
        msg = concatstrings(msg, inttostring(ore));
        msg = concatstrings(msg, name_learnmidfix);
    };
    msg = concatstrings(msg, inttostring(lp));
    if (lp == 1) {
        msg = concatstrings(msg, name_learnpostfixs);
    }
    else {
        msg = concatstrings(msg, name_learnpostfixp);
    };
    return msg;
};

func int b_giveskill(var c_npc typ, var int tal, var int new_wert, var int lp_cost) {
    var int tal_wert;

    if (tal == npc_talent_1h) {
        tal_wert = npc_gettalentskill(typ, npc_talent_1h);
    }
    else if (tal == npc_talent_2h) {
        tal_wert = npc_gettalentskill(typ, npc_talent_2h);
    }
    else if (tal == npc_talent_bow) {
        tal_wert = npc_gettalentskill(typ, npc_talent_bow);
    }
    else if (tal == npc_talent_crossbow) {
        tal_wert = npc_gettalentskill(typ, npc_talent_crossbow);
    }
    else if (tal == npc_talent_picklock) {
        tal_wert = npc_gettalentskill(typ, npc_talent_picklock);
    }
    else if (tal == npc_talent_pickpocket) {
        tal_wert = npc_gettalentskill(typ, npc_talent_pickpocket);
    }
    else if (tal == npc_talent_mage) {
        tal_wert = npc_gettalentskill(typ, npc_talent_mage);
    }
    else if (tal == npc_talent_sneak) {
        tal_wert = npc_gettalentskill(typ, npc_talent_sneak);
    }
    else if (tal == npc_talent_regenerate) {
        tal_wert = npc_gettalentskill(typ, npc_talent_regenerate);
    }
    else if (tal == npc_talent_firemaster) {
        tal_wert = npc_gettalentskill(typ, npc_talent_firemaster);
    }
    else {
        if (tal == npc_talent_acrobat) {
            tal_wert = npc_gettalentskill(typ, npc_talent_acrobat);
        };
    };
    if ((tal_wert + 1) == new_wert) {
        if (typ.lp >= lp_cost) {
            typ.lp = typ.lp - lp_cost;
            if (tal == npc_talent_1h) {
                npc_settalentskill(typ, npc_talent_1h, new_wert);
                npc_settalentvalue(typ, npc_talent_1h, npc_gettalentvalue(typ, npc_talent_1h) + 5);
                printscreen(print_learn_onehanded, -1, -1, font_old_20, 2);
                return 1;
            }
            else if (tal == npc_talent_2h) {
                npc_settalentskill(typ, npc_talent_2h, new_wert);
                npc_settalentvalue(typ, npc_talent_2h, npc_gettalentvalue(typ, npc_talent_2h) + 5);
                printscreen(print_learn_twohanded, -1, -1, font_old_20, 2);
                return 1;
            }
            else if (tal == npc_talent_bow) {
                npc_settalentskill(typ, npc_talent_bow, new_wert);
                npc_settalentvalue(typ, npc_talent_bow, npc_gettalentvalue(typ, npc_talent_bow) + 15);
                printscreen(print_learn_bow, -1, -1, font_old_20, 2);
                return 1;
            }
            else if (tal == npc_talent_crossbow) {
                npc_settalentskill(typ, npc_talent_crossbow, new_wert);
                npc_settalentvalue(typ, npc_talent_crossbow, npc_gettalentvalue(typ, npc_talent_crossbow) + 20);
                printscreen(print_learn_crossbow, -1, -1, font_old_20, 2);
                return 1;
            }
            else if (tal == npc_talent_picklock) {
                npc_settalentskill(typ, npc_talent_picklock, new_wert);
                npc_settalentvalue(typ, npc_talent_picklock, npc_gettalentvalue(typ, npc_talent_picklock) - 40);
                printscreen(print_learn_locks, -1, -1, font_old_20, 2);
                return 1;
            }
            else if (tal == npc_talent_pickpocket) {
                npc_settalentskill(typ, npc_talent_pickpocket, new_wert);
                npc_settalentvalue(typ, npc_talent_pickpocket, npc_gettalentvalue(typ, npc_talent_pickpocket) - 40);
                printscreen(print_learn_pickpocket, -1, -1, font_old_20, 2);
                return 1;
            }
            else if (tal == npc_talent_mage) {
                npc_settalentskill(typ, npc_talent_mage, new_wert);
                printscreen(print_learn_magiccircle, -1, -1, font_old_20, 2);
                return 1;
            }
            else if (tal == npc_talent_sneak) {
                npc_settalentskill(typ, npc_talent_sneak, new_wert);
                printscreen(print_learn_sneak, -1, -1, font_old_20, 2);
                return 1;
            }
            else if (tal == npc_talent_regenerate) {
                npc_settalentskill(typ, npc_talent_regenerate, new_wert);
                printscreen(print_learn_regen, -1, -1, font_old_20, 2);
                return 1;
            }
            else if (tal == npc_talent_firemaster) {
                npc_settalentskill(typ, npc_talent_firemaster, new_wert);
                printscreen(print_learn_masteroffire, -1, -1, font_old_20, 2);
                return 1;
            }
            else if (tal == npc_talent_acrobat) {
                npc_settalentskill(typ, npc_talent_acrobat, new_wert);
                printscreen(print_learn_acrobatics, -1, -1, font_old_20, 2);
                return 1;
            }
            else {
                return 0;
            };
        }
        else {
            printscreen(print_notenoughskillpoints, -1, -1, font_old_20, 2);
            b_say(self, other, "$NOLEARNNOPOINTS");
            return 0;
        };
    }
    else if (tal_wert >= new_wert) {
        b_say(self, other, "$NOLEARNYOUREBETTER");
        return 0;
    }
    else {
        if ((tal_wert + 1) < new_wert) {
            b_say(self, other, "$NOLEARNYOUALREADYKNOW");
            return 0;
        };
    };
};

func void b_initializestory() {
};

func int b_setdaytolerance() {
    if (wld_istime(22, 0, 23, 59)) {
        return wld_getday() + 1;
    }
    else {
        return wld_getday();
    };
};

func void b_respawn(var c_npc slf) {
};

func void b_setroguestohostile() {
    var c_npc quentin;
    var c_npc rog863;
    var c_npc rog864;
    var c_npc rog865;
    var c_npc rog866;
    var c_npc rog867;
    var c_npc rog868;
    var c_npc rog869;
    var c_npc rog870;
    var c_npc rog871;
    var c_npc rog874;
    var c_npc renyu;
    var c_npc killian;
    var c_npc jacko;
    var c_npc non1501;
    var c_npc non1502;
    var c_npc non1503;
    var c_npc non1504;

    quentin = hlp_getnpc(org_858_quentin);
    npc_settempattitude(quentin, att_hostile);
    npc_setattitude(quentin, att_hostile);
    rog863 = hlp_getnpc(org_863_raeuber);
    npc_settempattitude(rog863, att_hostile);
    npc_setattitude(rog863, att_hostile);
    rog864 = hlp_getnpc(org_864_raeuber);
    npc_settempattitude(rog864, att_hostile);
    npc_setattitude(rog864, att_hostile);
    rog865 = hlp_getnpc(org_865_raeuber);
    npc_settempattitude(rog865, att_hostile);
    npc_setattitude(rog865, att_hostile);
    rog866 = hlp_getnpc(org_866_raeuber);
    npc_settempattitude(rog866, att_hostile);
    npc_setattitude(rog866, att_hostile);
    rog867 = hlp_getnpc(org_867_raeuber);
    npc_settempattitude(rog867, att_hostile);
    npc_setattitude(rog867, att_hostile);
    rog868 = hlp_getnpc(org_868_raeuber);
    npc_settempattitude(rog868, att_hostile);
    npc_setattitude(rog868, att_hostile);
    rog869 = hlp_getnpc(org_869_raeuber);
    npc_settempattitude(rog869, att_hostile);
    npc_setattitude(rog869, att_hostile);
    rog870 = hlp_getnpc(org_870_raeuber);
    npc_settempattitude(rog870, att_hostile);
    npc_setattitude(rog870, att_hostile);
    rog871 = hlp_getnpc(org_871_raeuber);
    npc_settempattitude(rog871, att_hostile);
    npc_setattitude(rog871, att_hostile);
    rog874 = hlp_getnpc(org_874_raeuber);
    npc_settempattitude(rog874, att_hostile);
    npc_setattitude(rog874, att_hostile);
    if (stooges_fled == true) {
        renyu = hlp_getnpc(org_860_renyu);
        if (hlp_isvalidnpc(renyu)) {
            npc_settempattitude(renyu, att_hostile);
            npc_setattitude(renyu, att_hostile);
        };
        killian = hlp_getnpc(org_861_killian);
        if (hlp_isvalidnpc(killian)) {
            npc_settempattitude(killian, att_hostile);
            npc_setattitude(killian, att_hostile);
        };
        jacko = hlp_getnpc(org_862_jacko);
        if (hlp_isvalidnpc(jacko)) {
            npc_settempattitude(jacko, att_hostile);
            npc_setattitude(jacko, att_hostile);
        };
    };
    non1501 = hlp_getnpc(non_1501_wegelagerer);
    npc_settempattitude(non1501, att_hostile);
    npc_setattitude(non1501, att_hostile);
    non1502 = hlp_getnpc(non_1502_wegelagerer);
    npc_settempattitude(non1502, att_hostile);
    npc_setattitude(non1502, att_hostile);
    non1503 = hlp_getnpc(non_1503_wegelagerer);
    npc_settempattitude(non1503, att_hostile);
    npc_setattitude(non1503, att_hostile);
    non1504 = hlp_getnpc(non_1504_wegelagerer);
    npc_settempattitude(non1504, att_hostile);
    npc_setattitude(non1504, att_hostile);
};

const string mobname_backpack_1 = "";

const string mobname_crate = "Êîðîáêà";

const string mobname_chest = "Ñóíäóê";

const string mobname_bed = "Êðîâàòü";

const string mobname_door = "Äâåðü";

const string mobname_camp = "";

const string mobname_torch = "";

const string mobname_torchholder = "";

const string mobname_barbq_scav = "";

const string mobname_barrelo_oc = "";

const string mobname_bench = "";

const string mobname_anvil = "Íàêîâàëüíÿ";

const string mobname_bucket = "Âåäðî";

const string mobname_forge = "Ãîðíèëî";

const string mobname_grindstone = "Òî÷èëî";

const string mobname_wheel = "Ëåáåäêà";

const string mobname_lab = "";

const string mobname_book = "";

const string mobname_chair = "";

const string mobname_cauldron = "Êîòåë";

const string mobname_throne = "";

const string mobname_pan = "Ñêîâîðîäà";

const string mobname_repair = "";

const string mobname_waterpipe = "Òðóáà";

const string mobname_ladder = "Ëåñòíèöà";

const string mobname_switch = "Ïåðåêëþ÷àòåëü";

const string mobname_baronsthrone = "";

const string mobname_ore = "Ðóäà";

const string mobname_ropeway = "";

const string mobname_stomper = "";

const string mobname_bellow = "Ìåõè";

const string mobname_stonemill = "";

const string mobname_orc_mummy = "Ìóìèÿ";

const string mobname_pillar = "Êîëîííà";

const string mobname_basket_rice = "";

const string mobname_drum = "";

const string mobname_ground_slot = "n/a";

const string mobname_herb_psi = "Ïðåññ";

const string mobname_idol = "Ñòàòóýòêà";

const string mobname_lean_wall = "";

const string mobname_orcdrum = "";

const string mobname_targetstone = "Öåëü";

const string mobname_shrine = "Ñâÿòèëèùå îðêîâ";

const string mobname_swordstone = "Ñòðàííîå ñâÿòèëèùå";

const string mobname_bathtub = "";

const string mobname_sarcophagus = "";

const string txt_guilds[42] = {
    "(íåò)", "Áàðîí", "Ñòðàæíèê", "Ïðèçðàê", "Ìàã Îãíÿ", "Ðóäîêîï", 
    "Ìàã Âîäû", "Íàåìíèê", "Âîð", "Êðåñòüÿíèí", "Ñêðåáîê", "Ãóðó", 
    "Ïîñëóøíèê", "Ñòðàæ", "Íåêðîìàíò", "Äåâèöà", "", "ßùåðèöà", 
    "Ñïÿùèé", "Ãîáëèí", "Òðîëëü", "Ãëîðõ", "Ïîëçóí", "Ìÿñíîé æóê", 
    "Ïàäàëüùèê", "Äåìîí", "Âîëê", "Ìðàêîðèñ", "Øåðøåíü", "Áîëîòîæîð", 
    "Çîìáè", "Îðê-çîìáè", "Ñêåëåòîí", "Îðî÷üÿ ãîí÷àÿ", "Êðîòîêðûñ", "Ãîëåì", 
    "Øíûã", "", "Øàìàí îðêîâ", "Âîèí îðêîâ", "Ðàçâåä÷èê îðêîâ", "Îðê-ðàá"
};

const string txt_spells[59] = {
    "Ñâåò", "Îãíåííûé øàð", "n/a", "Ñòðàõ", "Èñöåëåíèå", "n/a", "Ñîçäàòü äåìîíà", "Ñîçäàòü ñêåëåòîíîâ", 
    "n/a", "Êóëàê âåòðà", "Òåëåêèíåç", "×àðû", "Ñîí", "Ïèðîêèíåç", "Êîëüöî ñìåðòè", "Êîíòðîëü", 
    "Ñìåðòü íåæèòè", "Îãíåííàÿ ñòðåëà", "Îãíåííûé øòîðì", "Îãíåííûé äîæäü", "n/a", "Ïîðòàë ê Ìàãàì Îãíÿ", "Ïîðòàë ê Ìàãàì Âîäû", "Ïîðòàë ê Íåêðîìàíòó", 
    "Ïîðòàë ê îðêàì", "Ïîðòàë â Áîëîòíûé Ëàãåðü", "Òðàíñôîðìàöèÿ â øåðøíÿ", "n/a", "Òðàíñôîðìàöèÿ â ïîëçóíà", "Òðàíñôîðìàöèÿ â øíûãó", "Òðàíñôîðìàöèÿ â ìÿñíîãî æóêà", "Òðàíñôîðìàöèÿ â êðîòîêðûñà", 
    "Òðàíñôîðìàöèÿ â îðî÷üþ ãîí÷óþ", "n/a", "Òðàíñôîðìàöèÿ â ïàäàëüùèêà", "n/a", "Òðàíñôîðìàöèÿ â ìðàêîðèñà", "Òðàíñôîðìàöèÿ â ãëîðõà", "Òðàíñôîðìàöèÿ â ÿùåðèöó", "Òðàíñôîðìàöèÿ â âîëêà", 
    "Ìîëíèÿ", "Ëåäÿíàÿ ñòðåëà", "Øàðîâàÿ ìîëíèÿ", "Ëåäÿíàÿ ãëûáà", "Ëåäÿíàÿ âîëíà", "Ñîçäàòü ãîëåìà", "Àðèìèÿ òüìû", "Êóëàê øòîðìà", 
    "n/a", "Äûõàíèå ñìåðòè", "Èñ÷åçíîâåíèå ìîíñòðà", "n/a", "n/a", "Áåðñåðêåð", "Ãíåì Óðèçåëÿ", "Íîâûé2", 
    "Íîâûé3", "Íîâûé4", "Íîâûé5"
};

const string txt_talents[12] = {
    "", "Îäíîðó÷íûé ìå÷", "Äâóðó÷íûé ìå÷", "Ëóê", "Àðáàëåò", "Âñêðûòèå çàìêîâ", "Êðàæà", "Ìàãèÿ", "Ïîäêðàäûâàíèå", "Âîññòàíîâëåíèå", "Ìàñòåð îãíÿ", "Àêðîáàòèêà"
};

const string txt_talents_skills[12] = {
    "", "íå îáó÷åí|îáó÷åí|ìàñòåð", "íå îáó÷åí|îáó÷åí|ìàñòåð", "íå îáó÷åí|îáó÷åí|ìàñòåð", "íå îáó÷åí|îáó÷åí|ìàñòåð", "íå îáó÷åí|îáó÷åí|ìàñòåð", "íå îáó÷åí|îáó÷åí|ìàñòåð", "íå îáó÷åí|Êðóã 1|Êðóã 2|Êðóã 3|Êðóã 4|Êðóã 5|Êðóã 6", "íå îáó÷åí|îáó÷åí", "|", "|", "íå îáó÷åí|îáó÷åí"
};

const string txt_inv_cat[9] = {
    "", "Îðóæèå", "Äîñïåõè", "Ìàãèÿ", "Àðòåôàêòû", "Åäà", "Ýëèêñèðû", "Äîêóìåíòû", "Ðàçíîå"
};

const string name_buddler = "Ðóäîêîï";

const string name_schatten = "Ïðèçðàê";

const string name_convoitraeger = "Íîñèëüùèê";

const string name_convoiwache = "Îõðàííèê";

const string name_torwache = "Ñòðàæíèê ó âîðîò";

const string name_brueckenwache = "Ñòðàæíèê ó ìîñòà";

const string name_gardist = "Ñòðàæíèê";

const string name_bauer = "Êðåñòüÿíèí";

const string name_schlaeger = "Ãîëîâîðåç";

const string name_schuerfer = "Ñêðåáîê";

const string name_organisator = "Âîð";

const string name_soeldner = "Íàåìíèê";

const string name_novize = "Ïîñëóøíèê";

const string name_templer = "Ñòðàæ";

const string name_raeuber = "Ãîëîâîðåç";

const string name_tuersteher = "Ãðîìèëà";

const string name_madnovice = "Ôàíàòè÷íûé ïîñëóøíèê";

const string name_madtemplar = "Ôàíàòè÷íûé ñòðàæ";

const string name_madtemplar2 = "Àïîêàëèïñè÷åñêèé ñòðàæ";

const string name_orcshaman = "Óð-Øàê";

const string name_curedorc = "Òàððîê";

const string dialog_ende = "ÇÀÊÎÍ×ÈÒÜ";

const string dialog_back = "ÍÀÇÀÄ";

const string dialog_trade = "(Òîðãîâàòü)";

const string name_ring = "Êîëüöî";

const string name_amulett = "Àìóëåò";

const string name_trank = "Ýëèêñèð";

const string name_rune = "Ðóíà";

const string name_spruchrolle = "Ñâèòîê";

const string name_value = "Öåííîñòü:";

const string name_mag_circle = "Êðóã:";

const string name_manakosten = "Ñòîèò ìàíû:";

const string name_manakostenmax = "Ñòîèò ìàíû (ìàêñ.):";

const string name_manapersec = "Ìàíû â ñåê.";

const string name_duration = "Äëèòåëüíîñòü (ìèí.)";

const string name_mana_needed = "Òðåáóåòñÿ ìàíû:";

const string name_str_needed = "Òðåáóåòñÿ ñèëû:";

const string name_dex_needed = "Òðåáóåòñÿ ëîâêîñòè:";

const string name_spell_load = "Çàêëèíàíèå çàðÿäà";

const string name_spell_invest = "Çàêëèíèíèå ïîêðîâà";

const string name_dam_edge = "Óðîí îò îðóæèÿ";

const string name_dam_point = "Óðîí îò ñòðåëû";

const string name_dam_fire = "Óðîí îò îãíÿ";

const string name_dam_magic = "Óðîí îò ìàãèè";

const string name_dam_fly = "Óðîí îò ýëåêòðè÷åñòâà";

const string name_damage = "Óðîí:";

const string name_permana = " (çà åäèíèöó ìàíû)";

const string name_damagepersec = "Óðîí â ñåêóíäó";

const string name_prot_edge = "Çàùèòà îò îðóæèÿ:";

const string name_prot_point = "Çàùèòà îò ñòðåë:";

const string name_prot_fire = "Çàùèòà îò îãíÿ:";

const string name_prot_magic = "Çàùèòà îò ìàãèè:";

const string name_bonus_hp = "Áîíóñ ê æèçíè:";

const string name_bonus_mana = "Áîíóñ ê ìàíå:";

const string name_bonus_hpmax = "Áîíóñ çà ìàêñèìàëüíóþ æèçíü:";

const string name_bonus_manamax = "Áîíóñ çà ìàêñèìàëüíóþ ìàíó:";

const string name_bonus_dex = "Áîíóñ ê ëîâêîñòè:";

const string name_bonus_str = "Áîíóñ ê ñèëå:";

const string name_onehanded = "Îäíîðó÷íîå îðóæèå";

const string name_twohanded = "Äâóðó÷íîå îðóæèå";

const string name_healingpermana = "Èñöåëåíèå çà åä. ìàíû";

const string name_buyattributestr = "Ñèëà +";

const string name_buyattributedex = "Ëîâêîñòü +";

const string name_buyattributeman = "Ìàíà +";

const string name_xpgained = "îïûò +";

const string name_levelup = "Äîñòèãíóò íîâûé óðîâåíü!";

const string name_newlogentry = "Íîâàÿ çàïèñü â äíåâíèêå";

const string print_learn_onehanded = "Îáó÷åí âëàäåíèþ îäíîðó÷íûì îðóæèåì";

const string print_learn_twohanded = "Îáó÷åí âëàäåíèþ äâóðó÷íûì îðóæèåì";

const string print_learn_bow = "Îáó÷åí ñòðåëüáå èç ëóêà";

const string print_learn_crossbow = "Îáó÷åí ñòðåëüáå èç àðáàëåòà";

const string print_learn_locks = "Îáó÷åí îòêðûâàíèþ çàìêîâ";

const string print_learn_pickpocket = "Îáó÷åí êàðìàííîé êðàæå";

const string print_learn_magiccircle = "Îáó÷åí ñëåäóþùåìó êðóãó ìàãèè";

const string print_learn_acrobatics = "Îáó÷åí àêðîáàòèêå";

const string print_learn_sneak = "Îáó÷åí ïîäêðàäûâàíèþ";

const string print_learn_masteroffire = "Îáó÷åí èñêóññòâó Ïîâåëèòåëÿ Îãíÿ";

const string print_learn_stinger = "Îáó÷åí óäàëåíèþ æàëà";

const string print_learn_teeth = "Èçó÷èòü: Âûðåçàíèå çóáîâ";

const string print_learn_fur = "Èçó÷èòü: Ñíÿòèå øêóðû";

const string print_learn_claws = "Èçó÷èòü: Âûðåçàíèå êîãòåé";

const string print_learn_skin = "Èçó÷èòü: Ñíÿòèå êîæè";

const string print_learn_crawlerplates = "Èçó÷èòü: Âûðåçàíèå ïëàñòèí äëÿ äîñïåõîâ";

const string print_learn_crawlermandibles1 = "Èçó÷èòü: Óäàëåíèå ÷åëþñòåé ïîëçóíîâ";

const string print_learn_crawlermandibles2 = "Èçó÷èòü: Óäàëåíèå ÷åëþñòåé ïîëçóíîâ";

const string print_learn_regen = "Óâåëè÷èòü óðîâåíü âîññòàíîâëåíèÿ ñèë";

const string print_max_100 = "Ïîâûøåíèå âûøå 100 íåâîçìîæíî!";

const string print_notenoughskillpoints = "Íåäîñòàòî÷íî î÷êîâ îáó÷åíèÿ!";

const string print_xp_map = "aáàâAÁÀÂ";

const string print_itmijoint_3_bonus = "Ìàíà +2";

const string print_horatio_strength_5 = "Ñèëà +5";

const string print_horatio_strength_100 = "Ñèëà: 100";

const string print_mes_sleep = "Òû õîðîøî âûñïàëñÿ";

const string _str_invalid = "(íåèçâåñòíî)-";

const string _str_attribute_hitpoints = "æèçíè";

const string _str_attribute_hitpoints_max = "ìàêñèìàëüíîé æèçíè";

const string _str_attribute_mana = "ìàíû";

const string _str_attribute_mana_max = "ìàêñèìàëüíîé ìàíû";

const string _str_attribute_strength = "ñèëû";

const string _str_attribute_dexterity = "ëîâêîñòè";

const string _str_attribute_magic_circle = "Äëÿ èñïîëüçîâàíèÿ ýòîãî ïðåäìåòà íåîáõîäèìî çíàíèå ";

const string _str_cannotuse_pre_player = "Äëÿ èñïîëüçîâàíèÿ ýòîãî ïðåäìåòà âàì íå õâàòàåò ";

const string _str_cannotuse_points = "åä. ";

const string _str_cannotuse_levels = " Êðóãà Ìàãèè!";

const string _str_cannotuse_post = ", äëÿ èñïîëüçîâàíèÿ";

const string _str_cannotuse_pre_npc = " (";

const string _str_cannotuse_post_npc = ")  íå õâàòàåò";

const string _str_message_interact_no_key = "Íåò îòìû÷êè èëè êëþ÷à.";

const string _str_message_picklock_success = "çâó÷èò õîðîøî.";

const string _str_message_picklock_unlock = "Çàìîê îòêðûò.";

const string _str_message_picklock_failure = "×åðò... âñå ñíà÷àëà.";

const string _str_message_picklock_broken = "Îòìû÷êà ñëîìàëàñü.";

const string _str_message_oclever_stucks = "Ðû÷àã íå äâèãàåòñÿ.";

const string _str_message_oclever_moves = "Ñòàòóýòêà äâèãàåò ðû÷àã.";

const string _str_message_wheel_stucks = "Ëåáåäêà çàåëà.";

const string _str_message_item_given = "Îòäàí 1 ïðåäìåò";

const string _str_message_item_taken = "Ïîëó÷åí 1 ïðåäìåò";

const string _str_message_items_given = "Îòäàíî ïðåäìåòîâ: ";

const string _str_message_items_taken = "Ïîëó÷åíî ïðåäìåòîâ: ";

const string _str_message_ore_given = "Îòäàíî ðóäû: ";

const string _str_message_ore_taken = "Ïîëó÷åíî ðóäû: ";

const string _str_message_trade_failure = "Ñòîèìîñòü òîâàðîâ íåäîñòàòî÷íî âûñîêà.";

const string _str_message_joincamp = "Óñëîâèå ïðèíÿòèÿ: Óðîâåíü ";

const string _str_message_cannotsteal = "Êðàæà íåâîçìîæíà.";

const int _ypos_message_given = 37;

const int _ypos_message_taken = 40;

const int _ypos_message_logentry = 45;

const int _ypos_message_xpgained = 50;

const int _ypos_message_levelup = 55;

const int _ypos_message_joincamp = 50;

const int _ypos_message_picklock_success = 6;

const int _ypos_message_picklock_unlock = 9;

const int _ypos_message_picklock_failure = 12;

const int _ypos_message_picklock_broken = 15;

const int _ypos_message_cannotsteal = 6;

const int _time_message_given = 4;

const int _time_message_taken = 4;

const int _time_message_logentry = 4;

const int _time_message_xpgained = 3;

const int _time_message_levelup = 5;

const int _time_message_raiseattribute = 4;

const int _time_message_joincamp = 5;

const int _time_message_picklock = 3;

const int _time_message_cannotsteal = 2;

const string name_buyarmorprefix = " (";

const string name_buyarmorpostfix = " ðóäû)";

const string name_learnprefix = " (";

const string name_learnmidfix = " ðóäû, ";

const string name_learnpostfixs = " î÷. îáó÷åíèÿ)";

const string name_learnpostfixp = " î÷. îáó÷åíèÿ)";

const string name_learnstrength_1 = "Ñèëà +1";

const string name_learnstrength_5 = "Ñèëà +5";

const string name_learnstrength_10 = "Ñèëà +10";

const string name_learnstrength_20 = "Ñèëà +20";

const string name_learndexterity_1 = "Ëîâêîñòü +1";

const string name_learndexterity_5 = "Ëîâêîñòü +5";

const string name_learndexterity_10 = "Ëîâêîñòü +10";

const string name_learndexterity_20 = "Ëîâêîñòü +20";

const string name_learnmana_1 = "Ìàíà +1";

const string name_learnmana_5 = "Ìàíà +5";

const string name_learnmana_10 = "Ìàíà +10";

const string name_learnmana_20 = "Ìàíà +20";

const string name_learn1h_1 = "Îäíîðó÷íûé ìå÷, óðîâåíü 1";

const string name_learn1h_2 = "Îäíîðó÷íûé ìå÷, óðîâåíü 2";

const string name_learn2h_1 = "Äâóðó÷íûé ìå÷, óðîâåíü 1";

const string name_learn2h_2 = "Äâóðó÷íûé ìå÷, óðîâåíü 1";

const string name_learnbow_1 = "Ëóê, óðîâåíü 1";

const string name_learnbow_2 = "Ëóê, óðîâåíü 2";

const string name_learncrossbow_1 = "Àðáàëåò, óðîâåíü 1";

const string name_learncrossbow_2 = "Àðáàëåò, óðîâåíü 2";

const string name_learnmage_1 = "Ïåðâûé êðóã ìàãèè";

const string name_learnmage_2 = "Âòîðîé êðóã ìàãèè";

const string name_learnmage_3 = "Òðåòèé êðóã ìàãèè";

const string name_learnmage_4 = "×åòâåðòûé êðóã ìàãèè";

const string name_learnmage_5 = "Ïÿòûé êðóã ìàãèè";

const string name_learnmage_6 = "Øåñòîé êðóã ìàãèè";

const string name_learnpickpocket_1 = "Êðàæà, óðîâåíü 1";

const string name_learnpickpocket_2 = "Êðàæà, óðîâåíü 2";

const string name_learnpicklock_1 = "Âñêðûâàíèå çàìêîâ, óðîâåíü 1";

const string name_learnpicklock_2 = "Âñêðûâàíèå çàìêîâ, óðîâåíü 2";

const string name_learnacrobat = "Àêðîáàòèêà";

const string name_learnsneak = "Ïîäêðàäûâàíèå";

const string name_raisestrength = "Ñèëà +";

const string name_raisedexterity = "Ëîâêîñòü +";

const string name_raisestrdex = "Ñèëà è ëîâêîñòü +";

const string name_raisemanamax = "Ìàêñèìàëüíàÿ ìàíà +";

const string name_raisehealthmax = "Ìàêñèìàëüíàÿ æèçíü +";

const string name_corristohighrobe = "Ãîñïîäèí ìîé, ÿ õî÷ó íîñèòü îáëà÷åíèå âûñøèõ ìàãîâ Îãíÿ.";

const string name_saturashighrobe = "Îáëà÷åíèå âûñøèõ ìàãîâ";

const string name_diegoheavyshadows = "Òÿæåëûé äîñïåõ ïðèçðàêîâ. Çàùèòà: îò îðóæèÿ 40, îò ñòðåë 5, îò îãíÿ 20";

const string name_stoneheavyguards = "Òÿæåëûé äîñïåõ ñòðàæíèêà. Çàùèòà: îò îðóæèÿ 70, îò ñòðåë 10, îò îãíÿ 35";

const string name_stoneguards = "Äîñïåõ ñòðàæíèêà. Çàùèòà: îò îðóæèÿ 55, îò ñòðåë 10, îò îãíÿ 25";

const string name_wolfbandits = "Äîñïåõ âîðà. Çàùèòà: îò îðóæèÿ 35, îò ñòðåë 5, îò îãíÿ 15";

const string name_wolfheavybandits = "Òÿæåëûé äîñïåõ âîðà. Çàùèòà: îò îðóæèÿ 40, îò ñòðåë 5, îò îãíÿ 20";

const string name_leemercs = "Äîñïåõ íàåìíèêà. Çàùèòà: îò îðóæèÿ 55, îò ñòðåë 10, îò îãíÿ 25";

const string name_leeheavymercs = "Òÿæåëûé äîñïåõ íàåìíèêà. Çàùèòà: îò îðóæèÿ 70, îò ñòðåë 10, îò îãíÿ 35";

const string name_fisklightdiggers = "Ïðîñòûå øòàíû ðóäîêîïà. Çàùèòà: îò îðóæèÿ 10, îò îãíÿ 5";

const string name_fiskdiggers = "Øòàíû ðóäîêîïà. Çàùèòà: îò îðóæèÿ 15, îò îãíÿ 5";

const string name_gornatothheavytpl = "Òÿæåëûé äîñïåõ ñòðàæà. Çàùèòà: îò îðóæèÿ 70, îò ñòðåë 10, îò îãíÿ 35";

const string name_gornatothtpl = "Äîñïåõ ñòðàæà. Çàùèòà: îò îðóæèÿ 55, îò ñòðåë 10, îò îãíÿ 25";

const string name_torwachenpsirock = "Íàáåäðåííàÿ ïîâÿçêà. Çàùèòà: îò îðóæèÿ 15, îò îãíÿ 10";

const string menu_text_needs_apply = "";

const string menu_text_needs_restart = "Íåêîòîðûå íàñòðîéêè âñòóïÿò â ñèëó òîëüêî ïîñëå ïåðåçàãðóçêè.";

const string str_info_trade_accept = "Ïðèíÿòü";

const string str_info_trade_reset = "Îòêàçàòüñÿ";

const string str_info_trade_exit = "Íàçàä";

const string str_badenixe = "Badenixe";

const string kapwechsel_1 = "Ãëàâà 1";

const string kapwechsel_1_text = "Äîáðî ïîæàëîâàòü!";

const string kapwechsel_2 = "Ãëàâà 2";

const string kapwechsel_2_text = "Ïåùåðû ïîëçóíîâ";

const string kapwechsel_3 = "Ãëàâà 3";

const string kapwechsel_3_text = "Àðòåôàêòû äðåâíèõ ñèë";

const string kapwechsel_4 = "Ãëàâà 4";

const string kapwechsel_4_text = "Êñàðäàñ";

const string kapwechsel_5 = "Ãëàâà 5";

const string kapwechsel_5_text = "Õðàíèòåëè ïîðòàëà";

const string kapwechsel_6 = "Ãëàâà 6";

const string kapwechsel_6_text = "Ëîãîâî Ñïÿùåãî";

const int tab_anzahl = 256;

const int gil_attitudes[256] = {
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    2, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 
    2, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 
    2, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 
    2, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 3, 2, 
    2, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 
    2, 2, 2, 2, 3, 2, 3, 3, 2, 2, 2, 2, 2, 2, 3, 2, 
    2, 1, 1, 1, 1, 1, 3, 3, 2, 3, 3, 2, 2, 2, 2, 2, 
    2, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 
    2, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 
    2, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 
    2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 3, 3, 3, 2, 2, 
    2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 3, 3, 3, 2, 2, 
    2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 3, 3, 3, 2, 2, 
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3, 2, 
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3
};

const int gil_attitudes_fmtaken[256] = {
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    0, 3, 3, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 
    0, 3, 3, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 
    0, 3, 2, 3, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 
    3, 0, 0, 0, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 
    0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 
    3, 0, 0, 0, 3, 0, 3, 3, 2, 2, 2, 3, 3, 3, 3, 3, 
    3, 0, 0, 0, 3, 0, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 
    3, 0, 0, 0, 3, 0, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 0, 0, 0, 3, 0, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 
    3, 0, 0, 0, 3, 0, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 
    3, 0, 0, 0, 3, 2, 1, 2, 2, 2, 2, 3, 3, 3, 2, 2, 
    3, 0, 0, 0, 3, 2, 1, 2, 2, 2, 2, 3, 3, 3, 2, 2, 
    3, 0, 0, 0, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3, 2, 
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3
};

const int gil_attitudes_orcassault[256] = {
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    2, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 
    2, 2, 3, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 
    2, 2, 2, 3, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 
    2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    2, 1, 1, 1, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 
    2, 1, 1, 1, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 
    2, 1, 1, 1, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 
    2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 
    2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 3, 2, 2, 2, 2, 
    2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 2, 3, 2, 2, 2, 
    2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 2, 2, 3, 2, 2, 
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3
};

const int gil_attitudes_nemesis[256] = {
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 
    1, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 
    1, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 
    1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 
    1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 
    1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 
    1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 
    1, 0, 0, 0, 0, 0, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 
    1, 0, 0, 0, 0, 0, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 
    1, 0, 0, 0, 0, 0, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 
    1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 
    1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 
    1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 
    1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 
    1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3
};

class c_svm {
    var string stopmagic;
    var string isaidstopmagic;
    var string weapondown;
    var string isaidweapondown;
    var string watchyouraim;
    var string watchyouraimangry;
    var string whatareyoudoing;
    var string letsforgetourlittlefight;
    var string strange;
    var string diemonster;
    var string diemortalenemy;
    var string nowwait;
    var string youstillnothaveenough;
    var string youaskedforit;
    var string nowwaitintruder;
    var string iwillteachyourespectforforeignproperty;
    var string dirtythief;
    var string youattackedmycharge;
    var string youkilledoneofus;
    var string dead;
    var string aargh_1;
    var string aargh_2;
    var string aargh_3;
    var string berzerk;
    var string youllbesorryforthis;
    var string yesyes;
    var string shitwhatamonster;
    var string help;
    var string wewillmeetagain;
    var string nevertrythatagain;
    var string itakeyourweapon;
    var string itookyourore;
    var string shitnoore;
    var string handsoff;
    var string getoutofhere;
    var string youviolatedforbiddenterritory;
    var string youwannafoolme;
    var string whatsthissupposedtobe;
    var string whyareyouinhere;
    var string whatdidyouinthere;
    var string wisemove;
    var string alarm;
    var string intruderalert;
    var string behindyou;
    var string theresafight;
    var string heyheyhey;
    var string cheerfight;
    var string cheerfriend;
    var string ooh;
    var string yeahwelldone;
    var string runcoward;
    var string hedefeatedhim;
    var string hedeservedit;
    var string hekilledhim;
    var string itwasagoodfight;
    var string awake;
    var string friendlygreetings;
    var string algreetings;
    var string magegreetings;
    var string sectgreetings;
    var string thereheis;
    var string nolearnnopoints;
    var string nolearnovermax;
    var string nolearnyoualreadyknow;
    var string nolearnyourebetter;
    var string heyyou;
    var string notnow;
    var string whatdoyouwant;
    var string isaidwhatdoyouwant;
    var string makeway;
    var string outofmyway;
    var string youdeaforwhat;
    var string lookingfortroubleagain;
    var string lookaway;
    var string okaykeepit;
    var string whatsthat;
    var string thatsmyweapon;
    var string giveittome;
    var string youcankeepthecrap;
    var string theykilledmyfriend;
    var string youdisturbedmyslumber;
    var string suckergotsome;
    var string suckerdefeatedebr;
    var string suckerdefeatedgur;
    var string suckerdefeatedmage;
    var string suckerdefeatednov_guard;
    var string suckerdefeatedvlk_guard;
    var string youdefeatedmycomrade;
    var string youdefeatednov_guard;
    var string youdefeatedvlk_guard;
    var string youstolefromme;
    var string youstolefromus;
    var string youstolefromebr;
    var string youstolefromgur;
    var string stolefrommage;
    var string youkilledmyfriend;
    var string youkilledebr;
    var string youkilledgur;
    var string youkilledmage;
    var string youkilledocfolk;
    var string youkilledncfolk;
    var string youkilledpsifolk;
    var string getthingsright;
    var string youdefeatedmewell;
    var string smalltalk01;
    var string smalltalk02;
    var string smalltalk03;
    var string smalltalk04;
    var string smalltalk05;
    var string smalltalk06;
    var string smalltalk07;
    var string smalltalk08;
    var string smalltalk09;
    var string smalltalk10;
    var string smalltalk11;
    var string smalltalk12;
    var string smalltalk13;
    var string smalltalk14;
    var string smalltalk15;
    var string smalltalk16;
    var string smalltalk17;
    var string smalltalk18;
    var string smalltalk19;
    var string smalltalk20;
    var string smalltalk21;
    var string smalltalk22;
    var string smalltalk23;
    var string smalltalk24;
    var string om;
    var string sc_heyturnaround;
    var string sc_heywaitasecond;
    var string doesntwork;
    var string pickbroke;
    var string needkey;
    var string nomorepicks;
    var string invfull;
};

instance svm_0(c_svm) {
};

instance svm_1(c_svm) {
    stopmagic = "SVM_1_StopMagic"; //Ýé, íèêàêîé ìàãèè!
    isaidstopmagic = "SVM_1_ISaidStopMagic"; //Õî÷åøü ïîëó÷èòü? Ïðåêðàòè íåìåäëåííî!!!
    weapondown = "SVM_1_WeaponDown"; //Îïóñòè îðóæèå!
    isaidweapondown = "SVM_1_ISaidWeaponDown"; //Íåìåäëåííî óáåðè îðóæèå!
    watchyouraim = "SVM_1_WatchYourAim"; //Óáåðè ýòî!
    watchyouraimangry = "SVM_1_WatchYourAimAngry"; //Åñëè õî÷åøü ïîëó÷èòü â ìîðäó, ïðèöåëüñÿ â ìåíÿ åùå ðàç.
    whatareyoudoing = "SVM_1_WhatAreYouDoing"; //Ïîîñòîðîæíåé! Åùå îäèí ðàç, è ÿ îñíîâàòåëüíî íà÷èùó òåáå ìîðäó.
    letsforgetourlittlefight = "SVM_1_LetsForgetOurLittleFight"; //Çàáóäåì îá ýòîì, ëàäíî?
    strange = "SVM_1_Strange"; //Óáèðàéñÿ, óáëþäîê!
    diemonster = "SVM_1_DieMonster"; //Ñóêèí ñûí!
    diemortalenemy = "SVM_1_DieMortalEnemy"; //Êîíåö òåáå, ïàðåíü!
    nowwait = "SVM_1_NowWait"; //Òåïåðü òû òî÷íî ñõëîïî÷åøü...
    youstillnothaveenough = "SVM_1_YouStillNotHaveEnough"; //Ïîõîæå, òû íàðûâàåøüñÿ!
    youaskedforit = "SVM_1_YouAskedForIt"; //Ñàì íàïðîñèëñÿ!
    nowwaitintruder = "SVM_1_NowWaitIntruder"; //Òåáÿ óíåñóò îòñþäà ïî ÷àñòÿì.
    iwillteachyourespectforforeignproperty = "SVM_1_IWillTeachYouRespectForForeignProperty"; //ß óæå ïðåäóïðåæäàë òåáÿ: äåðæèñü ïîäàëüøå îò ìîèõ âåùåé!
    dirtythief = "SVM_1_DirtyThief"; //ß ïðèêîí÷ó òåáÿ, âîð!
    youattackedmycharge = "SVM_1_YouAttackedMyCharge"; //Íèêòî íå ñìååò îáèæàòü ìîèõ äðóçåé!
    youkilledoneofus = "SVM_1_YouKilledOneOfUs"; //Òû óäàðèë îäíîãî èç íàøèõ. Òåïåðü ÿ óäàðþ òåáÿ!
    dead = "SVM_1_Dead"; //Ààààààðã!!
    aargh_1 = "SVM_1_Aargh_1"; //Ààðãõ!
    aargh_2 = "SVM_1_Aargh_2"; //Ààðãõ!
    aargh_3 = "SVM_1_Aargh_3"; //Ààðãõ!
    berzerk = "SVM_1_Berzerk"; //ÓÓÀÀÀÐÐÃÃÃÕÕÕ!!!
    youllbesorryforthis = "SVM_1_YoullBeSorryForThis"; //Îá ýòîì òû ïîæàëååøü!
    yesyes = "SVM_1_YesYes"; //Áåç ïàíèêè! Òû ïîáåäèë!
    shitwhatamonster = "SVM_1_ShitWhatAMonster"; //×åðò! Óíîñè íîãè!
    help = "SVM_1_Help"; //Ïðîêëÿòüå!
    wewillmeetagain = "SVM_1_WeWillMeetAgain"; //Ìû åùå âñòðåòèìñÿ!
    nevertrythatagain = "SVM_1_NeverTryThatAgain"; //Åùå ðàç, è òû îá ýòîì ïîæàëååøü.
    itakeyourweapon = "SVM_1_ITakeYourWeapon"; //Õîðîøåå îðóæèå! Äàâàé ñþäà!
    itookyourore = "SVM_1_ITookYourOre"; //Ñïàñèáî çà ðóäó, ãåðîé!
    shitnoore = "SVM_1_ShitNoOre"; //Æàëêèé óáëþäîê, ó òåáÿ äàæå ðóäû íåò!
    handsoff = "SVM_1_HandsOff"; //Óáåðè ðóêè!
    getoutofhere = "SVM_1_GetOutOfHere"; //Èñ÷åçíè îòñþäà!
    youviolatedforbiddenterritory = "SVM_1_YouViolatedForbiddenTerritory"; //Ýé! Êàê òû ñþäà ïîïàë?
    youwannafoolme = "SVM_1_YouWannaFoolMe"; //Òû äóìàåøü, ÿ òóïîé?
    whatsthissupposedtobe = "SVM_1_WhatsThisSupposedToBe"; //Ýé, òû! ×òî òû çäåñü øëÿåøüñÿ?
    whyareyouinhere = "SVM_1_WhyYouAreInHere"; //Óáèðàéñÿ èç ìîåãî äîìà, èëè ÿ ïîçîâó ñòðàæó!
    whatdidyouinthere = "SVM_1_WhatDidYouInThere"; //Òåáå çäåñü íå÷åãî äåëàòü. Ïîøåë âîí!
    wisemove = "SVM_1_WiseMove"; //Óìíûé ìàëü÷èê!
    alarm = "SVM_1_Alarm"; //Ñòðàæà! Ñþäà!
    intruderalert = "SVM_1_IntruderAlert"; //ÒÐÅÂÎÃÀ!!! ×ÓÆÎÉ!!!
    behindyou = "SVM_1_BehindYou"; //Ñçàäè!
    theresafight = "SVM_1_TheresAFight"; //À, äðàêà!
    heyheyhey = "SVM_1_HeyHeyHey"; //Ñèëüíåå!
    cheerfight = "SVM_1_CheerFight"; //Òû äåðåøüñÿ êàê áàáà!
    cheerfriend = "SVM_1_CheerFriend"; //Ïðèêîí÷è åãî!
    ooh = "SVM_1_Ooh"; //Áåé â îòâåò!
    yeahwelldone = "SVM_1_YeahWellDone"; //Âðåæü åìó!
    runcoward = "SVM_1_RunCoward"; //Âåðíèñü, òðóñ!
    hedefeatedhim = "SVM_1_HeDefeatedHim"; //Åìó õâàòèò!
    hedeservedit = "SVM_1_HeDeservedIt"; //Ïîäåëîì åìó!
    hekilledhim = "SVM_1_HeKilledHim"; //Çà÷åì òû óáèë åãî? Òåïåðü òû ïîêîéíèê!
    itwasagoodfight = "SVM_1_ItWasAGoodFight"; //Õîðîøèé áîé!
    awake = "SVM_1_Awake"; //[çåâîê]
    friendlygreetings = "SVM_1_FriendlyGreetings"; //Ïðèâåò.
    algreetings = "SVM_1_ALGreetings"; //Çà Ãîìåçà!
    magegreetings = "SVM_1_MageGreetings"; //Âî èìÿ ìàãèè!
    sectgreetings = "SVM_1_SectGreetings"; //Ïðîñíèñü!
    thereheis = "SVM_1_ThereHeIs"; //Îí çäåñü.
    nolearnnopoints = "SVM_1_NoLearnNoPoints"; //Âîçâðàùàéñÿ, êîãäà ïîäíàáåðåøüñÿ îïûòà.
    nolearnovermax = "SVM_1_NoLearnOverMax"; //Òû íà ïðåäåëå ñâîèõ âîçìîæíîñòåé. Òåáå íóæíî íàó÷èòüñÿ ÷åìó-íèáóäü åùå.
    nolearnyoualreadyknow = "SVM_1_NoLearnYouAlreadyKnow"; //Òåáå íóæíî íàáðàòüñÿ îïûòà, ïðåæäå ÷åì òû ñìîæåøü ñòàòü ìàñòåðîì.
    nolearnyourebetter = "SVM_1_NoLearnYoureBetter"; //Óæå ëó÷øå!
    heyyou = "SVM_1_HeyYou"; //Ýé, òû!
    notnow = "SVM_1_NotNow"; //Íå ñåé÷àñ!
    whatdoyouwant = "SVM_1_WhatDoYouWant"; //×òî òåáå íóæíî?
    isaidwhatdoyouwant = "SVM_1_ISaidWhatDoYouWant"; //×òî-íèáóäü íóæíî?!
    makeway = "SVM_1_MakeWay"; //Äàé ìíå ïðîéòè!
    outofmyway = "SVM_1_OutOfMyWay"; //Ñ äîðîãè, ïàðåíü!
    youdeaforwhat = "SVM_1_YouDeafOrWhat"; //Òû îãëîõ? ÄÂÈÃÀÉÑß!
    lookingfortroubleagain = "SVM_1_LookingForTroubleAgain"; //Ñíîâà èùåøü íåïðèÿòíîñòåé?
    lookaway = "SVM_1_LookAway"; //Óõõõõõ! ß íè÷åãî íå âèäåë!
    okaykeepit = "SVM_1_OkayKeepIt"; //Ëàäíî, ëàäíî! Îñòàâü ñåáå!
    whatsthat = "SVM_1_WhatsThat"; //×òî ýòî áûëî?
    thatsmyweapon = "SVM_1_ThatsMyWeapon"; //Ó òåáÿ â ðóêàõ ÌÎÅ îðóæèå!
    giveittome = "SVM_1_GiveItToMe"; //Îòäàé ìíå ýòî!
    youcankeepthecrap = "SVM_1_YouCanKeeptheCrap"; //Âîçüìè ñåáå. Ìíå ýòî âñå ðàâíî íå ïðèãîäèòñÿ.
    theykilledmyfriend = "SVM_1_TheyKilledMyFriend"; //Óáèëè îäíîãî èç íàøèõ. Åñëè ÿ äîáåðóñü äî ýòîãî íàãëåöà...
    youdisturbedmyslumber = "SVM_1_YouDisturbedMySlumber"; //Ïðîêëÿòüå, çà÷åì òû ìåíÿ ðàçáóäèë?
    suckergotsome = "SVM_1_SuckerGotSome"; //Ïîëó÷èë âçáó÷êó? Ýòî ïîñëóæèò òåáå óðîêîì!
    suckerdefeatedebr = "SVM_1_SuckerDefeatedEBr"; //Òû óäàðèë Áàðîíà! Îí òàê çîë íà òåáÿ!
    suckerdefeatedgur = "SVM_1_SuckerDefeatedGur"; //Òû óäàðèë Ãóðó. Ó òåáÿ òàëàíò íàõîäèòü íåïðèÿòíîñòè!
    suckerdefeatedmage = "SVM_1_SuckerDefeatedMage"; //Äóðàöêàÿ èäåÿ - ïûòàòüñÿ ïîáåäèòü ìàãà!
    suckerdefeatednov_guard = "SVM_1_SuckerDefeatedNov_Guard"; //Òû äóìàåøü, ìîæíî ïðîñòî òàê îáèæàòü íîâè÷êîâ?!
    suckerdefeatedvlk_guard = "SVM_1_SuckerDefeatedVlk_Guard"; //Îñòàâü ìîèõ ðåáÿò!
    youdefeatedmycomrade = "SVM_1_YouDefeatedMyComrade"; //Òû óäàðèë ìîåãî ïðèÿòåëÿ...
    youdefeatednov_guard = "SVM_1_YouDefeatedNOV_Guard"; //Òû äîñòàâëÿåøü êó÷ó ïðîáëåì. Äóìàåøü, ÿ ýòî áóäó òåðïåòü?
    youdefeatedvlk_guard = "SVM_1_YouDefeatedVLK_Guard"; //Òðîíåøü êîãî-íèáóäü, êòî íàõîäèòñÿ ïîä ìîåé çàùèòîé, - çàðàáîòàåøü êó÷ó íåïðèÿòíîñòåé!
    youstolefromme = "SVM_1_YouStoleFromMe"; //Çàñðàíåö, òû âîðóåøü ó ìåíÿ! Áîëüøå íå âîçðàùàéñÿ!
    youstolefromus = "SVM_1_YouStoleFromUs"; //Âåðíè íàøè âåùè! Áûñòðî!
    youstolefromebr = "SVM_1_YouStoleFromEBr"; //Òû âîðóåøü ó Áàðîíîâ! Êàêîãî ÷åðòà?
    youstolefromgur = "SVM_1_YouStoleFromGur"; //Âîðóåøü ó Ãóðó? Êàêàÿ æàëîñòü, ÷òî òåáÿ ðàñêðûëè, ïðàâäà?
    stolefrommage = "SVM_1_StoleFromMage"; //Âîðîâàòü ó ìàãîâ - äóðàöêàÿ èäåÿ!
    youkilledmyfriend = "SVM_1_YouKilledMyFriend"; //Îäèí èç íàøèõ ëþäåé ïîãèá, è òû ïðè÷àñòåí ê ýòîìó. Îäèí íåâåðíûé øàã, è òû - ïîêîéíèê!
    youkilledebr = "SVM_1_YouKilledEBr"; //Òû óáèë Áàðîíà! Ïàðåíü, òû îêîí÷àòåëüíî ñïÿòèë?!
    youkilledgur = "SVM_1_YouKilledGur"; //Òû óáèë Ãóðó! ß ïðîñòî íå âåðþ!
    youkilledmage = "SVM_1_YouKilledMage"; //Òû óáèë ìàãà! Êàê òû ñîáèðàåøüñÿ îáúÿñíèòü ýòî?
    youkilledocfolk = "SVM_1_YouKilledOCfolk"; //Ïîãèá ÷åëîâåê èç Ñòàðîãî Ëàãåðÿ, è òâîå èìÿ ñâÿçûâàþò ñ ýòèì óáèéñòâîì...
    youkilledncfolk = "SVM_1_YouKilledNCfolk"; //Íîâûé Ëàãåðü ïîíåñ òÿæåëóþ óòðàòó, è, ïîõîæå, òû ïðè÷àñòåí ê ýòîìó!
    youkilledpsifolk = "SVM_1_YouKilledPSIfolk"; //Áðàòñòâî ïîòåðÿëî îäíîãî èç ñâîèõ ÷ëåíîâ, è ýòà æèçíü íà òâîåé ñîâåñòè!
    getthingsright = "SVM_1_GetThingsRight"; //Òåáå áóäåò íåëåãêî îïðàâäàòüñÿ!
    youdefeatedmewell = "SVM_1_YouDefeatedMeWell"; //Ýòî áûë ÷åñòíûé áîé! Òû íàáèë ìíå ìîðäó, ïàðåíü!
    smalltalk01 = "SVM_1_Smalltalk01"; //...ñàìîå äåðüìîâîå...
    smalltalk02 = "SVM_1_Smalltalk02"; //...ìîæåò áûòü, íî êîãî ýòî âîëíóåò?...
    smalltalk03 = "SVM_1_Smalltalk03"; //...ïîëíàÿ ÷óøü...
    smalltalk04 = "SVM_1_Smalltalk04"; //...ÿ íå õî÷ó â ýòî ââÿçûâàòüñÿ...
    smalltalk05 = "SVM_1_Smalltalk05"; //...ýòî òî÷íî íå ìîÿ ïðîáëåìà...
    smalltalk06 = "SVM_1_Smalltalk06"; //...ïîõîæå, íàçðåâàåò ïðîáëåìà...
    smalltalk07 = "SVM_1_Smalltalk07"; //...ïî÷åìó ýòî ñëó÷àåòñÿ ñíîâà è ñíîâà?...
    smalltalk08 = "SVM_1_Smalltalk08"; //...áîëüøå ýòîãî íå ñëó÷èòñÿ...
    smalltalk09 = "SVM_1_Smalltalk09"; //...÷òî-òî íå òàê â ýòîé èñòîðèè...
    smalltalk10 = "SVM_1_Smalltalk10"; //...íå òðåïè ÿçûêîì, äà, äà...
    smalltalk11 = "SVM_1_Smalltalk11"; //...ïîêà ìåíÿ íå âïóòàëè...
    smalltalk12 = "SVM_1_Smalltalk12"; //...òû íå äîëæåí âåðèòü âñåìó...
    smalltalk13 = "SVM_1_Smalltalk13"; //...íå õîòåë áû ÿ îêàçàòüñÿ íà åãî ìåñòå...
    smalltalk14 = "SVM_1_Smalltalk14"; //...êàæäûé ðàç îäíà è òà æå èñòîðèÿ...
    smalltalk15 = "SVM_1_Smalltalk15"; //...íåêîòîðûõ ëþäåé íè÷åãî íå ó÷èò...
    smalltalk16 = "SVM_1_Smalltalk16"; //...áûëè âðåìåíà, êîãäà âñå áûëî ñîâñåì ïî-äðóãîìó...
    smalltalk17 = "SVM_1_Smalltalk17"; //...ëþäè âñåãäà áîëòàþò...
    smalltalk18 = "SVM_1_Smalltalk18"; //...ÿ áîëüøå íå ñëóøàþ âñÿêóþ òðåïîòíþ...
    smalltalk19 = "SVM_1_Smalltalk19"; //...âåðèøü êîìó-òî - è â ðåçóëüòàòå ïîïàäàåøü â íåïðèÿòíîñòè, òàê âñåãäà è áûâàåò...
    smalltalk20 = "SVM_1_Smalltalk20"; //...ÿ ñîìíåâàþñü, ÷òî ýòî êîãäà-íèáóäü èçìåíèòñÿ...
    smalltalk21 = "SVM_1_Smalltalk21"; //...ñêîðåå âñåãî, òû ïðàâ...
    smalltalk22 = "SVM_1_Smalltalk22"; //...äåðæèñü. Ëó÷øå íè âî ÷òî íå ââÿçûâàòüñÿ ñãîðÿ÷à...
    smalltalk23 = "SVM_1_Smalltalk23"; //...ÿ äóìàë, ýòî âûÿñíèëè åùå î÷åíü äàâíî...
    smalltalk24 = "SVM_1_Smalltalk24"; //...äàâàé ïîãîâîðèì î ÷åì-íèáóäü åùå...
    om = "SVM_1_Om"; //Îììì...
};

instance svm_2(c_svm) {
    stopmagic = "SVM_2_StopMagic"; //Íèêàêîãî âîëøåáñòâà!
    isaidstopmagic = "SVM_2_ISaidStopMagic"; //ÝÉ! ß ñêàçàë, íèêàêîé ìàãèè!
    weapondown = "SVM_2_WeaponDown"; //Äàâàé, óáèðàé ýòî!
    isaidweapondown = "SVM_2_ISaidWeaponDown"; //Óáåðè îðóæèå!
    watchyouraim = "SVM_2_WatchYourAim"; //Ñìîòðè, êóäà öåëèøüñÿ!
    watchyouraimangry = "SVM_2_WatchYourAimAngry"; //Åñëè òû è äàëüøå ñîáèðàåøüñÿ öåëèòüñÿ â ìåíÿ, ÿ ìîãó ýòî íåïðàâèëüíî ïîíÿòü!
    whatareyoudoing = "SVM_2_WhatAreYouDoing"; //Ýé, äëÿ ÷åãî ýòî?
    letsforgetourlittlefight = "SVM_2_LetsForgetOurLittleFight"; //Çàáóäåì îá ýòîì, ëàäíî?
    strange = "SVM_2_Strange"; //Ñòðàííî! Êóäà îí ïîøåë?!
    diemonster = "SVM_2_DieMonster"; //Åùå îäèí!
    diemortalenemy = "SVM_2_DieMortalEnemy"; //Áîþñü, ìíå ïðèäåòñÿ óáèòü òåáÿ!
    nowwait = "SVM_2_NowWait"; //Ýòî òâîÿ âèíà!
    youstillnothaveenough = "SVM_2_YouStillNotHaveEnough"; //Òåáå ÷òî - ìàëî?
    youaskedforit = "SVM_2_YouAskedForIt"; //Íó, åñëè òû ýòîãî õî÷åøü...
    nowwaitintruder = "SVM_2_NowWaitIntruder"; //Òû çíàåøü, ÷òî òåáå íå÷åãî çäåñü äåëàòü!
    iwillteachyourespectforforeignproperty = "SVM_2_IWillTeachYouRespectForForeignProperty"; //Ïî÷åìó òû øëÿåøüñÿ ñ ÷óæèìè âåùàìè?!
    dirtythief = "SVM_2_DirtyThief"; //Òû îáîêðàë ìåíÿ! ß ýòî çàïîìíþ!
    youattackedmycharge = "SVM_2_YouAttackedMyCharge"; //Íèêòî íå ñìååò îáèæàòü ìîèõ äðóçåé!
    youkilledoneofus = "SVM_2_YouKilledOneOfUs"; //Òû óáèë îäíîãî èç íàøèõ! Òû çà ýòî çàïëàòèøü!
    dead = "SVM_2_Dead"; //Àààðãë!
    aargh_1 = "SVM_2_Aargh_1"; //Àààðã!
    aargh_2 = "SVM_2_Aargh_2"; //Àààðã!
    aargh_3 = "SVM_2_Aargh_3"; //Àààðã!
    berzerk = "SVM_2_Berzerk"; //ÓÓÀÀÀÐÐÃÃÃÕÕÕ!!!
    youllbesorryforthis = "SVM_2_YoullBeSorryForThis"; //Òû îá ýòîì ïîæàëååøü!
    yesyes = "SVM_2_YesYes"; //Òèõî, òèõî, òû ïîáåäèë!
    shitwhatamonster = "SVM_2_ShitWhatAMonster"; //ß - ãõì - ìíå ïðîñòî íóæíà áûëà ïîìîùü!
    help = "SVM_2_Help"; //Ó ìåíÿ íåò âðåìåíè - äåëà!
    wewillmeetagain = "SVM_2_WeWillMeetAgain"; //Óâåðåí, ìû åùå âñòðåòèìñÿ!
    nevertrythatagain = "SVM_2_NeverTryThatAgain"; //Áîëüøå íå äåëàé ýòîãî!
    itakeyourweapon = "SVM_2_ITakeYourWeapon"; //ß âîçüìó ýòî!
    itookyourore = "SVM_2_ITookYourOre"; //Â ëþáîì ñëó÷àå, ýòà ðóäà òåáå óæå íå ïðèãîäèòñÿ!
    shitnoore = "SVM_2_ShitNoOre"; //Ó òåáÿ ñîâñåì íåò ðóäû? Íåóäà÷íûé äåíü, ïðèÿòåëü!
    handsoff = "SVM_2_HandsOff"; //Óáåðè ðóêè!
    getoutofhere = "SVM_2_GetOutOfHere"; //Óáèðàéñÿ îòñþäà!
    youviolatedforbiddenterritory = "SVM_2_YouViolatedForbiddenTerritory"; //Ýé! Êàê òû ñþäà ïîïàë?
    youwannafoolme = "SVM_2_YouWannaFoolMe"; //Òû äóìàåøü - ÿ èäèîò?!
    whatsthissupposedtobe = "SVM_2_WhatsThisSupposedToBe"; //×òî òû çäåñü øëÿåøüñÿ?
    whyareyouinhere = "SVM_2_WhyYouAreInHere"; //Óáèðàéñÿ èç ìîåãî äîìà, èëè ÿ ïîçîâó ñòðàæó!
    whatdidyouinthere = "SVM_2_WhatDidYouInThere"; //Äåðæèñü ïîäàëüøå îò äîìîâ!
    wisemove = "SVM_2_WiseMove"; //Ïðàâèëüíîå ðåøåíèå!
    alarm = "SVM_2_Alarm"; //Ñòðàæà! Ñþäà!
    intruderalert = "SVM_2_IntruderAlert"; //ÒÐÅÂÎÃÀ!!!
    behindyou = "SVM_2_BehindYou"; //Ñçàäè!
    theresafight = "SVM_2_TheresAFight"; //À, äðàêà!
    heyheyhey = "SVM_2_HeyHeyHey"; //È ýòî âñå?!
    cheerfight = "SVM_2_CheerFight"; //Ïðîñûïàéñÿ, êîïóøà!
    cheerfriend = "SVM_2_CheerFriend"; //Õîðîøèé óäàð!
    ooh = "SVM_2_Ooh"; //Áîëüíî!
    yeahwelldone = "SVM_2_YeahWellDone"; //Îí âñå åùå äâèãàåòñÿ!
    runcoward = "SVM_2_RunCoward"; //Îñòàâàéñÿ çäåñü, ñëàáàê!
    hedefeatedhim = "SVM_2_HeDefeatedHim"; //Õâàòèò ñ íåãî!
    hedeservedit = "SVM_2_HeDeservedIt"; //Îí ýòî çàñëóæèë!
    hekilledhim = "SVM_2_HeKilledHim"; //Òû óáèë åãî! Ýòî ÷òî, áûëî òàê íåîáõîäèìî?
    itwasagoodfight = "SVM_2_ItWasAGoodFight"; //Õîðîøèé áîé, òîëüêî ñëèøêîì êîðîòêèé!
    awake = "SVM_2_Awake"; //[çåâîê]
    friendlygreetings = "SVM_2_FriendlyGreetings"; //Ïðèâåò.
    algreetings = "SVM_2_ALGreetings"; //Çà Ãîìåçà!
    magegreetings = "SVM_2_MageGreetings"; //Âî èìÿ ìàãèè!
    sectgreetings = "SVM_2_SectGreetings"; //Ïðîñíèñü!
    thereheis = "SVM_2_ThereHeIs"; //Ñþäà.
    nolearnnopoints = "SVM_2_NoLearnNoPoints"; //ß íå ìîãó ó÷èòü òåáÿ. Òåáå íåõâàòàåò îïûòà.
    nolearnovermax = "SVM_2_NoLearnOverMax"; //Òû íà ïðåäåëå ñâîèõ âîçìîæíîñòåé. Òåáå íóæíî íàó÷èòüñÿ ÷åìó-íèáóäü åùå.
    nolearnyoualreadyknow = "SVM_2_NoLearnYouAlreadyKnow"; //Òåáå íóæíî íàáðàòüñÿ îïûòà, ïðåæäå ÷åì òû ñìîæåøü ñòàòü ìàñòåðîì.
    nolearnyourebetter = "SVM_2_NoLearnYoureBetter"; //Óæå ëó÷øå!
    heyyou = "SVM_2_HeyYou"; //Ýé, òû!
    notnow = "SVM_2_NotNow"; //Íå ñåé÷àñ.
    whatdoyouwant = "SVM_2_WhatDoYouWant"; //×òî òåáå íóæíî?
    isaidwhatdoyouwant = "SVM_2_ISaidWhatDoYouWant"; //×òî ÿ ìîãó äëÿ òåáÿ ñäåëàòü?
    makeway = "SVM_2_MakeWay"; //Äàé ìíå ïðîéòè!
    outofmyway = "SVM_2_OutOfMyWay"; //Ñ äîðîãè!
    youdeaforwhat = "SVM_2_YouDeafOrWhat"; //Èñ÷åçíè, èëè ÿ çàéìóñü òîáîé!
    lookingfortroubleagain = "SVM_2_LookingForTroubleAgain"; //Ñíîâà èùåøü íåïðèÿòíîñòåé?
    lookaway = "SVM_2_LookAway"; //ß ÍÈ×ÅÃÎ íå âèäåë! ÍÈÊÀÊÈÕ ïðîáëåì!
    okaykeepit = "SVM_2_OkayKeepIt"; //Ëàäíî! Çàáèðàé!
    whatsthat = "SVM_2_WhatsThat"; //Ýé? ×òî?
    thatsmyweapon = "SVM_2_ThatsMyWeapon"; //Ïîõîæå, òû ðàçãóëèâàåøü ñ ìîèì îðóæèåì!
    giveittome = "SVM_2_GiveItToMe"; //Äàâàé, äàâàé ñþäà!
    youcankeepthecrap = "SVM_2_YouCanKeeptheCrap"; //Ìíå ýòî âñå ðàâíî íå íóæíî!
    theykilledmyfriend = "SVM_2_TheyKilledMyFriend"; //Óáèëè îäíîãî èç íàøèõ! Åñëè íàéäåì òîãî, êòî ýòî ñäåëàë, åìó íå ïîçäîðîâèòñÿ!
    youdisturbedmyslumber = "SVM_2_YouDisturbedMySlumber"; //Çà÷åì òû ìåíÿ ïîäíÿë?
    suckergotsome = "SVM_2_SuckerGotSome"; //Ïîëó÷èë? Äîëæåí ïðèçíàòüñÿ, ìíå ýòî íðàâèòñÿ!
    suckerdefeatedebr = "SVM_2_SuckerDefeatedEBr"; //Òû ïîáåäèë Áàðîíà!
    suckerdefeatedgur = "SVM_2_SuckerDefeatedGur"; //Òû ïîáåäèë Ãóðó! Äàæå íå çíàþ, ÷åãî â ýòîì áîëüøå - õðàáðîñòè èëè áåçóìèÿ!
    suckerdefeatedmage = "SVM_2_SuckerDefeatedMage"; //Ïîáåäèòü ìàãà... òû, äîëæíî áûòü, õðàáðûé ïàðåíü!
    suckerdefeatednov_guard = "SVM_2_SuckerDefeatedNov_Guard"; //ß çäåñü ñëåæó çà ïîðÿäêîì!
    suckerdefeatedvlk_guard = "SVM_2_SuckerDefeatedVlk_Guard"; //Ìíå ïëåâàòü, èç-çà ÷åãî ýòî ïðîèçîøëî! Òû óäàðèë ðóäîêîïà, è ó òåáÿ ïðîáëåìû, ïàðåíü!
    youdefeatedmycomrade = "SVM_2_YouDefeatedMyComrade"; //Òû óäàðèë ìîåãî äðóãà!
    youdefeatednov_guard = "SVM_2_YouDefeatedNOV_Guard"; //Îñòàâü íîâè÷êîâ â ïîêîå!
    youdefeatedvlk_guard = "SVM_2_YouDefeatedVLK_Guard"; //Òû íå òðîãàåøü ìîèõ ïàðíåé! Óñåê?
    youstolefromme = "SVM_2_YouStoleFromMe"; //Çà÷åì òû îáîêðàë ìåíÿ?
    youstolefromus = "SVM_2_YouStoleFromUs"; //Ó òåáÿ åñòü ÷òî-òî, ÷òî ïðèíàäëåæèò íàì. Ëó÷øå áû òåáå âåðíóòü ýòî íàçàä!
    youstolefromebr = "SVM_2_YouStoleFromEBr"; //Ïàðåíü! Òû îáîêðàë Áàðîíîâ! Îíè áóäóò â ÿðîñòè!
    youstolefromgur = "SVM_2_YouStoleFromGur"; //Òû îáîêðàë Ãóðó! Òåáå ïîâåçëî, ÷òî òåáÿ íå ïîéìàëè!
    stolefrommage = "SVM_2_StoleFromMage"; //Ìàãè íå î÷åíü ëþáÿò, êîãäà êòî-òî ðîåòñÿ â èõ âåùàõ!
    youkilledmyfriend = "SVM_2_YouKilledMyFriend"; //Æèçíü îäíîãî èç íàøèõ ëþäåé íà òâîåé ñîâåñòè. Åùå îäèí íåâåðíûé øàã, è òû áóäåøü ñëåäóþùèì!
    youkilledebr = "SVM_2_YouKilledEBr"; //Òû óáèë Áàðîíà! Ïàðåíü, òû îêîí÷àòåëüíî ñïÿòèë?!
    youkilledgur = "SVM_2_YouKilledGur"; //Òû óáèë Ãóðó! ß ãëàçàì ñâîèì íå âåðþ!
    youkilledmage = "SVM_2_YouKilledMage"; //Òû óáèë ìàãà! Êàê òû ñîáèðàåøüñÿ îáúÿñíèòü ýòî?
    youkilledocfolk = "SVM_2_YouKilledOCfolk"; //Óáèò ÷åëîâåê èç Ñòàðîãî Ëàãåðÿ, è êîå-êòî ñâÿçûâàåò òåáÿ ñ ýòèì óáèéñòâîì...
    youkilledncfolk = "SVM_2_YouKilledNCfolk"; //Íîâûé Ëàãåðü ïîíåñ òÿæåëóþ óòðàòó, è, ïîõîæå, òû ïðè÷àñòåí ê ýòîìó!
    youkilledpsifolk = "SVM_2_YouKilledPSIfolk"; //Áðàòñòâî ïîòåðÿëî îäíîãî èç ñâîèõ ÷ëåíîâ, è ýòà æèçíü íà òâîåé ñîâåñòè!
    getthingsright = "SVM_2_GetThingsRight"; //Òåáå áóäåò íåëåãêî îïðàâäàòüñÿ!
    youdefeatedmewell = "SVM_2_YouDefeatedMeWell"; //Äà, òû ïîáåäèë. Ýòî áûë õîðîøèé áîé - íî ñåé÷àñ îí îêîí÷åí!
    smalltalk01 = "SVM_2_Smalltalk01"; //...åñëè òû äóìàåøü...
    smalltalk02 = "SVM_2_Smalltalk02"; //...ìîæåò áûòü...
    smalltalk03 = "SVM_2_Smalltalk03"; //...ýòî áûëî íå ñëèøêîì óìíî...
    smalltalk04 = "SVM_2_Smalltalk04"; //...ÿ íå õî÷ó â ýòî ââÿçûâàòüñÿ...
    smalltalk05 = "SVM_2_Smalltalk05"; //...ýòî òî÷íî íå ìîÿ ïðîáëåìà...
    smalltalk06 = "SVM_2_Smalltalk06"; //...ïîõîæå, íàçðåâàåò ïðîáëåìà...
    smalltalk07 = "SVM_2_Smalltalk07"; //...äåðæè ýòî ïðè ñåáå, ëþäÿì íåîáÿçàòåëüíî çíàòü îá ýòîì.
    smalltalk08 = "SVM_2_Smalltalk08"; //...áîëüøå ýòîãî íå ñëó÷èòñÿ...
    smalltalk09 = "SVM_2_Smalltalk09"; //...÷òî-òî íå òàê â ýòîé èñòîðèè...
    smalltalk10 = "SVM_2_Smalltalk10"; //...òû äîëæåí ñëåäèòü çà òåì, ÷òî ãîâîðèøü ëþäÿì...
    smalltalk11 = "SVM_2_Smalltalk11"; //...ïîêà ìåíÿ íå âïóòàëè...
    smalltalk12 = "SVM_2_Smalltalk12"; //...òû íå äîëæåí âåðèòü âñåìó...
    smalltalk13 = "SVM_2_Smalltalk13"; //...íå õîòåë áû ÿ îêàçàòüñÿ íà åãî ìåñòå...
    smalltalk14 = "SVM_2_Smalltalk14"; //...êàæäûé ðàç îäíà è òà æå èñòîðèÿ...
    smalltalk15 = "SVM_2_Smalltalk15"; //...íåêîòîðûõ ëþäåé íè÷åãî íå ó÷èò...
    smalltalk16 = "SVM_2_Smalltalk16"; //...áûëè âðåìåíà, êîãäà âñå áûëî ñîâñåì ïî-äðóãîìó...
    smalltalk17 = "SVM_2_Smalltalk17"; //...ëþäè âñåãäà áîëòàþò...
    smalltalk18 = "SVM_2_Smalltalk18"; //...ÿ áîëüøå íå ñëóøàþ âñÿêóþ òðåïîòíþ...
    smalltalk19 = "SVM_2_Smalltalk19"; //...âåðèøü êîìó-òî - è â ðåçóëüòàòå ïîïàäàåøü â íåïðèÿòíîñòè, òàê âñåãäà è áûâàåò...
    smalltalk20 = "SVM_2_Smalltalk20"; //...ÿ ñîìíåâàþñü, ÷òî ýòî êîãäà-íèáóäü èçìåíèòñÿ...
    smalltalk21 = "SVM_2_Smalltalk21"; //...ñêîðåå âñåãî, òû ïðàâ...
    smalltalk22 = "SVM_2_Smalltalk22"; //...äåðæèñü. Ëó÷øå íè âî ÷òî íå âñòðåâàòü ñ ãîðÿ÷à...
    smalltalk23 = "SVM_2_Smalltalk23"; //...ÿ äóìàë, ýòî âûÿñíèëè åùå î÷åíü äàâíî...
    smalltalk24 = "SVM_2_Smalltalk24"; //...äàâàé ïîãîâîðèì î ÷åì-íèáóäü åùå...
    om = "SVM_2_Om"; //Îììì...
};

instance svm_3(c_svm) {
    stopmagic = "SVM_3_StopMagic"; //Ïåðåñòàíü êîëäîâàòü!
    isaidstopmagic = "SVM_3_ISaidStopMagic"; //Ïåðåñòàíü êîëäîâàòü - íåìåäëåííî!
    weapondown = "SVM_3_WeaponDown"; //Îïóñòè îðóæèå!
    isaidweapondown = "SVM_3_ISaidWeaponDown"; //Ó ìåíÿ ðåçêî èñïîðòèòñÿ íàñòðîåíèå, åñëè òû áóäåøü øëÿòüñÿ çäåñü ñ ýòèì îðóæèåì!
    watchyouraim = "SVM_3_WatchYourAim"; //Ïî÷åìó òû â ìåíÿ öåëèøüñÿ?
    watchyouraimangry = "SVM_3_WatchYourAimAngry"; //Óáåðè îðóæèå, èëè ÿ ðàññåðæóñü!
    whatareyoudoing = "SVM_3_WhatAreYouDoing"; //Ýýýýýýýé! Ýòî åùå çà÷åì???
    letsforgetourlittlefight = "SVM_3_LetsForgetOurLittleFight"; //Ëàäíî, áóäåì ñ÷èòàòü, ÷òî ìû íå ïîíÿëè äðóã äðóãà.
    strange = "SVM_3_Strange"; //Îí èñ÷åç, ïðîñòî èñ÷åç?!
    diemonster = "SVM_3_DieMonster"; //Íó, ìåðçêàÿ ðîæà, áîëüøå òû ìåíÿ íå ïîáåñïîêîèøü!
    diemortalenemy = "SVM_3_DieMortalEnemy"; //ß ïîêîí÷ó ñ òîáîé!
    nowwait = "SVM_3_NowWait"; //Ïîõîæå, ìíå ñëåäóåò âûðàæàòüñÿ åùå ÿñíåå!
    youstillnothaveenough = "SVM_3_YouStillNotHaveEnough"; //Ïîõîæå, ýòîãî òåáå áûëî ìàëî!
    youaskedforit = "SVM_3_YouAskedForIt"; //Ñàì íàïðîñèëñÿ!
    nowwaitintruder = "SVM_3_NowWaitIntruder"; //Òåáå çäåñü íå÷åãî äåëàòü. Òåïåðü ÿ äîëæåí âáèòü ýòî â òâîþ ïóñòóþ áàøêó!
    iwillteachyourespectforforeignproperty = "SVM_3_IWillTeachYouRespectForForeignProperty"; //Ïîõîæå, ñòîèò ñëîìàòü òåáå ïàðó ïàëüöåâ - òàê òåáå áóäåò ïîíÿòíåé.
    dirtythief = "SVM_3_DirtyThief"; //Òû âîð! Ãëàçàì ñâîèì íå âåðþ!
    youattackedmycharge = "SVM_3_YouAttackedMyCharge"; //Ýé, íåëüçÿ áèòü êàæäîãî âñòðå÷íîãî!
    youkilledoneofus = "SVM_3_YouKilledOneOfUs"; //Òû óáèë îäíîãî èç íàøèõ! Ýòî òâîÿ ïîñëåäíÿÿ îøèáêà!
    dead = "SVM_3_Dead"; //Àààããë!
    aargh_1 = "SVM_3_Aargh_1"; //Ààðãõ!
    aargh_2 = "SVM_3_Aargh_2"; //Ààðãõ!
    aargh_3 = "SVM_3_Aargh_3"; //Ààðãõ!
    berzerk = "SVM_3_Berzerk"; //ÓÓÀÀÀÐÐÃÃÃÕÕÕ!!!
    youllbesorryforthis = "SVM_3_YoullBeSorryForThis"; //Òû îá ýòîì ïîæàëååøü!
    yesyes = "SVM_3_YesYes"; //Ëàäíî, ëàäíî, òû ïîáåäèë!
    shitwhatamonster = "SVM_3_ShitWhatAMonster"; //×åðò! Áåãè îòñþäà!
    help = "SVM_3_Help"; //ß äîëæåí èäòè!
    wewillmeetagain = "SVM_3_WeWillMeetAgain"; //Ìû åùå âñòðåòèìñÿ!
    nevertrythatagain = "SVM_3_NeverTryThatAgain"; //Áîëüøå òàê íå äåëàé!
    itakeyourweapon = "SVM_3_ITakeYourWeapon"; //Ñïàñèáî çà îðóæèå!
    itookyourore = "SVM_3_ITookYourOre"; //ß ïðîñòî âîçüìó ó òåáÿ íåìíîãî ðóäû!
    shitnoore = "SVM_3_ShitNoOre"; //Íåò ðóäû? Õðåíîâî, ïàðåíü, ñîâñåì õðåíîâî!
    handsoff = "SVM_3_HandsOff"; //Óáåðè ðóêè!
    getoutofhere = "SVM_3_GetOutOfHere"; //Ïîøåë âîí!
    youviolatedforbiddenterritory = "SVM_3_YouViolatedForbiddenTerritory"; //Ýé! Îòêóäà òû?
    youwannafoolme = "SVM_3_YouWannaFoolMe"; //ß íå íàñòîëüêî ãëóï, êàê òû äóìàåøü!
    whatsthissupposedtobe = "SVM_3_WhatsThisSupposedToBe"; //Ïåðåñòàíü çäåñü øëÿòüñÿ!
    whyareyouinhere = "SVM_3_WhyYouAreInHere"; //Èñ÷åçíè èç ìîåãî äîìà, èëè ÿ ïîçîâó ñòðàæó!
    whatdidyouinthere = "SVM_3_WhatDidYouInThere"; //×òî òû äåëàåøü? Åñëè ÿ ïîéìàþ òåáÿ, òåáå êîíåö!
    wisemove = "SVM_3_WiseMove"; //Òû ñàì íàïðîñèëñÿ!
    alarm = "SVM_3_Alarm"; //Ñòðàæà! Ñþäà!
    intruderalert = "SVM_3_IntruderAlert"; //ÒÐÅÂÎÃÀ!!!
    behindyou = "SVM_3_BehindYou"; //Áåðåãèñü!
    theresafight = "SVM_3_TheresAFight"; //Äðàêà!
    heyheyhey = "SVM_3_HeyHeyHey"; //Âðåæü åìó!
    cheerfight = "SVM_3_CheerFight"; //×òî òû ïûòàåøüñÿ ñäåëàòü?
    cheerfriend = "SVM_3_CheerFriend"; //Õîðîøèé óäàð!
    ooh = "SVM_3_Ooh"; //Îîîîõ!
    yeahwelldone = "SVM_3_YeahWellDone"; //Äà! Îòëè÷íî!
    runcoward = "SVM_3_RunCoward"; //Îí óäèðàåò!
    hedefeatedhim = "SVM_3_HeDefeatedHim"; //Îí ïðèêîí÷èë åãî!
    hedeservedit = "SVM_3_HeDeservedIt"; //Ýòî óñïîêîèò åãî íà êàêîå-òî âðåìÿ!
    hekilledhim = "SVM_3_HeKilledHim"; //Ãîòîâ. Òû óáèë åãî.
    itwasagoodfight = "SVM_3_ItWasAGoodFight"; //Ñïëîøíûå äðàêè...
    awake = "SVM_3_Awake"; //Íè÷åãî íå ìåíÿåòñÿ...
    friendlygreetings = "SVM_3_FriendlyGreetings"; //Ýé, ïàðåíü.
    algreetings = "SVM_3_ALGreetings"; //Çà Ãîìåçà, äà, äà.
    magegreetings = "SVM_3_MageGreetings"; //Âî èìÿ ìàãèè!
    sectgreetings = "SVM_3_SectGreetings"; //Ïðîñûïàéñÿ!
    thereheis = "SVM_3_ThereHeIs"; //Îí çäåñü.
    nolearnnopoints = "SVM_3_NoLearnNoPoints"; //Òåáå íåõâàòàåò îïûòà. ß íå ìîãó íàó÷èòü òåáÿ ýòîìó!
    nolearnovermax = "SVM_3_NoLearnOverMax"; //Òû íà ïðåäåëå ñâîèõ âîçìîæíîñòåé. Òåáå íóæíî íàó÷èòüñÿ ÷åìó-íèáóäü åùå.
    nolearnyoualreadyknow = "SVM_3_NoLearnYouAlreadyKnow"; //Ïðåæäå ÷åì ñòàòü ìàñòåðîì, òû äîëæåí íàáðàòüñÿ îïûòà!
    nolearnyourebetter = "SVM_3_NoLearnYoureBetter"; //Óæå ëó÷øå!
    heyyou = "SVM_3_HeyYou"; //Ýé, òû!
    notnow = "SVM_3_NotNow"; //Íå ñåé÷àñ!
    whatdoyouwant = "SVM_3_WhatDoYouWant"; //×òî-òî èùåøü?
    isaidwhatdoyouwant = "SVM_3_ISaidWhatDoYouWant"; //Ìîãó ÿ ÷òî-íèáóäü äëÿ òåáÿ ñäåëàòü?
    makeway = "SVM_3_MakeWay"; //Äàé ìíå ïðîéòè!
    outofmyway = "SVM_3_OutOfMyWay"; //Ñ äîðîãè, ïàðåíü!
    youdeaforwhat = "SVM_3_YouDeafOrWhat"; //Ñêîëüêî ðàç ãîâîðèòü?! Äàé ìíå ïðîéòè!
    lookingfortroubleagain = "SVM_3_LookingForTroubleAgain"; //Ñíîâà èùåøü íåïðèÿòíîñòåé?
    lookaway = "SVM_3_LookAway"; //ß ÍÈ×ÅÃÎ íå âèäåë! È âîîáùå ìåíÿ çäåñü íå áûëî!
    okaykeepit = "SVM_3_OkayKeepIt"; //Ëàäíî, ëàäíî, âîçüìè!
    whatsthat = "SVM_3_WhatsThat"; //×òî ýòî áûëî?
    thatsmyweapon = "SVM_3_ThatsMyWeapon"; //Ó òåáÿ ìîå îðóæèå!
    giveittome = "SVM_3_GiveItToMe"; //Îòäàé!
    youcankeepthecrap = "SVM_3_YouCanKeeptheCrap"; //Êàê ñêàæåøü! Ìíå ýòî âñå ðàâíî íå íóæíî.
    theykilledmyfriend = "SVM_3_TheyKilledMyFriend"; //Îíè óáèëè åùå îäíîãî. Íèêòî èç íàñ íå óéäåò îòñþäà æèâûì...
    youdisturbedmyslumber = "SVM_3_YouDisturbedMySlumber"; //Òû íå äàë ìíå äîñìîòðåòü òàêîé ñîí. ×òî íóæíî?
    suckergotsome = "SVM_3_SuckerGotSome"; //Ýòî ïîñëóæèò òåáå õîðîøèì óðîêîì!
    suckerdefeatedebr = "SVM_3_SuckerDefeatedEBr"; //Òû ïîáåäèë Áàðîíà! Èùåøü íåïðèÿòíîñòåé, äà?
    suckerdefeatedgur = "SVM_3_SuckerDefeatedGur"; //Òû ïîáåäèë îäíîãî èç Ãóðó. Ýòî îíè òåáå ïðèïîìíÿò!
    suckerdefeatedmage = "SVM_3_SuckerDefeatedMage"; //Ïîáåäèòü ìàãà - çíà÷èò, íàæèòü ñåáå áîëüøèå íåïðèÿòíîñòè!
    suckerdefeatednov_guard = "SVM_3_SuckerDefeatedNov_Guard"; //Ñëåäóþùé ðàç ïîäóìàåøü, ïðåæäå ÷åì çàäèðàòü íîâè÷êîâ!
    suckerdefeatedvlk_guard = "SVM_3_SuckerDefeatedVlk_Guard"; //Åñëè òû óäàðèøü ðóäîêîïà, ÿ ñäåëàþ òî æå ñàìîå ñ òîáîé!
    youdefeatedmycomrade = "SVM_3_YouDefeatedMyComrade"; //Òû óäàðèë îäíîãî èç ìîèõ äðóçåé!
    youdefeatednov_guard = "SVM_3_YouDefeatedNOV_Guard"; //Íîâè÷êè çäåñü ïîä ìîåé çàùèòîé! Îñòàâü èõ!
    youdefeatedvlk_guard = "SVM_3_YouDefeatedVLK_Guard"; //Ðóäîêîïû ïëàòÿò ìíå çà çàùèòó - è ÿ äåéñòâèòåëüíî çàùèùàþ èõ!
    youstolefromme = "SVM_3_YouStoleFromMe"; //Òû îáîêðàë ìåíÿ, ãðÿçíûé âîðèøêà!
    youstolefromus = "SVM_3_YouStoleFromUs"; //Ó òåáÿ åñòü ÷òî-òî, ÷òî ïðèíàäëåæèò íàì. Ëó÷øå áû òåáå âåðíóòü ýòî íàçàä!
    youstolefromebr = "SVM_3_YouStoleFromEBr"; //Ïàðåíü! Òû îáîêðàë Áàðîíîâ! Îíè áóäóò â ÿðîñòè!
    youstolefromgur = "SVM_3_YouStoleFromGur"; //Òû îáîêðàë Ãóðó, è îíè òåáÿ ðàñêðûëè - âîò æàëîñòü!
    stolefrommage = "SVM_3_StoleFromMage"; //Òû äîëæåí áûòü êóäà áîëåå ëîâêèì, ÷òîáû îáîêðàñòü ìàãà!
    youkilledmyfriend = "SVM_3_YouKilledMyFriend"; //Íà òâîåé ñîâåñòè æèçíü îäíîãî èç íàøèõ ëþäåé. Åùå îäíà îøèáêà, è òû áóäåøü ñëåäóþùèì!
    youkilledebr = "SVM_3_YouKilledEBr"; //Òû óáèë Áàðîíà! Ïàðåíü, òû îêîí÷àòåëüíî ñïÿòèë?!
    youkilledgur = "SVM_3_YouKilledGur"; //Òû óáèë Ãóðó! ß ãëàçàì ñâîèì íå âåðþ!
    youkilledmage = "SVM_3_YouKilledMage"; //Òû óáèë ìàãà! Êàê òû ñîáèðàåøüñÿ îáúÿñíèòü ýòî?
    youkilledocfolk = "SVM_3_YouKilledOCfolk"; //Óáèò ÷åëîâåê èç Ñòàðîãî Ëàãåðÿ, è êîå-êòî ñâÿçûâàåò òåáÿ ñ ýòèì óáèéñòâîì...
    youkilledncfolk = "SVM_3_YouKilledNCfolk"; //Íîâûé Ëàãåðü ïîíåñ òÿæåëóþ óòðàòó, è, ïîõîæå, òû ïðè÷àñòåí ê ýòîìó!
    youkilledpsifolk = "SVM_3_YouKilledPSIfolk"; //Áðàòñòâî ïîòåðÿëî îäíîãî èç ñâîèõ ÷ëåíîâ, è ýòà æèçíü íà òâîåé ñîâåñòè!
    getthingsright = "SVM_3_GetThingsRight"; //Òåáå áóäåò íåëåãêî îïðàâäàòüñÿ!
    youdefeatedmewell = "SVM_3_YouDefeatedMeWell"; //Õîòü òû è îäåðæàë âåðõ, ýòî áûë ÷åñòíûé áîé!
    smalltalk01 = "SVM_3_Smalltalk01"; //...åñëè òû äóìàåøü...
    smalltalk02 = "SVM_3_Smalltalk02"; //...ìîæåò áûòü...
    smalltalk03 = "SVM_3_Smalltalk03"; //...ýòî áûëî íå ñëèøêîì óìíî...
    smalltalk04 = "SVM_3_Smalltalk04"; //...ÿ íå õî÷ó â ýòî ââÿçûâàòüñÿ...
    smalltalk05 = "SVM_3_Smalltalk05"; //...ýòî òî÷íî íå ìîÿ ïðîáëåìà...
    smalltalk06 = "SVM_3_Smalltalk06"; //...ïîõîæå, íàçðåâàåò ïðîáëåìà...
    smalltalk07 = "SVM_3_Smalltalk07"; //...äåðæè ýòî ïðè ñåáå, ëþäÿì íåîáÿçàòåëüíî çíàòü îá ýòîì.
    smalltalk08 = "SVM_3_Smalltalk08"; //...áîëüøå ýòîãî íå ñëó÷èòñÿ...
    smalltalk09 = "SVM_3_Smalltalk09"; //...÷òî-òî íå òî â ýòîé èñòîðèè...
    smalltalk10 = "SVM_3_Smalltalk10"; //...òû äîëæåí ñëåäèòü çà òåì, ÷òî ãîâîðèøü ëþäÿì...
    smalltalk11 = "SVM_3_Smalltalk11"; //...ïîêà ìåíÿ íå âïóòàëè...
    smalltalk12 = "SVM_3_Smalltalk12"; //...òû íå äîëæåí âåðèòü âñåìó...
    smalltalk13 = "SVM_3_Smalltalk13"; //...íå õîòåë áû ÿ îêàçàòüñÿ íà åãî ìåñòå...
    smalltalk14 = "SVM_3_Smalltalk14"; //...êàæäûé ðàç îäíà è òà æå èñòîðèÿ...
    smalltalk15 = "SVM_3_Smalltalk15"; //...íåêîòîðûõ ëþäåé íè÷åãî íå ó÷èò...
    smalltalk16 = "SVM_3_Smalltalk16"; //...áûëè âðåìåíà, êîãäà âñå áûëî ñîâñåì ïî-äðóãîìó...
    smalltalk17 = "SVM_3_Smalltalk17"; //...ëþäè âñåãäà áîëòàþò...
    smalltalk18 = "SVM_3_Smalltalk18"; //...ÿ áîëüøå íå ñëóøàþ âñÿêóþ òðåïîòíþ...
    smalltalk19 = "SVM_3_Smalltalk19"; //...âåðèøü êîìó-òî - è â ðåçóëüòàòå ïîïàäàåøü â íåïðèÿòíîñòè, òàê âñåãäà è áûâàåò...
    smalltalk20 = "SVM_3_Smalltalk20"; //...ÿ ñîìíåâàþñü, ÷òî ýòî êîãäà-íèáóäü èçìåíèòñÿ...
    smalltalk21 = "SVM_3_Smalltalk21"; //...ñêîðåå âñåãî, òû ïðàâ...
    smalltalk22 = "SVM_3_Smalltalk22"; //...äåðæèñü. Ëó÷øå íè íà ÷òî íå íàòûêàòüñÿ...
    smalltalk23 = "SVM_3_Smalltalk23"; //...ÿ äóìàë, ýòî âûÿñíèëè åùå î÷åíü äàâíî...
    smalltalk24 = "SVM_3_Smalltalk24"; //...äàâàé ïîãîâîðèì î ÷åì-íèáóäü åùå...
    om = "SVM_3_Om"; //Îììì...
};

instance svm_4(c_svm) {
    stopmagic = "SVM_4_StopMagic"; //Ïåðåñòàíü êîëäîâàòü!
    isaidstopmagic = "SVM_4_ISaidStopMagic"; //Ïîñëóøàéñÿ ìîåãî ñîâåòà è ïåðåñòàíü êîëäîâàòü!
    weapondown = "SVM_4_WeaponDown"; //Åñëè íå õî÷åøü íåïðèÿòíîñòåé, óáåðè îðóæèå!
    isaidweapondown = "SVM_4_ISaidWeaponDown"; //Óáåðè îðóæèå - íåìåäëåííî!
    watchyouraim = "SVM_4_WatchYourAim"; //Íå íàïðàâëÿé åãî íà ìåíÿ!
    watchyouraimangry = "SVM_4_WatchYourAimAngry"; //Åñëè íå ïðåêðàòèøü, ÿ îòíèìó ó òåáÿ ýòó èãðóøêó!
    whatareyoudoing = "SVM_4_WhatAreYouDoing"; //Ýé, òàì! Ñìîòðè ÷òî äåëàåøü!
    letsforgetourlittlefight = "SVM_4_LetsForgetOurLittleFight"; //Çàáóäåì îá ýòîì!
    strange = "SVM_4_Strange"; //Âûõîäè! Ïîêàæè ñåáÿ!
    diemonster = "SVM_4_DieMonster"; //Íå âàæíî, ñêîëüêèõ òû óáüåøü, - èõ áóäåò âñå áîëüøå è áîëüøå!
    diemortalenemy = "SVM_4_DieMortalEnemy"; //Äà, òåáå íå ñóæäåíî ñòàòü ñòàðøå!
    nowwait = "SVM_4_NowWait"; //ß íàó÷ó òåáÿ íå ñâÿçûâàòüñÿ ñî ìíîé...
    youstillnothaveenough = "SVM_4_YouStillNotHaveEnough"; //Òåáå ìàëî?
    youaskedforit = "SVM_4_YouAskedForIt"; //Ñàì íàïðîñèëñÿ!
    nowwaitintruder = "SVM_4_NowWaitIntruder"; //Çàáèðàòüñÿ ñþäà áûëî î÷åíü ãëóïî!
    iwillteachyourespectforforeignproperty = "SVM_4_IWillTeachYouRespectForForeignProperty"; //Òû íå ìîæåøü áåçíàêàçàííî øëÿòüñÿ çäåñü!
    dirtythief = "SVM_4_DirtyThief"; //Òû ïîñìåë îáîêðàñòü ìåíÿ?!
    youattackedmycharge = "SVM_4_YouAttackedMyCharge"; //Íàðûâàòüñÿ íà íåïðèÿòíîñòè ñ íàìè - ýòî íå ïîéäåò òåáå íà ïîëüçó.
    youkilledoneofus = "SVM_4_YouKilledOneOfUs"; //Òû óáèë îäíîãî èç íàøèõ! Ãëàç çà ãëàç!
    dead = "SVM_4_Dead"; //Àààðãë!
    aargh_1 = "SVM_4_Aargh_1"; //Ààðãõ!
    aargh_2 = "SVM_4_Aargh_2"; //Ààðãõ!
    aargh_3 = "SVM_4_Aargh_3"; //Ààðãõ!
    berzerk = "SVM_4_Berzerk"; //ÓÓÀÀÀÐÐÃÃÃÕÕÕ!!!
    youllbesorryforthis = "SVM_4_YoullBeSorryForThis"; //Òû îá ýòîì ïîæàëååøü!
    yesyes = "SVM_4_YesYes"; //Íå âîëíóéñÿ, òû ïîáåäèë!
    shitwhatamonster = "SVM_4_ShitWhatAMonster"; //Ñìàòûâàåìñÿ îòñþäà, áûñòðî!
    help = "SVM_4_Help"; //ß ñëèøêîì ñòàð äëÿ âñåãî ýòîãî!
    wewillmeetagain = "SVM_4_WeWillMeetAgain"; //ß çàïîìíþ ýòî!
    nevertrythatagain = "SVM_4_NeverTryThatAgain"; //Áîëüøå ýòîãî íå äåëàé!
    itakeyourweapon = "SVM_4_ITakeYourWeapon"; //Ïîæàëóé, ÿ çàáåðó ýòî îðóæèå!
    itookyourore = "SVM_4_ITookYourOre"; //Íå âîëíóéñÿ: êîãäà ñ òîáîé áóäåò ïîêîí÷åíî, ÿ ïîçàáî÷óñü î òâîåé ðóäå!
    shitnoore = "SVM_4_ShitNoOre"; //Íåò äàæå äðÿííîãî êóñêà ðóäû...
    handsoff = "SVM_4_HandsOff"; //Óáåðè ðóêè!
    getoutofhere = "SVM_4_GetOutOfHere"; //Èñ÷åçíè!
    youviolatedforbiddenterritory = "SVM_4_YouViolatedForbiddenTerritory"; //Òåáå çäåñü íå÷åãî äåëàòü!
    youwannafoolme = "SVM_4_YouWannaFoolMe"; //Ó ìåíÿ íåò íàñòðîåíèÿ øóòèòü ñ òîáîé!
    whatsthissupposedtobe = "SVM_4_WhatsThisSupposedToBe"; //Ýé, òû! ×òî òû çäåñü øëÿåøüñÿ?
    whyareyouinhere = "SVM_4_WhyYouAreInHere"; //Óáèðàéñÿ èëè ÿ ïîçîâó ñòðàæó!
    whatdidyouinthere = "SVM_4_WhatDidYouInThere"; //×òî òû òàì äåëàåøü?
    wisemove = "SVM_4_WiseMove"; //Òåáå åùå ïîâåçëî.
    alarm = "SVM_4_Alarm"; //Ñòðàæà! Ñþäà!
    intruderalert = "SVM_4_IntruderAlert"; //×ÓÆÎÉ!!!
    behindyou = "SVM_4_BehindYou"; //Ñçàäè!
    theresafight = "SVM_4_TheresAFight"; //Ñíîâà äðàêà.
    heyheyhey = "SVM_4_HeyHeyHey"; //Ñèëüíåå!
    cheerfight = "SVM_4_CheerFight"; //È ýòî âñå, íà ÷òî òû ñïîñîáåí?!
    cheerfriend = "SVM_4_CheerFriend"; //Âðåæü åìó!
    ooh = "SVM_4_Ooh"; //Áåé â îòâåò!
    yeahwelldone = "SVM_4_YeahWellDone"; //Õîðîøî!
    runcoward = "SVM_4_RunCoward"; //Ýòîò òðóñ óáåãàåò!
    hedefeatedhim = "SVM_4_HeDefeatedHim"; //Âî âðåìåíà ìîåé ìîëîäîñòè ëþäè áûëè ïîêðåï÷å!
    hedeservedit = "SVM_4_HeDeservedIt"; //Ýòî òâîÿ âèíà!
    hekilledhim = "SVM_4_HeKilledHim"; //Òû óáèë åãî! Ýòî áûëà áîëüøàÿ îøèáêà!
    itwasagoodfight = "SVM_4_ItWasAGoodFight"; //Â äàâíèå âðåìåíà ñðàæåíèÿ áûëè íå ÷åòà òåïåðåøíèì.
    awake = "SVM_4_Awake"; //[çåâîê]
    friendlygreetings = "SVM_4_FriendlyGreetings"; //Ïðèâåòñòâóþ.
    algreetings = "SVM_4_ALGreetings"; //Çà Ãîìåçà!
    magegreetings = "SVM_4_MageGreetings"; //Âî èìÿ ìàãèè!
    sectgreetings = "SVM_4_SectGreetings"; //Ïðîñíèñü!
    thereheis = "SVM_4_ThereHeIs"; //Îí òàì!
    nolearnnopoints = "SVM_4_NoLearnNoPoints"; //ß íè÷åìó íå ìîãó íàó÷èòü òåáÿ. Òåáå íåõâàòàåò îïûòà.
    nolearnovermax = "SVM_4_NoLearnOverMax"; //Òû íà ïðåäåëå ñâîèõ âîçìîæíîñòåé. Òåáå íóæíî íàó÷èòüñÿ ÷åìó-íèáóäü åùå.
    nolearnyoualreadyknow = "SVM_4_NoLearnYouAlreadyKnow"; //Ïðåæäå ÷åì ñòàòü ìàñòåðîì, òû äîëæåí íàáðàòüñÿ îïûòà!
    nolearnyourebetter = "SVM_4_NoLearnYoureBetter"; //Óæå ëó÷øå!
    heyyou = "SVM_4_HeyYou"; //Ýé, òû!
    notnow = "SVM_4_NotNow"; //Íå ñåé÷àñ!
    whatdoyouwant = "SVM_4_WhatDoYouWant"; //×òî òû õî÷åøü?
    isaidwhatdoyouwant = "SVM_4_ISaidWhatDoYouWant"; //Òåáå ÷òî-íèáóäü íóæíî?
    makeway = "SVM_4_MakeWay"; //Äàé ìíå ïðîéòè!
    outofmyway = "SVM_4_OutOfMyWay"; //Ñ äîðîãè!
    youdeaforwhat = "SVM_4_YouDeafOrWhat"; //Ñ äîðîãè, èëè òû ïîæàëååøü!
    lookingfortroubleagain = "SVM_4_LookingForTroubleAgain"; //Ñíîâà èùåøü íåïðèÿòíîñòåé?
    lookaway = "SVM_4_LookAway"; //Íè÷åãî íå âèäåë, íè÷åãî íå ñëûøàë è íèêîìó íè÷åãî íå ñêàæó...
    okaykeepit = "SVM_4_OkayKeepIt"; //Âîçüìè ñåáå!
    whatsthat = "SVM_4_WhatsThat"; //×òî ýòî áûëî?
    thatsmyweapon = "SVM_4_ThatsMyWeapon"; //Áóäü õîðîøèì ìàëü÷èêîì è âåðíè ìîå îðóæèå!
    giveittome = "SVM_4_GiveItToMe"; //Íó, äàé ñþäà!
    youcankeepthecrap = "SVM_4_YouCanKeeptheCrap"; //Íåò-íåò! ß ðàä èçáàâèòüñÿ îò ýòîãî!
    theykilledmyfriend = "SVM_4_TheyKilledMyFriend"; //Åñëè ÿ óçíàþ, êòî óáèë îäíîãî èç íàøèõ...
    youdisturbedmyslumber = "SVM_4_YouDisturbedMySlumber"; //Òû ïîòðåâîæèë ìîé ñîí!
    suckergotsome = "SVM_4_SuckerGotSome"; //Íå âåçåò, à? Íî òåáå íóæíà áûëà õîðîøàÿ òðåïêà!
    suckerdefeatedebr = "SVM_4_SuckerDefeatedEBr"; //Òû ïîáåäèë Áàðîíà!
    suckerdefeatedgur = "SVM_4_SuckerDefeatedGur"; //Òû ïîáåäèë îäíîãî èç Ãóðó. Âïå÷àòëÿåò. Íî äàæå íå ïûòàéñÿ ñäåëàòü ýòî åùå ðàç!
    suckerdefeatedmage = "SVM_4_SuckerDefeatedMage"; //Ïîáåäèòü ìàãà... òû, äîëæíî áûòü, õðàáðûé ïàðåíü!
    suckerdefeatednov_guard = "SVM_4_SuckerDefeatedNov_Guard"; //Íóæíî áûòü ïîëíûì ïðèäóðêîì, ÷òîáû äðàòüñÿ ñ íîâè÷êàìè!
    suckerdefeatedvlk_guard = "SVM_4_SuckerDefeatedVlk_Guard"; //Äóìàåøü, òåáå ïîçâîëåíî áèòü ðóäîêîïîâ?
    youdefeatedmycomrade = "SVM_4_YouDefeatedMyComrade"; //Òû óäàðèë îäíîãî èç ìîèõ äðóçåé! Ðèñêóåøü, ïàðåíü!
    youdefeatednov_guard = "SVM_4_YouDefeatedNOV_Guard"; //Åùå ðàç îáèäèøü íîâè÷êà, è òû îá ýòîì êðóïíî ïîæàëååøü!
    youdefeatedvlk_guard = "SVM_4_YouDefeatedVLK_Guard"; //Ìîæåò áûòü òû è õðàáð, íî îáèæàòü ëþäåé, êîòîðûå íàõîäÿòñÿ ïîä ÷üåé-íèáóäü çàùèòîé, âñå ðàâíî îïàñíî.
    youstolefromme = "SVM_4_YouStoleFromMe"; //Óáåðè ðóêè îò ìîèõ âåùåé, ïîíÿë?
    youstolefromus = "SVM_4_YouStoleFromUs"; //Ó òåáÿ åñòü ÷òî-òî, ÷òî ïðèíàäëåæèò íàì. Âåðíè íàøè âåùè!
    youstolefromebr = "SVM_4_YouStoleFromEBr"; //Ïàðåíü! Òû îáîêðàë Áàðîíîâ! Îíè áóäóò â ÿðîñòè!
    youstolefromgur = "SVM_4_YouStoleFromGur"; //Òû îáîêðàë Ãóðó! Íó óæ ïî êðàéíåé ìåðå òåáå íå ñòîèëî ïîïàäàòüñÿ!
    stolefrommage = "SVM_4_StoleFromMage"; //Ìàãè íå î÷åíü ëþáÿò, êîãäà êòî-òî ðîåòñÿ â èõ âåùàõ!
    youkilledmyfriend = "SVM_4_YouKilledMyFriend"; //Íà òâîåé ñîâåñòè æèçíü îäíîãî èç íàøèõ ëþäåé. Åùå îäíà îøèáêà, è òû áóäåøü ñëåäóþùèì!
    youkilledebr = "SVM_4_YouKilledEBr"; //Òû óáèë Áàðîíà! Ïàðåíü, òû îêîí÷àòåëüíî ñïÿòèë?!
    youkilledgur = "SVM_4_YouKilledGur"; //Òû óáèë Ãóðó! ß ãëàçàì ñâîèì íå âåðþ!
    youkilledmage = "SVM_4_YouKilledMage"; //Òû óáèë ìàãà! Êàê òû ñîáèðàåøüñÿ îáúÿñíèòü ýòî?
    youkilledocfolk = "SVM_4_YouKilledOCfolk"; //Óáèò ÷åëîâåê èç Ñòàðîãî Ëàãåðÿ, è êîå-êòî ñâÿçûâàåò òåáÿ ñ ýòèì óáèéñòâîì...
    youkilledncfolk = "SVM_4_YouKilledNCfolk"; //Íîâûé Ëàãåðü ïîíåñ òÿæåëóþ óòðàòó, è, ïîõîæå, òû ïðè÷àñòåí ê ýòîìó!
    youkilledpsifolk = "SVM_4_YouKilledPSIfolk"; //Áðàòñòâî ïîòåðÿëî îäíîãî èç ñâîèõ ÷ëåíîâ, è ýòà æèçíü íà òâîåé ñîâåñòè!
    getthingsright = "SVM_4_GetThingsRight"; //Òåáå áóäåò íåëåãêî îïðàâäàòüñÿ!
    youdefeatedmewell = "SVM_4_YouDefeatedMeWell"; //Òû çàäàë ìíå õîðîøóþ òðåïêó, ïàðåíü. Ýòî áûë íåïëîõîé áîé, íî òåïåðü îí îêîí÷åí!
    smalltalk01 = "SVM_4_Smalltalk01"; //...åñëè òû äóìàåøü...
    smalltalk02 = "SVM_4_Smalltalk02"; //...ìîæåò áûòü...
    smalltalk03 = "SVM_4_Smalltalk03"; //...ýòî áûëî íå ñëèøêîì óìíî...
    smalltalk04 = "SVM_4_Smalltalk04"; //...ÿ íå õî÷ó â ýòî ââÿçûâàòüñÿ...
    smalltalk05 = "SVM_4_Smalltalk05"; //...ýòî òî÷íî íå ìîÿ ïðîáëåìà...
    smalltalk06 = "SVM_4_Smalltalk06"; //...ïîõîæå, íàçðåâàåò ïðîáëåìà...
    smalltalk07 = "SVM_4_Smalltalk07"; //...äåðæè ýòî ïðè ñåáå, ëþäÿì íåîáÿçàòåëüíî çíàòü îá ýòîì.
    smalltalk08 = "SVM_4_Smalltalk08"; //...áîëüøå ýòîãî íå ñëó÷èòñÿ...
    smalltalk09 = "SVM_4_Smalltalk09"; //...÷òî-òî íå òî â ýòîé èñòîðèè...
    smalltalk10 = "SVM_4_Smalltalk10"; //...òû äîëæåí ñëåäèòü çà òåì, ÷òî ãîâîðèøü ëþäÿì...
    smalltalk11 = "SVM_4_Smalltalk11"; //...ïîêà ìåíÿ íå âïóòàëè...
    smalltalk12 = "SVM_4_Smalltalk12"; //...òû íå äîëæåí âåðèòü âñåìó...
    smalltalk13 = "SVM_4_Smalltalk13"; //...íå õîòåë áû ÿ îêàçàòüñÿ íà åãî ìåñòå...
    smalltalk14 = "SVM_4_Smalltalk14"; //...êàæäûé ðàç îäíà è òà æå èñòîðèÿ...
    smalltalk15 = "SVM_4_Smalltalk15"; //...íåêîòîðûõ ëþäåé íè÷åãî íå ó÷èò...
    smalltalk16 = "SVM_4_Smalltalk16"; //...áûëè âðåìåíà, êîãäà âñå áûëî ñîâñåì ïî-äðóãîìó...
    smalltalk17 = "SVM_4_Smalltalk17"; //...ëþäè âñåãäà áîëòàþò...
    smalltalk18 = "SVM_4_Smalltalk18"; //...ÿ áîëüøå íå ñëóøàþ âñÿêóþ òðåïîòíþ...
    smalltalk19 = "SVM_4_Smalltalk19"; //...âåðèøü êîìó-òî - è â ðåçóëüòàòå ïîïàäàåøü â íåïðèÿòíîñòè, òàê âñåãäà è áûâàåò...
    smalltalk20 = "SVM_4_Smalltalk20"; //...ÿ ñîìíåâàþñü, ÷òî ýòî êîãäà-íèáóäü èçìåíèòñÿ...
    smalltalk21 = "SVM_4_Smalltalk21"; //...ñêîðåå âñåãî, òû ïðàâ...
    smalltalk22 = "SVM_4_Smalltalk22"; //...äåðæèñü. Ëó÷øå íè íà ÷òî íå íàòûêàòüñÿ...
    smalltalk23 = "SVM_4_Smalltalk23"; //...ÿ äóìàë, ýòî âûÿñíèëè åùå î÷åíü äàâíî...
    smalltalk24 = "SVM_4_Smalltalk24"; //...äàâàé ïîãîâîðèì î ÷åì-íèáóäü åùå...
    om = "SVM_4_Om"; //Îììì...
};

instance svm_5(c_svm) {
    stopmagic = "SVM_5_StopMagic"; //Ïåðåñòàíü êîëäîâàòü!
    isaidstopmagic = "SVM_5_ISaidStopMagic"; //Êàæåòñÿ, ÿ ñêàçàë: 'Ïåðåñòàíü êîëäîâàòü!'
    weapondown = "SVM_5_WeaponDown"; //×òî òû ñîáèðàåøüñÿ äåëàòü ñ îðóæåì, ïàðåíü?
    isaidweapondown = "SVM_5_ISaidWeaponDown"; //Äàâàé, óáèðàé åãî!
    watchyouraim = "SVM_5_WatchYourAim"; //Òû öåëèøüñÿ â ìåíÿ, êëîóí!
    watchyouraimangry = "SVM_5_WatchYourAimAngry"; //Åñëè íå ïðåêðàòèøü, ÿ òîæå ïîòðåíèðóþñü íà òåáå!
    whatareyoudoing = "SVM_5_WhatAreYouDoing"; //Ýé, òû ñëåïîé èëè êàê?
    letsforgetourlittlefight = "SVM_5_LetsForgetOurLittleFight"; //Çàáóäåì îá ýòîì, ëàäíî?
    strange = "SVM_5_Strange"; //Íî îí áûë çäåñü ñåêóíäó íàçàä!? Ñòðàííî!
    diemonster = "SVM_5_DieMonster"; //Òâîÿ î÷åðåäü, óáëþäîê!
    diemortalenemy = "SVM_5_DieMortalEnemy"; //Ïðèøëî âðåìÿ ðàñïëàòû!
    nowwait = "SVM_5_NowWait"; //Òû íàïðàøèâàåøüñÿ íà õîðîøóþ âçáó÷êó!
    youstillnothaveenough = "SVM_5_YouStillNotHaveEnough"; //Òåáå âñå åùå ìàëî?
    youaskedforit = "SVM_5_YouAskedForIt"; //Íó, òû ñàì íàïðîñèëñÿ!
    nowwaitintruder = "SVM_5_NowWaitIntruder"; //Òåáÿ äîëæíû âûíåñòè îòñþäà!
    iwillteachyourespectforforeignproperty = "SVM_5_IWillTeachYouRespectForForeignProperty"; //ß ïðåäóïðåäèë òåáÿ. Äîòðîíåøüñÿ äî ìîèõ âåùåé, è áóäåò õóäî!
    dirtythief = "SVM_5_DirtyThief"; //Âîð! ß íàó÷ó òåáÿ õîðîøèì ìàíåðàì!
    youattackedmycharge = "SVM_5_YouAttackedMyCharge"; //Âñå, êòî îáèæàë ìîèõ äðóçåé, ïîòîì ñèëüíî ðàñêàèâàëèñü â ýòîì!
    youkilledoneofus = "SVM_5_YouKilledOneOfUs"; //Òû óáèë îäíîãî èç ìîèõ ëþäåé. Òåïåðü ÿ óáüþ ÒÅÁß!
    dead = "SVM_5_Dead"; //Àààðãë!
    aargh_1 = "SVM_5_Aargh_1"; //Àààðã!
    aargh_2 = "SVM_5_Aargh_2"; //Àààðã!
    aargh_3 = "SVM_5_Aargh_3"; //Àààðã!
    berzerk = "SVM_5_Berzerk"; //ÓÓÀÀÀÐÐÃÃÃÕÕÕ!!!
    youllbesorryforthis = "SVM_5_YoullBeSorryForThis"; //Òû îá ýòîì ïîæàëååøü!
    yesyes = "SVM_5_YesYes"; //Ñïîêîéíî! Òû ïîáåäèë.
    shitwhatamonster = "SVM_5_ShitWhatAMonster"; //Ýòîò ìíå íå ïî çóáàì!
    help = "SVM_5_Help"; //×åðò!
    wewillmeetagain = "SVM_5_WeWillMeetAgain"; //Ïîãîâîðèì â ñëåäóþùèé ðàç!
    nevertrythatagain = "SVM_5_NeverTryThatAgain"; //Áîëüøå íå äåëàé ýòîãî!
    itakeyourweapon = "SVM_5_ITakeYourWeapon"; //Ìíå íðàâèòñÿ ýòî îðóæèå!
    itookyourore = "SVM_5_ITookYourOre"; //ß ïîñòàðàþñü ñ ïîëüçîé ïîòðàòèòü òâîþ ðóäó!
    shitnoore = "SVM_5_ShitNoOre"; //Íåóäà÷íî. Ðóäû íåò!
    handsoff = "SVM_5_HandsOff"; //Óáåðè ðóêè!
    getoutofhere = "SVM_5_GetOutOfHere"; //Óáèðàéñÿ îòñþäà!
    youviolatedforbiddenterritory = "SVM_5_YouViolatedForbiddenTerritory"; //Ýé! Îòêóäà òû?
    youwannafoolme = "SVM_5_YouWannaFoolMe"; //Õîðîøàÿ øóòêà!
    whatsthissupposedtobe = "SVM_5_WhatsThisSupposedToBe"; //×òî òû çäåñü øëÿåøüñÿ?
    whyareyouinhere = "SVM_5_WhyYouAreInHere"; //Óáèðàéñÿ îòñþäà, èëè ÿ ïîçîâó ñòðàæó!
    whatdidyouinthere = "SVM_5_WhatDidYouInThere"; //Òåáå çäåñü íå÷åãî äåëàòü!
    wisemove = "SVM_5_WiseMove"; //Òû áûñòðî ó÷èøüñÿ!
    alarm = "SVM_5_Alarm"; //Ñòðàæà! Ñþäà!
    intruderalert = "SVM_5_IntruderAlert"; //ÒÐÅÂÎÃÀ!!!
    behindyou = "SVM_5_BehindYou"; //Ýé, ñìîòðè!
    theresafight = "SVM_5_TheresAFight"; //Äðàêà!
    heyheyhey = "SVM_5_HeyHeyHey"; //Êàê òåáå ýòî?!
    cheerfight = "SVM_5_CheerFight"; //Õîðîøî!
    cheerfriend = "SVM_5_CheerFriend"; //Âðåæü åìó åùå ðàçîê!
    ooh = "SVM_5_Ooh"; //Îñòîðîæíåé!
    yeahwelldone = "SVM_5_YeahWellDone"; //Êàê ðàç âîâðåìÿ!
    runcoward = "SVM_5_RunCoward"; //Ïàðåíü óäèðàåò!
    hedefeatedhim = "SVM_5_HeDefeatedHim"; //ß áû ñêàçàë, ÷èñòàÿ ïîáåäà!
    hedeservedit = "SVM_5_HeDeservedIt"; //Îí ýòî çàñëóæèë!
    hekilledhim = "SVM_5_HeKilledHim"; //Òû óáèâàåøü ëþäåé. Òåïåðü ó òåáÿ áîëüøèå íåïðèÿòíîñòè!
    itwasagoodfight = "SVM_5_ItWasAGoodFight"; //×òî çà áîé!
    awake = "SVM_5_Awake"; //[çåâîê]
    friendlygreetings = "SVM_5_FriendlyGreetings"; //Ïðèâåò, äðóã!
    algreetings = "SVM_5_ALGreetings"; //Çà Ãîìåçà!
    magegreetings = "SVM_5_MageGreetings"; //Âî èìÿ ìàãèè!
    sectgreetings = "SVM_5_SectGreetings"; //Ïðîñíèñü!
    thereheis = "SVM_5_ThereHeIs"; //Ñþäà.
    nolearnnopoints = "SVM_5_NoLearnNoPoints"; //ß íå ìîãó ó÷èòü òåáÿ, òû ñëèøêîì íåîïûòåí.
    nolearnovermax = "SVM_5_NoLearnOverMax"; //Òû íà ïðåäåëå ñâîèõ âîçìîæíîñòåé. Òåáå íóæíî íàó÷èòüñÿ ÷åìó-íèáóäü åùå.
    nolearnyoualreadyknow = "SVM_5_NoLearnYouAlreadyKnow"; //Òåáå íóæíî íàáðàòüñÿ îïûòà, ïðåæäå ÷åì òû ñìîæåøü ñòàòü ìàñòåðîì.
    nolearnyourebetter = "SVM_5_NoLearnYoureBetter"; //Óæå ëó÷øå!
    heyyou = "SVM_5_HeyYou"; //Ýé, òû!
    notnow = "SVM_5_NotNow"; //Íå ñåé÷àñ.
    whatdoyouwant = "SVM_5_WhatDoYouWant"; //Òåáå ïîìî÷ü?
    isaidwhatdoyouwant = "SVM_5_ISaidWhatDoYouWant"; //×òî òû õî÷åøü?
    makeway = "SVM_5_MakeWay"; //Äàé ìíå ïðîéòè!
    outofmyway = "SVM_5_OutOfMyWay"; //Íó æå, ìíå íóæíî ïðîéòè!
    youdeaforwhat = "SVM_5_YouDeafOrWhat"; //Òû ãëóõîé èëè èùåøü íåïðèÿòíîñòåé?
    lookingfortroubleagain = "SVM_5_LookingForTroubleAgain"; //Ñíîâà èùåøü íåïðèÿòíîñòåé?
    lookaway = "SVM_5_LookAway"; //ß ÍÈ×ÅÃÎ íå âèäåë... È âîîáùå, ÷òî ïðîèçîøëî?
    okaykeepit = "SVM_5_OkayKeepIt"; //Ëàäíî, çàáèðàé ýòî!
    whatsthat = "SVM_5_WhatsThat"; //×òî ýòî áûëî?
    thatsmyweapon = "SVM_5_ThatsMyWeapon"; //ß õî÷ó ïîëó÷èòü íàçàä ñâîå îðóæèå!
    giveittome = "SVM_5_GiveItToMe"; //Äàâàé ñþäà!
    youcankeepthecrap = "SVM_5_YouCanKeeptheCrap"; //Íó, íå òàê óæ ïëîõî! Ó ìåíÿ åñòü åùå!
    theykilledmyfriend = "SVM_5_TheyKilledMyFriend"; //Óáèëè îäíîãî èç íàøèõ! Åñëè ÿ äîáåðóñü äî ýòîãî íàãëåöà...
    youdisturbedmyslumber = "SVM_5_YouDisturbedMySlumber"; //Ýé, ýòî åùå çà÷åì? Çà÷åì òû ìåíÿ ðàçáóäèë?
    suckergotsome = "SVM_5_SuckerGotSome"; //À? Ïîëó÷èë â ìîðäó? Ýòî ïîñëóæèò òåáå óðîêîì!
    suckerdefeatedebr = "SVM_5_SuckerDefeatedEBr"; //Òû óäàðèë Áàðîíà. Ýòî åãî âïå÷àòëèëî, äà åùå êàê!
    suckerdefeatedgur = "SVM_5_SuckerDefeatedGur"; //Òû ïîáåäèë îäíîãî èç Ãóðó! Âïå÷àòëÿåò. Íî äàæå íå ïûòàéñÿ ñäåëàòü ýòî åùå ðàç.
    suckerdefeatedmage = "SVM_5_SuckerDefeatedMage"; //Ïîáåäèòü ìàãà... òû, äîëæíî áûòü, õðàáðûé ïàðåíü!
    suckerdefeatednov_guard = "SVM_5_SuckerDefeatedNov_Guard"; //Òîëüêî èäèîò áóäåò äðàòüñÿ ñ íîâè÷êàìè!
    suckerdefeatedvlk_guard = "SVM_5_SuckerDefeatedVlk_Guard"; //Äóìàåøü, òåáå ïîçâîëåíî áèòü ðóäîêîïîâ?
    youdefeatedmycomrade = "SVM_5_YouDefeatedMyComrade"; //Òû óäàðèë ìîåãî äðóãà - êàêîãî ÷åðòà?!
    youdefeatednov_guard = "SVM_5_YouDefeatedNOV_Guard"; //Åùå ðàç îáèäèøü íîâè÷êà, è òû ïîæàëååøü!
    youdefeatedvlk_guard = "SVM_5_YouDefeatedVLK_Guard"; //Òû õðàáðûé ïàðåíü, íî íèêîìó íå ïîçâîëåíî îáèæàòü òåõ, êîãî ÿ çàùèùàþ.
    youstolefromme = "SVM_5_YouStoleFromMe"; //Êàê òû ïîñìåë ïîÿâèòüñÿ çäåñü, ãðÿçíûé âîðèøêà?
    youstolefromus = "SVM_5_YouStoleFromUs"; //Ó òåáÿ åñòü ÷òî-òî, ÷òî ïðèíàäëåæèò íàì. Ëó÷øå áû òåáå âåðíóòü ýòî íàçàä!
    youstolefromebr = "SVM_5_YouStoleFromEBr"; //Ïàðåíü! Òû îáîêðàë Áàðîíîâ! Îíè áóäóò â ÿðîñòè!
    youstolefromgur = "SVM_5_YouStoleFromGur"; //Òû îáîêðàë Ãóðó! Òåáå íå ñòîèëî ïîïàäàòüñÿ íà ýòîì!
    stolefrommage = "SVM_5_StoleFromMage"; //Ìàãè íå ëþáÿò òåõ, êòî ðîåòñÿ â èõ âåùàõ!
    youkilledmyfriend = "SVM_5_YouKilledMyFriend"; //Æèçíü îäíîãî èç íàøèõ ëþäåé íà òâîåé ñîâåñòè. Åùå îäíà îøèáêà, è íàñòàíåò òâîÿ î÷åðåäü!
    youkilledebr = "SVM_5_YouKilledEBr"; //Òû óáèë Áàðîíà! Ïàðåíü, òû îêîí÷àòåëüíî ñïÿòèë?!
    youkilledgur = "SVM_5_YouKilledGur"; //Òû óáèë Ãóðó! ß ãëàçàì ñâîèì íå âåðþ!
    youkilledmage = "SVM_5_YouKilledMage"; //Òû óáèë ìàãà! Êàê òû ñîáèðàåøüñÿ îáúÿñíèòü ýòî?
    youkilledocfolk = "SVM_5_YouKilledOCfolk"; //Óáèò ÷åëîâåê èç Ñòàðîãî Ëàãåðÿ, è êîå-êòî ñâÿçûâàåò òåáÿ ñ ýòèì óáèéñòâîì...
    youkilledncfolk = "SVM_5_YouKilledNCfolk"; //Íîâûé Ëàãåðü ïîíåñ òÿæåëóþ óòðàòó, è, ïîõîæå, òû ïðè÷àñòåí ê ýòîìó!
    youkilledpsifolk = "SVM_5_YouKilledPSIfolk"; //Áðàòñòâî ïîòåðÿëî îäíîãî èç ñâîèõ ÷ëåíîâ, è ýòà æèçíü íà òâîåé ñîâåñòè!
    getthingsright = "SVM_5_GetThingsRight"; //Òåáå áóäåò íåëåãêî îïðàâäàòüñÿ!
    youdefeatedmewell = "SVM_5_YouDefeatedMeWell"; //Òû çàäàë ìíå õîðîøó òðåïêó, ïàðåíü. Ýòî áûë õîðîøèé áîé, íî ñåé÷àñ îí îêîí÷åí!
    smalltalk01 = "SVM_5_Smalltalk01"; //...åñëè òû äóìàåøü...
    smalltalk02 = "SVM_5_Smalltalk02"; //...ìîæåò áûòü...
    smalltalk03 = "SVM_5_Smalltalk03"; //...ýòî áûëî íå ñëèøêîì óìíî...
    smalltalk04 = "SVM_5_Smalltalk04"; //...ÿ íå õî÷ó â ýòî ââÿçûâàòüñÿ...
    smalltalk05 = "SVM_5_Smalltalk05"; //...ýòî òî÷íî íå ìîÿ ïðîáëåìà...
    smalltalk06 = "SVM_5_Smalltalk06"; //...ïîõîæå, íàçðåâàåò ïðîáëåìà...
    smalltalk07 = "SVM_5_Smalltalk07"; //...äåðæè ýòî ïðè ñåáå, ëþäÿì íåîáÿçàòåëüíî çíàòü îá ýòîì.
    smalltalk08 = "SVM_5_Smalltalk08"; //...áîëüøå ýòîãî íå ñëó÷èòñÿ...
    smalltalk09 = "SVM_5_Smalltalk09"; //...÷òî-òî íå òî â ýòîé èñòîðèè...
    smalltalk10 = "SVM_5_Smalltalk10"; //...òû äîëæåí ñëåäèòü çà òåì, ÷òî ãîâîðèøü ëþäÿì...
    smalltalk11 = "SVM_5_Smalltalk11"; //...ïîêà ìåíÿ íå âïóòàëè...
    smalltalk12 = "SVM_5_Smalltalk12"; //...òû íå äîëæåí âåðèòü âñåìó...
    smalltalk13 = "SVM_5_Smalltalk13"; //...íå õîòåë áû ÿ îêàçàòüñÿ íà åãî ìåñòå...
    smalltalk14 = "SVM_5_Smalltalk14"; //...êàæäûé ðàç îäíà è òà æå èñòîðèÿ...
    smalltalk15 = "SVM_5_Smalltalk15"; //...íåêîòîðûõ ëþäåé íè÷åãî íå ó÷èò...
    smalltalk16 = "SVM_5_Smalltalk16"; //...áûëè âðåìåíà, êîãäà âñå áûëî ñîâñåì ïî-äðóãîìó...
    smalltalk17 = "SVM_5_Smalltalk17"; //...ëþäè âñåãäà áîëòàþò...
    smalltalk18 = "SVM_5_Smalltalk18"; //...ÿ áîëüøå íå ñëóøàþ âñÿêóþ òðåïîòíþ...
    smalltalk19 = "SVM_5_Smalltalk19"; //...âåðèøü êîìó-òî - è â ðåçóëüòàòå ïîïàäàåøü â íåïðèÿòíîñòè, òàê âñåãäà è áûâàåò...
    smalltalk20 = "SVM_5_Smalltalk20"; //...ÿ ñîìíåâàþñü, ÷òî ýòî êîãäà-íèáóäü èçìåíèòñÿ...
    smalltalk21 = "SVM_5_Smalltalk21"; //...ñêîðåå âñåãî, òû ïðàâ...
    smalltalk22 = "SVM_5_Smalltalk22"; //...äåðæèñü. Ëó÷øå íè íà ÷òî íå íàòûêàòüñÿ...
    smalltalk23 = "SVM_5_Smalltalk23"; //...ÿ äóìàë, ýòî âûÿñíèëè åùå î÷åíü äàâíî...
    smalltalk24 = "SVM_5_Smalltalk24"; //...äàâàé ïîãîâîðèì î ÷åì-íèáóäü åùå...
    om = "SVM_5_Om"; //Îììì...
};

instance svm_6(c_svm) {
    stopmagic = "SVM_6_StopMagic"; //Ïåðåñòàíü êîëäîâàòü!
    isaidstopmagic = "SVM_6_ISaidStopMagic"; //Ïðåêðàòè êîëäîâàòü! Íåìåäëåííî!
    weapondown = "SVM_6_WeaponDown"; //Óáåðè ýòî ÷åðòîâî îðóæèå!
    isaidweapondown = "SVM_6_ISaidWeaponDown"; //Èùåøü íåïðèÿòíîñòåé? Íåìåäëåííî óáåðè ýòî!!!
    watchyouraim = "SVM_6_WatchYourAim"; //Îïóñòè îðóæèå, èëè òû ïîæàëååøü!
    watchyouraimangry = "SVM_6_WatchYourAimAngry"; //Ïðîäîëæàé öåëèòüñÿ â ìåíÿ, è ÿ íà÷èùó òåáå ðûëî!
    whatareyoudoing = "SVM_6_WhatAreYouDoing"; //Ýé! Ñìîòðè, ÷òî äåëàåøü!
    letsforgetourlittlefight = "SVM_6_LetsForgetOurLittleFight"; //Ýé, ïàðåíü! Çàáóäåì îá ýòîì, ëàäíî?
    strange = "SVM_6_Strange"; //Âûõîäè! Ïîêàæè ñåáÿ!
    diemonster = "SVM_6_DieMonster"; //ß ïóùó òåáÿ íà ìÿñî, ñâèíüÿ!
    diemortalenemy = "SVM_6_DieMortalEnemy"; //Ïðèøëî âðåìÿ ðàñïëàòû!
    nowwait = "SVM_6_NowWait"; //Òåïåðü òû òî÷íî ïîëó÷èøü...
    youstillnothaveenough = "SVM_6_YouStillNotHaveEnough"; //Ïîõîæå, òû õî÷åøü ïîëó÷èòü â ìîðäó!
    youaskedforit = "SVM_6_YouAskedForIt"; //Íó, òû ñàì íàïðîñèëñÿ!
    nowwaitintruder = "SVM_6_NowWaitIntruder"; //ß ïîðóáëþ òåáÿ íà êóñêè!
    iwillteachyourespectforforeignproperty = "SVM_6_IWillTeachYouRespectForForeignProperty"; //ß ïðåäóïðåäèë òåáÿ. Äîòðîíåøüñÿ äî ìîèõ âåùåé, è áóäåò õóäî!
    dirtythief = "SVM_6_DirtyThief"; //Âîð! ß ïðèêîí÷ó òåáÿ!
    youattackedmycharge = "SVM_6_YouAttackedMyCharge"; //Íèêòî íå ñìååò îáèæàòü ìîèõ äðóçåé!
    youkilledoneofus = "SVM_6_YouKilledOneOfUs"; //Òû óáèë îäíîãî èç ìîèõ ëþäåé. Òåïåðü ÿ óáüþ ÒÅÁß!
    dead = "SVM_6_Dead"; //Àààðãë!
    aargh_1 = "SVM_6_Aargh_1"; //Àààðã!
    aargh_2 = "SVM_6_Aargh_2"; //Àààðã!
    aargh_3 = "SVM_6_Aargh_3"; //Àààðã!
    berzerk = "SVM_6_Berzerk"; //ÓÓÀÀÀÐÐÃÃÃÕÕÕ!!!
    youllbesorryforthis = "SVM_6_YoullBeSorryForThis"; //Òû îá ýòîì ïîæàëååøü!
    yesyes = "SVM_6_YesYes"; //Äà, äà! Áåç ïàíèêè! Òû ïîáåäèë.
    shitwhatamonster = "SVM_6_ShitWhatAMonster"; //×åðò, ÷òî çà òâàðü! Èñ÷åçíè îòñþäà, áûñòðî!
    help = "SVM_6_Help"; //×åðò!
    wewillmeetagain = "SVM_6_WeWillMeetAgain"; //Òû ìåíÿ åùå óçíàåøü!
    nevertrythatagain = "SVM_6_NeverTryThatAgain"; //Åùå îäèí ðàç, è òû ïîæàëååøü îá ýòîì!
    itakeyourweapon = "SVM_6_ITakeYourWeapon"; //Ýòî îðóæèå êàæåòñÿ äîâîëüíî óäîáíûì!
    itookyourore = "SVM_6_ITookYourOre"; //Ñïàñèáî çà ðóäó, ÿ âûïüþ çà òâîå çäîðîâüå!
    shitnoore = "SVM_6_ShitNoOre"; //×åðò, ó íåãî äàæå íåò ðóäû...
    handsoff = "SVM_6_HandsOff"; //Óáåðè ðóêè!
    getoutofhere = "SVM_6_GetOutOfHere"; //Óáèðàéñÿ îòñþäà!
    youviolatedforbiddenterritory = "SVM_6_YouViolatedForbiddenTerritory"; //Ýé! Îòêóäà òû?
    youwannafoolme = "SVM_6_YouWannaFoolMe"; //Äà, òû äóìàåøü, ÿ òóïîé?
    whatsthissupposedtobe = "SVM_6_WhatsThisSupposedToBe"; //Ýé, ÷òî òû çäåñü øëÿåøüñÿ?
    whyareyouinhere = "SVM_6_WhyYouAreInHere"; //Óáèðàéñÿ îòñþäà, èëè ÿ ïîçîâó ñòðàæó!
    whatdidyouinthere = "SVM_6_WhatDidYouInThere"; //×òî òû òàì äåëàåøü?
    wisemove = "SVM_6_WiseMove"; //Âîò ýòî óäà÷à!
    alarm = "SVM_6_Alarm"; //Ñòðàæà! Ñþäà!
    intruderalert = "SVM_6_IntruderAlert"; //ÒÐÅÂÎÃÀ!!! ×ÓÆÎÉ!!!
    behindyou = "SVM_6_BehindYou"; //Ñçàäè!
    theresafight = "SVM_6_TheresAFight"; //À, äðàêà!
    heyheyhey = "SVM_6_HeyHeyHey"; //Ñèëüíåå!
    cheerfight = "SVM_6_CheerFight"; //Òû äåðåøüñÿ êàê áàáà!
    cheerfriend = "SVM_6_CheerFriend"; //Ïðèêîí÷è åãî!
    ooh = "SVM_6_Ooh"; //Äàâàé, äàâàé! Äàé åìó â ìîðäó!
    yeahwelldone = "SVM_6_YeahWellDone"; //Âðåæü åìó! Îí åùå øåâåëèòñÿ!
    runcoward = "SVM_6_RunCoward"; //Âîçâðàùàéñÿ, òðóñ!
    hedefeatedhim = "SVM_6_HeDefeatedHim"; //Õâàòèò ñ íåãî!
    hedeservedit = "SVM_6_HeDeservedIt"; //Ýòî ïîñëóæèò åìó óðîêîì!
    hekilledhim = "SVM_6_HeKilledHim"; //Ãîòîâ! Ýòî îòó÷èò òåáÿ óáèâàòü ëþäåé!
    itwasagoodfight = "SVM_6_ItWasAGoodFight"; //Õà, õà, õà! Íó, òû ïîêàçàë åìó!
    awake = "SVM_6_Awake"; //[çåâîê]
    friendlygreetings = "SVM_6_FriendlyGreetings"; //Ïðèâåò!
    algreetings = "SVM_6_ALGreetings"; //Çà Ãîìåçà!
    magegreetings = "SVM_6_MageGreetings"; //Âî èìÿ ìàãèè!
    sectgreetings = "SVM_6_SectGreetings"; //Ïðîñíèñü!
    thereheis = "SVM_6_ThereHeIs"; //Îí òàì.
    nolearnnopoints = "SVM_6_NoLearnNoPoints"; //ß íå ìîãó ó÷èòü òåáÿ, òû ñëèøêîì íåîïûòåí.
    nolearnovermax = "SVM_6_NoLearnOverMax"; //Òû íà ïðåäåëå ñâîèõ âîçìîæíîñòåé. Òåáå íóæíî íàó÷èòüñÿ ÷åìó-íèáóäü åùå.
    nolearnyoualreadyknow = "SVM_6_NoLearnYouAlreadyKnow"; //Òåáå íóæíî íàáðàòüñÿ îïûòà, ïðåæäå ÷åì òû ñìîæåøü ñòàòü ìàñòåðîì.
    nolearnyourebetter = "SVM_6_NoLearnYoureBetter"; //Óæå ëó÷øå!
    heyyou = "SVM_6_HeyYou"; //Ýé, òû!
    notnow = "SVM_6_NotNow"; //Íå ñåé÷àñ.
    whatdoyouwant = "SVM_6_WhatDoYouWant"; //×òî òåáå íóæíî?
    isaidwhatdoyouwant = "SVM_6_ISaidWhatDoYouWant"; //Íàøåë ÷òî-íèáóäü?
    makeway = "SVM_6_MakeWay"; //Äàé ìíå ïðîéòè!
    outofmyway = "SVM_6_OutOfMyWay"; //Ýé, ïîñòîðîíèñü!
    youdeaforwhat = "SVM_6_YouDeafOrWhat"; //Èñ÷åçíè! Ìíå ÷òî - íóæíî âáèòü ýòî â òâîþ òóïóþ áàøêó?
    lookingfortroubleagain = "SVM_6_LookingForTroubleAgain"; //Ñíîâà èùåøü íåïðèÿòíîñòåé?
    lookaway = "SVM_6_LookAway"; //ß íè÷åãî íå âèäåë! ×åñòíî!
    okaykeepit = "SVM_6_OkayKeepIt"; //Ëàäíî, ëàäíî, îñòàâü ñåáå!
    whatsthat = "SVM_6_WhatsThat"; //×òî ýòî áûëî?
    thatsmyweapon = "SVM_6_ThatsMyWeapon"; //Ýé òû, øóòíèê, ÿ õî÷ó ïîëó÷èòü íàçàä ñâîå îðóæèå!
    giveittome = "SVM_6_GiveItToMe"; //Äàé ñþäà, ïàðåíü!
    youcankeepthecrap = "SVM_6_YouCanKeeptheCrap"; //Íå èìååò çíà÷åíèÿ! Ìíå ýòî áîëüøå âñå ðàâíî íå íóæíî!
    theykilledmyfriend = "SVM_6_TheyKilledMyFriend"; //Óáèëè îäíîãî èç íàøèõ! Åñëè ÿ äîáåðóñü äî ýòîãî íàãëåöà...
    youdisturbedmyslumber = "SVM_6_YouDisturbedMySlumber"; //Ïðîêëÿòüå, çà÷åì òû ðàçáóäèë ìåíÿ?
    suckergotsome = "SVM_6_SuckerGotSome"; //Ïîëó÷èë? Ýòî ïîñëóæèò òåáå óðîêîì!
    suckerdefeatedebr = "SVM_6_SuckerDefeatedEBr"; //Òû óäàðèë Áàðîíà. Êàê æå îí çîë!
    suckerdefeatedgur = "SVM_6_SuckerDefeatedGur"; //Òû óäàðèë Ãóðó. Ïîõîæå, ó òåáÿ òàëàíò íàõîäèòü íåïðèÿòíîñòè!
    suckerdefeatedmage = "SVM_6_SuckerDefeatedMage"; //Ïîáåäèòü ìàãà - äóðàöêàÿ èäåÿ, ïàðåíü!
    suckerdefeatednov_guard = "SVM_6_SuckerDefeatedNov_Guard"; //Íåëüçÿ ïðîñòî òàê áèòü íîâè÷êîâ!
    suckerdefeatedvlk_guard = "SVM_6_SuckerDefeatedVlk_Guard"; //Îñòàâü ìîèõ ëþäåé â ïîêîå!
    youdefeatedmycomrade = "SVM_6_YouDefeatedMyComrade"; //Òû óäàðèë ìîåãî äðóãà...
    youdefeatednov_guard = "SVM_6_YouDefeatedNOV_Guard"; //Âðÿä ëè âñå áóäóò äîëãî òåðïåòü òâîè âûõîäêè!
    youdefeatedvlk_guard = "SVM_6_YouDefeatedVLK_Guard"; //Ïðåæäå ÷åì óäàðèòü òîãî, êòî íàõîäèòñÿ ïîä ìîåé çàùèòîé, ïîäóìàé î ïîñëåäñòâèÿõ!
    youstolefromme = "SVM_6_YouStoleFromMe"; //Òû ïûòàëñÿ îáîêðàñòü ìåíÿ, óáëþäîê! Áîëüøå íå ïîïàäàéñÿ ìíå íà ãëàçà!
    youstolefromus = "SVM_6_YouStoleFromUs"; //Ìû õîòèì ïîëó÷èòü íàçàä ñâîè âåùè! Äàé èõ ìíå!
    youstolefromebr = "SVM_6_YouStoleFromEBr"; //Òû îáîêðàë Áàðîíîâ! Êàêîãî ÷åðòà òåáå ýòî ïîíàäîáèëîñü?
    youstolefromgur = "SVM_6_YouStoleFromGur"; //Âîðóåøü ó Ãóðó? Æàëü, íî òåáÿ ðàñêðûëè.
    stolefrommage = "SVM_6_StoleFromMage"; //Òû îáîêðàë ìàãîâ! Ïàðøèâàÿ èäåÿ, ïîâåðü!
    youkilledmyfriend = "SVM_6_YouKilledMyFriend"; //Æèçíü îäíîãî èç íàøèõ ëþäåé íà òâîåé ñîâåñòè. Åùå îäíà îøèáêà, è íàñòàíåò òâîÿ î÷åðåäü!
    youkilledebr = "SVM_6_YouKilledEBr"; //Òû óáèë Áàðîíà! Ïàðåíü, òû îêîí÷àòåëüíî ñïÿòèë?!
    youkilledgur = "SVM_6_YouKilledGur"; //Òû óáèë Ãóðó! ß ãëàçàì ñâîèì íå âåðþ!
    youkilledmage = "SVM_6_YouKilledMage"; //Òû óáèë ìàãà! Êàê òû ñîáèðàåøüñÿ îáúÿñíèòü ýòî?
    youkilledocfolk = "SVM_6_YouKilledOCfolk"; //Óáèò ÷åëîâåê èç Ñòàðîãî Ëàãåðÿ, è êîå-êòî ñâÿçûâàåò òåáÿ ñ ýòèì óáèéñòâîì...
    youkilledncfolk = "SVM_6_YouKilledNCfolk"; //Íîâûé Ëàãåðü ïîíåñ òÿæåëóþ óòðàòó, è, ïîõîæå, òû ïðè÷àñòåí ê ýòîìó!
    youkilledpsifolk = "SVM_6_YouKilledPSIfolk"; //Áðàòñòâî ïîòåðÿëî îäíîãî èç ñâîèõ ÷ëåíîâ, è ýòà æèçíü íà òâîåé ñîâåñòè!
    getthingsright = "SVM_6_GetThingsRight"; //Òåáå íåëåãêî áóäåò îïðàâäàòüñÿ!
    youdefeatedmewell = "SVM_6_YouDefeatedMeWell"; //Òû çàäàë ìíå õîðîøó òðåïêó, ïàðåíü. Ýòî áûë õîðîøèé áîé, íî ñåé÷àñ îí îêîí÷åí!
    smalltalk01 = "SVM_6_Smalltalk01"; //...åñëè òû äóìàåøü...
    smalltalk02 = "SVM_6_Smalltalk02"; //...ìîæåò áûòü...
    smalltalk03 = "SVM_6_Smalltalk03"; //...ýòî áûëî íå ñëèøêîì óìíî...
    smalltalk04 = "SVM_6_Smalltalk04"; //...ÿ íå õî÷ó â ýòî ââÿçûâàòüñÿ...
    smalltalk05 = "SVM_6_Smalltalk05"; //...ýòî òî÷íî íå ìîÿ ïðîáëåìà...
    smalltalk06 = "SVM_6_Smalltalk06"; //...ïîõîæå, íàçðåâàåò ïðîáëåìà...
    smalltalk07 = "SVM_6_Smalltalk07"; //...äåðæè ýòî ïðè ñåáå, ëþäÿì íåîáÿçàòåëüíî çíàòü îá ýòîì.
    smalltalk08 = "SVM_6_Smalltalk08"; //...áîëüøå ýòîãî íå ñëó÷èòñÿ...
    smalltalk09 = "SVM_6_Smalltalk09"; //...÷òî-òî íå òî â ýòîé èñòîðèè...
    smalltalk10 = "SVM_6_Smalltalk10"; //...òû äîëæåí ñëåäèòü çà òåì, ÷òî ãîâîðèøü ëþäÿì...
    smalltalk11 = "SVM_6_Smalltalk11"; //...ïîêà ìåíÿ íå âïóòàëè...
    smalltalk12 = "SVM_6_Smalltalk12"; //...òû íå äîëæåí âåðèòü âñåìó...
    smalltalk13 = "SVM_6_Smalltalk13"; //...íå õîòåë áû ÿ îêàçàòüñÿ íà åãî ìåñòå...
    smalltalk14 = "SVM_6_Smalltalk14"; //...êàæäûé ðàç îäíà è òà æå èñòîðèÿ...
    smalltalk15 = "SVM_6_Smalltalk15"; //...íåêîòîðûõ ëþäåé íè÷åãî íå ó÷èò...
    smalltalk16 = "SVM_6_Smalltalk16"; //...áûëè âðåìåíà, êîãäà âñå áûëî ñîâñåì ïî-äðóãîìó...
    smalltalk17 = "SVM_6_Smalltalk17"; //...ëþäè âñåãäà áîëòàþò...
    smalltalk18 = "SVM_6_Smalltalk18"; //...ÿ áîëüøå íå ñëóøàþ âñÿêóþ òðåïîòíþ...
    smalltalk19 = "SVM_6_Smalltalk19"; //...âåðèøü êîìó-òî - è â ðåçóëüòàòå ïîïàäàåøü â íåïðèÿòíîñòè, òàê âñåãäà è áûâàåò...
    smalltalk20 = "SVM_6_Smalltalk20"; //...ÿ ñîìíåâàþñü, ÷òî ýòî êîãäà-íèáóäü èçìåíèòñÿ...
    smalltalk21 = "SVM_6_Smalltalk21"; //...ñêîðåå âñåãî, òû ïðàâ...
    smalltalk22 = "SVM_6_Smalltalk22"; //...äåðæèñü. Ëó÷øå íè íà ÷òî íå íàòûêàòüñÿ...
    smalltalk23 = "SVM_6_Smalltalk23"; //...ÿ äóìàë, ýòî âûÿñíèëè åùå î÷åíü äàâíî...
    smalltalk24 = "SVM_6_Smalltalk24"; //...äàâàé ïîãîâîðèì î ÷åì-íèáóäü åùå...
    om = "SVM_6_Om"; //Îììì...
};

instance svm_7(c_svm) {
    stopmagic = "SVM_7_StopMagic"; //Ïåðåñòàíü! Ïåðåñòàíü!
    isaidstopmagic = "SVM_7_ISaidStopMagic"; //Ïåðåñòàíü êîëäîâàòü, ïåðåñòàíü!
    weapondown = "SVM_7_WeaponDown"; //Óáåðè îðóæèå, óáåðè!
    isaidweapondown = "SVM_7_ISaidWeaponDown"; //ß ñåðüåçíî! Óáåðè åãî!
    watchyouraim = "SVM_7_WatchYourAim"; //Òû öåëèøüñÿ â ìåíÿ? Ñìîòðè, ÷òî äåëàåøü!
    watchyouraimangry = "SVM_7_WatchYourAimAngry"; //Äóìàåøü, ìîæíî óãðîæàòü ìíå? Ïîäóìàé ñíîâà!
    whatareyoudoing = "SVM_7_WhatAreYouDoing"; //ß çàïîìíþ ýòî! Ñìîòðè, ÷òî äåëàåøü!
    letsforgetourlittlefight = "SVM_7_LetsForgetOurLittleFight"; //Çàáóäåì îá ýòîì, ëàäíî?
    strange = "SVM_7_Strange"; //Êóäà îí äåëñÿ? Ýòîãî íå ìîæåò áûòü! Ýòî íåâîçìîæíî!
    diemonster = "SVM_7_DieMonster"; //ß óíè÷òîæó òåáÿ, ìîíñòð!
    diemortalenemy = "SVM_7_DieMortalEnemy"; //ß ðàçðóáëþ òåáÿ íà ÷àñòè! Ïðèøåë òâîé ÷åðåä! Íèêàêîé ïîùàäû!
    nowwait = "SVM_7_NowWait"; //Íàêîíåö-òî òû äàë ìíå ïîâîä!
    youstillnothaveenough = "SVM_7_YouStillNotHaveEnough"; //Òû âåäü íå õî÷åøü ïîâòîðèòü ýòî, ïðàâäà?
    youaskedforit = "SVM_7_YouAskedForIt"; //Êðîâü! Òâîÿ êðîâü!!!
    nowwaitintruder = "SVM_7_NowWaitIntruder"; //ß ïîðåæó òåáÿ íà òàêèå òîíåíüêèå ïîëîñêè...
    iwillteachyourespectforforeignproperty = "SVM_7_IWillTeachYouRespectForForeignProperty"; //Çà ýòî ñëåäîâàëî áû îòðóáèòü òåáå ðóêè!
    dirtythief = "SVM_7_DirtyThief"; //Ãðÿçíûé âîð! ×òîá òåáå ïóñòî áûëî!
    youattackedmycharge = "SVM_7_YouAttackedMyCharge"; //Íèêîìó, êðîìå ìåíÿ, íå ïîçâîëåíî çàòåâàòü çäåñü äðàêó!
    youkilledoneofus = "SVM_7_YouKilledOneOfUs"; //Òû óáèë îäíîãî èç íàøèõ!
    dead = "SVM_7_Dead"; //Àààðãë!
    aargh_1 = "SVM_7_Aargh_1"; //Àààðã!
    aargh_2 = "SVM_7_Aargh_2"; //Àààðã!
    aargh_3 = "SVM_7_Aargh_3"; //Àààðã!
    berzerk = "SVM_7_Berzerk"; //ÓÓÀÀÀÐÐÃÃÃÕÕÕ!!!
    youllbesorryforthis = "SVM_7_YoullBeSorryForThis"; //Ó òåáÿ äàæå íå áóäåò âðåìåíè ïîæàëåòü îá ýòîì!
    yesyes = "SVM_7_YesYes"; //Ëàäíî, ëàäíî!
    shitwhatamonster = "SVM_7_ShitWhatAMonster"; //Ó ìåíÿ íåò ïîäõîäÿùåãî îðóæèÿ. Ìû åùå âñòðåòèìñÿ...
    help = "SVM_7_Help"; //×åðò!
    wewillmeetagain = "SVM_7_WeWillMeetAgain"; //Ìû åùå âñòðåòèìñÿ!
    nevertrythatagain = "SVM_7_NeverTryThatAgain"; //Áîëüøå íå äåëàé ýòîãî!
    itakeyourweapon = "SVM_7_ITakeYourWeapon"; //Ýòî îðóæèå ÿ îñòàâëþ ñåáå!
    itookyourore = "SVM_7_ITookYourOre"; //Êîíå÷íî, ÿ ïðåäïî÷åë áû óáèòü òåáÿ, íî ðóäà - ýòî òîæå íåïëîõî!
    shitnoore = "SVM_7_ShitNoOre"; //Íåò ðóäû? Òû æàëêèé, áåñïîëåçíûé óáëþäîê!
    handsoff = "SVM_7_HandsOff"; //Äåðæè ñâîè ðóêè ïîäàëüøå!
    getoutofhere = "SVM_7_GetOutOfHere"; //Ïðîâàëèâàé! Óáèðàéñÿ îòñþäà!
    youviolatedforbiddenterritory = "SVM_7_YouViolatedForbiddenTerritory"; //Êàê òû ñþäà ïîïàë?
    youwannafoolme = "SVM_7_YouWannaFoolMe"; //Òåáå ïîíðàâèëîñü, äà?
    whatsthissupposedtobe = "SVM_7_WhatsThisSupposedToBe"; //Ýé, òû! ×òî òû çäåñü øëÿåøüñÿ?
    whyareyouinhere = "SVM_7_WhyYouAreInHere"; //Èñ÷åçíè, èëè ÿ ïîçîâó ñòðàæó!
    whatdidyouinthere = "SVM_7_WhatDidYouInThere"; //Òåáå çäåñü íå÷åãî äåëàòü!
    wisemove = "SVM_7_WiseMove"; //Òåáå ïîâåçëî! Íî ÿ áû ñ óäîâîëüñòâèåì íàáèë òåáå ìîðäó!
    alarm = "SVM_7_Alarm"; //Ñòðàæà, ñþäà!
    intruderalert = "SVM_7_IntruderAlert"; //ÒÐÅÂÎÃÀ!!!
    behindyou = "SVM_7_BehindYou"; //Ñçàäè!
    theresafight = "SVM_7_TheresAFight"; //Äðàêà!
    heyheyhey = "SVM_7_HeyHeyHey"; //Ñèëüíåå!
    cheerfight = "SVM_7_CheerFight"; //ß õî÷ó óâèäåòü òâîþ êðîâü!
    cheerfriend = "SVM_7_CheerFriend"; //Äàâàé æå!
    ooh = "SVM_7_Ooh"; //Áåé â îòâåò, èäèîò!
    yeahwelldone = "SVM_7_YeahWellDone"; //Äàààà!
    runcoward = "SVM_7_RunCoward"; //Áåãè íàçàä ê ìàìî÷êå!
    hedefeatedhim = "SVM_7_HeDefeatedHim"; //Õâàòèò ñ íåãî!
    hedeservedit = "SVM_7_HeDeservedIt"; //Ýòî òâîÿ âèíà!
    hekilledhim = "SVM_7_HeKilledHim"; //Óáèòü êîãî-íèáóäü íà ãëàçàõ ó ñâèäåòåëåé - áîëüøåé ãëóïîñòè íåëüçÿ è ïðèäóìàòü.
    itwasagoodfight = "SVM_7_ItWasAGoodFight"; //Õîðîøèé áîé!
    awake = "SVM_7_Awake"; //Ñíîâà ïîðà âñòàâàòü!
    friendlygreetings = "SVM_7_FriendlyGreetings"; //Ïðèâåò!
    algreetings = "SVM_7_ALGreetings"; //Çà Ãîìåçà!
    magegreetings = "SVM_7_MageGreetings"; //Âî èìÿ ìàãèè!
    sectgreetings = "SVM_7_SectGreetings"; //Ïðîñíèñü!
    thereheis = "SVM_7_ThereHeIs"; //Òû ÷òî - îñëåï? Ñþäà!
    nolearnnopoints = "SVM_7_NoLearnNoPoints"; //ß íå ìîãó ó÷èòü òåáÿ. Òåáå íåõâàòàåò îïûòà.
    nolearnovermax = "SVM_7_NoLearnOverMax"; //Òû íà ïðåäåëå ñâîèõ âîçìîæíîñòåé. Òåáå íóæíî íàó÷èòüñÿ ÷åìó-íèáóäü åùå.
    nolearnyoualreadyknow = "SVM_7_NoLearnYouAlreadyKnow"; //Òåáå íóæíî íàáðàòüñÿ îïûòà, ïðåæäå ÷åì òû ñìîæåøü ñòàòü ìàñòåðîì.
    nolearnyourebetter = "SVM_7_NoLearnYoureBetter"; //Óæå ëó÷øå!
    heyyou = "SVM_7_HeyYou"; //Ýé, òû!
    notnow = "SVM_7_NotNow"; //Íå ñåé÷àñ.
    whatdoyouwant = "SVM_7_WhatDoYouWant"; //×åãî òû îò ìåíÿ õî÷åøü?
    isaidwhatdoyouwant = "SVM_7_ISaidWhatDoYouWant"; //Ìîãó ëè ÿ ÷òî-íèáóäü äëÿ òåáÿ ñäåëàòü?
    makeway = "SVM_7_MakeWay"; //Äàé ìíå ïðîéòè.
    outofmyway = "SVM_7_OutOfMyWay"; //Ñ äîðîãè!
    youdeaforwhat = "SVM_7_YouDeafOrWhat"; //Èùåøü íåïðèÿòíîñòåé? Óáèðàéñÿ îòñþäà!
    lookingfortroubleagain = "SVM_7_LookingForTroubleAgain"; //Ñíîâà èùåøü íåïðèÿòíîñòåé?
    lookaway = "SVM_7_LookAway"; //ß ÍÈ×ÅÃÎ íå âèäåë...
    okaykeepit = "SVM_7_OkayKeepIt"; //Ëàäíî, ëàäíî! Çàáèðàé ýòî!
    whatsthat = "SVM_7_WhatsThat"; //×òî ýòî áûëî?
    thatsmyweapon = "SVM_7_ThatsMyWeapon"; //Îòäàé ìíå ìîå îðóæèå!
    giveittome = "SVM_7_GiveItToMe"; //Îòäàé!
    youcankeepthecrap = "SVM_7_YouCanKeeptheCrap"; //Ëàäíî! Îñòàâü ñåáå! ß ÷òî-íèáóäü ïðèäóìàþ!
    theykilledmyfriend = "SVM_7_TheyKilledMyFriend"; //Óáèëè îäíîãî èç íàøèõ! Ìû äîëæíû îòîìñòèòü!
    youdisturbedmyslumber = "SVM_7_YouDisturbedMySlumber"; //Çà÷åì òû ìåíÿ ðàçáóäèë?
    suckergotsome = "SVM_7_SuckerGotSome"; //Ýòà òðåïêà ïîñëóæèò òåáå óðîêîì!
    suckerdefeatedebr = "SVM_7_SuckerDefeatedEBr"; //Òû óäàðèë Áàðîíà. Îí òàê çîë íà òåáÿ!
    suckerdefeatedgur = "SVM_7_SuckerDefeatedGur"; //Òû óäàðèë Ãóðó! Ïîõîæå, ó òåáÿ òàëàíò íàõîäèòü íåïðèÿòíîñòè!
    suckerdefeatedmage = "SVM_7_SuckerDefeatedMage"; //Ïîáåäèòü ìàãà - ÷òî çà äóðàöêàÿ èäåÿ!
    suckerdefeatednov_guard = "SVM_7_SuckerDefeatedNov_Guard"; //Çíà÷èò, òû è åñòü òîò ïàðåíü, êîòîðûé îáèæàåò íîâè÷êîâ?
    suckerdefeatedvlk_guard = "SVM_7_SuckerDefeatedVlk_Guard"; //Îñòàâü ìîèõ ëþäåé â ïîêîå!
    youdefeatedmycomrade = "SVM_7_YouDefeatedMyComrade"; //Íå íà òîãî íàïàë, ïðèÿòåëü! Çäåñü ìû äåðæèìñÿ äðóã äðóãà!
    youdefeatednov_guard = "SVM_7_YouDefeatedNOV_Guard"; //Âðÿä ëè âñå áóäóò äîëãî òåðïåòü òâîè âûõîäêè!
    youdefeatedvlk_guard = "SVM_7_YouDefeatedVLK_Guard"; //Ïðåæäå ÷åì óäàðèòü òîãî, êòî íàõîäèòñÿ ïîä ìîåé çàùèòîé, ïîäóìàé î ïîñëåäñòâèÿõ!
    youstolefromme = "SVM_7_YouStoleFromMe"; //Òû, çàäíèöà, âîðóåøü ó ìåíÿ?! Áîëüøå íå âîçâðàùàéñÿ!
    youstolefromus = "SVM_7_YouStoleFromUs"; //Ìû õîòèì ïîëó÷èòü íàçàä ñâîè âåùè! Îòäàâàé èõ!
    youstolefromebr = "SVM_7_YouStoleFromEBr"; //Òû îáîêðàë Áàðîíîâ! Êàêîãî ÷åðòà òåáå ýòî ïîíàäîáèëîñü?!
    youstolefromgur = "SVM_7_YouStoleFromGur"; //Âîðóåøü ó Ãóðó? Æàëü, íî òåáÿ ðàñêðûëè.
    stolefrommage = "SVM_7_StoleFromMage"; //Òû îáîêðàë ìàãîâ! ×òî çà äóðàöêàÿ èäåÿ!
    youkilledmyfriend = "SVM_7_YouKilledMyFriend"; //Æèçíü îäíîãî èç íàøèõ ëþäåé íà òâîåé ñîâåñòè. Åùå îäíà îøèáêà, è íàñòàíåò òâîÿ î÷åðåäü!
    youkilledebr = "SVM_7_YouKilledEBr"; //Òû óáèë Áàðîíà! Ïàðåíü, òû îêîí÷àòåëüíî ñïÿòèë?!
    youkilledgur = "SVM_7_YouKilledGur"; //Òû óáèë Ãóðó! ß ãëàçàì ñâîèì íå âåðþ!
    youkilledmage = "SVM_7_YouKilledMage"; //Òû óáèë ìàãà! Êàê òû ñîáèðàåøüñÿ îáúÿñíèòü ýòî?
    youkilledocfolk = "SVM_7_YouKilledOCfolk"; //Óáèò ÷åëîâåê èç Ñòàðîãî Ëàãåðÿ, è êîå-êòî ñâÿçûâàåò òåáÿ ñ ýòèì óáèéñòâîì...
    youkilledncfolk = "SVM_7_YouKilledNCfolk"; //Íîâûé Ëàãåðü ïîíåñ òÿæåëóþ óòðàòó, è, ïîõîæå, òû ïðè÷àñòåí ê ýòîìó!
    youkilledpsifolk = "SVM_7_YouKilledPSIfolk"; //Áðàòñòâî ïîòåðÿëî îäíîãî èç ñâîèõ ÷ëåíîâ, è ýòà æèçíü íà òâîåé ñîâåñòè!
    getthingsright = "SVM_7_GetThingsRight"; //Òåáå áóäåò íåëåãêî îïðàâäàòüñÿ!
    youdefeatedmewell = "SVM_7_YouDefeatedMeWell"; //Òû çàäàë ìíå õîðîøó òðåïêó, ïàðåíü. Ýòî áûë õîðîøèé áîé, íî ñåé÷àñ îí îêîí÷åí!
    smalltalk01 = "SVM_7_Smalltalk01"; //...åñëè òû äóìàåøü...
    smalltalk02 = "SVM_7_Smalltalk02"; //...ìîæåò áûòü...
    smalltalk03 = "SVM_7_Smalltalk03"; //...ýòî áûëî íå ñëèøêîì óìíî...
    smalltalk04 = "SVM_7_Smalltalk04"; //...ÿ íå õî÷ó â ýòî ââÿçûâàòüñÿ...
    smalltalk05 = "SVM_7_Smalltalk05"; //...ýòî òî÷íî íå ìîÿ ïðîáëåìà...
    smalltalk06 = "SVM_7_Smalltalk06"; //...ïîõîæå, íàçðåâàåò ïðîáëåìà...
    smalltalk07 = "SVM_7_Smalltalk07"; //...äåðæè ýòî ïðè ñåáå, ëþäÿì íåîáÿçàòåëüíî çíàòü îá ýòîì.
    smalltalk08 = "SVM_7_Smalltalk08"; //...áîëüøå ýòîãî íå ñëó÷èòñÿ...
    smalltalk09 = "SVM_7_Smalltalk09"; //...÷òî-òî íå òî â ýòîé èñòîðèè...
    smalltalk10 = "SVM_7_Smalltalk10"; //...òû äîëæåí ñëåäèòü çà òåì, ÷òî ãîâîðèøü ëþäÿì...
    smalltalk11 = "SVM_7_Smalltalk11"; //...ïîêà ìåíÿ íå âïóòàëè...
    smalltalk12 = "SVM_7_Smalltalk12"; //...òû íå äîëæåí âåðèòü âñåìó...
    smalltalk13 = "SVM_7_Smalltalk13"; //...íå õîòåë áû ÿ îêàçàòüñÿ íà åãî ìåñòå...
    smalltalk14 = "SVM_7_Smalltalk14"; //...êàæäûé ðàç îäíà è òà æå èñòîðèÿ...
    smalltalk15 = "SVM_7_Smalltalk15"; //...íåêîòîðûõ ëþäåé íè÷åãî íå ó÷èò...
    smalltalk16 = "SVM_7_Smalltalk16"; //...áûëè âðåìåíà, êîãäà âñå áûëî ñîâñåì ïî-äðóãîìó...
    smalltalk17 = "SVM_7_Smalltalk17"; //...ëþäè âñåãäà áîëòàþò...
    smalltalk18 = "SVM_7_Smalltalk18"; //...ÿ áîëüøå íå ñëóøàþ âñÿêóþ òðåïîòíþ...
    smalltalk19 = "SVM_7_Smalltalk19"; //...âåðèøü êîìó-òî - è â ðåçóëüòàòå ïîïàäàåøü â íåïðèÿòíîñòè, òàê âñåãäà è áûâàåò...
    smalltalk20 = "SVM_7_Smalltalk20"; //...ÿ ñîìíåâàþñü, ÷òî ýòî êîãäà-íèáóäü èçìåíèòñÿ...
    smalltalk21 = "SVM_7_Smalltalk21"; //...ñêîðåå âñåãî, òû ïðàâ...
    smalltalk22 = "SVM_7_Smalltalk22"; //...äåðæèñü. Ëó÷øå íè íà ÷òî íå íàòûêàòüñÿ...
    smalltalk23 = "SVM_7_Smalltalk23"; //...ÿ äóìàë, ýòî âûÿñíèëè åùå î÷åíü äàâíî...
    smalltalk24 = "SVM_7_Smalltalk24"; //...äàâàé ïîãîâîðèì î ÷åì-íèáóäü åùå...
    om = "SVM_7_Om"; //Îììì...
};

instance svm_8(c_svm) {
    stopmagic = "SVM_8_StopMagic"; //Íå ñìåé çäåñü êîëäîâàòü!
    isaidstopmagic = "SVM_8_ISaidStopMagic"; //Ïåðåñòàíü, ÿ ñêàçàë! Íåìåäëåííî!
    weapondown = "SVM_8_WeaponDown"; //Óáåðè îðóæèå!
    isaidweapondown = "SVM_8_ISaidWeaponDown"; //Óáåðè ýòó øòóêîâèíó èëè ó òåáÿ áóäóò ïðîáëåìû!
    watchyouraim = "SVM_8_WatchYourAim"; //Óáåðè îðóæèå, èäèîò!
    watchyouraimangry = "SVM_8_WatchYourAimAngry"; //×åðâÿê, êàê òû ïîñìåë öåëèòüñÿ â ìåíÿ?
    whatareyoudoing = "SVM_8_WhatAreYouDoing"; //Ñìîòðè, ÷òî äåëàåøü!
    letsforgetourlittlefight = "SVM_8_LetsForgetOurLittleFight"; //Çàáóäåì îá ýòîì, ëàäíî?
    strange = "SVM_8_Strange"; //Âûõîäè! ß çíàþ, ÷òî òû ìåíÿ ñëûøèøü!
    diemonster = "SVM_8_DieMonster"; //Ïðîêëÿòûå òâàðè!
    diemortalenemy = "SVM_8_DieMortalEnemy"; //Òåïåðü òû óìðåøü. Íå ïðèíèìàé áëèçêî ê ñåðäöó!
    nowwait = "SVM_8_NowWait"; //×åðâÿê, òû íàïàë íà ÌÅÍß! Ïîäîæäè-êà...
    youstillnothaveenough = "SVM_8_YouStillNotHaveEnough"; //Ðàçâå ÿ åùå íå âûòèðàë òîáîé ïûëü? Ïðèäåòñÿ ïîâòîðèòü...
    youaskedforit = "SVM_8_YouAskedForIt"; //Åñëè íå õî÷åøü ñëóøàòü, ïðèäåòñÿ îáúÿñíèòü ïî-äðóãîìó!
    nowwaitintruder = "SVM_8_NowWaitIntruder"; //Êàêà òû ïîñìåë ïîÿâèòüñÿ ÇÄÅÑÜ? Ïîäîæäè-êà...
    iwillteachyourespectforforeignproperty = "SVM_8_IWillTeachYouRespectForForeignProperty"; //Ïîõîæå, ñòîèò ïåðåëîìàòü òåáå ïàëüöû!
    dirtythief = "SVM_8_DirtyThief"; //Òåáå íå ñòîèëî êðàñòü ýòî!
    youattackedmycharge = "SVM_8_YouAttackedMyCharge"; //Âñå, êòî îáèæàë ìîèõ äðóçåé, ïîòîì ñèëüíî ðàñêàèâàëèñü â ýòîì!
    youkilledoneofus = "SVM_8_YouKilledOneOfUs"; //Òû óáèë îäíîãî èç íàøèõ. Ýòî áûëà òâîÿ ïîñëåäíÿÿ îøèáêà!
    dead = "SVM_8_Dead"; //Àààðãë!
    aargh_1 = "SVM_8_Aargh_1"; //Àààðã!
    aargh_2 = "SVM_8_Aargh_2"; //Àààðã!
    aargh_3 = "SVM_8_Aargh_3"; //Àààðã!
    berzerk = "SVM_8_Berzerk"; //ÓÓÀÀÀÐÐÃÃÃÕÕÕ!!!
    youllbesorryforthis = "SVM_8_YoullBeSorryForThis"; //Òû îá ýòîì ïîæàëååøü!
    yesyes = "SVM_8_YesYes"; //Ñïîêîéíî. Âñå íîðìàëüíî!
    shitwhatamonster = "SVM_8_ShitWhatAMonster"; //ß ëó÷øå ïîãëÿæó íà ýòó òâàðü èçäàëè!
    help = "SVM_8_Help"; //Áûñòðî, óõîäèì!
    wewillmeetagain = "SVM_8_WeWillMeetAgain"; //Ìû åùå âñòðåòèìñÿ!
    nevertrythatagain = "SVM_8_NeverTryThatAgain"; //Åùå îäèí ðàç, è òû ïîêîéíèê!
    itakeyourweapon = "SVM_8_ITakeYourWeapon"; //Ìíå íðàâèòñÿ ýòî îðóæèå!
    itookyourore = "SVM_8_ITookYourOre"; //Ïîõîæå, òû åùå íå çàïëàòèë ìíå ïîøëèíó!
    shitnoore = "SVM_8_ShitNoOre"; //Ðàçóìååòñÿ, ó òàêîãî íåóäà÷íèêà ïðîñòî íå ìîæåò áûòü ðóäû!
    handsoff = "SVM_8_HandsOff"; //Óáåðè ðóêè!
    getoutofhere = "SVM_8_GetOutOfHere"; //Óáèðàéñÿ îòñþäà!
    youviolatedforbiddenterritory = "SVM_8_YouViolatedForbiddenTerritory"; //Ýé, êàê ÒÛ ñþäà ïîïàë?
    youwannafoolme = "SVM_8_YouWannaFoolMe"; //Òû äåéñòâèòåëüíî óìíàÿ çàäíèöà, äà?
    whatsthissupposedtobe = "SVM_8_WhatsThisSupposedToBe"; //Ýé, òû! ×òî òû çäåñü øëÿåøüñÿ?
    whyareyouinhere = "SVM_8_WhyYouAreInHere"; //Óáèðàéñÿ îòñþäà èëè ÿ ïîçîâó ñòðàæó!
    whatdidyouinthere = "SVM_8_WhatDidYouInThere"; //×òî òû òàì äåëàåøü?
    wisemove = "SVM_8_WiseMove"; //Òåáå åùå ïîâåçëî.
    alarm = "SVM_8_Alarm"; //Ñòðàæà! Ñþäà!
    intruderalert = "SVM_8_IntruderAlert"; //ÒÐÅÂÎÃÀ!!! ×ÓÆÎÉ!!!
    behindyou = "SVM_8_BehindYou"; //Ñçàäè!
    theresafight = "SVM_8_TheresAFight"; //Ïîñìîòðèì, êòî òàì äåðåòñÿ!
    heyheyhey = "SVM_8_HeyHeyHey"; //Ñèëüíåå!
    cheerfight = "SVM_8_CheerFight"; //Äà! Äàâàé, äàâàé!
    cheerfriend = "SVM_8_CheerFriend"; //Õîðîøî! Íå ðàññëàáëÿéñÿ!
    ooh = "SVM_8_Ooh"; //Íå îñòàíàâëèâàéñÿ! Äàé åìó â ìîðäó!
    yeahwelldone = "SVM_8_YeahWellDone"; //Äà, âðåæü åìó! Îí åùå øåâåëèòñÿ!
    runcoward = "SVM_8_RunCoward"; //Áîëüøå íå ïîÿâëÿéñÿ çäåñü!
    hedefeatedhim = "SVM_8_HeDefeatedHim"; //Ñêó÷íûé áîé!
    hedeservedit = "SVM_8_HeDeservedIt"; //Ýòî ïîñëóæèò åìó óðîêîì!
    hekilledhim = "SVM_8_HeKilledHim"; //Â ýòîì íå áûëî íåîáõîäèìîñòè. Ïîäóìàé î ïîñëåäñòâèÿõ.
    itwasagoodfight = "SVM_8_ItWasAGoodFight"; //Ýòî áûë õîðîøèé áîé!
    awake = "SVM_8_Awake"; //[çåâîê]
    friendlygreetings = "SVM_8_FriendlyGreetings"; //Ïðèâåò!
    algreetings = "SVM_8_ALGreetings"; //Çà Ãîìåçà!
    magegreetings = "SVM_8_MageGreetings"; //Âî èìÿ ìàãèè!
    sectgreetings = "SVM_8_SectGreetings"; //Ïðîñíèñü!
    thereheis = "SVM_8_ThereHeIs"; //Îí òàì.
    nolearnnopoints = "SVM_8_NoLearnNoPoints"; //ß íå ìîãó ó÷èòü òåáÿ, òû ñëèøêîì íåîïûòåí.
    nolearnovermax = "SVM_8_NoLearnOverMax"; //Òû íà ïðåäåëå ñâîèõ âîçìîæíîñòåé. Òåáå íóæíî íàó÷èòüñÿ ÷åìó-íèáóäü åùå.
    nolearnyoualreadyknow = "SVM_8_NoLearnYouAlreadyKnow"; //Òåáå íóæíî íàáðàòüñÿ îïûòà, ïðåæäå ÷åì òû ñìîæåøü ñòàòü ìàñòåðîì.
    nolearnyourebetter = "SVM_8_NoLearnYoureBetter"; //Óæå ëó÷øå!
    heyyou = "SVM_8_HeyYou"; //Ýé, òû!
    notnow = "SVM_8_NotNow"; //Íå ñåé÷àñ.
    whatdoyouwant = "SVM_8_WhatDoYouWant"; //Òåáå ïîìî÷ü?
    isaidwhatdoyouwant = "SVM_8_ISaidWhatDoYouWant"; //×òî ÿ ìîãó äëÿ òåáÿ ñäåëàòü?
    makeway = "SVM_8_MakeWay"; //Ìîæíî ïðîéòè?
    outofmyway = "SVM_8_OutOfMyWay"; //Â ñòîðîíó!
    youdeaforwhat = "SVM_8_YouDeafOrWhat"; //ß ÷òî - äîëæåí âáèòü ýòî â òâîþ òóïóþ áàøêó? Óáèðàéñÿ îòñþäà!
    lookingfortroubleagain = "SVM_8_LookingForTroubleAgain"; //Ñíîâà èùåøü íåïðèÿòíîñòåé?
    lookaway = "SVM_8_LookAway"; //À-õì... Õîðîøèé âèä!
    okaykeepit = "SVM_8_OkayKeepIt"; //Ëàäíî! Òåïåðü ýòî òâîå.
    whatsthat = "SVM_8_WhatsThat"; //Ýé? ×òî ýòî áûëî?
    thatsmyweapon = "SVM_8_ThatsMyWeapon"; //Ó òåáÿ ìîå îðóæèå..?
    giveittome = "SVM_8_GiveItToMe"; //Îòäàé! Íåìåäëåííî!
    youcankeepthecrap = "SVM_8_YouCanKeeptheCrap"; //Îñòàâü ñåáå, ìíå ýòî âñå ðàâíî íå íóæíî.
    theykilledmyfriend = "SVM_8_TheyKilledMyFriend"; //Óáèëè îäíîãî èç íàøèõ. Åñëè ÿ äîáåðóñü äî ýòîãî íàãëåöà...
    youdisturbedmyslumber = "SVM_8_YouDisturbedMySlumber"; //×òî ñëó÷èëîñü?
    suckergotsome = "SVM_8_SuckerGotSome"; //À? Ïîëó÷èë â ìîðäó? Ýòî ïîñëóæèò òåáå óðîêîì!
    suckerdefeatedebr = "SVM_8_SuckerDefeatedEBr"; //Òû óäàðèë Áàðîíà. Ýòî åãî âïå÷àòëèëî, äà åùå êàê!
    suckerdefeatedgur = "SVM_8_SuckerDefeatedGur"; //Òû ïîáåäèë îäíîãî èç Ãóðó! Âïå÷àòëÿåò. Íî äàæå íå ïûòàéñÿ ñäåëàòü ýòî åùå ðàç.
    suckerdefeatedmage = "SVM_8_SuckerDefeatedMage"; //Ïîáåäèòü ìàãà... òû, äîëæíî áûòü, õðàáðûé ïàðåíü!
    suckerdefeatednov_guard = "SVM_8_SuckerDefeatedNov_Guard"; //Òû çíàåøü, ÷òî íîâè÷êè çäåñü ïîä ìîåé çàùèòîé, è âñå ðàâíî îñìåëèâàåøüñÿ îáèæàòü èõ?
    suckerdefeatedvlk_guard = "SVM_8_SuckerDefeatedVlk_Guard"; //Îáèæàÿ ðóäîêîïîâ, òû ïîêóøàåøüñÿ íà ìîé äîõîä!
    youdefeatedmycomrade = "SVM_8_YouDefeatedMyComrade"; //Òåáå íå ñòîèò îáèæàòü ìîèõ äðóçåé.
    youdefeatednov_guard = "SVM_8_YouDefeatedNOV_Guard"; //Åùå ðàç îáèäèøü íîâè÷êà, è òû ïîæàëååøü!
    youdefeatedvlk_guard = "SVM_8_YouDefeatedVLK_Guard"; //Åñëè áóäåøü îáèæàòü òåõ, êîãî ÿ çàùèùàþ, ýòî ìîæåò ñòîèòü òåáå ãîëîâû.
    youstolefromme = "SVM_8_YouStoleFromMe"; //Êàê òû ïîñìåë ïîÿâèòüñÿ çäåñü, ãðÿçíûé âîðèøêà?
    youstolefromus = "SVM_8_YouStoleFromUs"; //Ó òåáÿ åñòü ÷òî-òî, ÷òî ïðèíàäëåæèò íàì. Ëó÷øå áû òåáå âåðíóòü ýòî íàçàä!
    youstolefromebr = "SVM_8_YouStoleFromEBr"; //Ïàðåíü! Òû îáîêðàë Áàðîíîâ! Îíè áóäóò â ÿðîñòè!
    youstolefromgur = "SVM_8_YouStoleFromGur"; //Òû îáîêðàë Ãóðó! Òåáå íå ñòîèëî ïîïàäàòüñÿ íà ýòîì!
    stolefrommage = "SVM_8_StoleFromMage"; //Òû èçáàâèë ìàãîâ îò íåñêîëüêèõ íåíóæíûõ âåùèö, òàê?
    youkilledmyfriend = "SVM_8_YouKilledMyFriend"; //Æèçíü îäíîãî èç íàøèõ ëþäåé íà òâîåé ñîâåñòè. Åùå îäíà îøèáêà, è íàñòàíåò òâîÿ î÷åðåäü!
    youkilledebr = "SVM_8_YouKilledEBr"; //Òû óáèë Áàðîíà! Ïàðåíü, òû îêîí÷àòåëüíî ñïÿòèë?!
    youkilledgur = "SVM_8_YouKilledGur"; //Òû óáèë Ãóðó! ß ãëàçàì ñâîèì íå âåðþ!
    youkilledmage = "SVM_8_YouKilledMage"; //Òû óáèë ìàãà! Êàê òû ñîáèðàåøüñÿ îáúÿñíèòü ýòî?
    youkilledocfolk = "SVM_8_YouKilledOCfolk"; //Óáèò ÷åëîâåê èç Ñòàðîãî Ëàãåðÿ, è êîå-êòî ñâÿçûâàåò òåáÿ ñ ýòèì óáèéñòâîì...
    youkilledncfolk = "SVM_8_YouKilledNCfolk"; //Íîâûé Ëàãåðü ïîíåñ òÿæåëóþ óòðàòó, è, ïîõîæå, òû ïðè÷àñòåí ê ýòîìó!
    youkilledpsifolk = "SVM_8_YouKilledPSIfolk"; //Áðàòñòâî ïîòåðÿëî îäíîãî èç ñâîèõ ÷ëåíîâ, è ýòà æèçíü íà òâîåé ñîâåñòè!
    getthingsright = "SVM_8_GetThingsRight"; //Òåáå áóäåò íåëåãêî îïðàâäàòüñÿ!
    youdefeatedmewell = "SVM_8_YouDefeatedMeWell"; //Òû çàäàë ìíå õîðîøóþ òðåïêó, ïàðåíü. Ýòî áûë õîðîøèé áîé, íî ñåé÷àñ îí îêîí÷åí!
    smalltalk01 = "SVM_8_Smalltalk01"; //...åñëè òû äóìàåøü...
    smalltalk02 = "SVM_8_Smalltalk02"; //...ìîæåò áûòü...
    smalltalk03 = "SVM_8_Smalltalk03"; //...ýòî áûëî íå ñëèøêîì óìíî...
    smalltalk04 = "SVM_8_Smalltalk04"; //...ÿ íå õî÷ó â ýòî ââÿçûâàòüñÿ...
    smalltalk05 = "SVM_8_Smalltalk05"; //...ýòî òî÷íî íå ìîÿ ïðîáëåìà...
    smalltalk06 = "SVM_8_Smalltalk06"; //...ïîõîæå, íàçðåâàåò ïðîáëåìà...
    smalltalk07 = "SVM_8_Smalltalk07"; //...äåðæè ýòî ïðè ñåáå, ëþäÿì íåîáÿçàòåëüíî çíàòü îá ýòîì.
    smalltalk08 = "SVM_8_Smalltalk08"; //...áîëüøå ýòîãî íå ñëó÷èòñÿ...
    smalltalk09 = "SVM_8_Smalltalk09"; //...÷òî-òî íå òî â ýòîé èñòîðèè...
    smalltalk10 = "SVM_8_Smalltalk10"; //...òû äîëæåí ñëåäèòü çà òåì, ÷òî ãîâîðèøü ëþäÿì...
    smalltalk11 = "SVM_8_Smalltalk11"; //...ïîêà ìåíÿ íå âïóòàëè...
    smalltalk12 = "SVM_8_Smalltalk12"; //...òû íå äîëæåí âåðèòü âñåìó...
    smalltalk13 = "SVM_8_Smalltalk13"; //...íå õîòåë áû ÿ îêàçàòüñÿ íà åãî ìåñòå...
    smalltalk14 = "SVM_8_Smalltalk14"; //...êàæäûé ðàç îäíà è òà æå èñòîðèÿ...
    smalltalk15 = "SVM_8_Smalltalk15"; //...íåêîòîðûõ ëþäåé íè÷åãî íå ó÷èò...
    smalltalk16 = "SVM_8_Smalltalk16"; //...áûëè âðåìåíà, êîãäà âñå áûëî ñîâñåì ïî-äðóãîìó...
    smalltalk17 = "SVM_8_Smalltalk17"; //...ëþäè âñåãäà áîëòàþò...
    smalltalk18 = "SVM_8_Smalltalk18"; //...ÿ áîëüøå íå ñëóøàþ âñÿêóþ òðåïîòíþ...
    smalltalk19 = "SVM_8_Smalltalk19"; //...âåðèøü êîìó-òî - è â ðåçóëüòàòå ïîïàäàåøü â íåïðèÿòíîñòè, òàê âñåãäà è áûâàåò...
    smalltalk20 = "SVM_8_Smalltalk20"; //...ÿ ñîìíåâàþñü, ÷òî ýòî êîãäà-íèáóäü èçìåíèòñÿ...
    smalltalk21 = "SVM_8_Smalltalk21"; //...ñêîðåå âñåãî, òû ïðàâ...
    smalltalk22 = "SVM_8_Smalltalk22"; //...äåðæèñü. Ëó÷øå íè íà ÷òî íå íàòûêàòüñÿ...
    smalltalk23 = "SVM_8_Smalltalk23"; //...ÿ äóìàë, ýòî âûÿñíèëè åùå î÷åíü äàâíî...
    smalltalk24 = "SVM_8_Smalltalk24"; //...äàâàé ïîãîâîðèì î ÷åì-íèáóäü åùå...
    om = "SVM_8_Om"; //Îììì...
};

instance svm_9(c_svm) {
    stopmagic = "SVM_9_StopMagic"; //Íèêàêîé ìàãèè çäåñü!
    isaidstopmagic = "SVM_9_ISaidStopMagic"; //Ïðåêðàòè, ÿ ñêàçàë! Íåìåäëåííî!
    weapondown = "SVM_9_WeaponDown"; //Òû ñîáèðàåøüñÿ íàïàñòü íà ìåíÿ?
    isaidweapondown = "SVM_9_ISaidWeaponDown"; //Òû õî÷åøü, ÷òîáû ÿ íàáèë òåáå ìîðäó, èëè ñàì óáåðåøü ýòó øòóêîâèíó?
    watchyouraim = "SVM_9_WatchYourAim"; //Ñìîòðè, êóäà öåëèøüñÿ!
    watchyouraimangry = "SVM_9_WatchYourAimAngry"; //Óáåðè ýòó øòóêîâèíó!
    whatareyoudoing = "SVM_9_WhatAreYouDoing"; //Ýé! Ñìîòðè, ÷òî äåëàåøü!
    letsforgetourlittlefight = "SVM_9_LetsForgetOurLittleFight"; //ß áû ïðåäëîæèë ïðîñòî çàáûòü îá ýòîì...
    strange = "SVM_9_Strange"; //Ïîêàæèñü. ß çíàþ, ÷òî òû ìåíÿ ñëûøèøü!
    diemonster = "SVM_9_DieMonster"; //Íó è çäîðîâûå æå òâàðè!
    diemortalenemy = "SVM_9_DieMortalEnemy"; //Òåïåðü òåáå êðûøêà!
    nowwait = "SVM_9_NowWait"; //Òû åùå ìåíÿ óçíàåøü!
    youstillnothaveenough = "SVM_9_YouStillNotHaveEnough"; //Äà òû ÷åðòîâñêè óïðÿìûé!
    youaskedforit = "SVM_9_YouAskedForIt"; //Åñëè íå õî÷åøü ñëóøàòü, ïðèäåòñÿ îáúÿñíèòü ïî-äðóãîìó!
    nowwaitintruder = "SVM_9_NowWaitIntruder"; //Ïîïàëñÿ, ÷óæàê!
    iwillteachyourespectforforeignproperty = "SVM_9_IWillTeachYouRespectForForeignProperty"; //ß ïðåäóïðåäèë òåáÿ. Äîòðîíåøüñÿ äî ìîèõ âåùåé, è áóäåò õóäî!
    dirtythief = "SVM_9_DirtyThief"; //Âîð! ß ïðèêîí÷ó òåáÿ!
    youattackedmycharge = "SVM_9_YouAttackedMyCharge"; //Íèêòî íå ñìååò îáèæàòü ìîèõ äðóçåé!
    youkilledoneofus = "SVM_9_YouKilledOneOfUs"; //Òû óáèë îäíîãî èç ìîèõ ëþäåé. Òåïåðü ÿ óáüþ ÒÅÁß!
    dead = "SVM_9_Dead"; //Àààðãë!
    aargh_1 = "SVM_9_Aargh_1"; //Àààðã!
    aargh_2 = "SVM_9_Aargh_2"; //Àààðã!
    aargh_3 = "SVM_9_Aargh_3"; //Àààðã!
    berzerk = "SVM_9_Berzerk"; //ÓÓÀÀÀÐÐÃÃÃÕÕÕ!!!
    youllbesorryforthis = "SVM_9_YoullBeSorryForThis"; //Òû óæå ïîêîéíèê, ïðîñòî åùå íå çíàåøü îá ýòîì.
    yesyes = "SVM_9_YesYes"; //Òèøå. Âñå â ïîðÿäêå!
    shitwhatamonster = "SVM_9_ShitWhatAMonster"; //×åðò, íó è òâàðü!
    help = "SVM_9_Help"; //Áûñòðî, óõîäèì!
    wewillmeetagain = "SVM_9_WeWillMeetAgain"; //Ìû åùå âñòðåòèìñÿ!
    nevertrythatagain = "SVM_9_NeverTryThatAgain"; //Â ñëåäóþùèé ðàç ÿ óáüþ òåáÿ!
    itakeyourweapon = "SVM_9_ITakeYourWeapon"; //Òåïåðü ýòî ìîå îðóæèå!
    itookyourore = "SVM_9_ITookYourOre"; //Ðóäà! Íó, ýòî ëó÷øå, ÷åì íè÷åãî!
    shitnoore = "SVM_9_ShitNoOre"; //Ó íåãî äàæå íåò ðóäû!
    handsoff = "SVM_9_HandsOff"; //Óáåðè ðóêè, ïðèÿòåëü!
    getoutofhere = "SVM_9_GetOutOfHere"; //Óáèðàéñÿ îòñþäà!
    youviolatedforbiddenterritory = "SVM_9_YouViolatedForbiddenTerritory"; //×òî òû çäåñü äåëàåøü?
    youwannafoolme = "SVM_9_YouWannaFoolMe"; //Òû ïûòàåøüñÿ ìåíÿ îäóðà÷èòü, ïàðåíü?
    whatsthissupposedtobe = "SVM_9_WhatsThisSupposedToBe"; //Ýé, òû! ×òî òû çäåñü øëÿåøüñÿ?
    whyareyouinhere = "SVM_9_WhyYouAreInHere"; //Óáèðàéñÿ îòñþäà, èëè ÿ ïîçîâó ñòðàæó!
    whatdidyouinthere = "SVM_9_WhatDidYouInThere"; //×òî òû òàì äåëàåøü?
    wisemove = "SVM_9_WiseMove"; //Ìîëîäåö!
    alarm = "SVM_9_Alarm"; //Ñòðàæà! Ñþäà!
    intruderalert = "SVM_9_IntruderAlert"; //ÒÐÅÂÎÃÀ!!! ×ÓÆÎÉ!!!
    behindyou = "SVM_9_BehindYou"; //Ñçàäè!
    theresafight = "SVM_9_TheresAFight"; //Ïîñìîòðèì, òàê ëè îíè õîðîøè...
    heyheyhey = "SVM_9_HeyHeyHey"; //Ïîëó÷àé!
    cheerfight = "SVM_9_CheerFight"; //Äà! Äàâàé, äàâàé!
    cheerfriend = "SVM_9_CheerFriend"; //Õîðîøî!
    ooh = "SVM_9_Ooh"; //Î, íà ýòîò ðàç â òî÷êó!
    yeahwelldone = "SVM_9_YeahWellDone"; //Îòëè÷íûé êîíòðîëü, ïàðåíü!
    runcoward = "SVM_9_RunCoward"; //Áîëüøå çäåñü íå ïîêàçûâàéñÿ!
    hedefeatedhim = "SVM_9_HeDefeatedHim"; //Èñõîä óæå ïðåäðåøåí.
    hedeservedit = "SVM_9_HeDeservedIt"; //Ýòî òâîÿ âèíà!
    hekilledhim = "SVM_9_HeKilledHim"; //Â ýòîì íå áûëî íåîáõîäèìîñòè. Ïîäóìàé î ïîñëåäñòâèÿõ.
    itwasagoodfight = "SVM_9_ItWasAGoodFight"; //Ýòî áûë õîðîøèé áîé!
    awake = "SVM_9_Awake"; //[çåâîê]
    friendlygreetings = "SVM_9_FriendlyGreetings"; //Ïðèâåò!
    algreetings = "SVM_9_ALGreetings"; //Çà Ãîìåçà!
    magegreetings = "SVM_9_MageGreetings"; //Âî èìÿ ìàãèè!
    sectgreetings = "SVM_9_SectGreetings"; //Ïðîñíèñü!
    thereheis = "SVM_13_ThereHeIs"; //Òû ÷òî, îñëåï? Ñþäà!
    nolearnnopoints = "SVM_9_NoLearnNoPoints"; //ß íå ìîãó ó÷èòü òåáÿ, òåáå íåõâàòàåò îïûòà.
    nolearnovermax = "SVM_9_NoLearnOverMax"; //Òû íà ïðåäåëå ñâîèõ âîçìîæíîñòåé. Òåáå íóæíî íàó÷èòüñÿ ÷åìó-íèáóäü åùå.
    nolearnyoualreadyknow = "SVM_9_NoLearnYouAlreadyKnow"; //Òåáå íóæíî íàáðàòüñÿ îïûòà, ïðåæäå ÷åì òû ñìîæåøü ñòàòü ìàñòåðîì.
    nolearnyourebetter = "SVM_9_NoLearnYoureBetter"; //Óæå ëó÷øå!
    heyyou = "SVM_9_HeyYou"; //Ýé, òû!
    notnow = "SVM_9_NotNow"; //Íå ñåé÷àñ.
    whatdoyouwant = "SVM_9_WhatDoYouWant"; //Òåáå ïîìî÷ü?
    isaidwhatdoyouwant = "SVM_9_ISaidWhatDoYouWant"; //ß ìîãó ïîìî÷ü?
    makeway = "SVM_9_MakeWay"; //Äàé ìíå ïðîéòè!
    outofmyway = "SVM_9_OutOfMyWay"; //Îòîéäè!
    youdeaforwhat = "SVM_9_YouDeafOrWhat"; //Íó æå, îòîéäè ñ äîðîãè!
    lookingfortroubleagain = "SVM_9_LookingForTroubleAgain"; //Ñíîâà èùåøü íåïðèÿòíîñòåé? Ïî÷åìó òû êàæäûé ðàç âûáèðàåøü äëÿ ýòîãî ìåíÿ?
    lookaway = "SVM_9_LookAway"; //Î, äà! Õîðîøàÿ ïîãîäà ñåãîäíÿ!
    okaykeepit = "SVM_9_OkayKeepIt"; //Õîðîøî! Ýòî òåïåðü òâîå.
    whatsthat = "SVM_9_WhatsThat"; //×òî ýòî áûëî?
    thatsmyweapon = "SVM_9_ThatsMyWeapon"; //ß ñîñ÷èòàþ äî òðåõ, è òû îòäàøü ìíå ìîå îðóæèå.
    giveittome = "SVM_9_GiveItToMe"; //Äàâàé ñþäà! Íåìåäëåííî!
    youcankeepthecrap = "SVM_9_YouCanKeeptheCrap"; //Îñòàâü ñåáå, ìíå ýòî âñå ðàâíî íå íóæíî.
    theykilledmyfriend = "SVM_9_TheyKilledMyFriend"; //Óáèëè îäíîãî èç íàøèõ! Åñëè ÿ äîáåðóñü äî ýòîãî íàãëåöà...
    youdisturbedmyslumber = "SVM_9_YouDisturbedMySlumber"; //×òî ñëó÷èëîñü?
    suckergotsome = "SVM_9_SuckerGotSome"; //À? Ïîëó÷èë â ìîðäó? Ýòî ïîñëóæèò òåáå óðîêîì!
    suckerdefeatedebr = "SVM_9_SuckerDefeatedEBr"; //Òû óäàðèë Áàðîíà. Ýòî åãî âïå÷àòëèëî, äà åùå êàê!
    suckerdefeatedgur = "SVM_9_SuckerDefeatedGur"; //Òû ïîáåäèë îäíîãî èç Ãóðó! Âïå÷àòëÿåò. Íî äàæå íå ïûòàéñÿ ñäåëàòü ýòî åùå ðàç.
    suckerdefeatedmage = "SVM_9_SuckerDefeatedMage"; //Ïîáåäèòü ìàãà... òû, äîëæíî áûòü, õðàáðûé ïàðåíü!
    suckerdefeatednov_guard = "SVM_9_SuckerDefeatedNov_Guard"; //Òîëüêî èäèîò áóäåò äðàòüñÿ ñ íîâè÷êàìè!
    suckerdefeatedvlk_guard = "SVM_9_SuckerDefeatedVlk_Guard"; //Äóìàåøü, òåáå ïîçâîëåíî áèòü ðóäîêîïîâ?
    youdefeatedmycomrade = "SVM_9_YouDefeatedMyComrade"; //Òû óäàðèë ìîåãî äðóãà - êàêîãî ÷åðòà?!
    youdefeatednov_guard = "SVM_9_YouDefeatedNOV_Guard"; //Åùå ðàç îáèäèøü íîâè÷êà, è òû ïîæàëååøü!
    youdefeatedvlk_guard = "SVM_9_YouDefeatedVLK_Guard"; //Òû õðàáðûé ïàðåíü, íî íèêîìó íå ïîçâîëåíî îáèæàòü òåõ, êîãî ÿ çàùèùàþ.
    youstolefromme = "SVM_9_YouStoleFromMe"; //Êàê òû ïîñìåë ïîÿâèòüñÿ çäåñü, ãðÿçíûé âîðèøêà?
    youstolefromus = "SVM_9_YouStoleFromUs"; //Âîðîâàòü ó íàñ - ýòî õóäøåå èç òîãî, ÷òî òû ìîã ïðèäóìàòü! Òû îá ýòîì ïîæàëååøü!
    youstolefromebr = "SVM_9_YouStoleFromEBr"; //Ïàðåíü! Òû îáîêðàë Áàðîíîâ! Îíè áóäóò â ÿðîñòè!
    youstolefromgur = "SVM_9_YouStoleFromGur"; //Òû èçáàâèë Ãóðó îò íåñêîëüêèõ íåíóæíûõ âåùèö, òàê?
    stolefrommage = "SVM_9_StoleFromMage"; //Òû èçáàâèë ìàãîâ îò íåñêîëüêèõ íåíóæíûõ âåùèö, òàê?
    youkilledmyfriend = "SVM_9_YouKilledMyFriend"; //Æèçíü îäíîãî èç íàøèõ ëþäåé íà òâîåé ñîâåñòè. Åùå îäíà îøèáêà, è íàñòàíåò òâîÿ î÷åðåäü!
    youkilledebr = "SVM_9_YouKilledEBr"; //Òû óáèë Áàðîíà! Ïàðåíü, òû îêîí÷àòåëüíî ñïÿòèë?!
    youkilledgur = "SVM_9_YouKilledGur"; //Òû óáèë Ãóðó! ß ãëàçàì ñâîèì íå âåðþ!
    youkilledmage = "SVM_9_YouKilledMage"; //Òû óáèë ìàãà! Êàê òû ñîáèðàåøüñÿ îáúÿñíèòü ýòî?
    youkilledocfolk = "SVM_9_YouKilledOCfolk"; //Óáèò ÷åëîâåê èç Ñòàðîãî Ëàãåðÿ, è êîå-êòî ñâÿçûâàåò òåáÿ ñ ýòèì óáèéñòâîì...
    youkilledncfolk = "SVM_9_YouKilledNCfolk"; //Íîâûé Ëàãåðü ïîíåñ òÿæåëóþ óòðàòó, è, ïîõîæå, òû ïðè÷àñòåí ê ýòîìó!
    youkilledpsifolk = "SVM_9_YouKilledPSIfolk"; //Áðàòñòâî ïîòåðÿëî îäíîãî èç ñâîèõ ÷ëåíîâ, è ýòà æèçíü íà òâîåé ñîâåñòè!
    getthingsright = "SVM_9_GetThingsRight"; //Òåáå áóäåò íåëåãêî îïðàâäàòüñÿ!
    youdefeatedmewell = "SVM_9_YouDefeatedMeWell"; //Õîðîøèé áîé. Òâîÿ ó÷åáà íå ïðîøëà äàðîì.
    smalltalk01 = "SVM_9_Smalltalk01"; //...äà, åñëè òû òàê äóìàåøü...
    smalltalk02 = "SVM_9_Smalltalk02"; //...ìîæåò áûòü...
    smalltalk03 = "SVM_9_Smalltalk03"; //...ýòî áûëî íå ñëèøêîì óìíî...
    smalltalk04 = "SVM_9_Smalltalk04"; //...ÿ íå õî÷ó â ýòî ââÿçûâàòüñÿ...
    smalltalk05 = "SVM_9_Smalltalk05"; //...ýòî òî÷íî íå ìîÿ ïðîáëåìà...
    smalltalk06 = "SVM_9_Smalltalk06"; //...ïîõîæå, íàçðåâàåò ïðîáëåìà...
    smalltalk07 = "SVM_9_Smalltalk07"; //...äåðæè ýòî ïðè ñåáå, ëþäÿì íåîáÿçàòåëüíî çíàòü îá ýòîì.
    smalltalk08 = "SVM_9_Smalltalk08"; //...áîëüøå ýòîãî íå ñëó÷èòñÿ...
    smalltalk09 = "SVM_9_Smalltalk09"; //...÷òî-òî íå òî â ýòîé èñòîðèè...
    smalltalk10 = "SVM_9_Smalltalk10"; //...òû äîëæåí ñëåäèòü çà òåì, ÷òî ãîâîðèøü ëþäÿì...
    smalltalk11 = "SVM_9_Smalltalk11"; //...ïîêà ìåíÿ íå âïóòàëè...
    smalltalk12 = "SVM_9_Smalltalk12"; //...òû íå äîëæåí âåðèòü âñåìó...
    smalltalk13 = "SVM_9_Smalltalk13"; //...íå õîòåë áû ÿ îêàçàòüñÿ íà åãî ìåñòå...
    smalltalk14 = "SVM_9_Smalltalk14"; //...êàæäûé ðàç îäíà è òà æå èñòîðèÿ...
    smalltalk15 = "SVM_9_Smalltalk15"; //...íåêîòîðûõ ëþäåé íè÷åãî íå ó÷èò...
    smalltalk16 = "SVM_9_Smalltalk16"; //...áûëè âðåìåíà, êîãäà âñå áûëî ñîâñåì ïî-äðóãîìó...
    smalltalk17 = "SVM_9_Smalltalk17"; //...ëþäè âñåãäà áîëòàþò...
    smalltalk18 = "SVM_9_Smalltalk18"; //...ÿ áîëüøå íå ñëóøàþ âñÿêóþ òðåïîòíþ...
    smalltalk19 = "SVM_9_Smalltalk19"; //...âåðèøü êîìó-òî - è â ðåçóëüòàòå ïîïàäàåøü â íåïðèÿòíîñòè, òàê âñåãäà è áûâàåò...
    smalltalk20 = "SVM_9_Smalltalk20"; //...ÿ ñîìíåâàþñü, ÷òî ýòî êîãäà-íèáóäü èçìåíèòñÿ...
    smalltalk21 = "SVM_9_Smalltalk21"; //...ñêîðåå âñåãî, òû ïðàâ...
    smalltalk22 = "SVM_9_Smalltalk22"; //...äåðæèñü. Ëó÷øå íè íà ÷òî íå íàòûêàòüñÿ...
    smalltalk23 = "SVM_9_Smalltalk23"; //...ÿ äóìàë, ýòî âûÿñíèëè åùå î÷åíü äàâíî...
    smalltalk24 = "SVM_9_Smalltalk24"; //...äàâàé ïîãîâîðèì î ÷åì-íèáóäü åùå...
    om = "SVM_9_Om"; //Îììì...
};

instance svm_10(c_svm) {
    stopmagic = "SVM_10_StopMagic"; //Ïåðåñòàíü êîëäîâàòü!
    isaidstopmagic = "SVM_10_ISaidStopMagic"; //Ïåðåñòàíü íåìåäëåííî!
    weapondown = "SVM_10_WeaponDown"; //Óáåðè îðóæèå!
    isaidweapondown = "SVM_10_ISaidWeaponDown"; //×òî òû äåëàåøü? Íàðûâàåøüñÿ íà íåïðèÿòíîñòè?
    watchyouraim = "SVM_10_WatchYourAim"; //Óáåðè ýòó øòóêîâèíó, èëè ÿ ñäåëàþ ýòî çà òåáÿ!
    watchyouraimangry = "SVM_10_WatchYourAimAngry"; //Åñëè èùåøü íåïðèÿòíîñòåé, ïðîäîëæàé öåëèòüñÿ â ìåíÿ!
    whatareyoudoing = "SVM_10_WhatAreYouDoing"; //Ýé! Ñìîòðè, ÷òî äåëàåøü! Åùå îäèí ðàç, è ó òåáÿ áóäóò ïðîáëåìû!
    letsforgetourlittlefight = "SVM_10_LetsForgetOurLittleFight"; //Ýé, ïàðåíü! Çàáóäåì îá ýòîì, ëàäíî?
    strange = "SVM_10_Strange"; //Âûõîäè! Ïîêàæè ñåáÿ!
    diemonster = "SVM_10_DieMonster"; //Ãðÿçíûå òâàðè!
    diemortalenemy = "SVM_10_DieMortalEnemy"; //Òåïåðü òåáå êðûøêà!
    nowwait = "SVM_10_NowWait"; //×àñ ðàñïëàòû!
    youstillnothaveenough = "SVM_10_YouStillNotHaveEnough"; //Ïîõîæå, òû õî÷åøü ïîëó÷èòü â ìîðäó!
    youaskedforit = "SVM_10_YouAskedForIt"; //Òû ñàì íàïðîñèëñÿ!
    nowwaitintruder = "SVM_10_NowWaitIntruder"; //Òåïåðü òû ïîïàëñÿ, ÷óæàê!
    iwillteachyourespectforforeignproperty = "SVM_10_IWillTeachYouRespectForForeignProperty"; //ß ïðåäóïðåäèë òåáÿ. Äîòðîíåøüñÿ äî ìîèõ âåùåé, è áóäåò õóäî!
    dirtythief = "SVM_10_DirtyThief"; //Âîð! ß ïðèêîí÷ó òåáÿ!
    youattackedmycharge = "SVM_10_YouAttackedMyCharge"; //Íèêòî íå ñìååò îáèæàòü ìîèõ ëþäåé!
    youkilledoneofus = "SVM_10_YouKilledOneOfUs"; //Òû óáèë îäíîãî èç ìîèõ ëþäåé. Òåïåðü ÿ óáüþ ÒÅÁß!
    dead = "SVM_10_Dead"; //Àààðãë!
    aargh_1 = "SVM_10_Aargh_1"; //Àààðã!
    aargh_2 = "SVM_10_Aargh_2"; //Àààðã!
    aargh_3 = "SVM_10_Aargh_3"; //Àààðã!
    berzerk = "SVM_10_Berzerk"; //ÓÓÀÀÀÐÐÃÃÃÕÕÕ!!!
    youllbesorryforthis = "SVM_10_YoullBeSorryForThis"; //Òû îá ýòîì ïîæàëååøü, óáëþäîê!
    yesyes = "SVM_10_YesYes"; //Äà, äà! Áåç ïàíèêè! Òû ïîáåäèë.
    shitwhatamonster = "SVM_10_ShitWhatAMonster"; //×òî çà òâàðü! Áåãè, áûñòðåå!
    help = "SVM_10_Help"; //Îòñòóïàåì!
    wewillmeetagain = "SVM_10_WeWillMeetAgain"; //Òû ìåíÿ åùå óçíàåøü!
    nevertrythatagain = "SVM_10_NeverTryThatAgain"; //Åùå îäèí ðàç, è òû îá ýòîì ïîæàëååøü!
    itakeyourweapon = "SVM_10_ITakeYourWeapon"; //Òåïåðü ýòî ìîå îðóæèå!
    itookyourore = "SVM_10_ITookYourOre"; //ß âîçüìó ó òåáÿ íåìíîãî ðóäû!
    shitnoore = "SVM_10_ShitNoOre"; //Ðóäû íåò, âîò ÷åðò!
    handsoff = "SVM_10_HandsOff"; //Òû, êðûñà! Óáåðè ðóêè!
    getoutofhere = "SVM_10_GetOutOfHere"; //Óáèðàéñÿ îòñþäà!
    youviolatedforbiddenterritory = "SVM_10_YouViolatedForbiddenTerritory"; //Ýé! Îòêóäà òû?
    youwannafoolme = "SVM_10_YouWannaFoolMe"; //Òû äîëæíî áûòü äóìàåøü, ÷òî ÿ òóïîé!
    whatsthissupposedtobe = "SVM_10_WhatsThisSupposedToBe"; //Ýé, òû! ×òî òû çäåñü øëÿåøüñÿ?
    whyareyouinhere = "SVM_10_WhyYouAreInHere"; //Óáèðàéñÿ îòñþäà, èëè ÿ ïîçîâó ñòðàæó!
    whatdidyouinthere = "SVM_10_WhatDidYouInThere"; //×òî òû òàì äåëàåøü?
    wisemove = "SVM_10_WiseMove"; //Òåáå ïîâåçëî.
    alarm = "SVM_10_Alarm"; //Ñòðàæà! Ñþäà!
    intruderalert = "SVM_10_IntruderAlert"; //ÒÐÅÂÎÃÀ!!! ×ÓÆÎÉ!!!
    behindyou = "SVM_10_BehindYou"; //Ñçàäè!
    theresafight = "SVM_10_TheresAFight"; //À, äðàêà!
    heyheyhey = "SVM_10_HeyHeyHey"; //Ñèëüíåå!
    cheerfight = "SVM_10_CheerFight"; //Íèêàêîé ïîùàäû!
    cheerfriend = "SVM_10_CheerFriend"; //Ïðèêîí÷è åãî!
    ooh = "SVM_10_Ooh"; //Íå îòâëåêàéñÿ!
    yeahwelldone = "SVM_10_YeahWellDone"; //Äàé åìó â ìîðäó!
    runcoward = "SVM_10_RunCoward"; //Âåðíèñü, òðóñ!
    hedefeatedhim = "SVM_10_HeDefeatedHim"; //Íåáîëüøîé ïîðûâ âåòðà, è îí óïàäåò ñàì.
    hedeservedit = "SVM_10_HeDeservedIt"; //Ýòî ïîñëóæèò åìó óðîêîì!
    hekilledhim = "SVM_10_HeKilledHim"; //Ñ÷èòàé, òû óæå ïîêîéíèê! Ýòî îòó÷èò òåáÿ óáèâàòü ëþäåé.
    itwasagoodfight = "SVM_10_ItWasAGoodFight"; //Òû ïðåïîäàë åìó õîðîøèé óðîê!
    awake = "SVM_10_Awake"; //[çåâîê]
    friendlygreetings = "SVM_10_FriendlyGreetings"; //Ïðèâåò!
    algreetings = "SVM_10_ALGreetings"; //Çà Ãîìåçà!
    magegreetings = "SVM_10_MageGreetings"; //Âî èìÿ ìàãèè!
    sectgreetings = "SVM_10_SectGreetings"; //Ïðîñíèñü!
    thereheis = "SVM_10_ThereHeIs"; //Îí òàì.
    nolearnnopoints = "SVM_10_NoLearnNoPoints"; //ß íå ìîãó ó÷èòü òåáÿ, òû ñëèøêîì íåîïûòåí.
    nolearnovermax = "SVM_10_NoLearnOverMax"; //Òû íà ïðåäåëå ñâîèõ âîçìîæíîñòåé. Òåáå íóæíî íàó÷èòüñÿ ÷åìó-íèáóäü åùå.
    nolearnyoualreadyknow = "SVM_10_NoLearnYouAlreadyKnow"; //Òåáå íóæíî íàáðàòüñÿ îïûòà, ïðåæäå ÷åì òû ñìîæåøü ñòàòü ìàñòåðîì.
    nolearnyourebetter = "SVM_10_NoLearnYoureBetter"; //Óæå ëó÷øå!
    heyyou = "SVM_10_HeyYou"; //Ýé, òû!
    notnow = "SVM_10_NotNow"; //Íå ñåé÷àñ.
    whatdoyouwant = "SVM_10_WhatDoYouWant"; //Òåáå ïîìî÷ü?
    isaidwhatdoyouwant = "SVM_10_ISaidWhatDoYouWant"; //ß ìîãó ÷åì-òî ïîìî÷ü?
    makeway = "SVM_10_MakeWay"; //Äàé ìíå ïðîéòè!
    outofmyway = "SVM_10_OutOfMyWay"; //Ïðî÷ü ñ äîðîãè!
    youdeaforwhat = "SVM_10_YouDeafOrWhat"; //ß ÷òî, äîëæåí âáèòü ýòî â òâîþ òóïóþ áàøêó? Óáèðàéñÿ îòñþäà!
    lookingfortroubleagain = "SVM_10_LookingForTroubleAgain"; //Ñíîâà èùåøü íåïðèÿòíîñòåé?
    lookaway = "SVM_10_LookAway"; //Ìåíÿ çäåñü íå áûëî...
    okaykeepit = "SVM_10_OkayKeepIt"; //Çàáèðàé ýòî ñåáå!
    whatsthat = "SVM_10_WhatsThat"; //×òî ýòî áûëî?
    thatsmyweapon = "SVM_10_ThatsMyWeapon"; //Îòäàé ìîå îðóæèå!
    giveittome = "SVM_10_GiveItToMe"; //Äàé ñþäà!
    youcankeepthecrap = "SVM_10_YouCanKeeptheCrap"; //Âîçüìè. Ìíå ýòî âñå ðàâíî íå íóæíî.
    theykilledmyfriend = "SVM_10_TheyKilledMyFriend"; //Óáèëè îäíîãî èç íàøèõ. Òåïåðü ÿ äåéñòâèòåëüíî çîë!
    youdisturbedmyslumber = "SVM_10_YouDisturbedMySlumber"; //Çà÷åì òû ìåíÿ ðàçáóäèë?
    suckergotsome = "SVM_10_SuckerGotSome"; //À? Ïîëó÷èë â ìîðäó? Ýòî ïîñëóæèò òåáå óðîêîì!
    suckerdefeatedebr = "SVM_10_SuckerDefeatedEBr"; //Òû óäàðèë Áàðîíà!
    suckerdefeatedgur = "SVM_10_SuckerDefeatedGur"; //Òû ïîáåäèë îäíîãî èç Ãóðó.
    suckerdefeatedmage = "SVM_10_SuckerDefeatedMage"; //Ïîáåäèòü ìàãà...
    suckerdefeatednov_guard = "SVM_10_SuckerDefeatedNov_Guard"; //Ïðåæäå ÷åì îáèæàòü íîâè÷êîâ, òû äîëæåí çíàòü, êîãî ýòèì ðàçäðàæàåøü!
    suckerdefeatedvlk_guard = "SVM_10_SuckerDefeatedVlk_Guard"; //ß äîëæåí ïîääåðæèâàòü çäåñü ïîðÿäîê! Îñòàâü ìîèõ ëþäåé â ïîêîå!
    youdefeatedmycomrade = "SVM_10_YouDefeatedMyComrade"; //Òû óäàðèë ìîåãî äðóãà.
    youdefeatednov_guard = "SVM_10_YouDefeatedNOV_Guard"; //Åùå ðàç ïîäíèìåøü ðóêó íà íîâè÷êà, è òû ïîæàëååøü îá ýòîì!
    youdefeatedvlk_guard = "SVM_10_YouDefeatedVLK_Guard"; //Òû îáèäåë îäíîãî èç ìîèõ ïîäîïå÷íûõ è äîðîãî çàïëàòèøü çà ýòî!
    youstolefromme = "SVM_10_YouStoleFromMe"; //Íå âçäóìàé ïîÿâèòüñÿ çäåñü åùå ðàç, âîð!
    youstolefromus = "SVM_10_YouStoleFromUs"; //Ó òåáÿ åñòü ÷òî-òî, ÷òî ïðèíàäëåæèò íàì. Ëó÷øå áû òåáå âåðíóòü ýòî íàçàä!
    youstolefromebr = "SVM_10_YouStoleFromEBr"; //Ïàðåíü! Òû îáîêðàë Áàðîíîâ! Îíè áóäóò â ÿðîñòè!
    youstolefromgur = "SVM_10_YouStoleFromGur"; //Òû èçáàâèë Ãóðó îò íåñêîëüêèõ íåíóæíûõ âåùèö. Òåáå íå ñòîèëî ïîïàäàòüñÿ íà ýòîì!
    stolefrommage = "SVM_10_StoleFromMage"; //Òû èçáàâèë ìàãîâ îò íåñêîëüêèõ íåíóæíûõ âåùèö, òàê?
    youkilledmyfriend = "SVM_10_YouKilledMyFriend"; //Æèçíü îäíîãî èç íàøèõ ëþäåé íà òâîåé ñîâåñòè. Åùå îäíà îøèáêà, è íàñòàíåò òâîÿ î÷åðåäü!
    youkilledebr = "SVM_10_YouKilledEBr"; //Òû óáèë Áàðîíà! Ïàðåíü, òû îêîí÷àòåëüíî ñïÿòèë?!
    youkilledgur = "SVM_10_YouKilledGur"; //Òû óáèë Ãóðó! ß ãëàçàì ñâîèì íå âåðþ!
    youkilledmage = "SVM_10_YouKilledMage"; //Òû óáèë ìàãà! Êàê òû ñîáèðàåøüñÿ îáúÿñíèòü ýòî?
    youkilledocfolk = "SVM_10_YouKilledOCfolk"; //Óáèò ÷åëîâåê èç Ñòàðîãî Ëàãåðÿ, è êîå-êòî ñâÿçûâàåò òåáÿ ñ ýòèì óáèéñòâîì...
    youkilledncfolk = "SVM_10_YouKilledNCfolk"; //Íîâûé Ëàãåðü ïîíåñ òÿæåëóþ óòðàòó, è, ïîõîæå, òû ïðè÷àñòåí ê ýòîìó!
    youkilledpsifolk = "SVM_10_YouKilledPSIfolk"; //Áðàòñòâî ïîòåðÿëî îäíîãî èç ñâîèõ ÷ëåíîâ, è ýòà æèçíü íà òâîåé ñîâåñòè!
    getthingsright = "SVM_10_GetThingsRight"; //Òåáå áóäåò íåëåãêî îïðàâäàòüñÿ!
    youdefeatedmewell = "SVM_10_YouDefeatedMeWell"; //Ïîçäðàâëÿþ! Òû ïîáåäèë. Ýòî áûë õîðîøèé áîé.
    smalltalk01 = "SVM_10_Smalltalk01"; //...åñëè òû äóìàåøü...
    smalltalk02 = "SVM_10_Smalltalk02"; //...ìîæåò áûòü...
    smalltalk03 = "SVM_10_Smalltalk03"; //...ýòî áûëî íå ñëèøêîì óìíî...
    smalltalk04 = "SVM_10_Smalltalk04"; //...ÿ íå õî÷ó â ýòî ââÿçûâàòüñÿ...
    smalltalk05 = "SVM_10_Smalltalk05"; //...ýòî òî÷íî íå ìîÿ ïðîáëåìà...
    smalltalk06 = "SVM_10_Smalltalk06"; //...ïîõîæå, íàçðåâàåò ïðîáëåìà...
    smalltalk07 = "SVM_10_Smalltalk07"; //...äåðæè ýòî ïðè ñåáå, ëþäÿì íåîáÿçàòåëüíî çíàòü îá ýòîì.
    smalltalk08 = "SVM_10_Smalltalk08"; //...áîëüøå ýòîãî íå ñëó÷èòñÿ...
    smalltalk09 = "SVM_10_Smalltalk09"; //...÷òî-òî íå òî â ýòîé èñòîðèè...
    smalltalk10 = "SVM_10_Smalltalk10"; //...òû äîëæåí ñëåäèòü çà òåì, ÷òî ãîâîðèøü ëþäÿì...
    smalltalk11 = "SVM_10_Smalltalk11"; //...ïîêà ìåíÿ íå âïóòàëè...
    smalltalk12 = "SVM_10_Smalltalk12"; //...òû íå äîëæåí âåðèòü âñåìó...
    smalltalk13 = "SVM_10_Smalltalk13"; //...íå õîòåë áû ÿ îêàçàòüñÿ íà åãî ìåñòå...
    smalltalk14 = "SVM_10_Smalltalk14"; //...êàæäûé ðàç îäíà è òà æå èñòîðèÿ...
    smalltalk15 = "SVM_10_Smalltalk15"; //...íåêîòîðûõ ëþäåé íè÷åãî íå ó÷èò...
    smalltalk16 = "SVM_10_Smalltalk16"; //...áûëè âðåìåíà, êîãäà âñå áûëî ñîâñåì ïî-äðóãîìó...
    smalltalk17 = "SVM_10_Smalltalk17"; //...ëþäè âñåãäà áîëòàþò...
    smalltalk18 = "SVM_10_Smalltalk18"; //...ÿ áîëüøå íå ñëóøàþ âñÿêóþ òðåïîòíþ...
    smalltalk19 = "SVM_10_Smalltalk19"; //...âåðèøü êîìó-òî - è â ðåçóëüòàòå ïîïàäàåøü â íåïðèÿòíîñòè, òàê âñåãäà è áûâàåò...
    smalltalk20 = "SVM_10_Smalltalk20"; //...ÿ ñîìíåâàþñü, ÷òî ýòî êîãäà-íèáóäü èçìåíèòñÿ...
    smalltalk21 = "SVM_10_Smalltalk21"; //...ñêîðåå âñåãî, òû ïðàâ...
    smalltalk22 = "SVM_10_Smalltalk22"; //...äåðæèñü. Ëó÷øå íè íà ÷òî íå íàòûêàòüñÿ...
    smalltalk23 = "SVM_10_Smalltalk23"; //...ÿ äóìàë, ýòî âûÿñíèëè åùå î÷åíü äàâíî...
    smalltalk24 = "SVM_10_Smalltalk24"; //...äàâàé ïîãîâîðèì î ÷åì-íèáóäü åùå...
    om = "SVM_10_Om"; //Îììì...
};

instance svm_11(c_svm) {
    stopmagic = "SVM_11_StopMagic"; //Íå ñìåé êîëäîâàòü ðÿäîì ñî ìíîé!
    isaidstopmagic = "SVM_11_ISaidStopMagic"; //Ïðåêðàòè, ÿ ñêàçàë! Íåìåäëåííî!
    weapondown = "SVM_11_WeaponDown"; //Åñëè òû èùåøü íåïðèÿòíîñòåé, ïðîñòî ïîäîéäè ñþäà!
    isaidweapondown = "SVM_11_ISaidWeaponDown"; //Óáåðè ýòó øòóêîâèíó èëè òåáå êðûøêà!
    watchyouraim = "SVM_11_WatchYourAim"; //Óáåðè ýòî!
    watchyouraimangry = "SVM_11_WatchYourAimAngry"; //Òû õî÷åøü ðàññòðîèòü ìåíÿ? Óâåðåí?
    whatareyoudoing = "SVM_11_WhatAreYouDoing"; //×òî òû äåëàåøü? Ïðåêðàòè!
    letsforgetourlittlefight = "SVM_11_LetsForgetOurLittleFight"; //Ëàäíî, çàáóäåì îá ýòîì.
    strange = "SVM_11_Strange"; //Ì-ìì. ×åðò! Êóäà îí äåëñÿ?
    diemonster = "SVM_11_DieMonster"; //Îíè óìðóò, åñëè âñòàíóò ó ìåíÿ íà ïóòè!
    diemortalenemy = "SVM_11_DieMortalEnemy"; //Åñëè çàâîäèøü ñåáå âðàãîâ, íóæíî áûòü óâåðåííûì, ÷òî ñóìååøü ñ íèìè ñïðàâèòüñÿ. Óìðè.
    nowwait = "SVM_11_NowWait"; //Òåáå íå ñòîèëî ýòîãî äåëàòü!
    youstillnothaveenough = "SVM_11_YouStillNotHaveEnough"; //Ðàçâå ÿ åùå íå âûòèðàë òîáîé ïûëü? Ïðèäåòñÿ ïîâòîðèòü...
    youaskedforit = "SVM_11_YouAskedForIt"; //Åñëè òû íå ñëóøàåøü, ÷òî òåáå ãîâîðÿò, ýòî ìîæåò êîí÷èòüñÿ ïëîõî!
    nowwaitintruder = "SVM_11_NowWaitIntruder"; //Ýé, ÷óæàê! Ïðèøëî âðåìÿ íàó÷èòü òåáÿ êîå-÷åìó!
    iwillteachyourespectforforeignproperty = "SVM_11_IWillTeachYouRespectForForeignProperty"; //Ïîõîæå, ñòîèò ïåðåëîìàòü òåáå ïàëüöû!
    dirtythief = "SVM_11_DirtyThief"; //Ýòî íå ïðîéäåò òåáå äàðîì, âîð!
    youattackedmycharge = "SVM_11_YouAttackedMyCharge"; //Òû íàðóøàåøü ïîðÿäîê íà ìîåé òåððèòîðèè! Çà ýòî ÿ äîëæåí ïðèêîí÷èòü òåáÿ!
    youkilledoneofus = "SVM_11_YouKilledOneOfUs"; //Ýòî óáèéñòâî áûëî òâîåé ïîñëåäíåé îøèáêîé!
    dead = "SVM_11_Dead"; //Àààðãë!
    aargh_1 = "SVM_11_Aargh_1"; //Àààðã!
    aargh_2 = "SVM_11_Aargh_2"; //Àààðã!
    aargh_3 = "SVM_11_Aargh_3"; //Àààðã!
    berzerk = "SVM_11_Berzerk"; //ÓÓÀÀÀÐÐÃÃÃÕÕÕ!!!
    youllbesorryforthis = "SVM_11_YoullBeSorryForThis"; //Ýòîãî òåáå íå ñòîèëî äåëàòü!
    yesyes = "SVM_11_YesYes"; //Ëàäíî, ëàäíî! Òû ïîáåäèë!
    shitwhatamonster = "SVM_11_ShitWhatAMonster"; //Ýòîò ñëèøêîì áîëüøîé!
    help = "SVM_11_Help"; //Îòñòóïàåì!
    wewillmeetagain = "SVM_11_WeWillMeetAgain"; //Ýòîãî ÿ òàê íå îñòàâëþ, ïðèÿòåëü!
    nevertrythatagain = "SVM_11_NeverTryThatAgain"; //Áîëüøå íå äåëàé ýòîãî!
    itakeyourweapon = "SVM_11_ITakeYourWeapon"; //ß ëó÷øå òåáÿ ïîçàáî÷óñü îá ýòîì îðóæèè!
    itookyourore = "SVM_11_ITookYourOre"; //Ñïàñèáî çà òî, ÷òî îñòàâèë ìíå íåìíîãî ðóäû!
    shitnoore = "SVM_11_ShitNoOre"; //Íè÷åãî! Ðóäû íåò!
    handsoff = "SVM_11_HandsOff"; //Óáåðè ñâîè ãðÿçíûå ðóêè!
    getoutofhere = "SVM_11_GetOutOfHere"; //Óáèðàéñÿ îòñþäà èëè ÿ çàñòàâëþ òåáÿ ñäåëàòü ýòî!
    youviolatedforbiddenterritory = "SVM_11_YouViolatedForbiddenTerritory"; //Ýé, êàê ÒÛ ñþäà ïîïàë?
    youwannafoolme = "SVM_11_YouWannaFoolMe"; //Íå ñî ìíîé, ïðèÿòåëü!
    whatsthissupposedtobe = "SVM_11_WhatsThisSupposedToBe"; //×òî ýòî äîëæíî çíà÷èòü?
    whyareyouinhere = "SVM_11_WhyYouAreInHere"; //Ýòî ìîé äîì. Âîí, èëè ÿ ïîçîâó ñòðàæó!
    whatdidyouinthere = "SVM_11_WhatDidYouInThere"; //×òî òû òàì äåëàåøü? Èñ÷åçíè, ïîêà ÿ îêîí÷àòåëüíî íå ðàçîçëèëñÿ!
    wisemove = "SVM_11_WiseMove"; //Õîðîøî! Áîëüøå ýòîãî íå äåëàé!
    alarm = "SVM_11_Alarm"; //Ñòðàæà! Ñþäà!
    intruderalert = "SVM_11_IntruderAlert"; //ÒÐÅÂÎÃÀ!!! ×ÓÆÎÉ!!!
    behindyou = "SVM_11_BehindYou"; //Ñçàäè!
    theresafight = "SVM_11_TheresAFight"; //Ïîñìîòðèì, êòî ïîáåäèò íà ýòîò ðàç!
    heyheyhey = "SVM_11_HeyHeyHey"; //Äàâàé, ñäåëàé ýòî!
    cheerfight = "SVM_11_CheerFight"; //Ïåðåñòàíü èãðàòü ñ íèì!
    cheerfriend = "SVM_11_CheerFriend"; //Äà ëàäíî, òû ìîæåøü ñ íèì ñïðàâèòüñÿ, âåäü òàê?
    ooh = "SVM_11_Ooh"; //Îõ! Ýòî óæå íå õîðîøî!
    yeahwelldone = "SVM_11_YeahWellDone"; //Ì-ìì. Íåïëîõî!
    runcoward = "SVM_11_RunCoward"; //Áîëüøå íå ñìåé ïîÿâëÿòüñÿ çäåñü!
    hedefeatedhim = "SVM_11_HeDefeatedHim"; //Ýòî áûë õîðîøèé óäàð!
    hedeservedit = "SVM_11_HeDeservedIt"; //Íå âàæíî! Îí çàñëóæèë ýòî!
    hekilledhim = "SVM_11_HeKilledHim"; //Òû óáèë åãî, è ó òåáÿ áóäóò ñåðüåçíûå ïðîáëåìû!
    itwasagoodfight = "SVM_11_ItWasAGoodFight"; //Õîðîøî! Îòëè÷íîå ïðåäñòàâëåíèå!
    awake = "SVM_11_Awake"; //[çåâîê]
    friendlygreetings = "SVM_11_FriendlyGreetings"; //Ïðèâåò!
    algreetings = "SVM_11_ALGreetings"; //Çà Ãîìåçà!
    magegreetings = "SVM_11_MageGreetings"; //Âî èìÿ ìàãèè!
    sectgreetings = "SVM_11_SectGreetings"; //Ïðîñíèñü!
    thereheis = "SVM_13_ThereHeIs"; //Òû ÷òî, îñëåï? Ñþäà!
    nolearnnopoints = "SVM_11_NoLearnNoPoints"; //ß íå ìîãó ó÷èòü òåáÿ, òåáå íåõâàòàåò îïûòà.
    nolearnovermax = "SVM_11_NoLearnOverMax"; //Òû íà ïðåäåëå ñâîèõ âîçìîæíîñòåé. Òåáå íóæíî íàó÷èòüñÿ ÷åìó-íèáóäü åùå.
    nolearnyoualreadyknow = "SVM_11_NoLearnYouAlreadyKnow"; //Òåáå íóæíî íàáðàòüñÿ îïûòà, ïðåæäå ÷åì òû ñìîæåøü ñòàòü ìàñòåðîì.
    nolearnyourebetter = "SVM_11_NoLearnYoureBetter"; //Òû ìîæåøü è ëó÷øå!
    heyyou = "SVM_11_HeyYou"; //Ýé, òû!
    notnow = "SVM_11_NotNow"; //Íå ñåé÷àñ.
    whatdoyouwant = "SVM_11_WhatDoYouWant"; //×òî òåáå íóæíî?
    isaidwhatdoyouwant = "SVM_11_ISaidWhatDoYouWant"; //Ìîãó ëè ÿ ÷òî-íèáóäü äëÿ òåáÿ ñäåëàòü?
    makeway = "SVM_11_MakeWay"; //Ìîæíî ïðîéòè?
    outofmyway = "SVM_11_OutOfMyWay"; //Îòîéäè!
    youdeaforwhat = "SVM_11_YouDeafOrWhat"; //ß ÷òî, äîëæåí âáèòü ýòî â òâîþ òóïóþ áàøêó? Óáèðàéñÿ îòñþäà!
    lookingfortroubleagain = "SVM_11_LookingForTroubleAgain"; //Ñíîâà èùåøü íåïðèÿòíîñòåé?
    lookaway = "SVM_11_LookAway"; //ß íå õî÷ó ñ ýòèì ñâÿçûâàòüñÿ!
    okaykeepit = "SVM_11_OkayKeepIt"; //Õîðîøî! Òåïåðü ýòî òâîå.
    whatsthat = "SVM_11_WhatsThat"; //×òî ýòî áûëî?
    thatsmyweapon = "SVM_11_ThatsMyWeapon"; //Ó òåáÿ ìîå îðóæèå..?
    giveittome = "SVM_11_GiveItToMe"; //Ëàäíî, îòäàé åãî ìíå!
    youcankeepthecrap = "SVM_11_YouCanKeeptheCrap"; //Îñòàâü ñåáå, ìíå ýòî âñå ðàâíî íå íóæíî.
    theykilledmyfriend = "SVM_11_TheyKilledMyFriend"; //Óáèëè îäíîãî èç íàøèõ! Åñëè ÿ äîáåðóñü äî ýòîãî íàãëåöà...
    youdisturbedmyslumber = "SVM_11_YouDisturbedMySlumber"; //×òî ïðîèçîøëî?
    suckergotsome = "SVM_11_SuckerGotSome"; //Ïîëó÷èë âçáó÷êó? Ýòî ïîñëóæèò òåáå óðîêîì!
    suckerdefeatedebr = "SVM_11_SuckerDefeatedEBr"; //Òû ïîáåäèë îäíîãî èç Áàðîíîâ. Ýòî áûëî âïå÷àòëÿþùå, íî ãëóïî. Âîîáùå-òî, äàæå î÷åíü ãëóïî.
    suckerdefeatedgur = "SVM_11_SuckerDefeatedGur"; //Òû ïîáåäèë îäíîãî èç Ãóðó.
    suckerdefeatedmage = "SVM_11_SuckerDefeatedMage"; //Ïîáåäèòü ìàãà... Ýòî áûëî íå ñëèøêîì óìíî!
    suckerdefeatednov_guard = "SVM_11_SuckerDefeatedNov_Guard"; //ß çàùèùàþ ýòèõ ëþäåé, à òû óäàðèë îäíîãî èç íèõ...
    suckerdefeatedvlk_guard = "SVM_11_SuckerDefeatedVlk_Guard"; //Îáèæàÿ ðóäîêîïîâ, òû ïîêóøàåøüñÿ íà ìîé äîõîä!
    youdefeatedmycomrade = "SVM_11_YouDefeatedMyComrade"; //Òîò, êòî îáèæàåò ìîèõ äðóçåé, îáèæàåò è ìåíÿ.
    youdefeatednov_guard = "SVM_11_YouDefeatedNOV_Guard"; //Åùå ðàç îáèäèøü íîâè÷êà, è òû ïîæàëååøü!
    youdefeatedvlk_guard = "SVM_11_YouDefeatedVLK_Guard"; //Íàïàäåíèå íà ìîèõ ïîäîïå÷íûõ ìîæåò ñòîèòü òåáå ãîëîâû.
    youstolefromme = "SVM_11_YouStoleFromMe"; //Êàê òû ïîñìåë ïîÿâèòüñÿ çäåñü, ãðÿçíûé âîðèøêà?
    youstolefromus = "SVM_11_YouStoleFromUs"; //Ó òåáÿ åñòü ÷òî-òî, ÷òî ïðèíàäëåæèò íàì. Ëó÷øå áû òåáå âåðíóòü ýòî íàçàä!
    youstolefromebr = "SVM_11_YouStoleFromEBr"; //Ïàðåíü! Òû îáîêðàë Áàðîíîâ! Îíè áóäóò â ÿðîñòè!
    youstolefromgur = "SVM_11_YouStoleFromGur"; //Òû èçáàâèë Ãóðó îò íåñêîëüêèõ íåíóæíûõ âåùèö, òàê?
    stolefrommage = "SVM_11_StoleFromMage"; //Òû èçáàâèë ìàãîâ îò íåñêîëüêèõ íåíóæíûõ âåùèö, òàê?
    youkilledmyfriend = "SVM_11_YouKilledMyFriend"; //Òû íàðóøèë ïåðâîå ïðàâèëî: íå óáèâàòü!
    youkilledebr = "SVM_11_YouKilledEBr"; //Òû óáèë Áàðîíà! Ïàðåíü, òû îêîí÷àòåëüíî ñïÿòèë?!
    youkilledgur = "SVM_11_YouKilledGur"; //Òû óáèë Ãóðó! ß ãëàçàì ñâîèì íå âåðþ!
    youkilledmage = "SVM_11_YouKilledMage"; //Òû óáèë ìàãà! Êàê òû ñîáèðàåøüñÿ îáúÿñíèòü ýòî?
    youkilledocfolk = "SVM_11_YouKilledOCfolk"; //Óáèò ÷åëîâåê èç Ñòàðîãî Ëàãåðÿ, è êîå-êòî ñâÿçûâàåò òåáÿ ñ ýòèì óáèéñòâîì...
    youkilledncfolk = "SVM_11_YouKilledNCfolk"; //Íîâûé Ëàãåðü ïîíåñ òÿæåëóþ óòðàòó, è, ïîõîæå, òû ïðè÷àñòåí ê ýòîìó!
    youkilledpsifolk = "SVM_11_YouKilledPSIfolk"; //Áðàòñòâî ïîòåðÿëî îäíîãî èç ñâîèõ ÷ëåíîâ, è ýòà æèçíü íà òâîåé ñîâåñòè!
    getthingsright = "SVM_11_GetThingsRight"; //Òåáå áóäåò íåëåãêî îïðàâäàòüñÿ!
    youdefeatedmewell = "SVM_11_YouDefeatedMeWell"; //Ýòî áûë õîðîøèé áîé, ÿ åãî íàäîëãî çàïîìíþ. Íî ñåé÷àñ îí çàêîí÷åí!
    smalltalk01 = "SVM_11_Smalltalk01"; //...åñëè òû äóìàåøü...
    smalltalk02 = "SVM_11_Smalltalk02"; //...ìîæåò áûòü...
    smalltalk03 = "SVM_11_Smalltalk03"; //...ýòî áûëî íå ñëèøêîì óìíî...
    smalltalk04 = "SVM_11_Smalltalk04"; //...ÿ íå õî÷ó â ýòî ââÿçûâàòüñÿ...
    smalltalk05 = "SVM_11_Smalltalk05"; //...ýòî òî÷íî íå ìîÿ ïðîáëåìà...
    smalltalk06 = "SVM_11_Smalltalk06"; //...ïîõîæå, íàçðåâàåò ïðîáëåìà...
    smalltalk07 = "SVM_11_Smalltalk07"; //...äåðæè ýòî ïðè ñåáå, ëþäÿì íåîáÿçàòåëüíî çíàòü îá ýòîì.
    smalltalk08 = "SVM_11_Smalltalk08"; //...áîëüøå ýòîãî íå ñëó÷èòñÿ...
    smalltalk09 = "SVM_11_Smalltalk09"; //...÷òî-òî íå òî â ýòîé èñòîðèè...
    smalltalk10 = "SVM_11_Smalltalk10"; //...òû äîëæåí ñëåäèòü çà òåì, ÷òî ãîâîðèøü ëþäÿì...
    smalltalk11 = "SVM_11_Smalltalk11"; //...ïîêà ìåíÿ íå âïóòàëè...
    smalltalk12 = "SVM_11_Smalltalk12"; //...òû íå äîëæåí âåðèòü âñåìó, ÷òî ñëûøèøü...
    smalltalk13 = "SVM_11_Smalltalk13"; //...íå õîòåë áû ÿ îêàçàòüñÿ íà åãî ìåñòå...
    smalltalk14 = "SVM_11_Smalltalk14"; //...êàæäûé ðàç îäíà è òà æå èñòîðèÿ...
    smalltalk15 = "SVM_11_Smalltalk15"; //...íåêîòîðûõ ëþäåé íè÷åãî íå ó÷èò...
    smalltalk16 = "SVM_11_Smalltalk16"; //...áûëè âðåìåíà, êîãäà âñå áûëî ñîâñåì ïî-äðóãîìó...
    smalltalk17 = "SVM_11_Smalltalk17"; //...ëþäè âñåãäà áîëòàþò...
    smalltalk18 = "SVM_11_Smalltalk18"; //...ÿ áîëüøå íå ñëóøàþ âñÿêóþ òðåïîòíþ...
    smalltalk19 = "SVM_11_Smalltalk19"; //...âåðèøü êîìó-òî - è â ðåçóëüòàòå ïîïàäàåøü â íåïðèÿòíîñòè, òàê âñåãäà è áûâàåò...
    smalltalk20 = "SVM_11_Smalltalk20"; //...ÿ ñîìíåâàþñü, ÷òî ýòî êîãäà-íèáóäü èçìåíèòñÿ...
    smalltalk21 = "SVM_11_Smalltalk21"; //...ñêîðåå âñåãî, òû ïðàâ...
    smalltalk22 = "SVM_11_Smalltalk22"; //...äåðæèñü. Ëó÷øå íè íà ÷òî íå íàòûêàòüñÿ...
    smalltalk23 = "SVM_11_Smalltalk23"; //...ÿ äóìàë, ýòî âûÿñíèëè åùå î÷åíü äàâíî...
    smalltalk24 = "SVM_11_Smalltalk24"; //...äàâàé ïîãîâîðèì î ÷åì-íèáóäü åùå...
    om = "SVM_11_Om"; //Îììì...
};

instance svm_12(c_svm) {
    stopmagic = "SVM_12_StopMagic"; //Ïåðåñòàíü êîëäîâàòü!
    isaidstopmagic = "SVM_12_ISaidStopMagic"; //Êîãäà ÿ ãîâîðþ 'Ïðåêðàòè êîëäîâàòü!', ýòî îçíà÷àåò - íèêàêîé ìàãèè! ßñíî?
    weapondown = "SVM_12_WeaponDown"; //×òî òû ñîáèðàåøüñÿ äåëàòü ñ îðóæåì, ïàðåíü?
    isaidweapondown = "SVM_12_ISaidWeaponDown"; //Óáåðè ýòó øòóêîâèíó!
    watchyouraim = "SVM_12_WatchYourAim"; //Òû öåëèøüñÿ â ìåíÿ!
    watchyouraimangry = "SVM_12_WatchYourAimAngry"; //Åñëè íå ïðåêðàòèøü, ó òåáÿ áóäóò ïðîáëåìû!
    whatareyoudoing = "SVM_12_WhatAreYouDoing"; //Ýé, òû ñëåïîé èëè êàê?
    letsforgetourlittlefight = "SVM_12_LetsForgetOurLittleFight"; //Çàáóäåì îá ýòîì, ëàäíî?
    strange = "SVM_12_Strange"; //Íî îí áûë çäåñü ñåêóíäó íàçàä!? Ñòðàííî!
    diemonster = "SVM_12_DieMonster"; //Òâîÿ î÷åðåäü, óáëþäîê!
    diemortalenemy = "SVM_12_DieMortalEnemy"; //Ïðèøëî âðåìÿ ðàñïëàòû!
    nowwait = "SVM_12_NowWait"; //Òû íàïðàøèâàåøüñÿ íà õîðîøóþ âçáó÷êó!
    youstillnothaveenough = "SVM_12_YouStillNotHaveEnough"; //Òåáå âñå åùå ìàëî?
    youaskedforit = "SVM_12_YouAskedForIt"; //Íó, òû ñàì íàïðîñèëñÿ!
    nowwaitintruder = "SVM_12_NowWaitIntruder"; //Òåáÿ äîëæíû âûíåñòè îòñþäà!
    iwillteachyourespectforforeignproperty = "SVM_12_IWillTeachYouRespectForForeignProperty"; //ß ïðåäóïðåäèë òåáÿ. Äîòðîíåøüñÿ äî ìîèõ âåùåé, è áóäåò õóäî!
    dirtythief = "SVM_12_DirtyThief"; //Âîð! ß íàó÷ó òåáÿ õîðîøèì ìàíåðàì!
    youattackedmycharge = "SVM_12_YouAttackedMyCharge"; //Âñå, êòî îáèæàë ìîèõ äðóçåé, ïîòîì ñèëüíî ðàñêàèâàëèñü â ýòîì!
    youkilledoneofus = "SVM_12_YouKilledOneOfUs"; //Òû óáèë îäíîãî èç ìîèõ ëþäåé. Òåïåðü ÿ óáüþ ÒÅÁß!
    dead = "SVM_12_Dead"; //Àààðãë!
    aargh_1 = "SVM_12_Aargh_1"; //Àààðã!
    aargh_2 = "SVM_12_Aargh_2"; //Àààðã!
    aargh_3 = "SVM_12_Aargh_3"; //Àààðã!
    berzerk = "SVM_12_Berzerk"; //ÓÓÀÀÀÐÐÃÃÃÕÕÕ!!!
    youllbesorryforthis = "SVM_12_YoullBeSorryForThis"; //Òû îá ýòîì ïîæàëååøü!
    yesyes = "SVM_12_YesYes"; //Ñïîêîéíî! Òû ïîáåäèë.
    shitwhatamonster = "SVM_12_ShitWhatAMonster"; //Ýòîò ìíå íå ïî çóáàì!
    help = "SVM_12_Help"; //×åðò!
    wewillmeetagain = "SVM_12_WeWillMeetAgain"; //Â ñëåäóþùèé ðàç âñå áóäåò ïî-äðóãîìó!
    nevertrythatagain = "SVM_12_NeverTryThatAgain"; //Áîëüøå íå äåëàé ýòîãî!
    itakeyourweapon = "SVM_12_ITakeYourWeapon"; //Ìíå íðàâèòñÿ ýòî îðóæèå!
    itookyourore = "SVM_12_ITookYourOre"; //ß ïîñòàðàþñü ñ ïîëüçîé ïîòðàòèòü òâîþ ðóäó!
    shitnoore = "SVM_12_ShitNoOre"; //Ïðîêëÿòüå! Ðóäû íåò!
    handsoff = "SVM_12_HandsOff"; //Óáåðè ðóêè!
    getoutofhere = "SVM_12_GetOutOfHere"; //Óáèðàéñÿ îòñþäà!
    youviolatedforbiddenterritory = "SVM_12_YouViolatedForbiddenTerritory"; //Ýé! Îòêóäà òû?
    youwannafoolme = "SVM_12_YouWannaFoolMe"; //Òû äóìàåøü, ÿ íàñòîëüêî òóïîé?!
    whatsthissupposedtobe = "SVM_12_WhatsThisSupposedToBe"; //×òî òû çäåñü øëÿåøüñÿ?
    whyareyouinhere = "SVM_12_WhyYouAreInHere"; //Óáèðàéñÿ îòñþäà, èëè ÿ ïîçîâó ñòðàæó!
    whatdidyouinthere = "SVM_12_WhatDidYouInThere"; //Òåáå çäåñü íå÷åãî äåëàòü!
    wisemove = "SVM_12_WiseMove"; //Òû áûñòðî ó÷èøüñÿ!
    alarm = "SVM_12_Alarm"; //Ñòðàæà! Ñþäà!
    intruderalert = "SVM_12_IntruderAlert"; //ÒÐÅÂÎÃÀ!!!
    behindyou = "SVM_12_BehindYou"; //Ñìîòðè, ÷òî äåëàåøü!
    theresafight = "SVM_12_TheresAFight"; //Äðàêà!
    heyheyhey = "SVM_12_HeyHeyHey"; //Êàê òåáå ýòî?!
    cheerfight = "SVM_12_CheerFight"; //Õîðîøî!
    cheerfriend = "SVM_12_CheerFriend"; //Âðåæü åìó åùå ðàçîê!
    ooh = "SVM_12_Ooh"; //Îñòîðîæíåé!
    yeahwelldone = "SVM_12_YeahWellDone"; //Êàê ðàç âîâðåìÿ!
    runcoward = "SVM_12_RunCoward"; //Îí óäèðàåò!
    hedefeatedhim = "SVM_12_HeDefeatedHim"; //ß áû ñêàçàë, ÷èñòàÿ ïîáåäà!
    hedeservedit = "SVM_12_HeDeservedIt"; //Îí ýòî çàñëóæèë!
    hekilledhim = "SVM_12_HeKilledHim"; //Òû óáèâàåøü ëþäåé. Òåïåðü ó òåáÿ áîëüøèå íåïðèÿòíîñòè!
    itwasagoodfight = "SVM_12_ItWasAGoodFight"; //×òî çà áîé!
    awake = "SVM_12_Awake"; //[çåâîê]
    friendlygreetings = "SVM_12_FriendlyGreetings"; //Ïðèâåò, äðóã!
    algreetings = "SVM_12_ALGreetings"; //Çà Ãîìåçà!
    magegreetings = "SVM_12_MageGreetings"; //Âî èìÿ ìàãèè!
    sectgreetings = "SVM_12_SectGreetings"; //Ïðîñíèñü!
    thereheis = "SVM_12_ThereHeIs"; //Ñþäà.
    nolearnnopoints = "SVM_12_NoLearnNoPoints"; //ß íå ìîãó ó÷èòü òåáÿ, òû ñëèøêîì íåîïûòåí.
    nolearnovermax = "SVM_12_NoLearnOverMax"; //Òû íà ïðåäåëå ñâîèõ âîçìîæíîñòåé. Òåáå íóæíî íàó÷èòüñÿ ÷åìó-íèáóäü åùå.
    nolearnyoualreadyknow = "SVM_12_NoLearnYouAlreadyKnow"; //Òåáå íóæíî íàáðàòüñÿ îïûòà, ïðåæäå ÷åì òû ñìîæåøü ñòàòü ìàñòåðîì.
    nolearnyourebetter = "SVM_12_NoLearnYoureBetter"; //Óæå ëó÷øå!
    heyyou = "SVM_12_HeyYou"; //Ýé, òû!
    notnow = "SVM_12_NotNow"; //Íå ñåé÷àñ.
    whatdoyouwant = "SVM_12_WhatDoYouWant"; //Òåáå ïîìî÷ü?
    isaidwhatdoyouwant = "SVM_12_ISaidWhatDoYouWant"; //×òî òû õî÷åøü?
    makeway = "SVM_12_MakeWay"; //Äàé ìíå ïðîéòè!
    outofmyway = "SVM_12_OutOfMyWay"; //Íó æå, ìíå íóæíî ïðîéòè!
    youdeaforwhat = "SVM_12_YouDeafOrWhat"; //Òû ãëóõîé èëè èùåøü íåïðèÿòíîñòåé?
    lookingfortroubleagain = "SVM_12_LookingForTroubleAgain"; //Ñíîâà èùåøü íåïðèÿòíîñòåé?
    lookaway = "SVM_12_LookAway"; //×òî-òî ñëó÷èëîñü? ß ÍÈ×ÅÃÎ íå âèäåë...
    okaykeepit = "SVM_12_OkayKeepIt"; //Ëàäíî, çàáèðàé ýòî!
    whatsthat = "SVM_12_WhatsThat"; //×òî ýòî áûëî?
    thatsmyweapon = "SVM_12_ThatsMyWeapon"; //ß õî÷ó ïîëó÷èòü íàçàä ñâîå îðóæèå!
    giveittome = "SVM_12_GiveItToMe"; //Äàâàé ñþäà!
    youcankeepthecrap = "SVM_12_YouCanKeeptheCrap"; //Íó, íå òàê óæ ïëîõî! Ó ìåíÿ åñòü åùå!
    theykilledmyfriend = "SVM_12_TheyKilledMyFriend"; //Óáèëè îäíîãî èç íàøèõ! Åñëè ÿ äîáåðóñü äî ýòîãî íàãëåöà...
    youdisturbedmyslumber = "SVM_12_YouDisturbedMySlumber"; //Õ-ì, ÷òî åùå? Çà÷åì òû ìåíÿ ðàçáóäèë?
    suckergotsome = "SVM_12_SuckerGotSome"; //À? Ïîëó÷èë â ìîðäó? Ýòî ïîñëóæèò òåáå óðîêîì!
    suckerdefeatedebr = "SVM_12_SuckerDefeatedEBr"; //Òû óäàðèë Áàðîíà. Ýòî åãî âïå÷àòëèëî, äà åùå êàê!
    suckerdefeatedgur = "SVM_12_SuckerDefeatedGur"; //Òû ïîáåäèë îäíîãî èç Ãóðó! Âïå÷àòëÿåò. Íî äàæå íå ïûòàéñÿ ñäåëàòü ýòî åùå ðàç.
    suckerdefeatedmage = "SVM_12_SuckerDefeatedMage"; //Ïîáåäèòü ìàãà... òû, äîëæíî áûòü, õðàáðûé ïàðåíü!
    suckerdefeatednov_guard = "SVM_12_SuckerDefeatedNov_Guard"; //Òîëüêî èäèîò áóäåò äðàòüñÿ ñ íîâè÷êàìè!
    suckerdefeatedvlk_guard = "SVM_12_SuckerDefeatedVlk_Guard"; //Äóìàåøü, òåáå ïîçâîëåíî áèòü ðóäîêîïîâ?
    youdefeatedmycomrade = "SVM_12_YouDefeatedMyComrade"; //Òû óäàðèë ìîåãî äðóãà - êàêîãî ÷åðòà?!
    youdefeatednov_guard = "SVM_12_YouDefeatedNOV_Guard"; //Åùå ðàç îáèäèøü íîâè÷êà, è òû ïîæàëååøü!
    youdefeatedvlk_guard = "SVM_12_YouDefeatedVLK_Guard"; //Òû õðàáðûé ïàðåíü, íî íèêîìó íå ïîçâîëåíî îáèæàòü òåõ, êîãî ÿ çàùèùàþ.
    youstolefromme = "SVM_12_YouStoleFromMe"; //Êàê òû ïîñìåë ïîÿâèòüñÿ çäåñü, ãðÿçíûé âîðèøêà?
    youstolefromus = "SVM_12_YouStoleFromUs"; //Ó òåáÿ åñòü ÷òî-òî, ÷òî ïðèíàäëåæèò íàì. Ëó÷øå áû òåáå âåðíóòü ýòî íàçàä!
    youstolefromebr = "SVM_12_YouStoleFromEBr"; //Ïàðåíü! Òû îáîêðàë Áàðîíîâ! Îíè áóäóò â ÿðîñòè!
    youstolefromgur = "SVM_12_YouStoleFromGur"; //Òû îáîêðàë Ãóðó! Òåáå íå ñòîèëî ïîïàäàòüñÿ íà ýòîì!
    stolefrommage = "SVM_12_StoleFromMage"; //Ìàãè íå ëþáÿò òåõ, êòî ðîåòñÿ â èõ âåùàõ!
    youkilledmyfriend = "SVM_12_YouKilledMyFriend"; //Æèçíü îäíîãî èç íàøèõ ëþäåé íà òâîåé ñîâåñòè. Åùå îäíà îøèáêà, è íàñòàíåò òâîÿ î÷åðåäü!
    youkilledebr = "SVM_12_YouKilledEBr"; //Òû óáèë Áàðîíà! Ïàðåíü, òû îêîí÷àòåëüíî ñïÿòèë?!
    youkilledgur = "SVM_12_YouKilledGur"; //Òû óáèë Ãóðó! ß ãëàçàì ñâîèì íå âåðþ!
    youkilledmage = "SVM_12_YouKilledMage"; //Òû óáèë ìàãà! Êàê òû ñîáèðàåøüñÿ îáúÿñíèòü ýòî?
    youkilledocfolk = "SVM_12_YouKilledOCfolk"; //Óáèò ÷åëîâåê èç Ñòàðîãî Ëàãåðÿ, è êîå-êòî ñâÿçûâàåò òåáÿ ñ ýòèì óáèéñòâîì...
    youkilledncfolk = "SVM_12_YouKilledNCfolk"; //Íîâûé Ëàãåðü ïîíåñ òÿæåëóþ óòðàòó, è, ïîõîæå, òû ïðè÷àñòåí ê ýòîìó!
    youkilledpsifolk = "SVM_12_YouKilledPSIfolk"; //Áðàòñòâî ïîòåðÿëî îäíîãî èç ñâîèõ ÷ëåíîâ, è ýòà æèçíü íà òâîåé ñîâåñòè!
    getthingsright = "SVM_12_GetThingsRight"; //Òåáå áóäåò íåëåãêî îïðàâäàòüñÿ!
    youdefeatedmewell = "SVM_12_YouDefeatedMeWell"; //Òû çàäàë ìíå õîðîøó òðåïêó, ïàðåíü. Ýòî áûë õîðîøèé áîé, íî ñåé÷àñ îí îêîí÷åí!
    smalltalk01 = "SVM_12_Smalltalk01"; //...åñëè òû äóìàåøü...
    smalltalk02 = "SVM_12_Smalltalk02"; //...ìîæåò áûòü...
    smalltalk03 = "SVM_12_Smalltalk03"; //...ýòî áûëî íå ñëèøêîì óìíî...
    smalltalk04 = "SVM_12_Smalltalk04"; //...ÿ íå õî÷ó â ýòî ââÿçûâàòüñÿ...
    smalltalk05 = "SVM_12_Smalltalk05"; //...ýòî òî÷íî íå ìîÿ ïðîáëåìà...
    smalltalk06 = "SVM_12_Smalltalk06"; //...ïîõîæå, íàçðåâàåò ïðîáëåìà...
    smalltalk07 = "SVM_12_Smalltalk07"; //...äåðæè ýòî ïðè ñåáå, ëþäÿì íåîáÿçàòåëüíî çíàòü îá ýòîì.
    smalltalk08 = "SVM_12_Smalltalk08"; //...áîëüøå ýòîãî íå ñëó÷èòñÿ...
    smalltalk09 = "SVM_12_Smalltalk09"; //...÷òî-òî íå òî â ýòîé èñòîðèè...
    smalltalk10 = "SVM_12_Smalltalk10"; //...òû äîëæåí ñëåäèòü çà òåì, ÷òî ãîâîðèøü ëþäÿì...
    smalltalk11 = "SVM_12_Smalltalk11"; //...ïîêà ìåíÿ íå âïóòàëè...
    smalltalk12 = "SVM_12_Smalltalk12"; //...òû íå äîëæåí âåðèòü âñåìó...
    smalltalk13 = "SVM_12_Smalltalk13"; //...íå õîòåë áû ÿ îêàçàòüñÿ íà åãî ìåñòå...
    smalltalk14 = "SVM_12_Smalltalk14"; //...êàæäûé ðàç îäíà è òà æå èñòîðèÿ...
    smalltalk15 = "SVM_12_Smalltalk15"; //...íåêîòîðûõ ëþäåé íè÷åãî íå ó÷èò...
    smalltalk16 = "SVM_12_Smalltalk16"; //...áûëè âðåìåíà, êîãäà âñå áûëî ñîâñåì ïî-äðóãîìó...
    smalltalk17 = "SVM_12_Smalltalk17"; //...ëþäè âñåãäà áîëòàþò...
    smalltalk18 = "SVM_12_Smalltalk18"; //...ÿ áîëüøå íå ñëóøàþ âñÿêóþ òðåïîòíþ...
    smalltalk19 = "SVM_12_Smalltalk19"; //...âåðèøü êîìó-òî - è â ðåçóëüòàòå ïîïàäàåøü â íåïðèÿòíîñòè, òàê âñåãäà è áûâàåò...
    smalltalk20 = "SVM_12_Smalltalk20"; //...ÿ ñîìíåâàþñü, ÷òî ýòî êîãäà-íèáóäü èçìåíèòñÿ...
    smalltalk21 = "SVM_12_Smalltalk21"; //...ñêîðåå âñåãî, òû ïðàâ...
    smalltalk22 = "SVM_12_Smalltalk22"; //...äåðæèñü. Ëó÷øå íè íà ÷òî íå íàòûêàòüñÿ...
    smalltalk23 = "SVM_12_Smalltalk23"; //...ÿ äóìàë, ýòî âûÿñíèëè åùå î÷åíü äàâíî...
    smalltalk24 = "SVM_12_Smalltalk24"; //...äàâàé ïîãîâîðèì î ÷åì-íèáóäü åùå...
    om = "SVM_12_Om"; //Îììì...
};

instance svm_13(c_svm) {
    stopmagic = "SVM_13_StopMagic"; //Ïåðåñòàíü êîëäîâàòü!
    isaidstopmagic = "SVM_13_ISaidStopMagic"; //Ïðåêðàòè, ÏÐÅÊÐÀÒÈ!
    weapondown = "SVM_13_WeaponDown"; //Óáåðè îðóæèå!
    isaidweapondown = "SVM_13_ISaidWeaponDown"; //Óáåðè ýòî îðóæèå!
    watchyouraim = "SVM_13_WatchYourAim"; //Òû öåëèøüñÿ â ìåíÿ? Ñìîòðè, ÷òî äåëàåøü!
    watchyouraimangry = "SVM_13_WatchYourAimAngry"; //Òû íàðûâàåøüñÿ íà íåïðèÿòíîñòè. Âûáåðè ñåáå äðóãóþ öåëü!
    whatareyoudoing = "SVM_13_WhatAreYouDoing"; //Ýòî åùå çà÷åì?
    letsforgetourlittlefight = "SVM_13_LetsForgetOurLittleFight"; //Çàáóäåì îá ýòîì, ëàäíî?
    strange = "SVM_13_Strange"; //Êóäà îí äåëñÿ? Ýòîãî íå ìîæåò áûòü!
    diemonster = "SVM_13_DieMonster"; //Íà óæèí ó íàñ áóäåò ìÿñî!
    diemortalenemy = "SVM_13_DieMortalEnemy"; //Ïðèøåë òâîé ÷åðåä! Íèêàêîé ïîùàäû!
    nowwait = "SVM_13_NowWait"; //Ýòî îçíà÷àåò õîðîøóþ âçáó÷êó...
    youstillnothaveenough = "SVM_13_YouStillNotHaveEnough"; //Áîëüøå íå õî÷åøü, à?
    youaskedforit = "SVM_13_YouAskedForIt"; //Òû ñàì íàïðîñèëñÿ!
    nowwaitintruder = "SVM_13_NowWaitIntruder"; //Òåáå êðûøêà, ÷óæàê!
    iwillteachyourespectforforeignproperty = "SVM_13_IWillTeachYouRespctForForeignProperty"; //ß äîëæåí îòðóáèòü òåáå ðóêè!
    dirtythief = "SVM_13_DirtyThief"; //Ãðÿçíûé âîðèøêà! ß ñëîìàþ òåáå ðóêè!
    youattackedmycharge = "SVM_13_YouAttackedMyCharge"; //Íèêîìó, êðîìå ìåíÿ, íå ïîçâîëåíî çàòåâàòü çäåñü äðàêó!
    youkilledoneofus = "SVM_13_YouKilledOneOfUs"; //Òû óáèë îäíîãî èç íàøèõ!
    dead = "SVM_13_Dead"; //Àààðãë!
    aargh_1 = "SVM_13_Aargh_1"; //Àààðã!
    aargh_2 = "SVM_13_Aargh_2"; //Àààðã!
    aargh_3 = "SVM_13_Aargh_3"; //Àààðã!
    berzerk = "SVM_13_Berzerk"; //ÓÓÀÀÀÐÐÃÃÃÕÕÕ!!!
    youllbesorryforthis = "SVM_13_YoullBeSorryForThis"; //Ó òåáÿ íå áóäåò âðåìåíè, ÷òîáû ïîæàëåòü îá ýòîì!
    yesyes = "SVM_13_YesYes"; //Íåò ïðîáëåì, íèêàêèõ ïðîáëåì!
    shitwhatamonster = "SVM_13_ShitWhatAMonster"; //Ó ìåíÿ íåò ïîäõîäÿùåãî îðóæèÿ. Ìû åùå âñòðåòèìñÿ...
    help = "SVM_13_Help"; //Óîîîîîîîààà! Óáèðàéñÿ îòñþäà!
    wewillmeetagain = "SVM_13_WeWillMeetAgain"; //Ìû åùå âñòðåòèìñÿ!
    nevertrythatagain = "SVM_13_NeverTryThatAgain"; //Â ñëåäóþùèé ðàç ÿ óáüþ òåáÿ!
    itakeyourweapon = "SVM_13_ITakeYourWeapon"; //Õîðîøåå îðóæèå! Òâîå? Íåò? Ëàäíî!
    itookyourore = "SVM_13_ITookYourOre"; //ß äóìàþ, òû íå áóäåøü âîçðàæàòü, åñëè ÿ çàáåðó íåìíîãî ðóäû.
    shitnoore = "SVM_13_ShitNoOre"; //Ó òåáÿ äàæå íåò ðóäû!
    handsoff = "SVM_13_HandsOff"; //Òû, êðûñà! Óáåðè ðóêè!
    getoutofhere = "SVM_13_GetOutOfHere"; //Ïðîâàëèâàé! Óáèðàéñÿ îòñþäà!
    youviolatedforbiddenterritory = "SVM_13_YouViolatedForbiddenTerritory"; //È âîîáùå, ÷òî òû çäåñü äåëàåøü?
    youwannafoolme = "SVM_13_YouWannaFoolMe"; //Òû äåéñòâèòåëüíî ïûòàåøüñÿ ìåíÿ îäóðà÷èòü?!
    whatsthissupposedtobe = "SVM_13_WhatsThisSupposedToBe"; //Ýé, òû! ×òî òû çäåñü øëÿåøüñÿ?
    whyareyouinhere = "SVM_13_WhyYouAreInHere"; //×òî òû çäåñü äåëàåøü? Óäèðàé, èëè ÿ ïîçîâó ñòðàæó!
    whatdidyouinthere = "SVM_13_WhatDidYouInThere"; //Òåáå çäåñü íå÷åãî äåëàòü!
    wisemove = "SVM_13_WiseMove"; //Íà ýòîò ðàç òåáå ïîâåçëî! Íî ÿ áû ñ óäîâîëüñòâèåì íàáèë òåáå ìîðäó!
    alarm = "SVM_13_Alarm"; //Ñòðàæà, ñþäà!
    intruderalert = "SVM_13_IntruderAlert"; //ÒÐÅÂÎÃÀ!!!
    behindyou = "SVM_13_BehindYou"; //Ñçàäè!
    theresafight = "SVM_13_TheresAFight"; //Ïîñìîòðèì-êà, êòî ñåé÷àñ îêàæåòñÿ â ïûëè.
    heyheyhey = "SVM_13_HeyHeyHey"; //Äà, ñíîâà!
    cheerfight = "SVM_13_CheerFight"; //ß õî÷ó óâèäåòü êðîâü!
    cheerfriend = "SVM_13_CheerFriend"; //Äàâàé æå!
    ooh = "SVM_13_Ooh"; //Áåé â îòâåò, èäèîò!
    yeahwelldone = "SVM_13_YeahWellDone"; //Äàààà!!!
    runcoward = "SVM_13_RunCoward"; //Äà, ïðîâàëèâàé!
    hedefeatedhim = "SVM_13_HeDefeatedHim"; //Ïå÷àëüíîå çðåëèùå! Ìàëåéøèé âåòåðîê, è îí âñå ðàâíî ñâàëèòñÿ.
    hedeservedit = "SVM_13_HeDeservedIt"; //Òüôó, ýòî ïîñëóæèò åìó õîðîøèì óðîêîì!
    hekilledhim = "SVM_13_HeKilledHim"; //Óáèòü êîãî-òî íà ãëàçàõ ó ñâèäåòåëåé ðàâíîñèëüíî ñàìîóáèéñòâó.
    itwasagoodfight = "SVM_13_ItWasAGoodFight"; //Õîðîøèé áîé!
    awake = "SVM_13_Awake"; //[çåâîê]
    friendlygreetings = "SVM_13_FriendlyGreetings"; //Ñ òîáîé âñå â ïîðÿäêå?
    algreetings = "SVM_13_ALGreetings"; //Çà Ãîìåçà!
    magegreetings = "SVM_13_MageGreetings"; //Âî èìÿ ìàãèè!
    sectgreetings = "SVM_13_SectGreetings"; //Ïðîñíèñü!
    thereheis = "SVM_13_ThereHeIs"; //Òû ÷òî, îñëåï? Ñþäà!
    nolearnnopoints = "SVM_13_NoLearnNoPoints"; //ß íå ìîãó ó÷èòü òåáÿ, òû ñëèøêîì íåîïûòåí.
    nolearnovermax = "SVM_13_NoLearnOverMax"; //Òû íà ïðåäåëå ñâîèõ âîçìîæíîñòåé. Òåáå íóæíî íàó÷èòüñÿ ÷åìó-íèáóäü åùå.
    nolearnyoualreadyknow = "SVM_13_NoLearnYouAlreadyKnow"; //Òåáå íóæíî íàáðàòüñÿ îïûòà, ïðåæäå ÷åì òû ñìîæåøü ñòàòü ìàñòåðîì.
    nolearnyourebetter = "SVM_13_NoLearnYoureBetter"; //Óæå ëó÷øå!
    heyyou = "SVM_13_HeyYou"; //Ýé, òû!
    notnow = "SVM_13_NotNow"; //Íå ñåé÷àñ.
    whatdoyouwant = "SVM_13_WhatDoYouWant"; //×åãî òû îò ìåíÿ õî÷åøü?
    isaidwhatdoyouwant = "SVM_13_ISaidWhatDoYouWant"; //ß ìîãó ÷òî-òî ñäåëàòü?
    makeway = "SVM_13_MakeWay"; //Äàé ìíå ïðîéòè.
    outofmyway = "SVM_13_OutOfMyWay"; //Óéäè ñ äîðîãè!
    youdeaforwhat = "SVM_13_YouDeafOrWhat"; //Òû èùåøü íåïðèÿòíîñòåé? Óáèðàéñÿ îòñþäà!
    lookingfortroubleagain = "SVM_13_LookingForTroubleAgain"; //Ñíîâà èùåøü íåïðèÿòíîñòåé?
    lookaway = "SVM_13_LookAway"; //ß ÍÈ×ÅÃÎ íå âèäåë...
    okaykeepit = "SVM_13_OkayKeepIt"; //Ëåã÷å. Ýòî òåïåðü òâîå.
    whatsthat = "SVM_13_WhatsThat"; //×òî ýòî áûëî?
    thatsmyweapon = "SVM_13_ThatsMyWeapon"; //Îòäàé ìîå îðóæèå!
    giveittome = "SVM_13_GiveItToMe"; //Äàâàé ñþäà!
    youcankeepthecrap = "SVM_13_YouCanKeeptheCrap"; //Ëàäíî! Îñòàâü ñåáå! ß ÷òî-íèáóäü ïðèäóìàþ!
    theykilledmyfriend = "SVM_13_TheyKilledMyFriend"; //Óáèëè îäíîãî èç íàøèõ! Ìû äîëæíû îòîìñòèòü!
    youdisturbedmyslumber = "SVM_13_YouDisturbedMySlumber"; //Çà÷åì òû ìåíÿ ðàçáóäèë?
    suckergotsome = "SVM_13_SuckerGotSome"; //Ýòà âçáó÷êà ïîñëóæèò òåáå õîðîøèì óðîêîì!
    suckerdefeatedebr = "SVM_13_SuckerDefeatedEBr"; //Òû óäàðèë Áàðîíà. Îí òàê çîë!
    suckerdefeatedgur = "SVM_13_SuckerDefeatedGur"; //Òû óäàðèë Ãóðó. Ïîõîæå, ó òåáÿ òàëàíò íàõîäèòü íåïðèÿòíîñòè!
    suckerdefeatedmage = "SVM_13_SuckerDefeatedMage"; //Ïîáåäèòü ìàãà... ÷òî çà äóðàöêàÿ èäåÿ!
    suckerdefeatednov_guard = "SVM_13_SuckerDefeatedNov_Guard"; //Çíà÷èò, òû è åñòü òîò, êòî îáèæàåò íîâè÷êîâ!
    suckerdefeatedvlk_guard = "SVM_13_SuckerDefeatedVlk_Guard"; //Îñòàâü ìîèõ ëþäåé â ïîêîå!
    youdefeatedmycomrade = "SVM_13_YouDefeatedMyComrade"; //Îáèæàòü ìîèõ äðóçåé - ýòî íå î÷åíü õîðîøàÿ èäåÿ.
    youdefeatednov_guard = "SVM_13_YouDefeatedNOV_Guard"; //Åäâà ëè âñå áóäóò äîëãî òåðïåòü òâîè âûõîäêè!
    youdefeatedvlk_guard = "SVM_13_YouDefeatedVLK_Guard"; //Ïðåæäå ÷åì óäàðèòü òîãî, êòî íàõîäèòñÿ ïîä ìîåé çàùèòîé, ïîäóìàé î ïîñëåäñòâèÿõ!
    youstolefromme = "SVM_13_YouStoleFromMe"; //Òû îáîêðàë ìåíÿ! Áîëüøå íå ïîïàäàéñÿ ìíå íà ãëàçà!
    youstolefromus = "SVM_13_YouStoleFromUs"; //Ìû õîòèì ïîëó÷èòü íàçàä ñâîè âåùè! Îòäàâàé èõ!
    youstolefromebr = "SVM_13_YouStoleFromEBr"; //Òû îáîêðàë Áàðîíîâ! Çà÷åì òåáå ýòî ïîíàäîáèëîñü?
    youstolefromgur = "SVM_13_YouStoleFromGur"; //Âîðóåøü ó Ãóðó? Æàëü, ÷òî îíè ðàñêðûëè òåáÿ.
    stolefrommage = "SVM_13_StoleFromMage"; //Òû îáîêðàë ìàãîâ! ×òî çà äóðàöêàÿ èäåÿ!
    youkilledmyfriend = "SVM_13_YouKilledMyFriend"; //Æèçíü îäíîãî èç íàøèõ ëþäåé íà òâîåé ñîâåñòè. Åùå îäíà îøèáêà, è íàñòàíåò òâîÿ î÷åðåäü!
    youkilledebr = "SVM_13_YouKilledEBr"; //Òû óáèë Áàðîíà! Ïàðåíü, òû îêîí÷àòåëüíî ñïÿòèë?!
    youkilledgur = "SVM_13_YouKilledGur"; //Òû óáèë Ãóðó! ß ãëàçàì ñâîèì íå âåðþ!
    youkilledmage = "SVM_13_YouKilledMage"; //Òû óáèë ìàãà! Êàê òû ñîáèðàåøüñÿ îáúÿñíèòü ýòî?
    youkilledocfolk = "SVM_13_YouKilledOCfolk"; //Óáèò ÷åëîâåê èç Ñòàðîãî Ëàãåðÿ, è êîå-êòî ñâÿçûâàåò òåáÿ ñ ýòèì óáèéñòâîì...
    youkilledncfolk = "SVM_13_YouKilledNCfolk"; //Íîâûé Ëàãåðü ïîíåñ òÿæåëóþ óòðàòó, è, ïîõîæå, òû ïðè÷àñòåí ê ýòîìó!
    youkilledpsifolk = "SVM_13_YouKilledPSIfolk"; //Áðàòñòâî ïîòåðÿëî îäíîãî èç ñâîèõ ÷ëåíîâ, è ýòà æèçíü íà òâîåé ñîâåñòè!
    getthingsright = "SVM_13_GetThingsRight"; //Òåáå íåëåãêî áóäåò îïðàâäàòüñÿ!
    youdefeatedmewell = "SVM_13_YouDefeatedMeWell"; //Òû çàäàë ìíå õîðîøó òðåïêó, ïàðåíü. Ýòî áûë õîðîøèé áîé, íî ñåé÷àñ îí îêîí÷åí!
    smalltalk01 = "SVM_13_Smalltalk01"; //...åñëè òû äóìàåøü...
    smalltalk02 = "SVM_13_Smalltalk02"; //...ìîæåò áûòü...
    smalltalk03 = "SVM_13_Smalltalk03"; //...ýòî áûëî íå ñëèøêîì óìíî...
    smalltalk04 = "SVM_13_Smalltalk04"; //...ÿ íå õî÷ó â ýòî ââÿçûâàòüñÿ...
    smalltalk05 = "SVM_13_Smalltalk05"; //...ýòî òî÷íî íå ìîÿ ïðîáëåìà...
    smalltalk06 = "SVM_13_Smalltalk06"; //...ïîõîæå, íàçðåâàåò ïðîáëåìà...
    smalltalk07 = "SVM_13_Smalltalk07"; //...äåðæè ýòî ïðè ñåáå, ëþäÿì íåîáÿçàòåëüíî çíàòü îá ýòîì.
    smalltalk08 = "SVM_13_Smalltalk08"; //...áîëüøå ýòîãî íå ñëó÷èòñÿ...
    smalltalk09 = "SVM_13_Smalltalk09"; //...÷òî-òî íå òî â ýòîé èñòîðèè...
    smalltalk10 = "SVM_13_Smalltalk10"; //...òû äîëæåí ñëåäèòü çà òåì, ÷òî ãîâîðèøü ëþäÿì...
    smalltalk11 = "SVM_13_Smalltalk11"; //...ïîêà ìåíÿ íå âïóòàëè...
    smalltalk12 = "SVM_13_Smalltalk12"; //...òû íå äîëæåí âåðèòü âñåìó, ÷òî ñëûøèøü...
    smalltalk13 = "SVM_13_Smalltalk13"; //...íå õîòåë áû ÿ îêàçàòüñÿ íà åãî ìåñòå...
    smalltalk14 = "SVM_13_Smalltalk14"; //...êàæäûé ðàç îäíà è òà æå èñòîðèÿ...
    smalltalk15 = "SVM_13_Smalltalk15"; //...íåêîòîðûõ ëþäåé íè÷åãî íå ó÷èò...
    smalltalk16 = "SVM_13_Smalltalk16"; //...áûëè âðåìåíà, êîãäà âñå áûëî ñîâñåì ïî-äðóãîìó...
    smalltalk17 = "SVM_13_Smalltalk17"; //...ëþäè âñåãäà áîëòàþò...
    smalltalk18 = "SVM_13_Smalltalk18"; //...ÿ áîëüøå íå ñëóøàþ âñÿêóþ òðåïîòíþ...
    smalltalk19 = "SVM_13_Smalltalk19"; //...âåðèøü êîìó-òî - è â ðåçóëüòàòå ïîïàäàåøü â íåïðèÿòíîñòè, òàê âñåãäà è áûâàåò...
    smalltalk20 = "SVM_13_Smalltalk20"; //...ÿ ñîìíåâàþñü, ÷òî ýòî êîãäà-íèáóäü èçìåíèòñÿ...
    smalltalk21 = "SVM_13_Smalltalk21"; //...ñêîðåå âñåãî, òû ïðàâ...
    smalltalk22 = "SVM_13_Smalltalk22"; //...äåðæèñü. Ëó÷øå íè íà ÷òî íå íàòûêàòüñÿ...
    smalltalk23 = "SVM_13_Smalltalk23"; //...ÿ äóìàë, ýòî âûÿñíèëè åùå î÷åíü äàâíî...
    smalltalk24 = "SVM_13_Smalltalk24"; //...äàâàé ïîãîâîðèì î ÷åì-íèáóäü åùå...
    om = "SVM_13_Om"; //Îììì...
};

instance svm_14(c_svm) {
    stopmagic = "SVM_14_StopMagic"; //Ïåðåñòàíü êîëäîâàòü!
    isaidstopmagic = "SVM_14_ISaidStopMagic"; //Òû ìåíÿ ñëûøàë: íèêàêîé ìàãèè!
    weapondown = "SVM_14_WeaponDown"; //×òî òû ñîáèðàåøüñÿ äåëàòü ñ ýòèì îðóæåì?
    isaidweapondown = "SVM_14_ISaidWeaponDown"; //Óáåðè ñâîå îðóæèå!
    watchyouraim = "SVM_14_WatchYourAim"; //Òû öåëèøüñÿ â ìåíÿ!
    watchyouraimangry = "SVM_14_WatchYourAimAngry"; //Òû íå ïðåêðàòèøü öåëèòüñÿ â ìåíÿ?
    whatareyoudoing = "SVM_14_WhatAreYouDoing"; //Ñìîòðè, ÷òî äåëàåøü!
    letsforgetourlittlefight = "SVM_14_LetsForgetOurLittleFight"; //Çàáóäåì îá ýòîì, ëàäíî?
    strange = "SVM_14_Strange"; //Ëîâêèé òðþê: îí ïîïðîñòó èñ÷åç!
    diemonster = "SVM_14_DieMonster"; //Íàäîåäëèâàÿ òâàðü!
    diemortalenemy = "SVM_14_DieMortalEnemy"; //ß äîëæåí òåáÿ óáèòü... Íè÷åãî ëè÷íîãî, òû æå ïîíèìàåøü!
    nowwait = "SVM_14_NowWait"; //Ïîêà õâàòèò!
    youstillnothaveenough = "SVM_14_YouStillNotHaveEnough"; //Òû áîëüøå íå õî÷åøü íåïðèÿòíîñòåé, òàê?
    youaskedforit = "SVM_14_YouAskedForIt"; //Òû ñàì íàïðîñèëñÿ!
    nowwaitintruder = "SVM_14_NowWaitIntruder"; //Òåáÿ ñþäà íèêòî íå çâàë!
    iwillteachyourespectforforeignproperty = "SVM_14_IWillTeachYouRespectForForeignProperty"; //Ýòî íå äëÿ òåáÿ!
    dirtythief = "SVM_14_DirtyThief"; //Òû ïðèõâàòèë êîå-÷òî èç ìîèõ âåùåé! Òåïåðü òû çàïëàòèøü çà ýòî!
    youattackedmycharge = "SVM_14_YouAttackedMyCharge"; //Òû äîëæåí íàó÷èòüñÿ óâàæàòü çàêîíû!
    youkilledoneofus = "SVM_14_YouKilledOneOfUs"; //Òû óáèë êîãî-òî!
    dead = "SVM_14_Dead"; //Àààðãë!
    aargh_1 = "SVM_14_Aargh_1"; //Àààðã!
    aargh_2 = "SVM_14_Aargh_2"; //Àààðã!
    aargh_3 = "SVM_14_Aargh_3"; //Àààðã!
    berzerk = "SVM_14_Berzerk"; //ÓÓÀÀÀÐÐÃÃÃÕÕÕ!!!
    youllbesorryforthis = "SVM_14_YoullBeSorryForThis"; //Òû îá ýòîì ïîæàëååøü!
    yesyes = "SVM_14_YesYes"; //Ëàäíî, ëàäíî!
    shitwhatamonster = "SVM_14_ShitWhatAMonster"; //ß íå õî÷ó ñåé÷àñ ââÿçûâàòüñÿ â äðàêó!
    help = "SVM_14_Help"; //ß äîëæåí âåðíóòüñÿ ê ñâîèì èññëåäîâàíèÿì!
    wewillmeetagain = "SVM_14_WeWillMeetAgain"; //Óâåðåí, ìû åùå âñòðåòèìñÿ!
    nevertrythatagain = "SVM_14_NeverTryThatAgain"; //Áîëüøå íå äåëàé ýòîãî!
    itakeyourweapon = "SVM_14_ITakeYourWeapon"; //ß âîçüìó ýòî îðóæèå!
    itookyourore = "SVM_14_ITookYourOre"; //Ðóäà - øòóêà ïîëåçíàÿ!
    shitnoore = "SVM_14_ShitNoOre"; //Ó òåáÿ ñîâñåì íåò ðóäû!
    handsoff = "SVM_14_HandsOff"; //Óáåðè ðóêè!
    getoutofhere = "SVM_14_GetOutOfHere"; //Óáèðàéñÿ îòñþäà!
    youviolatedforbiddenterritory = "SVM_14_YouViolatedForbiddenTerritory"; //Êàê òû ïîïàë ñþäà?
    youwannafoolme = "SVM_14_YouWannaFoolMe"; //Òû, äîëæíî áûòü, øóòèøü!
    whatsthissupposedtobe = "SVM_14_WhatsThisSupposedToBe"; //Çà÷åì òû çäåñü øëÿåøüñÿ?
    whyareyouinhere = "SVM_14_WhyYouAreInHere"; //Èñ÷åçíè, ïîêà ÿ íå ïîçâàë ñòðàæó!
    whatdidyouinthere = "SVM_14_WhatDidYouInThere"; //Òåáå çäåñü íå÷åãî äåëàòü! Ïîíÿë?
    wisemove = "SVM_14_WiseMove"; //Ïðàâèëüíîå ðåøåíèå!
    alarm = "SVM_14_Alarm"; //Ñòðàæà, ñþäà, ñþäà!
    intruderalert = "SVM_14_IntruderAlert"; //×ÓÆÎÉ!!!
    behindyou = "SVM_14_BehindYou"; //Ñçàäè!
    theresafight = "SVM_14_TheresAFight"; //Äðàêà!
    heyheyhey = "SVM_14_HeyHeyHey"; //Õì.
    cheerfight = "SVM_14_CheerFight"; //Êàê íåóìåëî!
    cheerfriend = "SVM_14_CheerFriend"; //Âûãëÿäèò äîâîëüíî âïå÷àòëÿþùå!
    ooh = "SVM_14_Ooh"; //Ýòî áûëî áîëüíî!
    yeahwelldone = "SVM_14_YeahWellDone"; //Ýòî îäèí ïóòü...
    runcoward = "SVM_14_RunCoward"; //Îí ÷åìó-òî íàó÷èëñÿ!
    hedefeatedhim = "SVM_14_HeDefeatedHim"; //Íó, âîò è âñå.
    hedeservedit = "SVM_14_HeDeservedIt"; //Ýòî ïîñëóæèò åìó õîðîøèì óðîêîì!
    hekilledhim = "SVM_14_HeKilledHim"; //Íå áûëî íåîáõîäèìîñòè óáèâàòü åãî, òåïåðü ó òåáÿ áóäóò íåïðèÿòíîñòè!
    itwasagoodfight = "SVM_14_ItWasAGoodFight"; //Ýòè äðàêè ìåíÿ óòîìëÿþò!
    awake = "SVM_14_Awake"; //ß çàñíóë?
    friendlygreetings = "SVM_14_FriendlyGreetings"; //Ïðèâåòñòâóþ.
    algreetings = "SVM_14_ALGreetings"; //Çà Ãîìåçà!
    magegreetings = "SVM_14_MageGreetings"; //Âî èìÿ ìàãèè!
    sectgreetings = "SVM_14_SectGreetings"; //Ïðîñíèñü!
    thereheis = "SVM_14_ThereHeIs"; //Îí òàì.
    nolearnnopoints = "SVM_14_NoLearnNoPoints"; //ß íå ìîãó ó÷èòü òåáÿ. Òåáå íåõâàòàåò îïûòà.
    nolearnovermax = "SVM_14_NoLearnOverMax"; //Òû íà ïðåäåëå ñâîèõ âîçìîæíîñòåé. Òåáå íóæíî íàó÷èòüñÿ ÷åìó-íèáóäü åùå.
    nolearnyoualreadyknow = "SVM_14_NoLearnYouAlreadyKnow"; //Òåáå íóæíî íàáðàòüñÿ îïûòà, ïðåæäå ÷åì òû ñìîæåøü ñòàòü ìàñòåðîì.
    nolearnyourebetter = "SVM_14_NoLearnYoureBetter"; //Óæå ëó÷øå!
    heyyou = "SVM_14_HeyYou"; //Ýé, òû!
    notnow = "SVM_14_NotNow"; //Íå ñåé÷àñ.
    whatdoyouwant = "SVM_14_WhatDoYouWant"; //×òî ÿ ìîãó äëÿ òåáÿ ñäåëàòü?
    isaidwhatdoyouwant = "SVM_14_ISaidWhatDoYouWant"; //ß ìîãó ïîìî÷ü?
    makeway = "SVM_14_MakeWay"; //Îòîéäè!
    outofmyway = "SVM_14_OutOfMyWay"; //Äàé ìíå ïðîéòè.
    youdeaforwhat = "SVM_14_YouDeafOrWhat"; //À òåïåðü èñ÷åçíè!
    lookingfortroubleagain = "SVM_14_LookingForTroubleAgain"; //Ñíîâà èùåøü íåïðèÿòíîñòåé?
    lookaway = "SVM_14_LookAway"; //Ìåíÿ íå èíòåðåñóåò, ÷òî òû çäåñü äåëàåøü!
    okaykeepit = "SVM_14_OkayKeepIt"; //Îñòàâü ñåáå!
    whatsthat = "SVM_14_WhatsThat"; //×òî ýòî áûëî?
    thatsmyweapon = "SVM_14_ThatsMyWeapon"; //ß õî÷ó ïîëó÷èòü íàçàä ñâîå îðóæèå!
    giveittome = "SVM_14_GiveItToMe"; //Äàé ñþäà!
    youcankeepthecrap = "SVM_14_YouCanKeeptheCrap"; //Ëàäíî. Ìíå ýòî áîëüøå íå íóæíî!
    theykilledmyfriend = "SVM_14_TheyKilledMyFriend"; //Óáèò îäèí èç íàñ. Ìû îòûùåì âèíîâíîãî...
    youdisturbedmyslumber = "SVM_14_YouDisturbedMySlumber"; //Òû îòîðâàë ìåíÿ îò âàæíûõ ìûñëåé!
    suckergotsome = "SVM_14_SuckerGotSome"; //ß ñëûøàë, ó òåáÿ áûëè ïðîáëåìû!
    suckerdefeatedebr = "SVM_14_SuckerDefeatedEBr"; //Òû óäàðèë Áàðîíà. Ýòî åãî âïå÷àòëèëî, äà åùå êàê!
    suckerdefeatedgur = "SVM_14_SuckerDefeatedGur"; //Òû ïîáåäèë îäíîãî èç Ãóðó! Ýòî âïå÷àòëÿåò.
    suckerdefeatedmage = "SVM_14_SuckerDefeatedMage"; //Ïîáåäèòü ìàãà...
    suckerdefeatednov_guard = "SVM_14_SuckerDefeatedNov_Guard"; //Òû çíàåøü, ÷òî íîâè÷êè íàõîäÿòñÿ ïîä ìîåé çàùèòîé, è âñå ðàâíî îñìåëèâàåøüñÿ îáèæàòü èõ?
    suckerdefeatedvlk_guard = "SVM_14_SuckerDefeatedVlk_Guard"; //Åñëè òû îáèæàåøü ðóäîêîïîâ, òû ïîêóøàåøüñÿ íà ìîé äîõîä!
    youdefeatedmycomrade = "SVM_14_YouDefeatedMyComrade"; //Äåðæèñü ïîäàëüøå îò ìîèõ äðóçåé!
    youdefeatednov_guard = "SVM_14_YouDefeatedNOV_Guard"; //Åùå ðàç îáèäèøü íîâè÷êà, è òû ïîæàëååøü!
    youdefeatedvlk_guard = "SVM_14_YouDefeatedVLK_Guard"; //Åùå ðàç îáèäèøü îäíîãî èç ìîèõ ïîäîïå÷íûõ, è ýòî ìîæåò ñòîèòü òåáå ãîëîâû.
    youstolefromme = "SVM_14_YouStoleFromMe"; //Êàê òû ïîñìåë ïîÿâèòüñÿ çäåñü, ãðÿçíûé âîðèøêà?
    youstolefromus = "SVM_14_YouStoleFromUs"; //Ó òåáÿ åñòü ÷òî-òî, ÷òî ïðèíàäëåæèò íàì. Ëó÷øå áû òåáå âåðíóòü ýòî íàçàä.
    youstolefromebr = "SVM_14_YouStoleFromEBr"; //Ïàðåíü! Òû îáîêðàë Áàðîíîâ! Îíè áóäóò â ÿðîñòè!
    youstolefromgur = "SVM_14_YouStoleFromGur"; //Òû èçáàâèë Ãóðó îò íåñêîëüêèõ íåíóæíûõ âåùèö.
    stolefrommage = "SVM_14_StoleFromMage"; //Òû èçáàâèë ìàãîâ îò íåñêîëüêèõ íåíóæíûõ âåùèö.
    youkilledmyfriend = "SVM_14_YouKilledMyFriend"; //Òû óáèë îäíîãî èç íàøèõ ëþäåé. Åùå îäíà îøèáêà, è ïðèäåò òâîé ÷åðåä!
    youkilledebr = "SVM_14_YouKilledEBr"; //Òû óáèë Áàðîíà! Ïàðåíü, òû îêîí÷àòåëüíî ñïÿòèë?!
    youkilledgur = "SVM_14_YouKilledGur"; //Òû óáèë Ãóðó! ß ãëàçàì ñâîèì íå âåðþ!
    youkilledmage = "SVM_14_YouKilledMage"; //Òû óáèë ìàãà! Êàê òû ñîáèðàåøüñÿ îáúÿñíèòü ýòî?
    youkilledocfolk = "SVM_14_YouKilledOCfolk"; //Óáèò ÷åëîâåê èç Ñòàðîãî Ëàãåðÿ, è êîå-êòî ñâÿçûâàåò òåáÿ ñ ýòèì óáèéñòâîì...
    youkilledncfolk = "SVM_14_YouKilledNCfolk"; //Íîâûé Ëàãåðü ïîíåñ òÿæåëóþ óòðàòó, è, ïîõîæå, òû ïðè÷àñòåí ê ýòîìó!
    youkilledpsifolk = "SVM_14_YouKilledPSIfolk"; //Áðàòñòâî ïîòåðÿëî îäíîãî èç ñâîèõ ÷ëåíîâ, è ýòà æèçíü íà òâîåé ñîâåñòè!
    getthingsright = "SVM_14_GetThingsRight"; //Òåáå áóäåò íåëåãêî îïðàâäàòüñÿ!
    youdefeatedmewell = "SVM_14_YouDefeatedMeWell"; //Òû çàäàë ìíå õîðîøó òðåïêó, ïàðåíü. Ýòî áûë õîðîøèé áîé, íî ñåé÷àñ îí îêîí÷åí!
    smalltalk01 = "SVM_14_Smalltalk01"; //...åñëè òû äóìàåøü...
    smalltalk02 = "SVM_14_Smalltalk02"; //...ìîæåò áûòü...
    smalltalk03 = "SVM_14_Smalltalk03"; //...ýòî áûëî íå ñëèøêîì óìíî...
    smalltalk04 = "SVM_14_Smalltalk04"; //...ÿ íå õî÷ó â ýòî ââÿçûâàòüñÿ...
    smalltalk05 = "SVM_14_Smalltalk05"; //...ýòî òî÷íî íå ìîÿ ïðîáëåìà...
    smalltalk06 = "SVM_14_Smalltalk06"; //...ïîõîæå, íàçðåâàåò ïðîáëåìà...
    smalltalk07 = "SVM_14_Smalltalk07"; //...äåðæè ýòî ïðè ñåáå, ëþäÿì íåîáÿçàòåëüíî çíàòü îá ýòîì.
    smalltalk08 = "SVM_14_Smalltalk08"; //...áîëüøå ýòîãî íå ñëó÷èòñÿ...
    smalltalk09 = "SVM_14_Smalltalk09"; //...÷òî-òî íå òî â ýòîé èñòîðèè...
    smalltalk10 = "SVM_14_Smalltalk10"; //...òû äîëæåí ñëåäèòü çà òåì, ÷òî ãîâîðèøü ëþäÿì...
    smalltalk11 = "SVM_14_Smalltalk11"; //...ïîêà ìåíÿ íå âïóòàëè...
    smalltalk12 = "SVM_14_Smalltalk12"; //...òû íå äîëæåí âåðèòü âñåìó...
    smalltalk13 = "SVM_14_Smalltalk13"; //...íå õîòåë áû ÿ îêàçàòüñÿ íà åãî ìåñòå...
    smalltalk14 = "SVM_14_Smalltalk14"; //...êàæäûé ðàç îäíà è òà æå èñòîðèÿ...
    smalltalk15 = "SVM_14_Smalltalk15"; //...íåêîòîðûõ ëþäåé íè÷åãî íå ó÷èò...
    smalltalk16 = "SVM_14_Smalltalk16"; //...áûëè âðåìåíà, êîãäà âñå áûëî ñîâñåì ïî-äðóãîìó...
    smalltalk17 = "SVM_14_Smalltalk17"; //...ëþäè âñåãäà áîëòàþò...
    smalltalk18 = "SVM_14_Smalltalk18"; //...ÿ áîëüøå íå ñëóøàþ âñÿêóþ òðåïîòíþ...
    smalltalk19 = "SVM_14_Smalltalk19"; //...âåðèøü êîìó-òî - è â ðåçóëüòàòå ïîïàäàåøü â íåïðèÿòíîñòè, òàê âñåãäà è áûâàåò...
    smalltalk20 = "SVM_14_Smalltalk20"; //...ÿ ñîìíåâàþñü, ÷òî ýòî êîãäà-íèáóäü èçìåíèòñÿ...
    smalltalk21 = "SVM_14_Smalltalk21"; //...ñêîðåå âñåãî, òû ïðàâ...
    smalltalk22 = "SVM_14_Smalltalk22"; //...äåðæèñü. Ëó÷øå íè íà ÷òî íå íàòûêàòüñÿ...
    smalltalk23 = "SVM_14_Smalltalk23"; //...ÿ äóìàë, ýòî âûÿñíèëè åùå î÷åíü äàâíî...
    smalltalk24 = "SVM_14_Smalltalk24"; //...äàâàé ïîãîâîðèì î ÷åì-íèáóäü åùå...
    om = "SVM_14_Om"; //Îììì...
};

instance svm_15(c_svm) {
    sc_heyturnaround = "SVM_15_SC_HeyTurnAround"; //Ýé, òû!
    sc_heywaitasecond = "SVM_15_SC_HeyWaitASecond"; //Ïîäîæäèêà-êà!
    sectgreetings = "SVM_15_SectGreetings"; //Ïðîñíèñü!
    algreetings = "SVM_15_ALGreetings"; //Çà Ãîìåçà!
    magegreetings = "SVM_15_MageGreetings"; //Ïðèâåòñòâóþ!
    friendlygreetings = "SVM_15_FriendlyGreetings"; //Ïðèâåò!
    aargh_1 = "SVM_15_Aargh_1"; //Ààðãõ!
    aargh_2 = "SVM_15_Aargh_2"; //Ààðãõ!
    aargh_3 = "SVM_15_Aargh_3"; //Ààðãõ!
    dead = "SVM_15_Dead"; //Ààðãõë!
    awake = "SVM_15_Awake"; //[ïðîñûïàåòñÿ]
    doesntwork = "SVM_15_DoesntWork"; //Íå ðàáîòàåò.
    pickbroke = "SVM_15_PickBroke"; //Õì, îí ñëîìàí.
    needkey = "SVM_15_NeedKey"; //Äëÿ ýòîãî ìíå íóæåí êëþ÷...
    nomorepicks = "SVM_15_NoMorePicks"; //Êîñòÿíûõ êëþ÷åé áîëüøå íåò...
    invfull = "SVM_15_InvFull"; //ß íå ìîãó íåñòè åùå áîëüøå.
};

instance svm_16(c_svm) {
    notnow = "SVM_16_NotNow"; //Èäåì! Òû íå äîëæåí ðàçãîâàðèâàòü ñî ìíîé!
    help = "SVM_16_Help"; //[êðèêè]
    aargh_1 = "SVM_16_Aargh_1"; //Ààðãõ!
    aargh_2 = "SVM_16_Aargh_2"; //Ààðãõ!
    aargh_3 = "SVM_16_Aargh_3"; //Ààðãõ!
    dead = "SVM_16_Dead"; //Ààðãõë!
};

instance svm_17(c_svm) {
    stopmagic = "SVM_17_OrcSound01"; //ÊÀÐÐÎÊ ÓÐ ØÀÊ ÒÎÑ ÊÀÐÐÀÑ ÄÀ ÃÀÊ!
    isaidstopmagic = "SVM_17_OrcSound02"; //ÐÎÊ ÊÐÓØÀÊ ÊÎÐ ÃÀÍÎÐÃ!
    weapondown = "SVM_17_OrcSound03"; //ÍÅÌÐÎÊ ÊÀ ÂÀÐÐÎÊ!
};

const int svm_modules = 18;

instance focus_normal(c_focus) {
    npc_longrange = 500.0;
    npc_range1 = 0.0;
    npc_range2 = 300.0;
    npc_azi = 45.0;
    npc_elevup = 45.0;
    npc_elevdo = -45.0;
    npc_prio = 0;
    item_range1 = 0.0;
    item_range2 = 400.0;
    item_azi = 40.0;
    item_elevup = 45.0;
    item_elevdo = -90.0;
    item_prio = 1;
    mob_range1 = 0.0;
    mob_range2 = 350.0;
    mob_azi = 45.0;
    mob_elevup = 60.0;
    mob_elevdo = -90.0;
    mob_prio = 0;
};

instance focus_melee(c_focus) {
    npc_range1 = 0.0;
    npc_range2 = 500.0;
    npc_azi = 45.0;
    npc_elevup = 45.0;
    npc_elevdo = -60.0;
    npc_prio = 1;
    item_prio = -1;
    mob_range1 = 0.0;
    mob_range2 = 150.0;
    mob_azi = 30.0;
    mob_elevup = 45.0;
    mob_elevdo = -45.0;
    mob_prio = -1;
};

instance focus_ranged(c_focus) {
    npc_range1 = 0.0;
    npc_range2 = 3000.0;
    npc_azi = 45.0;
    npc_elevup = 45.0;
    npc_elevdo = -45.0;
    npc_prio = 1;
    item_range1 = 0.0;
    item_range2 = 3000.0;
    item_azi = 45.0;
    item_elevup = 45.0;
    item_elevdo = -45.0;
    item_prio = -1;
    mob_range1 = 0.0;
    mob_range2 = 3000.0;
    mob_azi = 45.0;
    mob_elevup = 45.0;
    mob_elevdo = -45.0;
    mob_prio = -1;
};

instance focus_throw_item(c_focus) {
    npc_range1 = 300.0;
    npc_range2 = 1500.0;
    npc_azi = 20.0;
    npc_elevup = 45.0;
    npc_elevdo = -45.0;
    item_range1 = 300.0;
    item_range2 = 1500.0;
    item_azi = 20.0;
    item_elevup = 45.0;
    item_elevdo = -45.0;
    mob_range1 = 300.0;
    mob_range2 = 1500.0;
    mob_azi = 20.0;
    mob_elevup = 45.0;
    mob_elevdo = -45.0;
};

instance focus_throw_mob(c_focus) {
    npc_range1 = 50.0;
    npc_range2 = 200.0;
    npc_azi = 20.0;
    npc_elevup = 45.0;
    npc_elevdo = -45.0;
    item_range1 = 50.0;
    item_range2 = 200.0;
    item_azi = 20.0;
    item_elevup = 45.0;
    item_elevdo = -45.0;
    mob_range1 = 50.0;
    mob_range2 = 200.0;
    mob_azi = 20.0;
    mob_elevup = 45.0;
    mob_elevdo = -45.0;
};

instance focus_magic(c_focus) {
    npc_range1 = 0.0;
    npc_range2 = 3000.0;
    npc_azi = 45.0;
    npc_elevup = 45.0;
    npc_elevdo = -45.0;
    npc_prio = 1;
    item_range1 = 0.0;
    item_range2 = 3000.0;
    item_azi = 45.0;
    item_elevup = 45.0;
    item_elevdo = -45.0;
    item_prio = 0;
    mob_range1 = 0.0;
    mob_range2 = 3000.0;
    mob_azi = 45.0;
    mob_elevup = 45.0;
    mob_elevdo = -45.0;
    mob_prio = 0;
};

instance gil_values(c_gilvalues) {
    swim_time[1] = time_infinite;
    dive_time[1] = 30;
    water_depth_knee[1] = 65;
    water_depth_chest[1] = 140;
    step_height[1] = 60;
    jumplow_height[1] = 105;
    jumpmid_height[1] = 205;
    jumpup_height[1] = 200;
    slide_angle[1] = 45;
    disable_autoroll[1] = 0;
    surface_align[1] = 0;
    turn_speed[1] = 270;
    climb_heading_angle[1] = 45;
    climb_horiz_angle[1] = 30;
    climb_ground_angle[1] = 30;
    falldown_height[1] = 500;
    falldown_damage[1] = 20;
    fight_range_base[1] = 60;
    fight_range_fist[1] = 50;
    swim_time[28] = time_infinite;
    dive_time[28] = 0;
    water_depth_knee[28] = 999999;
    water_depth_chest[28] = 999999;
    step_height[28] = 100;
    jumplow_height[28] = 800;
    slide_angle[28] = 75;
    disable_autoroll[28] = 0;
    surface_align[28] = 0;
    turn_speed[28] = 130;
    falldown_height[28] = 9999;
    falldown_damage[28] = 0;
    fight_range_base[28] = 80;
    fight_range_fist[28] = 80;
    swim_time[22] = 0;
    dive_time[22] = 0;
    water_depth_knee[22] = 75;
    water_depth_chest[22] = 100;
    slide_angle[22] = 60;
    disable_autoroll[22] = 1;
    surface_align[22] = 2;
    turn_speed[22] = 100;
    falldown_height[22] = 1000;
    falldown_damage[22] = 1;
    fight_range_base[22] = 100;
    fight_range_fist[22] = 170;
    swim_time[25] = time_infinite;
    dive_time[25] = 0;
    water_depth_knee[25] = 999999;
    water_depth_chest[25] = 999999;
    step_height[25] = 150;
    jumplow_height[25] = 800;
    slide_angle[25] = 75;
    disable_autoroll[25] = 0;
    surface_align[25] = 0;
    turn_speed[25] = 120;
    falldown_height[25] = 9999;
    falldown_damage[25] = 0;
    fight_range_base[25] = 100;
    fight_range_fist[25] = 140;
    blood_emitter[25] = "BFX_Demon";
    blood_texture[25] = "BQM_Scavenger2.tga";
    blood_amount[25] = 10;
    blood_max_distance[25] = 200;
    swim_time[19] = time_infinite;
    dive_time[19] = 30;
    water_depth_knee[19] = 30;
    water_depth_chest[19] = 80;
    step_height[19] = 25;
    jumplow_height[19] = 105;
    jumpmid_height[19] = 155;
    jumpup_height[19] = 200;
    slide_angle[19] = 45;
    turn_speed[19] = 100;
    climb_heading_angle[19] = 45;
    climb_horiz_angle[19] = 30;
    climb_ground_angle[19] = 30;
    falldown_height[19] = 500;
    falldown_damage[19] = 10;
    fight_range_fist[19] = 50;
    fight_range_base[19] = 40;
    swim_time[35] = time_infinite;
    dive_time[35] = 0;
    water_depth_knee[35] = 50000;
    water_depth_chest[35] = 51000;
    slide_angle[35] = 55;
    disable_autoroll[35] = 1;
    surface_align[35] = 0;
    turn_speed[35] = 80;
    falldown_height[35] = 9999;
    falldown_damage[35] = 0;
    fight_range_base[35] = 100;
    fight_range_fist[35] = 120;
    blood_emitter[35] = "BFX_Golem";
    blood_texture[35] = "BQM_Golem.tga";
    blood_amount[35] = 5;
    blood_max_distance[35] = 60;
    swim_time[36] = time_infinite;
    dive_time[36] = time_infinite;
    water_depth_knee[36] = 50;
    water_depth_chest[36] = 120;
    step_height[36] = 55;
    jumplow_height[36] = 205;
    jumpup_height[36] = 300;
    slide_angle[36] = 45;
    disable_autoroll[36] = 1;
    surface_align[36] = 1;
    turn_speed[36] = 200;
    falldown_height[36] = 400;
    falldown_damage[36] = 20;
    fight_range_base[36] = 100;
    fight_range_fist[36] = 100;
    swim_time[23] = 0;
    dive_time[23] = 0;
    water_depth_knee[23] = 5;
    water_depth_chest[23] = 10;
    slide_angle[23] = 70;
    disable_autoroll[23] = 1;
    surface_align[23] = 2;
    turn_speed[23] = 140;
    falldown_height[23] = 800;
    falldown_damage[23] = 1;
    fight_range_fist[23] = 10;
    fight_range_base[23] = 15;
    blood_emitter[23] = "BFX_Preset2";
    blood_texture[23] = "BQM_Meatbug.tga";
    blood_flow[23] = 1;
    blood_amount[23] = 2;
    blood_max_distance[23] = 50;
    swim_time[34] = time_infinite;
    dive_time[34] = 0;
    water_depth_knee[34] = 25;
    water_depth_chest[34] = 50;
    jumplow_height[34] = 105;
    jumpmid_height[34] = 200;
    slide_angle[34] = 50;
    disable_autoroll[34] = 1;
    surface_align[34] = 1;
    turn_speed[34] = 120;
    falldown_height[34] = 400;
    falldown_damage[34] = 10;
    fight_range_base[34] = 130;
    fight_range_fist[34] = 95;
    blood_emitter[34] = "BFX_Preset1";
    blood_texture[34] = "BQM_Scavenger2.tga";
    blood_amount[34] = 10;
    blood_max_distance[34] = 100;
    swim_time[38] = time_infinite;
    dive_time[38] = 30;
    water_depth_knee[38] = 120;
    water_depth_chest[38] = 170;
    step_height[38] = 65;
    jumplow_height[38] = 105;
    jumpmid_height[38] = 205;
    jumpup_height[38] = 300;
    slide_angle[38] = 45;
    turn_speed[38] = 200;
    climb_heading_angle[38] = 45;
    climb_horiz_angle[38] = 30;
    climb_ground_angle[38] = 30;
    falldown_height[38] = 600;
    falldown_damage[38] = 10;
    fight_range_base[38] = 50;
    fight_range_fist[38] = 90;
    swim_time[39] = time_infinite;
    dive_time[39] = 30;
    water_depth_knee[39] = 120;
    water_depth_chest[39] = 170;
    step_height[39] = 65;
    jumplow_height[39] = 105;
    jumpmid_height[39] = 205;
    jumpup_height[39] = 300;
    slide_angle[39] = 45;
    turn_speed[39] = 200;
    climb_heading_angle[39] = 45;
    climb_horiz_angle[39] = 30;
    climb_ground_angle[39] = 30;
    falldown_height[39] = 600;
    falldown_damage[39] = 10;
    fight_range_base[39] = 50;
    fight_range_fist[39] = 90;
    swim_time[40] = time_infinite;
    dive_time[40] = 30;
    water_depth_knee[40] = 120;
    water_depth_chest[40] = 170;
    step_height[40] = 65;
    jumplow_height[40] = 105;
    jumpmid_height[40] = 205;
    jumpup_height[40] = 300;
    slide_angle[40] = 45;
    turn_speed[40] = 200;
    climb_heading_angle[40] = 45;
    climb_horiz_angle[40] = 30;
    climb_ground_angle[40] = 30;
    falldown_height[40] = 600;
    falldown_damage[40] = 10;
    fight_range_base[40] = 50;
    fight_range_fist[40] = 90;
    swim_time[41] = time_infinite;
    dive_time[41] = 30;
    water_depth_knee[41] = 120;
    water_depth_chest[41] = 170;
    step_height[41] = 65;
    jumplow_height[41] = 105;
    jumpmid_height[41] = 205;
    jumpup_height[41] = 300;
    slide_angle[41] = 45;
    turn_speed[41] = 200;
    climb_heading_angle[41] = 45;
    climb_horiz_angle[41] = 30;
    climb_ground_angle[41] = 30;
    falldown_height[41] = 600;
    falldown_damage[41] = 10;
    fight_range_base[41] = 50;
    fight_range_fist[41] = 90;
    swim_time[31] = 0;
    dive_time[31] = 0;
    water_depth_knee[31] = 120;
    water_depth_chest[31] = 170;
    step_height[31] = 65;
    jumplow_height[31] = 105;
    jumpmid_height[31] = 205;
    jumpup_height[31] = 300;
    slide_angle[31] = 45;
    turn_speed[31] = 200;
    climb_heading_angle[31] = 45;
    climb_horiz_angle[31] = 30;
    climb_ground_angle[31] = 30;
    falldown_height[31] = 9999;
    falldown_damage[31] = 0;
    fight_range_base[31] = 50;
    fight_range_fist[31] = 90;
    blood_disabled[31] = 1;
    swim_time[33] = time_infinite;
    dive_time[33] = 0;
    water_depth_knee[33] = 40;
    water_depth_chest[33] = 70;
    step_height[33] = 50;
    jumplow_height[33] = 100;
    jumpmid_height[33] = 200;
    slide_angle[33] = 45;
    disable_autoroll[33] = 1;
    surface_align[33] = 1;
    turn_speed[33] = 150;
    falldown_height[33] = 500;
    falldown_damage[33] = 10;
    fight_range_base[33] = 100;
    fight_range_fist[33] = 100;
    blood_emitter[33] = "BFX_Preset1";
    blood_texture[33] = "BQM_Scavenger2.tga";
    blood_flow[33] = 1;
    blood_amount[33] = 5;
    blood_max_distance[33] = 80;
    swim_time[24] = time_infinite;
    dive_time[24] = 0;
    water_depth_knee[24] = 50;
    water_depth_chest[24] = 120;
    step_height[24] = 50;
    jumplow_height[24] = 200;
    slide_angle[24] = 45;
    disable_autoroll[24] = 0;
    surface_align[24] = 0;
    turn_speed[24] = 130;
    falldown_height[24] = 400;
    falldown_damage[24] = 10;
    fight_range_base[24] = 100;
    fight_range_fist[24] = 100;
    blood_emitter[24] = "BFX_Preset1";
    blood_texture[24] = "BQM_Scavenger2.tga";
    blood_amount[24] = 10;
    blood_max_distance[24] = 100;
    swim_time[27] = time_infinite;
    dive_time[27] = 0;
    water_depth_knee[27] = 50;
    water_depth_chest[27] = 120;
    step_height[27] = 60;
    jumplow_height[27] = 150;
    jumpmid_height[27] = 300;
    slide_angle[27] = 45;
    disable_autoroll[27] = 1;
    surface_align[27] = 2;
    turn_speed[27] = 150;
    falldown_height[27] = 600;
    falldown_damage[27] = 10;
    fight_range_base[27] = 150;
    fight_range_fist[27] = 200;
    turn_speed[18] = 80;
    fight_range_base[18] = 100;
    fight_range_fist[18] = 140;
    swim_time[32] = 0;
    dive_time[32] = 0;
    water_depth_knee[32] = 80;
    water_depth_chest[32] = 150;
    step_height[32] = 60;
    jumplow_height[32] = 105;
    jumpmid_height[32] = 205;
    jumpup_height[32] = 300;
    slide_angle[32] = 45;
    turn_speed[32] = 180;
    climb_heading_angle[32] = 45;
    climb_horiz_angle[32] = 30;
    climb_ground_angle[32] = 30;
    falldown_height[32] = 400;
    falldown_damage[32] = 10;
    fight_range_base[32] = 60;
    fight_range_fist[32] = 50;
    blood_emitter[32] = "BFX_Skeleton";
    swim_time[21] = time_infinite;
    dive_time[21] = time_infinite;
    water_depth_knee[21] = 50;
    water_depth_chest[21] = 120;
    step_height[21] = 60;
    jumplow_height[21] = 300;
    slide_angle[21] = 50;
    disable_autoroll[21] = 1;
    surface_align[21] = 1;
    turn_speed[21] = 130;
    falldown_height[21] = 400;
    falldown_damage[21] = 10;
    fight_range_base[21] = 100;
    fight_range_fist[21] = 150;
    blood_emitter[21] = "BFX_Preset1";
    blood_texture[21] = "BQM_Scavenger2.tga";
    blood_amount[21] = 10;
    blood_max_distance[21] = 100;
    swim_time[29] = time_infinite;
    dive_time[29] = time_infinite;
    water_depth_knee[29] = 100000;
    water_depth_chest[29] = 100005;
    step_height[29] = 100;
    slide_angle[29] = 60;
    disable_autoroll[29] = 1;
    surface_align[29] = 2;
    turn_speed[29] = 80;
    falldown_height[29] = 500;
    falldown_damage[29] = 10;
    fight_range_base[29] = 200;
    fight_range_fist[29] = 200;
    swim_time[20] = 0;
    dive_time[20] = 0;
    water_depth_knee[20] = 100;
    water_depth_chest[20] = 300;
    step_height[20] = 100;
    slide_angle[20] = 45;
    disable_autoroll[20] = 1;
    turn_speed[20] = 60;
    falldown_height[20] = 800;
    falldown_damage[20] = 10;
    fight_range_base[20] = 200;
    fight_range_fist[20] = 220;
    swim_time[17] = time_infinite;
    dive_time[17] = 0;
    water_depth_knee[17] = 50;
    water_depth_chest[17] = 120;
    step_height[17] = 60;
    jumplow_height[17] = 100;
    jumpmid_height[17] = 200;
    slide_angle[17] = 45;
    disable_autoroll[17] = 1;
    surface_align[17] = 1;
    turn_speed[17] = 200;
    falldown_height[17] = 500;
    falldown_damage[17] = 10;
    fight_range_base[17] = 195;
    fight_range_fist[17] = 65;
    blood_emitter[17] = "BFX_Preset2";
    blood_texture[17] = "BQM_Meatbug.tga";
    blood_amount[17] = 10;
    blood_max_distance[17] = 100;
    swim_time[26] = time_infinite;
    dive_time[26] = 0;
    water_depth_knee[26] = 40;
    water_depth_chest[26] = 70;
    step_height[26] = 60;
    jumplow_height[26] = 100;
    jumpmid_height[26] = 200;
    slide_angle[26] = 45;
    disable_autoroll[26] = 1;
    surface_align[26] = 1;
    turn_speed[26] = 130;
    falldown_height[26] = 500;
    falldown_damage[26] = 10;
    fight_range_base[26] = 100;
    fight_range_fist[26] = 100;
    blood_emitter[26] = "BFX_Preset1";
    blood_texture[26] = "BQM_Scavenger2.tga";
    blood_flow[26] = 1;
    blood_amount[26] = 5;
    blood_max_distance[26] = 80;
    swim_time[30] = 0;
    dive_time[30] = 0;
    water_depth_knee[30] = 90;
    water_depth_chest[30] = 150;
    step_height[30] = 60;
    jumplow_height[30] = 200;
    slide_angle[30] = 45;
    turn_speed[30] = 90;
    climb_heading_angle[30] = 45;
    climb_horiz_angle[30] = 30;
    climb_ground_angle[30] = 30;
    falldown_height[30] = 9999;
    falldown_damage[30] = 0;
    fight_range_base[30] = 60;
    fight_range_fist[30] = 50;
    blood_emitter[30] = "BFX_Zombie";
    blood_texture[30] = "BQM_Zombie.tga";
    blood_flow[30] = 0;
    blood_amount[30] = 10;
    blood_max_distance[30] = 100;
};

instance itmi_amulet_psi_01(c_item) {
    name = name_amulett;
    mainflag = item_kat_magic;
    flags = item_amulet;
    visual = "ItMi_Amulet_Psi_01.3ds";
    visual_skin = 0;
    material = mat_metal;
    value = 5;
    description = "Çíàê Áðàòñòâà";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance schutzamulett_feuer(c_item) {
    name = name_amulett;
    mainflag = item_kat_magic;
    flags = item_amulet;
    visual = "ItMi_Amulet_01.3ds";
    visual_skin = 0;
    material = mat_metal;
    on_equip = equip_schutzamulett_feuer;
    on_unequip = unequip_schutzamulett_feuer;
    value = 600;
    description = "Àìóëåò ïëàìåíè";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_prot_fire;
    count[2] = 10;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void equip_schutzamulett_feuer() {
    self.protection[prot_fire] /*3*/ += 10;
};

func void unequip_schutzamulett_feuer() {
    self.protection[prot_fire] /*3*/ -= 10;
};

instance schutzamulett_waffen(c_item) {
    name = name_amulett;
    mainflag = item_kat_magic;
    flags = item_amulet;
    visual = "ItMi_Amulet_01.3ds";
    visual_skin = 0;
    material = mat_metal;
    on_equip = equip_schutzamulett_waffen;
    on_unequip = unequip_schutzamulett_waffen;
    value = 600;
    description = "Àìóëåò áðîíè";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_prot_edge;
    count[2] = 15;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void equip_schutzamulett_waffen() {
    self.protection[prot_edge] /*2*/ += 15;
    self.protection[prot_blunt] /*1*/ += 15;
};

func void unequip_schutzamulett_waffen() {
    self.protection[prot_edge] /*2*/ -= 15;
    self.protection[prot_blunt] /*1*/ -= 15;
};

instance schutzamulett_geschosse(c_item) {
    name = name_amulett;
    mainflag = item_kat_magic;
    flags = item_amulet;
    visual = "ItMi_Amulet_01.3ds";
    visual_skin = 0;
    material = mat_metal;
    on_equip = equip_schutzamulett_geschosse;
    on_unequip = unequip_schutzamulett_geschosse;
    value = 600;
    description = "Àìóëåò äðåâåñíîé êîæè";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_prot_point;
    count[2] = 15;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void equip_schutzamulett_geschosse() {
    self.protection[prot_point] /*6*/ += 15;
};

func void unequip_schutzamulett_geschosse() {
    self.protection[prot_point] /*6*/ -= 15;
};

instance schutzamulett_magie(c_item) {
    name = name_amulett;
    mainflag = item_kat_magic;
    flags = item_amulet;
    visual = "ItMi_Amulet_01.3ds";
    visual_skin = 0;
    material = mat_metal;
    on_equip = equip_schutzamulett_magie;
    on_unequip = unequip_schutzamulett_magie;
    value = 600;
    description = "Àìóëåò äóõîâíîé ñèëû";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_prot_magic;
    count[2] = 8;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void equip_schutzamulett_magie() {
    self.protection[prot_magic] /*5*/ += 8;
};

func void unequip_schutzamulett_magie() {
    self.protection[prot_magic] /*5*/ -= 8;
};

instance schutzamulett_magie_feuer(c_item) {
    name = name_amulett;
    mainflag = item_kat_magic;
    flags = item_amulet;
    visual = "ItMi_Amulet_02.3ds";
    visual_skin = 0;
    material = mat_metal;
    on_equip = equip_schutzamulett_magie_feuer;
    on_unequip = unequip_schutzamulett_magie_feuer;
    value = 1000;
    description = "Àìóëåò î÷èùåíèÿ";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_prot_fire;
    count[2] = 10;
    text[3] = name_prot_magic;
    count[3] = 8;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void equip_schutzamulett_magie_feuer() {
    self.protection[prot_magic] /*5*/ += 8;
    self.protection[prot_fire] /*3*/ += 10;
};

func void unequip_schutzamulett_magie_feuer() {
    self.protection[prot_magic] /*5*/ -= 8;
    self.protection[prot_fire] /*3*/ -= 10;
};

instance schutzamulett_waffen_geschosse(c_item) {
    name = name_amulett;
    mainflag = item_kat_magic;
    flags = item_amulet;
    visual = "ItMi_Amulet_02.3ds";
    visual_skin = 0;
    material = mat_metal;
    on_equip = equip_schutzamulett_waffen_geschosse;
    on_unequip = unequip_schutzamulett_waffen_geschosse;
    value = 1000;
    description = "Àìóëåò êàìåííîé êîæè";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_prot_edge;
    count[2] = 15;
    text[3] = name_prot_point;
    count[3] = 15;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void equip_schutzamulett_waffen_geschosse() {
    self.protection[prot_edge] /*2*/ += 15;
    self.protection[prot_blunt] /*1*/ += 15;
    self.protection[prot_point] /*6*/ += 15;
};

func void unequip_schutzamulett_waffen_geschosse() {
    self.protection[prot_edge] /*2*/ -= 15;
    self.protection[prot_blunt] /*1*/ -= 15;
    self.protection[prot_point] /*6*/ -= 15;
};

instance schutzamulett_total(c_item) {
    name = name_amulett;
    mainflag = item_kat_magic;
    flags = item_amulet;
    visual = "ItMi_Amulet_03.3ds";
    visual_skin = 0;
    material = mat_metal;
    on_equip = equip_schutzamulett_total;
    on_unequip = unequip_schutzamulett_total;
    value = 1600;
    description = "Àìóëåò æåëåçíîé êîæè";
    text = "";
    count = 0;
    text[1] = name_prot_fire;
    count[1] = 10;
    text[2] = name_prot_magic;
    count[2] = 8;
    text[3] = name_prot_point;
    count[3] = 15;
    text[4] = name_prot_edge;
    count[4] = 15;
    text[5] = name_value;
    count[5] = value;
};

func void equip_schutzamulett_total() {
    self.protection[prot_edge] /*2*/ += 15;
    self.protection[prot_blunt] /*1*/ += 15;
    self.protection[prot_point] /*6*/ += 15;
    self.protection[prot_fire] /*3*/ += 10;
    self.protection[prot_magic] /*5*/ += 8;
};

func void unequip_schutzamulett_total() {
    self.protection[prot_edge] /*2*/ -= 15;
    self.protection[prot_blunt] /*1*/ -= 15;
    self.protection[prot_point] /*6*/ -= 15;
    self.protection[prot_fire] /*3*/ -= 10;
    self.protection[prot_magic] /*5*/ -= 8;
};

instance gewandtheitsamulett(c_item) {
    name = name_amulett;
    mainflag = item_kat_magic;
    flags = item_amulet;
    visual = "ItMi_Amulet_01.3ds";
    visual_skin = 0;
    material = mat_metal;
    on_equip = equip_gewandtheitsamulett;
    on_unequip = unequip_gewandtheitsamulett;
    value = 320;
    description = "Àìóëåò ïðîâîðñòâà";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_bonus_dex;
    count[2] = 10;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void equip_gewandtheitsamulett() {
    npc_changeattribute(self, atr_dexterity, 10);
};

func void unequip_gewandtheitsamulett() {
    npc_changeattribute(self, atr_dexterity, -10);
};

instance gewandtheitsamulett2(c_item) {
    name = name_amulett;
    mainflag = item_kat_magic;
    flags = item_amulet;
    visual = "ItMi_Amulet_02.3ds";
    visual_skin = 0;
    material = mat_metal;
    on_equip = equip_gewandtheitsamulett2;
    on_unequip = unequip_gewandtheitsamulett2;
    value = 480;
    description = "Àìóëåò ëîâêîñòè";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_bonus_dex;
    count[2] = 20;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void equip_gewandtheitsamulett2() {
    npc_changeattribute(self, atr_dexterity, 20);
};

func void unequip_gewandtheitsamulett2() {
    npc_changeattribute(self, atr_dexterity, -20);
};

instance staerkeamulett(c_item) {
    name = name_amulett;
    mainflag = item_kat_magic;
    flags = item_amulet;
    visual = "ItMi_Amulet_01.3ds";
    visual_skin = 0;
    material = mat_metal;
    on_equip = equip_staerkeamulett;
    on_unequip = unequip_staerkeamulett;
    value = 320;
    description = "Àìóëåò ìîãóùåñòâà";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_bonus_str;
    count[2] = 10;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void equip_staerkeamulett() {
    npc_changeattribute(self, atr_strength, 10);
};

func void unequip_staerkeamulett() {
    npc_changeattribute(self, atr_strength, -10);
};

instance staerkeamulett2(c_item) {
    name = name_amulett;
    mainflag = item_kat_magic;
    flags = item_amulet;
    visual = "ItMi_Amulet_02.3ds";
    visual_skin = 0;
    material = mat_metal;
    on_equip = equip_staerkeamulett2;
    on_unequip = unequip_staerkeamulett2;
    value = 480;
    description = "Àìóëåò ñèëû";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_bonus_str;
    count[2] = 20;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void equip_staerkeamulett2() {
    npc_changeattribute(self, atr_strength, 20);
};

func void unequip_staerkeamulett2() {
    npc_changeattribute(self, atr_strength, -20);
};

instance lebensamulett(c_item) {
    name = name_amulett;
    mainflag = item_kat_magic;
    flags = item_amulet;
    visual = "ItMi_Amulet_02.3ds";
    visual_skin = 0;
    material = mat_metal;
    on_equip = equip_lebensamulett;
    on_unequip = unequip_lebensamulett;
    value = 720;
    description = "Àìóëåò æèçíåííîé ñèëû";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_bonus_hp;
    count[2] = 30;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void equip_lebensamulett() {
    self.attribute[atr_hitpoints] /*0*/ = self.attribute[atr_hitpoints] /*0*/ + 30;
    self.attribute[atr_hitpoints_max] /*1*/ = self.attribute[atr_hitpoints_max] /*1*/ + 30;
};

func void unequip_lebensamulett() {
    self.attribute[atr_hitpoints_max] /*1*/ = self.attribute[atr_hitpoints_max] /*1*/ - 30;
    if (self.attribute[atr_hitpoints] /*0*/ > 31) {
        self.attribute[atr_hitpoints] /*0*/ = self.attribute[atr_hitpoints] /*0*/ - 30;
    }
    else {
        self.attribute[atr_hitpoints] /*0*/ = 2;
    };
};

instance amulett_der_magie(c_item) {
    name = name_amulett;
    mainflag = item_kat_magic;
    flags = item_amulet;
    visual = "ItMi_Amulet_02.3ds";
    visual_skin = 0;
    material = mat_metal;
    on_equip = equip_amulett_der_magie;
    on_unequip = unequip_amulett_der_magie;
    value = 400;
    description = "Àìóëåò ìàãèè";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_bonus_mana;
    count[2] = 10;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void equip_amulett_der_magie() {
    self.attribute[atr_mana] /*2*/ = self.attribute[atr_mana] /*2*/ + 10;
    self.attribute[atr_mana_max] /*3*/ = self.attribute[atr_mana_max] /*3*/ + 10;
};

func void unequip_amulett_der_magie() {
    self.attribute[atr_mana] /*2*/ = self.attribute[atr_mana] /*2*/ - 10;
    self.attribute[atr_mana_max] /*3*/ = self.attribute[atr_mana_max] /*3*/ - 10;
};

instance amulett_der_macht(c_item) {
    name = "Àìóëåò ìîùè";
    mainflag = item_kat_magic;
    flags = item_amulet;
    visual = "ItMi_Amulet_03.3ds";
    visual_skin = 0;
    material = mat_metal;
    on_equip = equip_amulett_der_macht;
    on_unequip = unequip_amulett_der_macht;
    value = 600;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_bonus_dex;
    count[2] = 7;
    text[3] = name_bonus_str;
    count[3] = 7;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void equip_amulett_der_macht() {
    npc_changeattribute(self, atr_dexterity, 7);
    npc_changeattribute(self, atr_strength, 7);
};

func void unequip_amulett_der_macht() {
    npc_changeattribute(self, atr_dexterity, -7);
    npc_changeattribute(self, atr_strength, -7);
};

instance amulett_der_erleuchtung(c_item) {
    name = "Àìóëåò îçàðåíèÿ";
    mainflag = item_kat_magic;
    flags = item_amulet;
    visual = "ItMi_Amulet_03.3ds";
    visual_skin = 0;
    material = mat_metal;
    on_equip = equip_amulett_der_erleuchtung;
    on_unequip = unequip_amulett_der_erleuchtung;
    value = 1000;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_bonus_hp;
    count[2] = 25;
    text[3] = name_bonus_mana;
    count[3] = 25;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void equip_amulett_der_erleuchtung() {
    self.attribute[atr_hitpoints] /*0*/ = self.attribute[atr_hitpoints] /*0*/ + 25;
    self.attribute[atr_hitpoints_max] /*1*/ = self.attribute[atr_hitpoints_max] /*1*/ + 25;
    self.attribute[atr_mana] /*2*/ = self.attribute[atr_mana] /*2*/ + 25;
    self.attribute[atr_mana_max] /*3*/ = self.attribute[atr_mana_max] /*3*/ + 25;
};

func void unequip_amulett_der_erleuchtung() {
    self.attribute[atr_mana] /*2*/ = self.attribute[atr_mana] /*2*/ - 25;
    self.attribute[atr_mana_max] /*3*/ = self.attribute[atr_mana_max] /*3*/ - 25;
    self.attribute[atr_hitpoints_max] /*1*/ = self.attribute[atr_hitpoints_max] /*1*/ - 25;
    if (self.attribute[atr_hitpoints] /*0*/ > 26) {
        self.attribute[atr_hitpoints] /*0*/ = self.attribute[atr_hitpoints] /*0*/ - 25;
    }
    else {
        self.attribute[atr_hitpoints] /*0*/ = 2;
    };
};

const int value_zaehne = 10;

const int value_krallen = 15;

const int value_wolfsfell = 10;

const int value_orkhundfell = 15;

const int value_panzerplatte = 50;

const int value_crawlerzangen = 10;

const int value_shadowbeastfell = 100;

const int value_lurkerklaue = 15;

const int value_lurkerhaut = 25;

const int value_sumpfhaihaut = 200;

const int value_trollfell = 300;

const int value_fluegel = 15;

const int value_stachel = 25;

const int value_feuerzunge = 500;

const int value_sumpfhaizaehne = 500;

const int value_shadowbeasthorn = 500;

const int value_trollhauer = 500;

const int value_steinherz = 1000;

const int value_feuerherz = 1000;

const int value_eisherz = 1000;

const int value_eistueck = 100;

instance itat_teeth_01(c_item) {
    name = "Êëûê";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItAt_Teeth_01.3DS";
    material = mat_leather;
    value = value_zaehne;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value_zaehne;
};

instance itat_wolf_01(c_item) {
    name = "Âîë÷üÿ øêóðà";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItAt_Wolf_01.3DS";
    material = mat_leather;
    value = value_wolfsfell;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value_wolfsfell;
};

instance itat_wolf_02(c_item) {
    name = "Øêóðà îðî÷åé ãîí÷åé";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItAt_Wolf_02.3DS";
    material = mat_leather;
    value = value_orkhundfell;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value_orkhundfell;
};

instance itat_waran_01(c_item) {
    name = "ßçûê îãíÿ";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItAt_Waran_01.3DS";
    material = mat_leather;
    value = value_feuerzunge;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value_feuerzunge;
};

instance itat_claws_01(c_item) {
    name = "Êîãòè";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItAt_Claws_01.3DS";
    material = mat_leather;
    value = value_krallen;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value_krallen;
};

instance itat_crawler_02(c_item) {
    name = "Ïëàñòèíà ïàíöèðÿ";
    mainflag = item_kat_none;
    flags = item_multi | item_mission;
    visual = "ItAt_Crawler_02.3DS";
    material = mat_wood;
    value = value_panzerplatte;
    description = "Ïëàñòèíà ïàíöèðÿ ïîëçóíà-âîèíà";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value_panzerplatte;
};

instance itat_crawler_01(c_item) {
    name = "×åëþñòè ïîëçóíà";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItAt_Crawler_01.3DS";
    material = mat_leather;
    value = value_crawlerzangen;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value_crawlerzangen;
};

instance itat_shadow_01(c_item) {
    name = "Øêóðà";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItAt_Shadowbeast_01.3DS";
    material = mat_leather;
    value = value_shadowbeastfell;
    description = "Øêóðà ìðàêîðèñà";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value_shadowbeastfell;
};

instance itat_shadow_02(c_item) {
    name = "Ðîã";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItAt_Shadowbeast_02.3DS";
    material = mat_leather;
    value = value_shadowbeasthorn;
    description = "Ðîã ìðàêîðèñà";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value_shadowbeasthorn;
};

instance itat_lurker_01(c_item) {
    name = "Êîãòè øíûãè";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItAt_Lurker_01.3DS";
    material = mat_leather;
    value = value_lurkerklaue;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value_lurkerklaue;
};

instance itat_lurker_02(c_item) {
    name = "Øêóðà øíûãè";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItAt_Lurker_02.3DS";
    material = mat_leather;
    value = value_lurkerhaut;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value_lurkerhaut;
};

instance itat_troll_02(c_item) {
    name = "Êëûê òðîëëÿ";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItAt_Troll_02.3DS";
    material = mat_leather;
    value = value_trollhauer;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value_trollhauer;
};

instance itat_troll_01(c_item) {
    name = "Øêóðà òðîëëÿ";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItAt_Troll_01.3DS";
    material = mat_leather;
    value = value_trollfell;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value_trollfell;
};

instance itat_swampshark_01(c_item) {
    name = "Øêóðà áîëîòîæîðà";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItAt_Swampshark_01.3DS";
    material = mat_leather;
    value = value_sumpfhaihaut;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value_sumpfhaihaut;
};

instance itat_swampshark_02(c_item) {
    name = "Çóá áîëîòîæîðà";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItAt_Swampshark_02.3DS";
    material = mat_leather;
    value = value_sumpfhaizaehne;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value_sumpfhaizaehne;
};

instance itat_bloodfly_01(c_item) {
    name = "Êðûëüÿ";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItAt_Bloodfly_01.3DS";
    material = mat_leather;
    value = value_fluegel;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value_fluegel;
};

instance itat_bloodfly_02(c_item) {
    name = "Æàëî øåðøíÿ";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItAt_Bloodfly_02.3DS";
    material = mat_leather;
    value = value_stachel;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value_stachel;
};

instance itat_stonegolem_01(c_item) {
    name = "Ñåðäöå êàìåííîãî ãîëåìà";
    mainflag = item_kat_rune;
    flags = item_mission;
    visual = "ItAt_StoneGolem_01.3DS";
    material = mat_stone;
    spell = spl_windfist;
    value = value_steinherz;
    description = name;
    text = "Ýòî ñåðäöå ïîáåæäåííîãî â áîþ";
    count = 0;
    text[1] = "ãîëåìà. Îíî îáëàäàåò";
    count[1] = 0;
    text[2] = "ñèëîé øâûðÿòü ïðîòèâíèêà";
    count[2] = 0;
    text[3] = "÷åðåç âîçäóõ.";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_steinherz;
};

instance itat_firegolem_01(c_item) {
    name = "Ñåðäöå îãíåííîãî ãîëåìà";
    mainflag = item_kat_rune;
    flags = item_mission;
    visual = "ItAt_FireGolem_01.3DS";
    material = mat_stone;
    spell = spl_fireball;
    value = value_feuerherz;
    description = name;
    text = "Ýòî ñåðäöå ïîáåæäåííîãî â áîþ";
    count = 0;
    text[1] = "ãîëåìà. Îíî îáëàäàåò";
    count[1] = 0;
    text[2] = "ñèëîé ïîäæèãàòü ";
    count[2] = 0;
    text[3] = "ïðîòèâíèêà.";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_feuerherz;
};

instance itat_icegolem_01(c_item) {
    name = "Ñåðäöå ëåäÿíîãî ãîëåìà";
    mainflag = item_kat_rune;
    flags = item_mission;
    visual = "ItAt_IceGolem_01.3DS";
    material = mat_stone;
    spell = spl_icecube;
    value = value_eisherz;
    description = name;
    text = "Ýòî ñåðäöå ïîáåæäåííîãî â áîþ";
    count = 0;
    text[1] = "ãîëåìà. Îíî îáëàäàåò";
    count[1] = 0;
    text[2] = "ñèëîé çàìîðàæèâàòü ïðîòèâíèêà.";
    count[2] = 0;
    text[3] = "çàìîðîçèòü âðàãà.";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_eisherz;
};

instance itat_icegolem_02(c_item) {
    name = "×àñòèöà ëåäÿíîãî ãîëåìà";
    mainflag = item_kat_rune;
    flags = 0;
    visual = "ItAt_IceGolem_01.3DS";
    material = mat_stone;
    cond_atr[2] = atr_mana_max;
    cond_value[2] = 500;
    spell = spl_thunderbolt;
    value = value_eistueck;
    description = name;
    text = "Ýòî ÷àñòèöà ïîáåæäåííîãî";
    count = 0;
    text[1] = "ëåäÿíîãî ãîëåìà.";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value_eistueck;
};

const int armor_value_multiplier = 30;

const int value_tpl_armor_l = 1350;

const int value_tpl_armor_m = 1650;

const int value_tpl_armor_h = 2100;

const int value_stt_armor_m = 750;

const int value_stt_armor_h = 1200;

const int value_grd_armor_l = 1350;

const int value_grd_armor_m = 1650;

const int value_grd_armor_h = 2100;

const int value_kdf_armor_l = 1200;

const int value_kdf_armor_h = 1500;

const int value_kdw_armor_l = 1950;

const int value_kdw_armor_h = 2100;

const int value_org_armor_l = 750;

const int value_org_armor_m = 1050;

const int value_org_armor_h = 1200;

const int value_sld_armor_l = 1350;

const int value_sld_armor_m = 1650;

const int value_sld_armor_h = 2100;

const int value_nov_armor_l = 500;

const int value_nov_armor_m = 750;

const int value_nov_armor_h = 1200;

const int value_vlk_armor_l = 250;

const int value_vlk_armor_m = 500;

const int value_sfb_armor_l = 250;

instance vlk_armor_l(c_item) {
    name = "Ïðîñòûå øòàíû äëÿ ðóäîêîïà";
    mainflag = item_kat_armor;
    flags = 0;
    wear = wear_torso;
    visual = "vlkl.3ds";
    visual_change = "Hum_VLKL_ARMOR.asc";
    visual_skin = 0;
    material = mat_leather;
    protection[prot_edge] /*2*/ = 10;
    protection[prot_blunt] /*1*/ = 10;
    protection[prot_point] /*6*/ = 0;
    protection[prot_fire] /*3*/ = 5;
    protection[prot_magic] /*5*/ = 0;
    value = value_vlk_armor_l;
    description = name;
    text = "";
    count = 0;
    text[1] = name_prot_edge;
    count[1] = protection[prot_edge] /*2*/;
    text[2] = name_prot_point;
    count[2] = protection[prot_point] /*6*/;
    text[3] = name_prot_fire;
    count[3] = protection[prot_fire] /*3*/;
    text[4] = name_prot_magic;
    count[4] = protection[prot_magic] /*5*/;
    text[5] = name_value;
    count[5] = value;
};

instance vlk_armor_m(c_item) {
    name = "Øòàíû äëÿ ðóäîêîïà";
    mainflag = item_kat_armor;
    flags = 0;
    wear = wear_torso;
    visual = "vlkm.3ds";
    visual_change = "Hum_VLKM_ARMOR.asc";
    visual_skin = 0;
    material = mat_leather;
    protection[prot_edge] /*2*/ = 15;
    protection[prot_blunt] /*1*/ = 15;
    protection[prot_point] /*6*/ = 0;
    protection[prot_fire] /*3*/ = 5;
    protection[prot_magic] /*5*/ = 0;
    value = value_vlk_armor_m;
    description = name;
    text = "";
    count = 0;
    text[1] = name_prot_edge;
    count[1] = protection[prot_edge] /*2*/;
    text[2] = name_prot_point;
    count[2] = protection[prot_point] /*6*/;
    text[3] = name_prot_fire;
    count[3] = protection[prot_fire] /*3*/;
    text[4] = name_prot_magic;
    count[4] = protection[prot_magic] /*5*/;
    text[5] = name_value;
    count[5] = value;
};

instance stt_armor_m(c_item) {
    name = "Îäåÿíèå Ïðèçðàêà";
    mainflag = item_kat_armor;
    flags = 0;
    wear = wear_torso;
    visual = "sttm.3ds";
    visual_change = "Hum_STTM_ARMOR.asc";
    visual_skin = 0;
    material = mat_leather;
    protection[prot_edge] /*2*/ = 30;
    protection[prot_blunt] /*1*/ = 30;
    protection[prot_point] /*6*/ = 5;
    protection[prot_fire] /*3*/ = 15;
    protection[prot_magic] /*5*/ = 0;
    value = value_stt_armor_m;
    description = name;
    text = "";
    count = 0;
    text[1] = name_prot_edge;
    count[1] = protection[prot_edge] /*2*/;
    text[2] = name_prot_point;
    count[2] = protection[prot_point] /*6*/;
    text[3] = name_prot_fire;
    count[3] = protection[prot_fire] /*3*/;
    text[4] = name_prot_magic;
    count[4] = protection[prot_magic] /*5*/;
    text[5] = name_value;
    count[5] = value;
};

instance stt_armor_h(c_item) {
    name = "Äîñïåõè Ïðèçðàêà";
    mainflag = item_kat_armor;
    flags = 0;
    wear = wear_torso;
    visual = "stth.3ds";
    visual_change = "Hum_STTS_ARMOR.asc";
    visual_skin = 0;
    material = mat_leather;
    protection[prot_edge] /*2*/ = 40;
    protection[prot_blunt] /*1*/ = 40;
    protection[prot_point] /*6*/ = 5;
    protection[prot_fire] /*3*/ = 20;
    protection[prot_magic] /*5*/ = 0;
    value = value_stt_armor_h;
    description = name;
    text = "";
    count = 0;
    text[1] = name_prot_edge;
    count[1] = protection[prot_edge] /*2*/;
    text[2] = name_prot_point;
    count[2] = protection[prot_point] /*6*/;
    text[3] = name_prot_fire;
    count[3] = protection[prot_fire] /*3*/;
    text[4] = name_prot_magic;
    count[4] = protection[prot_magic] /*5*/;
    text[5] = name_value;
    count[5] = value;
};

instance grd_armor_l(c_item) {
    name = "Ëåãêèå äîñïåõè ñòðàæíèêà";
    mainflag = item_kat_armor;
    flags = 0;
    wear = wear_torso;
    visual = "grdl.3ds";
    visual_change = "Hum_GRDL_ARMOR.asc";
    visual_skin = 0;
    material = mat_leather;
    protection[prot_edge] /*2*/ = 45;
    protection[prot_blunt] /*1*/ = 45;
    protection[prot_point] /*6*/ = 5;
    protection[prot_fire] /*3*/ = 20;
    protection[prot_magic] /*5*/ = 0;
    value = value_grd_armor_l;
    description = name;
    text = "";
    count = 0;
    text[1] = name_prot_edge;
    count[1] = protection[prot_edge] /*2*/;
    text[2] = name_prot_point;
    count[2] = protection[prot_point] /*6*/;
    text[3] = name_prot_fire;
    count[3] = protection[prot_fire] /*3*/;
    text[4] = name_prot_magic;
    count[4] = protection[prot_magic] /*5*/;
    text[5] = name_value;
    count[5] = value;
};

instance grd_armor_m(c_item) {
    name = "Äîñïåõè ñòðàæíèêà";
    mainflag = item_kat_armor;
    flags = 0;
    wear = wear_torso;
    visual = "grdm.3ds";
    visual_change = "Hum_GRDM_ARMOR.asc";
    visual_skin = 0;
    material = mat_leather;
    protection[prot_edge] /*2*/ = 55;
    protection[prot_blunt] /*1*/ = 55;
    protection[prot_point] /*6*/ = 10;
    protection[prot_fire] /*3*/ = 25;
    protection[prot_magic] /*5*/ = 0;
    value = value_grd_armor_m;
    description = name;
    text = "";
    count = 0;
    text[1] = name_prot_edge;
    count[1] = protection[prot_edge] /*2*/;
    text[2] = name_prot_point;
    count[2] = protection[prot_point] /*6*/;
    text[3] = name_prot_fire;
    count[3] = protection[prot_fire] /*3*/;
    text[4] = name_prot_magic;
    count[4] = protection[prot_magic] /*5*/;
    text[5] = name_value;
    count[5] = value;
};

instance grd_armor_h(c_item) {
    name = "Òÿæåëûå äîñïåõè ñòðàæíèêà";
    mainflag = item_kat_armor;
    flags = 0;
    wear = wear_torso;
    visual = "grdh.3ds";
    visual_change = "Hum_GRDS_ARMOR.asc";
    visual_skin = 0;
    material = mat_metal;
    protection[prot_edge] /*2*/ = 70;
    protection[prot_blunt] /*1*/ = 70;
    protection[prot_point] /*6*/ = 10;
    protection[prot_fire] /*3*/ = 35;
    protection[prot_magic] /*5*/ = 0;
    value = value_grd_armor_h;
    description = name;
    text = "";
    count = 0;
    text[1] = name_prot_edge;
    count[1] = protection[prot_edge] /*2*/;
    text[2] = name_prot_point;
    count[2] = protection[prot_point] /*6*/;
    text[3] = name_prot_fire;
    count[3] = protection[prot_fire] /*3*/;
    text[4] = name_prot_magic;
    count[4] = protection[prot_magic] /*5*/;
    text[5] = name_value;
    count[5] = value;
};

instance ebr_armor_m(c_item) {
    name = "Ðîñêîøíàÿ ìàíòèÿ";
    mainflag = item_kat_armor;
    flags = 0;
    wear = wear_torso;
    visual = "ebrm.3ds";
    visual_change = "Hum_EBRM_ARMOR.asc";
    visual_skin = 0;
    material = mat_leather;
    ownerguild = gil_ebr;
    protection[prot_edge] /*2*/ = 72;
    protection[prot_blunt] /*1*/ = 72;
    protection[prot_point] /*6*/ = 7;
    protection[prot_fire] /*3*/ = 36;
    protection[prot_magic] /*5*/ = 3;
    value = protection[prot_edge] /*2*/ * armor_value_multiplier;
    description = name;
    text = "";
    count = 0;
    text[1] = name_prot_edge;
    count[1] = protection[prot_edge] /*2*/;
    text[2] = name_prot_point;
    count[2] = protection[prot_point] /*6*/;
    text[3] = name_prot_fire;
    count[3] = protection[prot_fire] /*3*/;
    text[4] = name_prot_magic;
    count[4] = protection[prot_magic] /*5*/;
    text[5] = name_value;
    count[5] = value;
};

instance ebr_armor_h(c_item) {
    name = "Äîñïåõè Ãîìåçà";
    mainflag = item_kat_armor;
    flags = 0;
    wear = wear_torso;
    owner = ebr_100_gomez;
    visual = "ebrh.3ds";
    visual_change = "Hum_EBRS_ARMOR.asc";
    visual_skin = 0;
    material = mat_metal;
    ownerguild = gil_ebr;
    protection[prot_edge] /*2*/ = 85;
    protection[prot_blunt] /*1*/ = 85;
    protection[prot_point] /*6*/ = 9;
    protection[prot_fire] /*3*/ = 42;
    protection[prot_magic] /*5*/ = 3;
    value = protection[prot_edge] /*2*/ * armor_value_multiplier;
    description = name;
    text = "";
    count = 0;
    text[1] = name_prot_edge;
    count[1] = protection[prot_edge] /*2*/;
    text[2] = name_prot_point;
    count[2] = protection[prot_point] /*6*/;
    text[3] = name_prot_fire;
    count[3] = protection[prot_fire] /*3*/;
    text[4] = name_prot_magic;
    count[4] = protection[prot_magic] /*5*/;
    text[5] = name_value;
    count[5] = value;
};

instance ebr_armor_h2(c_item) {
    name = "Òÿæåëûå äîñïåõè Áàðîíà";
    mainflag = item_kat_armor;
    flags = 0;
    wear = wear_torso;
    visual = "ebrh2.3ds";
    visual_change = "Hum_EBRS_ARMOR2.asc";
    visual_skin = 0;
    material = mat_metal;
    ownerguild = gil_ebr;
    protection[prot_edge] /*2*/ = 80;
    protection[prot_blunt] /*1*/ = 80;
    protection[prot_point] /*6*/ = 8;
    protection[prot_fire] /*3*/ = 40;
    protection[prot_magic] /*5*/ = 3;
    value = protection[prot_edge] /*2*/ * armor_value_multiplier;
    description = name;
    text = "";
    count = 0;
    text[1] = name_prot_edge;
    count[1] = protection[prot_edge] /*2*/;
    text[2] = name_prot_point;
    count[2] = protection[prot_point] /*6*/;
    text[3] = name_prot_fire;
    count[3] = protection[prot_fire] /*3*/;
    text[4] = name_prot_magic;
    count[4] = protection[prot_magic] /*5*/;
    text[5] = name_value;
    count[5] = value;
};

instance sfb_armor_l(c_item) {
    name = "Îäåÿíèå ðóäîêîïà";
    mainflag = item_kat_armor;
    flags = 0;
    wear = wear_torso;
    visual = "sfbl.3ds";
    visual_change = "Hum_SFBL_ARMOR.asc";
    visual_skin = 0;
    material = mat_leather;
    protection[prot_edge] /*2*/ = 10;
    protection[prot_blunt] /*1*/ = 10;
    protection[prot_point] /*6*/ = 0;
    protection[prot_fire] /*3*/ = 5;
    protection[prot_magic] /*5*/ = 0;
    value = value_sfb_armor_l;
    description = name;
    text = "";
    count = 0;
    text[1] = name_prot_edge;
    count[1] = protection[prot_edge] /*2*/;
    text[2] = name_prot_point;
    count[2] = protection[prot_point] /*6*/;
    text[3] = name_prot_fire;
    count[3] = protection[prot_fire] /*3*/;
    text[4] = name_prot_magic;
    count[4] = protection[prot_magic] /*5*/;
    text[5] = name_value;
    count[5] = value;
};

instance org_armor_l(c_item) {
    name = "Ëåãêîå îäåÿíèå âîðà";
    mainflag = item_kat_armor;
    flags = 0;
    wear = wear_torso;
    visual = "orgl.3ds";
    visual_change = "Hum_ORGL_ARMOR.asc";
    visual_skin = 0;
    material = mat_leather;
    protection[prot_edge] /*2*/ = 30;
    protection[prot_blunt] /*1*/ = 30;
    protection[prot_point] /*6*/ = 5;
    protection[prot_fire] /*3*/ = 15;
    protection[prot_magic] /*5*/ = 0;
    value = value_org_armor_l;
    description = name;
    text = "";
    count = 0;
    text[1] = name_prot_edge;
    count[1] = protection[prot_edge] /*2*/;
    text[2] = name_prot_point;
    count[2] = protection[prot_point] /*6*/;
    text[3] = name_prot_fire;
    count[3] = protection[prot_fire] /*3*/;
    text[4] = name_prot_magic;
    count[4] = protection[prot_magic] /*5*/;
    text[5] = name_value;
    count[5] = value;
};

instance org_armor_m(c_item) {
    name = "Îäåÿíèå âîðà";
    mainflag = item_kat_armor;
    flags = 0;
    wear = wear_torso;
    visual = "orgm.3ds";
    visual_change = "Hum_ORGM_ARMOR.asc";
    visual_skin = 0;
    material = mat_leather;
    protection[prot_edge] /*2*/ = 35;
    protection[prot_blunt] /*1*/ = 35;
    protection[prot_point] /*6*/ = 5;
    protection[prot_fire] /*3*/ = 15;
    protection[prot_magic] /*5*/ = 0;
    value = value_org_armor_m;
    description = name;
    text = "";
    count = 0;
    text[1] = name_prot_edge;
    count[1] = protection[prot_edge] /*2*/;
    text[2] = name_prot_point;
    count[2] = protection[prot_point] /*6*/;
    text[3] = name_prot_fire;
    count[3] = protection[prot_fire] /*3*/;
    text[4] = name_prot_magic;
    count[4] = protection[prot_magic] /*5*/;
    text[5] = name_value;
    count[5] = value;
};

instance org_armor_h(c_item) {
    name = "Òÿæåëîå îäåÿíèå âîðà";
    mainflag = item_kat_armor;
    flags = 0;
    wear = wear_torso;
    visual = "orgh.3ds";
    visual_change = "Hum_ORGS_ARMOR.asc";
    visual_skin = 0;
    material = mat_leather;
    protection[prot_edge] /*2*/ = 40;
    protection[prot_blunt] /*1*/ = 40;
    protection[prot_point] /*6*/ = 5;
    protection[prot_fire] /*3*/ = 20;
    protection[prot_magic] /*5*/ = 0;
    value = value_org_armor_h;
    description = name;
    text = "";
    count = 0;
    text[1] = name_prot_edge;
    count[1] = protection[prot_edge] /*2*/;
    text[2] = name_prot_point;
    count[2] = protection[prot_point] /*6*/;
    text[3] = name_prot_fire;
    count[3] = protection[prot_fire] /*3*/;
    text[4] = name_prot_magic;
    count[4] = protection[prot_magic] /*5*/;
    text[5] = name_value;
    count[5] = value;
};

instance sld_armor_l(c_item) {
    name = "Ëåãêèå äîñïåõè íàåìíèêà";
    mainflag = item_kat_armor;
    flags = 0;
    wear = wear_torso;
    visual = "sldl.3ds";
    visual_change = "Hum_SLDL_ARMOR.asc";
    visual_skin = 0;
    material = mat_leather;
    protection[prot_edge] /*2*/ = 45;
    protection[prot_blunt] /*1*/ = 45;
    protection[prot_point] /*6*/ = 5;
    protection[prot_fire] /*3*/ = 20;
    protection[prot_magic] /*5*/ = 0;
    value = value_sld_armor_l;
    description = name;
    text = "";
    count = 0;
    text[1] = name_prot_edge;
    count[1] = protection[prot_edge] /*2*/;
    text[2] = name_prot_point;
    count[2] = protection[prot_point] /*6*/;
    text[3] = name_prot_fire;
    count[3] = protection[prot_fire] /*3*/;
    text[4] = name_prot_magic;
    count[4] = protection[prot_magic] /*5*/;
    text[5] = name_value;
    count[5] = value;
};

instance sld_armor_m(c_item) {
    name = "Äîñïåõè íàåìíèêà";
    mainflag = item_kat_armor;
    flags = 0;
    wear = wear_torso;
    visual = "sldm.3ds";
    visual_change = "Hum_SLDM_ARMOR.asc";
    visual_skin = 0;
    material = mat_leather;
    protection[prot_edge] /*2*/ = 55;
    protection[prot_blunt] /*1*/ = 55;
    protection[prot_point] /*6*/ = 10;
    protection[prot_fire] /*3*/ = 25;
    protection[prot_magic] /*5*/ = 0;
    value = value_sld_armor_m;
    description = name;
    text = "";
    count = 0;
    text[1] = name_prot_edge;
    count[1] = protection[prot_edge] /*2*/;
    text[2] = name_prot_point;
    count[2] = protection[prot_point] /*6*/;
    text[3] = name_prot_fire;
    count[3] = protection[prot_fire] /*3*/;
    text[4] = name_prot_magic;
    count[4] = protection[prot_magic] /*5*/;
    text[5] = name_value;
    count[5] = value;
};

instance sld_armor_h(c_item) {
    name = "Òÿæåëûå äîñïåõè íàåìíèêà";
    mainflag = item_kat_armor;
    flags = 0;
    wear = wear_torso;
    visual = "sldh.3ds";
    visual_change = "Hum_SLDS_ARMOR.asc";
    visual_skin = 0;
    material = mat_leather;
    protection[prot_edge] /*2*/ = 70;
    protection[prot_blunt] /*1*/ = 70;
    protection[prot_point] /*6*/ = 10;
    protection[prot_fire] /*3*/ = 35;
    protection[prot_magic] /*5*/ = 0;
    value = value_sld_armor_h;
    description = name;
    text = "";
    count = 0;
    text[1] = name_prot_edge;
    count[1] = protection[prot_edge] /*2*/;
    text[2] = name_prot_point;
    count[2] = protection[prot_point] /*6*/;
    text[3] = name_prot_fire;
    count[3] = protection[prot_fire] /*3*/;
    text[4] = name_prot_magic;
    count[4] = protection[prot_magic] /*5*/;
    text[5] = name_value;
    count[5] = value;
};

instance nov_armor_l(c_item) {
    name = "Íàáåäðåííàÿ ïîâÿçêà ïîñëóøíèêà";
    mainflag = item_kat_armor;
    flags = 0;
    wear = wear_torso;
    visual = "novl.3ds";
    visual_change = "Hum_NOVL_ARMOR.asc";
    visual_skin = 0;
    material = mat_leather;
    protection[prot_edge] /*2*/ = 15;
    protection[prot_blunt] /*1*/ = 15;
    protection[prot_point] /*6*/ = 0;
    protection[prot_fire] /*3*/ = 10;
    protection[prot_magic] /*5*/ = 0;
    value = value_nov_armor_l;
    description = name;
    text = "";
    count = 0;
    text[1] = name_prot_edge;
    count[1] = protection[prot_edge] /*2*/;
    text[2] = name_prot_point;
    count[2] = protection[prot_point] /*6*/;
    text[3] = name_prot_fire;
    count[3] = protection[prot_fire] /*3*/;
    text[4] = name_prot_magic;
    count[4] = protection[prot_magic] /*5*/;
    text[5] = name_value;
    count[5] = value;
};

instance nov_armor_m(c_item) {
    name = "Ëåãêèå äîñïåõè ïîñëóøíèêà";
    mainflag = item_kat_armor;
    flags = 0;
    wear = wear_torso;
    visual = "novm.3ds";
    visual_change = "Hum_NOVM_ARMOR.asc";
    visual_skin = 0;
    material = mat_leather;
    protection[prot_edge] /*2*/ = 30;
    protection[prot_blunt] /*1*/ = 30;
    protection[prot_point] /*6*/ = 0;
    protection[prot_fire] /*3*/ = 15;
    protection[prot_magic] /*5*/ = 0;
    value = value_nov_armor_m;
    description = name;
    text = "";
    count = 0;
    text[1] = name_prot_edge;
    count[1] = protection[prot_edge] /*2*/;
    text[2] = name_prot_point;
    count[2] = protection[prot_point] /*6*/;
    text[3] = name_prot_fire;
    count[3] = protection[prot_fire] /*3*/;
    text[4] = name_prot_magic;
    count[4] = protection[prot_magic] /*5*/;
    text[5] = name_value;
    count[5] = value;
};

instance nov_armor_h(c_item) {
    name = "Äîñïåõè ïîñëóøíèêà";
    mainflag = item_kat_armor;
    flags = 0;
    wear = wear_torso;
    visual = "novh.3ds";
    visual_change = "Hum_NOVS_ARMOR.asc";
    visual_skin = 0;
    material = mat_leather;
    protection[prot_edge] /*2*/ = 40;
    protection[prot_blunt] /*1*/ = 40;
    protection[prot_point] /*6*/ = 5;
    protection[prot_fire] /*3*/ = 20;
    protection[prot_magic] /*5*/ = 0;
    value = value_nov_armor_h;
    description = name;
    text = "";
    count = 0;
    text[1] = name_prot_edge;
    count[1] = protection[prot_edge] /*2*/;
    text[2] = name_prot_point;
    count[2] = protection[prot_point] /*6*/;
    text[3] = name_prot_fire;
    count[3] = protection[prot_fire] /*3*/;
    text[4] = name_prot_magic;
    count[4] = protection[prot_magic] /*5*/;
    text[5] = name_value;
    count[5] = value;
};

instance tpl_armor_l(c_item) {
    name = "Ëåãêèå äîñïåõè Ñòðàæà";
    mainflag = item_kat_armor;
    flags = 0;
    wear = wear_torso;
    visual = "tpll.3ds";
    visual_change = "Hum_TPLL_ARMOR.asc";
    visual_skin = 0;
    material = mat_leather;
    protection[prot_edge] /*2*/ = 45;
    protection[prot_blunt] /*1*/ = 45;
    protection[prot_point] /*6*/ = 5;
    protection[prot_fire] /*3*/ = 20;
    protection[prot_magic] /*5*/ = 0;
    value = value_tpl_armor_l;
    description = name;
    text = "";
    count = 0;
    text[1] = name_prot_edge;
    count[1] = protection[prot_edge] /*2*/;
    text[2] = name_prot_point;
    count[2] = protection[prot_point] /*6*/;
    text[3] = name_prot_fire;
    count[3] = protection[prot_fire] /*3*/;
    text[4] = name_prot_magic;
    count[4] = protection[prot_magic] /*5*/;
    text[5] = name_value;
    count[5] = value;
};

instance tpl_armor_m(c_item) {
    name = "Äîñïåõè Ñòðàæà";
    mainflag = item_kat_armor;
    flags = 0;
    wear = wear_torso;
    visual = "tplm.3ds";
    visual_change = "Hum_TPLM_ARMOR.asc";
    visual_skin = 0;
    material = mat_leather;
    protection[prot_edge] /*2*/ = 55;
    protection[prot_blunt] /*1*/ = 55;
    protection[prot_point] /*6*/ = 10;
    protection[prot_fire] /*3*/ = 25;
    protection[prot_magic] /*5*/ = 0;
    value = value_tpl_armor_m;
    description = name;
    text = "";
    count = 0;
    text[1] = name_prot_edge;
    count[1] = protection[prot_edge] /*2*/;
    text[2] = name_prot_point;
    count[2] = protection[prot_point] /*6*/;
    text[3] = name_prot_fire;
    count[3] = protection[prot_fire] /*3*/;
    text[4] = name_prot_magic;
    count[4] = protection[prot_magic] /*5*/;
    text[5] = name_value;
    count[5] = value;
};

instance tpl_armor_h(c_item) {
    name = "Òÿæåëûå äîñïåõè Ñòðàæà";
    mainflag = item_kat_armor;
    flags = 0;
    wear = wear_torso;
    visual = "tplh.3ds";
    visual_change = "Hum_TPLS_ARMOR.asc";
    visual_skin = 0;
    material = mat_leather;
    protection[prot_edge] /*2*/ = 70;
    protection[prot_blunt] /*1*/ = 70;
    protection[prot_point] /*6*/ = 10;
    protection[prot_fire] /*3*/ = 35;
    protection[prot_magic] /*5*/ = 0;
    value = value_tpl_armor_h;
    description = name;
    text = "";
    count = 0;
    text[1] = name_prot_edge;
    count[1] = protection[prot_edge] /*2*/;
    text[2] = name_prot_point;
    count[2] = protection[prot_point] /*6*/;
    text[3] = name_prot_fire;
    count[3] = protection[prot_fire] /*3*/;
    text[4] = name_prot_magic;
    count[4] = protection[prot_magic] /*5*/;
    text[5] = name_value;
    count[5] = value;
};

instance gur_armor_m(c_item) {
    name = "Îáëà÷åíèå Ãóðó";
    mainflag = item_kat_armor;
    flags = 0;
    wear = wear_torso;
    visual = "gurm.3ds";
    visual_change = "Hum_GURM_ARMOR.asc";
    visual_skin = 0;
    material = mat_leather;
    ownerguild = gil_gur;
    protection[prot_edge] /*2*/ = 71;
    protection[prot_blunt] /*1*/ = 71;
    protection[prot_point] /*6*/ = 7;
    protection[prot_fire] /*3*/ = 35;
    protection[prot_magic] /*5*/ = 3;
    value = protection[prot_edge] /*2*/ * armor_value_multiplier;
    description = name;
    text = "";
    count = 0;
    text[1] = name_prot_edge;
    count[1] = protection[prot_edge] /*2*/;
    text[2] = name_prot_point;
    count[2] = protection[prot_point] /*6*/;
    text[3] = name_prot_fire;
    count[3] = protection[prot_fire] /*3*/;
    text[4] = name_prot_magic;
    count[4] = protection[prot_magic] /*5*/;
    text[5] = name_value;
    count[5] = value;
};

instance gur_armor_h(c_item) {
    name = "Îáëà÷åíèå âûñøèõ Ãóðó";
    mainflag = item_kat_armor;
    flags = 0;
    wear = wear_torso;
    visual = "gurh.3ds";
    visual_change = "Hum_GURS_ARMOR.asc";
    visual_skin = 0;
    material = mat_leather;
    ownerguild = gil_gur;
    protection[prot_edge] /*2*/ = 82;
    protection[prot_blunt] /*1*/ = 82;
    protection[prot_point] /*6*/ = 8;
    protection[prot_fire] /*3*/ = 41;
    protection[prot_magic] /*5*/ = 4;
    value = protection[prot_edge] /*2*/ * armor_value_multiplier;
    description = name;
    text = "";
    count = 0;
    text[1] = name_prot_edge;
    count[1] = protection[prot_edge] /*2*/;
    text[2] = name_prot_point;
    count[2] = protection[prot_point] /*6*/;
    text[3] = name_prot_fire;
    count[3] = protection[prot_fire] /*3*/;
    text[4] = name_prot_magic;
    count[4] = protection[prot_magic] /*5*/;
    text[5] = name_value;
    count[5] = value;
};

instance kdf_armor_l(c_item) {
    name = "Îáëà÷åíèå ìàãîâ îãíÿ";
    mainflag = item_kat_armor;
    flags = 0;
    wear = wear_torso;
    visual = "kdfl.3ds";
    visual_change = "Hum_KDFL_ARMOR.asc";
    visual_skin = 0;
    material = mat_leather;
    protection[prot_edge] /*2*/ = 40;
    protection[prot_blunt] /*1*/ = 40;
    protection[prot_point] /*6*/ = 5;
    protection[prot_fire] /*3*/ = 25;
    protection[prot_magic] /*5*/ = 5;
    value = value_kdf_armor_l;
    description = name;
    text = "";
    count = 0;
    text[1] = name_prot_edge;
    count[1] = protection[prot_edge] /*2*/;
    text[2] = name_prot_point;
    count[2] = protection[prot_point] /*6*/;
    text[3] = name_prot_fire;
    count[3] = protection[prot_fire] /*3*/;
    text[4] = name_prot_magic;
    count[4] = protection[prot_magic] /*5*/;
    text[5] = name_value;
    count[5] = value;
};

instance kdf_armor_h(c_item) {
    name = "Îáëà÷åíèå âûñøèõ ìàãîâ îãíÿ";
    mainflag = item_kat_armor;
    flags = 0;
    wear = wear_torso;
    visual = "kdfh.3ds";
    visual_change = "Hum_KDFS_ARMOR.asc";
    visual_skin = 0;
    material = mat_leather;
    protection[prot_edge] /*2*/ = 50;
    protection[prot_blunt] /*1*/ = 50;
    protection[prot_point] /*6*/ = 5;
    protection[prot_fire] /*3*/ = 30;
    protection[prot_magic] /*5*/ = 10;
    value = value_kdf_armor_h;
    description = name;
    text = "";
    count = 0;
    text[1] = name_prot_edge;
    count[1] = protection[prot_edge] /*2*/;
    text[2] = name_prot_point;
    count[2] = protection[prot_point] /*6*/;
    text[3] = name_prot_fire;
    count[3] = protection[prot_fire] /*3*/;
    text[4] = name_prot_magic;
    count[4] = protection[prot_magic] /*5*/;
    text[5] = name_value;
    count[5] = value;
};

instance kdw_armor_l(c_item) {
    name = "Îáëà÷åíèå ìàãîâ âîäû";
    mainflag = item_kat_armor;
    flags = 0;
    wear = wear_torso;
    visual = "kdwl.3ds";
    visual_change = "Hum_KDWL_ARMOR.asc";
    visual_skin = 0;
    material = mat_leather;
    protection[prot_edge] /*2*/ = 65;
    protection[prot_blunt] /*1*/ = 65;
    protection[prot_point] /*6*/ = 5;
    protection[prot_fire] /*3*/ = 40;
    protection[prot_magic] /*5*/ = 15;
    value = value_kdw_armor_l;
    description = name;
    text = "";
    count = 0;
    text[1] = name_prot_edge;
    count[1] = protection[prot_edge] /*2*/;
    text[2] = name_prot_point;
    count[2] = protection[prot_point] /*6*/;
    text[3] = name_prot_fire;
    count[3] = protection[prot_fire] /*3*/;
    text[4] = name_prot_magic;
    count[4] = protection[prot_magic] /*5*/;
    text[5] = name_value;
    count[5] = value;
};

instance kdw_armor_h(c_item) {
    name = "Îáëà÷åíèå âûñøèõ ìàãîâ âîäû";
    mainflag = item_kat_armor;
    flags = 0;
    wear = wear_torso;
    visual = "kdwh.3ds";
    visual_change = "Hum_KDWS_ARMOR.asc";
    visual_skin = 0;
    material = mat_leather;
    protection[prot_edge] /*2*/ = 70;
    protection[prot_blunt] /*1*/ = 70;
    protection[prot_point] /*6*/ = 10;
    protection[prot_fire] /*3*/ = 45;
    protection[prot_magic] /*5*/ = 20;
    value = value_kdw_armor_h;
    description = name;
    text = "";
    count = 0;
    text[1] = name_prot_edge;
    count[1] = protection[prot_edge] /*2*/;
    text[2] = name_prot_point;
    count[2] = protection[prot_point] /*6*/;
    text[3] = name_prot_fire;
    count[3] = protection[prot_fire] /*3*/;
    text[4] = name_prot_magic;
    count[4] = protection[prot_magic] /*5*/;
    text[5] = name_value;
    count[5] = value;
};

instance dmb_armor_m(c_item) {
    name = "Îáëà÷åíèå òåìíûõ èñêóññòâ";
    mainflag = item_kat_armor;
    flags = 0;
    wear = wear_torso;
    visual = "dmbm.3ds";
    visual_change = "Hum_DMBM_ARMOR.asc";
    visual_skin = 0;
    material = mat_leather;
    ownerguild = gil_dmb;
    protection[prot_edge] /*2*/ = 90;
    protection[prot_blunt] /*1*/ = 90;
    protection[prot_point] /*6*/ = 20;
    protection[prot_fire] /*3*/ = 60;
    protection[prot_magic] /*5*/ = 30;
    value = protection[prot_edge] /*2*/ * armor_value_multiplier;
    description = name;
    text = "";
    count = 0;
    text[1] = name_prot_edge;
    count[1] = protection[prot_edge] /*2*/;
    text[2] = name_prot_point;
    count[2] = protection[prot_point] /*6*/;
    text[3] = name_prot_fire;
    count[3] = protection[prot_fire] /*3*/;
    text[4] = name_prot_magic;
    count[4] = protection[prot_magic] /*5*/;
    text[5] = name_value;
    count[5] = value;
};

instance crw_armor_h(c_item) {
    name = "Äîñïåõè èç ïëàñòèí ïîëçóíîâ";
    mainflag = item_kat_armor;
    flags = 0;
    wear = wear_torso;
    visual = "crws.3ds";
    visual_change = "Hum_CRAWLER_ARMOR.asc";
    visual_skin = 0;
    material = mat_wood;
    protection[prot_edge] /*2*/ = 80;
    protection[prot_blunt] /*1*/ = 80;
    protection[prot_point] /*6*/ = 15;
    protection[prot_fire] /*3*/ = 30;
    protection[prot_magic] /*5*/ = 5;
    value = protection[prot_edge] /*2*/ * armor_value_multiplier;
    description = name;
    text = "";
    count = 0;
    text[1] = name_prot_edge;
    count[1] = protection[prot_edge] /*2*/;
    text[2] = name_prot_point;
    count[2] = protection[prot_point] /*6*/;
    text[3] = name_prot_fire;
    count[3] = protection[prot_fire] /*3*/;
    text[4] = name_prot_magic;
    count[4] = protection[prot_magic] /*5*/;
    text[5] = name_value;
    count[5] = value;
};

instance ore_armor_m(c_item) {
    name = "Äðåâíèå äîñïåõè èç ðóäû";
    mainflag = item_kat_armor;
    flags = 0;
    wear = wear_torso;
    visual = "magie.3ds";
    visual_change = "Hum_MAGIE_ARMOR.asc";
    visual_skin = 0;
    material = mat_wood;
    protection[prot_edge] /*2*/ = 95;
    protection[prot_blunt] /*1*/ = 95;
    protection[prot_point] /*6*/ = 25;
    protection[prot_fire] /*3*/ = 40;
    protection[prot_magic] /*5*/ = 10;
    value = (protection[prot_edge] /*2*/ * armor_value_multiplier) * 2;
    description = name;
    text = "Ïîëíîñòüþ âûêîâàíû èç ìàãè÷åñêîé ðóäû.";
    count = 0;
    text[1] = name_prot_edge;
    count[1] = protection[prot_edge] /*2*/;
    text[2] = name_prot_point;
    count[2] = protection[prot_point] /*6*/;
    text[3] = name_prot_fire;
    count[3] = protection[prot_fire] /*3*/;
    text[4] = name_prot_magic;
    count[4] = protection[prot_magic] /*5*/;
    text[5] = name_value;
    count[5] = value;
};

instance ore_armor_h(c_item) {
    name = "Óëó÷øåííûå äîñïåõè èç ðóäû";
    mainflag = item_kat_armor;
    flags = 0;
    wear = wear_torso;
    visual = "magie.3ds";
    visual_change = "Hum_MAGIE_ARMOR.asc";
    visual_skin = 0;
    material = mat_wood;
    protection[prot_edge] /*2*/ = 100;
    protection[prot_blunt] /*1*/ = 100;
    protection[prot_point] /*6*/ = 30;
    protection[prot_fire] /*3*/ = 45;
    protection[prot_magic] /*5*/ = 15;
    value = (protection[prot_edge] /*2*/ * armor_value_multiplier) * 2;
    description = name;
    text = "Ñòîóí, êóçíåö, ñóìåë óëó÷øèòü èõ!";
    count = 0;
    text[1] = name_prot_edge;
    count[1] = protection[prot_edge] /*2*/;
    text[2] = name_prot_point;
    count[2] = protection[prot_point] /*6*/;
    text[3] = name_prot_fire;
    count[3] = protection[prot_fire] /*3*/;
    text[4] = name_prot_magic;
    count[4] = protection[prot_magic] /*5*/;
    text[5] = name_value;
    count[5] = value;
};

instance law_armor(c_item) {
    name = "Îáëà÷åíèå ñóäüè";
    mainflag = item_kat_armor;
    flags = 0;
    wear = wear_torso;
    visual = "dmbm.3ds";
    visual_change = "Hum_LAW_ARMOR.asc";
    visual_skin = 0;
    material = mat_leather;
    ownerguild = gil_dmb;
    protection[prot_edge] /*2*/ = 20;
    protection[prot_blunt] /*1*/ = 20;
    protection[prot_point] /*6*/ = 2;
    protection[prot_fire] /*3*/ = 10;
    protection[prot_magic] /*5*/ = 0;
    value = protection[prot_edge] /*2*/ * armor_value_multiplier;
    description = name;
    text = "";
    count = 0;
    text[1] = name_prot_edge;
    count[1] = protection[prot_edge] /*2*/;
    text[2] = name_prot_point;
    count[2] = protection[prot_point] /*6*/;
    text[3] = name_prot_fire;
    count[3] = protection[prot_fire] /*3*/;
    text[4] = name_prot_magic;
    count[4] = protection[prot_magic] /*5*/;
    text[5] = name_value;
    count[5] = value;
};

instance grd_armor_i(c_item) {
    name = "Äîñïåõè êîðîëåâñêîãî ñòðàæíèêà";
    mainflag = item_kat_armor;
    flags = 0;
    wear = wear_torso;
    visual = "grdi.3ds";
    visual_change = "Hum_GRDI_ARMOR.asc";
    visual_skin = 0;
    material = mat_leather;
    ownerguild = gil_grd;
    protection[prot_edge] /*2*/ = 50;
    protection[prot_blunt] /*1*/ = 50;
    protection[prot_point] /*6*/ = 5;
    protection[prot_fire] /*3*/ = 25;
    protection[prot_magic] /*5*/ = 1;
    value = protection[prot_edge] /*2*/ * armor_value_multiplier;
    description = name;
    text = "";
    count = 0;
    text[1] = name_prot_edge;
    count[1] = protection[prot_edge] /*2*/;
    text[2] = name_prot_point;
    count[2] = protection[prot_point] /*6*/;
    text[3] = name_prot_fire;
    count[3] = protection[prot_fire] /*3*/;
    text[4] = name_prot_magic;
    count[4] = protection[prot_magic] /*5*/;
    text[5] = name_value;
    count[5] = value;
};

instance bab_armor_nude(c_item) {
    name = "Îáíàæåííàÿ äåâèöà";
    mainflag = item_kat_armor;
    flags = 0;
    wear = wear_torso;
    visual = "vobbox.3ds";
    visual_change = "Bab_ARMOR.asc";
    visual_skin = 0;
    material = mat_leather;
    protection[prot_edge] /*2*/ = 0;
    protection[prot_blunt] /*1*/ = 0;
    protection[prot_point] /*6*/ = 0;
    protection[prot_fire] /*3*/ = 0;
    protection[prot_magic] /*5*/ = 0;
    value = 1;
    description = "";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = "";
    count[5] = 0;
};

instance bab_armor_bikini(c_item) {
    name = "Äåâèöà â áèêèíè";
    mainflag = item_kat_armor;
    flags = 0;
    wear = wear_torso;
    visual = "vobbox.3ds";
    visual_change = "Bab_ARMOR.asc";
    visual_skin = 1;
    material = mat_leather;
    protection[prot_edge] /*2*/ = 0;
    protection[prot_blunt] /*1*/ = 0;
    protection[prot_point] /*6*/ = 0;
    protection[prot_fire] /*3*/ = 0;
    protection[prot_magic] /*5*/ = 0;
    value = 1;
    description = "";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = "";
    count[5] = 0;
};

instance itarrunelight(c_item) {
    name = name_rune;
    mainflag = item_kat_rune;
    flags = 0;
    visual = "ItAr_Rune_42.3ds";
    material = mat_stone;
    spell = spl_light;
    mag_circle = 1;
    value = 300;
    description = "Ñâåò";
    text = name_mag_circle;
    count = mag_circle;
    text[1] = name_manakosten;
    count[1] = spl_sendcast_light;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarscrolllight(c_item) {
    name = name_spruchrolle;
    mainflag = item_kat_rune;
    flags = item_multi;
    visual = "ItAr_Scroll_32.3DS";
    material = mat_stone;
    cond_atr[2] = atr_mana_max;
    cond_value[2] = spl_sendcast_light;
    spell = spl_light;
    value = 5;
    description = "Ñâåò";
    text = "";
    count = 0;
    text[1] = name_manakosten;
    count[1] = spl_sendcast_light;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarrunefirebolt(c_item) {
    name = name_rune;
    mainflag = item_kat_rune;
    flags = 0;
    visual = "ItAr_Rune_23.3ds";
    material = mat_stone;
    spell = spl_firebolt;
    mag_circle = 1;
    value = 300;
    description = "Îãíåííàÿ ñòðåëà";
    text = name_mag_circle;
    count = mag_circle;
    text[1] = name_manakosten;
    count[1] = spl_sendcast_firebolt;
    text[2] = name_dam_fire;
    count[2] = spl_damage_firebolt;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarscrollfirebolt(c_item) {
    name = name_spruchrolle;
    mainflag = item_kat_rune;
    flags = item_multi;
    visual = "ItAr_Scroll_35.3DS";
    material = mat_stone;
    cond_atr[2] = atr_mana_max;
    cond_value[2] = spl_sendcast_firebolt;
    spell = spl_firebolt;
    value = 30;
    description = "Îãíåííàÿ ñòðåëà";
    text = "";
    count = 0;
    text[1] = name_manakosten;
    count[1] = spl_sendcast_firebolt;
    text[2] = name_dam_fire;
    count[2] = spl_damage_firebolt;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarrunefireball(c_item) {
    name = name_rune;
    mainflag = item_kat_rune;
    flags = 0;
    visual = "ItAr_Rune_26.3ds";
    material = mat_stone;
    spell = spl_fireball;
    mag_circle = 3;
    value = 700;
    description = "Îãíåííûé øàð";
    text = name_mag_circle;
    count = mag_circle;
    text[1] = name_manakostenmax;
    count[1] = spl_sendcast_fireball;
    text[2] = concatstrings(name_dam_fire, name_permana);
    count[2] = spl_damage_fireball;
    text[3] = "";
    count[3] = 0;
    text[4] = name_spell_load;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarscrollfireball(c_item) {
    name = name_spruchrolle;
    mainflag = item_kat_rune;
    flags = item_multi;
    visual = "ItAr_Scroll_27.3DS";
    material = mat_stone;
    cond_atr[2] = atr_mana_max;
    cond_value[2] = spl_sendcast_fireball;
    spell = spl_fireball;
    value = 70;
    description = "Îãíåííûé øàð";
    text = "";
    count = 0;
    text[1] = name_manakostenmax;
    count[1] = spl_sendcast_fireball;
    text[2] = concatstrings(name_dam_fire, name_permana);
    count[2] = spl_damage_fireball;
    text[3] = "";
    count[3] = 0;
    text[4] = name_spell_load;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarrunefirestorm(c_item) {
    name = name_rune;
    mainflag = item_kat_rune;
    flags = 0;
    visual = "ItAr_Rune_24.3ds";
    material = mat_stone;
    spell = spl_firestorm;
    mag_circle = 4;
    value = 1100;
    description = "Îãíåííûé øòîðì";
    text = name_mag_circle;
    count = mag_circle;
    text[1] = name_manakostenmax;
    count[1] = spl_sendcast_firestorm;
    text[2] = concatstrings(name_dam_fire, name_permana);
    count[2] = spl_damage_firestorm;
    text[3] = "";
    count[3] = 0;
    text[4] = name_spell_load;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarscrollfirestorm(c_item) {
    name = name_spruchrolle;
    mainflag = item_kat_rune;
    flags = item_multi;
    visual = "ItAr_Scroll_28.3DS";
    material = mat_stone;
    cond_atr[2] = atr_mana_max;
    cond_value[2] = spl_sendcast_firestorm;
    spell = spl_firestorm;
    value = 110;
    description = "Îãíåííûé øòîðì";
    text = "";
    count = 0;
    text[1] = name_manakostenmax;
    count[1] = spl_sendcast_firestorm;
    text[2] = concatstrings(name_dam_fire, name_permana);
    count[2] = spl_damage_firestorm;
    text[3] = "";
    count[3] = 0;
    text[4] = name_spell_load;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarrunefirerain(c_item) {
    name = name_rune;
    mainflag = item_kat_rune;
    flags = 0;
    visual = "ItAr_Rune_25.3ds";
    material = mat_stone;
    spell = spl_firerain;
    mag_circle = 5;
    value = 1300;
    description = "Îãíåííûé äîæäü";
    text = name_mag_circle;
    count = mag_circle;
    text[1] = name_manakosten;
    count[1] = spl_sendcast_firerain;
    text[2] = name_dam_fire;
    count[2] = spl_damage_firerain;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarscrollfirerain(c_item) {
    name = name_spruchrolle;
    mainflag = item_kat_rune;
    flags = item_multi;
    visual = "ItAr_Scroll_36.3DS";
    material = mat_stone;
    cond_atr[2] = atr_mana_max;
    cond_value[2] = spl_sendcast_firerain;
    spell = spl_firerain;
    value = 130;
    description = "Îãíåííûé äîæäü";
    text = "";
    count = 0;
    text[1] = name_manakosten;
    count[1] = spl_sendcast_firerain;
    text[2] = name_dam_fire;
    count[2] = spl_damage_firerain;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarruneteleport1(c_item) {
    name = name_rune;
    mainflag = item_kat_rune;
    flags = 0;
    visual = "ItAr_Rune_38.3ds";
    material = mat_stone;
    spell = spl_teleport1;
    description = "Ïîðòàë ê ìàãàì îãíÿ";
    text = name_mag_circle;
    count = mag_circle;
    text[1] = name_manakosten;
    count[1] = spl_sendcast_teleport;
};

instance itarscrollteleport1(c_item) {
    name = name_spruchrolle;
    mainflag = item_kat_rune;
    flags = item_multi;
    visual = "ItAr_Scroll_38.3DS";
    material = mat_stone;
    cond_atr[2] = atr_mana_max;
    cond_value[2] = spl_sendcast_teleport;
    spell = spl_teleport1;
    description = "Ïîðòàë ê ìàãàì îãíÿ";
    text = "";
    count = 0;
    text[1] = name_manakosten;
    count[1] = spl_sendcast_teleport;
};

instance itarruneteleport2(c_item) {
    name = name_rune;
    mainflag = item_kat_rune;
    flags = 0;
    visual = "ItAr_Rune_40.3ds";
    material = mat_stone;
    spell = spl_teleport2;
    description = "Ïîðòàë ê ìàãàì âîäû";
    text = name_mag_circle;
    count = mag_circle;
    text[1] = name_manakosten;
    count[1] = spl_sendcast_teleport;
};

instance itarscrollteleport2(c_item) {
    name = name_spruchrolle;
    mainflag = item_kat_rune;
    flags = item_multi;
    visual = "ItAr_Scroll_37.3DS";
    material = mat_stone;
    cond_atr[2] = atr_mana_max;
    cond_value[2] = spl_sendcast_teleport;
    spell = spl_teleport2;
    description = "Ïîðòàë ê ìàãàì âîäû";
    text = "";
    count = 0;
    text[1] = name_manakosten;
    count[1] = spl_sendcast_teleport;
};

instance itarruneteleport3(c_item) {
    name = name_rune;
    mainflag = item_kat_rune;
    flags = 0;
    visual = "ItAr_Rune_41.3ds";
    material = mat_stone;
    spell = spl_teleport3;
    description = "Ïîðòàë ê íåêðîìàíòó";
    text = name_mag_circle;
    count = mag_circle;
    text[1] = name_manakosten;
    count[1] = spl_sendcast_teleport;
};

instance itarscrollteleport3(c_item) {
    name = name_spruchrolle;
    mainflag = item_kat_rune;
    flags = item_multi;
    visual = "ItAr_Scroll_40.3DS";
    material = mat_stone;
    cond_atr[2] = atr_mana_max;
    cond_value[2] = spl_sendcast_teleport;
    spell = spl_teleport3;
    description = "Ïîðòàë ê íåêðîìàíòó";
    text = "";
    count = 0;
    text[1] = name_manakosten;
    count[1] = spl_sendcast_teleport;
};

instance itarscrollteleport4(c_item) {
    name = name_spruchrolle;
    mainflag = item_kat_rune;
    flags = item_multi;
    visual = "ItAr_Scroll_39.3DS";
    material = mat_stone;
    cond_atr[2] = atr_mana_max;
    cond_value[2] = spl_sendcast_teleport;
    spell = spl_teleport4;
    description = "Îðî÷èé ïîðòàë";
    text = "";
    count = 0;
    text[1] = name_manakosten;
    count[1] = spl_sendcast_teleport;
};

instance itarruneteleport5(c_item) {
    name = name_rune;
    mainflag = item_kat_rune;
    flags = 0;
    visual = "ItAr_Rune_39.3ds";
    material = mat_stone;
    spell = spl_teleport5;
    description = "Ïîðòàë â Áîëîòíûé Ëàãåðü";
    text = name_mag_circle;
    count = mag_circle;
    text[1] = name_manakosten;
    count[1] = spl_sendcast_teleport;
};

instance itarscrollteleport5(c_item) {
    name = name_spruchrolle;
    mainflag = item_kat_rune;
    flags = item_multi;
    visual = "ItAr_Scroll_39.3DS";
    material = mat_stone;
    cond_atr[2] = atr_mana_max;
    cond_value[2] = spl_sendcast_teleport;
    spell = spl_teleport5;
    description = "Ïîðòàë â Áîëîòíûé Ëàãåðü";
    text = "";
    count = 0;
    text[1] = name_manakosten;
    count[1] = spl_sendcast_teleport;
};

instance itarruneheal(c_item) {
    name = name_rune;
    mainflag = item_kat_rune;
    flags = 0;
    visual = "ItAr_Rune_27.3ds";
    material = mat_stone;
    spell = spl_heal;
    mag_circle = 2;
    value = 500;
    description = "Èñöåëåíèå";
    text = name_mag_circle;
    count = mag_circle;
    text[1] = name_healingpermana;
    count[1] = spl_healing_hp_per_mp;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_spell_invest;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarscrollheal(c_item) {
    name = name_spruchrolle;
    mainflag = item_kat_rune;
    flags = item_multi;
    visual = "ItAr_Scroll_01.3DS";
    material = mat_stone;
    cond_atr[2] = atr_mana_max;
    cond_value[2] = spl_healing_hp_per_mp;
    spell = spl_heal;
    value = 50;
    description = "Èñöåëåíèå";
    text = "";
    count = 0;
    text[1] = name_healingpermana;
    count[1] = spl_healing_hp_per_mp;
    text[2] = name_mana_needed;
    count[2] = spl_healing_hp_per_mp;
    text[3] = "";
    count[3] = 0;
    text[4] = name_spell_invest;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarscrolltrfbloodfly(c_item) {
    name = name_spruchrolle;
    mainflag = item_kat_rune;
    flags = item_multi;
    visual = "ItAr_Scroll_01.3DS";
    material = mat_stone;
    cond_atr[2] = atr_mana_max;
    cond_value[2] = spl_sendcast_trf_bloodfly;
    spell = spl_trf_bloodfly;
    value = 100;
    description = "Òðàíñôîðìàöèÿ â øåðøíÿ";
    text = "";
    count = 0;
    text[1] = name_manakosten;
    count[1] = spl_sendcast_trf_bloodfly;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarscrolltrfcrawler(c_item) {
    name = name_spruchrolle;
    mainflag = item_kat_rune;
    flags = item_multi;
    visual = "ItAr_Scroll_04.3DS";
    material = mat_stone;
    cond_atr[2] = atr_mana_max;
    cond_value[2] = spl_sendcast_trf_crawler;
    spell = spl_trf_crawler;
    value = 100;
    description = "Òðàíñôîðìàöèÿ â ïîëçóíà";
    text = "";
    count = 0;
    text[1] = name_manakosten;
    count[1] = spl_sendcast_trf_crawler;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarscrolltrflurker(c_item) {
    name = name_spruchrolle;
    mainflag = item_kat_rune;
    flags = item_multi;
    visual = "ItAr_Scroll_02.3DS";
    material = mat_stone;
    cond_atr[2] = atr_mana_max;
    cond_value[2] = spl_sendcast_trf_lurker;
    spell = spl_trf_lurker;
    value = 100;
    description = "Òðàíñôîðìàöèÿ â øíûãó";
    text = "";
    count = 0;
    text[1] = name_manakosten;
    count[1] = spl_sendcast_trf_lurker;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarscrolltrfmeatbug(c_item) {
    name = name_spruchrolle;
    mainflag = item_kat_rune;
    flags = item_multi;
    visual = "ItAr_Scroll_03.3DS";
    material = mat_stone;
    cond_atr[2] = atr_mana_max;
    cond_value[2] = spl_sendcast_trf_meatbug;
    spell = spl_trf_meatbug;
    value = 100;
    description = "Òðàíñôîðìàöèÿ â ìÿñíîãî æóêà";
    text = "";
    count = 0;
    text[1] = name_manakosten;
    count[1] = spl_sendcast_trf_meatbug;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarscrolltrfmolerat(c_item) {
    name = name_spruchrolle;
    mainflag = item_kat_rune;
    flags = item_multi;
    visual = "ItAr_Scroll_05.3DS";
    material = mat_stone;
    cond_atr[2] = atr_mana_max;
    cond_value[2] = spl_sendcast_trf_molerat;
    spell = spl_trf_molerat;
    value = 100;
    description = "Òðàíñôîðìàöèÿ â êðîòîêðûñà";
    text = "";
    count = 0;
    text[1] = name_manakosten;
    count[1] = spl_sendcast_trf_molerat;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarscrolltrforcdog(c_item) {
    name = name_spruchrolle;
    mainflag = item_kat_rune;
    flags = item_multi;
    visual = "ItAr_Scroll_11.3DS";
    material = mat_stone;
    cond_atr[2] = atr_mana_max;
    cond_value[2] = spl_sendcast_trf_orcdog;
    spell = spl_trf_orcdog;
    value = 200;
    description = "Òðàíñôîðìàöèÿ â îðî÷üþ ãîí÷óþ";
    text = "";
    count = 0;
    text[1] = name_manakosten;
    count[1] = spl_sendcast_trf_orcdog;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarscrolltrfscavenger(c_item) {
    name = name_spruchrolle;
    mainflag = item_kat_rune;
    flags = item_multi;
    visual = "ItAr_Scroll_07.3DS";
    material = mat_stone;
    cond_atr[2] = atr_mana_max;
    cond_value[2] = spl_sendcast_trf_scavenger;
    spell = spl_trf_scavenger;
    value = 100;
    description = "Òðàíñôîðìàöèÿ â ïàäàëüùèêà";
    text = "";
    count = 0;
    text[1] = name_manakosten;
    count[1] = spl_sendcast_trf_scavenger;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarscrolltrfshadowbeast(c_item) {
    name = name_spruchrolle;
    mainflag = item_kat_rune;
    flags = item_multi;
    visual = "ItAr_Scroll_06.3DS";
    material = mat_stone;
    cond_atr[2] = atr_mana_max;
    cond_value[2] = spl_sendcast_trf_shadowbeast;
    spell = spl_trf_shadowbeast;
    value = 200;
    description = "Òðàíñôîðìàöèÿ â ìðàêîðèñà";
    text = "";
    count = 0;
    text[1] = name_manakosten;
    count[1] = spl_sendcast_trf_shadowbeast;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarscrolltrfsnapper(c_item) {
    name = name_spruchrolle;
    mainflag = item_kat_rune;
    flags = item_multi;
    visual = "ItAr_Scroll_01.3DS";
    material = mat_stone;
    cond_atr[2] = atr_mana_max;
    cond_value[2] = spl_sendcast_trf_snapper;
    spell = spl_trf_snapper;
    value = 150;
    description = "Òðàíñôîðìàöèÿ â ãëîðõà";
    text = "";
    count = 0;
    text[1] = name_manakosten;
    count[1] = spl_sendcast_trf_snapper;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarscrolltrfwaran(c_item) {
    name = name_spruchrolle;
    mainflag = item_kat_rune;
    flags = item_multi;
    visual = "ItAr_Scroll_10.3DS";
    material = mat_stone;
    cond_atr[2] = atr_mana_max;
    cond_value[2] = spl_sendcast_trf_waran;
    spell = spl_trf_waran;
    value = 100;
    description = "Òðàíñôîðìàöèÿ â ÿùåðèöó";
    text = "";
    count = 0;
    text[1] = name_manakosten;
    count[1] = spl_sendcast_trf_waran;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarscrolltrfwolf(c_item) {
    name = name_spruchrolle;
    mainflag = item_kat_rune;
    flags = item_multi;
    visual = "ItAr_Scroll_09.3DS";
    material = mat_stone;
    cond_atr[2] = atr_mana_max;
    cond_value[2] = spl_sendcast_trf_wolf;
    spell = spl_trf_wolf;
    value = 100;
    description = "Òðàíñôîðìàöèÿ â âîëêà";
    text = "";
    count = 0;
    text[1] = name_manakosten;
    count[1] = spl_sendcast_trf_wolf;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarrunechainlightning(c_item) {
    name = name_rune;
    mainflag = item_kat_rune;
    flags = 0;
    visual = "ItAr_Rune_18.3ds";
    material = mat_stone;
    spell = spl_chainlightning;
    mag_circle = 4;
    value = 700;
    description = "Ìîëíèÿ";
    text = name_mag_circle;
    count = mag_circle;
    text[1] = name_damagepersec;
    count[1] = spl_zapped_damage_per_sec;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_spell_invest;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarscrollchainlightning(c_item) {
    name = name_spruchrolle;
    mainflag = item_kat_rune;
    flags = item_multi;
    visual = "ItAr_Scroll_20.3DS";
    material = mat_stone;
    spell = spl_chainlightning;
    value = 70;
    description = "Ìîëíèÿ";
    text = "";
    count = 0;
    text[1] = name_damagepersec;
    count[1] = spl_zapped_damage_per_sec;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_spell_invest;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarrunethunderbolt(c_item) {
    name = name_rune;
    mainflag = item_kat_rune;
    flags = 0;
    visual = "ItAr_Rune_19.3ds";
    material = mat_stone;
    spell = spl_thunderbolt;
    mag_circle = 1;
    value = 500;
    description = "Ëåäÿíàÿ ñòðåëà";
    text = name_mag_circle;
    count = mag_circle;
    text[1] = name_manakosten;
    count[1] = spl_sendcast_thunderbolt;
    text[2] = name_dam_magic;
    count[2] = spl_damage_thunderbolt;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarscrollthunderbolt(c_item) {
    name = name_spruchrolle;
    mainflag = item_kat_rune;
    flags = item_multi;
    visual = "ItAr_Scroll_41.3DS";
    material = mat_stone;
    cond_atr[2] = atr_mana_max;
    cond_value[2] = spl_sendcast_thunderbolt;
    spell = spl_thunderbolt;
    value = 50;
    description = "Ëåäÿíàÿ ñòðåëà";
    text = "";
    count = 0;
    text[1] = name_manakosten;
    count[1] = spl_sendcast_thunderbolt;
    text[2] = name_dam_magic;
    count[2] = spl_damage_thunderbolt;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarrunethunderball(c_item) {
    name = name_rune;
    mainflag = item_kat_rune;
    flags = 0;
    visual = "ItAr_Rune_20.3ds";
    material = mat_stone;
    spell = spl_thunderball;
    mag_circle = 3;
    value = 900;
    description = "Øàðîâàÿ ìîëíèÿ";
    text = name_mag_circle;
    count = mag_circle;
    text[1] = name_manakostenmax;
    count[1] = spl_sendcast_thunderball;
    text[2] = concatstrings(name_dam_magic, name_permana);
    count[2] = spl_damage_thunderball;
    text[3] = "";
    count[3] = 0;
    text[4] = name_spell_load;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarscrollthunderball(c_item) {
    name = name_spruchrolle;
    mainflag = item_kat_rune;
    flags = item_multi;
    visual = "ItAr_Scroll_01.3DS";
    material = mat_stone;
    cond_atr[2] = atr_mana_max;
    cond_value[2] = spl_sendcast_thunderball;
    spell = spl_thunderball;
    value = 90;
    description = "Øàðîâàÿ ìîëíèÿ";
    text = "";
    count = 0;
    text[1] = name_manakostenmax;
    count[1] = spl_sendcast_thunderball;
    text[2] = concatstrings(name_dam_magic, name_permana);
    count[2] = spl_damage_thunderball;
    text[3] = "";
    count[3] = 0;
    text[4] = name_spell_load;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarruneicecube(c_item) {
    name = name_rune;
    mainflag = item_kat_rune;
    flags = 0;
    visual = "ItAr_Rune_21.3ds";
    material = mat_stone;
    spell = spl_icecube;
    mag_circle = 3;
    value = 700;
    description = "Ëåäÿíàÿ ãëûáà";
    text = name_mag_circle;
    count = mag_circle;
    text[1] = name_manakosten;
    count[1] = spl_sendcast_icecube;
    text[2] = name_damage;
    count[2] = spl_freeze_damage;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarscrollicecube(c_item) {
    name = name_spruchrolle;
    mainflag = item_kat_rune;
    flags = item_multi;
    visual = "ItAr_Scroll_25.3DS";
    material = mat_stone;
    cond_atr[2] = atr_mana_max;
    cond_value[2] = spl_sendcast_icecube;
    spell = spl_icecube;
    value = 70;
    description = "Ëåäÿíàÿ ãëûáà";
    text = "";
    count = 0;
    text[1] = name_manakosten;
    count[1] = spl_sendcast_icecube;
    text[2] = name_damage;
    count[2] = spl_freeze_damage;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarruneicewave(c_item) {
    name = name_rune;
    mainflag = item_kat_rune;
    flags = 0;
    visual = "ItAr_Rune_22.3ds";
    material = mat_stone;
    spell = spl_icewave;
    mag_circle = 5;
    value = 1100;
    description = "Ëåäÿíàÿ âîëíà";
    text = name_mag_circle;
    count = mag_circle;
    text[1] = name_manakosten;
    count[1] = spl_sendcast_icewave;
    text[2] = name_damage;
    count[2] = spl_freeze_damage;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarscrollicewave(c_item) {
    name = name_spruchrolle;
    mainflag = item_kat_rune;
    flags = item_multi;
    visual = "ItAr_Scroll_30.3DS";
    material = mat_stone;
    cond_atr[2] = atr_mana_max;
    cond_value[2] = spl_sendcast_icewave;
    spell = spl_icewave;
    value = 110;
    description = "Ëåäÿíàÿ âîëíà";
    text = "";
    count = 0;
    text[1] = name_manakosten;
    count[1] = spl_sendcast_icewave;
    text[2] = name_damage;
    count[2] = spl_freeze_damage;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarscrollsummondemon(c_item) {
    name = name_spruchrolle;
    mainflag = item_kat_rune;
    flags = item_multi;
    visual = "ItAr_Scroll_18.3DS";
    material = mat_stone;
    cond_atr[2] = atr_mana_max;
    cond_value[2] = spl_sendcast_summondemon;
    spell = spl_summondemon;
    value = 550;
    description = "Ñîçäàòü äåìîíà";
    text = "";
    count = 0;
    text[1] = name_manakosten;
    count[1] = spl_sendcast_summondemon;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarscrollsummonskeletons(c_item) {
    name = name_spruchrolle;
    mainflag = item_kat_rune;
    flags = item_multi;
    visual = "ItAr_Scroll_23.3DS";
    material = mat_stone;
    cond_atr[2] = atr_mana_max;
    cond_value[2] = spl_sendcast_summonskeleton;
    spell = spl_summonskeleton;
    value = 350;
    description = "Ñîçäàòü ñêåëåòû";
    text = "";
    count = 0;
    text[1] = name_manakosten;
    count[1] = spl_sendcast_summonskeleton;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarscrollsummongolem(c_item) {
    name = name_spruchrolle;
    mainflag = item_kat_rune;
    flags = item_multi;
    visual = "ItAr_Scroll_23.3DS";
    material = mat_stone;
    cond_atr[2] = atr_mana_max;
    cond_value[2] = spl_sendcast_summongolem;
    spell = spl_summongolem;
    value = 450;
    description = "Ñîçäàòü ãîëåìà";
    text = "";
    count = 0;
    text[1] = name_manakosten;
    count[1] = spl_sendcast_summongolem;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarscrollarmyofdarkness(c_item) {
    name = name_spruchrolle;
    mainflag = item_kat_rune;
    flags = item_multi;
    visual = "ItAr_Scroll_29.3DS";
    material = mat_stone;
    cond_atr[2] = atr_mana_max;
    cond_value[2] = spl_sendcast_armyofdarkness;
    spell = spl_armyofdarkness;
    value = 666;
    description = "Àðìèÿ òüìû";
    text = "";
    count = 0;
    text[1] = name_manakosten;
    count[1] = spl_sendcast_armyofdarkness;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarrunedestroyundead(c_item) {
    name = name_rune;
    mainflag = item_kat_rune;
    flags = 0;
    visual = "ItAr_Rune_15.3ds";
    material = mat_stone;
    spell = spl_destroyundead;
    mag_circle = 4;
    value = 1100;
    description = "Ñìåðòü íåæèòè";
    text = name_mag_circle;
    count = mag_circle;
    text[1] = name_manakosten;
    count[1] = spl_sendcast_destroyundead;
    text[2] = name_dam_magic;
    count[2] = spl_damage_destroyundead;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarscrolldestroyundead(c_item) {
    name = name_spruchrolle;
    mainflag = item_kat_rune;
    flags = item_multi;
    visual = "ItAr_Scroll_26.3DS";
    material = mat_stone;
    cond_atr[2] = atr_mana_max;
    cond_value[2] = spl_sendcast_destroyundead;
    spell = spl_destroyundead;
    value = 110;
    description = "Ñìåðòü íåæèòè";
    text = name_mag_circle;
    count = mag_circle;
    text[1] = name_manakosten;
    count[1] = spl_sendcast_destroyundead;
    text[2] = name_dam_magic;
    count[2] = spl_damage_destroyundead;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarrunewindfist(c_item) {
    name = name_rune;
    mainflag = item_kat_rune;
    flags = 0;
    visual = "ItAr_Rune_06.3ds";
    material = mat_stone;
    spell = spl_windfist;
    mag_circle = 2;
    value = 500;
    description = "Êóëàê âåòðà";
    text = name_mag_circle;
    count = mag_circle;
    text[1] = name_manakostenmax;
    count[1] = spl_sendcast_windfist;
    text[2] = concatstrings(name_dam_fly, name_permana);
    count[2] = spl_damage_windfist;
    text[3] = "";
    count[3] = 0;
    text[4] = name_spell_load;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarscrollwindfist(c_item) {
    name = name_spruchrolle;
    mainflag = item_kat_rune;
    flags = item_multi;
    visual = "ItAr_Scroll_12.3DS";
    material = mat_stone;
    cond_atr[2] = atr_mana_max;
    cond_value[2] = spl_sendcast_windfist;
    spell = spl_windfist;
    value = 50;
    description = "Êóëàê âåòðà";
    text = "";
    count = 0;
    text[1] = name_manakostenmax;
    count[1] = spl_sendcast_windfist;
    text[2] = concatstrings(name_dam_fly, name_permana);
    count[2] = spl_damage_windfist;
    text[3] = "";
    count[3] = 0;
    text[4] = name_spell_load;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarrunestormfist(c_item) {
    name = name_rune;
    mainflag = item_kat_rune;
    flags = 0;
    visual = "ItAr_Rune_07.3ds";
    material = mat_stone;
    spell = spl_stormfist;
    mag_circle = 4;
    value = 900;
    description = "Êóëàê øòîðìà";
    text = name_mag_circle;
    count = mag_circle;
    text[1] = name_manakostenmax;
    count[1] = spl_sendcast_stormfist;
    text[2] = concatstrings(name_dam_fly, name_permana);
    count[2] = spl_damage_stormfist;
    text[3] = "";
    count[3] = 0;
    text[4] = name_spell_load;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarscrollstormfist(c_item) {
    name = name_spruchrolle;
    mainflag = item_kat_rune;
    flags = item_multi;
    visual = "ItAr_Scroll_17.3DS";
    material = mat_stone;
    cond_atr[2] = atr_mana_max;
    cond_value[2] = spl_sendcast_stormfist;
    spell = spl_stormfist;
    value = 90;
    description = "Êóëàê øòîðìà";
    text = "";
    count = 0;
    text[1] = name_manakostenmax;
    count[1] = spl_sendcast_stormfist;
    text[2] = concatstrings(name_dam_fly, name_permana);
    count[2] = spl_damage_stormfist;
    text[3] = "";
    count[3] = 0;
    text[4] = name_spell_load;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarrunetelekinesis(c_item) {
    name = name_rune;
    mainflag = item_kat_rune;
    flags = 0;
    visual = "ItAr_Rune_05.3ds";
    material = mat_stone;
    spell = spl_telekinesis;
    mag_circle = 3;
    value = 700;
    description = "Òåëåêèíåç";
    text = name_mag_circle;
    count = mag_circle;
    text[1] = name_manapersec;
    count[1] = 1;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_spell_invest;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarscrolltelekinesis(c_item) {
    name = name_spruchrolle;
    mainflag = item_kat_rune;
    flags = item_multi;
    visual = "ItAr_Scroll_13.3DS";
    material = mat_stone;
    cond_atr[2] = atr_mana_max;
    cond_value[2] = 10;
    spell = spl_telekinesis;
    value = 70;
    description = "Òåëåêèíåç";
    text = "";
    count = 0;
    text[1] = name_manapersec;
    count[1] = 1;
    text[2] = name_mana_needed;
    count[2] = cond_value[2];
    text[3] = "";
    count[3] = 0;
    text[4] = name_spell_invest;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarrunecharm(c_item) {
    name = name_rune;
    mainflag = item_kat_rune;
    flags = 0;
    visual = "ItAr_Rune_10.3ds";
    material = mat_stone;
    spell = spl_charm;
    mag_circle = 3;
    value = 700;
    description = "×àðû";
    text = name_mag_circle;
    count = mag_circle;
    text[1] = name_manakosten;
    count[1] = spl_sendcast_charm;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarscrollcharm(c_item) {
    name = name_spruchrolle;
    mainflag = item_kat_rune;
    flags = item_multi;
    visual = "ItAr_Scroll_19.3DS";
    material = mat_stone;
    cond_atr[2] = atr_mana_max;
    cond_value[2] = spl_sendcast_charm;
    spell = spl_charm;
    value = 70;
    description = "×àðû";
    text = "";
    count = 0;
    text[1] = name_manakosten;
    count[1] = spl_sendcast_charm;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarrunesleep(c_item) {
    name = name_rune;
    mainflag = item_kat_rune;
    flags = 0;
    visual = "ItAr_Rune_09.3ds";
    material = mat_stone;
    spell = spl_sleep;
    mag_circle = 2;
    value = 500;
    description = "Ñîí";
    text = name_mag_circle;
    count = mag_circle;
    text[1] = name_manakosten;
    count[1] = spl_sendcast_sleep;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarscrollsleep(c_item) {
    name = name_spruchrolle;
    mainflag = item_kat_rune;
    flags = item_multi;
    visual = "ItAr_Scroll_16.3DS";
    material = mat_stone;
    cond_atr[2] = atr_mana_max;
    cond_value[2] = spl_sendcast_sleep;
    spell = spl_sleep;
    value = 50;
    description = "Ñîí";
    text = "";
    count = 0;
    text[1] = name_manakosten;
    count[1] = spl_sendcast_sleep;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarrunepyrokinesis(c_item) {
    name = name_rune;
    mainflag = item_kat_rune;
    flags = 0;
    visual = "ItAr_Rune_04.3ds";
    material = mat_stone;
    spell = spl_pyrokinesis;
    mag_circle = 3;
    value = 700;
    description = "Ïèðîêèíåç";
    text = name_mag_circle;
    count = mag_circle;
    text[1] = name_damagepersec;
    count[1] = spl_pyro_damage_per_sec;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_spell_invest;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarscrollpyrokinesis(c_item) {
    name = name_spruchrolle;
    mainflag = item_kat_rune;
    flags = item_multi;
    visual = "ItAr_Scroll_33.3DS";
    material = mat_stone;
    cond_atr[2] = atr_mana_max;
    cond_value[2] = 10;
    spell = spl_pyrokinesis;
    value = 70;
    description = "Ïèðîêèíåç";
    text = "";
    count = 0;
    text[1] = name_damagepersec;
    count[1] = spl_pyro_damage_per_sec;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_spell_invest;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarrunecontrol(c_item) {
    name = name_rune;
    mainflag = item_kat_rune;
    flags = 0;
    visual = "ItAr_Rune_02.3ds";
    material = mat_stone;
    spell = spl_control;
    mag_circle = 4;
    value = 900;
    description = "Êîíòðîëü";
    text = name_mag_circle;
    count = mag_circle;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarscrollcontrol(c_item) {
    name = name_spruchrolle;
    mainflag = item_kat_rune;
    flags = item_multi;
    visual = "ItAr_Scroll_08.3DS";
    material = mat_stone;
    cond_atr[2] = atr_mana_max;
    cond_value[2] = 30;
    spell = spl_control;
    value = 90;
    description = "Êîíòðîëü";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarscrollfear(c_item) {
    name = name_spruchrolle;
    mainflag = item_kat_rune;
    flags = item_multi;
    visual = "ItAr_Scroll_34.3DS";
    material = mat_stone;
    cond_atr[2] = atr_mana_max;
    cond_value[2] = spl_sendcast_fear;
    spell = spl_fear;
    value = 250;
    description = "Ñòðàõ";
    text = "";
    count = 0;
    text[1] = name_manakosten;
    count[1] = spl_sendcast_fear;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarscrollberzerk(c_item) {
    name = name_spruchrolle;
    mainflag = item_kat_rune;
    flags = item_multi;
    visual = "ItAr_Scroll_22.3DS";
    material = mat_stone;
    cond_atr[2] = atr_mana_max;
    cond_value[2] = spl_sendcast_berzerk;
    spell = spl_berzerk;
    value = 200;
    description = "ßðîñòü";
    text = "";
    count = 0;
    text[1] = name_manakosten;
    count[1] = spl_sendcast_berzerk;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarrunebreathofdeath(c_item) {
    name = name_rune;
    mainflag = item_kat_rune;
    flags = 0;
    visual = "ItAr_Rune_21.3ds";
    material = mat_stone;
    spell = spl_breathofdeath;
    mag_circle = 6;
    value = 1500;
    description = "Äûõàíèå ñìåðòè";
    text = name_mag_circle;
    count = mag_circle;
    text[1] = name_manakosten;
    count[1] = spl_sendcast_breathofdeath;
    text[2] = name_dam_magic;
    count[2] = spl_damage_breathofdeath;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itarscrollshrink(c_item) {
    name = name_spruchrolle;
    mainflag = item_kat_rune;
    flags = item_multi;
    visual = "ItAr_Scroll_15.3DS";
    material = mat_stone;
    cond_atr[2] = atr_mana_max;
    cond_value[2] = spl_sendcast_shrink;
    spell = spl_shrink;
    value = 1000;
    description = "Óíè÷èæåíèå";
    text = "";
    count = 0;
    text[1] = name_manakosten;
    count[1] = spl_sendcast_shrink;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

const int value_bugmeat = 2;

const int hp_bugmeat = 4;

const int value_apfel = 4;

const int hp_apfel = 8;

const int value_weintrauben = 6;

const int hp_weintrauben = 8;

const int value_wasser = 3;

const int hp_wasser = 5;

const int value_bier = 10;

const int hp_bier = 3;

const int value_wein = 13;

const int hp_wein = 3;

const int value_reisschnaps = 15;

const int hp_reisschnaps = 3;

const int value_reis = 5;

const int hp_reis = 10;

const int value_wurzelsuppe = 3;

const int hp_wurzelsuppe = 7;

const int value_ragout = 4;

const int hp_ragout = 9;

const int value_crawlersuppe = 10;

const int hp_crawlersuppe = 15;

const int value_fleischroh = 5;

const int hp_fleischroh = 10;

const int value_brot = 8;

const int hp_brot = 12;

const int value_kaese = 10;

const int hp_kaese = 15;

const int value_fleisch = 8;

const int hp_fleisch = 15;

const int value_schinken = 12;

const int hp_schinken = 18;

const int value_waldbeeren = 5;

const int hp_waldbeeren = 10;

const int value_flammendorn = 6;

const int hp_flammendorn = 12;

const int value_seraphis = 7;

const int hp_seraphis = 14;

const int value_velayis = 8;

const int hp_velayis = 16;

const int value_bergmoos = 9;

const int hp_bergmoos = 18;

const int value_grabmoos = 10;

const int hp_grabmoos = 20;

const int value_nachtschatten = 11;

const int hp_nachtschatten = 22;

const int value_mondschatten = 12;

const int hp_mondschatten = 24;

const int value_orkblatt = 13;

const int hp_orkblatt = 26;

const int value_eichenblatt = 14;

const int hp_eichenblatt = 28;

const int value_hoellenpilz = 3;

const int hp_hoellenpilz = 6;

const int value_sklavenbrot = 9;

const int hp_sklavenbrot = 15;

const int value_heilkraeuter1 = 14;

const int hp_heilkraeuter1 = 30;

const int value_heilkraeuter2 = 19;

const int hp_heilkraeuter2 = 39;

const int value_heilkraeuter3 = 24;

const int hp_heilkraeuter3 = 49;

const int value_trollkirsche = 15;

const int hp_trollkirsche = -20;

const int value_blutbuche = 3;

const int mana_blutbuche = 5;

const int value_turmeiche = 8;

const int mana_turmeiche = 10;

const int value_rabenkraut = 12;

const int mana_rabenkraut = 15;

const int value_dunkelkraut = 17;

const int mana_dunkelkraut = 20;

const int value_steimwurzel = 20;

const int mana_steinwurzel = 25;

const int value_drachenwurzel = 23;

const int mana_drachenwurzel = 30;

instance itat_meatbug_01(c_item) {
    name = "Ìÿñî æóêà";
    mainflag = item_kat_food;
    flags = item_multi;
    visual = "ItAt_Meatbug_01.3DS";
    material = mat_leather;
    scemename = "FOOD";
    on_state = usebugmeat;
    value = value_bugmeat;
    description = name;
    text = "";
    count = 0;
    text[1] = name_bonus_hp;
    count[1] = hp_bugmeat;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_bugmeat;
};

func void usebugmeat() {
    npc_changeattribute(self, atr_hitpoints, hp_bugmeat);
};

instance itfoapple(c_item) {
    name = "ßáëîêî";
    mainflag = item_kat_food;
    flags = item_multi;
    visual = "ItFo_Apple_01.3ds";
    material = mat_leather;
    scemename = "FOOD";
    on_state = useapple;
    value = value_apfel;
    description = name;
    text = "";
    count = 0;
    text[1] = name_bonus_hp;
    count[1] = hp_apfel;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_apfel;
};

func void useapple() {
    npc_changeattribute(self, atr_hitpoints, hp_apfel);
};

instance itfo_wineberrys_01(c_item) {
    name = "Âèíîãðàä";
    mainflag = item_kat_food;
    flags = item_multi;
    visual = "ItFo_wineberrys_01.3ds";
    scemename = "FOOD";
    on_state = usewineberrys;
    value = value_weintrauben;
    description = name;
    text = "";
    count = 0;
    text[1] = name_bonus_hp;
    count[1] = hp_weintrauben;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_weintrauben;
};

func void usewineberrys() {
    npc_changeattribute(self, atr_hitpoints, hp_weintrauben);
};

instance itfoloaf(c_item) {
    name = "Õëåá";
    mainflag = item_kat_food;
    flags = item_multi;
    visual = "ItFo_Loaf_01.3ds";
    scemename = "FOODHUGE";
    on_state = useloaf;
    value = value_brot;
    description = name;
    text = "";
    count = 0;
    text[1] = name_bonus_hp;
    count[1] = hp_brot;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_brot;
};

func void useloaf() {
    npc_changeattribute(self, atr_hitpoints, hp_brot);
};

instance itfomutton(c_item) {
    name = "Æàðåíîå ìÿñî";
    mainflag = item_kat_food;
    flags = item_multi;
    visual = "ItFo_CookedMutton_01.3ds";
    scemename = "MEAT";
    on_state = usemutton;
    value = value_fleisch;
    description = name;
    text = "";
    count = 0;
    text[1] = name_bonus_hp;
    count[1] = hp_fleisch;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_fleisch;
};

func void usemutton() {
    npc_changeattribute(self, atr_hitpoints, hp_fleisch);
};

instance itfomuttonraw(c_item) {
    name = "Ñûðîå ìÿñî";
    mainflag = item_kat_food;
    flags = item_multi;
    visual = "ItFo_RawMutton_01.3ds";
    scemename = "MEAT";
    on_state = usemuttonraw;
    value = value_fleischroh;
    description = name;
    text = "";
    count = 0;
    text[1] = name_bonus_hp;
    count[1] = hp_fleischroh;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_fleischroh;
};

func void usemuttonraw() {
    npc_changeattribute(self, atr_hitpoints, hp_fleischroh);
};

instance itfo_mutton_01(c_item) {
    name = "Îêîðîê";
    mainflag = item_kat_food;
    flags = item_multi;
    visual = "ItFo_mutton_01.3ds";
    scemename = "FOODHUGE";
    on_state = usemutton1;
    value = value_schinken;
    description = name;
    text = "";
    count = 0;
    text[1] = name_bonus_hp;
    count[1] = hp_schinken;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_schinken;
};

func void usemutton1() {
    npc_changeattribute(self, atr_hitpoints, hp_schinken);
};

instance itfocheese(c_item) {
    name = "Ñûð";
    mainflag = item_kat_food;
    flags = item_multi;
    visual = "ItFo_Cheese_01.3ds";
    scemename = "FOODHUGE";
    on_state = usecheese;
    value = value_kaese;
    description = name;
    text = "";
    count = 0;
    text[1] = name_bonus_hp;
    count[1] = hp_kaese;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_kaese;
};

func void usecheese() {
    npc_changeattribute(self, atr_hitpoints, hp_kaese);
};

instance itforice(c_item) {
    name = "Ðèñ";
    mainflag = item_kat_food;
    flags = item_multi;
    visual = "ItFo_Rice_01.3ds";
    scemename = "RICE";
    on_state = userice;
    value = value_reis;
    description = name;
    text = "";
    count = 0;
    text[1] = name_bonus_hp;
    count[1] = hp_reis;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_reis;
};

func void userice() {
    npc_changeattribute(self, atr_hitpoints, hp_reis);
};

instance itfosoup(c_item) {
    name = "Ñóï èç êîðíåé";
    mainflag = item_kat_food;
    flags = item_multi;
    visual = "ItFo_Soup_01.3ds";
    scemename = "RICE";
    on_state = usesoup;
    value = value_wurzelsuppe;
    description = name;
    text = "";
    count = 0;
    text[1] = name_bonus_hp;
    count[1] = hp_wurzelsuppe;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_wurzelsuppe;
};

func void usesoup() {
    npc_changeattribute(self, atr_hitpoints, hp_wurzelsuppe);
};

instance itfomeatbugragout(c_item) {
    name = "Ðàãó èç ìÿñà æóêîâ";
    mainflag = item_kat_food;
    flags = item_multi;
    visual = "ItFo_Meatbugragout_01.3ds";
    material = mat_leather;
    scemename = "RICE";
    on_state = usemeatbugragout;
    value = value_ragout;
    description = name;
    text = "";
    count = 0;
    text[1] = name_bonus_hp;
    count[1] = hp_ragout;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_ragout;
};

func void usemeatbugragout() {
    npc_changeattribute(self, atr_hitpoints, hp_ragout);
};

instance itfocrawlersoup(c_item) {
    name = "Ñóï èç ïîëçóíà";
    mainflag = item_kat_food;
    flags = item_multi;
    visual = "ItFo_Crawlersoup_01.3ds";
    material = mat_leather;
    scemename = "RICE";
    on_state = usecrawlersoup;
    value = value_crawlersuppe;
    description = name;
    text = "";
    count = 0;
    text[1] = name_bonus_hp;
    count[1] = hp_crawlersuppe;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_crawlersuppe;
};

func void usecrawlersoup() {
    npc_changeattribute(self, atr_hitpoints, hp_crawlersuppe);
};

instance itfo_potion_water_01(c_item) {
    name = "Âîäà";
    mainflag = item_kat_food;
    flags = item_multi;
    visual = "ItFo_Potion_Water_01.3ds";
    material = mat_glas;
    scemename = "POTION";
    on_state = usewaterpotion;
    value = value_wasser;
    description = name;
    text = "";
    count = 0;
    text[1] = name_bonus_hp;
    count[1] = hp_wasser;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_wasser;
};

func void usewaterpotion() {
    npc_changeattribute(self, atr_hitpoints, hp_wasser);
};

instance itfobeer(c_item) {
    name = "Ïèâî";
    mainflag = item_kat_food;
    flags = item_multi;
    visual = "ItFo_Beer_01.3ds";
    material = mat_glas;
    scemename = "POTION";
    on_state = usebeer;
    value = value_bier;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_bier;
};

func void usebeer() {
    npc_changeattribute(self, atr_hitpoints, hp_bier);
};

instance itfowine(c_item) {
    name = "Âèíî";
    mainflag = item_kat_food;
    flags = item_multi;
    visual = "ItFo_Wine_01.3ds";
    material = mat_leather;
    scemename = "POTION";
    on_state = usewine;
    value = value_wein;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_wein;
};

func void usewine() {
    npc_changeattribute(self, atr_hitpoints, hp_wein);
};

instance itfobooze(c_item) {
    name = "Ðèñîâûé øíàïñ";
    mainflag = item_kat_food;
    flags = item_multi;
    visual = "ItFo_Booze_01.3ds";
    material = mat_glas;
    scemename = "POTION";
    on_state = usebooze;
    value = value_reisschnaps;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_reisschnaps;
};

func void usebooze() {
    npc_changeattribute(self, atr_hitpoints, hp_reisschnaps);
};

instance itfo_plants_berrys_01(c_item) {
    name = "Ãîëóáèêà";
    mainflag = item_kat_food;
    flags = item_multi;
    visual = "ItFo_Plants_Berrys_01.3ds";
    material = mat_wood;
    scemename = "FOOD";
    on_state = useberrys;
    value = value_waldbeeren;
    description = name;
    text = "";
    count = 0;
    text[1] = name_bonus_hp;
    count[1] = hp_waldbeeren;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_waldbeeren;
};

func void useberrys() {
    npc_changeattribute(self, atr_hitpoints, hp_waldbeeren);
    printdebugnpc(pd_item_mobsi, "Ich esse Beeren");
};

instance itfo_plants_flameberry_01(c_item) {
    name = "Îãíåâàÿ êîëþ÷êà";
    mainflag = item_kat_food;
    flags = item_multi;
    visual = "ItFo_Plants_Flameberry_01.3ds";
    material = mat_wood;
    scemename = "FOOD";
    on_state = useflame;
    value = value_flammendorn;
    description = name;
    text = "";
    count = 0;
    text[1] = name_bonus_hp;
    count[1] = hp_flammendorn;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_flammendorn;
};

func void useflame() {
    npc_changeattribute(self, atr_hitpoints, hp_flammendorn);
    printdebugnpc(pd_item_mobsi, "Ich esse Flammendorn");
};

instance itfo_plants_seraphis_01(c_item) {
    name = "Ñåðàôèñ";
    mainflag = item_kat_food;
    flags = item_multi;
    visual = "ItFo_Plants_Seraphis_01.3ds";
    material = mat_wood;
    scemename = "FOOD";
    on_state = useseraphis;
    value = value_seraphis;
    description = name;
    text = "";
    count = 0;
    text[1] = name_bonus_hp;
    count[1] = hp_seraphis;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_seraphis;
};

func void useseraphis() {
    npc_changeattribute(self, atr_hitpoints, hp_seraphis);
    printdebugnpc(pd_item_mobsi, "Ich esse Seraphis");
};

instance itfo_plants_velayis_01(c_item) {
    name = "Âåëëàéèñ";
    mainflag = item_kat_food;
    flags = item_multi;
    visual = "ItFo_Plants_Seraphis_01.3ds";
    material = mat_wood;
    scemename = "FOOD";
    on_state = usevelayis;
    value = value_velayis;
    description = name;
    text = "";
    count = 0;
    text[1] = name_bonus_hp;
    count[1] = hp_velayis;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_velayis;
};

func void usevelayis() {
    npc_changeattribute(self, atr_hitpoints, hp_velayis);
    printdebugnpc(pd_item_mobsi, "Ich esse Velayis");
};

instance itfo_plants_mountainmoos_01(c_item) {
    name = "Ãîðíûé ìîõ";
    mainflag = item_kat_food;
    flags = item_multi;
    visual = "ItFo_Plants_mountainmoos_01.3ds";
    material = mat_wood;
    scemename = "FOOD";
    on_state = usemoos;
    value = value_bergmoos;
    description = name;
    text = "";
    count = 0;
    text[1] = name_bonus_hp;
    count[1] = hp_bergmoos;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_bergmoos;
};

func void usemoos() {
    npc_changeattribute(self, atr_hitpoints, hp_bergmoos);
    printdebugnpc(pd_item_mobsi, "Ich esse Moos");
};

instance itfo_plants_mountainmoos_02(c_item) {
    name = "Ìîãèëüíûõ ìîõ";
    mainflag = item_kat_food;
    flags = item_multi;
    visual = "ItFo_Plants_mountainmoos_01.3ds";
    material = mat_wood;
    scemename = "FOOD";
    on_state = usemoos2;
    value = value_grabmoos;
    description = name;
    text = "";
    count = 0;
    text[1] = name_bonus_hp;
    count[1] = hp_grabmoos;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_grabmoos;
};

func void usemoos2() {
    npc_changeattribute(self, atr_hitpoints, hp_grabmoos);
    printdebugnpc(pd_item_mobsi, "Ich esse GrabMoos");
};

instance itfo_plants_nightshadow_01(c_item) {
    name = "Ñîëíå÷íèê";
    mainflag = item_kat_food;
    flags = item_multi;
    visual = "ItFo_Plants_Nightshadow_01.3ds";
    material = mat_wood;
    scemename = "FOOD";
    on_state = usenight;
    value = value_nachtschatten;
    description = name;
    text = "";
    count = 0;
    text[1] = name_bonus_hp;
    count[1] = hp_nachtschatten;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_nachtschatten;
};

func void usenight() {
    npc_changeattribute(self, atr_hitpoints, hp_nachtschatten);
    printdebugnpc(pd_item_mobsi, "Ich esse Nachtschatten");
};

instance itfo_plants_nightshadow_02(c_item) {
    name = "Ëóííèê";
    mainflag = item_kat_food;
    flags = item_multi;
    visual = "ItFo_Plants_Nightshadow_01.3ds";
    material = mat_wood;
    scemename = "FOOD";
    on_state = usemoon;
    value = value_mondschatten;
    description = name;
    text = "";
    count = 0;
    text[1] = name_bonus_hp;
    count[1] = hp_mondschatten;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_mondschatten;
};

func void usemoon() {
    npc_changeattribute(self, atr_hitpoints, hp_mondschatten);
    printdebugnpc(pd_item_mobsi, "Ich esse Mondschatten");
};

instance itfo_plants_orcherb_01(c_item) {
    name = "Îðî÷èé ëèñò";
    mainflag = item_kat_food;
    flags = item_multi;
    visual = "ItFo_Plants_OrcHerb_01.3ds";
    material = mat_wood;
    scemename = "FOOD";
    on_state = useorc;
    value = value_orkblatt;
    description = name;
    text = "";
    count = 0;
    text[1] = name_bonus_hp;
    count[1] = hp_orkblatt;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_orkblatt;
};

func void useorc() {
    npc_changeattribute(self, atr_hitpoints, hp_orkblatt);
    printdebugnpc(pd_item_mobsi, "Ich esse orkblatt");
};

instance itfo_plants_orcherb_02(c_item) {
    name = "Äóáîâûé ëèñò";
    mainflag = item_kat_food;
    flags = item_multi;
    visual = "ItFo_Plants_OrcHerb_01.3ds";
    material = mat_wood;
    scemename = "FOOD";
    on_state = useorc2;
    value = value_eichenblatt;
    description = name;
    text = "";
    count = 0;
    text[1] = name_bonus_hp;
    count[1] = hp_eichenblatt;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_eichenblatt;
};

func void useorc2() {
    npc_changeattribute(self, atr_hitpoints, hp_eichenblatt);
    printdebugnpc(pd_item_mobsi, "Ich esse Eichenblatt");
};

instance itfo_plants_mushroom_01(c_item) {
    name = "Àäñêèé ãðèá";
    mainflag = item_kat_food;
    flags = item_multi;
    visual = "ItFo_Plants_mushroom_01.3ds";
    material = mat_wood;
    scemename = "FOOD";
    on_state = usemush;
    value = value_hoellenpilz;
    description = name;
    text = "";
    count = 0;
    text[1] = name_bonus_hp;
    count[1] = hp_hoellenpilz;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_hoellenpilz;
};

func void usemush() {
    npc_changeattribute(self, atr_hitpoints, hp_hoellenpilz);
    printdebugnpc(pd_item_mobsi, "Ich esse H*llenpilz");
};

instance itfo_plants_mushroom_02(c_item) {
    name = "Ðàáñêèé õëåá";
    mainflag = item_kat_food;
    flags = item_multi;
    visual = "ItFo_Plants_mushroom_01.3ds";
    material = mat_wood;
    scemename = "FOOD";
    on_state = usemush2;
    value = value_sklavenbrot;
    description = name;
    text = "";
    count = 0;
    text[1] = name_bonus_hp;
    count[1] = hp_sklavenbrot;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_sklavenbrot;
};

func void usemush2() {
    npc_changeattribute(self, atr_hitpoints, hp_sklavenbrot);
    printdebugnpc(pd_item_mobsi, "Ich esse Sklavenbrot");
};

instance itfo_plants_herb_01(c_item) {
    name = "Öåëèòåëüíûå òðàâû";
    mainflag = item_kat_food;
    flags = item_multi;
    visual = "ItFo_Plants_Herb_01.3ds";
    material = mat_wood;
    scemename = "FOOD";
    on_state = useplants1;
    value = value_heilkraeuter1;
    description = name;
    text = "";
    count = 0;
    text[1] = name_bonus_hp;
    count[1] = hp_heilkraeuter1;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_heilkraeuter1;
};

func void useplants1() {
    npc_changeattribute(self, atr_hitpoints, hp_heilkraeuter1);
    printdebugnpc(pd_item_mobsi, "Ich esse Heilkr*uter");
};

instance itfo_plants_herb_02(c_item) {
    name = "Öåëèòåëüíûå òðàâû";
    mainflag = item_kat_food;
    flags = item_multi;
    visual = "ItFo_Plants_Herb_02.3ds";
    material = mat_wood;
    scemename = "FOOD";
    on_state = useplants2;
    value = value_heilkraeuter2;
    description = name;
    text = "";
    count = 0;
    text[1] = name_bonus_hp;
    count[1] = hp_heilkraeuter2;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_heilkraeuter2;
};

func void useplants2() {
    npc_changeattribute(self, atr_hitpoints, hp_heilkraeuter2);
    printdebugnpc(pd_item_mobsi, "Ich esse Heilpflanzen");
};

instance itfo_plants_herb_03(c_item) {
    name = "Öåëèòåëüíûå òðàâû";
    mainflag = item_kat_food;
    flags = item_multi;
    visual = "ItFo_Plants_Herb_03.3ds";
    material = mat_wood;
    scemename = "FOOD";
    on_state = useplants3;
    value = value_heilkraeuter3;
    description = name;
    text = "";
    count = 0;
    text[1] = name_bonus_hp;
    count[1] = hp_heilkraeuter3;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_heilkraeuter3;
};

func void useplants3() {
    npc_changeattribute(self, atr_hitpoints, hp_heilkraeuter3);
    printdebugnpc(pd_item_mobsi, "Ich esse Heilpflanzen");
};

instance itfo_plants_bloodwood_01(c_item) {
    name = "Ñåìÿ áóêà";
    mainflag = item_kat_food;
    flags = item_multi;
    visual = "ItFo_Plants_Bloodwood_01.3ds";
    material = mat_wood;
    scemename = "FOOD";
    on_state = useblood;
    value = value_blutbuche;
    description = name;
    text = "";
    count = 0;
    text[1] = name_bonus_mana;
    count[1] = mana_blutbuche;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_blutbuche;
};

func void useblood() {
    npc_changeattribute(self, atr_mana, mana_blutbuche);
    printdebugnpc(pd_item_mobsi, "Ich esse Blutbuchensamen");
};

instance itfo_plants_towerwood_01(c_item) {
    name = "Ñåìÿ äóáà";
    mainflag = item_kat_food;
    flags = item_multi;
    visual = "ItFo_Plants_Bloodwood_01.3ds";
    material = mat_wood;
    scemename = "FOOD";
    on_state = useblood2;
    value = value_turmeiche;
    description = name;
    text = "";
    count = 0;
    text[1] = name_bonus_mana;
    count[1] = mana_turmeiche;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_turmeiche;
};

func void useblood2() {
    npc_changeattribute(self, atr_mana, mana_turmeiche);
    printdebugnpc(pd_item_mobsi, "Ich esse Turmeichensamen");
};

instance itfo_plants_ravenherb_01(c_item) {
    name = "Âîðîíüè òðàâû";
    mainflag = item_kat_food;
    flags = item_multi;
    visual = "ItFo_Plants_RavenHerb_01.3ds";
    material = mat_wood;
    scemename = "FOOD";
    on_state = useraven;
    value = value_rabenkraut;
    description = name;
    text = "";
    count = 0;
    text[1] = name_bonus_mana;
    count[1] = mana_rabenkraut;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_rabenkraut;
};

func void useraven() {
    npc_changeattribute(self, atr_mana, mana_rabenkraut);
    printdebugnpc(pd_item_mobsi, "Ich esse Rabenkraut");
};

instance itfo_plants_ravenherb_02(c_item) {
    name = "Òåìíûå òðàâû";
    mainflag = item_kat_food;
    flags = item_multi;
    visual = "ItFo_Plants_RavenHerb_01.3ds";
    material = mat_wood;
    scemename = "FOOD";
    on_state = useraven2;
    value = value_dunkelkraut;
    description = name;
    text = "";
    count = 0;
    text[1] = name_bonus_mana;
    count[1] = mana_dunkelkraut;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_dunkelkraut;
};

func void useraven2() {
    npc_changeattribute(self, atr_mana, mana_dunkelkraut);
    printdebugnpc(pd_item_mobsi, "Ich esse Dunkelkraut");
};

instance itfo_plants_stoneroot_01(c_item) {
    name = "Êàìåííûé êîðåíü";
    mainflag = item_kat_food;
    flags = item_multi;
    visual = "ItFo_Plants_Stoneroot_01.3ds";
    material = mat_wood;
    scemename = "FOOD";
    on_state = useroot;
    value = value_steimwurzel;
    description = name;
    text = "";
    count = 0;
    text[1] = name_bonus_mana;
    count[1] = mana_steinwurzel;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_steimwurzel;
};

func void useroot() {
    npc_changeattribute(self, atr_mana, mana_steinwurzel);
    printdebugnpc(pd_item_mobsi, "Ich esse Steinwurzel");
};

instance itfo_plants_stoneroot_02(c_item) {
    name = "Äðàêîíèé êîðåíü";
    mainflag = item_kat_food;
    flags = item_multi;
    visual = "ItFo_Plants_Stoneroot_01.3ds";
    material = mat_wood;
    scemename = "FOOD";
    on_state = useroot2;
    value = value_drachenwurzel;
    description = name;
    text = "";
    count = 0;
    text[1] = name_bonus_mana;
    count[1] = mana_drachenwurzel;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_drachenwurzel;
};

func void useroot2() {
    npc_changeattribute(self, atr_mana, mana_drachenwurzel);
    printdebugnpc(pd_item_mobsi, "Ich esse Drachenwurzel");
};

instance itfo_plants_trollberrys_01(c_item) {
    name = "Òåíü òðîëëÿ";
    mainflag = item_kat_food;
    flags = item_multi;
    visual = "ItFo_Plants_Trollberrys_01.3ds";
    material = mat_wood;
    scemename = "FOOD";
    on_state = usetrollberrys;
    value = value_trollkirsche;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_trollkirsche;
};

func void usetrollberrys() {
    npc_changeattribute(self, atr_hitpoints, hp_trollkirsche);
    printdebugnpc(pd_item_mobsi, "Ich esse Trollkirschen");
};

const int value_1h_sword_01 = 100;

instance itmw_1h_club_01(c_item) {
    name = "Äóáèíà";
    mainflag = item_kat_nf;
    flags = item_axe;
    visual = "ItMw_1H_Club_01.3DS";
    material = mat_wood;
    cond_atr[2] = atr_strength;
    cond_value[2] = 5;
    damagetotal = 5;
    damagetype = dam_blunt;
    range = 100;
    value = 2;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_poker_01(c_item) {
    name = "Êî÷åðãà";
    mainflag = item_kat_nf;
    flags = item_swd;
    visual = "ItMw_1H_Poker_01.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 5;
    damagetotal = 6;
    damagetype = dam_blunt;
    range = 100;
    value = 3;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_sickle_01(c_item) {
    name = "Ñåðï";
    mainflag = item_kat_nf;
    flags = item_axe;
    visual = "ItMw_1H_Sickle_01.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 5;
    damagetotal = 7;
    damagetype = dam_edge;
    range = 100;
    value = 4;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmwpickaxe(c_item) {
    name = "Êèðêà";
    mainflag = item_kat_nf;
    flags = item_2hd_axe;
    visual = "ItMw_2H_Pickaxe_01.3DS";
    material = mat_wood;
    cond_atr[2] = atr_strength;
    cond_value[2] = 5;
    damagetotal = 7;
    damagetype = dam_edge;
    range = 100;
    value = 4;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_twohanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_sledgehammer_01(c_item) {
    name = "Êóçíå÷íûé ìîëîò";
    mainflag = item_kat_nf;
    flags = item_axe;
    visual = "ItMw_1H_Sledgehammer_01.3DS";
    material = mat_wood;
    cond_atr[2] = atr_strength;
    cond_value[2] = 5;
    damagetotal = 10;
    damagetype = dam_blunt;
    range = 100;
    value = 5;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_mace_light_01(c_item) {
    name = "Äóáèíà";
    mainflag = item_kat_nf;
    flags = item_axe;
    visual = "ItMw_1H_Mace_Light_01.3DS";
    material = mat_wood;
    cond_atr[2] = atr_strength;
    cond_value[2] = 5;
    damagetotal = 8;
    damagetype = dam_blunt;
    range = 100;
    value = 5;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_hatchet_01(c_item) {
    name = "Òîïîð";
    mainflag = item_kat_nf;
    flags = item_axe;
    visual = "ItMw_1H_Hatchet_01.3DS";
    material = mat_wood;
    cond_atr[2] = atr_strength;
    cond_value[2] = 5;
    damagetotal = 9;
    damagetype = dam_edge;
    range = 100;
    value = 6;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_sword_old_01(c_item) {
    name = "Ðæàâûé ìå÷";
    mainflag = item_kat_nf;
    flags = item_swd;
    visual = "ItMw_1H_Sword_Old_01.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 5;
    damagetotal = 10;
    damagetype = dam_edge;
    range = 100;
    value = 10;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_nailmace_01(c_item) {
    name = "Äóáèíà ñ ãâîçäÿìè";
    mainflag = item_kat_nf;
    flags = item_axe;
    visual = "ItMw_1H_Nailmace_01.3DS";
    material = mat_wood;
    cond_atr[2] = atr_strength;
    cond_value[2] = 5;
    damagetotal = 11;
    damagetype = dam_blunt;
    range = 100;
    value = 13;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_sword_short_01(c_item) {
    name = "Êîðîòêèé ìå÷";
    mainflag = item_kat_nf;
    flags = item_swd;
    visual = "ItMw_1H_Sword_Short_01.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 6;
    damagetotal = 12;
    damagetype = dam_edge;
    range = 100;
    value = 44;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_sword_short_02(c_item) {
    name = "Çàùèòà çåìëåïàøöà";
    mainflag = item_kat_nf;
    flags = item_swd;
    visual = "ItMw_1H_Sword_Short_02.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 7;
    damagetotal = 14;
    damagetype = dam_edge;
    range = 100;
    value = 64;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_sword_short_03(c_item) {
    name = "Óêóñ øíûãè";
    mainflag = item_kat_nf;
    flags = item_swd;
    visual = "ItMw_1H_Sword_Short_03.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 8;
    damagetotal = 16;
    damagetype = dam_edge;
    range = 100;
    value = 88;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_sword_short_04(c_item) {
    name = "Ðàíÿùèé øèï";
    mainflag = item_kat_nf;
    flags = item_swd;
    visual = "ItMw_1H_Sword_Short_04.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 9;
    damagetotal = 18;
    damagetype = dam_edge;
    range = 100;
    value = 120;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_sword_short_05(c_item) {
    name = "Íàêàçàíüå ðóäîêîïà";
    mainflag = item_kat_nf;
    flags = item_swd;
    visual = "ItMw_1H_Sword_Short_05.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 10;
    damagetotal = 20;
    damagetype = dam_edge;
    range = 100;
    value = 160;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_axe_old_01(c_item) {
    name = "Ìàëûé òîïîð";
    mainflag = item_kat_nf;
    flags = item_axe;
    visual = "ItMw_1H_Axe_Old_01.3DS";
    material = mat_wood;
    cond_atr[2] = atr_strength;
    cond_value[2] = 7;
    damagetotal = 13;
    damagetype = dam_edge;
    range = 100;
    value = 19;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_scythe_01(c_item) {
    name = "Êàòýð";
    mainflag = item_kat_nf;
    flags = item_axe;
    visual = "ItMw_1H_Scythe_01.3DS";
    material = mat_wood;
    cond_atr[2] = atr_strength;
    cond_value[2] = 8;
    damagetotal = 15;
    damagetype = dam_edge;
    range = 100;
    value = 25;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_2h_staff_01(c_item) {
    name = "Áîåâîé ïîñîõ";
    mainflag = item_kat_nf;
    flags = item_2hd_axe;
    visual = "ItMw_2H_Staff_01.3DS";
    material = mat_wood;
    cond_atr[2] = atr_strength;
    cond_value[2] = 9;
    damagetotal = 17;
    damagetype = dam_blunt;
    range = 160;
    value = 62;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_twohanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_2h_staff_02(c_item) {
    name = "Ïîñîõ ñóäüè";
    mainflag = item_kat_nf;
    flags = item_2hd_axe;
    visual = "ItMw_2H_Staff_02.3DS";
    material = mat_wood;
    cond_atr[2] = atr_strength;
    cond_value[2] = 10;
    damagetotal = 19;
    damagetype = dam_edge;
    range = 160;
    value = 72;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_twohanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_2h_staff_03(c_item) {
    name = "Ïîñîõ ñâÿùåííèêà";
    mainflag = item_kat_nf;
    flags = item_2hd_axe;
    visual = "ItMw_2H_Staff_03.3DS";
    material = mat_wood;
    cond_atr[2] = atr_strength;
    cond_value[2] = 10;
    damagetotal = 21;
    damagetype = dam_blunt;
    range = 160;
    value = 90;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_twohanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_lightguardssword_03(c_item) {
    name = "Ëåãêèé ìå÷ ñòðàæíèêà";
    mainflag = item_kat_nf;
    flags = item_swd;
    visual = "ItMw_1H_Sword_01.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 20;
    damagetotal = 22;
    damagetype = dam_edge;
    range = 100;
    value = 75;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_mace_01(c_item) {
    name = "Áóëàâà";
    mainflag = item_kat_nf;
    flags = item_axe;
    visual = "ItMw_1H_Mace_01.3DS";
    material = mat_wood;
    cond_atr[2] = atr_strength;
    cond_value[2] = 10;
    damagetotal = 23;
    damagetype = dam_blunt;
    range = 100;
    value = 55;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_mace_02(c_item) {
    name = "Æàëÿùàÿ áóëàâà";
    mainflag = item_kat_nf;
    flags = item_axe;
    visual = "ItMw_1H_Mace_02.3DS";
    material = mat_wood;
    cond_atr[2] = atr_strength;
    cond_value[2] = 11;
    damagetotal = 25;
    damagetype = dam_blunt;
    range = 100;
    value = 65;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_mace_03(c_item) {
    name = "Æàëî øåðøíÿ";
    mainflag = item_kat_nf;
    flags = item_axe;
    visual = "ItMw_1H_Mace_03.3DS";
    material = mat_wood;
    cond_atr[2] = atr_strength;
    cond_value[2] = 11;
    damagetotal = 26;
    damagetype = dam_blunt;
    range = 100;
    value = 75;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_mace_04(c_item) {
    name = "Ñòàëüíîé ÿçûê";
    mainflag = item_kat_nf;
    flags = item_axe;
    visual = "ItMw_1H_Mace_04.3DS";
    material = mat_wood;
    cond_atr[2] = atr_strength;
    cond_value[2] = 11;
    damagetotal = 29;
    damagetype = dam_blunt;
    range = 100;
    value = 85;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_sword_01(c_item) {
    name = "Ïðîñòîé ìå÷";
    mainflag = item_kat_nf;
    flags = item_swd;
    visual = "ItMw_1H_Sword_01.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 20;
    damagetotal = 20;
    damagetype = dam_edge;
    range = 100;
    value = value_1h_sword_01;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_sword_02(c_item) {
    name = "Ìå÷ ñóäüè";
    mainflag = item_kat_nf;
    flags = item_swd;
    visual = "ItMw_1H_Sword_02.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 12;
    damagetotal = 30;
    damagetype = dam_edge;
    range = 100;
    value = 97;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_sword_03(c_item) {
    name = "Ìå÷ ñòðàæíèêà";
    mainflag = item_kat_nf;
    flags = item_swd;
    visual = "ItMw_1H_Sword_03.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 12;
    damagetotal = 32;
    damagetype = dam_edge;
    range = 100;
    value = 104;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_sword_04(c_item) {
    name = "Ìå÷ âîèíà";
    mainflag = item_kat_nf;
    flags = item_swd;
    visual = "ItMw_1H_Sword_04.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 13;
    damagetotal = 33;
    damagetype = dam_edge;
    range = 100;
    value = 111;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_sword_05(c_item) {
    name = "Áîåâîé ìå÷";
    mainflag = item_kat_nf;
    flags = item_swd;
    visual = "ItMw_1H_Sword_05.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 14;
    damagetotal = 34;
    damagetype = dam_edge;
    range = 100;
    value = 472;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_mace_war_01(c_item) {
    name = "Öåï";
    mainflag = item_kat_nf;
    flags = item_axe;
    visual = "ItMw_1H_Mace_War_01.3DS";
    material = mat_wood;
    cond_atr[2] = atr_strength;
    cond_value[2] = 14;
    damagetotal = 35;
    damagetype = dam_blunt;
    range = 100;
    value = 125;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_mace_war_02(c_item) {
    name = "Ñòàëüíàÿ áóëàâà";
    mainflag = item_kat_nf;
    flags = item_axe;
    visual = "ItMw_1H_Mace_War_02.3DS";
    material = mat_wood;
    cond_atr[2] = atr_strength;
    cond_value[2] = 15;
    damagetotal = 36;
    damagetype = dam_blunt;
    range = 100;
    value = 132;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_mace_war_03(c_item) {
    name = "Êðóøèòåëü";
    mainflag = item_kat_nf;
    flags = item_axe;
    visual = "ItMw_1H_Mace_War_03.3DS";
    material = mat_wood;
    cond_atr[2] = atr_strength;
    cond_value[2] = 26;
    damagetotal = 37;
    damagetype = dam_blunt;
    range = 100;
    value = 139;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_mace_war_04(c_item) {
    name = "Ðàçáèâàþùèé ñåðäöå";
    mainflag = item_kat_nf;
    flags = item_axe;
    visual = "ItMw_1H_Mace_War_04.3DS";
    material = mat_wood;
    cond_atr[2] = atr_strength;
    cond_value[2] = 17;
    damagetotal = 39;
    damagetype = dam_blunt;
    range = 100;
    value = 600;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_sword_long_01(c_item) {
    name = "Äëèííûé ìå÷";
    mainflag = item_kat_nf;
    flags = item_swd;
    visual = "ItMw_1H_Sword_Long_01.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 17;
    damagetotal = 40;
    damagetype = dam_edge;
    range = 120;
    value = 640;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_sword_long_02(c_item) {
    name = "Ìå÷ ñòðàõà";
    mainflag = item_kat_nf;
    flags = item_swd;
    visual = "ItMw_1H_Sword_Long_02.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 18;
    damagetotal = 42;
    damagetype = dam_edge;
    range = 120;
    value = 680;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_sword_long_03(c_item) {
    name = "Ìå÷ íåíàâèñòè";
    mainflag = item_kat_nf;
    flags = item_swd;
    visual = "ItMw_1H_Sword_Long_03.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 18;
    damagetotal = 44;
    damagetype = dam_edge;
    range = 120;
    value = 800;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_sword_long_04(c_item) {
    name = "Ìå÷ ïîáåäû";
    mainflag = item_kat_nf;
    flags = item_swd;
    visual = "ItMw_1H_Sword_Long_04.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 20;
    damagetotal = 46;
    damagetype = dam_edge;
    range = 120;
    value = 860;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_sword_long_05(c_item) {
    name = "Ìå÷ ñìåðòè";
    mainflag = item_kat_nf;
    flags = item_swd;
    visual = "ItMw_1H_Sword_Long_05.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 21;
    damagetotal = 48;
    damagetype = dam_edge;
    range = 120;
    value = 920;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_warhammer_01(c_item) {
    name = "Îðî÷èé ìîëîò";
    mainflag = item_kat_nf;
    flags = item_axe;
    visual = "ItMw_1H_Warhammer_01.3DS";
    material = mat_wood;
    cond_atr[2] = atr_strength;
    cond_value[2] = 22;
    damagetotal = 50;
    damagetype = dam_blunt;
    range = 100;
    value = 1000;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_warhammer_02(c_item) {
    name = "Áîåâîé ìîëîò";
    mainflag = item_kat_nf;
    flags = item_axe;
    visual = "ItMw_1H_Warhammer_02.3DS";
    material = mat_wood;
    cond_atr[2] = atr_strength;
    cond_value[2] = 23;
    damagetotal = 51;
    damagetype = dam_blunt;
    range = 100;
    value = 1040;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_warhammer_03(c_item) {
    name = "Ìîëîò áîãîâ";
    mainflag = item_kat_nf;
    flags = item_axe;
    visual = "ItMw_1H_Warhammer_03.3DS";
    material = mat_wood;
    cond_atr[2] = atr_strength;
    cond_value[2] = 23;
    damagetotal = 52;
    damagetype = dam_blunt;
    range = 100;
    value = 1080;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_axe_01(c_item) {
    name = "Òîïîð";
    mainflag = item_kat_nf;
    flags = item_axe;
    visual = "ItMw_1H_Axe_01.3DS";
    material = mat_wood;
    cond_atr[2] = atr_strength;
    cond_value[2] = 12;
    damagetotal = 29;
    damagetype = dam_edge;
    range = 100;
    value = 320;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_axe_02(c_item) {
    name = "Ñîêðóøàþùèé ÷åðåïà";
    mainflag = item_kat_nf;
    flags = item_axe;
    visual = "ItMw_1H_Axe_02.3DS";
    material = mat_wood;
    cond_atr[2] = atr_strength;
    cond_value[2] = 24;
    damagetotal = 53;
    damagetype = dam_edge;
    range = 100;
    value = 1020;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_axe_03(c_item) {
    name = "Êîñòîëîì";
    mainflag = item_kat_nf;
    flags = item_axe;
    visual = "ItMw_1H_Axe_03.3DS";
    material = mat_wood;
    cond_atr[2] = atr_strength;
    cond_value[2] = 25;
    damagetotal = 54;
    damagetype = dam_edge;
    range = 100;
    value = 1160;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_sword_broad_01(c_item) {
    name = "Ïàëàø";
    mainflag = item_kat_nf;
    flags = item_swd;
    visual = "ItMw_1H_Sword_Broad_01.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 26;
    damagetotal = 55;
    damagetype = dam_edge;
    range = 130;
    value = 1240;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_sword_broad_02(c_item) {
    name = "Ïðèãîâîð âîèíà";
    mainflag = item_kat_nf;
    flags = item_swd;
    visual = "ItMw_1H_Sword_Broad_02.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 27;
    damagetotal = 57;
    damagetype = dam_edge;
    range = 130;
    value = 1300;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_sword_broad_03(c_item) {
    name = "Øåïîò áóðè";
    mainflag = item_kat_nf;
    flags = item_swd;
    visual = "ItMw_1H_Sword_Broad_03.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 28;
    damagetotal = 58;
    damagetype = dam_edge;
    range = 130;
    value = 1360;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_sword_broad_04(c_item) {
    name = "Äëàíü ñòðàæíèêà";
    mainflag = item_kat_nf;
    flags = item_swd;
    visual = "ItMw_1H_Sword_Broad_04.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 29;
    damagetotal = 59;
    damagetype = dam_edge;
    range = 130;
    value = 1400;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_2h_sword_old_01(c_item) {
    name = "Ðæàâûé äâóðó÷íèê";
    mainflag = item_kat_nf;
    flags = item_2hd_swd;
    visual = "ItMw_2H_Sword_Old_01.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 30;
    damagetotal = 61;
    damagetype = dam_edge;
    range = 150;
    value = 1480;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_twohanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_sword_bastard_01(c_item) {
    name = "Ðæàâûé áîëüøîé ìå÷";
    mainflag = item_kat_nf;
    flags = item_swd;
    visual = "ItMw_1H_Sword_Bastard_01.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 31;
    damagetotal = 45;
    damagetype = dam_edge;
    range = 130;
    value = 200;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_sword_bastard_02(c_item) {
    name = "Ìÿñíèê";
    mainflag = item_kat_nf;
    flags = item_swd;
    visual = "ItMw_1H_Sword_Bastard_02.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 32;
    damagetotal = 64;
    damagetype = dam_edge;
    range = 130;
    value = c_amistronger.oth /*1660*/;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_sword_bastard_03(c_item) {
    name = "Ïàëà÷";
    mainflag = item_kat_nf;
    flags = item_swd;
    visual = "ItMw_1H_Sword_Bastard_03.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 33;
    damagetotal = 65;
    damagetype = dam_edge;
    range = 130;
    value = 1720;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_1h_sword_bastard_04(c_item) {
    name = "Ñëîâî áåðñåðêåðà";
    mainflag = item_kat_nf;
    flags = item_swd;
    visual = "ItMw_1H_Sword_Bastard_04.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 35;
    damagetotal = 66;
    damagetype = dam_edge;
    range = 130;
    value = 1760;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_2h_axe_old_01(c_item) {
    name = "Ñòàðûé áîåâîé òîïîð";
    mainflag = item_kat_nf;
    flags = item_2hd_axe;
    visual = "ItMw_2H_Axe_Old_01.3DS";
    material = mat_wood;
    cond_atr[2] = atr_strength;
    cond_value[2] = 36;
    damagetotal = 67;
    damagetype = dam_edge;
    range = 150;
    value = 1800;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_twohanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_2h_axe_old_02(c_item) {
    name = "Êðîâàâàÿ æàòâà";
    mainflag = item_kat_nf;
    flags = item_2hd_axe;
    visual = "ItMw_2H_Axe_Old_02.3DS";
    material = mat_wood;
    cond_atr[2] = atr_strength;
    cond_value[2] = 38;
    damagetotal = 68;
    damagetype = dam_edge;
    range = 150;
    value = 1840;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_twohanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_2h_axe_old_03(c_item) {
    name = "Ñòàðûé ñóäüÿ";
    mainflag = item_kat_nf;
    flags = item_2hd_axe;
    visual = "ItMw_2H_Axe_Old_03.3DS";
    material = mat_wood;
    cond_atr[2] = atr_strength;
    cond_value[2] = 40;
    damagetotal = 69;
    damagetype = dam_edge;
    range = 150;
    value = 1880;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_twohanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_2h_sword_light_01(c_item) {
    name = "Ëåãêèé äâóðó÷íèê";
    mainflag = item_kat_nf;
    flags = item_2hd_swd;
    visual = "ItMw_2H_Sword_Light_01.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 42;
    damagetotal = 70;
    damagetype = dam_edge;
    range = 150;
    value = 1900;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_twohanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_2h_sword_light_02(c_item) {
    name = "Êëèíîê õðàíèòåëÿ";
    mainflag = item_kat_nf;
    flags = item_2hd_swd;
    visual = "ItMw_2H_Sword_Light_02.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 44;
    damagetotal = 71;
    damagetype = dam_edge;
    range = 150;
    value = 1950;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_twohanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_2h_sword_light_03(c_item) {
    name = "Êëèíîê íàåìíèêà";
    mainflag = item_kat_nf;
    flags = item_2hd_swd;
    visual = "ItMw_2H_Sword_Light_03.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 46;
    damagetotal = 73;
    damagetype = dam_edge;
    range = 150;
    value = 2000;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_twohanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_2h_sword_light_04(c_item) {
    name = "Êëèíîê êîðîëÿ";
    mainflag = item_kat_nf;
    flags = item_2hd_swd;
    visual = "ItMw_2H_Sword_Light_04.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 48;
    damagetotal = 74;
    damagetype = dam_edge;
    range = 150;
    value = 2200;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_twohanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_2h_sword_light_05(c_item) {
    name = "Êëèíîê äåìîíà";
    mainflag = item_kat_nf;
    flags = item_2hd_swd;
    visual = "ItMw_2H_Sword_Light_05.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 50;
    damagetotal = 76;
    damagetype = dam_edge;
    range = 150;
    value = 2320;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_twohanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_2h_axe_light_01(c_item) {
    name = "Ëåãêèé áîåâîé òîïîð";
    mainflag = item_kat_nf;
    flags = item_2hd_axe;
    visual = "ItMw_2H_Axe_light_01.3DS";
    material = mat_wood;
    cond_atr[2] = atr_strength;
    cond_value[2] = 52;
    damagetotal = 77;
    damagetype = dam_edge;
    range = 150;
    value = 2400;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_twohanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_2h_axe_light_02(c_item) {
    name = "Óäàð ãðîìà";
    mainflag = item_kat_nf;
    flags = item_2hd_axe;
    visual = "ItMw_2H_Axe_light_02.3DS";
    material = mat_wood;
    cond_atr[2] = atr_strength;
    cond_value[2] = 54;
    damagetotal = 79;
    damagetype = dam_edge;
    range = 150;
    value = 2440;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_twohanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_2h_axe_light_03(c_item) {
    name = "Ãðîõîò";
    mainflag = item_kat_nf;
    flags = item_2hd_axe;
    visual = "ItMw_2H_Axe_light_03.3DS";
    material = mat_wood;
    cond_atr[2] = atr_strength;
    cond_value[2] = 56;
    damagetotal = 80;
    damagetype = dam_edge;
    range = 150;
    value = 2520;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_twohanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_2h_sword_01(c_item) {
    name = "Äâóðó÷íèê";
    mainflag = item_kat_nf;
    flags = item_2hd_swd;
    visual = "ItMw_2H_Sword_01.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 58;
    damagetotal = 81;
    damagetype = dam_edge;
    range = 150;
    value = 2600;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_twohanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_2h_sword_02(c_item) {
    name = "Êëèíîê ãåðîÿ";
    mainflag = item_kat_nf;
    flags = item_2hd_swd;
    visual = "ItMw_2H_Sword_02.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 60;
    damagetotal = 83;
    damagetype = dam_edge;
    range = 150;
    value = 2760;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_twohanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_2h_sword_03(c_item) {
    name = "Êëèíîê êðîâè";
    mainflag = item_kat_nf;
    flags = item_2hd_swd;
    visual = "ItMw_2H_Sword_03.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 62;
    damagetotal = 85;
    damagetype = dam_edge;
    range = 150;
    value = info_bau_2_daslager_info.cronos /*2840*/;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_twohanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_2h_sword_heavy_01(c_item) {
    name = "Òÿæåëûé äâóðó÷íèê";
    mainflag = item_kat_nf;
    flags = item_2hd_swd;
    visual = "ItMw_2H_Sword_Heavy_01.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 64;
    damagetotal = 86;
    damagetype = dam_edge;
    range = 150;
    value = 2920;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_twohanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_2h_sword_heavy_02(c_item) {
    name = "ßðîñòíàÿ ñòàëü";
    mainflag = item_kat_nf;
    flags = item_2hd_swd;
    visual = "ItMw_2H_Sword_Heavy_02.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 66;
    damagetotal = 88;
    damagetype = dam_edge;
    range = 150;
    value = 3040;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_twohanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_2h_sword_heavy_03(c_item) {
    name = "Ñóäüáîíîñíàÿ ñòàëü";
    mainflag = item_kat_nf;
    flags = item_2hd_swd;
    visual = "ItMw_2H_Sword_Heavy_03.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 68;
    damagetotal = 90;
    damagetype = dam_edge;
    range = 150;
    value = 3260;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_twohanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_2h_sword_heavy_04(c_item) {
    name = "Ìñòèòåëüíàÿ ñòàëü";
    mainflag = item_kat_nf;
    flags = item_2hd_swd;
    visual = "ItMw_2H_Sword_Heavy_04.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 70;
    damagetotal = 92;
    damagetype = dam_edge;
    range = 150;
    value = info_tpl_8_wichtigepersonen /*3440*/;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_twohanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_2h_axe_heavy_01(c_item) {
    name = "Áîåâîé òîïîð";
    mainflag = item_kat_nf;
    flags = item_2hd_axe;
    visual = "ItMw_2H_Axe_Heavy_01.3DS";
    material = mat_wood;
    cond_atr[2] = atr_strength;
    cond_value[2] = 72;
    damagetotal = 94;
    damagetype = dam_edge;
    range = 150;
    value = 3660;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_twohanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_2h_axe_heavy_02(c_item) {
    name = "Ãëàñ âîèíà";
    mainflag = item_kat_nf;
    flags = item_2hd_axe;
    visual = "ItMw_2H_Axe_Heavy_02.3DS";
    material = mat_wood;
    cond_atr[2] = atr_strength;
    cond_value[2] = 74;
    damagetotal = 96;
    damagetype = dam_edge;
    range = 150;
    value = 3860;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_twohanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_2h_axe_heavy_03(c_item) {
    name = "Êóëàê âàðâàðà";
    mainflag = item_kat_nf;
    flags = item_2hd_axe;
    visual = "ItMw_2H_Axe_Heavy_03.3DS";
    material = mat_wood;
    cond_atr[2] = atr_strength;
    cond_value[2] = 76;
    damagetotal = 98;
    damagetype = dam_edge;
    range = 150;
    value = 4060;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_twohanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw_2h_axe_heavy_04(c_item) {
    name = "Êóëàê òðîëëÿ";
    mainflag = item_kat_nf;
    flags = item_2hd_axe;
    visual = "ItMw_2H_Axe_Heavy_04.3DS";
    material = mat_wood;
    cond_atr[2] = atr_strength;
    cond_value[2] = 78;
    damagetotal = 100;
    damagetype = dam_edge;
    range = 150;
    value = itfo_plants_herb_03 /*4360*/;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_twohanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw2horcsword01(c_item) {
    name = "Êðàø Âàððîê";
    mainflag = item_kat_nf;
    flags = item_2hd_swd;
    visual = "ItMw_2H_OrcSword_01.3DS";
    material = mat_wood;
    cond_atr[2] = atr_strength;
    cond_value[2] = 25;
    damagetotal = 45;
    damagetype = dam_edge;
    range = 150;
    value = 30;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_twohanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw2horcaxe01(c_item) {
    name = "Êðàø Ïàí÷";
    mainflag = item_kat_nf;
    flags = item_2hd_axe;
    visual = "ItMw_2H_OrcAxe_01.3DS";
    material = mat_wood;
    cond_atr[2] = atr_strength;
    cond_value[2] = 30;
    damagetotal = 50;
    damagetype = dam_edge;
    range = 150;
    value = 35;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_twohanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw2horcaxe02(c_item) {
    name = "Êðàø Óððîê";
    mainflag = item_kat_nf;
    flags = item_2hd_axe;
    visual = "ItMw_2H_OrcAxe_02.3DS";
    material = mat_wood;
    cond_atr[2] = atr_strength;
    cond_value[2] = 35;
    damagetotal = 55;
    damagetype = dam_edge;
    range = 150;
    value = 38;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_twohanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw2horcaxe03(c_item) {
    name = "Êðàø Àãàø";
    mainflag = item_kat_nf;
    flags = item_2hd_axe;
    visual = "ItMw_2H_OrcAxe_03.3DS";
    material = mat_wood;
    cond_atr[2] = atr_strength;
    cond_value[2] = 40;
    damagetotal = 60;
    damagetype = dam_edge;
    range = 150;
    value = 40;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_twohanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw2horcaxe04(c_item) {
    name = "Êðàø Áðîêäàð";
    mainflag = item_kat_nf;
    flags = item_2hd_axe;
    visual = "ItMw_2H_OrcAxe_04.3DS";
    material = mat_wood;
    cond_atr[2] = atr_strength;
    cond_value[2] = 45;
    damagetotal = 65;
    damagetype = dam_edge;
    range = 150;
    value = 43;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_twohanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmw2horcmace01(c_item) {
    name = "Êðàø Êàððîê";
    mainflag = item_kat_nf;
    flags = item_2hd_axe;
    visual = "ItMw_2H_OrcMace_01.3DS";
    material = mat_wood;
    cond_atr[2] = atr_strength;
    cond_value[2] = 50;
    damagetotal = 75;
    damagetype = dam_blunt;
    range = 150;
    value = 50;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_twohanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itrworcstaff(c_item) {
    name = "Ãðàõòíàêê";
    mainflag = item_kat_nf;
    flags = item_2hd_axe;
    visual = "ItRw_2H_Orcstaff_01.3DS";
    material = mat_wood;
    damagetotal = 0;
    damagetype = dam_blunt;
    range = 160;
    value = 0;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = "";
    count[5] = 0;
};

instance itrwudorcstaff(c_item) {
    name = "Øàáàíàêê";
    mainflag = item_kat_nf;
    flags = item_2hd_axe;
    visual = "ItRw_2H_Orcstaff_01.3DS";
    material = mat_wood;
    damagetotal = 0;
    damagetype = dam_blunt;
    range = 160;
    value = 0;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = "";
    count[5] = 0;
};

const int value_mobsiitem = 3;

const int value_swordblade = 80;

const int value_swordbladehot = 64;

const int value_swordrawhot = 51;

const int value_swordraw = 40;

const int value_dietrich = 10;

const int value_schluessel = 3;

const int value_joint1 = 8;

const int value_joint2 = 15;

const int value_joint3 = 20;

const int value_laute = 10;

const int value_erzbrocken = 1;

const int value_fackel = 2;

const int value_sumpfkraut = 8;

const int value_pfeife = 10;

const int value_rasiermesser = 5;

const int value_muenze = 0;

const int value_schuessel = 4;

const int value_kerzenstaender = 10;

const int value_becher = 4;

const int value_pokal = 50;

const int value_besteck = 15;

const int value_pfanne = 10;

const int value_krug = 10;

const int value_amphore = 15;

const int value_statue = 15;

const int value_schwefel = 20;

const int value_quecksilber = 25;

const int value_salz = 10;

const int value_oel = 15;

const int value_moleratfett = 5;

const int value_alcohol = 18;

instance itkelockpick(c_item) {
    name = "Îòìû÷êà";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItKe_Lockpick_01.3ds";
    material = mat_metal;
    value = value_dietrich;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value_dietrich;
};

instance itkekey1(c_item) {
    name = "Êëþ÷";
    mainflag = item_kat_none;
    flags = 0;
    visual = "ItKe_Key_01.3ds";
    material = mat_metal;
    value = value_schluessel;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value_schluessel;
};

instance itkekey2(c_item) {
    name = "Êëþ÷";
    mainflag = item_kat_none;
    flags = 0;
    visual = "ItKe_Key_02.3ds";
    material = mat_metal;
    value = value_schluessel;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value_schluessel;
};

instance itkekey3(c_item) {
    name = "Êëþ÷";
    mainflag = item_kat_none;
    flags = 0;
    visual = "ItKe_Key_03.3ds";
    material = mat_metal;
    value = value_schluessel;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value_schluessel;
};

instance itkekey4(c_item) {
    name = "Êëþ÷";
    mainflag = item_kat_none;
    flags = 0;
    visual = "ItKe_Key_04.3ds";
    material = mat_metal;
    value = value_schluessel;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value_schluessel;
};

instance itkecavalorn01(c_item) {
    name = "Êëþ÷ Êàâàëîðíà";
    mainflag = item_kat_none;
    flags = 0;
    visual = "ItKe_Key_04.3ds";
    material = mat_metal;
    value = value_schluessel;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value_schluessel;
};

instance itmistomper(c_item) {
    name = "Ïðåññ";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItMi_Stomper_01.3DS";
    material = mat_metal;
    value = value_mobsiitem;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value_mobsiitem;
};

instance itmihammer(c_item) {
    name = "Ìîëîò";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItMi_Hammer_01.3DS";
    material = mat_wood;
    value = value_mobsiitem;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value_mobsiitem;
};

instance itmiscoop(c_item) {
    name = "Äåðåâÿííàÿ ëîæêà";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItMi_Scoop_01.3DS";
    material = mat_wood;
    value = value_mobsiitem;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value_mobsiitem;
};

instance itmiflask(c_item) {
    name = "Ëàáîðàòîðíûé ôëàêîí";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItFo_Potion_Mana_02.3ds";
    material = mat_glas;
    value = value_mobsiitem;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value_mobsiitem;
};

instance itmiswordraw(c_item) {
    name = "Íåîáðàáîòàííàÿ ñòàëü";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItMi_SmithSword_Raw_01.3DS";
    material = mat_metal;
    value = value_swordraw;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value;
};

instance itmiswordrawhot(c_item) {
    name = "Ðàñêàëåííàÿ ñòàëü";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItMi_SmithSword_Rawhot_01.3DS";
    material = mat_metal;
    value = value_swordrawhot;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value;
};

instance itmiswordbladehot(c_item) {
    name = "Ðàñêàëåííûé êëèíîê";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItMi_SmithSword_Bladehot_01.3DS";
    material = mat_metal;
    value = value_swordbladehot;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value;
};

instance itmiswordblade(c_item) {
    name = "Êëèíîê";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItMi_SmithSword_Blade_01.3DS";
    material = mat_metal;
    value = value_swordblade;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value;
};

instance itlstorchfirespit(c_item) {
    name = "Ôàêåë";
    mainflag = item_kat_none;
    flags = item_burn | item_torch;
    visual = "ITLSTORCHBURNING.ZEN";
    material = mat_wood;
    scemename = "FIRESPIT";
    value = value_mobsiitem;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value;
};

instance itmilute(c_item) {
    name = "Ëþòíÿ";
    mainflag = item_kat_none;
    visual = "ItMi_Lute_01.3DS";
    material = mat_wood;
    scemename = "LUTE";
    on_state = uselute;
    value = value_laute;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value;
};

func void uselute() {
    if ((play_lute == false) && npc_isplayer(self)) {
        b_givexp(10);
        play_lute = true;
    };
};

instance itmiwedel(c_item) {
    name = "Ïàëüìîâûé ëèñò";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItMi_Wedel_01.3ds";
    material = mat_leather;
    scemename = "COOLAIR";
    value = value_mobsiitem;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value;
};

instance itmibrush(c_item) {
    name = "Êèñòü";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItMi_Brush_01.3ds";
    material = mat_glas;
    scemename = "BRUSH";
    value = value_mobsiitem;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value;
};

instance itmijoint_1(c_item) {
    name = "Çåëåíûé íîâè÷îê";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItMi_Joint_01.3ds";
    material = mat_wood;
    scemename = "JOINT";
    on_state = useitmijoint_1;
    value = value_joint1;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value;
};

func void useitmijoint_1() {
    if ((firstjoint == false) && npc_isplayer(self)) {
        b_givexp(5);
        firstjoint = true;
    };
};

instance itmijoint_2(c_item) {
    name = "Ñåâåðíûé òåìíûé";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItMi_Joint_01.3ds";
    material = mat_wood;
    scemename = "JOINT";
    on_state = useitmijoint_2;
    value = value_joint2;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value;
};

func void useitmijoint_2() {
    if ((secondjoint == false) && npc_isplayer(self)) {
        b_givexp(10);
        secondjoint = true;
    };
};

instance itmijoint_3(c_item) {
    name = "Çîâ ñíà";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItMi_Joint_01.3ds";
    material = mat_wood;
    scemename = "JOINT";
    on_state = useitmijoint_3;
    value = value_joint3;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value;
};

func void useitmijoint_3() {
    if ((thirdjoint == false) && npc_isplayer(self)) {
        npc_changeattribute(self, atr_mana_max, 2);
        printscreen(print_itmijoint_3_bonus, -1, -1, font_old_20, 3);
        thirdjoint = true;
    };
};

instance itminugget(c_item) {
    name = "Ðóäà";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItMi_Nugget_01.3ds";
    material = mat_metal;
    value = value_erzbrocken;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value;
};

instance itlstorch(c_item) {
    name = "Ôàêåë";
    mainflag = item_kat_none;
    flags = (item_burn | item_torch) | item_multi;
    visual = "ItLs_Torch_01.3ds";
    material = mat_wood;
    value = value_fackel;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value;
};

instance itlstorchburning(c_item) {
    name = "Ãîðÿùèé ôàêåë";
    mainflag = item_kat_none;
    flags = item_burn | item_torch;
    visual = "ITLSTORCHBURNING.ZEN";
    material = mat_wood;
    value = 0;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = "";
    count[5] = 0;
};

instance itlstorchburned(c_item) {
    name = "Ôàêåë";
    mainflag = item_kat_none;
    flags = (item_burn | item_torch) | item_multi;
    visual = "ItLs_Torchburned_01.3ds";
    material = mat_wood;
    value = 0;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = "";
    count[5] = 0;
};

instance itmi_plants_swampherb_01(c_item) {
    name = "Áîëîòíèê";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItMi_Plants_Swampherb_01.3ds";
    material = mat_wood;
    value = value_sumpfkraut;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value;
};

instance itmi_stuff_pipe_01(c_item) {
    name = "Òðóáà";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItMi_Stuff_Pipe_01.3DS";
    material = mat_wood;
    value = value_pfeife;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value;
};

instance itmi_stuff_barbknife_01(c_item) {
    name = "Îñòåð";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItMi_Stuff_Barbknife_01.3DS";
    material = mat_metal;
    value = value_rasiermesser;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value;
};

instance itmi_stuff_oldcoin_01(c_item) {
    name = "Ìîíåòà";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItMi_Stuff_OldCoin_01.3DS";
    material = mat_metal;
    value = value_muenze;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
};

instance itmi_stuff_oldcoin_02(c_item) {
    name = "Ìîíåòà";
    mainflag = item_kat_none;
    flags = item_multi | item_mission;
    visual = "ItMi_Stuff_OldCoin_01.3DS";
    material = mat_metal;
    value = value_muenze;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
};

instance itmi_stuff_plate_01(c_item) {
    name = "Áëþäî";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItMi_Stuff_Plate_01.3DS";
    material = mat_clay;
    value = value_schuessel;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value;
};

instance itmi_stuff_candel_01(c_item) {
    name = "Ïîäñâå÷íèê";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItMi_Stuff_Candel_01.3DS";
    material = mat_metal;
    value = value_kerzenstaender;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value;
};

instance itmi_stuff_cup_01(c_item) {
    name = "Áîêàë";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItMi_Stuff_Cup_01.3DS";
    material = mat_clay;
    value = value_becher;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value;
};

instance itmi_stuff_cup_02(c_item) {
    name = "Êóáîê";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItMi_Stuff_Cup_02.3DS";
    material = mat_metal;
    value = value_pokal;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value;
};

instance itmi_stuff_silverware_01(c_item) {
    name = "Ëåçâèå";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItMi_Stuff_Silverware_01.3DS";
    material = mat_metal;
    value = value_besteck;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value;
};

instance itmi_stuff_pan_01(c_item) {
    name = "Ñêîâîðîäà";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItMi_Stuff_Pan_01.3DS";
    material = mat_metal;
    value = value_pfanne;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value;
};

instance itmi_stuff_mug_01(c_item) {
    name = "Êðóæêà";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItMi_Stuff_Mug_01.3DS";
    material = mat_clay;
    value = value_krug;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value;
};

instance itmi_stuff_amphore_01(c_item) {
    name = "Àìôîðà";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItMi_Stuff_Amphore_01.3DS";
    material = mat_clay;
    value = value_amphore;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value;
};

instance itmi_stuff_idol_ogront_01(c_item) {
    name = "Ñòàòóÿ";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItMi_Stuff_Idol_Ogront_01.3DS";
    material = mat_clay;
    value = value_statue;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value;
};

instance itmi_alchemy_sulphur_01(c_item) {
    name = "Ñåðà";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItMi_Alchemy_Sulphur_01.3DS";
    material = mat_clay;
    value = value_schwefel;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value;
};

instance itmi_alchemy_quicksilver_01(c_item) {
    name = "Ðòóòü";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItMi_Alchemy_Quicksilver_01.3DS";
    material = mat_clay;
    value = value_quecksilber;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value;
};

instance itmi_alchemy_salt_01(c_item) {
    name = "Ñîëü";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItMi_Alchemy_Salt_01.3DS";
    material = mat_clay;
    value = value_salz;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value;
};

instance itmi_alchemy_syrianoil_01(c_item) {
    name = "Ìàñëî";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItMi_Alchemy_Syrianoil_01.3DS";
    material = mat_clay;
    value = value_oel;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value;
};

instance itmi_alchemy_moleratlubric_01(c_item) {
    name = "Æèð êðîòîêðûñà";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItMi_Alchemy_Moleratlubric_01.3DS";
    material = mat_clay;
    value = value_moleratfett;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value;
};

instance itmi_alchemy_alcohol_01(c_item) {
    name = "×èñòûé ñïèðò";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItMi_Alchemy_Alcohol_01.3DS";
    material = mat_clay;
    value = value_alcohol;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value;
};

instance mordragsring(c_item) {
    name = name_ring;
    mainflag = item_kat_magic;
    flags = item_ring;
    visual = "ItMi_Ring_01.3ds";
    visual_skin = 0;
    material = mat_metal;
    on_equip = equip_mordragsring;
    on_unequip = unequip_mordragsring;
    value = 250;
    description = "Êîëüöî Ìîðäðàãà";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_bonus_dex;
    count[2] = 5;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void equip_mordragsring() {
    npc_changeattribute(self, atr_dexterity, 5);
};

func void unequip_mordragsring() {
    npc_changeattribute(self, atr_dexterity, -5);
};

instance specialjoint(c_item) {
    name = "Ãîòîâûé Çîâ ñíà";
    mainflag = item_kat_none;
    flags = item_multi;
    visual = "ItMi_Joint_01.3ds";
    material = mat_wood;
    scemename = "JOINT";
    on_state = usespecialjoint;
    value = value_joint3 * 10;
    description = "";
    text = "Ýòîò áîëîòíèê îáëàäàåò áîëåå ñèëüíûì";
    count = 0;
    text[1] = "ýôôåêòîì, ÷åì îáû÷íûé.";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "Çà ãóðó Èäîëà Òèîíà!";
    count[3] = 0;
    text[4] = "";
    count[4] = value_joint3 * 10;
    text[5] = "";
    count[5] = 0;
};

func void usespecialjoint() {
    ai_startstate(self, zs_magicsleep, 1, "");
};

instance itat_damlurker_01(c_item) {
    name = "Êîãòè øíûãà ó çàïðóäû";
    mainflag = item_kat_none;
    flags = item_mission;
    visual = "ItAt_Lurker_01.3DS";
    material = mat_leather;
    value = value_lurkerklaue;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value_lurkerklaue * 2;
};

instance itwrommap(c_item) {
    name = "Êàðòà";
    mainflag = item_kat_docs;
    flags = item_mission;
    visual = "ItWr_Map_01.3DS";
    material = mat_leather;
    scemename = "MAP";
    on_state = useommap;
    value = 30;
    description = "Êàðòà ïóòè ê Ñòàðîé Øàõòå";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void useommap() {
    var int ndocid;

    ndocid = doc_createmap();
    doc_setlevel(ndocid, "WORLD.ZEN");
    doc_setpages(ndocid, 1);
    doc_setpage(ndocid, 0, "Map_OldMine.tga", 1);
    doc_show(ndocid);
};

instance altesschwertvm(c_item) {
    name = "Ñòàðûé ìå÷";
    mainflag = item_kat_nf;
    flags = item_swd | item_mission;
    visual = "ItMw_1H_Sword_Old_01.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 10;
    damagetotal = 12;
    damagetype = dam_edge;
    range = 100;
    value = 12;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance altesschwert(c_item) {
    name = "Ñòàðûé ìå÷";
    mainflag = item_kat_nf;
    flags = item_swd | item_mission;
    visual = "ItMw_1H_Sword_Old_01.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 10;
    damagetotal = 12;
    damagetype = dam_edge;
    range = 100;
    value = 12;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance jackalssword(c_item) {
    name = "Ìå÷ øàêàëà";
    mainflag = item_kat_nf;
    flags = item_swd;
    owner = grd_201_jackal;
    visual = "ItMw_1H_Sword_Short_05.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 20;
    damagetotal = 3;
    damagetype = dam_edge;
    range = 100;
    value = 27;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance kdw_amulett(c_item) {
    name = name_amulett;
    mainflag = item_kat_magic;
    flags = item_amulet | item_mission;
    visual = "ItMi_Amulet_01.3ds";
    visual_skin = 0;
    material = mat_metal;
    value = 100;
    description = "Àìóëåò ïîñëàííèêà ìàãîâ âîäû";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance cronos_brief(c_item) {
    name = "Ïèñüìî";
    mainflag = item_kat_docs;
    flags = item_mission;
    visual = "ItWr_Scroll_01.3DS";
    material = mat_leather;
    scemename = "MAP";
    on_state = usecronosbrief;
    value = 0;
    description = "Ïèñüìî Êðîíîñà ìàãàì îãíÿ";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = "";
    count[5] = 0;
};

const string cronosbrief_1 = "Ïî÷òåííûé ìàñòåð Êîððèñòî,";

const string cronosbrief_2 = "Ñàòóðàñ, ãëóáîêîóâàæàåìûé ìàñòåð ìàãîâ êðóãà âîäû, óáåäèòåëüíî ïðîñèò âàñ ïîìî÷ü íàì óäåðæàòü êîíôëèêò ìåæäó Ñòàðûì è Íîâûì Ëàãåðÿìè â òåõ ðàìêàõ, êîòîðûå ÿâëÿþòñÿ ïðèåìëåìûìè äëÿ îáåèõ ñòîðîí. Ïîñêîëüêó èìåííî âû ÿâëÿåòåñü îòâåòñòâåííûì çà åæåìåñÿ÷íûå ïîñòàâêè ðóäû êîðîëþ, îãðàíè÷åíèå äåéñòâèé âîðîâ èç Íîâîãî Ëàãåðÿ äîëæíî áûòü è â âàøèõ èíòåðåñàõ. Äàëåå ìû òàêæå õîòåëè áû áûòü óâåðåííûìè, ÷òî Ñòàðûé Ëàãåðü áîëåå íå áóäåò ïðåäïðèíèìàòü øàãè, ñòàâÿùèå ïîä óãðîçó íàøè ïîïûòêè èçáàâèòüñÿ îò ìàãè÷åñêîãî áàðüåðà, óäåðæèâàþùåãî çäåñü âñåõ íàñ.";

const string cronosbrief_3 = "Ñ íåòåðïåíèåì îæèäàþ âàøåãî îòâåòà,";

const string cronosbrief_4 = "            Êðîíîñ, Õðàíèòåëü ðóäû";

func void usecronosbrief() {
    var int ndocid;

    ndocid = doc_create();
    doc_setpages(ndocid, 1);
    doc_setpage(ndocid, 0, "letters.TGA", 0);
    doc_setfont(ndocid, -1, font_book_text);
    doc_setmargins(ndocid, -1, 50, 50, 50, 50, 1);
    doc_printline(ndocid, 0, " ");
    doc_printline(ndocid, 0, cronosbrief_1);
    doc_printline(ndocid, 0, "");
    doc_setfont(ndocid, -1, font_book_text);
    doc_printlines(ndocid, 0, cronosbrief_2);
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, cronosbrief_3);
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, cronosbrief_4);
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, "");
    doc_setmargins(ndocid, -1, 200, 50, 50, 50, 1);
    doc_show(ndocid);
};

instance neks_amulett(c_item) {
    name = name_amulett;
    mainflag = item_kat_magic;
    flags = item_amulet | item_mission;
    visual = "ItMi_Amulet_01.3ds";
    visual_skin = 0;
    material = mat_metal;
    on_equip = equip_schutzamulett_nek;
    on_unequip = unequip_schutzamulett_nek;
    value = 50;
    description = "Àìóëåò ìåðòâîãî ñòðàæíèêà";
    text = "";
    count = 0;
    text[1] = "Íà çàäíåé ñòîðîíå íàïèñàíî èìÿ ÍÅÊ.";
    count[1] = 0;
    text[2] = name_prot_edge;
    count[2] = 5;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void equip_schutzamulett_nek() {
    self.protection[prot_edge] /*2*/ += 5;
    self.protection[prot_blunt] /*1*/ += 5;
};

func void unequip_schutzamulett_nek() {
    self.protection[prot_edge] /*2*/ -= 5;
    self.protection[prot_blunt] /*1*/ -= 5;
};

instance recruitjoint(c_item) {
    name = "Áîëîòíèê äëÿ ðóäîêîïîâ";
    mainflag = item_kat_none;
    flags = item_multi;
    hp = 10;
    hp_max = 10;
    weight = 1;
    visual = "ItMiJoint.3ds";
    material = mat_wood;
    scemename = "JOINT";
    value = 1;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance healthwater(c_item) {
    name = "Öåëèòåëüíûé ýëèêñèð äëÿ Þ'Áåðèîíà";
    mainflag = item_kat_none;
    flags = item_mission;
    visual = "ItFo_Potion_Health_01.3ds";
    material = mat_glas;
    value = 10;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance thelist(c_item) {
    name = "Ñïèñîê";
    mainflag = item_kat_docs;
    flags = item_mission;
    hp = 5;
    hp_max = 5;
    weight = 1;
    visual = "ItWr_Scroll_01.3ds";
    material = mat_leather;
    scemename = "MAP";
    on_state = usethelist;
    description = name;
    text = "ßí, íà÷àëüíèê Ñòàðîé Øàõòû,";
    count = 0;
    text[1] = "çàïèñàë âñå, ÷òî èì íåîáõîäèìî.";
    count[1] = 0;
};

const string thelist_1 = "Ñïèñîê";

const string thelist_2 = "20 áóõàíîê õëåáà - áåç ïëåñåíè íà ýòîò ðàç!";

const string thelist_3 = "25 - 30 ÿáëîê";

const string thelist_4 = "10 êóñêîâ ñûðà";

const string thelist_5 = "1 ÷åðïàê ñóïà";

const string thelist_6 = "1 êèñòü";

const string thelist_7 = "5 êèðîê è 3 ìîëîòà";

const string thelist_8 = "È áîëîòíèêà íà ñâîå óñìîòðåíèå - ïåðâàÿ ïîñòàâêà â ýòîì ìåñÿöå, ñàì ïîíèìàåøü!";

const string thelist_9 = "Òîâàðû äîëæíû áûòü äîñòàâëåíû ïîñëåçàâòðà.";

const string thelist_10 = "ßÍ";

func void usethelist() {
    var int ndocid;

    ndocid = doc_create();
    doc_setpages(ndocid, 1);
    doc_setpage(ndocid, 0, "letters.TGA", 0);
    doc_setfont(ndocid, -1, font_book_text);
    doc_setmargins(ndocid, -1, 50, 50, 50, 50, 1);
    doc_printline(ndocid, 0, thelist_1);
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, thelist_2);
    doc_printline(ndocid, 0, thelist_3);
    doc_printline(ndocid, 0, thelist_4);
    doc_printline(ndocid, 0, thelist_5);
    doc_printline(ndocid, 0, thelist_6);
    doc_printline(ndocid, 0, thelist_7);
    doc_printlines(ndocid, 0, thelist_8);
    doc_printline(ndocid, 0, thelist_9);
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, thelist_10);
    doc_printline(ndocid, 0, "");
    doc_setmargins(ndocid, -1, 200, 50, 50, 50, 1);
    doc_show(ndocid);
};

instance thelistnc(c_item) {
    name = "Ñïèñîê (ðàñøèðåííûé)";
    mainflag = item_kat_docs;
    flags = item_mission;
    hp = 5;
    hp_max = 5;
    weight = 1;
    visual = "ItWr_Scroll_01.3ds";
    material = mat_leather;
    scemename = "MAP";
    on_state = usethelistnc;
    description = name;
    text = "ßí, íà÷àëüíèê Ñòàðîé Øàõòû,";
    count = 0;
    text[1] = "çàïèñàë âñå, ÷òî èì íåîáõîäèìî.";
    count[1] = 0;
    text[2] = "(Ëàðñ äîáàâèë íåñêîëüêî ïóíêòîâ. Ïîääåëêà";
    count[2] = 0;
    text[3] = "óäàëàñü!)";
    count[3] = 0;
};

const string thelistnc_11 = "Äà, ÷óòü íå çàáûë:";

const string thelistnc_12 = "30 áóòûëîê ïèâà";

const string thelistnc_13 = "5 áóòûëîê âèíà";

const string thelistnc_14 = "25 ïîðöèé æàðêîãî èç ïàäàëüùèêîâ";

const string thelistnc_15 = "ïîëäþæèíû åäèíèö îðóæèÿ íà çàìåíó";

func void usethelistnc() {
    var int ndocid;

    ndocid = doc_create();
    doc_setpages(ndocid, 1);
    doc_setpage(ndocid, 0, "letters.TGA", 0);
    doc_setfont(ndocid, -1, font_book_text);
    doc_setmargins(ndocid, -1, 50, 50, 50, 50, 1);
    doc_printline(ndocid, 0, thelist_1);
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, thelist_2);
    doc_printline(ndocid, 0, thelist_3);
    doc_printline(ndocid, 0, thelist_4);
    doc_printline(ndocid, 0, thelist_5);
    doc_printline(ndocid, 0, thelist_6);
    doc_printline(ndocid, 0, thelist_7);
    doc_printlines(ndocid, 0, thelist_8);
    doc_printline(ndocid, 0, thelist_9);
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, thelist_10);
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, thelistnc_11);
    doc_printline(ndocid, 0, thelistnc_12);
    doc_printline(ndocid, 0, thelistnc_13);
    doc_printline(ndocid, 0, thelistnc_14);
    doc_printline(ndocid, 0, thelistnc_15);
    doc_setmargins(ndocid, -1, 200, 50, 50, 50, 1);
    doc_show(ndocid);
};

instance lares_ring(c_item) {
    name = name_ring;
    mainflag = item_kat_magic;
    flags = item_ring || item_mission;
    visual = "ItMi_Ring_01.3ds";
    visual_skin = 0;
    material = mat_metal;
    on_equip = equip_lares_ring;
    on_unequip = unequip_lares_ring;
    value = 50;
    description = "Êîëüöî Ëàðñà";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_bonus_str;
    count[2] = 3;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void equip_lares_ring() {
    npc_changeattribute(self, atr_strength, 3);
};

func void unequip_lares_ring() {
    npc_changeattribute(self, atr_strength, -3);
};

instance heiltrank(c_item) {
    name = name_trank;
    mainflag = item_kat_potions;
    flags = item_multi || item_mission;
    visual = "ItFo_Potion_Health_01.3ds";
    material = mat_glas;
    scemename = "POTION";
    on_state = useheiltrank;
    value = 100;
    description = "Ýëèêñèð áûñòðîãî èñöåëåíèÿ";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_bonus_hp;
    count[2] = 30;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void useheiltrank() {
    printdebugnpc(pd_item_mobsi, "UseHealthPotion");
    npc_changeattribute(self, atr_hitpoints, 30);
    printdebugnpc(pd_item_mobsi, "Ich trinke meinen Heiltrank");
};

instance specialwater(c_item) {
    name = "Ìàãè÷åñêàÿ âîäà";
    mainflag = item_kat_food;
    flags = item_mission;
    visual = "ItFoFlaskHealth.3ds";
    material = mat_glas;
    scemename = "POTION";
    value = 10;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance kalomsrecipe(c_item) {
    name = "Ðåöåïò Ãàëîìà";
    mainflag = item_kat_docs;
    flags = item_mission;
    visual = "ItWr_Scroll_01.3DS";
    material = mat_leather;
    scemename = "MAP";
    on_state = use_kalomsrecipe;
    value = 100;
    description = name;
    text = "Ðåöåïò öåëåáíîãî ýëèêñèðà.";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

const string kalomsrecipe_1 = "Ëèôðóí àê Ãõàðàê";

const string kalomsrecipe_2 = "Ðõàðàê Îð Íàõ áèí òó. Ëèôðóí ìàð Îðàã õòàõ. Øðàíê åñï Õîðèíò.";

const string kalomsrecipe_3 = "Åñëè ÷èòàòü ýòî íàîáîðîò, òî ñìûñë óëîâèòü ìîæíî.";

const string kalomsrecipe_4 = "          - Ãàëîì";

func void use_kalomsrecipe() {
    var int ndocid;

    ndocid = doc_create();
    doc_setpages(ndocid, 2);
    doc_setpage(ndocid, 0, "Book_Brown_L.tga", 0);
    doc_setpage(ndocid, 1, "Book_Brown_R.tga", 0);
    doc_setmargins(ndocid, 0, 275, 20, 30, 20, 1);
    doc_setfont(ndocid, -1, font_book_text);
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, kalomsrecipe_1);
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, kalomsrecipe_2);
    doc_setmargins(ndocid, -1, 30, 20, 275, 20, 1);
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printlines(ndocid, 1, kalomsrecipe_3);
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, kalomsrecipe_4);
    doc_show(ndocid);
};

instance itwrworldmap(c_item) {
    name = "Êàðòà êîëîíèè";
    mainflag = item_kat_docs;
    flags = item_mission;
    visual = "ItWr_Map_01.3DS";
    material = mat_leather;
    scemename = "MAP";
    on_state = useworldmap;
    value = 50;
    description = name;
    text = "Ê ñîæàëåíèþ, îòñóòñòâóåò ÷àñòü ñ þãî-çàïàäíûìè";
    count = 0;
    text[1] = "òåððèòîðèÿìè.";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void useworldmap() {
    var int ndocid;

    ndocid = doc_createmap();
    doc_setlevel(ndocid, "WORLD.ZEN");
    doc_setpages(ndocid, 1);
    doc_setpage(ndocid, 0, "Map_World.tga", 1);
    doc_show(ndocid);
};

instance itwrocmap(c_item) {
    name = "Êàðòà";
    mainflag = item_kat_docs;
    flags = item_mission;
    visual = "ItWr_Map_01.3DS";
    material = mat_leather;
    scemename = "MAP";
    on_state = useocmap;
    value = 40;
    description = "Îáçîð Ñòàðîãî Ëàãåðÿ";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void useocmap() {
    var int ndocid;

    ndocid = doc_createmap();
    doc_setpages(ndocid, 1);
    doc_setpage(ndocid, 0, "Map_OldCamp.tga", 1);
    doc_show(ndocid);
};

instance itwrncmap(c_item) {
    name = "Êàðòà";
    mainflag = item_kat_docs;
    flags = item_mission;
    visual = "ItWr_Map_01.3DS";
    material = mat_leather;
    scemename = "MAP";
    on_state = usencmap;
    value = 40;
    description = "Îáçîð Íîâîãî Ëàãåðÿ";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void usencmap() {
    var int ndocid;

    ndocid = doc_createmap();
    doc_setpages(ndocid, 1);
    doc_setpage(ndocid, 0, "Map_NewCamp.tga", 1);
    doc_show(ndocid);
};

instance itwrpsimap(c_item) {
    name = "Êàðòà";
    mainflag = item_kat_docs;
    flags = item_mission;
    visual = "ItWr_Map_01.3DS";
    material = mat_leather;
    scemename = "MAP";
    on_state = usepsimap;
    value = 40;
    description = "Îáçîð Áîëîòíîãî Ëàãåðÿ";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void usepsimap() {
    var int ndocid;

    ndocid = doc_createmap();
    doc_setpages(ndocid, 1);
    doc_setpage(ndocid, 0, "Map_PSICamp.tga", 1);
    doc_show(ndocid);
};

instance itwrpinup(c_item) {
    name = "Íàáðîñîê";
    mainflag = item_kat_docs;
    flags = item_mission;
    visual = "ItWr_Scroll_01.3DS";
    material = mat_leather;
    scemename = "MAP";
    on_state = usepinup;
    value = 60;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void usepinup() {
    var int ndocid;

    ndocid = doc_createmap();
    doc_setpages(ndocid, 1);
    doc_setpage(ndocid, 0, "Map_PinUp.tga", 1);
    doc_show(ndocid);
};

instance itwrdieverurteilten(c_item) {
    name = "Çàêëþ÷åííûå";
    mainflag = item_kat_none;
    flags = item_mission;
    visual = "ItWrBook.3ds";
    material = mat_leather;
    scemename = "MAP";
    value = 100;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itwr_fire_letter_01(c_item) {
    name = "Çàïå÷àòàííîå ïèñüìî";
    mainflag = item_kat_docs;
    flags = item_mission;
    visual = "ItWr_Scroll_02.3DS";
    material = mat_leather;
    scemename = "MAPSEALED";
    on_state = usefireletter;
    value = 0;
    description = "Ïèñüìî ìàãàì îãíÿ";
    text = "";
    count = 0;
    text[1] = "Ïå÷àòü íå ñðûâàòü!";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = "";
    count[5] = 0;
};

const string fireletter_1 = "Ãëóáîêîóâàæàåìûé ìàñòåð,";

const string fireletter_2 = "Ìû ïîëó÷èëè âàøå ïèñüìî è  ñ áîëüøèì èíòåðåñîì îçíàêîìèëèñü ñ åãî ñîäåðæàíèåì. Èòàê, ìû ñêëîííû ñ÷èòàòü Áðàòñòâî âåñüìà îïàñíûì. Åãî äåÿòåëüíîñòü ñòàâèò ïîä óãðîçó äàëüíåéøåå óñïåøíîå ñîòðóäíè÷åñòâî â ðàìêàõ òîðãîâîãî ñîãëàøåíèÿ, ÷òî, â ñâîþ î÷åðåäü, ÿâëÿåòñÿ ïðÿìîé óãðîçîé êîðîëþ, êîðîëåâñòâó â öåëîì è, íàêîíåö, âàì ëè÷íî. Î÷åâèäíî, âàì ñëåäóåò âûñëàòü ðàçâåä÷èêîâ, ÷òîáû âûÿñíèòü, îò êàêèõ áîãîâ è èç êàêèõ èñòî÷íèêîâ Áðàòñòâî ÷åðïàåò ñâîþ ñèëó. Êàê òîëüêî ýòî áóäåò óñòàíîâëåíî, ìû ïðåäîñòàâèì ñâÿùåííèêàì ðåçóëüòàòû íàøèõ ñîáñòâåííûõ èçûñêàíèé. Òàêèì îáðàçîì, ìû íàäååìñÿ ñîâìåñòíûìè óñèëèÿìè ðàçðåøèòü ñëîæèâøóþñÿ ñèòóàöèþ. Â äàííûé ìîìåíò ìû óæå ïðèâëåêëè âñåõ íàøèõ ïîñëóøíèêîâ ê èññëåäîâàíèþ äðåâíèõ ðóêîïèñåé. Î íàøèõ óñïåõàõ ìû ñîîáùèì äîïîëíèòåëüíî.";

const string fireletter_3 = "È ïóñòü Èííîñ çàùèòèò íàñ";

func void usefireletter() {
    var int ndocid;

    createinvitem(hero, itwr_fire_letter_02);
    ndocid = doc_create();
    doc_setpages(ndocid, 1);
    doc_setpage(ndocid, 0, "letters.TGA", 0);
    doc_setfont(ndocid, -1, font_book_text);
    doc_setmargins(ndocid, -1, 50, 50, 50, 50, 1);
    doc_printline(ndocid, 0, " ");
    doc_printline(ndocid, 0, fireletter_1);
    doc_printline(ndocid, 0, "");
    doc_setfont(ndocid, -1, font_book_text);
    doc_printlines(ndocid, 0, fireletter_2);
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, fireletter_3);
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, "");
    doc_setmargins(ndocid, -1, 200, 50, 50, 50, 1);
    doc_show(ndocid);
};

instance itwr_fire_letter_02(c_item) {
    name = "Îòêðûòîå ïèñüìî";
    mainflag = item_kat_docs;
    flags = item_mission;
    visual = "ItWr_Scroll_01.3DS";
    material = mat_leather;
    scemename = "MAP";
    on_state = usefireletter2;
    value = 0;
    description = "Ïèñüìî ìàãàì îãíÿ";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = "";
    count[5] = 0;
};

const string fireletter2_1 = "Ãëóáîêîóâàæàåìûé ìàñòåð Êñàðäàñ,";

const string fireletter2_2 = "Ìû ïîëó÷èëè âàøå ïèñüìî è  ñ áîëüøèì èíòåðåñîì îçíàêîìèëèñü ñ åãî ñîäåðæàíèåì. Èòàê, ìû ñêëîííû ñ÷èòàòü Áðàòñòâî âåñüìà îïàñíûì. Åãî äåÿòåëüíîñòü ñòàâèò ïîä óãðîçó äàëüíåéøåå óñïåøíîå ñîòðóäíè÷åñòâî â ðàìêàõ òîðãîâîãî ñîãëàøåíèÿ, ÷òî, â ñâîþ î÷åðåäü, ÿâëÿåòñÿ ïðÿìîé óãðîçîé êîðîëþ, êîðîëåâñòâó â öåëîì è, íàêîíåö, âàì ëè÷íî. Î÷åâèäíî, âàì ñëåäóåò âûñëàòü ðàçâåä÷èêîâ, ÷òîáû âûÿñíèòü, îò êàêèõ áîãîâ è èç êàêèõ èñòî÷íèêîâ Áðàòñòâî ÷åðïàåò ñâîþ ñèëó. Ìû ñ÷èòàåì ñâîèì äîëãîì ïîëîæèòü êîíåö ñåêòå è ñîõðàíèòü èõ çíàíèÿ îò ïîïàäàíèÿ â ñëó÷àéíûå ðóêè. Êàê òîëüêî ìû ïîëó÷èì âàø îòâåò, ìû ïåðåäàäèì èíôîðìàöèþ ñâÿùåííèêàì Èííîñà. Â äàííûé ìîìåíò ìû óæå ïðèâëåêëè âñåõ íàøèõ ïîñëóøíèêîâ ê èññëåäîâàíèþ äðåâíèõ ðóêîïèñåé. Î íàøèõ óñïåõàõ ìû ñîîáùèì äîïîëíèòåëüíî.";

const string fireletter2_3 = "È ïóñòü Èííîñ çàùèòèò íàñ";

func void usefireletter2() {
    var int ndocid;

    ndocid = doc_create();
    doc_setpages(ndocid, 1);
    doc_setpage(ndocid, 0, "letters.TGA", 0);
    doc_setfont(ndocid, -1, font_book_text);
    doc_setmargins(ndocid, -1, 50, 50, 50, 50, 1);
    doc_printline(ndocid, 0, " ");
    doc_printline(ndocid, 0, fireletter2_1);
    doc_printline(ndocid, 0, "");
    doc_setfont(ndocid, -1, font_book_text);
    doc_printlines(ndocid, 0, fireletter2_2);
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, fireletter2_3);
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, "");
    doc_setmargins(ndocid, -1, 200, 50, 50, 50, 1);
    doc_show(ndocid);
};

instance itke_gomez_01(c_item) {
    name = "×àøà Ãîìåçà";
    mainflag = item_kat_none;
    flags = 0;
    visual = "ItKe_Key_04.3ds";
    material = mat_metal;
    value = 0;
    description = name;
    text = "Îòêðûâàåò ñóíäóê Ãîìåçà.";
    count = 0;
    text[1] = "Îòêðûâàåò ñêëàä â ïîäâàëàõ Áàðîíîâ.";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = "";
    count[5] = 0;
};

instance itkey_rb_01(c_item) {
    name = "×àøà Ëîðäà";
    mainflag = item_kat_none;
    flags = 0;
    visual = "ItKe_Key_01.3ds";
    material = mat_metal;
    value = 0;
    description = name;
    text = "Îòêðûâàåò ñóíäóê Ëîðäà.";
    count = 0;
};

instance itke_ob_smith_01(c_item) {
    name = "Æåëåçíûé êëþ÷";
    mainflag = item_kat_none;
    flags = 0;
    visual = "ItKe_Key_02.3ds";
    material = mat_metal;
    value = 0;
    description = name;
    text = "Îòêðûâàåò äâåðü ñêëàäà êóçíåöà.";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = "";
    count[5] = 0;
};

instance itke_storage_01(c_item) {
    name = "Êëþ÷ ê ñêëàäó";
    mainflag = item_kat_none;
    flags = 0;
    visual = "ItKe_Key_03.3ds";
    material = mat_metal;
    value = 0;
    description = name;
    text = "Îòêðûâàåò îñíîâíóþ äâåðü â ñêëàä";
    count = 0;
    text[1] = "â ïîäâàëàõ Áàðîíîâ.";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = "";
    count[5] = 0;
};

instance itke_om_01(c_item) {
    name = "Êëþ÷ ê ñóíäóêó";
    mainflag = item_kat_none;
    flags = 0;
    visual = "ItKe_Key_01.3ds";
    material = mat_metal;
    value = 0;
    description = name;
    text = "Ñêëàä Ñàíòèíî.";
    count = 0;
    text[1] = "Âåðõíÿÿ ðûíî÷íàÿ ïëîùàäü.";
    count[1] = 0;
    text[2] = "Ñòàðàÿ Øàõòà";
    count[2] = 0;
};

instance itke_om_02(c_item) {
    name = "Êëþ÷ ê ñóíäóêó";
    mainflag = item_kat_none;
    flags = 0;
    visual = "ItKe_Key_02.3ds";
    material = mat_metal;
    value = 0;
    description = name;
    text = "Îòêðûâàåò ñóíäóê Àðîíà";
    count = 0;
    text[1] = "â Ñòàðîé Øàõòå.";
    count[1] = 0;
};

instance itke_om_03(c_item) {
    name = "Êëþ÷ ê ñóíäóêó";
    mainflag = item_kat_none;
    flags = 0;
    visual = "ItKe_Key_03.3ds";
    material = mat_metal;
    value = 0;
    description = name;
    text = "Îòêðûâàåò ñóíäóêè íà";
    count = 0;
    text[1] = "ñêëàäå â Ñòàðîé Øàõòå.";
    count[1] = 0;
};

instance itke_om_04(c_item) {
    name = "Êëþ÷ ê ñóíäóêó";
    mainflag = item_kat_none;
    flags = 0;
    visual = "ItKe_Key_04.3ds";
    material = mat_metal;
    value = 0;
    description = name;
    text = "Ñêëàä Àëüáåðòî.";
    count = 0;
    text[1] = "Íèæíÿÿ ðûíî÷íàÿ ïëîùàäü";
    count[1] = 0;
};

instance itfo_om_beer_01(c_item) {
    name = "Êðåïêîå ïèâî";
    mainflag = item_kat_food;
    flags = item_multi;
    visual = "ItFo_Beer_01.3ds";
    material = mat_glas;
    scemename = "POTION";
    on_state = usestarkbeer;
    value = 30;
    description = name;
    text = name_bonus_hp;
    count = 6;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void usestarkbeer() {
    npc_changeattribute(self, atr_hitpoints, 6);
};

var int riddle1;

var int riddle2;

var int riddle3;

var int riddle4;

var int riddle5;

var int riddle6;

instance theriddle1(c_item) {
    name = "Ñòàðàÿ êíèãà";
    mainflag = item_kat_docs;
    flags = item_mission;
    visual = "ItWr_Book_02_03.3ds";
    material = mat_leather;
    scemename = "MAP";
    on_state = usetheriddle1;
    value = 50;
    description = "Õðîìàíèí";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

const string theriddle1_1 = "Õðîìàíèí";

const string theriddle1_2 = "Òîò, êòî ðåøèëñÿ îòâåðãíóòü âñå ñîáëàçíû è âñòàòü íà ïóòü äîáðîäåòåëè, äîëæåí çíàòü, ãäå ñîêðûò èñòî÷íèê ìîåé ñèëû. Ýòî ïîìîæåò åìó ïîðâàòü öåïè, êîòîðûìè ýòîò ìèð ñêîâûâàåò åãî, è äîêàçàòü, ÷òî îí äîñòîèò ïîëó÷èòü Õðîìàíèí.";

const string theriddle1_3 = "Ìóäðåö ðàññìàòðèâàåò ñèòóàöèþ â öåëîì, ïðåæäå ÷åì ïðèñòóïàòü ê ñëåäóþùåìó çàäàíèþ.";

func void usetheriddle1() {
    var int ndocid;

    ndocid = doc_create();
    doc_setpages(ndocid, 2);
    doc_setpage(ndocid, 0, "Book_Mage_L.tga", 0);
    doc_setpage(ndocid, 1, "Book_Mage_R.tga", 0);
    doc_setfont(ndocid, -1, font_book_heading);
    doc_setmargins(ndocid, 0, 275, 20, 30, 20, 1);
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, theriddle1_1);
    doc_printline(ndocid, 0, "-----------");
    doc_setfont(ndocid, -1, font_book_text);
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, theriddle1_2);
    doc_setmargins(ndocid, -1, 30, 20, 275, 20, 1);
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printlines(ndocid, 1, theriddle1_3);
    doc_show(ndocid);
    if (riddle1 == false) {
        log_createtopic(theriddle_log, log_mission);
        log_settopicstatus(theriddle_log, log_running);
        b_logentry(theriddle_log, theriddle_log_1);
        wld_insertitem(theriddle2 /*4650*/, "CASTLE_TOWER_TOP");
        riddle1 = true;
    };
};

instance theriddle2(c_item) {
    name = "Ñòàðàÿ êíèãà";
    mainflag = item_kat_docs;
    flags = item_mission;
    visual = "ItWr_Book_02_03.3ds";
    material = mat_leather;
    scemename = "MAP";
    on_state = usetheriddle2;
    value = 50;
    description = "Õðîìàíèí 2";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

const string theriddle2_1 = "Õðîìàíèí";

const string theriddle2_2 = "Ïðèøåäøèå èç ãëóáèí âðåìåí âèäåíèÿ Õðîìàíèíà îòêðûëè ìíå ãëàçà. È íè÷òî íå ìîæåò ïîêîëåáàòü ìîþ âåðó â íèõ, ïîòîìó êàê çàòðîíóëè îíè ñàìîå ìîå ñåðäöå.";

const string theriddle2_3 = "Ðàçäåëåííîå âîññîåäèíèòñÿ âíîâü, åñëè íà êîðîòêîå âðåìÿ ðàçëó÷åíî áóäåò ñèëüíî.";

func void usetheriddle2() {
    var int ndocid;

    ndocid = doc_create();
    doc_setpages(ndocid, 2);
    doc_setpage(ndocid, 0, "Book_Mage_L.tga", 0);
    doc_setpage(ndocid, 1, "Book_Mage_R.tga", 0);
    doc_setfont(ndocid, -1, font_book_heading);
    doc_setmargins(ndocid, 0, 275, 20, 30, 20, 1);
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, theriddle2_1);
    doc_printline(ndocid, 0, "-----------");
    doc_setfont(ndocid, -1, font_book_text);
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, theriddle2_2);
    doc_setmargins(ndocid, -1, 30, 20, 275, 20, 1);
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printlines(ndocid, 1, theriddle2_3);
    doc_show(ndocid);
    if (riddle2 == false) {
        b_givexp(300);
        b_logentry(theriddle_log, theriddle_log_2);
        ai_output(self, self, "Info_CorKalom_BringBook_Success_15_01"); //ß íàøåë êíèãó.
        wld_insertitem(theriddle3 /*4656*/, "FP_SLEEP_OW_BLOODFLY_01_02");
        riddle2 = true;
    };
};

instance theriddle3(c_item) {
    name = "Ñòàðàÿ êíèãà";
    mainflag = item_kat_docs;
    flags = item_mission;
    visual = "ItWr_Book_02_03.3ds";
    material = mat_leather;
    scemename = "MAP";
    on_state = usetheriddle3;
    value = 50;
    description = "Õðîìàíèí 3";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

const string theriddle3_1 = "Õðîìàíèí";

const string theriddle3_2 = "Î, Áîãè! Çà ÷òî æå ÿ, ïðîñòîé ñìåðòíûé, óäîñòîèëñÿ ÷åñòè ïîëó÷èòü ñòîëü âåëèêîå íàñëåäèå. Ìåíÿ ñòðàøèò îäíà ìûñëü î òîì, ÷òî ÿ ìîãó âíîâü ýòî ïîòåðÿòü, ñîâåðøèâ íåäîñòîéíûé ïîñòóïîê.";

const string theriddle3_3 = "Ìóäðûé ðûáàê âðåìÿ îò âðåìåíè èùåò óäà÷è íà äðóãîé ñòîðîíå îçåðà.";

func void usetheriddle3() {
    var int ndocid;

    ndocid = doc_create();
    doc_setpages(ndocid, 2);
    doc_setpage(ndocid, 0, "Book_Mage_L.tga", 0);
    doc_setpage(ndocid, 1, "Book_Mage_R.tga", 0);
    doc_setfont(ndocid, -1, font_book_heading);
    doc_setmargins(ndocid, 0, 275, 20, 30, 20, 1);
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, theriddle3_1);
    doc_printline(ndocid, 0, "-----------");
    doc_setfont(ndocid, -1, font_book_text);
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, theriddle3_2);
    doc_setmargins(ndocid, -1, 30, 20, 275, 20, 1);
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printlines(ndocid, 1, theriddle3_3);
    doc_show(ndocid);
    if (riddle3 == false) {
        b_givexp(500);
        b_logentry(theriddle_log, theriddle_log_3);
        ai_output(self, self, "Info_CorKalom_BringBook_Success_15_01"); //ß íàøåë êíèãó.
        wld_insertitem(theriddle4 /*4662*/, "FP_SLEEP_OW_LURKER_NC_LAKE_02");
        riddle3 = true;
    };
};

instance theriddle4(c_item) {
    name = "Ñòàðàÿ êíèãà";
    mainflag = item_kat_docs;
    flags = item_mission;
    visual = "ItWr_Book_02_03.3ds";
    material = mat_leather;
    scemename = "MAP";
    on_state = usetheriddle4;
    value = 50;
    description = "Õðîìàíèí 4";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

const string theriddle4_1 = "Õðîìàíèí";

const string theriddle4_2 = "ß è íå ñìåþ íàäåÿòüñÿ, ÷òî îäíàæäû óâèæó Õðîìàíèí. Äíè ïóñòûõ ñòðàíñòâèé è ñòåíàíèé ìèíîâàëè. Òàê ëåãêî áóäåò äîñòèãíóòü àáñîëþòíîãî ñîâåðøåíñòâà. Ìíå îñòàëîñü ñîâñåì íåìíîãî!";

const string theriddle4_3 = "Äàâíî çàáûòû ïîñòóïêè òåõ, êòî íåêîãäà áûë â êîìàíäå.";

func void usetheriddle4() {
    var int ndocid;

    ndocid = doc_create();
    doc_setpages(ndocid, 2);
    doc_setpage(ndocid, 0, "Book_Mage_L.tga", 0);
    doc_setpage(ndocid, 1, "Book_Mage_R.tga", 0);
    doc_setfont(ndocid, -1, font_book_heading);
    doc_setmargins(ndocid, 0, 275, 20, 30, 20, 1);
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, theriddle4_1);
    doc_printline(ndocid, 0, "-----------");
    doc_setfont(ndocid, -1, font_book_text);
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, theriddle4_2);
    doc_setmargins(ndocid, -1, 30, 20, 275, 20, 1);
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printlines(ndocid, 1, theriddle4_3);
    doc_show(ndocid);
    if (riddle4 == false) {
        b_givexp(700);
        b_logentry(theriddle_log, theriddle_log_4);
        ai_output(self, self, "Info_CorKalom_BringBook_Success_15_01"); //ß íàøåë êíèãó.
        wld_insertitem(theriddle5 /*4668*/, "LOCATION_25_01");
        riddle4 = true;
    };
};

instance theriddle5(c_item) {
    name = "Ñòàðàÿ êíèãà";
    mainflag = item_kat_docs;
    flags = item_mission;
    visual = "ItWr_Book_02_03.3ds";
    material = mat_leather;
    scemename = "MAP";
    on_state = usetheriddle5;
    value = 50;
    description = "Õðîìàíèí 5";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

const string theriddle5_1 = "Õðîìàíèí";

const string theriddle5_2 = "Íî ÿ íå äîëæåí èäòè ïî ýòîé òðîïå â îäèíî÷åñòâå. ß ïîäåëþñü ñâîåé ñèëîé ñ òåìè äîñòîéíûìè, êòî ïðèäåò êî ìíå, êòî íàéäåò ìåíÿ. Íàäåþñü, îíè ïðèäóò ñêîðî";

const string theriddle5_3 = "Òû íàéäåøü ìåíÿ òàì, ãäå âñå ýòî íà÷àëîñü.";

func void usetheriddle5() {
    var int ndocid;
    var c_npc riddler;

    ndocid = doc_create();
    doc_setpages(ndocid, 2);
    doc_setpage(ndocid, 0, "Book_Mage_L.tga", 0);
    doc_setpage(ndocid, 1, "Book_Mage_R.tga", 0);
    doc_setfont(ndocid, -1, font_book_heading);
    doc_setmargins(ndocid, 0, 275, 20, 30, 20, 1);
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, theriddle5_1);
    doc_printline(ndocid, 0, "-----------");
    doc_setfont(ndocid, -1, font_book_text);
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, theriddle5_2);
    doc_setmargins(ndocid, -1, 30, 20, 275, 20, 1);
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printlines(ndocid, 1, theriddle5_3);
    doc_show(ndocid);
    if (riddle5 == false) {
        b_givexp(850);
        b_logentry(theriddle_log, theriddle_log_5);
        ai_output(self, self, "Info_CorKalom_BringBook_Success_15_01"); //ß íàøåë êíèãó.
        wld_insertnpc(bau_940_riddler /*7156*/, "");
        riddler = hlp_getnpc(bau_940_riddler);
        npc_changeattribute(riddler, atr_hitpoints, -riddler.attribute[atr_hitpoints_max] /*1*/);
        riddle5 = true;
    };
};

instance theriddle6(c_item) {
    name = "Ñòàðàÿ êíèãà";
    mainflag = item_kat_docs;
    flags = item_mission;
    visual = "ItWr_Book_02_03.3ds";
    material = mat_leather;
    scemename = "MAP";
    on_state = usetheriddle6;
    value = 50;
    description = "Õðîìàíèí 5";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

const string theriddle6_1 = "Õðîìàíèí";

func void usetheriddle6() {
    var int ndocid;

    ndocid = doc_create();
    doc_setpages(ndocid, 2);
    doc_setpage(ndocid, 0, "Book_Mage_L.tga", 0);
    doc_setpage(ndocid, 1, "Book_Mage_R.tga", 0);
    doc_setfont(ndocid, -1, font_book_heading);
    doc_setmargins(ndocid, 0, 275, 20, 30, 20, 1);
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, theriddle6_1);
    doc_printline(ndocid, 0, "-----------");
    doc_setfont(ndocid, -1, font_book_text);
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, "");
    doc_setmargins(ndocid, -1, 30, 20, 275, 20, 1);
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_show(ndocid);
    if (riddle6 == false) {
        b_givexp(1000);
        b_logentry(theriddle_log, theriddle_log_6);
        log_settopicstatus(theriddle_log, log_success);
        ai_output(self, self, "theriddle_tot_15_01"); //Äóìàþ, ÿ íàøåë åãî. Êîðìèò êðûñ... Ààðãõ... Òû óáèë îäíîãî èç íàøèõ. Ýòî áûëà òâîÿ ïîñëåäíÿÿ îøèáêà!
        wld_insertnpc(skeletonmage /*6829*/, "OW_FOGDUNGEON_36_MOVEMENT");
        wld_insertnpc(skeleton /*6825*/, "OW_FOGDUNGEON_36_MOVEMENT");
        wld_insertnpc(skeletonwarrior /*6828*/, "OW_FOGDUNGEON_36_MOVEMENT");
        wld_insertnpc(skeleton /*6825*/, "OW_FOGDUNGEON_36_MOVEMENT2");
        wld_insertnpc(skeletonscout /*6827*/, "OW_FOGDUNGEON_36_MOVEMENT2");
        wld_insertnpc(skeletonwarrior /*6828*/, "OW_FOGDUNGEON_37");
        wld_insertnpc(skeletonmage /*6829*/, "OW_FOGDUNGEON_37");
        riddle6 = true;
    };
};

instance itwrfocusmappsi(c_item) {
    name = "Êàðòà Þ'Áåðèîíà ê þíèòîðó";
    mainflag = item_kat_docs;
    flags = item_mission;
    visual = "ItWr_Map_01.3ds";
    material = mat_leather;
    scemename = "MAP";
    on_state = usefocusmappsi;
    value = 15;
    description = name;
    text = "";
    count = 0;
    text[1] = "Ýòà êàðòà ïîêàçûâàåò ïóòü ê þíèòîðó, ";
    count[1] = 0;
    text[2] = "êîòîðûé íóæåí Þ'Áåðèîíó äëÿ âûçîâà";
    count[2] = 0;
    text[3] = "Ñïÿùåãî.";
    count[3] = 0;
};

func void usefocusmappsi() {
    var int ndocid;

    ndocid = doc_createmap();
    doc_setlevel(ndocid, "WORLD.ZEN");
    doc_setpages(ndocid, 1);
    doc_setpage(ndocid, 0, "Map_World_FocusPSI.tga", 1);
    doc_show(ndocid);
};

instance focus_1(c_item) {
    name = "Þíèòîð ñî ñêàëû ó îêåàíà";
    mainflag = item_kat_none;
    flags = item_mission;
    hp = 1;
    hp_max = 1;
    weight = 1;
    visual = "ItMi_Focus_01.3ds";
    material = mat_stone;
    value = 1;
    description = name;
    text = "";
    count = 0;
    text[1] = "Îäèí èç ïÿòè þíèòîðîâ, èñïîëüçîâàâøèõñÿ";
    count[1] = 0;
    text[2] = "äëÿ ñîçäàíèÿ ìàãè÷åñêîãî áàðüåðà.";
    count[2] = 0;
};

instance itmi_stuff_gearwheel_01(c_item) {
    name = "Øåñòåðíÿ";
    mainflag = item_kat_none;
    flags = item_mission;
    visual = "ItMi_Stuff_Gearwheel_01.3ds";
    material = mat_metal;
    value = 0;
    description = name;
    text = "Ýòî øåñòåðíÿ èç ñëîìàííîãî ïðåññà,";
    count = 0;
    text[1] = "íàõîäÿùåãîñÿ â áîêîâîì òóííåëå";
    count[1] = 0;
    text[2] = "Ñòàðîé Øàõòû.";
    count[2] = 0;
};

instance itat_crawlerqueen(c_item) {
    name = "ßéöî ïîëçóíà";
    mainflag = item_kat_none;
    flags = item_mission | item_multi;
    visual = "ItAt_Crawlerqueen.3ds";
    material = mat_leather;
    value = 100;
    description = name;
    text = "Òàêèå ÿéöà îòêëàäûâàåò êîðîëåâà";
    count = 0;
    text[1] = "ïîëçóíîâ.";
    count[1] = 0;
    text[2] = "Â íèõ ñîäåðæèòñÿ òî æå âåùåñòâî, ÷òî è â ";
    count[2] = 0;
    text[3] = "÷åëþñòÿõ ïîëçóíîâ, íî êîíöåíòðàöèÿ åãî âûøå.";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itwrfokusbuch(c_item) {
    name = "Àëüìàíàõ";
    mainflag = item_kat_docs;
    flags = item_mission;
    visual = "ItWr_Book_02_03.3ds";
    material = mat_leather;
    scemename = "MAP";
    on_state = useitwrfokusbuch;
    value = 0;
    description = name;
    text = "Ýòà ñòàðèííàÿ êíèãà ñîäåðæèò ìàãè÷åñêèå";
    count = 0;
    text[1] = "ôîðìóëû, îòíîñÿùèåñÿ ê èñïîëüçîâàíèþ";
    count[1] = 0;
    text[2] = "òàê íàçûâàåìûõ êàìíåé-þíèòîðîâ.";
    count[2] = 0;
};

const string itwrfokusbuch_1 = "Ãëàâà 23";

const string itwrfokusbuch_2 = "Ôîêóñèðîâàíèå ñèë";

const string itwrfokusbuch_3 = "Ñèëû ïðîäîëæàþò íàêàïëèâàòüñÿ â êàìíå, äî òåõ ïîð ïîêà ñëîâà ìàãà íå îñâîáîäÿò èõ. Áóäåò ëè ýòî ïðîäîëæèòåëüíîå äåéñòâèå èëè åäèíûé, ìîùíûé âûáðîñ - ðåøàòü ìàãó.";

const string itwrfokusbuch_4 = "Íî ïîñëå òîãî êàê ñèëû âûñâîáîæäåíû, þíèòîð ñòàíîâèòñÿ âñåãî ëèøü ïóñòîé ñêîðëóïîé.";

const string itwrfokusbuch_5 = "Ñàìè ñëîâà, îñâîáîæäàþùèå ñèëó þíèòîðà, íûíå äîñòóïíû ìíîãèì. Ê ñîæàëåíèþ, äàæå íàóêà íàäåëåíèÿ íîâîãî àðòåôàêòà ìàãè÷åñêîé ñèëîé â íàøè âðåìåíà ñòàëà ñêîðåå ðåìåñëîì, íåæåëè ñåêðåòíûì çíàíèåì.";

const string itwrfokusbuch_6 = "Íî âîò òî, êàê ñíîâà çàðÿäèòü þíèòîðû - ýòîò ñåêðåò ïî-ïðåæíåìó çíàþò ëèøü åäèíèöû. Ýòà äðåâíÿÿ ôîðìóëà ñëóæèò çíàêîì, îòëè÷àþùèì èñòèííûõ ìàãîâ.";

const string itwrfokusbuch_7 = "À òåïåðü, î èùóùèé çíàíèé, îòêðîé ñâîé ðàçóì äëÿ ñëîâ äðåâíåé ñèëû.";

func void useitwrfokusbuch() {
    var int ndocid;

    if ((wissen_almanach == false) && npc_isplayer(self)) {
        b_givexp(50);
        wissen_almanach = true;
    };
    ndocid = doc_create();
    doc_setpages(ndocid, 2);
    doc_setpage(ndocid, 0, "Book_Mage_L.tga", 0);
    doc_setpage(ndocid, 1, "Book_Mage_R.tga", 0);
    doc_setfont(ndocid, -1, font_book_heading);
    doc_setmargins(ndocid, 0, 275, 20, 30, 20, 1);
    doc_printline(ndocid, 0, itwrfokusbuch_1);
    doc_printline(ndocid, 0, "");
    doc_setfont(ndocid, -1, font_book_text);
    doc_printline(ndocid, 0, itwrfokusbuch_2);
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, itwrfokusbuch_3);
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, itwrfokusbuch_4);
    doc_setmargins(ndocid, -1, 30, 20, 275, 20, 1);
    doc_printline(ndocid, 1, "");
    doc_printlines(ndocid, 1, itwrfokusbuch_5);
    doc_printline(ndocid, 1, "");
    doc_printlines(ndocid, 1, itwrfokusbuch_6);
    doc_printline(ndocid, 1, "");
    doc_printlines(ndocid, 1, itwrfokusbuch_7);
    doc_show(ndocid);
};

instance orkparchmentone(c_item) {
    name = "Ïîëîâèíà ïåðãàìåíòà";
    mainflag = item_kat_docs;
    flags = item_mission;
    hp = 5;
    hp_max = 5;
    weight = 1;
    visual = "ItWr_Scroll_02.3ds";
    material = mat_leather;
    scemename = "MAP";
    value = 3;
    description = name;
    text = "×àñòü äðåâíåãî ïåðãàìåíòà.";
    count = 0;
    text[1] = "Ïîõîæå, ÷òî íèæíÿÿ ÷àñòü áûëà îòîðâàíà.";
    count[1] = 0;
    text[2] = "Ïèñüìåíà íàïîìèíàþò ðóíû íà ñòåíàõ";
    count[2] = 0;
    text[3] = "ïåùåðû.";
    count[3] = 0;
};

instance orkparchmenttwo(c_item) {
    name = "Ïîëîâèíà ïåðãàìåíòà";
    mainflag = item_kat_docs;
    flags = item_mission;
    hp = 5;
    hp_max = 5;
    weight = 1;
    visual = "ItWr_Scroll_02.3ds";
    material = mat_leather;
    scemename = "MAP";
    value = 3;
    description = name;
    text = "×àñòü äðåâíåãî ïåðãàìåíòà.";
    count = 0;
    text[1] = "Ïîõîæå, ÷òî âåðõíÿÿ ÷àñòü áûëà îòîðâàíà.";
    count[1] = 0;
    text[2] = "Ïèñüìåíà íàïîìèíàþò ðóíû íà ñòåíàõ";
    count[2] = 0;
    text[3] = "ïåùåðû.";
    count[3] = 0;
};

instance itke_psi_kalom_01(c_item) {
    name = "Êëþ÷";
    mainflag = item_kat_none;
    flags = item_mission;
    visual = "ItKe_Key_04.3ds";
    material = mat_metal;
    value = 0;
    description = "Êëþ÷ ê ëàáîðàòîðèè";
    text = "Îòêðûâàåò ñóíäóê â àëõèìè÷åñêîé ëàáîðàòîðèè";
    count = 0;
    text[1] = "â Áîëîòíîì Ëàãåðå.";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = "";
    count[5] = 0;
};

instance itwrfocimap(c_item) {
    name = "Êàðòà Ñàòóðàñà ê þíèòîðó";
    mainflag = item_kat_docs;
    flags = item_mission;
    visual = "ItWr_Map_01.3DS";
    material = mat_leather;
    scemename = "MAP";
    on_state = usefocimap;
    value = 15;
    description = name;
    text = "Âåðøèíû ïåíòàãðàììû óêàçûâàþò ðàñïîëîæåíèå";
    count = 0;
    text[1] = "âñåõ ïÿòè êàìíåé-þíèòîðîâ, êîòîðûå";
    count[1] = 0;
    text[2] = "èñïîëüçîâàëèñü ïðè ñîçäàíèè áàðüåðà. Êàðòà";
    count[2] = 0;
    text[3] = "ñòàðàÿ, è íå èñêëþ÷åíî, ÷òî êàìíè ìîãëè";
    count[3] = 0;
    text[4] = "áûòü ïåðåíåñåíû ñ òåõ ïîð";
    count[4] = 0;
    text[5] = "íà äðóãèå ìåñòà.";
    count[5] = 0;
};

func void usefocimap() {
    var int ndocid;

    ndocid = doc_createmap();
    doc_setlevel(ndocid, "WORLD.ZEN");
    doc_setpages(ndocid, 1);
    doc_setpage(ndocid, 0, "Map_World_Foki.tga", 1);
    doc_show(ndocid);
};

instance itwr_troll_01(c_item) {
    name = "Ñòðàíèöà äíåâíèêà";
    mainflag = item_kat_docs;
    flags = item_mission;
    visual = "ItWr_Scroll_01.3DS";
    material = mat_leather;
    scemename = "MAP";
    on_state = usetroll;
    value = 0;
    description = name;
    text = "";
    count = 0;
    text[1] = "Ñòðàíèöà íàñòîëüêî èñòåðòà, ÷òî áóêâû";
    count[1] = 0;
    text[2] = "åäâà ðàçëè÷èìû.";
    count[2] = 0;
    text[3] = "Ñóäÿ ïî âñåìó, àâòîð áûë ";
    count[3] = 0;
    text[4] = "îõîòíèêîì íà òðîëëåé.";
    count[4] = 0;
};

const string troll_1 = "Äåíü 169";

const string troll_2 = "ß ïåðåïðîáîâàë âñå ñðåäñòâà. Ñàìàÿ ëó÷øàÿ ñòàëü íå îñòàâëÿåò íà òðîëëå íè öàðàïèíû, à ñòðåëû ïîïðîñòó îòñêàêèâàþò, áóäòî øêóðà ó íåãî èç êàìíÿ. Íî ñåãîäíÿ ÿ ñäåëàþ ýòî. ß óâåðåí. Áîãè áëàãîâîëÿò êî ìíå. ";

const string troll_3 = "ß èñïîëüçóþ ìàãè÷åñêèé ñâèòîê, êîòîðûé êóïèë â Õîðèíèñå. Îí îáîøåëñÿ ìíå â 50 ìîíåò, íî êàê òîëüêî ÿ ïðîâåðíó ýòî äåëüöå, ðàñõîäû ñ ëèõâîé îêóïÿòñÿ.";

const string troll_4 = "Ñåãîäíÿ ÿ óáüþ òðîëëÿ.";

func void usetroll() {
    var int ndocid;

    ndocid = doc_create();
    doc_setpages(ndocid, 1);
    doc_setpage(ndocid, 0, "letters.TGA", 0);
    doc_setmargins(ndocid, -1, 50, 50, 50, 50, 1);
    doc_setfont(ndocid, -1, font_book_heading);
    doc_printline(ndocid, 0, troll_1);
    doc_setfont(ndocid, -1, font_book_text);
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, troll_2);
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, troll_3);
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, troll_4);
    doc_show(ndocid);
};

instance focus_2(c_item) {
    name = "Þíèòîð èç êàíüîíà òðîëëÿ";
    mainflag = item_kat_none;
    flags = item_mission;
    hp = 1;
    hp_max = 1;
    weight = 1;
    visual = "ItMi_Focus_01.3ds";
    material = mat_stone;
    value = 1;
    description = name;
    text = "";
    count = 0;
    text[1] = "Îäèí èç ïÿòè þíèòîðîâ, èñïîëüçîâàâøèõñÿ";
    count[1] = 0;
    text[2] = "äëÿ ñîçäàíèÿ ìàãè÷åñêîãî áàðüåðà.";
    count[2] = 0;
};

instance itke_berg_01(c_item) {
    name = "Êëþ÷ ê ñóíäóêó";
    mainflag = item_kat_none;
    flags = item_mission;
    visual = "ItKe_Key_01.3ds";
    material = mat_metal;
    value = 0;
    description = name;
    text = "Ñòàðûé ôîðò.";
    count = 0;
    text[1] = "Ñòàðûé è ðæàâûé êëþ÷ ê ñóíäóêó.";
    count[1] = 0;
    text[2] = "der zu einer Truhe gehört";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = "";
    count[5] = 0;
};

instance itwr_urkunde_01(c_item) {
    name = "Ñåðòèôèêàò";
    mainflag = item_kat_docs;
    flags = item_mission;
    visual = "ItWr_Scroll_01.3DS";
    material = mat_leather;
    scemename = "MAP";
    on_state = useurkunde;
    value = 15;
    description = "Ïðàâî ñîáñòâåííîñòè";
    text = "Ïðåäúÿâèòåëü ýòîãî äîêóìåíòà";
    count = 0;
    text[1] = "ìîæåò çàÿâèòü î ñâîèõ ïðàâàõ";
    count[1] = 0;
    text[2] = "íà ôîðò è ïðèëåãàþùèå îáëàñòè.";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = "Ñòîèìîñòü                               400 ôóíòîâ çîëîòîì";
    count[5] = 0;
};

const string urkunde_1 = "Ñåðòèôèêàò";

const string urkunde_2 = "ß, Áåðãìàð, ãðàô Çàïàäíûõ Ïîëåé, âëàñòüþ, âðó÷åííîé ìíå ëîðäîì Òèìîðèçèíà, ÷òî âîêðóã Õîðèíèñà, çàÿâëÿþ  ÷òî ÿ  îòäàòü è ïðîäàòü  ïðåäúÿâèòåëþ ñåãî äîêóìåíòà  è äîìó Èííîñà ãîðíûé ôîðò (âêóïå ñ ïîëîæåííîé ìíå äåñÿòèíîé è äîõîäàìè îò òàìîøíèõ øàõò) çà 400 åäèíèö çîëîòà.";

func void useurkunde() {
    var int ndocid;

    ndocid = doc_create();
    doc_setpages(ndocid, 1);
    doc_setpage(ndocid, 0, "letters.TGA", 0);
    doc_setmargins(ndocid, -1, 50, 50, 50, 50, 1);
    doc_setfont(ndocid, -1, font_book_heading);
    doc_printline(ndocid, 0, urkunde_1);
    doc_setfont(ndocid, -1, font_book_text);
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, urkunde_2);
    doc_show(ndocid);
};

instance fakescroll(c_item) {
    name = "Ïèñüìî";
    mainflag = item_kat_docs;
    flags = item_mission;
    hp = 5;
    hp_max = 5;
    weight = 1;
    visual = "ItWr_Scroll_01.3ds";
    material = mat_leather;
    scemename = "MAPSEALED";
    value = 0;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = "";
    count[5] = 0;
};

instance focus_3(c_item) {
    name = "Þíèòîð èç ãîðíîãî ôîðòà";
    mainflag = item_kat_none;
    flags = item_mission;
    hp = 1;
    hp_max = 1;
    weight = 1;
    visual = "ItMi_Focus_01.3ds";
    material = mat_stone;
    value = 1;
    description = name;
    text = "";
    count = 0;
    text[1] = "Îäèí èç ïÿòè þíèòîðîâ, èñïîëüçîâàâøèõñÿ";
    count[1] = 0;
    text[2] = "äëÿ ñîçäàíèÿ ìàãè÷åñêîãî áàðüåðà.";
    count[2] = 0;
};

instance itke_focus4(c_item) {
    name = "Êëþ÷";
    mainflag = item_kat_none;
    flags = item_mission;
    visual = "ItKe_Key_01.3ds";
    material = mat_metal;
    value = 3;
    description = name;
    text = "";
    count = 0;
    text[1] = "Ýòî êëþ÷ èç ïåùåðû, ðàñïîëîæåííîé";
    count[1] = 0;
    text[2] = "íåïîäàëåêó îò ðóèí ìîíàñòûðÿ.";
    count[2] = 0;
};

instance focus_4(c_item) {
    name = "Þíèòîð èç ðàçðóøåííîãî ìîíàñòûðÿ";
    mainflag = item_kat_none;
    flags = item_mission;
    hp = 1;
    hp_max = 1;
    weight = 1;
    visual = "ItMi_Focus_01.3ds";
    material = mat_stone;
    value = 1;
    description = name;
    text = "";
    count = 0;
    text[1] = "Îäèí èç ïÿòè þíèòîðîâ, èñïîëüçîâàâøèõñÿ";
    count[1] = 0;
    text[2] = "äëÿ ñîçäàíèÿ ìàãè÷åñêîãî áàðüåðà.";
    count[2] = 0;
};

instance itmi_orctalisman(c_item) {
    name = "Îðî÷èé òàëèñìàí";
    mainflag = item_kat_magic;
    flags = item_amulet | item_mission;
    visual = "ItMi_Amulet_UluMulu_01.3ds";
    visual_skin = 0;
    material = mat_metal;
    on_equip = equip_orctalisman;
    on_unequip = unequip_orctalisman;
    value = 1000;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_prot_fire;
    count[2] = 20;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void equip_orctalisman() {
    self.protection[prot_fire] /*3*/ += 20;
};

func void unequip_orctalisman() {
    self.protection[prot_fire] /*3*/ -= 20;
};

instance itke_focus5(c_item) {
    name = "Êëþ÷";
    mainflag = item_kat_none;
    flags = item_mission;
    visual = "ItKe_Key_02.3ds";
    material = mat_metal;
    value = 3;
    description = name;
    text = "";
    count = 0;
    text[1] = "Ýòî êëþ÷ èç ñêëåïà";
    count[1] = 0;
    text[2] = "ïîä êîëüöîì êàìíåé.";
    count[2] = 0;
};

instance focus_5(c_item) {
    name = "Þíèòîð èç-ïîä êîëüöà êàìíåé";
    mainflag = item_kat_none;
    flags = item_mission;
    hp = 1;
    hp_max = 1;
    weight = 1;
    visual = "ItMi_Focus_01.3ds";
    material = mat_stone;
    value = 1;
    description = name;
    text = "";
    count = 0;
    text[1] = "Îäèí èç ïÿòè þíèòîðîâ, èñïîëüçîâàâøèõñÿ";
    count[1] = 0;
    text[2] = "äëÿ ñîçäàíèÿ ìàãè÷åñêîãî áàðüåðà.";
    count[2] = 0;
};

instance itwr_golembook1(c_item) {
    name = "Àðêàíóì Ãîëóì - Òîì ïåðâûé";
    mainflag = item_kat_docs;
    flags = item_mission;
    visual = "ItWr_Book_02_05.3ds";
    material = mat_leather;
    scemename = "MAP";
    on_state = usegolembook1;
    value = 100;
    description = "";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = "";
    count[5] = 0;
};

const string golembook1_1 = "Àðêàíóì Ãîëóì - Òîì ïåðâûé";

const string golembook1_2 = "(Ìàãèÿ ãîëåìîâ)";

const string golembook1_3 = "Òîëüêî òîò, êòî ñàì õîòü ðàç ñòàëêèâàëñÿ ñ ýòèìè ñîçäàíèÿìè, áåðóùèìè ñâîå íà÷àëî îò ïåðâîðîäíûõ ýëåìåíòîâ, ïîèñòèíå ïîíèìàåò ãëóáèíó óâàæåíèÿ, êîòîðûì ïðîíèêàåòñÿ ñòîëêíóâøèéñÿ ñ íèìè ïóòåøåñòâåííèê.";

const string golembook1_4 = "Êàìåííûé ãîëåì";

const string golembook1_5 = "Ýòè êàìåííûå êîëîññû ïðàêòè÷åñêè íåóÿçâèìû. Ìå÷è, òîïîðû è ëóêè íå ïðè÷èíÿþò èì ðîâíûì ñ÷åòîì íèêàêîãî âðåäà.";

const string golembook1_6 = "Åäèíñòâåííûì çàðåãèñòðèðîâàííûì ñëó÷àåì ïîáåäû ÷åëîâåêà íàä ãîëåìîì ÿâëÿåòñÿ äîêëàä íàåìíèêà. Îí ðàññêàçàë, ÷òî îò óäàðà ìîëîòà â ãîëåìå ïîÿâèëàñü òðåùèíà. Îò ïîñëåäîâàâøèõ çàòåì óäàðîâ îíà ñòàëà ðàñøèðÿòüñÿ, ïîêà ãîëåì ïîïðîñòó íå ðàçâàëèëñÿ íà ÷àñòè.";

func void usegolembook1() {
    var int ndocid;

    ndocid = doc_create();
    doc_setpages(ndocid, 2);
    doc_setpage(ndocid, 0, "Book_Mage_L.tga", 0);
    doc_setpage(ndocid, 1, "Book_Mage_R.tga", 0);
    doc_setfont(ndocid, -1, font_book_text);
    doc_setmargins(ndocid, 0, 275, 20, 30, 20, 1);
    doc_printline(ndocid, 0, golembook1_1);
    doc_printline(ndocid, 0, "=====================");
    doc_printlines(ndocid, 0, golembook1_2);
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, golembook1_3);
    doc_printline(ndocid, 0, "");
    doc_setmargins(ndocid, -1, 30, 20, 275, 20, 1);
    doc_printline(ndocid, 1, golembook1_4);
    doc_printline(ndocid, 1, "------------");
    doc_printlines(ndocid, 1, golembook1_5);
    doc_printline(ndocid, 1, "");
    doc_printlines(ndocid, 1, golembook1_6);
    doc_show(ndocid);
};

instance itwr_golembook2(c_item) {
    name = "Àðêàíóì Ãîëóì - Òîì âòîðîé";
    mainflag = item_kat_docs;
    flags = item_mission;
    visual = "ItWr_Book_02_05.3ds";
    material = mat_leather;
    scemename = "MAP";
    on_state = usegolembook2;
    value = 100;
    description = "";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = "";
    count[5] = 0;
};

const string golembook2_1 = "Àðêàíóì Ãîëóì - Òîì âòîðîé";

const string golembook2_2 = "Ëåäÿíîé ãîëåì";

const string golembook2_3 = "Ëåäÿíûå ãîëåìû ÷åì-òî ñðîäíè êàìåííûì, òîëüêî òåëà èõ, ïîõîæå, ñîñòîÿò èç âîäû. Âñå èçâåñòíîå ÷åëîâåêó îðóæèå ïðîñòî ñêîëüçèò ïî øêóðå ýòèõ ñîçäàíèé.";

const string golembook2_4 = "Ïóòåøåñòâåííèêè äîëæíû òàêæå çíàòü è ïîñòîÿííî ïîìíèòü î ëåäÿíîì äûõàíèè ãîëåìîâ, ïîòîìó êàê çàáûâ÷èâûå ðèñêóþò ïðåâðàòèòüñÿ â ñîñóëüêó.";

const string golembook2_5 = "Îäèí èç ìàãîâ îãíÿ ðàññêàçûâàë êàê-òî, ÷òî âñòðå÷àë ëåäÿíîãî ãîëåìà. Ïðè îí ÿâíî íå ñìîã ïðè÷èíèòü ìàãó ñêîëü-íèáóäü çíà÷èòåëüíûõ íåïðèÿòíîñòåé.";

const string golembook2_6 = "Îãíåííûé ãîëåì";

const string golembook2_7 = "Ñîãëàñíî ðàññêàçàì, ýòè ñîçäàíèÿ ñïîñîáíû ïðåâðàòèòü ÷åëîâåêà â ïûëàþùèé ôàêåë îäíèì ëèøü ñâîèì ïðèêîñíîâåíèåì.";

const string golembook2_8 = "Îäèí èç ñëó÷àåâ ñòîëêíîâåíèÿ ñ òàêèì ãîëåìîì áûë çàðåãèñòðèðîâàí â ïðîøëîì ãîäó. Èñõîä ñõâàòêè îñòàëñÿ íåèçâåñòåí, îäíàêî òî÷íî óñòàíîâëåíî, ÷òî çàêëèíàíèÿ ìîëíèé è ëüäà ñïîñîáíû ïðè÷èíèòü âðåä îãíåííîìó ãîëåìó.";

func void usegolembook2() {
    var int ndocid;

    ndocid = doc_create();
    doc_setpages(ndocid, 2);
    doc_setpage(ndocid, 0, "Book_Mage_L.tga", 0);
    doc_setpage(ndocid, 1, "Book_Mage_R.tga", 0);
    doc_setfont(ndocid, -1, font_book_text);
    doc_setmargins(ndocid, 0, 275, 20, 30, 20, 1);
    doc_printline(ndocid, 0, golembook2_1);
    doc_printline(ndocid, 0, "======================");
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, golembook2_2);
    doc_printline(ndocid, 0, "---------");
    doc_printlines(ndocid, 0, golembook2_3);
    doc_printlines(ndocid, 0, golembook2_4);
    doc_setmargins(ndocid, -1, 30, 20, 275, 20, 1);
    doc_printlines(ndocid, 1, golembook2_5);
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, golembook2_6);
    doc_printline(ndocid, 1, "------------");
    doc_printlines(ndocid, 1, golembook2_7);
    doc_printlines(ndocid, 1, golembook2_8);
    doc_show(ndocid);
};

instance itwrworldmap_orc(c_item) {
    name = "Êàðòà";
    mainflag = item_kat_docs;
    flags = item_mission;
    visual = "ItWr_Map_01.3DS";
    material = mat_leather;
    scemename = "MAP";
    on_state = useworldmap_orc;
    value = 250;
    description = "Êàðòà êîëîíèè (äîïîëíåííàÿ)";
    text = "Óð-Øàê, øàìàí îðêîâ, äîïîëíèë êàðòó";
    count = 0;
    text[1] = "òåððèòîðèÿìè îðêîâ!";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void useworldmap_orc() {
    var int ndocid;

    ndocid = doc_createmap();
    doc_setlevel(ndocid, "WORLD.ZEN");
    doc_setpages(ndocid, 1);
    doc_setpage(ndocid, 0, "Map_World_Orc.tga", 1);
    doc_show(ndocid);
};

instance itke_freemine(c_item) {
    name = "Êëþ÷ ê Ñâîáîäíîé Øàõòå";
    mainflag = item_kat_none;
    flags = item_mission;
    visual = "ItKe_Key_01.3ds";
    material = mat_metal;
    value = 3;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance orcmedicine(c_item) {
    name = "Îðî÷üå ñíàäîáüå";
    mainflag = item_kat_potions;
    flags = item_mission;
    visual = "ITFO_POTION_STRENGTH_01.3DS";
    material = mat_glas;
    scemename = "POTION";
    on_state = useorcmedicine;
    value = 0;
    description = name;
    text = "Ýôôåêò: Íåèçâåñòåí";
    count = 0;
};

func void useorcmedicine() {
    if (c_npcisorc(self)) {
        self.attribute[atr_hitpoints] /*0*/ = self.attribute[atr_hitpoints_max] /*1*/;
    }
    else {
        npc_changeattribute(self, atr_hitpoints, -self.attribute[atr_hitpoints_max] /*1*/);
    };
};

instance ulumulu(c_item) {
    name = "Óëó-Ìóëó";
    mainflag = item_kat_nf;
    flags = item_2hd_axe | item_mission;
    visual = "ItMi_Amulet_Ulumulu_02.3ds";
    visual_skin = 0;
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 30;
    damagetotal = 35;
    damagetype = dam_edge;
    range = 140;
    value = 1000;
    description = name;
    text = "Óëó-Ìóëó ÿâëÿåòñÿ çíàêîì âåëèêîé ñèëû è";
    count = 0;
    text[1] = "ìóæåñòâà. Íà íîñèòåëÿ ýòîãî çíàêà íå";
    count[1] = 0;
    text[2] = "ðåøèòñÿ íàïàñòü íè îäèí îðê!";
    count[2] = 0;
    text[3] = name_damage;
    count[3] = damagetotal;
    text[4] = name_str_needed;
    count[4] = cond_value[2];
    text[5] = name_value;
    count[5] = value;
};

instance itwrtemplemap(c_item) {
    name = "Êàðòà";
    mainflag = item_kat_docs;
    flags = item_mission;
    visual = "ItWr_Map_01.3DS";
    material = mat_leather;
    scemename = "MAP";
    on_state = usetemplemap;
    value = 30;
    description = "Íàáðîñîê õðàìà";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = name_value;
    count[4] = value;
};

func void usetemplemap() {
    var int ndocid;

    ndocid = doc_createmap();
    doc_setpages(ndocid, 1);
    doc_setpage(ndocid, 0, "Map_Temple.tga", 1);
    doc_show(ndocid);
};

instance itmialarmhorn(c_item) {
    name = "Ðîã";
    mainflag = item_kat_none;
    flags = item_mission;
    visual = "ItMi_Alarmhorn_01.3DS";
    material = mat_wood;
    scemename = "HORN";
    value = 9;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itmi_stuff_idol_sleeper_01(c_item) {
    name = "Ñòàòóýòêà";
    mainflag = item_kat_none;
    flags = item_mission;
    visual = "ItMi_Stuff_Idol_Sleeper_01.3DS";
    material = mat_clay;
    value = 0;
    description = name;
    text = "Ñòàòóýòêà ïðåäñòàâëÿåò íåêîå ñîçäàíèå";
    count = 0;
    text[1] = "â ìàñêå.";
    count[1] = 0;
    text[2] = "Ìàñêà îêðóæåíà øåñòüþ áîëüøèìè æàëàìè.";
    count[2] = 0;
};

instance weltenspalter(c_item) {
    name = "Ðàñêàëûâàþùèé ìèðû";
    mainflag = item_kat_none;
    flags = item_2hd_swd | item_mission;
    visual = "ItMi_SleeperKey_01.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 30;
    damagetotal = 90;
    damagetype = dam_edge;
    range = 140;
    value = 900;
    description = name;
    text = "Ýòîò ìå÷ ïðèíàäëåæàë áåññìåðòíîìó âûñøåìó";
    count = 0;
    text[1] = "ñâÿùåííèêó Âàððàã-Õàøîðó.";
    count[1] = 0;
    text[2] = "Î÷åâèäíî, ÷òî êàê îðóæèå ýòîò ìå÷ ÿâíî";
    count[2] = 0;
    text[3] = "áåñïîëåçåí.";
    count[3] = 0;
    text[4] = "Âîçìîæíî, åãî ìîæíî èñïîëüçîâàòü äëÿ";
    count[4] = 0;
    text[5] = "äðóãèõ öåëåé.";
    count[5] = 0;
};

instance lichtbringer(c_item) {
    name = "Êëèíîê ñâåòà";
    mainflag = item_kat_none;
    flags = item_2hd_swd | item_mission;
    visual = "ItMi_SleeperKey_01.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 30;
    damagetotal = 90;
    damagetype = dam_edge;
    range = 140;
    value = 900;
    description = name;
    text = "Ýòîò ìå÷ ïðèíàäëåæàë áåññìåðòíîìó âûñøåìó";
    count = 0;
    text[1] = "ñâÿùåííèêó Âàððàã-Êàñîðãó.";
    count[1] = 0;
    text[2] = "Î÷åâèäíî, ÷òî êàê îðóæèå ýòîò ìå÷ ÿâíî";
    count[2] = 0;
    text[3] = "áåñïîëåçåí.";
    count[3] = 0;
    text[4] = "Âîçìîæíî, åãî ìîæíî èñïîëüçîâàòü äëÿ";
    count[4] = 0;
    text[5] = "äðóãèõ öåëåé.";
    count[5] = 0;
};

instance zeitenklinge(c_item) {
    name = "Êëèíîê âðåìåí";
    mainflag = item_kat_none;
    flags = item_2hd_swd | item_mission;
    visual = "ItMi_SleeperKey_01.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 30;
    damagetotal = 90;
    damagetype = dam_edge;
    range = 140;
    value = 900;
    description = name;
    text = "Ýòîò ìå÷ ïðèíàäëåæàë áåññìåðòíîìó âûñøåìó";
    count = 0;
    text[1] = "ñâÿùåííèêó Âàððàã-Óíõèëüêòó.";
    count[1] = 0;
    text[2] = "Î÷åâèäíî, ÷òî êàê îðóæèå ýòîò ìå÷ ÿâíî";
    count[2] = 0;
    text[3] = "áåñïîëåçåí.";
    count[3] = 0;
    text[4] = "Âîçìîæíî, åãî ìîæíî èñïîëüçîâàòü äëÿ";
    count[4] = 0;
    text[5] = "äðóãèõ öåëåé.";
    count[5] = 0;
};

instance daemonenstreich(c_item) {
    name = "Óäàð äåìîíà";
    mainflag = item_kat_none;
    flags = item_2hd_swd | item_mission;
    visual = "ItMi_SleeperKey_01.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 30;
    damagetotal = 90;
    damagetype = dam_edge;
    range = 140;
    value = 900;
    description = name;
    text = "Ýòîò ìå÷ ïðèíàäëåæàë áåññìåðòíîìó âûñøåìó";
    count = 0;
    text[1] = "ñâÿùåííèêó Âàððàã-Ðóóøêó.";
    count[1] = 0;
    text[2] = "Î÷åâèäíî, ÷òî êàê îðóæèå ýòîò ìå÷ ÿâíî";
    count[2] = 0;
    text[3] = "áåñïîëåçåí.";
    count[3] = 0;
    text[4] = "Âîçìîæíî, åãî ìîæíî èñïîëüçîâàòü äëÿ";
    count[4] = 0;
    text[5] = "äðóãèõ öåëåé.";
    count[5] = 0;
};

instance bannklinge(c_item) {
    name = "Êëèíîê íàêàçàíèÿ";
    mainflag = item_kat_none;
    flags = item_2hd_swd | item_mission;
    visual = "ItMi_SleeperKey_01.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 30;
    damagetotal = 90;
    damagetype = dam_edge;
    range = 140;
    value = 900;
    description = name;
    text = "Ýòîò ìå÷ ïðèíàäëåæàë áåññìåðòíîìó âûñøåìó";
    count = 0;
    text[1] = "ñâÿùåííèêó îðêîâ Ãðàø-Âàððàã-Àðóøàòó.";
    count[1] = 0;
    text[2] = "Î÷åâèäíî, ÷òî êàê îðóæèå ýòîò ìå÷ ÿâíî";
    count[2] = 0;
    text[3] = "áåñïîëåçåí.";
    count[3] = 0;
    text[4] = "Âîçìîæíî, åãî ìîæíî èñïîëüçîâàòü äëÿ";
    count[4] = 0;
    text[5] = "äðóãèõ öåëåé.";
    count[5] = 0;
};

instance mythrilklinge(c_item) {
    name = "Ñòðàííûé ìå÷";
    mainflag = item_kat_none;
    flags = item_2hd_swd | item_mission;
    visual = "ItMw_2H_Sword_Sleeper_01.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 30;
    damagetotal = 10;
    damagetype = dam_edge;
    range = 160;
    value = 900;
    description = name;
    text = "Ìå÷ âîñõèòèòåëüíîãî êà÷åñòâà.";
    count = 0;
    text[1] = "Êëèíîê ïîêðûò äðåâíèìè ðóíàìè.";
    count[1] = 0;
    text[2] = "Ìîæåò áûòü, Êñàðäàñ è ñìîæåò èõ ïðî÷èòàòü.";
    count[2] = 0;
    text[3] = "Â ëþáîì ñëó÷àå äî òîé ïîðû ìíå íå ñòîèò";
    count[3] = 0;
    text[4] = "åãî èñïîëüçîâàòü.";
    count[4] = 0;
};

instance mythrilklinge01(c_item) {
    name = "ÓÐÈÇÅËÜ";
    mainflag = item_kat_nf;
    flags = item_2hd_swd | item_mission;
    visual = "ItMw_2H_Sword_Sleeper_01.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 30;
    damagetotal = 90;
    damagetype = dam_edge;
    range = 180;
    value = 900;
    description = name;
    text = "Êñàðäàñ ñêàçàë, ÷òî ìå÷ íîñèò èìÿ ÓÐÈÇÅËÜ è";
    count = 0;
    text[1] = "îí î÷åíü äðåâíèé. Ìíîãî ëåò íàçàä îí îáëàäàë";
    count[1] = 0;
    text[2] = "îãðîìíîé ñèëîé, íî ìàãèÿ óøëà.";
    count[2] = 0;
    text[3] = name_damage;
    count[3] = damagetotal;
    text[4] = name_str_needed;
    count[4] = cond_value[2];
    text[5] = name_value;
    count[5] = value;
};

instance mythrilklinge02(c_item) {
    name = "ÓÐÈÇÅËÜ";
    mainflag = item_kat_nf;
    flags = item_2hd_swd | item_mission;
    visual = "ItMw_2H_Sword_Sleeper_02.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 30;
    damage[dam_index_fire] /*3*/ = 30;
    damage[dam_index_magic] /*5*/ = 120;
    damagetype = dam_fire | dam_magic;
    range = 180;
    value = 10000;
    description = name;
    text = "Ýòî ìå÷ Óðèçåëü.";
    count = 0;
    text[1] = "Â íåì çàêëþ÷åíà ìàãè÷åñêàÿ ñèëà.";
    count[1] = 0;
    text[2] = name_dam_magic;
    count[2] = damage[dam_index_magic] /*5*/;
    text[3] = name_dam_fire;
    count[3] = damage[dam_index_fire] /*3*/;
    text[4] = name_str_needed;
    count[4] = cond_value[2];
    text[5] = name_value;
    count[5] = value;
};

instance mythrilklinge03(c_item) {
    name = "ÓÐÈÇÅËÜ";
    mainflag = item_kat_nf;
    flags = item_2hd_swd | item_mission;
    visual = "ItMw_2H_Sword_Sleeper_01.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 30;
    damagetotal = 90;
    damagetype = dam_edge;
    range = 180;
    value = 900;
    description = name;
    text = "Ìàãè÷åñêèé êàìåíü áûë óäàëåí èç íåãî. Ýòî íå";
    count = 0;
    text[1] = "ìåøàåò Óðèçåëþ îñòàâàòüñÿ îòëè÷íûì îðóæèåì,";
    count[1] = 0;
    text[2] = "íî ìàãèÿ åãî óøëà.";
    count[2] = 0;
    text[3] = name_damage;
    count[3] = damagetotal;
    text[4] = name_str_needed;
    count[4] = cond_value[2];
    text[5] = name_value;
    count[5] = value;
};

instance scroll4milten(c_item) {
    name = "Ïåðåäà÷à ñèëû";
    mainflag = item_kat_docs;
    flags = item_mission;
    visual = "ItWrScroll.3DS";
    material = mat_leather;
    value = 15;
    description = name;
    text = "Çàêëèíàíèå äëÿ ïåðåäà÷è";
    count = 0;
    text[1] = "ñèëû â Óðèçåëü.";
    count[1] = 0;
    text[2] = "ß íå ìîãó èñïîëüçîâàòü åãî.";
    count[2] = 0;
};

instance itke_sunkentower(c_item) {
    name = "Êëþ÷";
    mainflag = item_kat_none;
    flags = item_mission;
    visual = "ItKe_Key_03.3ds";
    material = mat_metal;
    value = 3;
    description = name;
    text = "Îòêðûâàåò äâåðè â çàòîïëåííîé";
    count = 0;
    text[1] = "áàøíå.";
    count[1] = 0;
};

instance dungeonkey(c_item) {
    name = "Êëþ÷ ê ïîäçåìåëüþ";
    mainflag = item_kat_none;
    flags = item_mission;
    visual = "ItKe_Key_03.3ds";
    material = mat_metal;
    value = 3;
    description = name;
    text = "Îòêðûâàåò ïîäçåìåëüÿ";
    count = 0;
    text[1] = "â Ñòàðîì Ëàãåðå.";
    count[1] = 0;
};

instance urizielrune(c_item) {
    name = "Âîëíà Ñìåðòè ÓÐÈÇÅËß";
    mainflag = item_kat_rune;
    flags = item_mission;
    visual = "ItAr_Rune_14.3ds";
    material = mat_stone;
    spell = spl_massdeath;
    mag_circle = 6;
    value = 10000;
    description = name;
    text = "This powerful magic rune contains";
    count = 0;
    text[1] = "the ancient powers of the sword URIZIEL.";
    count[1] = 0;
    text[2] = name_mag_circle;
    count[2] = mag_circle;
    text[3] = name_manakosten;
    count[3] = spl_sendcast_massdeath;
    text[4] = name_dam_magic;
    count[4] = spl_damage_massdeath;
    text[5] = name_value;
    count[5] = value;
};

const int value_hpessenz = 25;

const int hp_essenz = 50;

const int value_hpextrakt = 35;

const int hp_extrakt = 70;

const int value_hpelixier = 50;

const int hp_elixier = 100;

const int value_manaessenz = 25;

const int mana_essenz = 30;

const int value_manaextrakt = 45;

const int mana_extrakt = 50;

const int value_manaelixier = 65;

const int mana_elixier = 70;

const int value_elixier1 = 95;

const int mana_elixier1 = 100;

const int value_elixieregg = 1;

const int manamax_elixieregg = 10;

const int value_stressenz = 300;

const int str_essenz = 3;

const int value_strextrakt = 500;

const int str_extrakt = 5;

const int value_strelixier = 800;

const int str_elixier = 8;

const int value_dexessenz = 300;

const int dex_essenz = 3;

const int value_dexextrakt = 500;

const int dex_extrakt = 5;

const int value_dexelixier = 800;

const int dex_elixier = 8;

const int value_strdex_macht = 800;

const int strdex_macht = 4;

const int value_strdex_herrschaft = 1200;

const int strdex_herrschaft = 6;

const int value_hpmaxessenz = 500;

const int hpmax_essenz = 5;

const int value_hpmaxextrakt = 1000;

const int hpmax_extrakt = 10;

const int value_hpmaxelixier = 1500;

const int hpmax_elixier = 15;

const int value_manamaxessenz = 500;

const int manamax_essenz = 5;

const int value_manamaxextrakt = 1000;

const int manamax_extrakt = 10;

const int value_manamaxelixier = 1500;

const int manamax_elixier = 15;

const int value_haste1 = 100;

const int time_haste1 = 60000;

const int value_haste2 = 150;

const int time_haste2 = 120000;

const int value_haste3 = 200;

const int time_haste3 = 300000;

instance itfo_potion_mana_01(c_item) {
    name = name_trank;
    mainflag = item_kat_potions;
    flags = item_multi;
    visual = "ItFo_Potion_Mana_01.3ds";
    material = mat_glas;
    scemename = "POTIONFAST";
    on_state = usemanapotion;
    value = value_manaessenz;
    description = "Ýññåíöèÿ ìàãè÷åñêîé ýíåðãèè";
    text = "";
    count = 0;
    text[1] = name_bonus_mana;
    count[1] = mana_essenz;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_manaessenz;
};

func void usemanapotion() {
    printdebugnpc(pd_item_mobsi, "UseManaPotion");
    npc_changeattribute(self, atr_mana, mana_essenz);
};

instance itfo_potion_mana_02(c_item) {
    name = name_trank;
    mainflag = item_kat_potions;
    flags = item_multi;
    visual = "ItFo_Potion_Mana_02.3ds";
    material = mat_glas;
    scemename = "POTIONFAST";
    on_state = usemana2potion;
    value = value_manaextrakt;
    description = "Âûòÿæêà ìàãè÷åñêîé ýíåðãèè";
    text = "";
    count = 0;
    text[1] = name_bonus_mana;
    count[1] = mana_extrakt;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_manaextrakt;
};

func void usemana2potion() {
    printdebugnpc(pd_item_mobsi, "UseMana2Potion");
    npc_changeattribute(self, atr_mana, mana_extrakt);
};

instance itfo_potion_mana_03(c_item) {
    name = name_trank;
    mainflag = item_kat_potions;
    flags = item_multi;
    visual = "ItFo_Potion_Mana_03.3ds";
    material = mat_glas;
    scemename = "POTIONFAST";
    on_state = usemana3potion;
    value = value_manaelixier;
    description = "Ýëèêñèð ìàãè÷åñêîé ýíåðãèè";
    text = "";
    count = 0;
    text[1] = name_bonus_mana;
    count[1] = mana_elixier;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_manaelixier;
};

func void usemana3potion() {
    printdebugnpc(pd_item_mobsi, "UseMana3Potion");
    npc_changeattribute(self, atr_mana, mana_elixier);
};

instance itfo_potion_elixier(c_item) {
    name = name_trank;
    mainflag = item_kat_potions;
    flags = item_multi;
    visual = "ItFo_Potion_Elixier.3ds";
    material = mat_glas;
    scemename = "POTIONFAST";
    on_state = useelixier;
    value = value_elixier1;
    description = "Ýëèêñèð";
    text = "";
    count = 0;
    text[1] = name_bonus_mana;
    count[1] = mana_elixier1;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_elixier1;
};

func void useelixier() {
    printdebugnpc(pd_item_mobsi, "UseElixier");
    npc_changeattribute(self, atr_mana, mana_elixier1);
};

instance itfo_potion_health_01(c_item) {
    name = name_trank;
    mainflag = item_kat_potions;
    flags = item_multi;
    visual = "ItFo_Potion_Health_01.3ds";
    material = mat_glas;
    scemename = "POTIONFAST";
    on_state = usehealthpotion;
    value = value_hpessenz;
    description = "Ýññåíöèÿ èñöåëåíèÿ";
    text = "";
    count = 0;
    text[1] = name_bonus_hp;
    count[1] = hp_essenz;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_hpessenz;
};

func void usehealthpotion() {
    printdebugnpc(pd_item_mobsi, "UseHealthPotion");
    npc_changeattribute(self, atr_hitpoints, hp_essenz);
};

instance itfo_potion_health_02(c_item) {
    name = name_trank;
    mainflag = item_kat_potions;
    flags = item_multi;
    visual = "ItFo_Potion_Health_02.3ds";
    material = mat_glas;
    scemename = "POTIONFAST";
    on_state = usehealth2potion;
    value = value_hpextrakt;
    description = "Ýêñòðàêò èñöåëåíèÿ";
    text = "";
    count = 0;
    text[1] = name_bonus_hp;
    count[1] = hp_extrakt;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_hpextrakt;
};

func void usehealth2potion() {
    printdebugnpc(pd_item_mobsi, "UseHealthPotion");
    npc_changeattribute(self, atr_hitpoints, hp_extrakt);
};

instance itfo_potion_health_03(c_item) {
    name = name_trank;
    mainflag = item_kat_potions;
    flags = item_multi;
    visual = "ItFo_Potion_Health_03.3ds";
    material = mat_glas;
    scemename = "POTIONFAST";
    on_state = usehealth3potion;
    value = value_hpelixier;
    description = "Öåëåáíûé ýëèêñèð";
    text = "";
    count = 0;
    text[1] = name_bonus_hp;
    count[1] = hp_elixier;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_hpelixier;
};

func void usehealth3potion() {
    printdebugnpc(pd_item_mobsi, "UseHealthPotion");
    npc_changeattribute(self, atr_hitpoints, hp_elixier);
};

instance itfo_potion_elixier_egg(c_item) {
    name = name_trank;
    mainflag = item_kat_potions;
    flags = item_multi;
    visual = "ItFo_Potion_Elixier_Egg.3ds";
    material = mat_glas;
    scemename = "POTIONFAST";
    on_state = useeggelixier;
    value = value_elixieregg;
    description = "Ýëèêñèð ïîëçóíà";
    text = "Ïîçâîëÿåò âñòóïèòü â êîíòàêò ñî Ñïÿùèì.";
    count = 0;
    text[1] = name_bonus_manamax;
    count[1] = manamax_elixieregg;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_elixieregg;
};

func void useeggelixier() {
    b_raiseattribute(atr_mana_max, manamax_elixieregg);
};

instance itfo_potion_strength_01(c_item) {
    name = name_trank;
    mainflag = item_kat_potions;
    flags = item_multi;
    visual = "ItFo_Potion_Strength_01.3ds";
    material = mat_glas;
    scemename = "POTIONFAST";
    on_state = usestrengthpotion;
    value = value_stressenz;
    description = "Ýññåíöèÿ ñèëû";
    text = "";
    count = 0;
    text[1] = name_bonus_str;
    count[1] = str_essenz;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_stressenz;
};

func void usestrengthpotion() {
    b_raiseattribute(atr_strength, str_essenz);
};

instance itfo_potion_strength_02(c_item) {
    name = name_trank;
    mainflag = item_kat_potions;
    flags = item_multi;
    visual = "ItFo_Potion_Strength_02.3ds";
    material = mat_glas;
    scemename = "POTIONFAST";
    on_state = usestrength2potion;
    value = value_strextrakt;
    description = "Âûòÿæêà ñèëû";
    text = "";
    count = 0;
    text[1] = name_bonus_str;
    count[1] = str_extrakt;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_strextrakt;
};

func void usestrength2potion() {
    b_raiseattribute(atr_strength, str_extrakt);
};

instance itfo_potion_strength_03(c_item) {
    name = name_trank;
    mainflag = item_kat_potions;
    flags = item_multi;
    visual = "ItFo_Potion_Strength_03.3ds";
    material = mat_glas;
    scemename = "POTIONFAST";
    on_state = usestrength3potion;
    value = value_strelixier;
    description = "Ýëèêñèð ñèëû";
    text = "";
    count = 0;
    text[1] = name_bonus_str;
    count[1] = str_elixier;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_strelixier;
};

func void usestrength3potion() {
    b_raiseattribute(atr_strength, str_elixier);
};

instance itfo_potion_dex_01(c_item) {
    name = name_trank;
    mainflag = item_kat_potions;
    flags = item_multi;
    visual = "ItFo_Potion_Dex_01.3ds";
    material = mat_glas;
    scemename = "POTIONFAST";
    on_state = usedexpotion;
    value = value_dexessenz;
    description = "Ýññåíöèÿ ëîâêîñòè";
    text = "";
    count = 0;
    text[1] = name_bonus_dex;
    count[1] = dex_essenz;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_dexessenz;
};

func void usedexpotion() {
    b_raiseattribute(atr_dexterity, dex_essenz);
};

instance itfo_potion_dex_02(c_item) {
    name = name_trank;
    mainflag = item_kat_potions;
    flags = item_multi;
    visual = "ItFo_Potion_Dex_02.3ds";
    material = mat_glas;
    scemename = "POTIONFAST";
    on_state = usedex2potion;
    value = value_dexextrakt;
    description = "Âûòÿæêà ëîâêîñòè";
    text = "";
    count = 0;
    text[1] = name_bonus_dex;
    count[1] = dex_extrakt;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_dexextrakt;
};

func void usedex2potion() {
    b_raiseattribute(atr_dexterity, dex_extrakt);
};

instance itfo_potion_dex_03(c_item) {
    name = name_trank;
    mainflag = item_kat_potions;
    flags = item_multi;
    visual = "ItFo_Potion_Dex_03.3ds";
    material = mat_glas;
    scemename = "POTIONFAST";
    on_state = usedex3potion;
    value = value_dexelixier;
    description = "Ýëèêñèð ëîâêîñòè";
    text = "";
    count = 0;
    text[1] = name_bonus_dex;
    count[1] = dex_elixier;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_dexelixier;
};

func void usedex3potion() {
    b_raiseattribute(atr_dexterity, dex_elixier);
};

instance itfo_potion_master_01(c_item) {
    name = name_trank;
    mainflag = item_kat_potions;
    flags = item_multi;
    visual = "ItFo_Potion_Master_01.3ds";
    material = mat_glas;
    scemename = "POTIONFAST";
    on_state = usemasterpotion;
    value = value_strdex_macht;
    description = "Ýëèêñèð ìîãóùåñòâà";
    text = "";
    count = 0;
    text[1] = name_bonus_dex;
    count[1] = strdex_macht;
    text[2] = name_bonus_str;
    count[2] = strdex_macht;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_strdex_macht;
};

func void usemasterpotion() {
    var string msg;

    npc_changeattribute(self, atr_strength, strdex_macht);
    npc_changeattribute(self, atr_dexterity, strdex_macht);
    msg = concatstrings(name_raisestrdex, inttostring(strdex_macht));
    printscreen(msg, -1, -1, font_old_20, _time_message_raiseattribute);
};

instance itfo_potion_master_02(c_item) {
    name = name_trank;
    mainflag = item_kat_potions;
    flags = item_multi;
    visual = "ItFo_Potion_Master_02.3ds";
    material = mat_glas;
    scemename = "POTIONFAST";
    on_state = usemaster2potion;
    value = value_strdex_herrschaft;
    description = "Ýëèêñèð ïðåâîñõîäñòâà";
    text = "";
    count = 0;
    text[1] = name_bonus_dex;
    count[1] = strdex_herrschaft;
    text[2] = name_bonus_str;
    count[2] = strdex_herrschaft;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_strdex_herrschaft;
};

func void usemaster2potion() {
    var string msg;

    npc_changeattribute(self, atr_strength, strdex_herrschaft);
    npc_changeattribute(self, atr_dexterity, strdex_herrschaft);
    msg = concatstrings(name_raisestrdex, inttostring(strdex_herrschaft));
    printscreen(msg, -1, -1, font_old_20, _time_message_raiseattribute);
};

instance itfo_potion_health_perma_01(c_item) {
    name = name_trank;
    mainflag = item_kat_potions;
    flags = item_multi;
    visual = "ItFo_Potion_Health_Perma_01.3ds";
    material = mat_glas;
    scemename = "POTIONFAST";
    on_state = uselifepotion;
    value = value_hpmaxessenz;
    description = "Ýññåíöèÿ æèçíè";
    text = "";
    count = 0;
    text[1] = name_bonus_hpmax;
    count[1] = hpmax_essenz;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_hpmaxessenz;
};

func void uselifepotion() {
    b_raiseattribute(atr_hitpoints_max, hpmax_essenz);
};

instance itfo_potion_health_perma_02(c_item) {
    name = name_trank;
    mainflag = item_kat_potions;
    flags = item_multi;
    visual = "ItFo_Potion_Health_Perma_02.3ds";
    material = mat_glas;
    scemename = "POTIONFAST";
    on_state = uselife2potion;
    value = value_hpmaxextrakt;
    description = "Âûòÿæêà æèçíè";
    text = "";
    count = 0;
    text[1] = name_bonus_hpmax;
    count[1] = hpmax_extrakt;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_hpmaxextrakt;
};

func void uselife2potion() {
    b_raiseattribute(atr_hitpoints_max, hpmax_extrakt);
};

instance itfo_potion_health_perma_03(c_item) {
    name = name_trank;
    mainflag = item_kat_potions;
    flags = item_multi;
    visual = "ItFo_Potion_Health_Perma_03.3ds";
    material = mat_glas;
    scemename = "POTIONFAST";
    on_state = uselife3potion;
    value = value_hpmaxelixier;
    description = "Ýëèêñèð æèçíè";
    text = "";
    count = 0;
    text[1] = name_bonus_hpmax;
    count[1] = hpmax_elixier;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_hpmaxelixier;
};

func void uselife3potion() {
    b_raiseattribute(atr_hitpoints_max, hpmax_elixier);
};

instance itfo_potion_mana_perma_01(c_item) {
    name = name_trank;
    mainflag = item_kat_potions;
    flags = item_multi;
    visual = "ItFo_Potion_Mana_Perma_01.3ds";
    material = mat_glas;
    scemename = "POTIONFAST";
    on_state = usenectarpotion;
    value = value_manamaxessenz;
    description = "Ýññåíöèÿ äóõà";
    text = "";
    count = 0;
    text[1] = name_bonus_manamax;
    count[1] = manamax_essenz;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_manamaxessenz;
};

func void usenectarpotion() {
    b_raiseattribute(atr_mana_max, manamax_essenz);
    printdebugnpc(pd_item_mobsi, "Ich trinke Magie");
};

instance itfo_potion_mana_perma_02(c_item) {
    name = name_trank;
    mainflag = item_kat_potions;
    flags = item_multi;
    visual = "ItFo_Potion_Mana_Perma_02.3ds";
    material = mat_glas;
    scemename = "POTIONFAST";
    on_state = usenectar2potion;
    value = value_manamaxextrakt;
    description = "Âûòÿæêà äóõà";
    text = "";
    count = 0;
    text[1] = name_bonus_manamax;
    count[1] = manamax_extrakt;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_manamaxextrakt;
};

func void usenectar2potion() {
    b_raiseattribute(atr_mana_max, manamax_extrakt);
    printdebugnpc(pd_item_mobsi, "Ich trinke Magie");
};

instance itfo_potion_mana_perma_03(c_item) {
    name = name_trank;
    mainflag = item_kat_potions;
    flags = item_multi;
    visual = "ItFo_Potion_Mana_Perma_03.3ds";
    material = mat_glas;
    scemename = "POTIONFAST";
    on_state = usenectar3potion;
    value = value_manamaxelixier;
    description = "Ýëèêñèð äóõà";
    text = "";
    count = 0;
    text[1] = name_bonus_manamax;
    count[1] = manamax_elixier;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value_manamaxelixier;
};

func void usenectar3potion() {
    b_raiseattribute(atr_mana_max, manamax_elixier);
    printdebugnpc(pd_item_mobsi, "Ich trinke Magie");
};

instance itfo_potion_haste_01(c_item) {
    name = name_trank;
    mainflag = item_kat_potions;
    flags = item_multi;
    visual = "ItFo_Potion_Haste_01.3ds";
    material = mat_glas;
    scemename = "POTIONFAST";
    on_state = usehastepotion;
    value = value_haste1;
    description = "Ýëèêñèð ïðîâîðñòâà";
    text = "";
    count = 0;
    text[1] = "Ïîçâîëÿåò áåæàòü áûñòðî, íî íå äîëãî.";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = name_duration;
    count[3] = time_haste1 / 60000;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void usehastepotion() {
    mdl_applyoverlaymdstimed(self, "HUMANS_SPRINT.MDS", time_haste1);
    printdebugnpc(pd_item_mobsi, "jetzt bin ich schnell");
};

instance itfo_potion_haste_02(c_item) {
    name = name_trank;
    mainflag = item_kat_potions;
    flags = item_multi;
    visual = "ItFo_Potion_Haste_01.3ds";
    material = mat_glas;
    scemename = "POTIONFAST";
    on_state = usehastepotion2;
    value = value_haste2;
    description = "Ýëèêñèð áûñòðîòû";
    text = "";
    count = 0;
    text[1] = "Ïîçâîëÿåò áåæàòü áûñòðî.";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = name_duration;
    count[3] = time_haste2 / 60000;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void usehastepotion2() {
    mdl_applyoverlaymdstimed(self, "HUMANS_SPRINT.MDS", time_haste2);
    printdebugnpc(pd_item_mobsi, "jetzt bin ich schnell");
};

instance itfo_potion_haste_03(c_item) {
    name = name_trank;
    mainflag = item_kat_potions;
    flags = item_multi;
    visual = "ItFo_Potion_Haste_01.3ds";
    material = mat_glas;
    scemename = "POTIONFAST";
    on_state = usehastepotion3;
    value = value_haste3;
    description = "Ýëèêñèð ñêîðîñòè";
    text = "";
    count = 0;
    text[1] = "Ïîçâîëÿåò áåæàòü áûñòðî è äîëãî.";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = name_duration;
    count[3] = time_haste3 / 60000;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void usehastepotion3() {
    mdl_applyoverlaymdstimed(self, "HUMANS_SPRINT.MDS", time_haste3);
    printdebugnpc(pd_item_mobsi, "jetzt bin ich schnell");
};

instance itrw_bow_small_01(c_item) {
    name = "Êîðîòêèé ëóê";
    mainflag = item_kat_ff;
    flags = item_bow;
    munition = itamarrow /*4894*/;
    visual = "ItRw_Bow_Small_01.mms";
    material = mat_wood;
    cond_atr[2] = atr_dexterity;
    cond_value[2] = 10;
    damagetotal = 20;
    damagetype = dam_point;
    value = 40;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_dex_needed;
    count[3] = cond_value[2];
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itrw_bow_small_02(c_item) {
    name = "Ëóê äëÿ êîííèêà";
    mainflag = item_kat_ff;
    flags = item_bow;
    munition = itamarrow /*4894*/;
    visual = "ItRw_Bow_Small_02.mms";
    material = mat_wood;
    cond_atr[2] = atr_dexterity;
    cond_value[2] = 12;
    damagetotal = 24;
    damagetype = dam_point;
    value = 80;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_dex_needed;
    count[3] = cond_value[2];
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itrw_bow_small_03(c_item) {
    name = "Ïîëåâîé ëóê";
    mainflag = item_kat_ff;
    flags = item_bow;
    munition = itamarrow /*4894*/;
    visual = "ItRw_Bow_Small_03.mms";
    material = mat_wood;
    cond_atr[2] = atr_dexterity;
    cond_value[2] = 14;
    damagetotal = 28;
    damagetype = dam_point;
    value = 120;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_dex_needed;
    count[3] = cond_value[2];
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itrw_bow_small_04(c_item) {
    name = "Îõîòíè÷èé ëóê";
    mainflag = item_kat_ff;
    flags = item_bow;
    munition = itamarrow /*4894*/;
    visual = "ItRw_Bow_Small_04.mms";
    material = mat_wood;
    cond_atr[2] = atr_dexterity;
    cond_value[2] = 16;
    damagetotal = 32;
    damagetype = dam_point;
    value = 160;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_dex_needed;
    count[3] = cond_value[2];
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itrw_bow_small_05(c_item) {
    name = "Êîñòÿíîé ëóê";
    mainflag = item_kat_ff;
    flags = item_bow;
    munition = itamarrow /*4894*/;
    visual = "ItRw_Bow_Small_05.mms";
    material = mat_wood;
    cond_atr[2] = atr_dexterity;
    cond_value[2] = 18;
    damagetotal = 36;
    damagetype = dam_point;
    value = 200;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_dex_needed;
    count[3] = cond_value[2];
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itrw_bow_long_01(c_item) {
    name = "Áîëüøîé ëóê";
    mainflag = item_kat_ff;
    flags = item_bow;
    munition = itamarrow /*4894*/;
    visual = "ItRw_Bow_Long_01.mms";
    material = mat_wood;
    cond_atr[2] = atr_dexterity;
    cond_value[2] = 20;
    damagetotal = 40;
    damagetype = dam_point;
    value = 240;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_dex_needed;
    count[3] = cond_value[2];
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itrw_bow_long_02(c_item) {
    name = "Îñèíîâûé ëóê";
    mainflag = item_kat_ff;
    flags = item_bow;
    munition = itamarrow /*4894*/;
    visual = "ItRw_Bow_Long_02.mms";
    material = mat_wood;
    cond_atr[2] = atr_dexterity;
    cond_value[2] = 22;
    damagetotal = 44;
    damagetype = dam_point;
    value = 280;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_dex_needed;
    count[3] = cond_value[2];
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itrw_bow_long_03(c_item) {
    name = "Èâîâûé ëóê";
    mainflag = item_kat_ff;
    flags = item_bow;
    munition = itamarrow /*4894*/;
    visual = "ItRw_Bow_Long_03.mms";
    material = mat_wood;
    cond_atr[2] = atr_dexterity;
    cond_value[2] = 24;
    damagetotal = 48;
    damagetype = dam_point;
    value = 320;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_dex_needed;
    count[3] = cond_value[2];
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itrw_bow_long_04(c_item) {
    name = "Äóáîâûé ëóê";
    mainflag = item_kat_ff;
    flags = item_bow;
    munition = itamarrow /*4894*/;
    visual = "ItRw_Bow_Long_04.mms";
    material = mat_wood;
    cond_atr[2] = atr_dexterity;
    cond_value[2] = 26;
    damagetotal = 52;
    damagetype = dam_point;
    value = 360;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_dex_needed;
    count[3] = cond_value[2];
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itrw_bow_long_05(c_item) {
    name = "Óáèéöà âîëêîâ";
    mainflag = item_kat_ff;
    flags = item_bow;
    munition = itamarrow /*4894*/;
    visual = "ItRw_Bow_Long_05.mms";
    material = mat_wood;
    cond_atr[2] = atr_dexterity;
    cond_value[2] = 28;
    damagetotal = 56;
    damagetype = dam_point;
    value = 440;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_dex_needed;
    count[3] = cond_value[2];
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itrw_bow_long_06(c_item) {
    name = "Îáãîíÿþùèé âåòåð";
    mainflag = item_kat_ff;
    flags = item_bow;
    munition = itamarrow /*4894*/;
    visual = "ItRw_Bow_Long_06.mms";
    material = mat_wood;
    cond_atr[2] = atr_dexterity;
    cond_value[2] = 30;
    damagetotal = 60;
    damagetype = dam_point;
    value = 480;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_dex_needed;
    count[3] = cond_value[2];
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itrw_bow_long_07(c_item) {
    name = "Àðìåéñêèé ëóê";
    mainflag = item_kat_ff;
    flags = item_bow;
    munition = itamarrow /*4894*/;
    visual = "ItRw_Bow_Long_07.mms";
    material = mat_wood;
    cond_atr[2] = atr_dexterity;
    cond_value[2] = 32;
    damagetotal = 64;
    damagetype = dam_point;
    value = 520;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_dex_needed;
    count[3] = cond_value[2];
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itrw_bow_long_08(c_item) {
    name = "Ðîãîâîé ëóê";
    mainflag = item_kat_ff;
    flags = item_bow;
    munition = itamarrow /*4894*/;
    visual = "ItRw_Bow_Long_08.mms";
    material = mat_wood;
    cond_atr[2] = atr_dexterity;
    cond_value[2] = 34;
    damagetotal = 68;
    damagetype = dam_point;
    value = 560;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_dex_needed;
    count[3] = cond_value[2];
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itrw_bow_long_09(c_item) {
    name = "Ëóê Íèìðîäà";
    mainflag = item_kat_ff;
    flags = item_bow;
    munition = itamarrow /*4894*/;
    visual = "ItRw_Bow_Long_08.mms";
    material = mat_wood;
    cond_atr[2] = atr_dexterity;
    cond_value[2] = 36;
    damagetotal = 72;
    damagetype = dam_point;
    value = 600;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_dex_needed;
    count[3] = cond_value[2];
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itrw_bow_war_01(c_item) {
    name = "Áîåâîé ëóê";
    mainflag = item_kat_ff;
    flags = item_bow;
    munition = itamarrow /*4894*/;
    visual = "ItRw_Bow_War_01.mms";
    material = mat_wood;
    cond_atr[2] = atr_dexterity;
    cond_value[2] = 38;
    damagetotal = 76;
    damagetype = dam_point;
    value = 640;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_dex_needed;
    count[3] = cond_value[2];
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itrw_bow_war_02(c_item) {
    name = "Óáèéöà îðêîâ";
    mainflag = item_kat_ff;
    flags = item_bow;
    munition = itamarrow /*4894*/;
    visual = "ItRw_Bow_War_02.mms";
    material = mat_wood;
    cond_atr[2] = atr_dexterity;
    cond_value[2] = 40;
    damagetotal = 79;
    damagetype = dam_point;
    value = 680;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_dex_needed;
    count[3] = cond_value[2];
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itrw_bow_war_03(c_item) {
    name = "Ëóê øòîðìà";
    mainflag = item_kat_ff;
    flags = item_bow;
    munition = itamarrow /*4894*/;
    visual = "ItRw_Bow_War_03.mms";
    material = mat_wood;
    cond_atr[2] = atr_dexterity;
    cond_value[2] = 42;
    damagetotal = 82;
    damagetype = dam_point;
    value = 720;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_dex_needed;
    count[3] = cond_value[2];
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itrw_bow_war_04(c_item) {
    name = "Äåìîíè÷åñêèé ëóê";
    mainflag = item_kat_ff;
    flags = item_bow;
    munition = itamarrow /*4894*/;
    visual = "ItRw_Bow_War_04.mms";
    material = mat_wood;
    cond_atr[2] = atr_dexterity;
    cond_value[2] = 44;
    damagetotal = 85;
    damagetype = dam_point;
    value = 760;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_dex_needed;
    count[3] = cond_value[2];
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itrw_bow_war_05(c_item) {
    name = "Ëóê ñìåðòè";
    mainflag = item_kat_ff;
    flags = item_bow;
    munition = itamarrow /*4894*/;
    visual = "ItRw_Bow_War_04.mms";
    material = mat_wood;
    cond_atr[2] = atr_dexterity;
    cond_value[2] = 50;
    damagetotal = 88;
    damagetype = dam_point;
    value = 1000;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_dex_needed;
    count[3] = cond_value[2];
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itrw_crossbow_01(c_item) {
    name = "Ëåãêèé àðáàëåò";
    mainflag = item_kat_ff;
    flags = item_crossbow;
    munition = itambolt /*4895*/;
    visual = "ItRwCrossbow1.mms";
    material = mat_wood;
    cond_atr[2] = atr_dexterity;
    cond_value[2] = 25;
    damagetotal = 50;
    damagetype = dam_point;
    value = 180;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_dex_needed;
    count[3] = cond_value[2];
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itrw_crossbow_02(c_item) {
    name = "Àðáàëåò";
    mainflag = item_kat_ff;
    flags = item_crossbow;
    munition = itambolt /*4895*/;
    visual = "ItRwCrossbow2.mms";
    material = mat_wood;
    cond_atr[2] = atr_dexterity;
    cond_value[2] = 42;
    damagetotal = 85;
    damagetype = dam_point;
    value = 780;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_dex_needed;
    count[3] = cond_value[2];
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itrw_crossbow_03(c_item) {
    name = "Òÿæåëûé àðáàëåò";
    mainflag = item_kat_ff;
    flags = item_crossbow;
    munition = itambolt /*4895*/;
    visual = "ItRwCrossbow3.mms";
    material = mat_wood;
    cond_atr[2] = atr_dexterity;
    cond_value[2] = 45;
    damagetotal = 90;
    damagetype = dam_point;
    value = 1000;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_dex_needed;
    count[3] = cond_value[2];
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itrw_crossbow_04(c_item) {
    name = "Áîåâîé àðáàëåò";
    mainflag = item_kat_ff;
    flags = item_crossbow;
    munition = itambolt /*4895*/;
    visual = "ItRwCrossbow4.mms";
    material = mat_wood;
    cond_atr[2] = atr_dexterity;
    cond_value[2] = 55;
    damagetotal = 100;
    damagetype = dam_point;
    value = 1300;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_dex_needed;
    count[3] = cond_value[2];
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itamarrow(c_item) {
    name = "Ñòðåëà";
    mainflag = item_kat_mun;
    flags = item_bow | item_multi;
    visual = "ItAm_Arrow_01.3ds";
    material = mat_wood;
    value = 1;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itambolt(c_item) {
    name = "Àðáàëåòíàÿ ñòðåëà";
    mainflag = item_kat_mun;
    flags = item_crossbow | item_multi;
    visual = "ItAm_Bolt_01.3ds";
    material = mat_wood;
    value = 1;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance schutzring_feuer1(c_item) {
    name = name_ring;
    mainflag = item_kat_magic;
    flags = item_ring;
    visual = "ItMi_Ring_01.3ds";
    visual_skin = 0;
    material = mat_metal;
    on_equip = equip_schutzring_feuer1;
    on_unequip = unequip_schutzring_feuer1;
    value = 200;
    description = "Êîëüöî çàùèòû îò ïëàìåíè";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_prot_fire;
    count[2] = 3;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void equip_schutzring_feuer1() {
    self.protection[prot_fire] /*3*/ += 3;
};

func void unequip_schutzring_feuer1() {
    self.protection[prot_fire] /*3*/ -= 3;
};

instance schutzring_feuer2(c_item) {
    name = name_ring;
    mainflag = item_kat_magic;
    flags = item_ring;
    visual = "ItMi_Ring_01.3ds";
    visual_skin = 0;
    material = mat_metal;
    on_equip = equip_schutzring_feuer2;
    on_unequip = unequip_schutzring_feuer2;
    value = 400;
    description = "Êîëüöî çàùèòû îò îãíÿ";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_prot_fire;
    count[2] = 5;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void equip_schutzring_feuer2() {
    self.protection[prot_fire] /*3*/ += 5;
};

func void unequip_schutzring_feuer2() {
    self.protection[prot_fire] /*3*/ -= 5;
};

instance schutzring_geschosse1(c_item) {
    name = name_ring;
    mainflag = item_kat_magic;
    flags = item_ring;
    visual = "ItMi_Ring_01.3ds";
    visual_skin = 0;
    material = mat_metal;
    on_equip = equip_schutzring_geschosse1;
    on_unequip = unequip_schutzring_geschosse1;
    value = 200;
    description = "Êîëüöî äåðåâÿííîé êîæè";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_prot_point;
    count[2] = 5;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void equip_schutzring_geschosse1() {
    self.protection[prot_point] /*6*/ += 5;
};

func void unequip_schutzring_geschosse1() {
    self.protection[prot_point] /*6*/ -= 5;
};

instance schutzring_geschosse2(c_item) {
    name = name_ring;
    mainflag = item_kat_magic;
    flags = item_ring;
    visual = "ItMi_Ring_01.3ds";
    visual_skin = 0;
    material = mat_metal;
    on_equip = equip_schutzring_geschosse2;
    on_unequip = unequip_schutzring_geschosse2;
    value = 400;
    description = "Êîëüöî êàìåííîé êîæè";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_prot_point;
    count[2] = 10;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void equip_schutzring_geschosse2() {
    self.protection[prot_point] /*6*/ += 10;
};

func void unequip_schutzring_geschosse2() {
    self.protection[prot_point] /*6*/ -= 10;
};

instance schutzring_waffen1(c_item) {
    name = name_ring;
    mainflag = item_kat_magic;
    flags = item_ring;
    visual = "ItMi_Ring_01.3ds";
    visual_skin = 0;
    material = mat_metal;
    on_equip = equip_schutzring_waffen1;
    on_unequip = unequip_schutzring_waffen1;
    value = 200;
    description = "Êîëüöî æåëåçíîé êîæè";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_prot_edge;
    count[2] = 5;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void equip_schutzring_waffen1() {
    self.protection[prot_edge] /*2*/ += 5;
    self.protection[prot_blunt] /*1*/ += 5;
};

func void unequip_schutzring_waffen1() {
    self.protection[prot_edge] /*2*/ -= 5;
    self.protection[prot_blunt] /*1*/ -= 5;
};

instance schutzring_waffen2(c_item) {
    name = name_ring;
    mainflag = item_kat_magic;
    flags = item_ring;
    visual = "ItMi_Ring_01.3ds";
    visual_skin = 0;
    material = mat_metal;
    on_equip = equip_schutzring_waffen2;
    on_unequip = unequip_schutzring_waffen2;
    value = 400;
    description = "Êîëüöî ðóäíîé êîæè";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_prot_edge;
    count[2] = 10;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void equip_schutzring_waffen2() {
    self.protection[prot_edge] /*2*/ += 10;
    self.protection[prot_blunt] /*1*/ += 10;
};

func void unequip_schutzring_waffen2() {
    self.protection[prot_edge] /*2*/ -= 10;
    self.protection[prot_blunt] /*1*/ -= 10;
};

instance schutzring_magie1(c_item) {
    name = "Êîëüöî";
    mainflag = item_kat_magic;
    flags = item_ring;
    visual = "ItMi_Ring_01.3ds";
    visual_skin = 0;
    material = mat_metal;
    on_equip = equip_schutzring_magie1;
    on_unequip = unequip_schutzring_magie1;
    value = 200;
    description = "Êîëüöî äóõîâíîé ñèëû";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_prot_magic;
    count[2] = 1;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void equip_schutzring_magie1() {
    self.protection[prot_magic] /*5*/ += 1;
};

func void unequip_schutzring_magie1() {
    self.protection[prot_magic] /*5*/ -= 1;
};

instance schutzring_magie2(c_item) {
    name = name_ring;
    mainflag = item_kat_magic;
    flags = item_ring;
    visual = "ItMi_Ring_01.3ds";
    visual_skin = 0;
    material = mat_metal;
    on_equip = equip_schutzring_magie2;
    on_unequip = unequip_schutzring_magie2;
    value = 400;
    description = "Êîëüöî çàùèòû";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_prot_edge;
    count[2] = 3;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void equip_schutzring_magie2() {
    self.protection[prot_edge] /*2*/ += 3;
    self.protection[prot_blunt] /*1*/ += 3;
};

func void unequip_schutzring_magie2() {
    self.protection[prot_edge] /*2*/ -= 3;
    self.protection[prot_blunt] /*1*/ -= 3;
};

instance schutzring_magie1_fire1(c_item) {
    name = name_ring;
    mainflag = item_kat_magic;
    flags = item_ring;
    visual = "ItMi_Ring_02.3ds";
    visual_skin = 0;
    material = mat_metal;
    on_equip = equip_schutzring_magie1_fire1;
    on_unequip = unequip_schutzring_magie1_fire1;
    value = 600;
    description = "Êîëüöî î÷èùåíèÿ";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_prot_magic;
    count[2] = 1;
    text[3] = name_prot_fire;
    count[3] = 3;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void equip_schutzring_magie1_fire1() {
    self.protection[prot_magic] /*5*/ += 1;
    self.protection[prot_fire] /*3*/ += 3;
};

func void unequip_schutzring_magie1_fire1() {
    self.protection[prot_magic] /*5*/ -= 1;
    self.protection[prot_fire] /*3*/ -= 3;
};

instance schutzring_magie2_fire2(c_item) {
    name = name_ring;
    mainflag = item_kat_magic;
    flags = item_ring;
    visual = "ItMi_Ring_02.3ds";
    visual_skin = 0;
    material = mat_metal;
    on_equip = equip_schutzring_magie2_fire2;
    on_unequip = unequip_schutzring_magie2_fire2;
    value = 800;
    description = "Êîëüöî íåâèäèìîñòè";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_prot_magic;
    count[2] = 3;
    text[3] = name_prot_fire;
    count[3] = 5;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void equip_schutzring_magie2_fire2() {
    self.protection[prot_magic] /*5*/ += 3;
    self.protection[prot_fire] /*3*/ += 5;
};

func void unequip_schutzring_magie2_fire2() {
    self.protection[prot_magic] /*5*/ -= 3;
    self.protection[prot_fire] /*3*/ -= 5;
};

instance schutzring_geschosse1_waffen1(c_item) {
    name = name_ring;
    mainflag = item_kat_magic;
    flags = item_ring;
    visual = "ItMi_Ring_02.3ds";
    visual_skin = 0;
    material = mat_metal;
    on_equip = equip_schutzring_geschosse1_waffen1;
    on_unequip = unequip_schutzring_geschosse1_waffen1;
    value = 600;
    description = "Êîëüöî ñòîéêîñòè";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_prot_edge;
    count[2] = 5;
    text[3] = name_prot_point;
    count[3] = 5;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void equip_schutzring_geschosse1_waffen1() {
    self.protection[prot_edge] /*2*/ += 5;
    self.protection[prot_blunt] /*1*/ += 5;
    self.protection[prot_point] /*6*/ += 5;
};

func void unequip_schutzring_geschosse1_waffen1() {
    self.protection[prot_edge] /*2*/ -= 5;
    self.protection[prot_blunt] /*1*/ -= 5;
    self.protection[prot_point] /*6*/ -= 5;
};

instance schutzring_geschosse2_waffen2(c_item) {
    name = name_ring;
    mainflag = item_kat_magic;
    flags = item_ring;
    visual = "ItMi_Ring_02.3ds";
    visual_skin = 0;
    material = mat_metal;
    on_equip = equip_schutzring_geschosse2_waffen2;
    on_unequip = unequip_schutzring_geschosse2_waffen2;
    value = 800;
    description = "Êîëüöî ñîìíåíèÿ";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_prot_edge;
    count[2] = 10;
    text[3] = name_prot_point;
    count[3] = 10;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void equip_schutzring_geschosse2_waffen2() {
    self.protection[prot_edge] /*2*/ += 10;
    self.protection[prot_blunt] /*1*/ += 10;
    self.protection[prot_point] /*6*/ += 10;
};

func void unequip_schutzring_geschosse2_waffen2() {
    self.protection[prot_edge] /*2*/ -= 10;
    self.protection[prot_blunt] /*1*/ -= 10;
    self.protection[prot_point] /*6*/ -= 10;
};

instance schutzring_total1(c_item) {
    name = name_ring;
    mainflag = item_kat_magic;
    flags = item_ring;
    visual = "ItMi_Ring_03.3ds";
    visual_skin = 0;
    material = mat_metal;
    on_equip = equip_schutzring_total1;
    on_unequip = unequip_schutzring_total1;
    value = 800;
    description = "Êîëüöî ìàëîé íåâèäèìîñòè";
    text = "";
    count = 0;
    text[1] = name_prot_magic;
    count[1] = 1;
    text[2] = name_prot_fire;
    count[2] = 3;
    text[3] = name_prot_point;
    count[3] = 5;
    text[4] = name_prot_edge;
    count[4] = 5;
    text[5] = name_value;
    count[5] = value;
};

func void equip_schutzring_total1() {
    self.protection[prot_edge] /*2*/ += 5;
    self.protection[prot_blunt] /*1*/ += 5;
    self.protection[prot_point] /*6*/ += 5;
    self.protection[prot_fire] /*3*/ += 3;
    self.protection[prot_magic] /*5*/ += 1;
};

func void unequip_schutzring_total1() {
    self.protection[prot_edge] /*2*/ -= 5;
    self.protection[prot_blunt] /*1*/ -= 5;
    self.protection[prot_point] /*6*/ -= 5;
    self.protection[prot_fire] /*3*/ -= 3;
    self.protection[prot_magic] /*5*/ -= 1;
};

instance schutzring_total2(c_item) {
    name = name_ring;
    mainflag = item_kat_magic;
    flags = item_ring;
    visual = "ItMi_Ring_03.3ds";
    visual_skin = 0;
    material = mat_metal;
    on_equip = equip_schutzring_total2;
    on_unequip = unequip_schutzring_total2;
    value = 1000;
    description = "Êîëüöî âåëèêîé íåâèäèìîñòè";
    text = "";
    count = 0;
    text[1] = name_prot_magic;
    count[1] = 3;
    text[2] = name_prot_fire;
    count[2] = 5;
    text[3] = name_prot_point;
    count[3] = 10;
    text[4] = name_prot_edge;
    count[4] = 10;
    text[5] = name_value;
    count[5] = value;
};

func void equip_schutzring_total2() {
    self.protection[prot_edge] /*2*/ += 10;
    self.protection[prot_blunt] /*1*/ += 10;
    self.protection[prot_point] /*6*/ += 10;
    self.protection[prot_fire] /*3*/ += 5;
    self.protection[prot_magic] /*5*/ += 3;
};

func void unequip_schutzring_total2() {
    self.protection[prot_edge] /*2*/ -= 10;
    self.protection[prot_blunt] /*1*/ -= 10;
    self.protection[prot_point] /*6*/ -= 10;
    self.protection[prot_fire] /*3*/ -= 5;
    self.protection[prot_magic] /*5*/ -= 3;
};

instance ring_des_geschicks(c_item) {
    name = name_ring;
    mainflag = item_kat_magic;
    flags = item_ring;
    visual = "ItMi_Ring_01.3ds";
    visual_skin = 0;
    material = mat_metal;
    on_equip = equip_ring_des_geschicks;
    on_unequip = unequip_ring_des_geschicks;
    value = 160;
    description = "Êîëüöî ìàëîé ëîâêîñòè";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_bonus_dex;
    count[2] = 5;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void equip_ring_des_geschicks() {
    npc_changeattribute(self, atr_dexterity, 5);
};

func void unequip_ring_des_geschicks() {
    npc_changeattribute(self, atr_dexterity, -5);
};

instance ring_des_geschicks2(c_item) {
    name = name_ring;
    mainflag = item_kat_magic;
    flags = item_ring;
    visual = "ItMi_Ring_02.3ds";
    visual_skin = 0;
    material = mat_metal;
    on_equip = equip_ring_des_geschicks2;
    on_unequip = unequip_ring_des_geschicks2;
    value = 240;
    description = "Êîëüöî âåëèêîé ëîâêîñòè";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_bonus_dex;
    count[2] = 10;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void equip_ring_des_geschicks2() {
    npc_changeattribute(self, atr_dexterity, 10);
};

func void unequip_ring_des_geschicks2() {
    npc_changeattribute(self, atr_dexterity, -10);
};

instance ring_des_lebens(c_item) {
    name = name_ring;
    mainflag = item_kat_magic;
    flags = item_ring;
    visual = "ItMi_Ring_01.3ds";
    visual_skin = 0;
    material = mat_metal;
    on_equip = equip_ring_des_lebens;
    on_unequip = unequip_ring_des_lebens;
    value = 180;
    description = "Êîëüöî æèçíè";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_bonus_hp;
    count[2] = 10;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void equip_ring_des_lebens() {
    self.attribute[atr_hitpoints_max] /*1*/ = self.attribute[atr_hitpoints_max] /*1*/ + 10;
    self.attribute[atr_hitpoints] /*0*/ = self.attribute[atr_hitpoints] /*0*/ + 10;
};

func void unequip_ring_des_lebens() {
    self.attribute[atr_hitpoints_max] /*1*/ = self.attribute[atr_hitpoints_max] /*1*/ - 10;
    if (self.attribute[atr_hitpoints] /*0*/ > 11) {
        self.attribute[atr_hitpoints] /*0*/ = self.attribute[atr_hitpoints] /*0*/ - 10;
    }
    else {
        self.attribute[atr_hitpoints] /*0*/ = 2;
    };
};

instance ring_des_lebens2(c_item) {
    name = name_ring;
    mainflag = item_kat_magic;
    flags = item_ring;
    visual = "ItMi_Ring_02.3ds";
    visual_skin = 0;
    material = mat_metal;
    on_equip = equip_ring_des_lebens2;
    on_unequip = unequip_ring_des_lebens2;
    value = 360;
    description = "Êîëüöî âåëèêîé æèçíè";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_bonus_hp;
    count[2] = 20;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void equip_ring_des_lebens2() {
    self.attribute[atr_hitpoints_max] /*1*/ = self.attribute[atr_hitpoints_max] /*1*/ + 20;
    self.attribute[atr_hitpoints] /*0*/ = self.attribute[atr_hitpoints] /*0*/ + 20;
};

func void unequip_ring_des_lebens2() {
    self.attribute[atr_hitpoints_max] /*1*/ = self.attribute[atr_hitpoints_max] /*1*/ - 20;
    if (self.attribute[atr_hitpoints] /*0*/ > 21) {
        self.attribute[atr_hitpoints] /*0*/ = self.attribute[atr_hitpoints] /*0*/ - 20;
    }
    else {
        self.attribute[atr_hitpoints] /*0*/ = 2;
    };
};

instance staerkering(c_item) {
    name = name_ring;
    mainflag = item_kat_magic;
    flags = item_ring;
    visual = "ItMi_Ring_01.3ds";
    visual_skin = 0;
    material = mat_metal;
    on_equip = equip_staerkering;
    on_unequip = unequip_staerkering;
    value = 160;
    description = "Êîëüöî ìîãóùåñòâà";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_bonus_str;
    count[2] = 5;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void equip_staerkering() {
    npc_changeattribute(self, atr_strength, 5);
};

func void unequip_staerkering() {
    npc_changeattribute(self, atr_strength, -5);
};

instance staerkering2(c_item) {
    name = name_ring;
    mainflag = item_kat_magic;
    flags = item_ring;
    visual = "ItMi_Ring_02.3ds";
    visual_skin = 0;
    material = mat_metal;
    on_equip = equip_staerkering2;
    on_unequip = unequip_staerkering2;
    value = 240;
    description = "Êîëüöî ñèëû";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_bonus_str;
    count[2] = 10;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void equip_staerkering2() {
    npc_changeattribute(self, atr_strength, 10);
};

func void unequip_staerkering2() {
    npc_changeattribute(self, atr_strength, -10);
};

instance ring_der_magie(c_item) {
    name = name_ring;
    mainflag = item_kat_magic;
    flags = item_ring;
    visual = "ItMi_Ring_02.3ds";
    visual_skin = 0;
    material = mat_metal;
    on_equip = equip_ring_der_magie;
    on_unequip = unequip_ring_der_magie;
    value = 200;
    description = "Êîëüöî ìàãèè";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_bonus_mana;
    count[2] = 10;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void equip_ring_der_magie() {
    self.attribute[atr_mana] /*2*/ = self.attribute[atr_mana] /*2*/ + 10;
    self.attribute[atr_mana_max] /*3*/ = self.attribute[atr_mana_max] /*3*/ + 10;
};

func void unequip_ring_der_magie() {
    self.attribute[atr_mana] /*2*/ = self.attribute[atr_mana] /*2*/ - 10;
    self.attribute[atr_mana_max] /*3*/ = self.attribute[atr_mana_max] /*3*/ - 10;
};

instance ring_der_erleuchtung(c_item) {
    name = name_ring;
    mainflag = item_kat_magic;
    flags = item_ring;
    visual = "ItMi_Ring_03.3ds";
    visual_skin = 0;
    material = mat_metal;
    on_equip = equip_ring_der_erleuchtung;
    on_unequip = unequip_ring_der_erleuchtung;
    value = 500;
    description = "Êîëüöî îçàðåíèÿ";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_bonus_mana;
    count[2] = 15;
    text[3] = name_bonus_hp;
    count[3] = 15;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void equip_ring_der_erleuchtung() {
    self.attribute[atr_mana] /*2*/ = self.attribute[atr_mana] /*2*/ + 15;
    self.attribute[atr_mana_max] /*3*/ = self.attribute[atr_mana_max] /*3*/ + 15;
    self.attribute[atr_hitpoints] /*0*/ = self.attribute[atr_hitpoints] /*0*/ + 15;
    self.attribute[atr_hitpoints_max] /*1*/ = self.attribute[atr_hitpoints_max] /*1*/ + 15;
};

func void unequip_ring_der_erleuchtung() {
    self.attribute[atr_mana] /*2*/ = self.attribute[atr_mana] /*2*/ - 15;
    self.attribute[atr_mana_max] /*3*/ = self.attribute[atr_mana_max] /*3*/ - 15;
    self.attribute[atr_hitpoints_max] /*1*/ = self.attribute[atr_hitpoints_max] /*1*/ - 15;
    if (self.attribute[atr_hitpoints] /*0*/ > 16) {
        self.attribute[atr_hitpoints] /*0*/ = self.attribute[atr_hitpoints] /*0*/ - 15;
    }
    else {
        self.attribute[atr_hitpoints] /*0*/ = 2;
    };
};

instance machtring(c_item) {
    name = name_ring;
    mainflag = item_kat_magic;
    flags = item_ring;
    visual = "ItMi_Ring_03.3ds";
    visual_skin = 0;
    material = mat_metal;
    on_equip = equip_machtring;
    on_unequip = unequip_machtring;
    value = 300;
    description = "Êîëüöî âîèíñêîãî ìîãóùåñòâà";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_bonus_str;
    count[2] = 4;
    text[3] = name_bonus_dex;
    count[3] = 4;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

func void equip_machtring() {
    npc_changeattribute(self, atr_strength, 4);
    npc_changeattribute(self, atr_dexterity, 4);
};

func void unequip_machtring() {
    npc_changeattribute(self, atr_strength, -4);
    npc_changeattribute(self, atr_dexterity, -4);
};

instance thorus_schwert(c_item) {
    name = "Ìå÷ Òîðóñà";
    mainflag = item_kat_nf;
    flags = item_2hd_swd;
    owner = grd_200_thorus;
    visual = "ItMw_2H_Sword_01.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 75;
    damagetotal = 90;
    damagetype = dam_edge;
    range = 150;
    value = 500;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_twohanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance innos_zorn(c_item) {
    name = "Ãíåâ Èííîñà";
    mainflag = item_kat_nf;
    flags = item_2hd_swd;
    owner = ebr_100_gomez;
    visual = "ItMw_2H_Sword_Heavy_03.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 90;
    damagetotal = 110;
    damagetype = dam_edge;
    range = 160;
    value = 570;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_twohanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance scars_schwert(c_item) {
    name = "Ìå÷ Ñêàðà";
    mainflag = item_kat_nf;
    flags = item_swd;
    owner = ebr_101_scar;
    visual = "ItMw_1H_Sword_Bastard_04.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 70;
    damagetotal = 85;
    damagetype = dam_edge;
    range = 130;
    value = 460;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance artos_schwert(c_item) {
    name = "Ìå÷ Àðòî";
    mainflag = item_kat_nf;
    flags = item_swd;
    owner = ebr_102_arto;
    visual = "ItMw_1H_Sword_Long_02.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 50;
    damagetotal = 65;
    damagetype = dam_edge;
    range = 100;
    value = 360;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance rabenrecht(c_item) {
    name = "Ñóä Ðàâåíà";
    mainflag = item_kat_nf;
    flags = item_swd;
    owner = ebr_105_raven;
    visual = "ItMw_1H_Sword_Broad_04.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 55;
    damagetotal = 70;
    damagetype = dam_edge;
    range = 130;
    value = 400;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance prankenhieb(c_item) {
    name = "Óäàð ëàïû";
    mainflag = item_kat_nf;
    flags = item_swd;
    owner = ebr_106_bartholo;
    visual = "ItMw_1H_Sword_Long_05.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 40;
    damagetotal = 55;
    damagetype = dam_edge;
    range = 100;
    value = 300;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance diegos_bogen(c_item) {
    name = "Ëóê Äèåãî";
    mainflag = item_kat_ff;
    flags = item_bow;
    munition = itamarrow /*4894*/;
    owner = pc_thief;
    visual = "ItRwLongbow.mms";
    material = mat_wood;
    cond_atr[2] = atr_dexterity;
    cond_value[2] = 45;
    damagetotal = 70;
    damagetype = dam_point;
    value = 390;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_dex_needed;
    count[3] = cond_value[2];
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance whistlers_schwert(c_item) {
    name = "Ìå÷ Óèñòëåðà";
    mainflag = item_kat_nf;
    flags = item_swd;
    visual = "ItMw_1H_Sword_02.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 15;
    damagetotal = 20;
    damagetype = dam_edge;
    range = 100;
    value = 110;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance stab_des_lichts(c_item) {
    name = "Ïîñîõ ñâåòà";
    mainflag = item_kat_nf;
    flags = item_2hd_axe;
    owner = gur_1200_yberion;
    visual = "ItMw_2H_Staff_03.3DS";
    material = mat_wood;
    cond_atr[2] = atr_strength;
    cond_value[2] = 45;
    damagetotal = 65;
    damagetype = dam_blunt;
    range = 160;
    value = 350;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_twohanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance kaloms_schwert(c_item) {
    name = "Ìå÷ Ãàëîìà";
    mainflag = item_kat_nf;
    flags = item_swd;
    owner = gur_1201_corkalom;
    visual = "ItMw_1H_Sword_05.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 55;
    damagetotal = 70;
    damagetype = dam_edge;
    range = 100;
    value = 400;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance streitschlichter(c_item) {
    name = "Óðàâíèâàòåëü Ëåñòåðà";
    mainflag = item_kat_nf;
    flags = item_axe;
    owner = pc_psionic;
    visual = "ItMw_1H_Mace_War_02.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 40;
    damagetotal = 60;
    damagetype = dam_blunt;
    range = 90;
    value = 340;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance roter_wind(c_item) {
    name = "Êðàñíûé âåòåð";
    mainflag = item_kat_nf;
    flags = item_2hd_swd;
    owner = gur_1202_corangar;
    visual = "ItMw_2H_Sword_02.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 80;
    damagetotal = 105;
    damagetype = dam_edge;
    range = 140;
    value = 570;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_twohanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance namibs_keule(c_item) {
    name = "Äóáèíà Íàìèáà";
    mainflag = item_kat_nf;
    flags = item_axe;
    owner = gur_1204_baalnamib;
    visual = "ItMw_1H_Mace_01.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 40;
    damagetotal = 55;
    damagetype = dam_blunt;
    range = 90;
    value = 300;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance oruns_keule(c_item) {
    name = "Äóáèíà Îðàíà";
    mainflag = item_kat_nf;
    flags = item_axe;
    owner = gur_1209_baalorun;
    visual = "ItMw_1H_Mace_02.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 50;
    damagetotal = 60;
    damagetype = dam_blunt;
    range = 90;
    value = 330;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance fortunos_keule(c_item) {
    name = "Äóáèíà Ôîðòóíî";
    mainflag = item_kat_nf;
    flags = item_axe;
    owner = nov_1357_fortuno;
    visual = "ItMw_1H_Mace_03.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 15;
    damagetotal = 20;
    damagetype = dam_blunt;
    range = 90;
    value = 110;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance lees_axt(c_item) {
    name = "Òîïîð Ëè";
    mainflag = item_kat_nf;
    flags = item_2hd_axe;
    owner = sld_700_lee;
    visual = "ItMw_2H_Axe_Heavy_01.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 95;
    damagetotal = 105;
    damagetype = dam_edge;
    range = 130;
    value = 560;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_twohanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance oriks_axt(c_item) {
    name = "Òîïîð Îðèêà";
    mainflag = item_kat_nf;
    flags = item_2hd_axe;
    owner = sld_701_orik;
    visual = "ItMw_2H_Axe_Heavy_02.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 90;
    damagetotal = 95;
    damagetype = dam_edge;
    range = 130;
    value = 540;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_twohanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance torlofs_axt(c_item) {
    name = "Òîïîð Òîðëîôà";
    mainflag = item_kat_nf;
    flags = item_2hd_axe;
    owner = sld_737_torlof;
    visual = "ItMw_2H_Axe_Heavy_03.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 85;
    damagetotal = 99;
    damagetype = dam_edge;
    range = 130;
    value = 550;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_twohanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance cords_spalter(c_item) {
    name = "Ðàñêàëûâàòåëü Êîðäà";
    mainflag = item_kat_nf;
    flags = item_axe;
    owner = sld_709_cord;
    visual = "ItMw_1H_Axe_02.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 50;
    damagetotal = 60;
    damagetype = dam_edge;
    range = 100;
    value = 310;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance gorns_rache(c_item) {
    name = "Ìåñòü Ãîðíà";
    mainflag = item_kat_nf;
    flags = item_2hd_axe;
    owner = pc_fighter;
    visual = "ItMw_2H_Axe_Heavy_03.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 80;
    damagetotal = 100;
    damagetype = dam_edge;
    range = 130;
    value = 560;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_twohanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance lares_axt(c_item) {
    name = "Òîïîð Ëàðñà";
    mainflag = item_kat_nf;
    flags = item_axe;
    owner = org_801_lares;
    visual = "ItMw_1H_Axe_02.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 45;
    damagetotal = 65;
    damagetype = dam_edge;
    range = 100;
    value = 340;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance wolfs_bogen(c_item) {
    name = "Ëóê Âîëêà";
    mainflag = item_kat_ff;
    flags = item_bow;
    munition = itamarrow /*4894*/;
    owner = org_855_wolf;
    visual = "ItRwLongbow.mms";
    material = mat_wood;
    cond_atr[2] = atr_dexterity;
    cond_value[2] = 35;
    damagetotal = 35;
    damagetype = dam_point;
    value = 200;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_dex_needed;
    count[3] = cond_value[2];
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance silas_axt(c_item) {
    name = "Òîïîð Ñèëàñà";
    mainflag = item_kat_nf;
    flags = item_axe;
    owner = org_841_silas;
    visual = "ItMw_1H_Axe_03.3DS";
    material = mat_metal;
    cond_atr[2] = atr_strength;
    cond_value[2] = 40;
    damagetotal = 55;
    damagetype = dam_edge;
    range = 100;
    value = 290;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_onehanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance heerscherstab(c_item) {
    name = "Ñêèïåòð";
    mainflag = item_kat_nf;
    flags = item_2hd_axe;
    owner = bau_900_ricelord;
    visual = "ItMw_2H_Staff_02.3DS";
    material = mat_wood;
    cond_atr[2] = atr_strength;
    cond_value[2] = 20;
    damagetotal = 26;
    damagetype = dam_edge;
    range = 150;
    value = 150;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = name_damage;
    count[2] = damagetotal;
    text[3] = name_str_needed;
    count[3] = cond_value[2];
    text[4] = name_twohanded;
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance itwr_book_circle_01(c_item) {
    name = "Ïåðâûé êðóã";
    mainflag = item_kat_docs;
    flags = 0;
    visual = "ItWr_Book_02_03.3ds";
    material = mat_leather;
    scemename = "MAP";
    on_state = useitwr_book_circle_01;
    value = 50;
    description = "Ïåðâûé êðóã ìàãèè";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

const string itwr_book_circle_01_1 = "Ïåðâûé êðóã";

const string itwr_book_circle_01_2 = "Êîãäà áîãè ðåøèëè äàðîâàòü ÷åëîâå÷åñòâó ìàãèþ, îíè çàîäíî íàó÷èëè èõ è ìàñòåðñòâó èçãîòîâëåíèÿ ðóí. Ñëóãè áîæüè âçÿëè íà ñåáÿ îáÿçàííîñòè ïî ñîçäàíèþ ýòèõ ìîãóùåñòâåííûõ àðòåôàêòîâ è èõ èñïîëüçîâàíèþ. Êàæäûé èç êðóãîâ ìàãîâ îïðåäåëÿåò äëÿ ñåáÿ, êàêóþ ìàãèþ îí ìîæåò ïîñòè÷ü è êàêîé áóäåò ïîëüçîâàòüñÿ.";

const string itwr_book_circle_01_3 = "Ñâåò";

const string itwr_book_circle_01_4 = "Ïåðâûé äàð Èííîñà ðîäó ÷åëîâå÷åñêîìó. Ñèÿþùèé øàð ñâåòà ïîÿâëÿåòñÿ íàä ãîëîâîé ìàãà.";

const string itwr_book_circle_01_5 = "Ëåäÿíàÿ ñòðåëà";

const string itwr_book_circle_01_6 = "Ñòðåëà ìàãè÷åñêîé ýíåðãèè.";

const string itwr_book_circle_01_7 = "Îãíåííàÿ ñòðåëà";

const string itwr_book_circle_01_8 = "Ñòðåëà ìàãè÷åñêîãî îãíÿ.";

func void useitwr_book_circle_01() {
    var int ndocid;
    var string text;
    var string text_1;
    var string text_2;

    text = concatstrings(name_manakosten, inttostring(spl_sendcast_light));
    text_1 = concatstrings(name_manakosten, inttostring(spl_sendcast_thunderbolt));
    text_2 = concatstrings(name_manakosten, inttostring(spl_sendcast_firebolt));
    ndocid = doc_create();
    doc_setpages(ndocid, 2);
    doc_setpage(ndocid, 0, "Book_Mage_L.tga", 0);
    doc_setpage(ndocid, 1, "Book_Mage_R.tga", 0);
    doc_setfont(ndocid, -1, font_book_heading);
    doc_setmargins(ndocid, 0, 275, 20, 30, 20, 1);
    doc_printline(ndocid, 0, itwr_book_circle_01_1);
    doc_printline(ndocid, 0, "---------------");
    doc_setfont(ndocid, -1, font_book_text);
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, itwr_book_circle_01_2);
    doc_setmargins(ndocid, -1, 30, 20, 275, 20, 1);
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, itwr_book_circle_01_3);
    doc_printline(ndocid, 1, "---------------");
    doc_printlines(ndocid, 1, itwr_book_circle_01_4);
    doc_printline(ndocid, 1, text);
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, itwr_book_circle_01_5);
    doc_printline(ndocid, 1, "---------------");
    doc_printlines(ndocid, 1, itwr_book_circle_01_6);
    doc_printline(ndocid, 1, text_1);
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, itwr_book_circle_01_7);
    doc_printline(ndocid, 1, "---------------");
    doc_printlines(ndocid, 1, itwr_book_circle_01_8);
    doc_printline(ndocid, 1, text_2);
    doc_show(ndocid);
};

instance itwr_book_circle_02(c_item) {
    name = "Âòîðîé êðóã";
    mainflag = item_kat_docs;
    flags = 0;
    visual = "ItWr_Book_02_03.3ds";
    material = mat_leather;
    scemename = "MAP";
    on_state = useitwr_book_circle_02;
    value = 100;
    description = "Âòîðîé êðóã ìàãèè";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

const string itwr_book_circle_02_1 = "Âòîðîé êðóã";

const string itwr_book_circle_02_2 = "Âñÿêàÿ ìàãèÿ èìååò ñâîèì íà÷àëîì ñèëó, çàêëþ÷åííóþ â ÷åëîâåêå. ×åëîâåê, èìåþùèé òàêèå ñèëû, íàçûâàåòñÿ ìàãîì.";

const string itwr_book_circle_02_3 = "Êàæäîå çàêëèíàíèå îòíèìàåò ó ìàãà ÷àñòü åãî ñèë. Ýòè ñèëû èìåíóþòñÿ ìàíîé.";

const string itwr_book_circle_02_4 = "Èñöåëåíèå";

const string itwr_book_circle_02_5 = "Óâèäåë Àäàíîñ, ÷òî ëþäè ãèáíóò è ÷òî ýòî òàê ïî âîëå Áåëüäæàðà. È ñêàçàë îí òîãäà: ÿ íå ñòàíó ïðîòèâèòüñÿ Áåëüäæàðó, íî äàì ÷åëîâåêó ñèëó èñöåëÿòü ñåáÿ.";

const string itwr_book_circle_02_6 = "Çàêëèíàíèå èñöåëÿåò ìàãà.";

const string itwr_book_circle_02_7 = "Çàêëèíàíèÿ ïîêðîâà";

func void useitwr_book_circle_02() {
    var int ndocid;
    var string text_1;

    text_1 = concatstrings(name_manakosten, inttostring(spl_healing_hp_per_mp));
    ndocid = doc_create();
    doc_setpages(ndocid, 2);
    doc_setpage(ndocid, 0, "Book_Mage_L.tga", 0);
    doc_setpage(ndocid, 1, "Book_Mage_R.tga", 0);
    doc_setfont(ndocid, -1, font_book_heading);
    doc_setmargins(ndocid, 0, 275, 20, 30, 20, 1);
    doc_printline(ndocid, 0, itwr_book_circle_02_1);
    doc_printline(ndocid, 0, "---------------");
    doc_setfont(ndocid, -1, font_book_text);
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, itwr_book_circle_02_2);
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, itwr_book_circle_02_3);
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, "");
    doc_setmargins(ndocid, -1, 30, 20, 275, 20, 1);
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, itwr_book_circle_02_4);
    doc_printline(ndocid, 1, "---------------");
    doc_printlines(ndocid, 1, itwr_book_circle_02_5);
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printlines(ndocid, 1, itwr_book_circle_02_6);
    doc_printline(ndocid, 1, itwr_book_circle_02_7);
    doc_printline(ndocid, 1, text_1);
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_show(ndocid);
};

instance itwr_book_circle_03(c_item) {
    name = "Òðåòèé êðóã";
    mainflag = item_kat_docs;
    flags = 0;
    visual = "ItWr_Book_02_03.3ds";
    material = mat_leather;
    scemename = "MAP";
    on_state = useitwr_book_circle_03;
    value = 150;
    description = "Òðåòèé êðóã ìàãèè";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

const string itwr_book_circle_03_1 = "Òðåòèé êðóã";

const string itwr_book_circle_03_2 = "Íåêîòîðûå çàêëèíàíèÿ ïîãëîùàþò îïðåäåëåííóþ ÷àñòü ìàãè÷åñêîé ñèëû. Òàêèå çàêëèíàíèÿ íàçûâàþò çàêëèíàíèÿìè çàðÿäà.";

const string itwr_book_circle_03_3 = "Äðóãèå çàêëèíàíèÿ ïðîäîëæàþò äåéñòâîâàòü äî òåõ ïîð, ïîêà ìàã ïîçâîëÿåò èì ÷åðïàòü ñâîþ ýíåðãèþ. Òàêèå çàêëèíàíèÿ ïðèíÿòî íàçûâàòü çàêëèíàíèÿìè ïîêðîâà.";

const string itwr_book_circle_03_4 = "Îãíåííûé øàð";

const string itwr_book_circle_03_5 = "Âòîðîé äàð Èííîñà äåòÿì îãíÿ. Îãíåííûé øàð èñïåïåëÿåò æåðòâó.";

const string itwr_book_circle_03_6 = "Çàêëèíàíèÿ çàðÿäà";

const string itwr_book_circle_03_7 = "Ëåäÿíàÿ ãëûáà";

const string itwr_book_circle_03_8 = "Æåðòâà çàêëþ÷àåòñÿ â ãëûáó ëüäà. Çàêëèíàíèå îòíîñèòñÿ ê õðàìó ìàãîâ âîäû.";

const string itwr_book_circle_03_9 = "Øàðîâàÿ ìîëíèÿ";

const string itwr_book_circle_03_10 = "Øàð ìàãè÷åñêîé ýíåðãèè.";

func void useitwr_book_circle_03() {
    var int ndocid;
    var string text;
    var string text_1;
    var string text_2;

    text = concatstrings(name_manakosten, inttostring(spl_sendcast_fireball));
    text_1 = concatstrings(name_manakosten, inttostring(spl_sendcast_icecube));
    text_2 = concatstrings(name_manakosten, inttostring(spl_sendcast_thunderball));
    ndocid = doc_create();
    doc_setpages(ndocid, 2);
    doc_setpage(ndocid, 0, "Book_Mage_L.tga", 0);
    doc_setpage(ndocid, 1, "Book_Mage_R.tga", 0);
    doc_setfont(ndocid, -1, font_book_heading);
    doc_setmargins(ndocid, 0, 275, 20, 30, 20, 1);
    doc_printline(ndocid, 0, itwr_book_circle_03_1);
    doc_printline(ndocid, 0, "---------------");
    doc_setfont(ndocid, -1, font_book_text);
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, itwr_book_circle_03_2);
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, itwr_book_circle_03_3);
    doc_setmargins(ndocid, -1, 30, 20, 275, 20, 1);
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, itwr_book_circle_03_4);
    doc_printline(ndocid, 1, "---------------");
    doc_printlines(ndocid, 1, itwr_book_circle_03_5);
    doc_printline(ndocid, 1, itwr_book_circle_03_6);
    doc_printline(ndocid, 1, text);
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, itwr_book_circle_03_7);
    doc_printline(ndocid, 1, "---------------");
    doc_printlines(ndocid, 1, itwr_book_circle_03_8);
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, text_1);
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, itwr_book_circle_03_9);
    doc_printline(ndocid, 1, "---------------");
    doc_printlines(ndocid, 1, itwr_book_circle_03_10);
    doc_printline(ndocid, 1, text_2);
    doc_show(ndocid);
};

instance itwr_book_circle_04(c_item) {
    name = "×åòâåðòûé êðóã";
    mainflag = item_kat_docs;
    flags = 0;
    visual = "ItWr_Book_02_03.3ds";
    material = mat_leather;
    scemename = "MAP";
    on_state = useitwr_book_circle_04;
    value = 200;
    description = "×åòâåðòûé êðóã ìàãèè";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

const string itwr_book_circle_04_1 = "×åòâåðòûé êðóã";

const string itwr_book_circle_04_2 = "Ìàãèÿ";

const string itwr_book_circle_04_3 = "òåëåïîðòàöèè";

const string itwr_book_circle_04_4 = "Îñîáåííîñòüþ äàííûõ ìàãè÷åñêèõ ôîðìóë ÿâëÿåòñÿ òî, ÷òî õîòÿ îíè òàêæå çàêëþ÷åíû â ðóíàõ, èñïîëüçîâàòü èõ ìîæåò ëþáîé ÷åëîâåê, îáëàäàþùèé ìàãè÷åñêèìè ñèëàìè. Ôîðìóëà ìîæåò áûòü àêòèâèðîâàíà ìãíîâåííî. Íèêàêèõ îãðàíè÷åíèé äëÿ ìàãèè òåëåïîðòàöèè íåò.";

const string itwr_book_circle_04_5 = "Îãíåííûé øòîðì";

const string itwr_book_circle_04_6 = "Ýòî çàêëèíàíèå ñõîäíî ñ îãíåííûì øàðîì, íî, ïîïàâ â îäíó æåðòâó, øòîðì ìîæåò ïåðåêèíóòüñÿ è íà äðóãóþ.";

const string itwr_book_circle_04_7 = "Çàêëèíàíèå çàðÿäà";

const string itwr_book_circle_04_8 = "Ìîëíèÿ";

const string itwr_book_circle_04_9 = "×åì äîëüøå çàêëèíàíèå ðàáîòàåò, òåì áîëüøå öåëåé ìîæåò ïîðàçèòü ìîëíèÿ. Ñèëó è íàïðàâëåíèå ìîëíèè êîíòðîëèðîâàòü ñëîæíî.";

const string itwr_book_circle_04_10 = "Ñìåðòü íåæèòè";

const string itwr_book_circle_04_11 = "Ýòî çàêëèíàíèå íàâåêè óìåðùâëÿåò âîññòàâøèõ ìåðòâåöîâ, ïîðîæäåíèé òüìû.";

func void useitwr_book_circle_04() {
    var int ndocid;
    var string text;
    var string text_1;
    var string text_2;

    text = concatstrings(name_manakosten, inttostring(spl_sendcast_firestorm));
    text_1 = concatstrings(name_manakosten, inttostring(spl_zapped_damage_per_sec));
    text_2 = concatstrings(name_manakosten, inttostring(spl_sendcast_destroyundead));
    ndocid = doc_create();
    doc_setpages(ndocid, 2);
    doc_setpage(ndocid, 0, "Book_Mage_L.tga", 0);
    doc_setpage(ndocid, 1, "Book_Mage_R.tga", 0);
    doc_setfont(ndocid, -1, font_book_heading);
    doc_setmargins(ndocid, 0, 275, 20, 30, 20, 1);
    doc_printline(ndocid, 0, itwr_book_circle_04_1);
    doc_printline(ndocid, 0, "---------------");
    doc_setfont(ndocid, -1, font_book_text);
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, itwr_book_circle_04_2);
    doc_printline(ndocid, 0, itwr_book_circle_04_3);
    doc_printline(ndocid, 0, "---------------");
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, itwr_book_circle_04_4);
    doc_setmargins(ndocid, -1, 30, 20, 275, 20, 1);
    doc_printline(ndocid, 1, itwr_book_circle_04_5);
    doc_printline(ndocid, 1, "---------------");
    doc_printlines(ndocid, 1, itwr_book_circle_04_6);
    doc_printline(ndocid, 1, itwr_book_circle_04_7);
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, text);
    doc_printline(ndocid, 1, itwr_book_circle_04_8);
    doc_printline(ndocid, 1, "---------------");
    doc_printlines(ndocid, 1, itwr_book_circle_04_9);
    doc_printline(ndocid, 1, text_1);
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, itwr_book_circle_04_10);
    doc_printline(ndocid, 1, "---------------");
    doc_printlines(ndocid, 1, itwr_book_circle_04_11);
    doc_printline(ndocid, 1, text_2);
    doc_show(ndocid);
};

instance itwr_book_circle_05(c_item) {
    name = "Ïÿòûé êðóã";
    mainflag = item_kat_docs;
    flags = 0;
    visual = "ItWr_Book_02_03.3ds";
    material = mat_leather;
    scemename = "MAP";
    on_state = useitwr_book_circle_05;
    value = 250;
    description = "Ïÿòûé êðóã ìàãèè";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

const string itwr_book_circle_05_1 = "Ïÿòûé êðóã";

const string itwr_book_circle_05_2 = "Îãíåííûé äîæäü";

const string itwr_book_circle_05_3 = "Ñèëû áîæåñòâåííîãî îãíÿ ïîðàæàþò âñå ñîçäàíèÿ âáëèçè ìàãà.";

const string itwr_book_circle_05_4 = "Ëåäÿíàÿ âîëíà";

const string itwr_book_circle_05_5 = "Ëåäÿíàÿ âîëíà ïîðàæàåò íåñêîëüêèõ ïðîòèâíèêîâ, ïàðàëèçóåò è íàíîñèò îùóòèìûé óùåðá èõ çäîðîâüþ.";

const string itwr_book_circle_05_6 = "Çàêëèíàíèå îòíîñèòñÿ ê õðàìó ìàãîâ âîäû.";

func void useitwr_book_circle_05() {
    var int ndocid;
    var string text_1;
    var string text_2;

    text_1 = concatstrings(name_manakosten, inttostring(spl_sendcast_firerain));
    text_2 = concatstrings(name_manakosten, inttostring(spl_sendcast_icewave));
    ndocid = doc_create();
    doc_setpages(ndocid, 2);
    doc_setpage(ndocid, 0, "Book_Mage_L.tga", 0);
    doc_setpage(ndocid, 1, "Book_Mage_R.tga", 0);
    doc_setfont(ndocid, -1, font_book_heading);
    doc_setmargins(ndocid, 0, 275, 20, 30, 20, 1);
    doc_printline(ndocid, 0, itwr_book_circle_05_1);
    doc_printline(ndocid, 0, "---------------");
    doc_setfont(ndocid, -1, font_book_text);
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, itwr_book_circle_05_2);
    doc_printline(ndocid, 0, "---------------");
    doc_printlines(ndocid, 0, itwr_book_circle_05_3);
    doc_printline(ndocid, 0, text_1);
    doc_setmargins(ndocid, -1, 30, 20, 275, 20, 1);
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, itwr_book_circle_05_4);
    doc_printline(ndocid, 1, "---------------");
    doc_printlines(ndocid, 1, itwr_book_circle_05_5);
    doc_printlines(ndocid, 1, itwr_book_circle_05_6);
    doc_printline(ndocid, 1, text_2);
    doc_show(ndocid);
};

instance itwr_book_circle_06(c_item) {
    name = "Øåñòîé êðóã";
    mainflag = item_kat_docs;
    flags = 0;
    visual = "ItWr_Book_02_03.3ds";
    material = mat_leather;
    scemename = "MAP";
    on_state = useitwr_book_circle_06;
    value = 300;
    description = "Øåñòîé êðóã ìàãèè";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

const string itwr_book_circle_06_1 = "Øåñòîé êðóã";

const string itwr_book_circle_06_2 = "Äûõàíèå ñìåðòè";

const string itwr_book_circle_06_3 = "Äûõàíèå Áåëüäæàðà. Îáëàêî ñìåðòåëüíîãî âîçäóõà, ñïîñîáíîå ìãíîâåííî óáèòü ëþáîå ñîçäàíèå.";

const string itwr_book_circle_06_4 = "Êîëüöî ñìåðòè";

const string itwr_book_circle_06_5 = "Âðÿä ëè ñîõðàíèëèñü õîòü êàêèå-òî çàïèñè î ðóíå, íåñóùåé ñèëû ÓÐÈÇÅËß";

const string itwr_book_circle_06_6 = "Èçâåñòíî òîëüêî, ÷òî ñèëû ýòè äàíû Áåëüäæàðîì.";

func void useitwr_book_circle_06() {
    var int ndocid;
    var string text;

    text = concatstrings(name_manakosten, inttostring(spl_sendcast_breathofdeath));
    ndocid = doc_create();
    doc_setpages(ndocid, 2);
    doc_setpage(ndocid, 0, "Book_Mage_L.tga", 0);
    doc_setpage(ndocid, 1, "Book_Mage_R.tga", 0);
    doc_setfont(ndocid, -1, font_book_heading);
    doc_setmargins(ndocid, 0, 275, 20, 30, 20, 1);
    doc_printline(ndocid, 0, itwr_book_circle_06_1);
    doc_printline(ndocid, 0, "---------------");
    doc_setfont(ndocid, -1, font_book_text);
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, itwr_book_circle_06_2);
    doc_printline(ndocid, 0, "---------------");
    doc_printlines(ndocid, 0, itwr_book_circle_06_3);
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, text);
    doc_setmargins(ndocid, -1, 30, 20, 275, 20, 1);
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, itwr_book_circle_06_4);
    doc_printline(ndocid, 1, "---------------");
    doc_printlines(ndocid, 1, itwr_book_circle_06_5);
    doc_printlines(ndocid, 1, itwr_book_circle_06_6);
    doc_printline(ndocid, 1, "");
    doc_show(ndocid);
};

instance goettergabe(c_item) {
    name = "Äàð Áîãîâ";
    mainflag = item_kat_docs;
    flags = 0;
    visual = "ItWr_Book_02_01.3ds";
    material = mat_leather;
    scemename = "MAP";
    on_state = usegoettergabe;
    value = 100;
    description = "Äàð Áîãîâ";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

const string goettergabe_1 = "Ìàãèÿ";

const string goettergabe_2 = "Äàð Áîãîâ";

const string goettergabe_3 = "×åëîâåê íà ïðîòÿæåíèè ìíîãèõ âåêîâ ïûòàåòñÿ ïîíÿòü ïðèðîäó è èñòîêè ìàãèè. Íî ãäå æå íà÷èíàòü ïîèñêè? Êàê âîîáùå îïèñàòü, ÷òî òàêîå ìàãèÿ? Ýòî ñàìàÿ ïðîòèâîðå÷èâàÿ ñóùíîñòü âî âñåëåííîé. Îíà ìîæåò óáèâàòü è èñöåëÿòü, ñîçäàâàòü è óíè÷òîæàòü.";

const string goettergabe_4 = "Êàê îíà âûãëÿäèò? Ãäå ÷åëîâåê ìîæåò îòûñêàòü åå, íåâèäèìóþ, íî óäèâèòåëüíî ìîãóùåñòâåííóþ? Ìàãèÿ - ýòî ìàãèÿ. Ýòî ñàìûé óäèâèòåëüíûé äàð áîãîâ òåì, êòî ìîæåò åãî èñïîëüçîâàòü. Öåëèòåëüíàÿ ñèëà, êîòîðóþ ìîãóò êîíòðîëèðîâàòü ëèøü åäèíèöû.";

const string goettergabe_5 = "Áàðòîñ Ëàðàíñêèé";

func void usegoettergabe() {
    var int ndocid;

    ndocid = doc_create();
    doc_setpages(ndocid, 2);
    doc_setpage(ndocid, 0, "Book_Mage_L.tga", 0);
    doc_setpage(ndocid, 1, "Book_Mage_R.tga", 0);
    doc_setfont(ndocid, -1, font_book_heading);
    doc_printline(ndocid, 0, goettergabe_1);
    doc_printline(ndocid, 0, "");
    doc_setmargins(ndocid, 0, 275, 20, 30, 20, 1);
    doc_printline(ndocid, 0, " ");
    doc_setfont(ndocid, -1, font_book_text);
    doc_printline(ndocid, 0, goettergabe_2);
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, goettergabe_3);
    doc_setmargins(ndocid, -1, 30, 20, 275, 20, 1);
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printlines(ndocid, 1, goettergabe_4);
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, goettergabe_5);
    doc_show(ndocid);
};

instance geheimnisse_der_zauberei(c_item) {
    name = "Ñåêðåòû ìàãèè";
    mainflag = item_kat_docs;
    flags = 0;
    visual = "ItWr_Book_02_02.3ds";
    material = mat_leather;
    scemename = "MAP";
    on_state = usegeheimnisse_der_zauberei;
    value = 100;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

const string geheimnisse_der_zauberei_1 = "Ñåêðåòû ìàãèè";

const string geheimnisse_der_zauberei_2 = "Ìàãèÿ íå ñîêðûòà â ñàìîì ìàãå, îí ïðîñòî îáëàäàåò óìåíèåì ðàáîòàòü ñ íåé. Îí óìååò âëèÿòü íà ìàãèþ è íàïðàâëÿòü åå. Ïðàêòèêóþùèé ýòî èñêóññòâî äîëæåí áûòü ñïîñîáåí èñïîëüçîâàòü ñâîé äóõ, êàê èíñòðóìåíò.";

const string geheimnisse_der_zauberei_3 = "Äóõ åãî ñëóæèò âìåñòèëèùåì äëÿ ìå÷óùèõñÿ âî âñåõ íàïðàâëåíèÿõ ìàãè÷åñêèõ ñèë. Îí ñîáèðàåò èõ, ôîêóñèðóåò è îòïðàâëÿåò â òîì ìèð, êîòîðûé ìû çíàåì. Â òàêèå ìîìåíòû äóõ ìàãà âîñïàðÿåò è âèäèò òîò, äðóãîé ìèð, îáèòàëèùå ñèëû. Ïîìíèòå, ìàã òîëüêî ïðèíîñèò åå è ïðèäàåò åé ôîðìó.";

const string geheimnisse_der_zauberei_4 = "Áàðòîñ Ëàðàíñêèé";

func void usegeheimnisse_der_zauberei() {
    var int ndocid;

    ndocid = doc_create();
    doc_setpages(ndocid, 2);
    doc_setpage(ndocid, 0, "Book_Mage_L.tga", 0);
    doc_setpage(ndocid, 1, "Book_Mage_R.tga", 0);
    doc_setfont(ndocid, -1, font_book_text);
    doc_setmargins(ndocid, 0, 275, 20, 30, 20, 1);
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, geheimnisse_der_zauberei_1);
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, geheimnisse_der_zauberei_2);
    doc_setmargins(ndocid, -1, 30, 20, 275, 20, 1);
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printlines(ndocid, 1, geheimnisse_der_zauberei_3);
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, geheimnisse_der_zauberei_4);
    doc_show(ndocid);
};

instance machtvolle_kunst(c_item) {
    name = "Ìîãóùåñòâåííîå èñêóññòâî";
    mainflag = item_kat_docs;
    flags = 0;
    visual = "ItWr_Book_02_03.3ds";
    material = mat_leather;
    scemename = "MAP";
    on_state = usemachtvolle_kunst;
    value = 100;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

const string machtvolle_kunst_1 = "Ìîãóùåñòâåííîå èñêóññòâî";

const string machtvolle_kunst_2 = "Ðàáîòà ìàãà";

const string machtvolle_kunst_3 = "Ñïîñîáíîñòü ìàãà êîíòðîëèðîâàòü áîæåñòâåííóþ ýíåðãèþ ñïîñîáíà ðàçâèâàòüñÿ. Ñíà÷àëà îíà ïîÿâëÿåòñÿ, êàê ðîñòîê èç çåðíà. Íåîáõîäèìî ëåëåÿòü åãî, èíà÷å îí ïîãèáíåò. Íî êàê òîëüêî ïîáåã îêðåïíåò, ïîÿâÿòñÿ è ïåðâûå ïëîäû.";

const string machtvolle_kunst_4 = "Ñ êàæäûì äíåì ýòà ñïîñîáíîñòü áóäåò ðàñòè âñå áûñòðåå è áûñòðåå. Âíà÷àëå ñèëà ìîæåò áûòü ìàëîé, íî äàéòå åé âðåìÿ, è îíà âûðàñòåò äî ïðåäåëîâ, êîòîðûå òðóäíî ïðåäñêàçàòü. Íàïðàâëÿòü è îòòà÷èâàòü ýòó ñïîñîáíîñòü è ýòó ñèëó äî òîãî ìîìåíòà, êàê îíà äîñòèãíåò ñîâåðøåíñòâà - âîò ñâÿòàÿ îáÿçàííîñòü ìàãà. Ïîòîìó êàê áðîøåííîå áîãàìè ñåìÿ ñìåðòíîìó ïðèíÿòü è âûðàñòèòü äîëæíî.";

func void usemachtvolle_kunst() {
    var int ndocid;

    ndocid = doc_create();
    doc_setpages(ndocid, 2);
    doc_setpage(ndocid, 0, "Book_Mage_L.tga", 0);
    doc_setpage(ndocid, 1, "Book_Mage_R.tga", 0);
    doc_setfont(ndocid, -1, font_book_heading);
    doc_setmargins(ndocid, 0, 275, 20, 30, 20, 1);
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, machtvolle_kunst_1);
    doc_printline(ndocid, 0, "");
    doc_setfont(ndocid, -1, font_book_text);
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, machtvolle_kunst_2);
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, machtvolle_kunst_3);
    doc_setmargins(ndocid, -1, 30, 20, 275, 20, 1);
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printlines(ndocid, 1, machtvolle_kunst_4);
    doc_show(ndocid);
};

instance elementare_arcanei(c_item) {
    name = "Îñíîâû Ìàãèè";
    mainflag = item_kat_docs;
    flags = 0;
    visual = "ItWr_Book_02_04.3ds";
    material = mat_leather;
    scemename = "MAP";
    on_state = useelementare_arcanei;
    value = 100;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

const string elementare_arcanei_1 = "Îñíîâû Ìàãèè";

const string elementare_arcanei_2 = "Ìåñòî ìàãèè â ìèðîïîðÿäêå";

const string elementare_arcanei_3 = "×òîáû âûÿñíèòü ìåñòî ìàãèè è åå ñâÿçü ñ îñíîâíûìè ýëåìåíòàìè, áûëî ïðîâåäåíî ìíîãî èññëåäîâàíèé. Âñå îíè ñõîäÿòñÿ â îäíîì: ìàãèÿ ñòîèò âûøå âñåõ ýëåìåíòîâ. Îíà ìîæåò òðàíñôîðìèðîâàòü èõ, èçìåíÿòü ôîðìó, òî åñòü ïîâåëåâàòü èìè.";

const string elementare_arcanei_4 = "Êàæäûé ýëåìåíò, åñëè ðàññìàòðèâàòü åãî â ïåðâîðîäíîé ôîðìå, èìååò ñâÿçü ñ ìàãèåé. Ïîäîáíûå ñâÿçè ìîæíî ïðîñëåäèòü ëèøü â íåêîòîðûõ ìåñòàõ, è ýòè ìåñòà ðàçûñêèâàþò ìíîãèå. Ñïîñîáíîñòü ìàãà ñîçäàâàòü èëè ïðèçûâàòü ýëåìåíòû, êàçàëîñü áû, èç ïóñòîòû, åùå ðàç äîêàçûâàåò, ÷òî ìàãèÿ ÿâëÿåòñÿ ñàìîé ìîãóùåñòâåííîé ñèëîé âî âñåëåííîé.";

func void useelementare_arcanei() {
    var int ndocid;

    ndocid = doc_create();
    doc_setpages(ndocid, 2);
    doc_setpage(ndocid, 0, "Book_Mage_L.tga", 0);
    doc_setpage(ndocid, 1, "Book_Mage_R.tga", 0);
    doc_setfont(ndocid, -1, font_book_heading);
    doc_setmargins(ndocid, 0, 275, 20, 30, 20, 1);
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, elementare_arcanei_1);
    doc_printline(ndocid, 0, "");
    doc_setfont(ndocid, -1, font_book_text);
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, elementare_arcanei_2);
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, elementare_arcanei_3);
    doc_setmargins(ndocid, -1, 30, 20, 275, 20, 1);
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printlines(ndocid, 1, elementare_arcanei_4);
    doc_show(ndocid);
};

instance wahre_macht(c_item) {
    name = "Íàñòîÿùàÿ ñèëà";
    mainflag = item_kat_docs;
    flags = 0;
    visual = "ItWr_Book_02_05.3ds";
    material = mat_leather;
    scemename = "MAP";
    on_state = usewahre_macht;
    value = 100;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

const string wahre_macht_1 = "Íàñòîÿùàÿ ñèëà";

const string wahre_macht_2 = "Ñâÿòàÿ îáÿçàííîñòü";

const string wahre_macht_3 = "Ìàã íå ïîõîæ íà îáû÷íûõ ëþäåé. Îí îáëàäàåò ñïîñîáíîñòüþ âëèÿòü íà áîæåñòâåííóþ ñèëó, à ïîñåìó è íåïîäâëàñòåí çàêîíàì ïðèðîäû, êîòîðûì ïîä÷èíÿåòñÿ êàæäûé ñìåðòíûé.";

const string wahre_macht_4 = "Êîãäà ìàã äîñòèãàåò òîãî óðîâíÿ, ïîçâîëÿþùåãî åìó ïîäíÿòüñÿ íàä ðàìêàìè îáû÷íîãî ñóùåñòâîâàíèÿ, îí ìîæåò âîéòè â äðóãîé ìèð,  íåâåäîìûé ïðîñòûì ñìåðòíûì. Ìàã ìîæåò ïðîðâàòüñÿ ÷åðåç ãðàíèöû âðåìåíè è ïðîñòðàíñòâà, è äàæå ñìåðòü, îñíîâà âñåãî ñóùåãî, íå ñóìååò îñòàíîâèòü åãî.";

func void usewahre_macht() {
    var int ndocid;

    ndocid = doc_create();
    doc_setpages(ndocid, 2);
    doc_setpage(ndocid, 0, "Book_Mage_L.tga", 0);
    doc_setpage(ndocid, 1, "Book_Mage_R.tga", 0);
    doc_setfont(ndocid, -1, font_book_heading);
    doc_setmargins(ndocid, 0, 275, 20, 30, 20, 1);
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, wahre_macht_1);
    doc_printline(ndocid, 0, "");
    doc_setfont(ndocid, -1, font_book_text);
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, wahre_macht_2);
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, wahre_macht_3);
    doc_setmargins(ndocid, -1, 30, 20, 275, 20, 1);
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printlines(ndocid, 1, wahre_macht_4);
    doc_show(ndocid);
};

instance das_magische_erz(c_item) {
    name = "Ìàãè÷åñêàÿ ðóäà";
    mainflag = item_kat_docs;
    flags = 0;
    visual = "ItWr_Book_02_02.3ds";
    material = mat_leather;
    scemename = "MAP";
    on_state = usedas_magische_erz;
    value = 100;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

const string das_magische_erz_1 = "Ìàãè÷åñêàÿ ðóäà";

const string das_magische_erz_2 = "Ëó÷øåå îðóæèå äåëàþò èç ðóäû Õîðèíèñà. Îíà ïîðàçèòåëüíî ÷èñòà è ïðîïèòàíà ìàãèåé. Ïðî÷íîñòü åå óäèâèòåëüíà, ñêîëü óäèâèòåëüíà è ìÿãêîñòü ïðè îáðàáîòêå. Äëÿ ëþáîãî ìå÷à, ïóñòü ñäåëàííîãî è èç ñàìîé ïðî÷íîé ñòàëè, âñòðå÷à ñî ñâîèì ñîáðàòîì, âûêîâàííûì èç ìàãè÷åñêîé ðóäû, ñòàíîâèòñÿ õîðîøèì èñïûòàíèåì. Íåîáõîäèìî óïîìÿíóòü è î âûñîêîé ñòîèìîñòè ýòîé ðóäû, äîáûâàåìîé ñ îãðîìíûì òðóäîì íà áîëüøîé ãëóáèíå.";

const string das_magische_erz_3 = "Òàêîå îðóæèå ïðîáèâàåò ëþáîé ùèò è ëþáûå äîñïåõè. Êîðîëè è ãåðîè èñïîëüçóþò òàêîå îðóæèå è ïëàòÿò çà íåãî íåìàëûå ñóììû ïî âñåé Ìèðòàíå. Íî ýòî ñïðàâåäëèâàÿ öåíà. ×òîáû äîáûòü ðóäó èç êàìíÿ, òðåáóåòñÿ ïðèëîæèòü ìíîãî óñèëèé. Èíîãäà êàæåòñÿ, ÷òî ñàìà ðóäà ñðàæàåòñÿ ñ ÷åëîâåêîì, íå æåëàÿ ïîêèäàòü çåìíûå íåäðà.";

func void usedas_magische_erz() {
    var int ndocid;

    ndocid = doc_create();
    doc_setpages(ndocid, 2);
    doc_setpage(ndocid, 0, "Book_Brown_L.tga", 0);
    doc_setpage(ndocid, 1, "Book_Brown_R.tga", 0);
    doc_setfont(ndocid, -1, font_book_heading);
    doc_setmargins(ndocid, 0, 275, 20, 30, 20, 1);
    doc_printline(ndocid, 0, das_magische_erz_1);
    doc_printline(ndocid, 0, "");
    doc_setfont(ndocid, -1, font_book_text);
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, das_magische_erz_2);
    doc_setmargins(ndocid, -1, 30, 20, 275, 20, 1);
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printlines(ndocid, 1, das_magische_erz_3);
    doc_show(ndocid);
};

instance schlacht_um_varant1(c_item) {
    name = "Âîéíà ñ Âàðàíòîì";
    mainflag = item_kat_docs;
    flags = 0;
    visual = "ItWr_Book_02_04.3ds";
    material = mat_leather;
    scemename = "MAP";
    on_state = useschlacht_um_varant1;
    value = 100;
    description = name;
    text = "Òîì ïåðâûé";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

const string schlacht_um_varant1_1 = " íî Ðîáàð, ñòðàòåã, âûáðàë àòàêó. Îí ñîáðàë îñòàâøååñÿ âîéñêî è íàïàë íà ïðàâûé, ñàìûé ñëàáûé ôëàíã âðàãà. Íå ââÿçûâàÿñü â ìåëêèå ñòû÷êè, îí ïðîøåë ÷åðåç ïîñòðîåíèÿ ïðîòèâíèêà ñëîâíî íîæ ñêâîçü ìàñëî. Ñíîâà è ñíîâà âåë Ðîáàð ñîëäàò íà ãðàíèöû Âàðàíòà. Îí çíàë, ÷òî ïîáåäà â ýòîì ñðàæåíèè íå ïîçâîëèò Ãåëëîíó è Ëóêêîðó";

const string schlacht_um_varant1_2 = "îáúåäèíèòüñÿ è íàíåñòè îòâåòíûé óäàð. Åìó ïðåäñòîÿëî ïåðåðåçàòü ëèíèè ñíàáæåíèÿ, ÷òîáû îäåðæàòü ïîáåäó";

const string schlacht_um_varant1_3 = " Ãåëëîí áûë ìåðòâ, åãî àðìèÿ ðàçáèòà, à ïîòåðÿâøèå ëèäåðà ñîëäàòû áåæàëè. Íî Ðîáàð íå äàë ïðîòèâíèêó øàíñà âíîâü ñîáðàòü ñâîè ñèëû. Îí ïðèêàçàë ïðåñëåäîâàòü è äîáèâàòü ðàçðîçíåííûå îòðÿäû. Îäíàêî â ýòîò ìîìåíò Ëóêêîð ïåðåøåë â íàñòóïëåíèå è íàíåñ ñîêðóøèòåëüíûé óäàð ïî èçìîòàííûì äîëãèìè áîÿìè âîèíàì êîðîëÿ Ðîáàðà.";

func void useschlacht_um_varant1() {
    var int ndocid;

    ndocid = doc_create();
    doc_setpages(ndocid, 2);
    doc_setpage(ndocid, 0, "Book_Red_L.tga", 0);
    doc_setpage(ndocid, 1, "Book_Red_R.tga", 0);
    doc_setmargins(ndocid, 0, 275, 20, 30, 20, 1);
    doc_setfont(ndocid, -1, font_book_text);
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, schlacht_um_varant1_1);
    doc_setmargins(ndocid, -1, 30, 20, 275, 20, 1);
    doc_printline(ndocid, 1, "");
    doc_printlines(ndocid, 1, schlacht_um_varant1_2);
    doc_printline(ndocid, 1, "");
    doc_printlines(ndocid, 1, schlacht_um_varant1_3);
    doc_show(ndocid);
};

instance schlacht_um_varant2(c_item) {
    name = "Âîéíà ñ Âàðàíòîì";
    mainflag = item_kat_docs;
    flags = 0;
    visual = "ItWr_Book_02_05.3ds";
    material = mat_leather;
    scemename = "MAP";
    on_state = useschlacht_um_varant2;
    value = 100;
    description = name;
    text = "Òîì âòîðîé";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

const string schlacht_um_varant2_1 = "Èñõîä âîéíû áûë ïðåäðåøåí. Âàðàíò ïîòåðÿë ñâîè ìîðñêèå ïîðòû, ñëóæèâøèå îñíîâíûì èñòî÷íèêîì ñíàáæåíèÿ äëÿ àðìèè. Êîðîëü Ðîáàð íå ñòàë çàñèæèâàòüñÿ íà ïîëÿõ ñðàæåíèé, íî ïîçâîëèë ñâîèì ãåíåðàëàì ïðåñëåäîâàòü ñîëäàò ïðîòèâíèêà. Åäèíñòâåííîé ñïîñîáíîé ê ñîïðîòèâëåíèþ ñèëîé îñòàâàëàñü àðìèÿ Ëóêêîðà, ñàìîãî ñïîñîáíîãî èç ãåíåðàëîâ Âàðàíòà, êîòîðûé è ïðåæäå íå ðàç ïðåâðàùàë êàçàëîñü áû íåèçáåæíîå ïîðàæåíèå â íåîæèäàííóþ ïîáåäó.";

const string schlacht_um_varant2_2 = "Íî íà ýòîò ðàç åãî àðìèÿ áûëà â ëîâóøêå. Íåñìîòðÿ íà òî, ÷òî ÷èñëåííîñòüþ îíè äàæå ïðåâîñõîäèëè ïðîòèâíèêà, ñèòóàöèÿ îêàçàëàñü áåçíàäåæíîé. Ëè, ãåðîé èç Ìèðòàíû, çàìàíèë åãî â ýòó ëîâóøêó. Òÿæåëàÿ êàâàëåðèÿ îêàçàëàñü áåñïîëåçíîé íà òîïêîé áîëîòèñòîé ïî÷âå äîëèíû. Ñîëäàòû Ëè ðàñïîëîæèëèñü íà õîëìàõ âîêðóã è íåîæèäàííî íàïàëè, íåñÿ ïàíèêó è ñìåðòü. Ãåðîèçì è ñàìîîòâåðæåííîñòü âîèíîâ Ëóêêîðà çàõëåáíóëèñü â ïîòîêàõ êðîâè. Ýòî áûë ðàçãðîì.";

func void useschlacht_um_varant2() {
    var int ndocid;

    ndocid = doc_create();
    doc_setpages(ndocid, 2);
    doc_setpage(ndocid, 0, "Book_Red_L.tga", 0);
    doc_setpage(ndocid, 1, "Book_Red_R.tga", 0);
    doc_setmargins(ndocid, 0, 275, 20, 30, 20, 1);
    doc_setfont(ndocid, -1, font_book_text);
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, schlacht_um_varant2_1);
    doc_setmargins(ndocid, -1, 30, 20, 275, 20, 1);
    doc_printline(ndocid, 1, "");
    doc_printlines(ndocid, 1, schlacht_um_varant2_2);
    doc_show(ndocid);
};

instance myrtanas_lyrik(c_item) {
    name = "Ïîýçèÿ Ìèðòàíû";
    mainflag = item_kat_docs;
    flags = 0;
    visual = "ItWr_Book_02_02.3ds";
    material = mat_leather;
    scemename = "MAP";
    on_state = usemyrtanas_lyrik;
    value = 100;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

const string myrtanas_lyrik_1 = "    Ïåñíÿ";

const string myrtanas_lyrik_2 = "          ïîêàÿíèÿ";

const string myrtanas_lyrik_3 = "Êàçàëîñü, íàøà ñèëà áóäåò âå÷íîé,";

const string myrtanas_lyrik_4 = "Íî íî÷ü ñåãîäíÿ ñëûøèò ëèøü ñëîâà î íåé.";

const string myrtanas_lyrik_5 = "Ñëîâà î äíÿõ äàâíî ìèíóâøèõ,";

const string myrtanas_lyrik_6 = "×òî æèâû â ìå÷òàõ è æåëàíèÿõ íàøèõ.";

const string myrtanas_lyrik_7 = "Åäèíñòâî ðàñêîëîòî áûëî òîãäà";

const string myrtanas_lyrik_8 = "È ïðîêëÿò íàâåêè äóõ áðàòñòâà.";

const string myrtanas_lyrik_9 = "Ñëûøèò íî÷ü ñëîâà î íåñáûòî÷íîì,";

const string myrtanas_lyrik_10 = "Î òîì, ÷òî óøëî è ÷åãî íå âåðíóòü.";

func void usemyrtanas_lyrik() {
    var int ndocid;

    ndocid = doc_create();
    doc_setpages(ndocid, 2);
    doc_setpage(ndocid, 0, "Book_Red_L.tga", 0);
    doc_setpage(ndocid, 1, "Book_Red_R.tga", 0);
    doc_setmargins(ndocid, 0, 275, 20, 30, 20, 1);
    doc_setfont(ndocid, -1, font_book_text);
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, myrtanas_lyrik_1);
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, myrtanas_lyrik_2);
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, "");
    doc_setmargins(ndocid, -1, 30, 20, 275, 20, 1);
    doc_printline(ndocid, 1, "");
    doc_printlines(ndocid, 1, myrtanas_lyrik_3);
    doc_printline(ndocid, 1, "");
    doc_printlines(ndocid, 1, myrtanas_lyrik_4);
    doc_printline(ndocid, 1, "");
    doc_printlines(ndocid, 1, myrtanas_lyrik_5);
    doc_printline(ndocid, 1, "");
    doc_printlines(ndocid, 1, myrtanas_lyrik_6);
    doc_printline(ndocid, 1, "");
    doc_printlines(ndocid, 1, myrtanas_lyrik_7);
    doc_printline(ndocid, 1, "");
    doc_printlines(ndocid, 1, myrtanas_lyrik_8);
    doc_printline(ndocid, 1, "");
    doc_printlines(ndocid, 1, myrtanas_lyrik_9);
    doc_printline(ndocid, 1, "");
    doc_printlines(ndocid, 1, myrtanas_lyrik_10);
    doc_printlines(ndocid, 1, "");
    doc_show(ndocid);
};

instance lehren_der_goetter1(c_item) {
    name = "Ñëîâà Áîãîâ Òîì ïåðâûé";
    mainflag = item_kat_docs;
    flags = 0;
    visual = "ItWr_Book_02_01.3ds";
    material = mat_leather;
    scemename = "MAP";
    on_state = uselehren_der_goetter1;
    value = 100;
    description = "Ñëîâà Áîãîâ";
    text = "Òîì ïåðâûé";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

const string lehren_der_goetter1_1 = "Óñëûøü æå ñëîâà Áîãîâ, èáî â ýòîì åñòü Èõ âîëÿ. Ïðèìè ó÷åíèå Áîãîâ, èáî â ýòîì åñòü Èõ âîëÿ. Ïî÷èòàé ñëóæèòåëåé Áîæüèõ, èáî èçáðàíû îíè Èìè.";

const string lehren_der_goetter1_2 = "Èííîñ ñêàçàë: È åñëè ñëó÷èòñÿ òàê, ÷òî íå ïîéìåòå âû ñëîâà ñëóæèòåëåé, íå ñîìíåâàéòåñü, ïîòîìó ÷òî îíè ïðàâèëüíû è ìóäðû. ß åñòü ñîëíöå, ñâåò è æèçíü. È âñå, ÷òî ïðîòèâ ñîëíöà - åñòü ïðîòèâ ìåíÿ, è äîëæíî îíî áûòü ïîâåðãíóòî â öàðñòâî òåíåé íà âåêè âå÷íûå.";

const string lehren_der_goetter1_3 = "Àäàíîñ ñêàçàë: Ðàáîòàéòå è æèâèòå, èáî ñîçäàí äåíü, ÷òîáû ÷åëîâåê ìîã ðàáîòàòü. Èùèòå çíàíèå, ÷òîáû ïåðåäàâàòü åãî äåòÿì, èáî äëÿ ýòîãî áûëè ñîçäàíû âû. À òå, êòî ïðàçäíîñòè è ëåíè ïðåäàþòñÿ, äîëæíû áûòü ïîâåðãíóòû â öàðñòâî òåíåé íà âåêè âå÷íûå.";

const string lehren_der_goetter1_4 = "Áåëèàð ñêàçàë: Êòî áóäåò äåëàòü íå òàê è âåðøèòü äåëà ñâîè ïðîòèâ âîëè áîãîâ, òîò áóäåò ìíîé íàêàçàí. ß íàïîëíþ òåëî åãî áîëåçíüþ, ñòðàäàíèåì è ñìåðòüþ, à äóõ åãî ïðèñîåäèíèòñÿ êî ìíå â öàðñòâå òåíåé íà âåêè âå÷íûå.";

func void uselehren_der_goetter1() {
    var int ndocid;

    ndocid = doc_create();
    doc_setpages(ndocid, 2);
    doc_setpage(ndocid, 0, "Book_Red_L.tga", 0);
    doc_setpage(ndocid, 1, "Book_Red_R.tga", 0);
    doc_setmargins(ndocid, 0, 275, 20, 30, 20, 1);
    doc_setfont(ndocid, -1, font_book_text);
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, lehren_der_goetter1_1);
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, lehren_der_goetter1_2);
    doc_setmargins(ndocid, -1, 30, 20, 275, 20, 1);
    doc_printline(ndocid, 1, "");
    doc_printlines(ndocid, 1, lehren_der_goetter1_3);
    doc_printline(ndocid, 1, "");
    doc_printlines(ndocid, 1, lehren_der_goetter1_4);
    doc_show(ndocid);
};

instance lehren_der_goetter2(c_item) {
    name = "Ñëîâà Áîãîâ Òîì âòîðîé";
    mainflag = item_kat_docs;
    flags = 0;
    visual = "ItWr_Book_02_02.3ds";
    material = mat_leather;
    scemename = "MAP";
    on_state = uselehren_der_goetter2;
    value = 100;
    description = "Ñëîâà Áîãîâ";
    text = "Òîì âòîðîé";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

const string lehren_der_goetter2_1 = "Î íà÷àëå âðåìåí: Íå áûëî íè äíÿ, íè íî÷è, è íå áûëî íè îäíîé òâàðè æèâîé. Ïîòîì ïðèøåë Èííîñ, äàë æèçíü ýòîìó ìèðó è ïðèíåñ ñ ñîáîé ñâåò. Íî ñëèøêîì ÿðîê áûë ñâåò Èííîñà, à ïîòîìó ïîðîäèë îí Ñîëíöå. Îäíàêî è ýòî áûëî íåïåðåíîñèìî äëÿ æèâûõ òâàðåé, è òîãäà Èííîñ ðàçäåëèë ñåáÿ è ïîðîäèë Áåëüäæàðà. Áåëüäæàð ïîðîäèë íî÷ü. Òåïåðü ÷åëîâåê ìîã æèòü. Òîãäà Èííîñ ðàçäåëèë ñåáÿ âíîâü è ïîðîäèë Àäàíîñà. Àäàíîñ íàäåëèë ÷åëîâåêà ïîäâèæíîñòüþ, æàæäîé çíàíèÿ, ëþáîïûòñòâîì è ñìåëîñòüþ. È ïîñìîòðåë Èííîñ íà äåëî ðóê ñâîèõ è ðåøèë, ÷òî ýòî õîðîøî.";

const string lehren_der_goetter2_2 = "Ïîñëå Èííîñ îòäûõàë, à Àäàíîñ ñëåäèë çà ëþäüìè. Ëþäè íå ïîêëîíÿëèñü Áåëüäæàðó, ïîòîìó ÷òî íî÷üþ îíè ñïàëè. Â ãíåâå è ÿðîñòè Áåëüäæàð ïîðîäèë îäíîãî ÷åëîâåêà, ÷òîáû õîòÿ áû îí ïîêëîíÿëñÿ åìó. Íî ýòî áûë âñå ðàâíî ÷åëîâåê, à ïîòîìó íî÷üþ îí òîæå ñïàë. Áåëüäæàð óáèë åãî è ñêàçàë: åñëè îíè íå ïîêëîíÿþòñÿ ìíå, òàê ïóñòü õîòÿ áû áîÿòñÿ. È ïîðîäèë îí ñìåðòü, è ñòàëè ëþäè óìèðàòü.";

func void uselehren_der_goetter2() {
    var int ndocid;

    ndocid = doc_create();
    doc_setpages(ndocid, 2);
    doc_setpage(ndocid, 0, "Book_Red_L.tga", 0);
    doc_setpage(ndocid, 1, "Book_Red_R.tga", 0);
    doc_setmargins(ndocid, 0, 275, 20, 30, 20, 1);
    doc_setfont(ndocid, -1, font_book_text);
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, lehren_der_goetter2_1);
    doc_setmargins(ndocid, -1, 30, 20, 275, 20, 1);
    doc_printline(ndocid, 1, "");
    doc_printlines(ndocid, 1, lehren_der_goetter2_2);
    doc_show(ndocid);
};

instance lehren_der_goetter3(c_item) {
    name = "Ñëîâà Áîãîâ Òîì òðåòèé";
    mainflag = item_kat_docs;
    flags = 0;
    visual = "ItWr_Book_02_03.3ds";
    material = mat_leather;
    scemename = "MAP";
    on_state = uselehren_der_goetter3;
    value = 100;
    description = "Ñëîâà Áîãîâ";
    text = "Òîì òðåòèé";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

const string lehren_der_goetter3_1 = "Çàõîòåë Èííîñ, ÷òîáû ëþäè ìîãëè ñëûøàòü åãî è ãîâîðèòü ñ íèì. È ñòàëè îíè ñëûøàòü è ãîâîðèòü. Òîãäà ïîäàðèë îí èì ñïîñîáíîñòü òâîðèòü ÷óäåñà è íàçâàë ýòî ìàãèåé. Ñ åå ïîìîùüþ ñìîãëè ëþäè ñàìè ñîçäàâàòü ìèðû, à Èííîñ íå ñòàë ìåøàòü èì. Òàê ëþäè ïîëó÷èëè â ñâîè ðóêè ÷àñòü áîæåñòâåííîé ñèëû. Îäíàêî ëþäè îêàçàëèñü ðàçíûìè, à ïîòîìó íåêîòîðûå íå ìîãëè òâîðèòü âåëèêèå ÷óäåñà è íà÷àëè ðîïòàòü. Èííîñ çàáðàë ñèëó ó íåäîâîëüíûõ è íàãðàäèë òåõ, êòî ïîêëîíÿëñÿ åìó è ÷òèë åãî.";

const string lehren_der_goetter3_2 = "Âñêîðå ëþäè ñòàëè áîÿòüñÿ è ãíàòü ýòèõ íåìíîãèõ, êîòîðûõ íàçâàëè ñâÿùåííèêàìè. Íî è ñðåäè ñâÿùåííèêîâ ïîÿâèëèñü íåäîâîëüíûå. Ñòàëè îíè ãîâîðèòü ñ Àäàíîñîì è çàáûëè èñòîêè. Òàê ðàçäåëèëèñü ñâÿùåííèêè. Íà÷àëèñü âîéíû, è âåðà â åäèíîãî áîãà áûëà óòåðÿíà. Ïîøåäøèå çà Àäàíîñîì íàçâàëè ñåáÿ ìàãàìè êðóãà âîäû, à ñâÿùåííèêè Èííîñà íàçâàëè ñåáÿ ìàãàìè êðóãà îãíÿ.";

func void uselehren_der_goetter3() {
    var int ndocid;

    ndocid = doc_create();
    doc_setpages(ndocid, 2);
    doc_setpage(ndocid, 0, "Book_Red_L.tga", 0);
    doc_setpage(ndocid, 1, "Book_Red_R.tga", 0);
    doc_setmargins(ndocid, 0, 275, 20, 30, 20, 1);
    doc_setfont(ndocid, -1, font_book_text);
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, lehren_der_goetter3_1);
    doc_setmargins(ndocid, -1, 30, 20, 275, 20, 1);
    doc_printline(ndocid, 1, "");
    doc_printlines(ndocid, 1, lehren_der_goetter3_2);
    doc_show(ndocid);
};

instance jagd_und_beute(c_item) {
    name = "Îõîòíèê è æåðòâà";
    mainflag = item_kat_docs;
    flags = 0;
    visual = "ItWr_Book_02_02.3ds";
    material = mat_leather;
    scemename = "MAP";
    on_state = usejagd_und_beute;
    value = 100;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

const string jagd_und_beute_1 = "Åãî çàïèñè ïåðåæèëè ìíîãèå ãîäû, è åãî ñîâåòû ñòàëè ñ÷èòàòüñÿ ëó÷øåé êíèãîé îá èñêóññòâå îõîòû. Ïîñëå ñðàæåíèé íà ñåâåðå êàæäûé îáèòàòåëü òåõ êðàåâ è òàê çíàåò, êàê ïîëîæèòü ñòðåëó íà òåòèâó. Íî åñëè êòî-òî ñòðåìèòñÿ óçíàòü áîëüøå, òî ñòîèò èçó÷èòü íåñêîëüêî ïðàâèë îáðàùåíèÿ ñ ýòèì, êàçàëîñü áû, íåõèòðûì îðóæèåì.";

const string jagd_und_beute_2 = "Èñêóññòâî îõîòû ïðè ïîìîùè ëóêà ÿâëÿåòñÿ îäíèì èç ñàìûõ äðåâíèõ ñðåäè ïðî÷èõ âèäîâ îõîòû. Ïðîõîäèëè âåêà, à òåõíèêà ñòðåëüáû ìàëî ìåíÿëàñü. È âðÿä ëè ñèëüíî èçìåíèòñÿ â áóäóùåì. Êàêèå æå ïðèíöèïû îòëè÷àþò óñïåøíóþ îõîòó îò íåóñïåøíîé? Çíàòü è óìåòü ïðèìåíÿòü ýòè ïðèíöèïû - âîò â ÷åì çàêëþ÷àåòñÿ èñòèííîå èñêóññòâî ëó÷íèêà!";

func void usejagd_und_beute() {
    var int ndocid;

    ndocid = doc_create();
    doc_setpages(ndocid, 2);
    doc_setpage(ndocid, 0, "Book_Brown_L.tga", 0);
    doc_setpage(ndocid, 1, "Book_Brown_R.tga", 0);
    doc_setmargins(ndocid, 0, 275, 20, 30, 20, 1);
    doc_setfont(ndocid, -1, font_book_text);
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, jagd_und_beute_1);
    doc_setmargins(ndocid, -1, 30, 20, 275, 20, 1);
    doc_printline(ndocid, 1, "");
    doc_printlines(ndocid, 1, jagd_und_beute_2);
    doc_show(ndocid);
};

instance kampfkunst(c_item) {
    name = "Èñêóññòâî áîÿ";
    mainflag = item_kat_docs;
    flags = 0;
    visual = "ItWr_Book_02_03.3ds";
    material = mat_leather;
    scemename = "MAP";
    on_state = usekampfkunst;
    value = 100;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

const string kampfkunst_1 = "Íà ïðîòÿæåíèè äâóõ òûñÿ÷ ëåò ó÷åíèå ýòîãî ìàñòåðà îïðåäåëÿëî íàïðàâëåíèå ðàçâèòèÿ èñêóññòâà áîÿ.";

const string kampfkunst_2 = "Ëîâêîñòü, õëàäíîêðîâèå, ñêîðîñòü, íàáëþäàòåëüíîñòü è áûñòðîòà ðåàêöèè ÿâëÿþòñÿ òåìè êà÷åñòâàìè, êîòîðûå íàäî òðåíèðîâàòü. Åñëè áîåö æåëàåò äîñòè÷ü âåðøèí ìàñòåðñòâà, äâèæåíèÿ åãî äîëæíû ñòàòü õîðîøî ñêîîðäèíèðîâàííûìè è ÷åòêî âûâåðåííûìè.";

const string kampfkunst_3 = "Ñóòü ó÷åíèÿ ìàñòåðà î åäèíåíèè äóõà è òåëà ïðîøëà ÷åðåç âåêà.";

const string kampfkunst_4 = "Äîñòèãíóòîå èì ñîâåðøåíñòâî îñòàâèëî íåèçãëàäèìûé ñëåä. Ñìåíÿëèñü ýïîõè è ìåíÿëñÿ ìèð, íî ó÷åíèå î ãàðìîíèè âíóòðåííèõ ñèë è äâèæåíèé òåëà ïî-ïðåæíåìó æèâî.";

func void usekampfkunst() {
    var int ndocid;

    ndocid = doc_create();
    doc_setpages(ndocid, 2);
    doc_setpage(ndocid, 0, "Book_Brown_L.tga", 0);
    doc_setpage(ndocid, 1, "Book_Brown_R.tga", 0);
    doc_setmargins(ndocid, 0, 275, 20, 30, 20, 1);
    doc_setfont(ndocid, -1, font_book_text);
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, kampfkunst_1);
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, kampfkunst_2);
    doc_setmargins(ndocid, -1, 30, 20, 275, 20, 1);
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printlines(ndocid, 1, kampfkunst_3);
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printlines(ndocid, 1, kampfkunst_4);
    doc_show(ndocid);
};

instance die_gruft(c_item) {
    name = "Ñêëåï";
    mainflag = item_kat_docs;
    flags = 0;
    visual = "ItWr_Book_02_03.3ds";
    material = mat_leather;
    scemename = "MAP";
    value = 100;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

instance astronomie(c_item) {
    name = "Àñòðîíîìèÿ";
    mainflag = item_kat_docs;
    flags = 0;
    visual = "ItWr_Book_02_05.3ds";
    material = mat_leather;
    scemename = "MAP";
    on_state = useastronomie;
    value = 100;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

const string astronomie_1 = "Â öåíòðå ðàñïîëîæåí Ìîðäðàã, ñîäåðæàùèé ÷åòûðå ýëåìåíòà: çåìëþ, âîäó, îãîíü è âîçäóõ. Ýòî ìåñòî, ãäå âðåìÿ áåæèò ñòðåìèòåëüíî â ñàìîì ñåðäöå íåïåðåäàâàåìîé òüìû, êîåé ÿâëÿåòñÿ Áåëüäæàð.  Íàäî âñåì ýòèì âîçâûøàåòñÿ íåáåñíàÿ ñôåðà. ";

const string astronomie_2 = "Îòíîñèòåëüíî âñåëåííîé ÷åëîâåê ÿâëÿåòñÿ ïðèíèìàþùèì. Åãî äóøà ñïîñîáíà ñòàòü ÷àñòüþ âûñøåãî êðóãà áûòèÿ, áîæåñòâåííîãî äóõà. Íî òåëî ÷åëîâåêà åñòü ñóòü Ìîðäðàãà. Îíî ñîñòîèò èç òîé æå ñóáñòàíöèè è ÿâëÿåòñÿ åãî îòðàæåíèåì.";

const string astronomie_3 = "Ñèíîäè÷åñêèå îðáèòû ïëàíåò, òî åñòü òîò ïóòü, êîòîðûé îíè ïðîäåëûâàþò ìåæäó äâóìÿ ðàâíîóäàëåííûìè òî÷êàìè îòíîñèòåëüíî Ìîðäðàãà è íàøåãî ìèðà, ìåíÿþòñÿ âñåãî íà íåñêîëüêî ãðàäóñîâ â òå÷åíèå âåêà. Îäíàêî ìû ïîëàãàåì, ÷òî âñå ìû ïîñòîÿííî äâèæåìñÿ âìåñòå ñî âñåé îñòàëüíîé âñåëåííîé.";

const string astronomie_4 = "Êîãäà ñîçäàâàëñÿ ïåðâûé êàëåíäàðü, òî, ÷òîáû îïðåäåëèòü ïðîäîëæèòåëüíîñòü ñîëíå÷íîãî ãîäà, ìû íàáëþäàëè çà ôàçàìè Ëóíû.";

func void useastronomie() {
    var int ndocid;

    ndocid = doc_create();
    doc_setpages(ndocid, 2);
    doc_setpage(ndocid, 0, "Book_Brown_L.tga", 0);
    doc_setpage(ndocid, 1, "Book_Brown_R.tga", 0);
    doc_setmargins(ndocid, 0, 275, 20, 30, 20, 1);
    doc_setfont(ndocid, -1, font_book_text);
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, astronomie_1);
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, astronomie_2);
    doc_setmargins(ndocid, -1, 30, 20, 275, 20, 1);
    doc_printline(ndocid, 1, "");
    doc_printlines(ndocid, 1, astronomie_3);
    doc_printline(ndocid, 1, "");
    doc_printlines(ndocid, 1, astronomie_4);
    doc_show(ndocid);
};

instance rezepturen(c_item) {
    name = "Ðåöåïòû";
    mainflag = item_kat_docs;
    flags = 0;
    visual = "ItWr_Book_02_04.3ds";
    material = mat_leather;
    scemename = "MAP";
    on_state = userezepturen;
    value = 100;
    description = name;
    text = "Òîì ïåðâûé";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

const string rezepturen_1 = "Áàëüçàì ïðîçðåíèÿ";

const string rezepturen_2 = "Ïîëîæè íà ãëàçà ïàöèåíòà æåë÷ü. Ýòà ñåêðåöèÿ èñòî÷àåò ãîðå÷ü. Íàëîæåíèå ãîðå÷è íà ãëàçà çàñòàâëÿåò ïàöèåíòà îáðàòèòü íà íåå âíèìàíèå, çàäóìàòüñÿ, ÷òî äåëàåò åãî ìóäðåå. Îí ó÷èòñÿ âèäåòü! Ãîðå÷ü è çíàíèå àáñîëþòíî íåñîâìåñòèìû. Îíè ÿâëÿþòñÿ ïîëíûìè ïðîòèâîïîëîæíîñòÿìè!";

const string rezepturen_3 = "Ñëåçû, ñòðàäàíèå è ðàçî÷àðîâàíèå ãîðüêè, íî çíàíèå è ìóäðîñòü âñåãäà ñïîñîáíû óòåøèòü ëþáóþ áîëü. Ãîðå÷ü è çíàíèå àëüòåðíàòèâíû. Ãäå åñòü ãîðå÷ü, òàì íåò çíàíèÿ, à ãäå åñòü çíàíèÿ, òàì íå ìîæåò áûòü ãîðå÷è.";

func void userezepturen() {
    var int ndocid;

    ndocid = doc_create();
    doc_setpages(ndocid, 2);
    doc_setpage(ndocid, 0, "Book_Brown_L.tga", 0);
    doc_setpage(ndocid, 1, "Book_Brown_R.tga", 0);
    doc_setmargins(ndocid, 0, 275, 20, 30, 20, 1);
    doc_setfont(ndocid, -1, font_book_text);
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, rezepturen_1);
    doc_printline(ndocid, 0, "----------------");
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, rezepturen_2);
    doc_setmargins(ndocid, -1, 30, 20, 275, 20, 1);
    doc_printline(ndocid, 1, "");
    doc_printlines(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printlines(ndocid, 1, rezepturen_3);
    doc_show(ndocid);
};

instance rezepturen2(c_item) {
    name = "Ðåöåïòû";
    mainflag = item_kat_docs;
    flags = 0;
    visual = "ItWr_Book_02_04.3ds";
    material = mat_leather;
    scemename = "MAP";
    on_state = userezepturen2;
    value = 100;
    description = name;
    text = "Òîì âòîðîé";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

const string rezepturen2_1 = "Âèíî çàáâåíèÿ";

const string rezepturen2_2 = "Ëó÷øèé âèíîãðàä äëÿ òàêîãî âèíà ïðîèçðàñòàåò íà ñêëîíàõ Àðõîëîñà. Ìàñòåðñòâî âûðàùèâàíèÿ åãî ñîñòîèò â òîì, ÷òîáû äàòü åìó âûçðåòü, íå ðàçäðàæàÿ íèêàêèì äâèæåíèåì. Âèíîãðàä ñìåøèâàåòñÿ ñ îáû÷íûìè òðàâàìè, ðàñòóùèìè ó ïîãðåáîâ.";

const string rezepturen2_3 = "Íàáëþäàé è äèâèñü òîìó, êàê ìàñòåð ïðåâðàùàåò âîäó êîëîäåçíóþ â âèíî. Ëþäè âîñòîðãàþòñÿ èì è âîçäàþò åìó äîëæíîå. Ìàñòåð íàêàçûâàåò ñâîèõ ëåíèâûõ ó÷åíèêîâ è çàïèðàåò â áóòûëêè. Îãîíü ðàçãîðàåòñÿ, è ïîäíèìàþò ãîëîâû çìåè ÷åðíûå.";

func void userezepturen2() {
    var int ndocid;

    ndocid = doc_create();
    doc_setpages(ndocid, 2);
    doc_setpage(ndocid, 0, "Book_Brown_L.tga", 0);
    doc_setpage(ndocid, 1, "Book_Brown_R.tga", 0);
    doc_setmargins(ndocid, 0, 275, 20, 30, 20, 1);
    doc_setfont(ndocid, -1, font_book_text);
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, rezepturen2_1);
    doc_printline(ndocid, 0, "--------------------");
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, rezepturen2_2);
    doc_setmargins(ndocid, -1, 30, 20, 275, 20, 1);
    doc_printline(ndocid, 1, "");
    doc_printlines(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printlines(ndocid, 1, rezepturen2_3);
    doc_show(ndocid);
};

instance tagebuchot(c_item) {
    name = "Äíåâíèê";
    mainflag = item_kat_docs;
    flags = 0;
    visual = "ItWr_Book_02_01.3ds";
    material = mat_leather;
    scemename = "MAP";
    on_state = usetagebuchot;
    value = 100;
    description = name;
    text = "Ñòàðàÿ èñòåðòàÿ êíèãà";
    count = 0;
    text[1] = "Ìíîãèå ñòðàíèöû óòåðÿíû.";
    count[1] = 0;
};

const string tagebuchot_1 = "Äåíü 23";

const string tagebuchot_2 = "ß ïîòåðÿë ñ÷åò âðåìåíè.";

const string tagebuchot_3 = "Ïî ìîèì ðàñ÷åòàì, ïðîøëî îêîëî äâàäöàòè òðåõ äíåé, ñ òåõ ïîð êàê îðêè ïîéìàëè íàñ è çàñòàâèëè ðàáîòàòü.";

const string tagebuchot_4 = "Ðàáîòàåì äî ñåäüìîãî ïîòà, à ýòè óáëþäêè íå çíàþò æàëîñòè. Ïðîÿâèøü ñëàáîñòü - óìðåøü.";

const string tagebuchot_5 = "ß äîëæåí âûáðàòüñÿ îòñþäà!!!";

const string tagebuchot_6 = "Äåíü 28";

const string tagebuchot_7 = "Íàñ çàñòàâëÿþò ðûòü òóííåëü äàëüøå, âñå ãëóáæå â ãîðû.";

const string tagebuchot_8 = "Òóííåëü è òàê óæå îãðîìåí. Çíàòü áû, äëÿ ÷åãî âñå ýòî.";

const string tagebuchot_9 = "Äåíü 67";

const string tagebuchot_10 = "ß ñëûøàë, ÷òî ó îðî÷üèõ øàìàíîâ íåò ñåðäåö. Íî åñëè ýòî òàê, êàê æå îíè ìîãóò æèòü?";

const string tagebuchot_11 = "Âèäåë ÿ è ìå÷, êîòîðîãî òàê ñòðàøàòñÿ øàìàíû. Ïîïàäèñü îí ìíå â ðóêè, ÿ áû ïîêðîøèë èõ íà êóñêè.";

const string tagebuchot_12 = "Äåíü 78";

const string tagebuchot_13 = "Ìå÷ ëåæèò â êîìíàòå â ïåðåäíåé ÷àñòè õðàìà, íî åãî îõðàíÿåò øàìàí.";

const string tagebuchot_14 = "ß ñîáèðàþñü ñáåæàòü, íî äíåâíèê ñâîé îñòàâëþ çäåñü. Êòî çíàåò, ìîæåò, îäíàæäû îí ïðèãîäèòñÿ êîìó-íèáóäü.";

func void usetagebuchot() {
    var int ndocid;

    ndocid = doc_create();
    doc_setpages(ndocid, 2);
    doc_setpage(ndocid, 0, "Book_Brown_L.tga", 0);
    doc_setpage(ndocid, 1, "Book_Brown_R.tga", 0);
    doc_setfont(ndocid, -1, font_book_heading);
    doc_setmargins(ndocid, 0, 275, 20, 30, 20, 1);
    doc_printline(ndocid, 0, tagebuchot_1);
    doc_setfont(ndocid, -1, font_book_text);
    doc_printlines(ndocid, 0, tagebuchot_2);
    doc_printlines(ndocid, 0, tagebuchot_3);
    doc_printlines(ndocid, 0, tagebuchot_4);
    doc_printlines(ndocid, 0, tagebuchot_5);
    doc_printline(ndocid, 0, "");
    doc_setfont(ndocid, -1, font_book_heading);
    doc_setmargins(ndocid, 0, 275, 20, 30, 20, 1);
    doc_printline(ndocid, 0, tagebuchot_6);
    doc_setfont(ndocid, -1, font_book_text);
    doc_printlines(ndocid, 0, tagebuchot_7);
    doc_printlines(ndocid, 0, tagebuchot_8);
    doc_setfont(ndocid, -1, font_book_heading);
    doc_setmargins(ndocid, -1, 30, 20, 275, 20, 1);
    doc_printline(ndocid, 1, tagebuchot_9);
    doc_setfont(ndocid, -1, font_book_text);
    doc_printlines(ndocid, 1, tagebuchot_10);
    doc_printlines(ndocid, 1, tagebuchot_11);
    doc_printline(ndocid, 1, "");
    doc_setfont(ndocid, -1, font_book_heading);
    doc_setmargins(ndocid, -1, 30, 20, 275, 20, 1);
    doc_printline(ndocid, 1, tagebuchot_12);
    doc_setfont(ndocid, -1, font_book_text);
    doc_printlines(ndocid, 1, tagebuchot_13);
    doc_printlines(ndocid, 1, tagebuchot_14);
    doc_show(ndocid);
};

instance itwr_bloodfly_01(c_item) {
    name = "Øåðøíè";
    mainflag = item_kat_docs;
    flags = 0;
    visual = "ItWr_Book_02_01.3ds";
    material = mat_leather;
    scemename = "MAP";
    on_state = useitwr_bloodfly_01;
    value = 150;
    description = name;
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = name_value;
    count[5] = value;
};

const string itwr_bloodfly_01_1 = "Øåðøíè";

const string itwr_bloodfly_01_2 = "Íåìíîãî î øåðøíÿõ";

const string itwr_bloodfly_01_3 = "Íî â ýòîì ìåñòå, ãäå ïî÷âà ïðîïèòàíà âëàãîé è âîçäóõ âëàæåí, ñîáèðàþòñÿ øåðøíè, ïðèâëåêàåìûå çàïàõîì ïîòà äðóãèõ ñîçäàíèé. Îíè æàëÿò ñâîèõ æåðòâ è âûñàñûâàþò èç íèõ êðîâü.";

const string itwr_bloodfly_01_4 = "Ìíîãèå îõîòíèêè, ïðîìûøëÿþùèå íà áîëîòàõ, æèâóò òåì, ÷òî ñîáèðàþò æàëà øåðøíåé. Äëÿ ýòîãî íàäî ñäåëàòü ðàçðåç â áðþøêå, çàòåì ïðî÷åðòèòü êëèíêîì çèãçàã âîêðóã æàëà è àêêóðàòíî óäàëèòü åãî ñ ïðèëåãàþùèìè òêàíÿìè. Äàéòå êðîâè ñòå÷ü è ñîñêîáëèòå ìÿñî - îíî íåñúåäîáíî.";

func void useitwr_bloodfly_01() {
    var int ndocid;

    ndocid = doc_create();
    doc_setpages(ndocid, 2);
    doc_setpage(ndocid, 0, "Book_Brown_L.tga", 0);
    doc_setpage(ndocid, 1, "Book_Brown_R.tga", 0);
    doc_setfont(ndocid, -1, font_book_heading);
    doc_setmargins(ndocid, 0, 275, 20, 30, 20, 1);
    doc_printline(ndocid, 0, itwr_bloodfly_01_1);
    doc_printline(ndocid, 0, "");
    doc_printline(ndocid, 0, " ");
    doc_setfont(ndocid, -1, font_book_text);
    doc_printline(ndocid, 0, itwr_bloodfly_01_2);
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, itwr_bloodfly_01_3);
    doc_printline(ndocid, 0, "");
    doc_setmargins(ndocid, -1, 30, 20, 275, 20, 1);
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printlines(ndocid, 1, itwr_bloodfly_01_4);
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_show(ndocid);
    if (knows_getbfsting == false) {
        knows_getbfsting = true;
        log_createtopic(ge_animaltrophies, log_note);
        b_logentry(ge_animaltrophies, ge_animaltrophies_stinger);
        printscreen(print_learn_stinger, -1, -1, font_old_20, 2);
    };
};

func void c_zsinit() {
    printdebugnpc(pd_zs_detail, "C_ZSInit");
    self.aivar[16] = 0;
    c_stoplookat(self);
    if (self.aivar[33] == true) {
        self.aivar[33] = false;
        hero.aivar[33] = false;
    };
};

func void c_orc_zsinit() {
    npc_setperctime(self, 2.0);
    self.aivar[16] = 0;
};

func int b_comparenpcinstance(var c_npc first, var c_npc second) {
    var int first_id;
    var int second_id;

    printdebugnpc(pd_zs_frame, "B_CompareNpcInstance");
    first_id = hlp_getinstanceid(first);
    second_id = hlp_getinstanceid(second);
    if (first_id == second_id) {
        printdebugnpc(pd_zs_check, "B_CompareNpcInstance True");
        return 1;
    }
    else {
        printdebugnpc(pd_zs_check, "B_CompareNpcInstance False");
        return 0;
    };
};

const int news_source_witness = 0;

const int news_source_gossip = 1;

const int news_murder = 200;

const int news_attack = 195;

const int news_theft = 190;

const int news_defeat = 185;

const int news_nerve = 180;

const int news_interfere = 175;

const int news_hasdefeated = 170;

func void b_assessandmemorize(var int newsid, var int source, var c_npc witness, var c_npc offender, var c_npc vict) {
    var int victimguild;
    var int offendertrueguild;
    var int witnessguild;
    var int offenderguild;
    var int ownerguild;

    printdebugnpc(pd_zs_check, "B_AssessAndMemorize");
    if (((!c_npcishuman(witness)) || (!c_npcishuman(vict))) || (!c_npcishuman(offender))) {
        printdebugnpc(pd_zs_check, "...T*ter, Zeuge oder Opfer KEIN Mensch!");
        printglobals(pd_zs_check);
        return;
    };
    victimguild = npc_gettrueguild(vict);
    offendertrueguild = npc_gettrueguild(offender);
    witnessguild = npc_gettrueguild(witness);
    offenderguild = offender.guild;
    if (newsid == news_murder) {
        printdebugnpc(pd_zs_check, "...AssessAndMemMurder");
        npc_memoryentry(witness, source, offender, newsid, vict);
        if (wld_getguildattitude(witnessguild, victimguild) == att_friendly) {
            printdebugnpc(pd_zs_check, "...AssessAndMemMurder Knows Player // friendly victim");
            if (npc_isplayer(offender)) {
                printdebugnpc(pd_zs_check, "...AssessAndMemMurder Knows Player // friendly victim // Player attacks");
                if (npc_getpermattitude(witness, offender) == att_angry) {
                    printdebugnpc(pd_zs_check, "...AssessAndMemMurder Knows Player // friendly victim // Player attacks // Angry to Plyaer");
                    npc_setpermattitude(witness, att_hostile);
                }
                else {
                    if ((npc_getpermattitude(witness, offender) == att_friendly) || (npc_getpermattitude(witness, offender) == att_neutral)) {
                        printdebugnpc(pd_zs_check, "...AssessAndMemMurder Knows Player // friendly victim // Player attacks // Friend/Neut to Player");
                        npc_setpermattitude(witness, att_angry);
                    };
                };
            };
        };
    }
    else if (newsid == news_theft) {
        printdebugnpc(pd_zs_check, "...AssessAndMemTheft");
        ownerguild = item.ownerguild;
        if (!hlp_isvaliditem(item)) {
            if (b_comparenpcinstance(witness, vict)) {
                printdebugnpc(pd_zs_check, "...AssessAndMemTheft Someone stole me something");
                npc_memoryentry(witness, source, offender, newsid, vict);
                if (npc_getpermattitude(witness, offender) != att_hostile) {
                    printdebugnpc(pd_zs_check, "...AssessAndMemTheft Someone stole me something and im not hostile");
                    if (npc_isplayer(offender)) {
                        printdebugnpc(pd_zs_check, "...AssessAndMemTheft Player stole me something");
                        npc_settempattitude(witness, att_hostile);
                        npc_setattitude(witness, att_angry);
                        if (c_npcisworker(self) && c_amiweaker(self, offender)) {
                            ai_startstate(self, zs_callguards, 0, "");
                        };
                    };
                };
            };
        }
        else {
            printdebugnpc(pd_zs_check, "...AssessAndMemTheft Someone stole another something");
            if (((wld_getguildattitude(witnessguild, ownerguild) == att_friendly) || (witnessguild == ownerguild)) && (ownerguild != offenderguild)) {
                printdebugnpc(pd_zs_check, "...AssessAndMemTheft Someone(wrong guild) stole another (friend or my guild) something");
                if (npc_isplayer(offender)) {
                    npc_memoryentry(witness, source, offender, newsid, vict);
                    npc_settempattitude(witness, att_hostile);
                    if (c_npcisworker(self) && c_amiweaker(self, offender)) {
                        ai_startstate(self, zs_callguards, 0, "");
                    };
                };
            };
        };
    }
    else if (newsid == news_defeat) {
        printdebugnpc(pd_zs_check, "...NEWS_DEFEAT");
        npc_memoryentry(witness, source, offender, newsid, vict);
        if (npc_isplayer(offender)) {
            printdebugnpc(pd_zs_check, "...Sieger ist SC!");
            if ((wld_getguildattitude(witnessguild, victimguild) == att_friendly) && (!b_comparenpcinstance(witness, vict))) {
                printdebugnpc(pd_zs_check, "...NSC ist in befreundeter Gilde zum Besiegten!");
                if ((npc_gettempattitude(witness, offender) == att_angry) && (!c_npcisworker(self))) {
                    printdebugnpc(pd_zs_check, "...permANGRY zum Sieger und weder Buddler, noch Novize, noch Bauer!");
                    npc_settempattitude(witness, att_hostile);
                }
                else if ((npc_gettempattitude(witness, offender) == att_angry) && c_npcisworker(self)) {
                    printdebugnpc(pd_zs_check, "...AssessAndMemDefeat Player (Angry) is offender victim is my guild or friendly but I,m unimportant guild");
                }
                else {
                    if ((npc_gettempattitude(witness, offender) == att_neutral) || (npc_getpermattitude(witness, offender) == att_friendly)) {
                        printdebugnpc(pd_zs_check, "...AssessAndMemDefeat Player(neutral/friendly is offender victim is my guild or friendly");
                        npc_settempattitude(witness, att_angry);
                    };
                };
            }
            else if (b_comparenpcinstance(witness, vict)) {
                printdebugnpc(pd_zs_check, "...AssessAndMemDefeat Player is offender victim is me");
                if (c_npcisworker(self)) {
                    printdebugnpc(pd_zs_check, "...AssessAndMemDefeat Player is offender victim is me (weak guild)");
                    npc_settempattitude(witness, att_angry);
                }
                else if ((witnessguild == gil_kdf) || (witnessguild == gil_kdw)) {
                    printdebugnpc(pd_zs_check, "...AssessAndMemDefeat Player is offender victim is me ( mage guild)");
                    npc_settempattitude(witness, att_hostile);
                }
                else {
                    printdebugnpc(pd_zs_check, "...AssessAndMemDefeat Player is offender victim is me ( other guild)");
                    if (npc_gettempattitude(witness, offender) != att_hostile) {
                        printdebugnpc(pd_zs_check, "...AssessAndMemDefeat Player is offender victim is me ( other guild// not hostile)");
                        npc_settempattitude(witness, att_angry);
                    };
                };
            };
        }
        else {
            if (npc_isplayer(vict)) {
                if (npc_gettempattitude(witness, vict) == att_hostile) {
                    if (npc_getpermattitude(witness, vict) == att_hostile) {
                    };
                    if (npc_getpermattitude(witness, vict) == att_angry) {
                        npc_settempattitude(self, att_angry);
                    };
                    if (npc_getpermattitude(witness, vict) == att_neutral) {
                        npc_settempattitude(self, att_neutral);
                    };
                    if (npc_getpermattitude(witness, vict) == att_friendly) {
                        npc_settempattitude(self, att_friendly);
                    };
                };
            };
        };
    };
};

func void b_spreadandmemorize(var int newsid, var int source) {
    b_assessandmemorize(newsid, source, self, other, victim);
};

func int b_fetchweapon() {
    printdebugnpc(pd_zs_frame, "B_FetchWeapon");
    npc_perceiveall(self);
    if (wld_detectitem(self, item_kat_ff)) {
        printdebugnpc(pd_zs_check, "...Fernkampfwaffe gefunden!");
        if (npc_getdisttoitem(self, item) < perc_dist_intermediat) {
            c_stoplookat(self);
            ai_setwalkmode(self, npc_run);
            ai_takeitem(self, item);
            ai_equipbestrangedweapon(self);
            ai_readyrangedweapon(self);
        };
        c_lookatnpc(self, other);
        return 1;
    };
    if (wld_detectitem(self, item_kat_nf)) {
        printdebugnpc(pd_zs_check, "...Nahkampfwaffe gefunden!");
        if (npc_getdisttoitem(self, item) < perc_dist_intermediat) {
            c_stoplookat(self);
            ai_setwalkmode(self, npc_run);
            ai_takeitem(self, item);
            ai_equipbestmeleeweapon(self);
            ai_readymeleeweapon(self);
        };
        c_lookatnpc(self, other);
        return 1;
    };
    return 0;
};

func void b_fillquiver(var c_npc slf) {
    var int addedammo;
    var c_item readiedweapon;

    printdebugnpc(pd_zs_detail, "B_FillQuiver");
    readiedweapon = npc_getreadiedweapon(slf);
    if (readiedweapon.munition == itamarrow /*4894*/) {
        printdebugnpc(pd_zs_detail, "...aktive Waffe benutzt Pfeile!");
        addedammo = 20 - c_npchasammo(slf, itamarrow /*4894*/);
        createinvitems(slf, itamarrow, addedammo);
        printdebugint(pd_zs_detail, "...hinzugef*gte Pfeile: ", addedammo);
    }
    else if (readiedweapon.munition == itambolt /*4895*/) {
        printdebugnpc(pd_zs_detail, "...aktive Waffe benutzt Bolzen!");
        addedammo = 20 - c_npchasammo(slf, itambolt /*4895*/);
        createinvitems(slf, itambolt, addedammo);
        printdebugint(pd_zs_detail, "...hinzugef*gte Bolzen: ", addedammo);
    }
    else {
        printdebugnpc(pd_zs_detail, "...ERROR: aktive Waffe hat KEINE g*ltige Munitionsart!!!");
    };
};

func int b_equipanddrawbestmeleeweapon(var c_npc slf) {
    printdebugnpc(pd_zs_frame, "B_EquipAndDrawBestMeleeWeapon");
    if (npc_isinfightmode(slf, fmode_magic)) {
        printdebugnpc(pd_zs_check, "...vorher Zauber wegstecken!");
        ai_unreadyspell(slf);
    };
    if (npc_hasequippedmeleeweapon(slf)) {
        if (!npc_hasreadiedmeleeweapon(slf)) {
            printdebugnpc(pd_zs_check, "...noch keine Nahkampfwaffe gezogen!");
            ai_stopaim(slf);
            b_fullstop(slf);
            ai_removeweapon(slf);
            ai_equipbestmeleeweapon(slf);
            ai_readymeleeweapon(slf);
        };
        return true;
    };
    return false;
};

func int b_equipanddrawbestrangedweapon(var c_npc slf) {
    printdebugnpc(pd_zs_frame, "B_EquipAndDrawBestRangedWeapon");
    if (npc_isinfightmode(slf, fmode_magic)) {
        printdebugnpc(pd_zs_check, "...vorher Zauber wegstecken!");
        ai_unreadyspell(slf);
    };
    if (npc_hasrangedweaponwithammo(slf)) {
        printdebugnpc(pd_zs_check, "...Fernkampfwaffe mit Ammo vorhanden!");
        if (!npc_hasreadiedrangedweapon(slf)) {
            printdebugnpc(pd_zs_check, "...noch keine Fernkampfwaffe gezogen!");
            b_fullstop(slf);
            ai_removeweapon(slf);
            ai_equipbestrangedweapon(slf);
            ai_readyrangedweapon(slf);
        }
        else {
            if (slf.fight_tactic == fai_human_ranged) {
                b_fillquiver(slf);
            };
        };
        return true;
    }
    else {
        printdebugnpc(pd_zs_check, "...KEINE Fernkampfwaffe mit Ammo vorhanden!");
    };
    return false;
};

func void b_drawspell(var c_npc slf, var int spell, var int mana) {
    var int manaleft;
    var int manamax;
    var int manarefill;

    printdebugnpc(pd_zs_frame, "B_DrawSpell");
    if (npc_isinfightmode(slf, fmode_magic)) {
        printdebugnpc(pd_zs_check, "...bereits im Magiemodus!");
        if (npc_getactivespell(slf) != spell) {
            printdebugnpc(pd_zs_check, "...dieser Zauber liegt noch nicht auf der Hand!");
            ai_unreadyspell(slf);
        };
        ai_readyspell(slf, spell, mana);
    }
    else {
        if (npc_isinfightmode(slf, fmode_melee) || npc_isinfightmode(slf, fmode_fist)) {
            ai_removeweapon(slf);
        };
        if (npc_isinfightmode(slf, fmode_far)) {
            ai_stopaim(slf);
            ai_removeweapon(slf);
        };
        printdebugnpc(pd_zs_check, "...noch nicht im Magiemodus!");
        ai_readyspell(slf, spell, mana);
    };
    if (slf.fight_tactic == fai_human_mage) {
        printdebugnpc(pd_zs_check, "...Magier-Kampftaktik!");
        manaleft = slf.attribute[atr_mana] /*2*/;
        manamax = slf.attribute[atr_mana_max] /*3*/;
        if (manaleft < (manamax / 2)) {
            printdebugint(pd_zs_check, "...Mana *brig: ", manaleft);
            manarefill = (manamax / 2) - manaleft;
            npc_changeattribute(slf, atr_mana, manarefill);
            printdebugint(pd_zs_check, "...Mana hinzugef*gt: ", manarefill);
        };
    };
    return;
};

func void b_selectweapon(var c_npc slf, var c_npc oth) {
    printdebugnpc(pd_zs_frame, "B_SelectWeapon");
    if ((slf.fight_tactic == fai_human_mage) && (slf.attribute[atr_mana] /*2*/ > 0)) {
        printdebugnpc(pd_zs_check, "...NSC ist ein Magier!");
        if (c_npchasspell(slf, spl_summondemon) && (npc_getdisttonpc(slf, oth) > 1200)) {
            printdebugnpc(pd_zs_check, "...Summon Demon!");
            npc_perceiveall(slf);
            if (!wld_detectnpc(slf, summonedbynpc_demon /*6738*/, zs_mm_attack, gil_demon)) {
                b_drawspell(slf, spl_summondemon, spl_sendcast_summondemon);
                return;
            }
            else {
                printdebugnpc(pd_zs_check, "...gibt aber schon einen!");
            };
        };
        if (c_npchasspell(slf, spl_summongolem) && (npc_getdisttonpc(slf, oth) > 1000)) {
            printdebugnpc(pd_zs_check, "...Summon Golem!");
            npc_perceiveall(slf);
            if (!wld_detectnpc(slf, summonedbynpc_stonegolem /*6757*/, zs_mm_attack, gil_golem)) {
                b_drawspell(slf, spl_summongolem, spl_sendcast_summongolem);
                return;
            }
            else {
                printdebugnpc(pd_zs_check, "...gibt aber schon einen!");
            };
        };
        if (c_npchasspell(slf, spl_summonskeleton) && (npc_getdisttonpc(slf, oth) > 800)) {
            printdebugnpc(pd_zs_check, "...Summon Skeleton!");
            npc_perceiveall(slf);
            if (!wld_detectnpc(slf, summonedbynpc_skeleton /*6832*/, zs_mm_attack, gil_skeleton)) {
                b_drawspell(slf, spl_summonskeleton, spl_sendcast_summonskeleton);
                return;
            }
            else {
                printdebugnpc(pd_zs_check, "...gibt aber schon welche!");
            };
        };
        if (c_npchasspell(slf, spl_icecube) && (!npc_isinstate(oth, zs_magicfreeze))) {
            printdebugnpc(pd_zs_check, "...Icecube!");
            b_drawspell(slf, spl_icecube, spl_sendcast_icecube);
            return;
        }
        else if (((c_npchasspell(slf, spl_icecube) && c_npcismonstermage(slf)) && (npc_getdisttonpc(slf, oth) < spl_range_iceattack)) && (!npc_isinstate(oth, zs_magicfreeze))) {
            printdebugnpc(pd_zs_check, "...Ice-Attack von Monstern!");
            b_drawspell(slf, spl_icecube, spl_sendcast_icecube);
            return;
        }
        else if (c_npchasspell(slf, spl_chainlightning) && (npc_getdisttonpc(slf, oth) < spl_range_chainlightning)) {
            printdebugnpc(pd_zs_check, "...Chainlightning!");
            b_drawspell(slf, spl_chainlightning, 1);
            return;
        }
        else if ((c_npchasspell(slf, spl_sleep) && (!npc_isinstate(oth, zs_magicsleep))) && (npc_getdisttonpc(slf, oth) < spl_range_sleep)) {
            printdebugnpc(pd_zs_check, "...Schlaf!");
            b_drawspell(slf, spl_sleep, spl_sendcast_sleep);
            return;
        }
        else if (c_npchasspell(slf, spl_windfist) && (npc_getdisttonpc(slf, oth) < spl_range_windfist)) {
            printdebugnpc(pd_zs_check, "...Windfist!");
            if ((npc_getdisttonpc(slf, oth) > (spl_range_windfist / 2)) && (slf.attribute[atr_mana] /*2*/ >= spl_sendcast_windfist)) {
                printdebugnpc(pd_zs_check, "...gro*er!");
                b_drawspell(slf, spl_windfist, spl_sendcast_windfist);
            }
            else if ((npc_getdisttonpc(slf, oth) < (spl_range_windfist / 2)) && (slf.attribute[atr_mana] /*2*/ >= (spl_sendcast_windfist / 2))) {
                printdebugnpc(pd_zs_check, "...mittlerer!");
                b_drawspell(slf, spl_windfist, spl_sendcast_windfist / 2);
            }
            else {
                printdebugnpc(pd_zs_check, "...kleiner!");
                b_drawspell(slf, spl_windfist, 1);
            };
            return;
        }
        else if (c_npchasspell(slf, spl_fireball)) {
            printdebugnpc(pd_zs_check, "...Fireball!");
            if ((npc_getdisttonpc(slf, oth) > 1500) && (slf.attribute[atr_mana] /*2*/ >= spl_sendcast_fireball)) {
                printdebugnpc(pd_zs_check, "...gro*er!");
                b_drawspell(slf, spl_fireball, spl_sendcast_fireball);
            }
            else if ((npc_getdisttonpc(slf, oth) > 800) && (slf.attribute[atr_mana] /*2*/ >= (spl_sendcast_fireball / 2))) {
                printdebugnpc(pd_zs_check, "...mittlerer!");
                b_drawspell(slf, spl_fireball, spl_sendcast_fireball / 2);
            }
            else {
                printdebugnpc(pd_zs_check, "...kleiner!");
                b_drawspell(slf, spl_fireball, 1);
            };
            return;
        }
        else if (c_npchasspell(slf, spl_firestorm)) {
            printdebugnpc(pd_zs_check, "...Fireball!");
            if ((npc_getdisttonpc(slf, oth) > 1500) && (slf.attribute[atr_mana] /*2*/ >= spl_sendcast_firestorm)) {
                printdebugnpc(pd_zs_check, "...gro*er!");
                b_drawspell(slf, spl_firestorm, spl_sendcast_fireball);
            }
            else if ((npc_getdisttonpc(slf, oth) > 800) && (slf.attribute[atr_mana] /*2*/ >= (spl_sendcast_firestorm / 2))) {
                printdebugnpc(pd_zs_check, "...mittlerer!");
                b_drawspell(slf, spl_firestorm, spl_sendcast_firestorm / 2);
            }
            else {
                printdebugnpc(pd_zs_check, "...kleiner!");
                b_drawspell(slf, spl_firestorm, 1);
            };
            return;
        }
        else if (c_npchasspell(slf, spl_firebolt)) {
            printdebugnpc(pd_zs_check, "...Firebolt!");
            b_drawspell(slf, spl_firebolt, spl_sendcast_firebolt);
            return;
        }
        else if (c_npchasspell(slf, spl_thunderball)) {
            printdebugnpc(pd_zs_check, "...Thunderball!");
            if ((npc_getdisttonpc(slf, oth) > 1500) && (slf.attribute[atr_mana] /*2*/ >= spl_sendcast_thunderball)) {
                printdebugnpc(pd_zs_check, "...gro*er!");
                b_drawspell(slf, spl_thunderball, spl_sendcast_thunderball);
            }
            else if ((npc_getdisttonpc(slf, oth) > 800) && (slf.attribute[atr_mana] /*2*/ >= (spl_sendcast_thunderball / 2))) {
                printdebugnpc(pd_zs_check, "...mittlerer!");
                b_drawspell(slf, spl_thunderball, spl_sendcast_thunderball / 2);
            }
            else {
                printdebugnpc(pd_zs_check, "...kleiner!");
                b_drawspell(slf, spl_thunderball, 1);
            };
            return;
        }
        else if (c_npchasspell(slf, spl_thunderbolt)) {
            printdebugnpc(pd_zs_check, "...Thundebolt!");
            b_drawspell(slf, spl_thunderbolt, spl_sendcast_thunderbolt);
            return;
        }
        else if (c_npchasspell(slf, spl_pyrokinesis)) {
            printdebugnpc(pd_zs_check, "...Pyrokinesis!");
            b_drawspell(slf, spl_pyrokinesis, 10);
            return;
        }
        else {
            if (c_npchasspell(slf, spl_breathofdeath)) {
                printdebugnpc(pd_zs_check, "...Breath of Death!");
                b_drawspell(slf, spl_breathofdeath, spl_sendcast_breathofdeath);
                return;
            };
        };
    };
    printdebugnpc(pd_zs_check, "...Waffenbasierte Kampftaktik!");
    if ((npc_getdisttonpc(slf, oth) < hai_dist_melee) && (slf.fight_tactic != fai_human_ranged)) {
        printdebugnpc(pd_zs_check, "...Gegner in Nahkampfreichweite & kein purer Fernk*mpfer!");
        if (b_equipanddrawbestmeleeweapon(slf)) {
            return;
        };
        printdebugnpc(pd_zs_check, "...keine Nahkampfwaffe im Inv -> Faustkampf!");
        ai_readymeleeweapon(slf);
        return;
    }
    else {
        printdebugnpc(pd_zs_check, "...Gegner in Fernkampfreichweite oder NSC ist ein purer Fernk*mpfer!");
        if (b_equipanddrawbestrangedweapon(slf)) {
            return;
        };
        if (b_equipanddrawbestmeleeweapon(slf)) {
            return;
        };
        if (!b_fetchweapon()) {
            printdebugnpc(pd_zs_check, "...keine Waffe gefunden -> Faustkampf!");
            ai_readymeleeweapon(slf);
            return;
        };
    };
    return;
};

func void b_drawweapon(var c_npc slf, var c_npc oth) {
    printdebugnpc(pd_zs_detail, "B_DrawWeapon");
    b_selectweapon(slf, oth);
};

func void b_removeweapon(var c_npc slf) {
    printdebugnpc(pd_zs_detail, "B_RemoveWeapon");
    if (npc_isinfightmode(slf, fmode_magic)) {
        printdebugnpc(pd_zs_detail, "... Zauber wegstecken!");
        ai_unreadyspell(slf);
    }
    else if (npc_hasreadiedmeleeweapon(slf)) {
        printdebugnpc(pd_zs_detail, "...Nahkampfwaffe gezogen!");
        ai_removeweapon(slf);
    }
    else if (npc_hasreadiedrangedweapon(slf)) {
        printdebugnpc(pd_zs_detail, "...Nahkampfwaffe gezogen!");
        ai_stopaim(slf);
        ai_removeweapon(slf);
    }
    else {
        printdebugnpc(pd_zs_detail, "...nur F*uste 'gezogen'!");
        ai_removeweapon(slf);
    };
};

func void b_guildgreetings() {
    printdebugnpc(pd_zs_frame, "B_GuilGreetings");
    if ((c_npcishuman(other) && (((self.guild == gil_gur) || (self.guild == gil_nov)) || (self.guild == gil_tpl))) && (npc_gettempattitude(self, other) == att_friendly)) {
        printdebugnpc(pd_zs_check, "B_GuilGreetings Guru ");
        b_say(self, other, "$SECTGREETINGS");
    }
    else if ((((((other.guild == gil_ebr) || (other.guild == gil_grd)) || (other.guild == gil_stt)) || (other.guild == gil_vlk)) && (((self.guild == gil_grd) || (self.guild == gil_stt)) || (self.guild == gil_vlk))) && ((npc_gettempattitude(self, other) == att_friendly) || (npc_gettempattitude(self, other) == att_neutral))) {
        printdebugnpc(pd_zs_check, "B_GuilGreetings OC both");
        b_say(self, other, "$ALGREETINGS");
    }
    else if ((((other.guild == gil_kdf) || (other.guild == gil_kdw)) && ((self.guild == gil_kdf) || (self.guild == gil_kdw))) && ((npc_gettempattitude(self, other) == att_friendly) || (npc_gettempattitude(self, other) == att_neutral))) {
        printdebugnpc(pd_zs_check, "B_GuilGreetings NC both");
        b_say(self, other, "$MAGEGREETINGS");
    }
    else {
        if (npc_gettempattitude(self, other) == att_friendly) {
            printdebugnpc(pd_zs_check, "B_GuilGreetings friend");
            b_say(self, other, "$FRIENDLYGREETINGS");
        };
    };
};

func void b_setfaceexpression(var c_npc slf, var c_npc oth) {
    var int attitude;

    printdebugnpc(pd_zs_frame, "B_SetFaceExpression");
    attitude = npc_gettempattitude(slf, oth);
    if (npc_isinstate(self, zs_flee) || self.aivar[19]) {
        printdebugnpc(pd_zs_check, "...to frightened!");
        mdl_startfaceani(self, "S_FRIGHTENED", 1.0, -1.0);
    }
    else if (attitude == att_friendly) {
        printdebugnpc(pd_zs_check, "...to friendly!");
        mdl_startfaceani(self, "S_NEUTRAL", 1.0, -1.0);
    }
    else if (attitude == att_neutral) {
        printdebugnpc(pd_zs_check, "...to neutral!");
        mdl_startfaceani(self, "S_NEUTRAL", 1.0, -1.0);
    }
    else if (attitude == att_angry) {
        printdebugnpc(pd_zs_check, "...to angry!");
        mdl_startfaceani(self, "S_ANGRY", 1.0, -1.0);
    }
    else {
        if (attitude == att_hostile) {
            printdebugnpc(pd_zs_check, "...to hostile!");
            mdl_startfaceani(self, "S_HOSTILE", 1.0, -1.0);
        };
    };
};

func void b_resetfaceexpression(var c_npc slf) {
    printdebugnpc(pd_zs_frame, "B_ResetFaceExpression");
    mdl_startfaceani(self, "S_NEUTRAL", 1.0, -1.0);
};

func void b_assessenemy() {
    printdebugnpc(pd_zs_frame, "B_AssessEnemy");
    printglobals(pd_zs_check);
    if (npc_canseenpcfreelos(self, other)) {
        if (c_npcishuman(other)) {
            printdebugnpc(pd_zs_frame, "...Feind ist Mensch!");
            if (self.aivar[40]) {
                printdebugnpc(pd_zs_check, "...'letzte Nachricht' f*r den Feind!");
                if (b_checkforimportantinfo(self, other)) {
                    return;
                };
            };
            if (c_npctypeisfriend(self, other) || (npc_getattitude(self, other) == att_friendly)) {
                printdebugnpc(pd_zs_check, "...NSC ist NpcType_Friend oder ATT_FRIENDLY!");
                return;
            };
            if (c_otheristoleratedenemy(self, other)) {
                printdebugnpc(pd_zs_check, "...Feind wird toleriert!");
                b_tolerateenemy(self, other);
                return;
            };
            if (other.aivar[33]) {
                printdebugnpc(pd_zs_check, "...Feind spricht gerade!");
                return;
            };
            if (npc_isincutscene(other)) {
                printdebugnpc(pd_zs_check, "...Feind ist in Cutscene!");
                return;
            };
            b_fullstop(self);
            ai_startstate(self, zs_assessenemy, 0, "");
        }
        else {
            printdebugnpc(pd_zs_check, "... 'enemy' ist Monster/Orc!");
            if ((npc_getdisttonpc(self, other) < hai_dist_assess_monster) && c_npcisdangerousmonster(self, other)) {
                b_fullstop(self);
                ai_startstate(self, zs_assessmonster, 0, "");
                return;
            };
        };
    };
};

func void b_assessfighter() {
    printdebugnpc(pd_zs_frame, "B_AssessFighter");
    if (self.npctype == npctype_rogue) {
        b_setroguestohostile();
    };
    if (c_npcishuman(other) && npc_canseenpcfreelos(self, other)) {
        printdebugnpc(pd_zs_frame, "...'fighter' ist Mensch!");
        if (npc_isincutscene(other)) {
            printdebugnpc(pd_zs_check, "...Waffenziehender in Cutscene!");
            return;
        };
        if (npc_isinstate(other, zs_magicsleep)) {
            printdebugnpc(pd_zs_check, "...SC in magischem Schlaf!");
            return;
        };
        if (!npc_isplayer(other)) {
            printdebugnpc(pd_zs_check, "...NSC ist kein Spieler!");
            return;
        }
        else {
            if (npc_isinstate(self, zs_guardpassage)) {
                if (npc_getdisttonpc(self, other) < perc_dist_dialog) {
                    b_checkforimportantinfo(self, other);
                };
                return;
            };
        };
        if (npc_isinfightmode(other, fmode_fist)) {
            printdebugnpc(pd_zs_check, "...Fighter hat nur F*uste 'gezogen'!");
            return;
        };
        if (c_npctypeisfriend(self, other) || (npc_getattitude(self, other) == att_friendly)) {
            printdebugnpc(pd_zs_check, "...NSC ist NpcType_Friend oder ATT_FRIENDLY!");
            return;
        };
        if (other.aivar[33] == true) {
            printdebugnpc(pd_zs_check, "...Fighter ist im Dialog!");
            return;
        };
        if (npc_isinfightmode(other, fmode_melee)) {
            printdebugnpc(pd_zs_check, "...Fighter f*hrt Nahkampfwaffe!");
            if (npc_getdisttonpc(self, other) < hai_dist_melee) {
                printdebugnpc(pd_zs_check, "...und ist in Nahkampfreichweite");
                b_fullstop(self);
                npc_settarget(self, other);
                npc_gettarget(self);
                ai_startstate(self, zs_assessfighter, 0, "");
                return;
            };
        };
        if (npc_isinfightmode(other, fmode_far)) {
            printdebugnpc(pd_zs_check, "...Fighter f*hrt Fernkampfwaffe!");
            if (npc_getdisttonpc(self, other) < hai_dist_ranged) {
                printdebugnpc(pd_zs_check, "...und ist in Fernkampfreichweite!");
                b_fullstop(self);
                ai_startstate(self, zs_assessfighter, 0, "");
                return;
            };
        };
        if (npc_isinfightmode(other, fmode_magic)) {
            printdebugnpc(pd_zs_check, "...Fighter f*hrt Zauberspruch!");
            if ((npc_getdisttonpc(self, other) < hai_dist_ranged) && (npc_getactivespellcat(other) == spell_bad)) {
                printdebugnpc(pd_zs_check, "...und zwar einen Kampfzauber & innerhalb Fernkampfreichweite!");
                b_fullstop(self);
                ai_startstate(self, zs_assessfighter, 0, "");
                return;
            }
            else {
                if ((npc_isinstate(self, zs_guardpassage) || npc_wasinstate(self, zs_guardpassage)) && ((npc_getactivespell(other) == spl_sleep) || (npc_getactivespell(other) == spl_charm))) {
                    printdebugnpc(pd_zs_check, "...Schlaf-/Charmezauber von Durchgangswache gesehen!");
                    b_fullstop(self);
                    ai_startstate(self, zs_assessfighter, 0, "");
                    return;
                };
            };
        };
    }
    else {
        printdebugnpc(pd_zs_check, "... 'fighter' ist Monster/Orc!");
        if (c_npcisdangerousmonster(self, other)) {
            printdebugnpc(pd_zs_check, "... 'fighter' ist gef*hrliches Monster!");
            if (npc_getdisttonpc(self, other) < hai_dist_assess_monster) {
                b_fullstop(self);
                ai_startstate(self, zs_assessmonster, 0, "");
                return;
            };
        };
    };
};

func void b_assesscaster() {
    printdebugnpc(pd_zs_frame, "B_AssessCaster");
    printglobals(pd_zs_check);
    if (!npc_isplayer(other)) {
        printdebugnpc(pd_zs_check, "...Zauberer NICHT der Spieler!");
        return;
    };
    if (c_npctypeisfriend(self, other) || (npc_getattitude(self, other) == att_friendly)) {
        printdebugnpc(pd_zs_check, "...NSC ist NpcType_Friend oder ATT_FRIENDLY!");
        return;
    };
    if (npc_getactivespellcat(other) == spell_bad) {
        printdebugnpc(pd_zs_check, "...b*ser Zauber!");
        b_fullstop(self);
        npc_percdisable(self, perc_assesscaster);
        ai_startstate(self, zs_assessfighter, 0, "");
    }
    else if (npc_getattitude(self, other) == att_hostile) {
        printdebugnpc(pd_zs_check, "...b*ser Zauberer!");
        b_fullstop(self);
        ai_startstate(self, zs_assessenemy, 0, "");
    }
    else if ((npc_isinstate(self, zs_guardpassage) || npc_wasinstate(self, zs_guardpassage)) && ((npc_getactivespell(other) == spl_sleep) || (npc_getactivespell(other) == spl_charm))) {
        printdebugnpc(pd_zs_check, "...Schlaf-/Charmezauber von Durchgangswache gesehen!");
        b_fullstop(self);
        ai_startstate(self, zs_assessenemy, 0, "");
    }
    else {
        printdebugnpc(pd_zs_check, "...neutraler Zauber");
    };
};

func void b_assessthreat() {
    printdebugnpc(pd_zs_frame, "B_AssessThreat");
    if (npc_canseenpc(self, other)) {
        printdebugnpc(pd_zs_check, "...NSC kann Bedrohung sehen!");
        if (npc_getattitude(self, other) == att_friendly) {
            b_sayoverlay(self, other, "$WATCHYOURAIM");
            npc_settempattitude(self, att_neutral);
        }
        else if (npc_getattitude(self, other) == att_neutral) {
            b_sayoverlay(self, other, "$WATCHYOURAIMANGRY");
            npc_settempattitude(self, att_angry);
        }
        else {
            if (npc_getattitude(self, other) == att_angry) {
                npc_settempattitude(self, att_hostile);
                ai_startstate(self, zs_assessenemy, 0, "");
                return;
            };
        };
        npc_percdisable(self, perc_assessthreat);
    };
};

func void b_observesuspect() {
    printdebugnpc(pd_zs_frame, "B_ObserveSuspect");
    if ((self.npctype == npctype_friend) || (npc_getattitude(self, other) == att_friendly)) {
        printdebugnpc(pd_zs_check, "...NSC ist NpcType_Friend oder ATT_FRIENDLY");
        return;
    };
    if (npc_canseenpc(self, other)) {
        printdebugnpc(pd_zs_frame, "...CanSee");
        npc_sendpassiveperc(self, perc_assesswarn, self, other);
        npc_settarget(self, other);
        npc_gettarget(self);
        ai_startstate(self, zs_observesuspect, 1, "");
    };
};

func void b_observeintruder() {
    printdebugnpc(pd_zs_frame, "B_ObserveIntruder");
    if (other.aivar[33]) {
        printdebugnpc(pd_zs_check, "...SC im Dialog!");
        return;
    };
    if (self.npctype == npctype_friend) {
        printdebugnpc(pd_zs_check, "...freundlich gesinnt!");
        return;
    };
    if (npc_isinstate(self, zs_guardpassage)) {
        printdebugnpc(pd_zs_check, "...NSC ist Durchgangswache!");
        return;
    };
    if (npc_getdisttonpc(self, other) > hai_dist_observeintruder) {
        printdebugnpc(pd_zs_check, "...SC zu weit weg!");
        return;
    };
    if (c_npcishuman(other)) {
        printdebugnpc(pd_zs_check, "...Eindringling ist Mensch!");
        if (npc_getattitude(self, other) == att_hostile) {
            b_fullstop(self);
            b_assessenemy();
            return;
        };
        if ((npc_getattitude(self, other) != att_friendly) && (npc_canseenpc(self, other) || (!c_bodystatecontains(other, bs_sneak)))) {
            printdebugnpc(pd_zs_check, "...SC ist Mensch und nicht FRIENDLY!");
            ai_startstate(self, zs_observeintruder, 1, "");
            return;
        };
    }
    else {
        printdebugnpc(pd_zs_check, "...Eindringling ist Monster!");
        if (c_npcisdangerousmonster(self, other)) {
            b_fullstop(self);
            ai_startstate(self, zs_assessmonster, 0, "");
        };
    };
};

func void b_checkstolenequipment() {
    var c_item melee;
    var c_item ranged;
    var c_item armor;

    melee = npc_getequippedmeleeweapon(other);
    ranged = npc_getequippedrangedweapon(other);
    armor = npc_getequippedarmor(other);
    printdebugnpc(pd_zs_check, "B_CheckStolenEquipment");
    if (npc_ownedbynpc(melee, self)) {
        printdebugnpc(pd_zs_check, "...SC tr*gt Nahkampf-Waffe des NSCs offen!");
        self.aivar = hlp_getinstanceid(melee);
        if ((!npc_hasnews(self, news_defeat, other, self)) && (self.aivar[1] == 0)) {
            printdebugnpc(pd_zs_check, "...NSC ist nicht vom SC besiegt worden & hat noch nicht danach gefragt!");
            npc_clearaiqueue(self);
            c_lookatnpc(self, other);
            ai_turntonpc(self, other);
            ai_pointatnpc(self, other);
            b_say(self, other, "$THATSMYWEAPON");
            ai_startstate(self, zs_getbackbelongings, 1, "");
            return;
        };
    }
    else {
        if (npc_ownedbynpc(ranged, self)) {
            printdebugnpc(pd_zs_check, "...SC tr*gt Fernkampf-Waffe des NSCs offen!");
            self.aivar = hlp_getinstanceid(ranged);
            if ((!npc_hasnews(self, news_defeat, other, self)) && (self.aivar[1] == 0)) {
                npc_clearaiqueue(self);
                c_lookatnpc(self, other);
                ai_turntonpc(self, other);
                ai_pointatnpc(self, other);
                b_say(self, other, "$THATSMYWEAPON");
                ai_startstate(self, zs_getbackbelongings, 1, "");
                return;
            };
        };
    };
};

func void b_assessenterroom() {
    var int self_guild;
    var int portalguild;
    var int formerportalguild;

    printdebugnpc(pd_zs_frame, "B_AssessEnterRoom");
    self_guild = self.guild;
    printglobals(pd_zs_check);
    portalguild = wld_getplayerportalguild();
    printguild(pd_zs_check, portalguild);
    formerportalguild = wld_getformerplayerportalguild();
    printguild(pd_zs_check, formerportalguild);
    if (!c_npcishuman(other)) {
        printdebugnpc(pd_zs_check, "Monster betritt Raum!");
        b_fullstop(self);
        ai_startstate(self, zs_assessmonster, 0, "");
    };
    if (!npc_isplayer(other)) {
        printdebugnpc(pd_zs_check, "...NSC betritt Raum!");
        return;
    };
    if ((self.npctype == npctype_friend) || (npc_getattitude(self, other) == att_friendly)) {
        printdebugnpc(pd_zs_check, "...NSC ist NpcType_Friend oder ATT_FRIENDLY");
        return;
    };
    if (npc_canseenpc(self, other) || ((!c_bodystatecontains(other, bs_sneak)) && (npc_getdisttonpc(self, other) < hai_dist_hearroomintruder))) {
        printdebugnpc(pd_zs_check, "...Nsc sieht/h*rt Eindringling!");
        if (c_npcisguard(self)) {
            printdebugnpc(pd_zs_check, "...Nsc ist Wache!");
            if ((portalguild != gil_none) && (wld_getguildattitude(self_guild, portalguild) == att_friendly)) {
                printdebugnpc(pd_zs_check, "...betretener Portalraum geh*rt Sch*tzling-Gilde!");
                b_fullstop(self);
                ai_startstate(self, zs_clearroom, 0, "");
            }
            else {
                if ((formerportalguild != gil_none) && (wld_getguildattitude(self_guild, formerportalguild) == att_friendly)) {
                    printdebugnpc(pd_zs_check, "...verlassener Portalraum geh*rt Sch*tzling-Gilde!");
                    b_fullstop(self);
                    b_whirlaround(self, other);
                    ai_pointatnpc(self, other);
                    b_say(self, other, "$HEYYOU");
                    ai_stoppointat(self);
                    npc_percdisable(self, perc_movenpc);
                    ai_setwalkmode(self, npc_run);
                    ai_gotonpc(self, other);
                    b_say(self, other, "$WHATDIDYOUINTHERE");
                };
            };
        }
        else if (c_npcisguardarcher(self)) {
            printdebugnpc(pd_zs_check, "...ich bin Fernkampfwache und ignoriere R*ume betreten grunds*tzlich!");
            npc_percenable(self, perc_observeintruder, b_observeintruder);
        }
        else {
            printdebugnpc(pd_zs_check, "...Nsc ist KEINE Wache!");
            if (((npc_getdisttonpc(self, other) < hai_dist_clearroom) && (portalguild != gil_none)) && ((self_guild == portalguild) || (wld_getguildattitude(self_guild, portalguild) == att_friendly))) {
                printdebugnpc(pd_zs_check, "...SC nah & betretener Portalraum geh*rt Gilde des NSCs");
                b_fullstop(self);
                ai_startstate(self, zs_clearroom, 0, "");
                return;
            };
            if (((npc_getdisttonpc(self, other) < hai_dist_clearroom) && (formerportalguild != gil_none)) && ((self_guild == formerportalguild) || (wld_getguildattitude(self_guild, formerportalguild) == att_friendly))) {
                printdebugnpc(pd_zs_check, "...SC nah & SC verl**t eigenen Portalraum");
                b_fullstop(self);
                b_whirlaround(self, other);
                ai_pointatnpc(self, other);
                b_say(self, other, "$HEYYOU");
                ai_stoppointat(self);
                npc_percdisable(self, perc_movenpc);
                ai_setwalkmode(self, npc_run);
                ai_gotonpc(self, other);
                b_say(self, other, "$WHATDIDYOUINTHERE");
            };
        };
    }
    else {
        printdebugnpc(pd_zs_check, "...NSC kann den Eindringling weder sehen noch h*ren!");
    };
};

func void b_assesssc() {
    var c_npc her;
    var c_npc rock;
    var int portalguild;

    printdebugnpc(pd_zs_frame, "B_AssessSc");
    if (self.npctype == npctype_rogue) {
        b_setroguestohostile();
    };
    if (npc_canseenpcfreelos(self, other)) {
        printdebugnpc(pd_zs_check, "...SC sichtbar!");
        if (npc_getdisttonpc(self, other) < perc_dist_dialog) {
            her = hlp_getnpc(pc_hero);
            rock = hlp_getnpc(pc_rockefeller);
            if (((hlp_getinstanceid(her) != hlp_getinstanceid(hero)) && (hlp_getinstanceid(rock) != hlp_getinstanceid(hero))) && npc_isinstate(self, zs_guardpassage)) {
                if (wld_getguildattitude(self.guild, other.guild) != att_friendly) {
                    b_fullstop(self);
                    b_say(self, other, "$NOWWAIT");
                    b_intruderalert(self, other);
                    b_setattackreason(self, aiv_ar_intruder);
                    npc_settarget(self, other);
                    ai_startstate(self, zs_attack, 1, "");
                };
            };
        };
        if (npc_getdisttonpc(self, other) < perc_dist_intermediat) {
            b_checkstolenequipment();
        };
        if (npc_getdisttonpc(self, other) < perc_dist_dialog) {
            b_checkforimportantinfo(self, other);
        };
        portalguild = wld_getplayerportalguild();
        if (((self.guild == portalguild) || (wld_getguildattitude(self.guild, portalguild) == att_friendly)) && (npc_getattitude(self, other) != att_friendly)) {
            printdebugnpc(pd_zs_check, "...Spieler im Raum des NSCs!");
            b_assessenterroom();
        };
        if (c_npcisinfightmode(other)) {
            printdebugnpc(pd_zs_check, "...SC im Kampfmodus!");
            b_assessfighter();
            return;
        };
        if (!c_bodystatecontains(other, bs_sneak)) {
            printdebugnpc(pd_zs_check, "...SC schleicht NICHT!");
            if (npc_isinroutine(self, zs_guard) && (npc_getdisttonpc(self, other) < hai_dist_guardobserveintruder)) {
                ai_startstate(self, zs_observeintruder, 1, "");
                return;
            };
            if (npc_getdisttonpc(self, other) < hai_dist_observeintruder) {
                printdebugnpc(pd_zs_check, "...SC in ObserveIntruder-Reichweite!");
                b_observeintruder();
                return;
            }
            else {
                printdebugnpc(pd_zs_check, "...SC au*erhalb ObserveIntruder-Reichweite!");
            };
        };
    };
    if ((hero.aivar[27] == aiv_gps_firstwarn) || (hero.aivar[27] == aiv_gps_lastwarn)) {
        printdebugnpc(pd_zs_check, "...SC wurde von Durchgangswachen verwarnt!");
        printdebugint(pd_zs_check, "hero.aivar[AIV_GUARDPASSAGE_STATUS] = ", hero.aivar[27]);
        if (npc_isinstate(self, zs_guardpassage) && (npc_getdisttonpc(self, hero) > hai_dist_guardpassage_reset)) {
            printdebugnpc(pd_zs_check, "...Status f*r Durchgangswachen zur*cksetzen!");
            hero.aivar[27] = aiv_gps_begin;
        };
    };
};

func void b_assesstalk() {
    var c_npc her;
    var c_npc rock;

    printdebugnpc(pd_zs_frame, "B_AssessTalk");
    self.aivar[21] = true;
    if (npc_isinstate(self, zs_smoke)) {
        npc_clearaiqueue(self);
        ai_standupquick(self);
        ai_startstate(self, zs_talk, 0, "");
    };
    her = hlp_getnpc(pc_hero);
    rock = hlp_getnpc(pc_rockefeller);
    if ((hlp_getinstanceid(her) != hlp_getinstanceid(hero)) && (hlp_getinstanceid(rock) != hlp_getinstanceid(hero))) {
        b_say(self, other, "$NOTNOW");
    }
    npc_setperctime(self, 3.0);
    self.aivar[33] = false;
    hero.aivar[33] = false;
    hero.aivar[22] = false;
    b_fullstop(hero);
    if (c_bodystatecontains(self, bs_walk) || c_bodystatecontains(self, bs_run)) {
        b_sayoverlay(other, self, "$SC_HEYWAITASECOND");
    }
    else if (!npc_canseenpc(self, hero)) {
        b_sayoverlay(other, self, "$SC_HEYTURNAROUND");
    }
    else {
    };
    npc_clearaiqueue(self);
    npc_setperctime(self, 1.0);
    if ((!c_bodystatecontains(self, bs_sit)) || (!npc_canseenpc(self, hero))) {
        ai_startstate(self, zs_talk, 1, "");
    }
    else {
        ai_startstate(self, zs_talk, 0, "");
    };
};

func int c_wantitem() {
    var int itemvalue;
    var int levelbewertung;
    var int selfguild;
    var int bodyguild;
    var int itemguild;

    printdebugnpc(pd_zs_detail, "C_WantItem");
    itemvalue = item.value;
    levelbewertung = self.level * 10;
    selfguild = npc_gettrueguild(self);
    bodyguild = npc_gettrueguild(other);
    itemguild = item.ownerguild;
    if (hlp_isvaliditem(item)) {
        printdebugstring(pd_zs_detail, "...'item': ", item.name);
        if (npc_ownedbynpc(item, self) || npc_ownedbyguild(item, selfguild)) {
            printdebugnpc(pd_zs_detail, "...'item' geh*rt NSC oder seiner Gilde -> JA!");
            return true;
        };
        if (item.flags == item_mission) {
            printdebugnpc(pd_zs_detail, "...'item' ist Missionsgegenstand -> NEIN!");
            return false;
        }
        else if ((item.mainflag == item_kat_armor) && ((bodyguild == itemguild) || (selfguild != itemguild))) {
            printdebugnpc(pd_zs_detail, "...'item' ist R*stung und geht micht nichts an -> NEIN!");
            return false;
        }
        else if ((item.mainflag == item_kat_rune) && (!c_npcismage(self))) {
            printdebugnpc(pd_zs_detail, "...'item' ist eine Rune/Scroll und Nsc ist kein Magier -> NEIN!");
            return false;
        }
        else if (hlp_isitem(item, itminugget /*4517*/)) {
            printdebugnpc(pd_zs_detail, "...'item' ist Erz -> JA!");
            return true;
        }
        printdebugint(pd_zs_detail, "...itemvalue: ", itemvalue);
        printdebugint(pd_zs_detail, "...levelbewertung: ", levelbewertung);
        if (itemvalue > levelbewertung) {
            printdebugnpc(pd_zs_detail, "...'item' ist wertvoll genug um interessant zu sein -> JA!");
            return true;
        }
        else {
            printdebugnpc(pd_zs_detail, "...'item' ist zu billig -> NEIN!");
            return false;
        };
    }
    else {
        printdebugnpc(pd_zs_detail, "...'item' ist ung*ltig -> NEIN!");
        return false;
    };
};

func void b_transferitems(var int amount) {
    var int transferitem;

    printdebugnpc(pd_zs_check, "...B_TransferItem");
    transferitem = hlp_getinstanceid(item);
    b_giveinvitems(other, self, transferitem, amount);
    if (item.munition == itamarrow /*4894*/) {
        createinvitems(self, itamarrow, 20);
    };
    if (item.munition == itambolt /*4895*/) {
        createinvitems(self, itambolt, 20);
    };
};

func int b_checkitem(var int category, var int slot) {
    var string printtext;
    var int count;

    printdebugnpc(pd_zs_check, "B_CheckItem");
    printtext = inttostring(slot);
    if (category == inv_weapon) {
        printtext = concatstrings("...found INV_WEAPON_", printtext);
    }
    else if (category == inv_armor) {
        printtext = concatstrings("...found INV_ARMOR_", printtext);
    }
    else if (category == inv_rune) {
        printtext = concatstrings("...found INV_RUNE_", printtext);
    }
    else if (category == inv_food) {
        printtext = concatstrings("...found INV_FOOD_", printtext);
    }
    else if (category == inv_doc) {
        printtext = concatstrings("...found INV_DOC_", printtext);
    }
    else if (category == inv_misc) {
        printtext = concatstrings("...found INV_MISC_", printtext);
    }
    else {
        printtext = concatstrings("...found unknown category #", printtext);
    };
    count = npc_getinvitembyslot(other, category, slot);
    printdebugnpc(pd_zs_detail, inttostring(count));
    if (count > 0) {
        printdebugnpc(pd_zs_check, printtext);
        if (hlp_isitem(item, itminugget /*4517*/)) {
            b_transferitems(count / 2);
            return true;
        };
        if (npc_ownedbynpc(item, self)) {
            b_transferitems(1);
            return true;
        };
    };
    return false;
};

func int b_plunder() {
    var int amountplundered;

    printdebugnpc(pd_zs_check, "B_Plunder");
    amountplundered = 0;
    b_checkitem(inv_weapon, 0);
    b_checkitem(inv_weapon, 1);
    b_checkitem(inv_weapon, 2);
    b_checkitem(inv_weapon, 3);
    b_checkitem(inv_weapon, 4);
    b_checkitem(inv_weapon, 5);
    b_checkitem(inv_weapon, 6);
    if (b_checkitem(inv_misc, 0)) {
        amountplundered = amountplundered + 1;
    };
    if (b_checkitem(inv_misc, 1)) {
        amountplundered = amountplundered + 1;
    };
    if (b_checkitem(inv_misc, 2)) {
        amountplundered = amountplundered + 1;
    };
    if (b_checkitem(inv_misc, 3)) {
        amountplundered = amountplundered + 1;
    };
    if (b_checkitem(inv_misc, 4)) {
        amountplundered = amountplundered + 1;
    };
    if (b_checkitem(inv_misc, 5)) {
        amountplundered = amountplundered + 1;
    };
    if (b_checkitem(inv_misc, 6)) {
        amountplundered = amountplundered + 1;
    };
    if (b_checkitem(inv_misc, 7)) {
        amountplundered = amountplundered + 1;
    };
    if (b_checkitem(inv_misc, 8)) {
        amountplundered = amountplundered + 1;
    };
    if (b_checkitem(inv_misc, 9)) {
        amountplundered = amountplundered + 1;
    };
    if (b_checkitem(inv_misc, 10)) {
        amountplundered = amountplundered + 1;
    };
    if (b_checkitem(inv_misc, 11)) {
        amountplundered = amountplundered + 1;
    };
    if (b_checkitem(inv_misc, 12)) {
        amountplundered = amountplundered + 1;
    };
    if (b_checkitem(inv_misc, 13)) {
        amountplundered = amountplundered + 1;
    };
    if (b_checkitem(inv_misc, 14)) {
        amountplundered = amountplundered + 1;
    };
    if (b_checkitem(inv_misc, 15)) {
        amountplundered = amountplundered + 1;
    };
    if (b_checkitem(inv_misc, 16)) {
        amountplundered = amountplundered + 1;
    };
    if (b_checkitem(inv_misc, 17)) {
        amountplundered = amountplundered + 1;
    };
    if (b_checkitem(inv_misc, 18)) {
        amountplundered = amountplundered + 1;
    };
    if (b_checkitem(inv_misc, 19)) {
        amountplundered = amountplundered + 1;
    };
    if (b_checkitem(inv_misc, 20)) {
        amountplundered = amountplundered + 1;
    };
    if (b_checkitem(inv_misc, 21)) {
        amountplundered = amountplundered + 1;
    };
    if (b_checkitem(inv_misc, 22)) {
        amountplundered = amountplundered + 1;
    };
    if (b_checkitem(inv_misc, 23)) {
        amountplundered = amountplundered + 1;
    };
    if (b_checkitem(inv_misc, 24)) {
        amountplundered = amountplundered + 1;
    };
    if (b_checkitem(inv_misc, 25)) {
        amountplundered = amountplundered + 1;
    };
    if (b_checkitem(inv_misc, 26)) {
        amountplundered = amountplundered + 1;
    };
    if (b_checkitem(inv_misc, 27)) {
        amountplundered = amountplundered + 1;
    };
    if (b_checkitem(inv_misc, 28)) {
        amountplundered = amountplundered + 1;
    };
    if (b_checkitem(inv_misc, 29)) {
        amountplundered = amountplundered + 1;
    };
    printdebugint(pd_zs_check, "...Anzahl gepl*nderter Items: ", amountplundered);
    return amountplundered;
};

func void b_assessbody() {
    printdebugnpc(pd_zs_frame, "B_AssessBody");
    printglobals(pd_zs_check);
    if (npc_getdisttonpc(self, other) < 1000) {
        printdebugnpc(pd_zs_check, "...K*rper n*her als 10m!");
        b_fullstop(self);
        ai_startstate(self, zs_assessbody, 0, "");
    };
};

func void b_assessremoveweapon() {
    printdebugnpc(pd_zs_frame, "B_AssessRemoveWeapon");
    c_stoplookat(self);
    b_removeweapon(self);
    if (npc_getdisttonpc(self, other) < perc_dist_dialog) {
        b_say(self, other, "$WISEMOVE");
    };
    ai_continueroutine(self);
};

func void b_assessfightsound() {
    printdebugnpc(pd_zs_frame, "B_AssessFightSound");
    if (c_npcismonster(other) && c_npcishuman(victim)) {
        printdebugnpc(pd_zs_frame, "...Monster greift Mensch an!");
        if ((npc_getattitude(self, victim) == att_friendly) || (npc_getattitude(self, victim) == att_neutral)) {
            if (npc_canseenpcfreelos(self, other) && (npc_getdisttonpc(self, other) < hai_dist_assess_monster)) {
                ai_startstate(self, zs_assessmonster, 0, "");
                return;
            };
            return;
        }
        else {
            b_smartturntonpc(self, victim);
            printattitudes(pd_zs_check);
            b_assessfighter();
            return;
        };
    }
    else if (c_npcisdangerousmonster(self, victim) && c_npcishuman(other)) {
        printdebugnpc(pd_zs_check, "...Mensch greift Monster an!");
        if ((npc_getattitude(self, other) == att_friendly) || (npc_getattitude(self, other) == att_neutral)) {
            if (npc_canseenpcfreelos(self, victim) && (npc_getdisttonpc(self, victim) < hai_dist_assess_monster)) {
                npc_settarget(self, victim);
                npc_gettarget(self);
                ai_startstate(self, zs_assessmonster, 0, "");
                return;
            };
            return;
        }
        else {
            b_smartturntonpc(self, victim);
            printattitudes(pd_zs_check);
            b_assessfighter();
            return;
        };
    };
    if (hlp_getinstanceid(self) == hlp_getinstanceid(victim)) {
        printdebugnpc(pd_zs_check, "...NSC selbst wurde getroffen!");
        b_fullstop(self);
        ai_startstate(self, zs_reacttodamage, 0, "");
        return;
    };
    if (c_chargewasattacked(self, victim, other)) {
        printdebugnpc(pd_zs_check, "...NSC ist Wache und ein Sch*tzling wurde attackiert!");
        if (npc_getpermattitude(victim, other) == att_friendly) {
            printdebugnpc(pd_zs_check, "...war nur 'friendly fire'!");
            return;
        }
        printglobals(pd_zs_check);
        printdebugnpc(pd_zs_check, "...und der ist auch sauer bzw. flieht!");
        b_fullstop(self);
        npc_settarget(self, other);
        b_whirlaround(self, other);
        if (npc_isplayer(other)) {
            b_drawweapon(self, other);
            ai_startstate(self, zs_proclaimandpunish, 0, "");
            return;
        }
        else {
            npc_settarget(self, other);
            ai_startstate(self, zs_attack, 0, "");
            return;
        };
    }
    else if ((c_npcisboss(self) || c_npcisguard(self)) || c_npcisguardarcher(self)) {
        printdebugnpc(pd_zs_check, "...NSC geh*rt zu BOSS-Gilde!");
        b_smartturntonpc(self, victim);
        b_assessfighter();
        return;
    }
    else {
        if (npc_getdisttonpc(self, victim) < perc_dist_watchfight) {
            printdebugnpc(pd_zs_check, "...Opfer in WatchFight-Range!");
            b_whirlaround(self, victim);
            ai_startstate(self, zs_watchfight, 0, "");
            return;
        };
    };
};

func void b_assessquietsound() {
    printdebugnpc(pd_zs_frame, "B_AssessQuietSound");
    printglobals(pd_zs_frame);
    if (snd_issourcenpc(self)) {
        printdebugnpc(pd_zs_check, "...Ger*uschquelle ist SC!");
        if (other.guild == gil_meatbug) {
            return;
        };
        if (!npc_canseesource(self)) {
            printdebugnpc(pd_zs_check, "...kann Ger*uschquelle nicht sehen!");
            b_assesssc();
        };
    };
};

func void b_guarditemsassesstheft() {
    printdebugnpc(pd_zs_check, "B_GuardItemsAssessTheft");
    if (npc_isplayer(other)) {
        if (hlp_isvaliditem(item) && (!hlp_isvalidnpc(victim))) {
            if (npc_canseenpcfreelos(self, other)) {
                b_sayoverlay(self, other, "$HANDSOFF");
                npc_sendpassiveperc(self, perc_assesswarn, self, other);
                if (c_amistronger(self, other)) {
                    ai_standup(self);
                    ai_startstate(self, zs_catchthief, 0, "");
                };
            };
        };
    };
};

func void b_assesstheft() {
    var int other_guild;
    var int self_guild;
    var int item_ownerguild;

    if (self.aivar[42] == true) {
        b_guarditemsassesstheft();
    };
    printdebugnpc(pd_zs_check, "B_AssessTheft");
    other_guild = other.guild;
    self_guild = self.guild;
    if (!npc_isplayer(other)) {
        printdebugnpc(pd_zs_check, "...anderer Nsc hat ein Item aufgehoben");
        return;
    };
    ai_quicklook(self, other);
    if (npc_canseenpc(self, other)) {
        printdebugnpc(pd_zs_check, "...NSC kann den Dieb sehen!");
        if (hlp_isvaliditem(item) && (!hlp_isvalidnpc(victim))) {
            printdebugnpc(pd_zs_check, "...Item wurde aufgehoben!");
            item_ownerguild = item.ownerguild;
            if (npc_ownedbynpc(item, self)) {
                printdebugnpc(pd_zs_check, "...Item geh*rt NSC!");
                npc_clearaiqueue(self);
                c_lookatnpc(self, other);
                ai_startstate(self, zs_catchthief, 0, "");
                return;
            }
            else if ((wld_getguildattitude(self_guild, item_ownerguild) == att_friendly) && (wld_getguildattitude(self_guild, other_guild) != att_friendly)) {
                b_fullstop(self);
                printdebugnpc(pd_zs_check, "Gilden-Bes.");
                c_lookatnpc(self, other);
                ai_startstate(self, zs_catchthief, 0, "");
                return;
            }
            else if (self.aivar == hlp_getinstanceid(item)) {
                b_fullstop(self);
                printdebugnpc(pd_zs_check, "Wanted Item");
                if (c_amistronger(self, other) && (!wld_detectitem(self, item_multi))) {
                    printdebugnpc(pd_zs_check, "Wanted Item & Stronger");
                    npc_perceiveall(self);
                    if (!wld_detectnpc(self, -1, zs_getbackitem, -1)) {
                        ai_startstate(self, zs_getbackitem, 0, "");
                    }
                    else {
                        ai_startstate(self, zs_observeperson, 0, "");
                    };
                }
                else {
                    npc_clearaiqueue(self);
                    ai_quicklook(self, other);
                    b_say(self, other, "$YOUCANKEEPTHECRAP");
                    ai_continueroutine(self);
                };
            };
        }
        else {
            printdebugnpc(pd_zs_check, "...Taschendiebstahl!");
            if ((c_npcishuman(victim) && (!c_npcisdown(victim))) && (((wld_getguildattitude(self.guild, victim.guild) == att_friendly) || (wld_getguildattitude(self.guild, victim.guild) == att_neutral)) || (npc_getpermattitude(self, other) == att_angry))) {
                printdebugnpc(pd_zs_check, "...Opfer FRIENDLY/NEUTRAL oder Dieb ANGRY");
                b_fullstop(self);
                c_lookatnpc(self, other);
                ai_pointatnpc(self, other);
                b_say(self, other, "$BEHINDYOU");
                b_assessandmemorize(news_theft, news_source_witness, self, other, victim);
                ai_stoppointat(self);
                npc_sendpassiveperc(self, perc_assesswarn, victim, other);
                ai_startstate(self, zs_observeperson, 0, "");
                return;
            };
        };
    }
    else {
        printdebugnpc(pd_zs_check, "...NSC kann den Dieb NICHT sehen!");
    };
};

func void b_assessusemob() {
    var string detectedmob;

    printdebugnpc(pd_zs_frame, "B_AssessUseMob");
    detectedmob = npc_getdetectedmob(other);
    printdebugnpc(pd_zs_check, detectedmob);
    if (npc_canseenpcfreelos(self, other)) {
        if (npc_isdetectedmobownedbynpc(other, self) || npc_isdetectedmobownedbyguild(other, self.guild)) {
            printdebugnpc(pd_zs_check, "...MOB geh*rt NSC oder seiner Gilde!");
            if ((npc_getpermattitude(self, other) == att_friendly) || (self.guild == other.guild)) {
                printdebugnpc(pd_zs_check, "...Manipulator ist FRIENDLY oder in gleicher Gilde!");
                b_say(self, other, "$HandsOff");
            }
            else {
                printglobals(pd_zs_check);
                npc_settempattitude(self, att_hostile);
                npc_clearaiqueue(self);
                b_whirlaround(self, other);
                b_sayoverlay(self, other, "$IWillTeachYouRespectForForeignProperty");
                ai_setwalkmode(self, npc_run);
                npc_settarget(self, other);
                ai_startstate(self, zs_attack, 0, "");
            };
        }
        else {
            printdebugnpc(pd_zs_detail, "not my MoB");
        };
    }
    else {
        printdebugnpc(pd_zs_detail, "kann SC nicht sehen");
    };
};

func void b_assesswarn() {
    printdebugnpc(pd_zs_frame, "B_AssessWarn");
    printglobals(pd_zs_check);
    printattitudes(pd_zs_check);
    npc_percdisable(self, perc_assesswarn);
    if (!c_npcishuman(other)) {
        printdebugnpc(pd_zs_check, "B_AssessWarn Monster");
        ai_standup(self);
        if (npc_getdisttonpc(self, other) < hai_dist_assess_monster) {
            npc_settarget(self, other);
            npc_gettarget(self);
            ai_startstate(self, zs_assessmonster, 0, "");
        };
    }
    else if (!c_npcishuman(victim)) {
        printdebugnpc(pd_zs_check, "B_AssessWarn Monster");
        ai_standup(self);
        if (npc_getdisttonpc(self, victim) < hai_dist_assess_monster) {
            npc_settarget(self, victim);
            npc_gettarget(self);
            ai_startstate(self, zs_assessmonster, 0, "");
        };
    }
    else {
        printdebugnpc(pd_zs_check, "B_AssessWarn Human");
        b_fullstop(self);
        ai_startstate(self, zs_assesswarn, 0, "");
    };
};

func void b_cheerfight() {
    printdebugnpc(pd_zs_frame, "B_CheerFight");
    if (npc_getstatetime(self) > 5) {
        npc_setstatetime(self, 0);
        if (npc_gettempattitude(self, victim) == att_friendly) {
            printdebugnpc(pd_zs_check, "B_CheerFight // Friendly victim");
            if ((npc_gettempattitude(self, other) == att_neutral) || (npc_gettempattitude(self, other) == att_angry)) {
                printdebugnpc(pd_zs_check, "B_CheerFight // Friendly victim // neutral Attacker");
                b_say(self, NULL, "$OOH");
                ai_playani(self, "T_WATCHFIGHT_OHNO");
            }
            else {
                if (npc_gettempattitude(self, other) == att_friendly) {
                    printdebugnpc(pd_zs_check, "B_CheerFight // Friendly victim // friendly Attacker");
                    b_say(self, NULL, "$CHEERFIGHT");
                    ai_playani(self, "T_WATCHFIGHT_YEAH");
                };
            };
        }
        printdebugnpc(pd_zs_check, "B_CheerFight // No Friendly victim");
        if (npc_gettempattitude(self, other) == att_friendly) {
            printdebugnpc(pd_zs_check, "B_CheerFight // No Friendly victim // friendly aggressor");
            b_say(self, NULL, "$CHEERFRIEND");
            ai_playani(self, "T_WATCHFIGHT_YEAH");
        }
        else {
            printdebugnpc(pd_zs_check, "B_CheerFight // NO Friendly victim //  NO friendly aggressor");
            b_say(self, NULL, "$CHEERFIGHT");
            ai_playani(self, "T_WATCHFIGHT_YEAH");
        };
    };
};

func void b_combatassessdefeat() {
    printdebugnpc(pd_zs_frame, "B_CombatAssessDefeat");
    if (npc_canseenpcfreelos(self, other)) {
        if (c_npcishuman(other) && c_npcishuman(victim)) {
            printdebugnpc(pd_zs_check, "...Mensch besiegt Mensch!");
            b_assessandmemorize(news_defeat, news_source_witness, self, other, victim);
            if (npc_isinstate(self, zs_proclaimandpunish)) {
                printdebugnpc(pd_zs_check, "...NSC ist in ZS_ProclaimAndPunish!");
                if (hlp_getinstanceid(victim) == hlp_getinstanceid(hero)) {
                    printdebugnpc(pd_zs_check, "...Besiegter ist auch eigenes Ziel!");
                    b_fullstop(self);
                    ai_continueroutine(self);
                };
            };
        };
    };
};

func void b_combatassessmurder() {
    printdebugnpc(pd_zs_frame, "B_CombatAssessMurder");
    printglobals(pd_zs_check);
    if (npc_canseenpc(self, other)) {
        printdebugnpc(pd_zs_check, "B_CombatAssessMurder seen");
        if (c_npcishuman(other) && c_npcishuman(victim)) {
            printdebugnpc(pd_zs_check, "B_CombatAssessMurder seen // Both human");
            b_assessandmemorize(news_murder, news_source_witness, self, other, victim);
            if (npc_isinstate(self, zs_proclaimandpunish)) {
                printdebugnpc(pd_zs_check, "...NSC ist in ZS_ProclaimAndPunish!");
                if (hlp_getinstanceid(victim) == hlp_getinstanceid(hero)) {
                    printdebugnpc(pd_zs_check, "...Get*teter ist auch eigenes Ziel!");
                    b_fullstop(self);
                    ai_continueroutine(self);
                };
            };
        };
        if ((npc_gettempattitude(self, victim) == att_friendly) && (!c_npcishuman(victim))) {
            printdebugnpc(pd_zs_check, "B_CombatAssessMurder seen // friendly to victim ::");
            npc_settempattitude(self, att_hostile);
        };
    }
    else {
        if (c_npcishuman(other) && c_npcishuman(victim)) {
            printdebugnpc(pd_zs_check, "B_CombatAssessMurder // only heard");
            b_assessandmemorize(news_murder, news_source_witness, self, NULL, victim);
        };
    };
};

func void b_specialcombatdamagereaction() {
    printdebugnpc(pd_zs_frame, "B_SpecialCombatDamageReaction");
    if (self.id == 2999) {
        self.aivar[24] = self.aivar[24] + 1;
        if (self.aivar[24] >= highpriest_maxhit) {
            printdebugnpc(pd_zs_check, "...Hohepriester 5mal getroffen!");
            hero.aivar[22] = true;
            npc_settempattitude(self, att_neutral);
            npc_setpermattitude(self, att_neutral);
            b_fullstop(self);
            ai_continueroutine(self);
        };
        ai_continueroutine(self);
    };
};

func void b_combatreacttodamage() {
    printdebugnpc(pd_zs_frame, "B_CombatReactToDamage");
    printglobals(pd_zs_check);
    if (npc_isplayer(other) && ((self.npctype == npctype_friend) || (npc_getpermattitude(self, other) == att_friendly))) {
        return;
    };
    if (npc_isinfightmode(other, fmode_far) || npc_isinfightmode(other, fmode_magic)) {
        self.aivar[10] = true;
    }
    else {
        self.aivar[10] = false;
    };
    if (npc_isplayer(other)) {
        npc_settempattitude(self, att_hostile);
        if ((npc_getattitude(self, other) == att_hostile) || (npc_getattitude(self, other) == att_angry)) {
            npc_settarget(self, other);
        };
    };
    if (self.aivar[37]) {
        b_specialcombatdamagereaction();
    };
};

func void b_greetupcoming() {
    var int greet;

    printdebugnpc(pd_zs_frame, "B_GreetUpcoming");
    if (npc_canseenpc(self, other)) {
        printdebugnpc(pd_zs_check, "B_GreetUpcoming see // First");
        if (npc_canseenpc(other, self)) {
            printdebugnpc(pd_zs_check, "B_GreetUpcoming see // Second");
            if (npc_getdisttonpc(self, other) < perc_dist_dialog) {
                printdebugnpc(pd_zs_check, "B_GreetUpcoming see Dialog");
                b_assesssc();
                b_guildgreetings();
                return;
            };
        };
    };
};

func void b_lookaround() {
    printdebugnpc(pd_zs_frame, "B_LookAround");
    npc_setperctime(self, 0.5);
    ai_standup(self);
    ai_playani(self, "T_SEARCH");
};

func void b_movemob() {
    var string door;

    door = npc_getdetectedmob(self);
    if (hlp_strcmp(door, "DOOR")) {
        if (wld_getmobstate(self, door) == 0) {
            npc_clearaiqueue(self);
            ai_usemob(self, door, 1);
            ai_usemob(self, door, -1);
        };
    }
    else {
        return;
    };
    ai_continueroutine(self);
};

func void b_movenpc() {
    printdebugnpc(pd_zs_detail, "B_MoveNpc");
    if (other.aivar[33] == false) {
        if (npc_isincutscene(self) || npc_isincutscene(other)) {
            printdebugnpc(pd_zs_detail, "...Blockierender oder Blockierter in Cutscene!!!");
            return;
        };
        if (c_npcisdown(other)) {
            printdebugnpc(pd_zs_detail, "...Blockierender ist kampfunf*hig!");
            return;
        };
        if (c_npctypeisfriend(self, other)) {
            printdebugnpc(pd_zs_detail, "...Blockierender ist Freund!");
            return;
        };
        if (other.aivar[33]) {
            printdebugnpc(pd_zs_detail, "...Blockierender ist in ZS_Talk!");
            return;
        };
        if (!c_bodystatecontains(other, bs_stand)) {
            printdebugnpc(pd_zs_detail, "...Blockierender ist in Bewegung!");
            return;
        };
        if (npc_getattitude(self, other) == att_hostile) {
            printdebugnpc(pd_zs_detail, "...Blockierender ist feindlich!");
            b_assessenemy();
            return;
        }
        else if (!npc_isplayer(other)) {
            printdebugnpc(pd_zs_detail, "...Blockierender ist kein Spieler!");
            if ((self.level > other.level) || ((self.level == other.level) && (self.id > other.id))) {
            }
            else {
            };
        }
        else if (c_npcisworker(self)) {
            printdebugnpc(pd_zs_detail, "...ich bin unwichter NSC!");
            b_fullstop(self);
            b_smartturntonpc(self, other);
            ai_startstate(self, zs_movenpcfriendlywait, 0, "");
            return;
        }
        else if ((((((npc_getattitude(self, other) == att_angry) || (npc_getattitude(self, other) == att_neutral)) && c_amistronger(self, other)) && (!c_npcisguard(self))) && (!c_npcisguardarcher(self))) && (!self.aivar[19])) {
            b_fullstop(self);
            b_smartturntonpc(self, other);
            b_say(self, other, "$OUTOFMYWAY");
            ai_startstate(self, zs_movenpcwait, 0, "");
            return;
        }
        else {
            b_fullstop(self);
            b_smartturntonpc(self, other);
            b_say(self, other, "$MAKEWAY");
            ai_startstate(self, zs_movenpcfriendlywait, 0, "");
            return;
        };
    };
};

func void b_observepasserby() {
    if (!c_lookatnpc(self, other)) {
        c_stoplookat(self);
    };
};

func void b_occupiedobserveintruder() {
    printdebugnpc(pd_zs_frame, "B_OccupiedObserveIntruder");
    if (!c_npcishuman(other)) {
        printdebugnpc(pd_zs_frame, "...Nsc ist Monster!");
        b_assessfighter();
    };
    if (npc_getdisttonpc(self, other) < perc_dist_close) {
        printdebugnpc(pd_zs_frame, "... Eindringling zu nahe!");
        if (other.guild != gil_meatbug) {
            printdebugnpc(pd_zs_frame, "...und kein Meatbug!");
            ai_quicklook(self, other);
            b_assesssc();
        };
    };
};

func void b_reacttomemory() {
    var int murdernews;
    var c_npc murdernews_victim;
    var c_npc murdernews_offender;
    var int defeat_news;
    var int self_guild;
    var int defeat_news_victim_guild;
    var int defeat_news_offender_guild;
    var int other_guild;
    var c_npc defeat_news_offender;
    var c_npc defeat_news_victim;
    var int theft_news;
    var c_npc theft_news_victim;
    var c_npc theft_news_offender;

    printdebugnpc(pd_zs_frame, "B_ReactToMemory");
    murdernews = npc_hasnews(self, news_murder, NULL, NULL);
    if (murdernews > 0) {
        murdernews_victim = npc_getnewsvictim(self, murdernews);
        murdernews_offender = npc_getnewsoffender(self, murdernews);
        printdebugnpc(pd_zs_check, "B_ReactToMemory // Murder_News");
        if (b_comparenpcinstance(murdernews_offender, other)) {
            printdebugnpc(pd_zs_check, "B_ReactToMemory // Murder_News// SC Offender");
            if ((npc_getpermattitude(self, other) == att_friendly) || (npc_getpermattitude(self, other) == att_neutral)) {
                printdebugnpc(pd_zs_check, "B_ReactToMemory // Murder_News // Friendly/Neutral offender SC");
                if (hlp_isvalidnpc(murdernews_victim)) {
                    printdebugnpc(pd_zs_check, "B_ReactToMemory // Murder_News// SC Offender es gibt ein victim");
                };
                printdebugnpc(pd_zs_frame, "B_ReactToMemory // Murder_News // Friendly/Neutral offender SC victim  NOT hostile");
                if (murdernews_victim.guild == gil_ebr) {
                    printdebugnpc(pd_zs_frame, "B_ReactToMemory // Murder_News // Friendly/Neutral offender SC victim  NOT hostile// EBR");
                    b_say(self, other, "$YOUKILLEDEBR");
                    npc_deletenews(self, murdernews);
                    return;
                };
                if (murdernews_victim.guild == gil_gur) {
                    printdebugnpc(pd_zs_frame, "B_ReactToMemory // Murder_News // Friendly/Neutral offender SC victim  NOT hostile // GUR");
                    b_say(self, other, "$YOUKILLEDGUR");
                    npc_deletenews(self, murdernews);
                    return;
                };
                if ((murdernews_victim.guild == gil_kdw) || (murdernews_victim.guild == gil_kdf)) {
                    printdebugnpc(pd_zs_frame, "B_ReactToMemory // Murder_News // Friendly/Neutral offender SC victim  NOT hostile // KDF");
                    b_say(self, other, "$YOUKILLEDMAGE");
                    npc_deletenews(self, murdernews);
                    return;
                };
                if (murdernews_victim.guild == gil_grd) {
                    printdebugnpc(pd_zs_frame, "B_ReactToMemory // Murder_News // Friendly/Neutral offender SC victim  NOT hostile // GRD");
                    b_say(self, other, "$YOUKILLEDOCFOLK");
                    npc_deletenews(self, murdernews);
                    return;
                };
                if (murdernews_victim.guild == gil_stt) {
                    printdebugnpc(pd_zs_frame, "B_ReactToMemory // Murder_News // Friendly/Neutral offender SC victim  NOT hostile // STT");
                    b_say(self, other, "$YOUKILLEDOCFOLK");
                    npc_deletenews(self, murdernews);
                    return;
                };
                if (murdernews_victim.guild == gil_vlk) {
                    printdebugnpc(pd_zs_frame, "B_ReactToMemory // Murder_News // Friendly/Neutral offender SC victim  NOT hostile // VLK");
                    b_say(self, other, "$YOUKILLEDOCFOLK");
                    npc_deletenews(self, murdernews);
                    return;
                };
                if (murdernews_victim.guild == gil_sld) {
                    printdebugnpc(pd_zs_frame, "B_ReactToMemory // Murder_News // Friendly/Neutral offender SC victim  NOT hostile // SLD");
                    b_say(self, other, "$YOUKILLEDNCFOLK");
                    npc_deletenews(self, murdernews);
                    return;
                };
                if (murdernews_victim.guild == gil_org) {
                    printdebugnpc(pd_zs_frame, "B_ReactToMemory // Murder_News // Friendly/Neutral offender SC victim  NOT hostile // ORG");
                    b_say(self, other, "$YOUKILLEDNCFOLK");
                    npc_deletenews(self, murdernews);
                    return;
                };
                if (murdernews_victim.guild == gil_bau) {
                    printdebugnpc(pd_zs_frame, "B_ReactToMemory // Murder_News // Friendly/Neutral offender SC victim  NOT hostile // BAU");
                    b_say(self, other, "$YOUKILLEDNCFOLK");
                    npc_deletenews(self, murdernews);
                    return;
                };
                if (murdernews_victim.guild == gil_sfb) {
                    printdebugnpc(pd_zs_frame, "B_ReactToMemory // Murder_News // Friendly/Neutral offender SC victim  NOT hostile // SFB");
                    b_say(self, other, "$YOUKILLEDNCFOLK");
                    npc_deletenews(self, murdernews);
                    return;
                };
                if (murdernews_victim.guild == gil_nov) {
                    printdebugnpc(pd_zs_frame, "B_ReactToMemory // Murder_News // Friendly/Neutral offender SC victim  NOT hostile // NOV");
                    b_say(self, other, "$YOUKILLEDPSIFOLK");
                    npc_deletenews(self, murdernews);
                    return;
                };
                if (murdernews_victim.guild == gil_tpl) {
                    printdebugnpc(pd_zs_frame, "B_ReactToMemory // Murder_News // Friendly/Neutral offender SC victim  NOT hostile // TPL");
                    b_say(self, other, "$YOUKILLEDPSIFOLK");
                    npc_deletenews(self, murdernews);
                    return;
                };
            };
            if ((npc_getpermattitude(self, other) == att_angry) && (npc_getpermattitude(self, murdernews_victim) == att_friendly)) {
                printdebugnpc(pd_zs_frame, "B_ReactToMemory // Murder_News// SC Offender(angry) victim(Friendly)");
                b_say(self, other, "$YOUKILLEDMYFRIEND");
                npc_deletenews(self, murdernews);
                return;
            };
        }
        else if (b_comparenpcinstance(other, murdernews_victim)) {
        }
        else {
            printdebugnpc(pd_zs_frame, "B_ReactToMemory // Murder_News// SC Not Victim and not offender");
            if ((npc_getpermattitude(self, other) == att_friendly) || (npc_getpermattitude(self, other) == att_neutral)) {
                printdebugnpc(pd_zs_frame, "B_ReactToMemory // Murder_News// SC Not Victim and not offender and ok guy");
                if (npc_getpermattitude(self, murdernews_victim) == att_friendly) {
                    printdebugnpc(pd_zs_frame, "B_ReactToMemory // Murder_News// SC Not Victim and not offender and ok guy victim was a friend");
                    b_say(self, other, "$THEYKILLEDMYFRIEND");
                    npc_deletenews(self, murdernews);
                    return;
                };
            };
        };
        npc_deletenews(self, murdernews);
    };
    if (self.aivar[2] == 1) {
        if (npc_getpermattitude(self, other) == att_angry) {
            printdebugnpc(pd_zs_frame, "B_ReactToMemory // Attack_News SC offender victim(Angry) is me");
            b_say(self, other, "$LOOKINGFORTROUBLEAGAIN");
        };
        if ((npc_getpermattitude(self, other) == att_friendly) || (npc_getpermattitude(self, other) == att_neutral)) {
            printdebugnpc(pd_zs_frame, "B_ReactToMemory // Attack_News SC offender victim(friend/neutr) is me");
            b_say(self, other, "$LETSFORGETOURLITTLEFIGHT");
        };
        self.aivar[2] = 0;
        return;
    };
    defeat_news = npc_hasnews(self, news_defeat, NULL, NULL);
    if (defeat_news > 0) {
        defeat_news_victim = npc_getnewsvictim(self, defeat_news);
        defeat_news_offender = npc_getnewsoffender(self, defeat_news);
        self_guild = self.guild;
        defeat_news_victim_guild = defeat_news_victim.guild;
        defeat_news_offender_guild = defeat_news_offender.guild;
        other_guild = other.guild;
        printdebugnpc(pd_zs_frame, "B_ReactToMemory // Defeat_News");
        if (b_comparenpcinstance(other, defeat_news_offender)) {
            printdebugnpc(pd_zs_frame, "B_ReactToMemory // Defeat_News // SC offender");
            if (b_comparenpcinstance(self, defeat_news_victim)) {
                printdebugnpc(pd_zs_frame, "B_ReactToMemory // Defeat_News // SC offender// victim is me");
                if (npc_getpermattitude(self, defeat_news_offender) == att_angry) {
                    printdebugnpc(pd_zs_frame, "B_ReactToMemory // Defeat_News // SC(angry) offender// victim is me");
                    b_say(self, other, "$LookingForTroubleAgain");
                    npc_deletenews(self, defeat_news);
                    return;
                };
                if ((npc_getpermattitude(self, defeat_news_offender) == att_neutral) || (npc_getpermattitude(self, defeat_news_offender) == att_friendly)) {
                    printdebugnpc(pd_zs_frame, "B_ReactToMemory // Defeat_News // SC(friend/neutr) offender// victim is me");
                    b_say(self, other, "$YOUDEFEATEDMEWELL");
                    npc_deletenews(self, defeat_news);
                    return;
                };
            }
            else if (!b_comparenpcinstance(defeat_news_victim, other)) {
                printdebugnpc(pd_zs_frame, "B_ReactToMemory // Defeat_News // SC offender// victim is an other");
                if (npc_getpermattitude(self, defeat_news_offender) == att_angry) {
                    printdebugnpc(pd_zs_frame, "B_ReactToMemory // Defeat_News // SC (angry) offender// victim is an other");
                    if (wld_getguildattitude(self_guild, defeat_news_victim_guild) == att_friendly) {
                        printdebugnpc(pd_zs_frame, "B_ReactToMemory // Defeat_News // SC (Angry)  offender // victimguild (friendly)");
                        if (defeat_news_victim_guild == gil_ebr) {
                            printdebugnpc(pd_zs_frame, "B_ReactToMemory // Defeat_News // SC (Angry)  offender // victimguild (friendly) EBR");
                            b_say(self, other, "$SUCKERDEFEATEDEBR");
                            npc_deletenews(self, defeat_news);
                        }
                        else if (defeat_news_victim_guild == gil_gur) {
                            printdebugnpc(pd_zs_frame, "B_ReactToMemory // Defeat_News // SC (Angry)  offender // victimguild (friendly) GUR");
                            b_say(self, other, "$SUCKERDEFEATEDGUR");
                            npc_deletenews(self, defeat_news);
                            return;
                        }
                        else if ((defeat_news_victim_guild == gil_kdf) || (defeat_news_victim_guild == gil_kdw)) {
                            printdebugnpc(pd_zs_frame, "B_ReactToMemory // Defeat_News // SC (Angry)  offender// victimguild (friendly) MAGE");
                            b_say(self, other, "$SUCKERDEFEATEDMAGE");
                            npc_deletenews(self, defeat_news);
                            return;
                        }
                        else if ((self_guild == gil_grd) && ((defeat_news_victim_guild == gil_vlk) || (defeat_news_victim_guild == gil_stt))) {
                            b_say(self, other, "$SUCKERDEFEATEDVLK_GUARD");
                            npc_deletenews(self, defeat_news);
                            return;
                        }
                        else if ((self_guild == gil_tpl) && (defeat_news_victim_guild == gil_nov)) {
                            b_say(self, other, "$SUCKERDEFEATEDNOV_GUARD");
                            npc_deletenews(self, defeat_news);
                            return;
                        }
                        else {
                            printdebugnpc(pd_zs_frame, "B_ReactToMemory // Defeat_News // SC (Angry)  offender// victimguild (friendly) all others");
                            if ((wld_getguildattitude(self_guild, defeat_news_offender_guild) == att_angry) || (wld_getguildattitude(self_guild, defeat_news_offender_guild) == att_neutral)) {
                                printdebugnpc(pd_zs_frame, "B_ReactToMemory // Defeat_News // SC (Angry / guild-angry/neutral)  offender // victimguild (friendly) all others");
                                b_say(self, other, "$YOUATTACKEDMYFRIEND");
                                npc_deletenews(self, defeat_news);
                                return;
                            };
                        };
                    };
                }
                else if ((npc_getpermattitude(self, defeat_news_offender) == att_friendly) || (npc_getpermattitude(self, defeat_news_offender) == att_neutral)) {
                    printdebugnpc(pd_zs_frame, "B_ReactToMemory // Defeat_News // SC (friendly/neutral) offender// victim is an other");
                    if ((defeat_news_victim_guild == gil_ebr) && (self_guild != gil_ebr)) {
                        printdebugnpc(pd_zs_frame, "B_ReactToMemory // Defeat_News // SC (friendly/neutral) offender// victim is an other EBR me not EBR");
                        b_say(self, other, "$YOUATTACKEDEBR");
                        npc_deletenews(self, defeat_news);
                        return;
                    }
                    else if ((defeat_news_victim_guild == gil_gur) && (self_guild != gil_gur)) {
                        printdebugnpc(pd_zs_frame, "B_ReactToMemory // Defeat_News // SC (friendly/neutral) offender// victim is an other GUR me not GUR");
                        b_say(self, other, "$YOUATTACKEDGUR");
                        npc_deletenews(self, defeat_news);
                        return;
                    }
                    else if ((defeat_news_victim_guild == gil_kdw) || (defeat_news_victim_guild == gil_kdf)) {
                        printdebugnpc(pd_zs_frame, "B_ReactToMemory // Defeat_News // SC (friendly/neutral) offender// victim is an other MAGE me not MAGE");
                        b_say(self, other, "$YOUATTACKEDMAGE");
                        npc_deletenews(self, defeat_news);
                        return;
                    }
                    else {
                        if (((defeat_news_victim_guild == gil_vlk) || (defeat_news_victim_guild == gil_stt)) && (self_guild == gil_grd)) {
                            b_say(self, other, "$YOUDFEATEDVLK_GUARD");
                            npc_deletenews(self, defeat_news);
                            return;
                        };
                        if ((defeat_news_victim_guild == gil_nov) && (self_guild == gil_tpl)) {
                            b_say(self, other, "$YOUDEFEATEDNOV_GUARD");
                            npc_deletenews(self, defeat_news);
                            return;
                        };
                        printdebugnpc(pd_zs_frame, "B_ReactToMemory // Defeat_News // SC (friendly/neutral) offender// victim is protected by Guards");
                        if (c_npcisguard(self)) {
                            if (c_npcisguard(defeat_news_victim)) {
                                b_say(self, other, "$YouDefeatedMyComrade");
                                npc_deletenews(self, defeat_news);
                                return;
                            };
                            if (wld_getguildattitude(self_guild, defeat_news_victim_guild) == att_friendly) {
                                if (((defeat_news_victim_guild == gil_vlk) || (defeat_news_victim_guild == gil_stt)) && (self_guild == gil_grd)) {
                                    b_say(self, other, "$YOUDFEATEDVLK_GUARD");
                                    npc_deletenews(self, defeat_news);
                                    return;
                                };
                                if ((defeat_news_victim_guild == gil_nov) && (self_guild == gil_tpl)) {
                                    b_say(self, other, "$YOUDEFEATEDNOV_GUARD");
                                    npc_deletenews(self, defeat_news);
                                    return;
                                };
                            };
                        };
                    };
                };
            };
        }
        printdebugnpc(pd_zs_frame, "B_ReactToMemory // Defeat_News // victim is player");
        if (b_comparenpcinstance(self, defeat_news_offender)) {
            printdebugnpc(pd_zs_frame, "B_ReactToMemory // Defeat_News // victim is player/ me is aggressor");
            b_say(self, other, "$LOOKINGFORTROUBLEAGAIN");
            npc_deletenews(self, defeat_news);
            return;
        }
        else {
            printdebugnpc(pd_zs_frame, "B_ReactToMemory // Defeat_News // victim is player/ me is NOT aggressor");
            if (npc_getpermattitude(self, defeat_news_victim) == att_angry) {
                printdebugnpc(pd_zs_frame, "B_ReactToMemory // Defeat_News // victim is player(angry)/ me is NOT aggressor");
                b_say(self, other, "$SUCKERGOTSOME");
                npc_deletenews(self, defeat_news);
                return;
            };
        };
        npc_deletenews(self, defeat_news);
    };
    theft_news = npc_hasnews(self, news_theft, NULL, NULL);
    if (theft_news > 0) {
        theft_news_victim = npc_getnewsvictim(self, theft_news);
        theft_news_offender = npc_getnewsoffender(self, theft_news);
        if (b_comparenpcinstance(other, theft_news_offender)) {
            printdebugnpc(pd_zs_frame, "B_ReactToMemory // Theft_News // SC is Thief");
            if ((npc_getpermattitude(self, other) == att_friendly) || (npc_getpermattitude(self, other) == att_neutral)) {
                if ((theft_news_victim.guild == gil_ebr) && (self.guild != gil_ebr)) {
                    b_say(self, other, "$YOUSTOLEFROMEBR");
                    npc_deletenews(self, theft_news);
                    return;
                };
                if ((theft_news_victim.guild == gil_gur) && (self.guild != gil_gur)) {
                    b_say(self, other, "$YOUSTOLEFROMGUR");
                    npc_deletenews(self, theft_news);
                    return;
                };
                if ((theft_news_victim.guild == gil_kdw) || (theft_news_victim.guild == gil_kdf)) {
                    b_say(self, other, "$YOUSTOLEFROMMAGE");
                    npc_deletenews(self, theft_news);
                    return;
                };
            };
            if (npc_getpermattitude(self, other) == att_angry) {
                if (b_comparenpcinstance(self, theft_news_victim)) {
                    b_say(self, other, "$YOUSTOLEFROMME");
                    npc_deletenews(self, theft_news);
                    return;
                }
                else {
                    if ((theft_news_victim.guild == self.guild) && (wld_getguildattitude(self.guild, self.guild) == att_friendly)) {
                        b_say(self, other, "$YOUSTOLEFROMUS");
                        npc_deletenews(self, theft_news);
                        return;
                    };
                };
            };
        };
        npc_deletenews(self, theft_news);
    };
};

func void b_refresharmor() {
    printdebugnpc(pd_zs_frame, "B_RefreshArmor");
};

func void b_refusetalkangry() {
    printdebugnpc(pd_zs_frame, "B_RefuseTalkAngry");
    b_say(self, other, "$NOTNOW");
};

func void b_scale(var c_npc n) {
    printdebugnpc(pd_zs_frame, "B_Scale");
    if (n.attribute[atr_strength] /*4*/ < 10) {
        if (n.attribute[atr_hitpoints_max] /*1*/ < 19) {
            mdl_setmodelscale(n, 0.9, 1.0, 1.0);
        }
        else if ((n.attribute[atr_hitpoints_max] /*1*/ > 18) && (n.attribute[atr_hitpoints_max] /*1*/ < 26)) {
            mdl_setmodelscale(n, 0.9, 1.0, 1.0);
        }
        else {
            if (n.attribute[atr_hitpoints_max] /*1*/ > 25) {
                mdl_setmodelscale(n, 0.9, 1.0, 1.0);
            };
        };
    }
    else if ((n.attribute[atr_strength] /*4*/ > 9) && (n.attribute[atr_strength] /*4*/ < 14)) {
        if (n.attribute[atr_hitpoints_max] /*1*/ < 19) {
            mdl_setmodelscale(n, 1.0, 1.0, 1.0);
        }
        else if ((n.attribute[atr_hitpoints_max] /*1*/ > 18) && (n.attribute[atr_hitpoints_max] /*1*/ < 26)) {
            mdl_setmodelscale(n, 1.0, 1.0, 1.0);
        }
        else {
            if (n.attribute[atr_hitpoints_max] /*1*/ > 25) {
                mdl_setmodelscale(n, 1.0, 1.0, 1.0);
            };
        };
    }
    else if (n.attribute[atr_strength] /*4*/ > 12) {
        if (n.attribute[atr_hitpoints_max] /*1*/ < 19) {
            mdl_setmodelscale(n, 1.1, 1.0, 1.0);
        }
        else if ((n.attribute[atr_hitpoints_max] /*1*/ > 18) && (n.attribute[atr_hitpoints_max] /*1*/ < 26)) {
            mdl_setmodelscale(n, 1.1, 1.0, 1.0);
        }
        else {
            if (n.attribute[atr_hitpoints_max] /*1*/ > 25) {
                mdl_setmodelscale(n, 1.1, 1.0, 1.0);
            };
        };
    };
};

func void b_tossandturn() {
    printdebugnpc(pd_zs_frame, "B_TossAndTurn");
    npc_clearaiqueue(self);
    ai_playani(self, "R_BED_RANDOM_2");
};

func int c_cannewsbespread() {
    printdebugnpc(pd_zs_check, "C_CanNewsBeSpread");
};

func void b_interruptmob(var string mobsi) {
    var int randomize_mob;

    printdebugnpc(pd_ta_detail, "B_InterruptMob");
    ai_usemob(self, mobsi, -1);
    randomize_mob = hlp_random(7);
    if ((randomize_mob == 1) && (!c_npcisboss(self))) {
        ai_playani(self, "T_BORINGKICK");
    };
    if (randomize_mob == 2) {
        ai_playani(self, "T_SEARCH");
    };
    if (randomize_mob == 3) {
        ai_playani(self, "R_SCRATCHHEAD");
    };
    if (randomize_mob == 4) {
        ai_playani(self, "R_LEGSHAKE");
    };
    if (randomize_mob == 5) {
        ai_playani(self, "R_SCRATCHRSHOULDER");
    };
    if (randomize_mob == 6) {
        ai_playani(self, "R_SCRATCHLSHOULDER");
    };
    npc_setstatetime(self, 0);
    ai_usemob(self, mobsi, 1);
    self.aivar[34] = 1;
};

func int c_pcisinmyroom() {
    var c_npc owner;
    var int portalowner;

    printdebugnpc(pd_zs_frame, "C_PCIsInMyRoom");
    owner = wld_getplayerportalowner();
    portalowner = wld_getplayerportalguild();
    if ((self /*1255*/ == c_pcisinmyroom.owner /*5354*/) || (wld_getguildattitude(self.guild, portalowner) == att_friendly)) {
        return 1;
    }
    else {
        return 0;
    };
};

prototype npc_default(c_npc) {
    attribute[atr_strength] /*4*/ = 5;
    attribute[atr_dexterity] /*5*/ = 5;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 30;
    attribute[atr_hitpoints] /*0*/ = 30;
    protection[prot_edge] /*2*/ = 0;
    protection[prot_blunt] /*1*/ = 0;
    protection[prot_point] /*6*/ = 0;
    protection[prot_fire] /*3*/ = 0;
    protection[prot_magic] /*5*/ = 0;
    senses = sense_hear | sense_see;
    senses_range = 2000;
    npc_settalentvalue(self, npc_talent_1h, 0);
    npc_settalentvalue(self, npc_talent_2h, 0);
    npc_settalentvalue(self, npc_talent_bow, 0);
    npc_settalentvalue(self, npc_talent_crossbow, 0);
    npc_settalentvalue(self, npc_talent_picklock, 90);
    npc_settalentvalue(self, npc_talent_pickpocket, 90);
};

func void zs_mm_attackmage() {
    printdebugnpc(pd_zs_frame, "ZS_MM_AttackMage");
    npc_percenable(self, perc_assessdamage, b_mmm_combatreacttodamage);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_gettarget(self);
    b_selectweapon(self, other);
};

func int zs_mm_attackmage_loop() {
    printdebugnpc(pd_zs_loop, "ZS_MM_AttackMage_Loop");
    npc_gettarget(self);
    if ((npc_isinstate(other, zs_unconscious) || npc_isdead(other)) || npc_isinstate(other, zs_dead)) {
        printdebugnpc(pd_zs_check, "...Ziel bewu*tlos oder tot!");
        if (npc_isnexttargetavailable(self)) {
            npc_getnexttarget(self);
            printdebugstring(pd_zs_check, "...neues Ziel gefunden: ", other.name);
        }
        else {
            printdebugnpc(pd_zs_check, "...kein Neues Ziel vorhanden!");
            return loop_end;
        };
    };
    if (npc_getstatetime(self) >= 3) {
        printglobals(pd_mst_detail);
        npc_clearaiqueue(self);
        b_selectweapon(self, other);
        npc_setstatetime(self, 0);
    };
    ai_attack(self);
    ai_wait(self, 0.2);
    return loop_continue;
};

func void zs_mm_attackmage_end() {
    printdebugnpc(pd_zs_frame, "ZS_MM_AttackMage_End");
    b_removeweapon(self);
};

func void b_mmm_combatreacttodamage() {
    printdebugnpc(pd_zs_frame, "B_MMM_CombatReactToDamage");
    npc_settarget(self, other);
};

func int c_preytopredator(var c_npc prey, var c_npc predator) {
    printdebugnpc(pd_mst_frame, "C_PreyToPredator");
    if (prey.guild == gil_scavenger) {
        if (predator.guild == gil_snapper) {
            return 1;
        };
    };
    if (prey.guild == gil_molerat) {
        if (predator.guild == gil_wolf) {
            return 1;
        };
    };
    return 0;
};

func int b_mm_desynchronize() {
    var int msec;

    printdebugnpc(pd_mst_frame, "B_MM_DeSynchronize");
    msec = hlp_random(1000);
    ai_waitms(self, msec);
};

func void b_mm_observeintruder() {
    printdebugnpc(pd_mst_frame, "B_MM_ObserveIntruder");
    if (npc_getdisttonpc(self, other) <= self.aivar[3]) {
        npc_settarget(self, other);
        npc_clearaiqueue(self);
        ai_startstate(self, zs_mm_attack, 0, "");
    };
};

func void b_mm_assessbody() {
    printdebugnpc(pd_mst_frame, "B_MM_AssessBody");
    if (self.aivar[8] == prio_prey) {
        if (npc_getdisttonpc(self, other) < self.aivar[1]) {
            if (c_preytopredator(other, self)) {
                npc_clearaiqueue(self);
                ai_startstate(self, zs_mm_eatbody, 0, "");
            };
        };
    };
};

func void zs_mm_eatbody() {
    printdebugnpc(pd_mst_frame, "ZS_MM_EatBody");
    npc_percenable(self, perc_assessdamage, b_mm_reacttodamage);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_observeintruder, b_mm_observeintruder);
    npc_percenable(self, perc_assessenemy, b_mm_observeintruder);
    ai_gotonpc(self, other);
    ai_turntonpc(self, other);
    ai_playani(self, "T_STAND_2_EAT");
};

func int zs_mm_eatbody_loop() {
    printdebugnpc(pd_mst_loop, "ZS_MM_EatBody_loop");
    if (!hlp_isvalidnpc(other)) {
        return loop_end;
    };
    return loop_continue;
};

func void zs_mm_eatbody_end() {
    printdebugnpc(pd_mst_frame, "ZS_MM_EatBody_end");
    ai_playani(self, "T_EAT_2_STAND");
};

func void b_mm_assessenemy() {
    printdebugnpc(pd_mst_frame, "B_MM_AssessEnemy");
    if ((npc_getdisttonpc(self, other) < self.aivar[1]) && npc_canseenpcfreelos(self, other)) {
        if (c_preytopredator(other, self)) {
            npc_settarget(self, other);
            npc_clearaiqueue(self);
            ai_startstate(self, zs_mm_attack, 0, "");
        }
        else if (c_preytopredator(self, other)) {
            npc_settarget(self, other);
            npc_clearaiqueue(self);
            ai_startstate(self, zs_mm_flee, 0, "");
        }
        else if (wld_getguildattitude(self.guild, other.guild) != att_hostile) {
            return;
        }
        else {
            npc_clearaiqueue(self);
            ai_startstate(self, zs_mm_assessenemy, 0, "");
        };
    };
};

func void zs_mm_assessenemy() {
    printdebugnpc(pd_mst_frame, "ZS_MM_AssessEnemy");
    npc_setperctime(self, 2.0);
    npc_percenable(self, perc_assessdamage, b_mm_reacttodamage);
    npc_percenable(self, perc_assessothersdamage, b_mm_reacttoothersdamage);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assessbody, b_mm_assessbody);
    if (self.aivar[7] == hunter) {
        ai_standup(self);
        ai_turntonpc(self, other);
        ai_playani(self, "T_WARN");
        ai_setwalkmode(self, npc_walk);
    };
    if ((self.aivar[7] == passive) || (self.aivar[7] == packhunter)) {
        ai_standup(self);
        ai_lookatnpc(self, other);
    };
};

func int zs_mm_assessenemy_loop() {
    printdebugnpc(pd_mst_loop, "ZS_MM_AssessEnemy_loop");
    if (npc_getdisttonpc(self, other) > self.aivar[1]) {
        return 1;
    };
    if ((npc_getdisttonpc(self, other) <= self.aivar[1]) && (npc_getdisttonpc(self, other) > self.aivar[2])) {
        if ((self.aivar[7] == passive) || (self.aivar[7] == packhunter)) {
            if (!npc_canseenpc(self, other)) {
                ai_turntonpc(self, other);
            };
        };
        if (self.aivar[7] == hunter) {
            ai_gotonpc(self, other);
        };
    };
    if ((npc_getdisttonpc(self, other) <= self.aivar[2]) && (npc_getdisttonpc(self, other) > self.aivar[3])) {
        if ((self.aivar[7] == passive) || (self.aivar[7] == packhunter)) {
            if (npc_getstatetime(self) > self.aivar[4]) {
                npc_settarget(self, other);
                npc_clearaiqueue(self);
                ai_startstate(self, zs_mm_attack, 0, "");
            }
            else {
                ai_turntonpc(self, other);
                ai_playani(self, "T_WARN");
                npc_sendpassiveperc(self, perc_assesswarn, other, self);
            };
        };
        if (self.aivar[7] == hunter) {
            ai_gotonpc(self, other);
        };
    }
    else {
        npc_setstatetime(self, 0);
    };
    if (npc_getdisttonpc(self, other) <= self.aivar[3]) {
        npc_settarget(self, other);
        npc_clearaiqueue(self);
        ai_standup(self);
        ai_startstate(self, zs_mm_attack, 0, "");
    };
    return 0;
};

func void zs_mm_assessenemy_end() {
    printdebugnpc(pd_mst_frame, "ZS_MM_AssessEnemy_end");
    ai_stoplookat(self);
};

func void b_mm_reacttodamage() {
    printdebugnpc(pd_mst_frame, "B_MM_ReactToDamage");
    printglobals(pd_mst_check);
    self.aivar[8] = prio_attacker;
    if (c_preytopredator(self, other)) {
        printdebugnpc(pd_mst_frame, "...Monster ist Beute");
        npc_settarget(self, other);
        npc_clearaiqueue(self);
        npc_percdisable(self, perc_assessenemy);
        ai_startstate(self, zs_mm_flee, 0, "");
    }
    else {
        printdebugnpc(pd_mst_frame, "...Monster ist J*ger");
        npc_settarget(self, other);
        npc_clearaiqueue(self);
        npc_percdisable(self, perc_assessenemy);
        ai_startstate(self, zs_mm_attack, 0, "");
    };
};

func void b_mm_reacttoothersdamage() {
    printdebugnpc(pd_mst_frame, "B_MM_ReactToOthersDamage");
    b_mm_desynchronize();
    if (c_preytopredator(self, other)) {
        npc_settarget(self, other);
        npc_clearaiqueue(self);
        ai_startstate(self, zs_mm_flee, 0, "");
    };
    if ((wld_getguildattitude(self.guild, victim.guild) == att_friendly) && (wld_getguildattitude(self.guild, other.guild) != att_friendly)) {
        npc_settarget(self, other);
        npc_clearaiqueue(self);
        ai_startstate(self, zs_mm_attack, 0, "");
    };
    if ((wld_getguildattitude(self.guild, other.guild) == att_friendly) && (wld_getguildattitude(self.guild, victim.guild) != att_friendly)) {
        npc_settarget(self, victim);
        npc_clearaiqueue(self);
        ai_startstate(self, zs_mm_attack, 0, "");
    };
};

func void b_mm_reacttocombatdamage() {
    printdebugnpc(pd_mst_frame, "B_MM_ReactToCombatDamage");
    self.aivar[8] = prio_attacker;
    if (c_preytopredator(self, other)) {
        npc_settarget(self, other);
        npc_clearaiqueue(self);
        ai_startstate(self, zs_mm_flee, 0, "");
    };
    if (other /*1256*/ == hero /*1259*/) {
        npc_settarget(self, other);
    };
};

func void zs_mm_attack() {
    printdebugnpc(pd_mst_frame, "ZS_MM_Attack");
    printglobals(pd_mst_detail);
    if (c_npcismonstermage(self)) {
        b_fullstop(self);
        ai_startstate(self, zs_mm_attackmage, 0, "");
        return;
    };
    if (other.aivar[33]) {
        ai_continueroutine(self);
    };
    npc_percenable(self, perc_assessdamage, b_mm_reacttocombatdamage);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assessbody, b_mm_assessbody);
    if (self.aivar[23] == true) {
        npc_percenable(self, perc_assessfightsound, b_mm_summonedbypcassessothersdamage);
    };
    ai_standup(self);
    ai_setwalkmode(self, npc_run);
    npc_gettarget(self);
    npc_sendpassiveperc(self, perc_assesswarn, other, self);
};

func int zs_mm_attack_loop() {
    printdebugnpc(pd_mst_loop, "ZS_MM_Attack_Loop");
    if (other.attribute[atr_hitpoints] /*0*/ <= 0) {
        b_mm_assessbody();
        return 1;
    };
    npc_gettarget(self);
    if (hlp_isvalidnpc(other) && (!c_npcisdown(other))) {
        printdebugnpc(pd_mst_loop, "...Ziel vorhanden!");
        if (c_bodystatecontains(other, bs_run) || c_bodystatecontains(other, bs_jump)) {
            printdebugnpc(pd_mst_loop, "...Ziel l*uft oder springt!");
            if (npc_getstatetime(self) > self.aivar[5]) {
                printdebugnpc(pd_mst_check, "...Ziel schon zu lange verfolgt!");
                return 1;
            };
        }
        else if (c_bodystatecontains(other, bs_swim) || c_bodystatecontains(other, bs_dive)) {
            if (self.aivar[6] == false) {
                return 1;
            };
        }
        else {
            npc_setstatetime(self, 0);
        };
        if (other.aivar[33] == false) {
            ai_attack(self);
        };
    }
    printdebugnpc(pd_zs_check, "...Ziel ist ung*ltig oder kampf-unf*hig!");
    if (self.aivar[7] == hunter) {
        npc_clearaiqueue(self);
        ai_startstate(self, zs_mm_eatbody, 0, "");
    }
    npc_perceiveall(self);
    npc_getnexttarget(self);
    printglobals(pd_zs_detail);
    if (hlp_isvalidnpc(other) && (!c_npcisdown(other))) {
        printdebugstring(pd_mst_check, "...neues Ziel gefunden: ", other.name);
    }
    else {
        printdebugnpc(pd_mst_check, "...kein Neues Ziel vorhanden!");
        return loop_end;
    };
    return loop_continue;
};

func void zs_mm_attack_end() {
    printdebugnpc(pd_mst_frame, "ZS_MM_Attack_End");
    self.aivar[8] = prio_prey;
    npc_clearaiqueue(self);
    ai_standup(self);
    ai_playani(self, "T_WARN");
    ai_wait(self, 1.0);
};

func void zs_mm_flee() {
    printdebugnpc(pd_mst_frame, "ZS_MM_Flee");
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    ai_standup(self);
    ai_setwalkmode(self, npc_run);
};

func int zs_mm_flee_loop() {
    printdebugnpc(pd_mst_loop, "ZS_MM_Flee_Loop");
    if (npc_getdisttonpc(self, other) < 2000) {
        ai_flee(self);
        return 0;
    }
    else {
        self.wp = npc_getnearestwp(self);
        return 1;
    };
};

func void zs_mm_flee_end() {
    printdebugnpc(pd_mst_frame, "ZS_MM_Flee_End");
};

func void b_mm_assesswarn() {
    printdebugnpc(pd_mst_frame, "B_MM_AssessWarn");
    if (c_preytopredator(self, other)) {
        npc_settarget(self, other);
        npc_clearaiqueue(self);
        ai_startstate(self, zs_mm_flee, 0, "");
    };
    if ((wld_getguildattitude(self.guild, other.guild) == att_friendly) && (self.aivar[7] == packhunter)) {
        if (npc_isinstate(other, zs_mm_attack)) {
            npc_settarget(self, victim);
            npc_clearaiqueue(self);
            ai_standup(self);
            ai_startstate(self, zs_mm_attack, 0, "");
        }
        else {
            ai_setwalkmode(self, npc_run);
            ai_gotonpc(self, other);
            if (wld_detectnpc(self, victim /*1257*/, NOFUNC, -1)) {
                ai_startstate(self, zs_mm_assessenemy, 0, "");
            };
        };
    };
};

func void zs_mm_allscheduler() {
    printdebugnpc(pd_mst_frame, "ZS_MM_AllScheduler");
    if (wld_istime(self.aivar[9], 0, self.aivar[10], 0) || (self.aivar[9] == onlyroutine)) {
        ai_startstate(self, zs_mm_rtn_sleep, 1, "");
    }
    else if (wld_istime(self.aivar[11], 0, self.aivar[12], 0) || (self.aivar[11] == onlyroutine)) {
        ai_startstate(self, zs_mm_rtn_rest, 1, "");
    }
    else if (wld_istime(self.aivar[13], 0, self.aivar[14], 0) || (self.aivar[13] == onlyroutine)) {
        ai_startstate(self, zs_mm_rtn_roam, 1, "");
    }
    else if (wld_istime(self.aivar[15], 0, self.aivar[16], 0) || (self.aivar[15] == onlyroutine)) {
        ai_startstate(self, zs_mm_rtn_eatground, 1, "");
    }
    else if (wld_istime(self.aivar[17], 0, self.aivar[18], 0) || (self.aivar[17] == onlyroutine)) {
        ai_startstate(self, zs_mm_rtn_wusel, 1, "");
    }
    else {
        ai_startstate(self, zs_mm_rtn_default, 1, "");
    };
};

func void zs_mm_rtn_default() {
    printdebugnpc(pd_mst_frame, "ZS_MM_Rtn_Default");
    npc_percenable(self, perc_assessdamage, b_mm_reacttodamage);
    npc_percenable(self, perc_assessothersdamage, b_mm_reacttoothersdamage);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assessenemy, b_mm_assessenemy);
    npc_percenable(self, perc_assesswarn, b_mm_assesswarn);
    npc_percenable(self, perc_assessbody, b_mm_assessbody);
    ai_aligntowp(self);
};

func void zs_mm_rtn_default_loop() {
    printdebugnpc(pd_mst_loop, "ZS_MM_Rtn_Default_loop");
};

func void zs_mm_rtn_default_end() {
    printdebugnpc(pd_mst_frame, "ZS_MM_Rtn_Default_end");
};

func void b_mm_assessenemy_sleep() {
    printdebugnpc(pd_mst_frame, "B_MM_AssessEnemy_Sleep");
    if (c_bodystatecontains(self, bs_lie)) {
        if (npc_getdisttonpc(self, other) < 200) {
            b_mm_assessenemy();
        };
    }
    else {
        b_mm_assessenemy();
    };
};

func void b_mm_assessquietsound_sleep() {
    printdebugnpc(pd_mst_frame, "B_MM_AssessQuietSound_Sleep");
    if (npc_getdisttonpc(self, other) <= self.aivar[2]) {
        if (wld_getguildattitude(self.guild, other.guild) == att_hostile) {
            b_mm_assessenemy();
        };
    };
};

func void zs_mm_rtn_sleep() {
    printdebugnpc(pd_mst_frame, "ZS_MM_Rtn_Sleep");
    npc_setperctime(self, 2.0);
    npc_percenable(self, perc_assessdamage, b_mm_reacttodamage);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assesswarn, b_mm_assesswarn);
    npc_percenable(self, perc_assessothersdamage, b_mm_reacttoothersdamage);
    npc_percenable(self, perc_assessquietsound, b_mm_assessquietsound_sleep);
    npc_percenable(self, perc_assessenemy, b_mm_assessenemy_sleep);
    ai_setwalkmode(self, npc_walk);
    b_mm_desynchronize();
    if (hlp_strcmp(npc_getnearestwp(self), self.wp) == false) {
        ai_gotowp(self, self.wp);
    };
    if (wld_isfpavailable(self, "FP_SLEEP")) {
        ai_gotofp(self, "FP_SLEEP");
    };
    ai_playani(self, "T_PERCEPTION");
    ai_playanibs(self, "T_STAND_2_SLEEP", bs_lie);
};

func void zs_mm_rtn_sleep_loop() {
    printdebugnpc(pd_mst_loop, "ZS_MM_Rtn_Sleep_loop");
    if ((!wld_istime(self.aivar[9], 0, self.aivar[10], 0)) && (self.aivar[9] != onlyroutine)) {
        ai_startstate(self, zs_mm_allscheduler, 1, "");
    };
};

func void zs_mm_rtn_sleep_end() {
    printdebugnpc(pd_mst_frame, "ZS_MM_Rtn_Sleep_end");
    ai_playanibs(self, "T_SLEEP_2_STAND", bs_stand);
    npc_changeattribute(self, atr_hitpoints, self.attribute[atr_hitpoints_max] /*1*/ - self.attribute[atr_hitpoints] /*0*/);
};

func void zs_mm_rtn_roam() {
    printdebugnpc(pd_mst_frame, "ZS_MM_Rtn_Roam");
    npc_percenable(self, perc_assessdamage, b_mm_reacttodamage);
    npc_percenable(self, perc_assessothersdamage, b_mm_reacttoothersdamage);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assessenemy, b_mm_assessenemy);
    npc_percenable(self, perc_assesswarn, b_mm_assesswarn);
    npc_percenable(self, perc_assessbody, b_mm_assessbody);
    ai_setwalkmode(self, npc_walk);
    b_mm_desynchronize();
    if (hlp_strcmp(npc_getnearestwp(self), self.wp) == false) {
        ai_gotowp(self, self.wp);
    };
};

func void zs_mm_rtn_roam_loop() {
    var int randommove;

    printdebugnpc(pd_mst_loop, "ZS_MM_Rtn_Roam_loop");
    if ((!wld_istime(self.aivar[13], 0, self.aivar[14], 0)) && (self.aivar[13] != onlyroutine)) {
        ai_startstate(self, zs_mm_allscheduler, 1, "");
    };
    if (hlp_random(100) <= 20) {
        if (wld_isnextfpavailable(self, "FP_ROAM")) {
            ai_gotonextfp(self, "FP_ROAM");
        }
        else {
            ai_gotowp(self, npc_getnearestwp(self));
            ai_gotowp(self, npc_getnextwp(self));
        };
    }
    else {
        randommove = hlp_random(2);
        if (randommove == 0) {
            ai_playani(self, "R_ROAM1");
        };
        if (randommove == 1) {
            ai_playani(self, "R_ROAM2");
        };
        if (randommove == 2) {
            ai_playani(self, "R_ROAM3");
        };
    };
};

func void zs_mm_rtn_roam_end() {
    printdebugnpc(pd_mst_frame, "ZS_MM_Rtn_Roam_end");
};

func void zs_mm_rtn_rest() {
    printdebugnpc(pd_mst_frame, "ZS_MM_Rtn_Rest");
    npc_setperctime(self, 2.0);
    self.aivar[8] = prio_prey;
    npc_percenable(self, perc_assessdamage, b_mm_reacttodamage);
    npc_percenable(self, perc_assessothersdamage, b_mm_reacttoothersdamage);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assessenemy, b_mm_assessenemy);
    npc_percenable(self, perc_assesswarn, b_mm_assesswarn);
    npc_percenable(self, perc_assessbody, b_mm_assessbody);
    ai_setwalkmode(self, npc_walk);
    b_mm_desynchronize();
    if (hlp_strcmp(npc_getnearestwp(self), self.wp) == false) {
        ai_gotowp(self, self.wp);
    };
    if (wld_isfpavailable(self, "FP_ROAM")) {
        ai_gotofp(self, "FP_ROAM");
    };
};

func void zs_mm_rtn_rest_loop() {
    var int randommove;

    printdebugnpc(pd_mst_loop, "ZS_MM_Rtn_Rest_Loop");
    if ((!wld_istime(self.aivar[11], 0, self.aivar[12], 0)) && (self.aivar[11] != onlyroutine)) {
        ai_startstate(self, zs_mm_allscheduler, 1, "");
    };
    if (hlp_random(1000) <= 5) {
        randommove = hlp_random(2);
        ai_standup(self);
        if (randommove == 0) {
            ai_playani(self, "R_ROAM1");
        };
        if (randommove == 1) {
            ai_playani(self, "R_ROAM2");
        };
        if (randommove == 2) {
            ai_playani(self, "R_ROAM3");
        };
    };
};

func void zs_mm_rtn_rest_end() {
    printdebugnpc(pd_mst_frame, "ZS_MM_Rtn_Rest_End");
    ai_playani(self, "T_REST_2_STAND");
};

func void zs_mm_rtn_eatground() {
    printdebugnpc(pd_mst_frame, "ZS_MM_Rtn_EatGround");
    npc_setperctime(self, 2.0);
    self.aivar[8] = prio_prey;
    npc_percenable(self, perc_assessdamage, b_mm_reacttodamage);
    npc_percenable(self, perc_assessothersdamage, b_mm_reacttoothersdamage);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assessenemy, b_mm_assessenemy);
    npc_percenable(self, perc_assesswarn, b_mm_assesswarn);
    npc_percenable(self, perc_assessbody, b_mm_assessbody);
    ai_setwalkmode(self, npc_walk);
    b_mm_desynchronize();
    if (hlp_strcmp(npc_getnearestwp(self), self.wp) == false) {
        ai_gotowp(self, self.wp);
    };
    if (wld_isfpavailable(self, "FP_ROAM")) {
        ai_gotofp(self, "FP_ROAM");
    };
    ai_playani(self, "T_STAND_2_EAT");
    mdl_applyrandomani(self, "S_EAT", "R_ROAM1");
    mdl_applyrandomani(self, "S_EAT", "R_ROAM2");
    mdl_applyrandomani(self, "S_EAT", "R_ROAM3");
    mdl_applyrandomanifreq(self, "S_EAT", 8.0);
};

func void zs_mm_rtn_eatground_loop() {
    printdebugnpc(pd_mst_loop, "ZS_MM_Rtn_EatGround_Loop");
    if ((!wld_istime(self.aivar[15], 0, self.aivar[16], 0)) && (self.aivar[15] != onlyroutine)) {
        ai_startstate(self, zs_mm_allscheduler, 1, "");
    };
};

func void zs_mm_rtn_eatground_end() {
    printdebugnpc(pd_mst_frame, "ZS_MM_Rtn_EatGround_End");
    ai_playani(self, "T_EAT_2_STAND");
};

func void zs_mm_rtn_wusel() {
    printdebugnpc(pd_mst_frame, "ZS_MM_Rtn_Wusel");
    npc_percenable(self, perc_assessdamage, b_mm_reacttodamage);
    npc_percenable(self, perc_assessothersdamage, b_mm_reacttoothersdamage);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assessenemy, b_mm_assessenemy);
    npc_percenable(self, perc_assesswarn, b_mm_assesswarn);
    npc_percenable(self, perc_assessbody, b_mm_assessbody);
    ai_setwalkmode(self, npc_run);
    if (hlp_strcmp(npc_getnearestwp(self), self.wp) == false) {
        ai_gotowp(self, self.wp);
    };
};

func void zs_mm_rtn_wusel_loop() {
    var int randommove;

    printdebugnpc(pd_mst_loop, "ZS_MM_Rtn_Wusel_loop");
    if ((!wld_istime(self.aivar[17], 0, self.aivar[18], 0)) && (self.aivar[17] != onlyroutine)) {
        ai_startstate(self, zs_mm_allscheduler, 1, "");
    };
    if (hlp_random(100) <= 20) {
        if (wld_isnextfpavailable(self, "FP_ROAM")) {
            ai_gotonextfp(self, "FP_ROAM");
        }
        else {
            ai_gotowp(self, npc_getnearestwp(self));
            ai_gotowp(self, npc_getnextwp(self));
        };
    }
    else {
        randommove = hlp_random(2);
        if (randommove == 0) {
            ai_playani(self, "R_ROAM1");
        };
        if (randommove == 1) {
            ai_playani(self, "R_ROAM2");
        };
        if (randommove == 2) {
            ai_playani(self, "R_ROAM3");
        };
    };
};

func void zs_mm_rtn_wusel_end() {
    printdebugnpc(pd_mst_frame, "ZS_MM_Rtn_Wusel_end");
};

func void zs_mm_summoned() {
    printdebugnpc(pd_mst_frame, "ZS_MM_Summoned");
    npc_setperctime(self, 1.0);
    npc_percenable(self, perc_assessenemy, zs_mm_attack);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    ai_standup(self);
    npc_settempattitude(self, att_hostile);
    npc_setattitude(self, att_hostile);
};

func int zs_mm_summoned_loop() {
    printdebugnpc(pd_mst_loop, "ZS_MM_Summoned_loop");
    printglobals(pd_mst_detail);
    if (npc_getnexttarget(self)) {
        printdebugnpc(pd_mst_check, "...neuer Gegner gefunden");
        npc_settarget(self, other);
        npc_clearaiqueue(self);
        ai_startstate(self, zs_mm_attack, 0, "");
    }
    else if (npc_getstatetime(self) > 5) {
        return loop_end;
    }
    else {
        ai_turntonpc(self, other);
        return loop_continue;
    };
};

func void zs_mm_summoned_end() {
    printdebugnpc(pd_mst_frame, "ZS_MM_Summoned_End");
    npc_changeattribute(self, atr_hitpoints, -self.attribute[atr_hitpoints] /*0*/);
};

func void zs_mm_summonedbypc() {
    printdebugnpc(pd_mst_frame, "ZS_MM_SummonedByPC");
    npc_settempattitude(self, att_friendly);
    npc_setattitude(self, att_friendly);
    npc_percenable(self, perc_assessenemy, b_summonedbypc_assessenemy);
    npc_percenable(self, perc_assessplayer, b_summonedbypc_assesssc);
    npc_percenable(self, perc_assessfightsound, b_mm_summonedbypcassessothersdamage);
    npc_setperctime(self, 0.5);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assessdamage, zs_mm_attack);
    ai_standup(self);
};

func int zs_mm_summonedbypc_loop() {
    printdebugnpc(pd_mst_loop, "ZS_MM_SummonedByPC_Loop");
    printglobals(pd_mst_detail);
    if (npc_getstatetime(self) > self.aivar[21]) {
        npc_changeattribute(self, atr_hitpoints, -1);
        npc_setstatetime(self, 0);
    };
    if (npc_getnexttarget(self)) {
        printdebugnpc(pd_mst_check, "...neuer Gegner gefunden");
        npc_settarget(self, other);
        npc_clearaiqueue(self);
        ai_startstate(self, zs_mm_attack, 0, "");
    }
    else {
        if (npc_getdisttonpc(self, hero) > self.aivar[20]) {
            ai_gotonpc(self, hero);
        }
        else {
            if (!npc_canseenpc(self, hero)) {
                ai_turntonpc(self, hero);
                ai_turntonpc(self, hero);
                ai_turntonpc(self, hero);
            };
        };
        return loop_continue;
    };
};

func void zs_mm_summonedbypc_end() {
    printdebugnpc(pd_mst_frame, "ZS_MM_SummonedByPC_End");
};

func void b_summonedbypc_assesssc() {
    printdebugnpc(pd_mst_frame, "B_SummonedByPC_AssessSC");
    if (npc_getdisttonpc(self, hero) < self.aivar[20]) {
        printdebugnpc(pd_mst_check, "...SC-Meister jetzt nahe genug!");
        b_fullstop(self);
    };
};

func void b_summonedbypc_assessenemy() {
    printdebugnpc(pd_mst_frame, "B_SummonedByPC_AssessEnemy");
    printglobals(pd_mst_check);
    if ((!other.aivar[36]) && (other.npctype != npctype_friend)) {
        ai_startstate(self, zs_mm_attack, 0, "");
    };
};

func void b_mm_summonedbypcassessothersdamage() {
    var c_npc her;
    var c_npc rock;

    her = hlp_getnpc(pc_hero);
    rock = hlp_getnpc(pc_rockefeller);
    if ((hlp_getinstanceid(other) == hlp_getinstanceid(her)) || (hlp_getinstanceid(other) == hlp_getinstanceid(rock))) {
        if (!npc_isinstate(self, zs_mm_attack)) {
            npc_clearaiqueue(self);
            npc_settarget(self, victim);
            ai_startstate(self, zs_mm_attack, 0, "");
        };
    }
    else {
        if ((hlp_getinstanceid(victim) == hlp_getinstanceid(her)) || (hlp_getinstanceid(victim) == hlp_getinstanceid(rock))) {
            npc_clearaiqueue(self);
            npc_settarget(self, other);
            ai_startstate(self, zs_mm_attack, 0, "");
        };
    };
};

func void b_givedeathinv() {
    if (self.aivar[24]) {
        return;
    };
    if (knows_getteeth == true) {
        if (self.aivar[22] == id_wolf) {
            createinvitems(self, itat_teeth_01, 2);
        };
        if (self.aivar[22] == id_blackwolf) {
            createinvitems(self, itat_teeth_01, 2);
        };
        if (self.aivar[22] == id_snapper) {
            createinvitems(self, itat_teeth_01, 4);
        };
        if (self.aivar[22] == id_orcbiter) {
            createinvitems(self, itat_teeth_01, 2);
        };
        if (self.aivar[22] == id_shadowbeast) {
            createinvitems(self, itat_teeth_01, 4);
        };
        if (self.aivar[22] == id_bloodhound) {
            createinvitems(self, itat_teeth_01, 4);
        };
    };
    if (knows_getclaws == true) {
        if (self.aivar[22] == id_waran) {
            createinvitems(self, itat_claws_01, 4);
        };
        if (self.aivar[22] == id_firewaran) {
            createinvitems(self, itat_claws_01, 4);
        };
        if (self.aivar[22] == id_snapper) {
            createinvitems(self, itat_claws_01, 1);
        };
        if (self.aivar[22] == id_razor) {
            createinvitems(self, itat_claws_01, 3);
        };
        if (self.aivar[22] == id_orcbiter) {
            createinvitems(self, itat_claws_01, 2);
        };
        if (self.aivar[22] == id_lurker) {
            createinvitems(self, itat_lurker_01, 2);
        };
    };
    if (knows_getfur == true) {
        if (self.aivar[22] == id_wolf) {
            createinvitems(self, itat_wolf_01, 1);
        };
        if (self.aivar[22] == id_blackwolf) {
            createinvitems(self, itat_wolf_02, 1);
        };
        if (self.aivar[22] == id_shadowbeast) {
            createinvitems(self, itat_shadow_01, 1);
        };
        if (self.aivar[22] == id_troll) {
            createinvitems(self, itat_troll_01, 1);
        };
    };
    if (knows_gethide == true) {
        if (self.aivar[22] == id_lurker) {
            createinvitems(self, itat_lurker_02, 1);
        };
        if (self.aivar[22] == id_swampshark) {
            createinvitems(self, itat_swampshark_01, 1);
        };
    };
    if (knows_getmcmandibles == true) {
        if (self.aivar[22] == id_minecrawler) {
            createinvitems(self, itat_crawler_01, 1);
        };
        if (self.aivar[22] == id_minecrawlerwarrior) {
            createinvitems(self, itat_crawler_01, 1);
        };
    };
    if (knows_getmcplates == true) {
        if (self.aivar[22] == id_minecrawlerwarrior) {
            createinvitems(self, itat_crawler_02, 2);
        };
    };
    if (knows_getbfsting == true) {
        if (self.aivar[22] == id_bloodfly) {
            createinvitems(self, itat_bloodfly_02, 1);
        };
    };
    if (knows_getulumulu == true) {
        if (self.aivar[22] == id_firewaran) {
            createinvitems(self, itat_waran_01, 1);
        };
        if (self.aivar[22] == id_shadowbeast) {
            createinvitems(self, itat_shadow_02, 1);
        };
        if (self.aivar[22] == id_swampshark) {
            createinvitems(self, itat_swampshark_02, 3);
        };
        if (self.aivar[22] == id_troll) {
            createinvitems(self, itat_troll_02, 2);
        };
    };
    self.aivar[24] = true;
};

func void zs_assessbody() {
    printdebugnpc(pd_zs_frame, "ZS_AssessBody");
    npc_percenable(self, perc_assessdamage, zs_reacttodamage);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assessenemy, b_assessenemy);
    npc_percenable(self, perc_assessfighter, b_assessfighter);
    npc_percenable(self, perc_assessmurder, zs_assessmurder);
    npc_percenable(self, perc_assessdefeat, zs_assessdefeat);
    npc_percenable(self, perc_assessfightsound, b_assessfightsound);
    npc_percenable(self, perc_catchthief, zs_catchthief);
    npc_percenable(self, perc_assesstheft, b_assesstheft);
    npc_percenable(self, perc_assesstalk, b_refusetalk);
    if (other.aivar[8] == true) {
        printdebugnpc(pd_zs_check, "...K*rper bereits gepl*ndert!");
        ai_startstate(self, zs_healself, 0, "");
    };
    if (npc_getdisttonpc(self, other) > perc_dist_intermediat) {
        printdebugnpc(pd_zs_check, "...K*rper zu weit weg!");
        ai_startstate(self, zs_healself, 0, "");
    };
};

func int zs_assessbody_loop() {
    printdebugnpc(pd_zs_loop, "ZS_AssessBody_Loop");
    b_fullstop(self);
    ai_gotonpc(self, other);
    return loop_end;
};

func void zs_assessbody_end() {
    printdebugnpc(pd_zs_frame, "ZS_AssessBody_End");
    if (other.aivar[8] == true) {
        ai_continueroutine(self);
    };
    if (((self.fight_tactic != fai_human_ranged) && (self.npctype != npctype_friend)) && c_npcishuman(self)) {
        printdebugnpc(pd_zs_check, "...kein purer Fernk*mpfer und kein NSC-Freund!");
        ai_playani(self, "T_PLUNDER");
        if (b_plunder()) {
            b_say(self, other, "$ITookYourOre");
        }
        else {
            b_say(self, other, "$ShitNoOre");
        };
        other.aivar[8] = true;
    };
    ai_startstate(self, zs_assessbody_recoverweapon, 1, "");
};

func void zs_assessbody_recoverweapon() {
    printdebugnpc(pd_zs_frame, "ZS_AssessBody_RecoverWeapon");
    b_setperception(self);
    npc_perceiveall(self);
    if (wld_detectitem(self, item_kat_nf)) {
        if (npc_getdisttoitem(self, item) < 300) {
            printdebugnpc(pd_zs_check, "...Nah- oder Fernkampfwaffe gefunden!");
            b_sayoverlay(self, NULL, "$ITakeYourWeapon");
            ai_takeitem(self, item);
            ai_equipbestmeleeweapon(self);
        };
    };
    if (wld_detectitem(self, item_kat_ff)) {
        if (npc_getdisttoitem(self, item) < 300) {
            printdebugnpc(pd_zs_check, "...Nah- oder Fernkampfwaffe gefunden!");
            ai_takeitem(self, item);
            ai_equipbestrangedweapon(self);
        };
    };
    ai_startstate(self, zs_healself, 1, "");
};

func void zs_assessdefeat() {
    printdebugnpc(pd_zs_frame, "ZS_AssessDefeat");
    c_zsinit();
    npc_percenable(self, perc_assessenemy, b_assessenemy);
    npc_percenable(self, perc_assessdamage, zs_reacttodamage);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assessmurder, zs_assessmurder);
    npc_percenable(self, perc_assesssurprise, zs_assesssurprise);
    printglobals(pd_zs_check);
    if (npc_canseenpcfreelos(self, other)) {
        if (c_npcismonster(other)) {
            printdebugnpc(pd_zs_check, "...Sieg von oder *ber Monster!");
            if (npc_getdisttonpc(self, other) < hai_dist_assess_monster) {
                npc_settarget(self, other);
                npc_gettarget(self);
                ai_startstate(self, zs_assessmonster, 0, "");
            };
            return;
        }
        else {
            if (c_npcismonster(victim)) {
                printdebugnpc(pd_zs_check, "...Sieg an Monster!");
                b_whirlaround(self, victim);
                return;
            };
        };
        b_fullstop(self);
        ai_turntonpc(self, other);
        c_lookatnpc(self, other);
        b_assessandmemorize(news_defeat, news_source_witness, self, other, victim);
        if (c_chargewasattacked(self, victim, other)) {
            printdebugnpc(pd_zs_check, "...NSC ist Wache und ein Sch*tzling wurde besiegt!");
            if (npc_isplayer(other)) {
                b_drawweapon(self, other);
                ai_startstate(self, zs_proclaimandpunish, 0, "");
                return;
            }
            else {
                npc_settarget(self, other);
                ai_startstate(self, zs_attack, 0, "");
                return;
            };
        }
        else if (npc_gettempattitude(self, other) == att_hostile) {
            b_assessenemy();
        }
        else if ((npc_gettempattitude(self, victim) == att_angry) || (npc_gettempattitude(self, victim) == att_hostile)) {
            printdebugnpc(pd_zs_check, "...NSC ist angry/hostile zu Besiegtem!");
            b_say(self, NULL, "$HEDESERVEDIT");
            c_stoplookat(self);
        }
        else if (npc_gettempattitude(self, other) == att_friendly) {
            printdebugnpc(pd_zs_check, "...NSC ist friendly/neutral zum Sieger!");
            b_say(self, other, "$ITWASAGOODFIGHT");
        }
        else {
            printdebugnpc(pd_zs_check, "...Default!");
            b_say(self, NULL, "$HEDEFEATEDHIM");
        };
        ai_wait(self, 1.0);
        c_stoplookat(self);
    };
};

func void zs_assessenemy() {
    printdebugnpc(pd_zs_frame, "ZS_AssessEnemy");
    c_zsinit();
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assessmurder, b_combatassessmurder);
    npc_percenable(self, perc_assessdefeat, b_combatassessdefeat);
    npc_percenable(self, perc_catchthief, zs_catchthief);
    npc_percenable(self, perc_assesssurprise, zs_assesssurprise);
    b_fullstop(self);
    b_whirlaround(self, other);
    if (((c_npcisguard(self) || c_npcisguardarcher(self)) || c_npcisboss(self)) || (self.npctype == npctype_friend)) {
        if (c_amiweaker(self, other) || (npc_isplayer(other) && self.aivar[19])) {
            b_callcomrades();
        };
        if (npc_isplayer(other)) {
            b_drawweapon(self, other);
            ai_startstate(self, zs_proclaimandpunish, 0, "");
            return;
        }
        else {
            npc_settarget(self, other);
            ai_startstate(self, zs_attack, 0, "");
            return;
        };
    }
    else if ((npc_isplayer(other) && self.aivar[19]) || c_amiweaker(self, other)) {
        b_callguards();
        ai_startstate(self, zs_flee, 0, "");
        return;
    }
    else if (npc_isplayer(other)) {
        b_drawweapon(self, other);
        ai_startstate(self, zs_proclaimandpunish, 0, "");
        return;
    }
    else {
        npc_settarget(self, other);
        ai_startstate(self, zs_attack, 0, "");
        return;
    };
};

func void zs_assessfighter() {
    printdebugnpc(pd_zs_frame, "ZS_AssessFighter");
    printglobals(pd_zs_check);
    npc_percenable(self, perc_assessenemy, b_assessenemy);
    npc_percenable(self, perc_assessdamage, zs_reacttodamage);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assesscaster, b_assesscaster);
    npc_percenable(self, perc_assessthreat, b_assessthreat);
    npc_percenable(self, perc_assessmurder, zs_assessmurder);
    npc_percenable(self, perc_assessdefeat, zs_assessdefeat);
    npc_percenable(self, perc_assessfightsound, b_assessfightsound);
    npc_percenable(self, perc_assessquietsound, b_assessquietsound);
    npc_percenable(self, perc_assessremoveweapon, b_assessremoveweapon);
    self.aivar[16] = 0;
    c_zsinit();
    b_fullstop(self);
    b_whirlaround(self, other);
    if (npc_isinfightmode(other, fmode_none)) {
        printdebugnpc(pd_zs_check, "...Waffe ist bereits weggesteckt!");
        ai_continueroutine(self);
    };
    if (self.aivar[19] || (c_npcisworker(self) && c_amiweaker(self, other))) {
        printdebugnpc(pd_zs_check, "...NSC wird zur*ckweichen!");
        if (npc_getpermattitude(self, other) != att_hostile) {
            b_sayoverlay(self, other, "$YESYES");
        };
        if (npc_getdisttonpc(self, other) < hai_dist_melee) {
            ai_dodge(self);
        };
        if (npc_getpermattitude(self, other) != att_hostile) {
            ai_wait(self, 3.0);
        };
        ai_continueroutine(self);
    }
    else {
        npc_percenable(self, perc_assessremoveweapon, b_assessremoveweapon);
        npc_percenable(self, perc_assessthreat, b_assessthreat);
        b_drawweapon(self, other);
    };
};

func int zs_assessfighter_loop() {
    printdebugnpc(pd_zs_loop, "ZS_AssessFighter_Loop");
    printglobals(pd_zs_check);
    if (npc_getdisttonpc(self, other) < hai_dist_abort_melee) {
        printdebugnpc(pd_zs_check, "...SC ist in Nahkampfdistanz!");
        if (self.aivar[16] == 0) {
            if (npc_isinfightmode(other, fmode_magic)) {
                b_say(self, other, "$STOPMAGIC");
            }
            else {
                b_say(self, other, "$WEAPONDOWN");
            };
            self.aivar[16] = 1;
        };
        if (npc_getstatetime(self) > 5) {
            printdebugnpc(pd_zs_check, "...Zeit abgelaufen!");
            ai_startstate(self, zs_assessfighterwait, 0, "");
        };
    }
    else if (npc_getdisttonpc(self, other) < hai_dist_abort_ranged) {
        printdebugnpc(pd_zs_check, "...SC ist in Fernkampfdistanz!");
        if ((!npc_isinfightmode(other, fmode_far)) && (!npc_isinfightmode(other, fmode_magic))) {
            return loop_end;
        };
    }
    else {
        printdebugnpc(pd_zs_check, "...SC ist au*erhalb Fernkampfdistanz!");
        return loop_end;
    };
    b_smartturntonpc(self, other);
    ai_wait(self, 0.3);
    return loop_continue;
};

func void zs_assessfighter_end() {
    printdebugnpc(pd_zs_frame, "ZS_AssessFighter_End");
    b_removeweapon(self);
};

func void zs_assessfighterwait() {
    printdebugnpc(pd_zs_frame, "ZS_AssessFighterWait");
    printglobals(pd_zs_check);
    npc_percenable(self, perc_assessenemy, b_assessenemy);
    npc_percenable(self, perc_assessdamage, zs_reacttodamage);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assesscaster, b_assesscaster);
    npc_percenable(self, perc_assessthreat, b_assessthreat);
    npc_percenable(self, perc_assessmurder, zs_assessmurder);
    npc_percenable(self, perc_assessdefeat, zs_assessdefeat);
    npc_percenable(self, perc_assessfightsound, b_assessfightsound);
    npc_percenable(self, perc_assessremoveweapon, b_assessremoveweapon);
    if (npc_isinfightmode(other, fmode_none)) {
        printdebugnpc(pd_zs_check, "...Waffe ist bereits weggesteckt!");
        ai_continueroutine(self);
    };
    if (npc_isinfightmode(other, fmode_magic)) {
        b_say(self, other, "$ISAIDSTOPMAGIC");
    }
    else {
        b_say(self, other, "$ISAIDWEAPONDOWN");
    };
};

func int zs_assessfighterwait_loop() {
    printdebugnpc(pd_zs_loop, "ZS_AssessFighterWait_Loop");
    if (npc_getdisttonpc(self, other) > hai_dist_abort_melee) {
        printdebugnpc(pd_zs_check, "...SC ist au*erhalb Nahkampfreichweite!");
        b_assessremoveweapon();
    };
    if (npc_isinfightmode(other, fmode_far)) {
        return loop_continue;
    };
    if (npc_getstatetime(self) > 5) {
        printdebugnpc(pd_zs_check, "...Wartezeit abgelaufen!");
        npc_settempattitude(self, att_hostile);
        npc_settarget(self, other);
        b_sayoverlay(self, other, "$YOUASKEDFORIT");
        ai_startstate(self, zs_attack, 0, "");
    };
    ai_wait(self, 1.0);
    return loop_continue;
};

func void zs_assessfighterwait_end() {
    printdebugnpc(pd_zs_frame, "ZS_AssessFighterWait_End");
};

func void zs_assessitem() {
    printdebugnpc(pd_zs_frame, "ZS_AssessItem");
    c_zsinit();
    npc_percenable(self, perc_assessdamage, zs_reacttodamage);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assesssurprise, zs_assesssurprise);
    npc_percenable(self, perc_assessenemy, b_assessenemy);
    npc_percenable(self, perc_assessthreat, b_assessfighter);
    npc_percenable(self, perc_assesswarn, b_assesswarn);
    npc_percenable(self, perc_assessmurder, zs_assessmurder);
    npc_percenable(self, perc_assessdefeat, zs_assessdefeat);
    npc_percenable(self, perc_assessfightsound, b_assessfightsound);
    npc_percenable(self, perc_catchthief, zs_catchthief);
    npc_percenable(self, perc_assesstheft, b_assesstheft);
    npc_percenable(self, perc_assesstalk, b_refusetalk);
    npc_percenable(self, perc_npccommand, zs_otherwantsitem);
    npc_percenable(self, perc_assesstheft, zs_otherwantsitem);
    ai_wait(self, 2.0);
    printglobals(pd_zs_check);
};

func int zs_assessitem_loop() {
    npc_sendpassiveperc(self, perc_npccommand, self, NULL);
    printdebugnpc(pd_zs_loop, "ZS_AssessItem_Loop");
    return 1;
};

func void zs_assessitem_end() {
    printdebugnpc(pd_zs_frame, "ZS_AssessItem_End");
    b_fullstop(self);
    ai_takeitem(self, item);
    self.aivar = 0;
    ai_wait(self, 3.0);
    b_say(self, NULL, "$COOL");
    if ((item.flags & item_kat_nf) > 0) {
        ai_equipbestmeleeweapon(self);
    }
    else {
        if ((item.flags & item_kat_ff) > 0) {
            ai_equipbestrangedweapon(self);
        };
    };
    ai_continueroutine(self);
};

func void zs_otherwantsitem() {
    printdebugnpc(pd_zs_frame, "B_OtherOneWantsItem");
    printglobals(pd_zs_frame);
    b_fullstop(self);
    ai_continueroutine(self);
};

func void zs_assessmonster() {
    printdebugnpc(pd_zs_frame, "ZS_AssessMonster");
    c_zsinit();
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assesstalk, b_refusetalk);
    npc_percenable(self, perc_assesssurprise, zs_assesssurprise);
    npc_setperctime(self, 0.5);
    printglobals(pd_zs_check);
    if ((c_npcisguard(self) || c_npcisguardarcher(self)) || c_npcisboss(self)) {
        printdebugnpc(pd_zs_check, "...NSC ist WACHE(NK/FK) oder BOSS!");
        b_fullstop(self);
        b_sayoverlay(self, NULL, "$DieMonster");
        npc_settarget(self, other);
        ai_startstate(self, zs_attack, 0, "");
    }
    printdebugnpc(pd_zs_check, " ...NSC ist wede WACHE noch BOSS!");
    if (c_amistronger(self, other)) {
        printdebugnpc(pd_zs_check, " ...aber trotzdem st*rker als das Monster!");
        b_fullstop(self);
        b_drawweapon(self, other);
        return;
    }
    else {
        printdebugnpc(pd_zs_check, " ...und noch dazu schw*cher als das Monster!");
        b_fullstop(self);
        b_whirlaround(self, other);
        npc_settarget(self, other);
        b_sayoverlay(self, NULL, "$ShitWhatAMonster");
        npc_gettarget(self);
        ai_startstate(self, zs_flee, 0, "");
    };
};

func int zs_assessmonster_loop() {
    var int distance;

    printdebugnpc(pd_zs_loop, "ZS_AssessMonster_Loop");
    distance = npc_getdisttonpc(self, other);
    if (npc_getstatetime(self) > 1) {
        printdebugnpc(pd_zs_check, "...1 Sekunden in der Loop -> Waffencheck!");
        b_smartturntonpc(self, other);
        b_selectweapon(self, other);
        npc_setstatetime(self, 0);
    };
    if (npc_isinfightmode(self, fmode_far) || npc_isinfightmode(self, fmode_magic)) {
        npc_settarget(self, other);
        ai_startstate(self, zs_attack, 0, "");
    };
    if (distance < hai_dist_attack_monster) {
        printdebugnpc(pd_zs_check, "...Monster ist jetzt zu nahe herangekommen!");
        b_sayoverlay(self, NULL, "$DieMonster");
        npc_settarget(self, other);
        ai_startstate(self, zs_attack, 0, "");
    }
    else if (distance > hai_dist_abort_assess_monster) {
        printdebugnpc(pd_zs_check, "...Monster ist wieder weit genug weg!");
        return loop_end;
    }
    else if (c_npcisdown(other)) {
        printdebugnpc(pd_zs_check, "...Monster kampfunf*hig!");
        return loop_end;
    }
    else {
        return loop_continue;
    };
};

func void zs_assessmonster_end() {
    printdebugnpc(pd_zs_frame, "ZS_AssessMonster_End");
    b_removeweapon(self);
    ai_continueroutine(self);
};

func void zs_assessmurder() {
    printdebugnpc(pd_zs_frame, "ZS_AssessMurder");
    c_zsinit();
    npc_percenable(self, perc_assessenemy, b_assessenemy);
    npc_percenable(self, perc_assessdamage, zs_reacttodamage);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assesssurprise, zs_assesssurprise);
    printglobals(pd_zs_check);
    printattitudes(pd_zs_check);
    if (npc_canseenpcfreelos(self, other) || npc_canseenpcfreelos(self, victim)) {
        if (!c_npcishuman(victim)) {
            printdebugnpc(pd_zs_check, "...Mord an Monster!");
            b_whirlaround(self, victim);
            return;
        };
        if (!c_npcishuman(other)) {
            printdebugnpc(pd_zs_check, "...Mord von Monster!");
            if (npc_getdisttonpc(self, other) < hai_dist_assess_monster) {
                npc_settarget(self, other);
                npc_gettarget(self);
                ai_startstate(self, zs_assessmonster, 0, "");
            };
            return;
        };
        printdebugnpc(pd_zs_check, "ZS_AssessMurder/Npc_CanSeeNpc");
        b_whirlaround(self, other);
        b_assessandmemorize(news_murder, news_source_witness, self, other, victim);
        if (c_chargewasattacked(self, victim, other)) {
            printdebugnpc(pd_zs_check, "...NSC ist Wache und ein Sch*tzling wurde gemordet!");
            if (npc_isplayer(other)) {
                b_drawweapon(self, other);
                ai_startstate(self, zs_proclaimandpunish, 0, "");
                return;
            }
            else {
                npc_settarget(self, other);
                ai_startstate(self, zs_attack, 0, "");
                return;
            };
        };
        if (npc_getattitude(self, other) == att_hostile) {
            printdebugnpc(pd_zs_check, "...hostile zum M*rder!");
            b_say(self, other, "$HEKILLEDHIM");
            b_assessenemy();
        }
        else {
            if ((npc_getattitude(self, victim) == att_angry) || (npc_getattitude(self, victim) == att_hostile)) {
                printdebugnpc(pd_zs_check, "...angry/hostile zu Opfer!");
                b_say(self, other, "$YEAHWELLDONE");
                c_stoplookat(self);
            };
        };
    };
};

func void zs_assessquietsound() {
    printdebugnpc(pd_zs_frame, "ZS_AssessQuietSound");
    c_zsinit();
    npc_percenable(self, perc_assessdamage, zs_reacttodamage);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assesssurprise, zs_assesssurprise);
    npc_percenable(self, perc_assessenemy, b_assessenemy);
    npc_percenable(self, perc_assessfighter, b_assessfighter);
    npc_percenable(self, perc_assessthreat, b_assessfighter);
    npc_percenable(self, perc_assesswarn, b_assesswarn);
    npc_percenable(self, perc_assessmurder, zs_assessmurder);
    npc_percenable(self, perc_assessdefeat, zs_assessdefeat);
    npc_percenable(self, perc_assessfightsound, b_assessfightsound);
    npc_percenable(self, perc_catchthief, zs_catchthief);
    npc_percenable(self, perc_assesstheft, b_assesstheft);
    npc_percenable(self, perc_assesstalk, b_refusetalk);
    npc_percenable(self, perc_assessenterroom, b_assessenterroom);
    npc_percenable(self, perc_assessusemob, b_assessusemob);
    ai_turntonpc(self, other);
};

func void zs_assesssurprise() {
    printdebugnpc(pd_zs_frame, "ZS_AssessSurprise");
    c_zsinit();
    npc_percenable(self, perc_assessdamage, zs_reacttodamage);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assesswarn, b_assesswarn);
    npc_percenable(self, perc_assessfightsound, b_assessfightsound);
    npc_percenable(self, perc_catchthief, zs_catchthief);
    npc_percenable(self, perc_observeintruder, b_observeintruder);
    npc_percenable(self, perc_assesstalk, b_assesstalk);
    if (npc_getdisttonpc(self, other) < perc_dist_dialog) {
        printdebugnpc(pd_zs_check, "ZS_AssessSurprise dist Flee");
        b_whirlaround(self, other);
        b_say(self, other, "$WHATSTHAT");
        if (npc_getattitude(self, other) == att_hostile) {
            printdebugnpc(pd_zs_check, "...*berrascher ist feindlich!");
            b_assessenemy();
        }
        else {
            printdebugnpc(pd_zs_check, "...*berrascher ist NICHT feindlich!");
            b_assesssc();
        };
    }
    else {
        printdebugnpc(pd_zs_check, ">= Dist Flee");
        ai_quicklook(self, other);
        if (npc_gettempattitude(self, other) == att_hostile) {
            b_assessenemy();
        };
    };
    ai_continueroutine(self);
};

func void zs_assesswarn() {
    var string nextwp;

    printdebugnpc(pd_zs_frame, "ZS_AssessWarn");
    printglobals(pd_zs_check);
    c_zsinit();
    npc_percenable(self, perc_assessdamage, zs_reacttodamage);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assessenemy, b_assessenemy);
    npc_percenable(self, perc_assessfighter, b_assessfighter);
    npc_percenable(self, perc_assessthreat, b_assessfighter);
    npc_percenable(self, perc_drawweapon, b_assessfighter);
    npc_percenable(self, perc_assessmurder, zs_assessmurder);
    npc_percenable(self, perc_assessdefeat, zs_assessdefeat);
    npc_percenable(self, perc_catchthief, zs_catchthief);
    npc_percenable(self, perc_assesstheft, b_assesstheft);
    npc_percenable(self, perc_observeintruder, b_observeintruder);
    npc_percenable(self, perc_assesstalk, b_assesstalk);
    npc_percenable(self, perc_assessenterroom, b_assessenterroom);
    npc_setperctime(self, 1.0);
    if ((victim.aivar[42] == true) && (npc_getattitude(self, victim) == att_friendly)) {
        npc_settarget(self, other);
        ai_startstate(self, zs_attack, 0, "");
    };
    if (((c_npcisguard(self) && (npc_isinstate(victim, zs_callguardsonenterroom) || npc_wasinstate(victim, zs_callguardsonenterroom))) && (!npc_isinstate(self, zs_guardpassage))) && (npc_getattitude(self, victim) == att_friendly)) {
        printdebugnpc(pd_zs_check, "...verlassener Portalraum geh*rt Sch*tzling-Gilde!");
        npc_percenable(self, perc_assessenterroom, b_clearroomenterroom);
        b_whirlaround(self, other);
        ai_pointatnpc(self, other);
        b_say(self, other, "$HEYYOU");
        ai_stoppointat(self);
        npc_percdisable(self, perc_movenpc);
        ai_setwalkmode(self, npc_run);
        ai_gotonpc(self, other);
        b_say(self, other, "$WHATDIDYOUINTHERE");
    };
    if ((c_npcisguardarcher(self) && npc_isinstate(victim, zs_callguardsonenterroom)) && (npc_getattitude(self, victim) == att_friendly)) {
        printdebugnpc(pd_zs_check, "...Warnung von Sch*tzling, dessen Raum betreten/verlassen wurde!");
        if (other.aivar[11] == false) {
            b_whirlaround(self, hero);
            ai_pointatnpc(self, hero);
            b_say(self, hero, "$HEYYOU");
            ai_stoppointat(self);
            b_drawweapon(self, other);
            b_say(self, hero, "$YOUVIOLATEDFORBIDDENTERRITORY");
            npc_settarget(self, hero);
            ai_startstate(self, zs_attack, 0, "");
        }
        else {
            printdebugnpc(pd_zs_check, "Eindringling ist schon bestraft worden");
        };
    };
    if ((((c_npcisguard(self) || c_npcisguardarcher(self)) || c_npcisboss(self)) && (npc_wasinstate(victim, zs_guardpassage) || npc_isinstate(victim, zs_guardpassage))) && (npc_getattitude(self, victim) == att_friendly)) {
        printdebugnpc(pd_zs_check, "...Warnung von Torwache, deren Durchgang durchbrochen worde");
        b_whirlaround(self, hero);
        b_drawweapon(self, other);
        b_setattackreason(self, aiv_ar_intruder);
        npc_settarget(self, hero);
        npc_gettarget(self);
        ai_startstate(self, zs_proclaimandpunish, 0, "");
    };
    if (((((npc_isinstate(victim, zs_assessenemy) && (c_npcisguard(self) || c_npcisguardarcher(self))) && (npc_getattitude(self, victim) == att_friendly)) && (npc_getattitude(self, other) != att_friendly)) && (!(npc_isplayer(other) && (self.npctype == npctype_friend)))) && (npc_getdisttonpc(self, victim) < hai_dist_helpattackedcharges)) {
        printdebugnpc(pd_zs_check, "...Warnung vor Feind!");
        ai_startstate(self, zs_assessenemy, 0, "");
    };
    if (c_bodystatecontains(other, bs_sneak)) {
        printdebugnpc(pd_zs_check, "...Spieler schleicht rum ");
        if (npc_getdisttonpc(self, other) < perc_dist_intermediat) {
            printdebugnpc(pd_zs_check, "...Spieler schleicht rum und ich bin gewarnt worden");
            npc_settarget(self, other);
            npc_gettarget(self);
            ai_startstate(self, zs_observesuspect, 0, "");
        };
    };
};

func int zs_assesswarn_loop() {
    printdebugnpc(pd_zs_loop, "ZS_AssessWarn_Loop");
    ai_wait(self, 2.0);
    return loop_end;
};

func void zs_assesswarn_end() {
    printdebugnpc(pd_zs_frame, "ZS_AssessWarn_End");
    if (npc_canseenpcfreelos(self, other)) {
        printdebugnpc(pd_zs_check, "ZS_AssessWarn End // Free Los");
        if ((npc_gettempattitude(self, other) == att_hostile) || (npc_getpermattitude(self, other) == att_hostile)) {
            printdebugnpc(pd_zs_check, "ZS_AssessWarn End // Free Los // HOSTILE");
            npc_settarget(self, other);
            npc_gettarget(self);
            ai_startstate(self, zs_assessenemy, 0, "");
            return;
        }
        else if (npc_hasnews(self, news_murder, other, victim) && (npc_getguildattitude(self, victim) == att_friendly)) {
            printdebugnpc(pd_zs_check, "ZS_AssessWarn End // Free Los // Not HOSTILE Kumpel get*tet");
            npc_gettarget(self);
            ai_startstate(self, zs_assessenemy, 0, "");
        }
        else {
            printdebugnpc(pd_zs_check, "ZS_AssessWarn End// Free Los // Not HOSTILE");
            if (npc_isplayer(other)) {
                b_assesssc();
            };
            return;
        };
        return;
    }
    else {
        printdebugnpc(pd_zs_check, "ZS_AssessWarn  End// Can*T See");
        return;
    };
};

func void zs_attack() {
    printdebugnpc(pd_zs_frame, "ZS_Attack");
    c_zsinit();
    printglobals(pd_zs_frame);
    npc_percenable(self, perc_assessmurder, b_combatassessmurder);
    npc_percenable(self, perc_assessdefeat, b_combatassessdefeat);
    npc_percenable(self, perc_assessdamage, b_combatreacttodamage);
    npc_percenable(self, perc_assesssurprise, zs_assesssurprise);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assessremoveweapon, b_combatremoveweapon);
    npc_percenable(self, perc_assessenterroom, b_combatassessenterroom);
    npc_percenable(self, perc_catchthief, b_combatcatchthief);
    npc_gettarget(self);
    b_whirlaround(self, other);
    b_selectweapon(self, other);
    ai_setwalkmode(self, npc_run);
};

func int zs_attack_loop() {
    var int countpursuitcycles;

    printdebugnpc(pd_zs_loop, "ZS_Attack_Loop");
    npc_gettarget(self);
    printglobals(pd_zs_detail);
    if (c_npcisdown(other) || (!hlp_isvalidnpc(other))) {
        printdebugnpc(pd_zs_check, "...Ziel ist kampf-unf*hig oder ung*ltig!");
        npc_perceiveall(self);
        self.aivar[39] = hlp_getinstanceid(other);
        if (npc_getnexttarget(self)) {
            if (((hlp_isvalidnpc(other) && (!c_npcisdown(other))) && npc_canseenpcfreelos(self, other)) && (!c_otheristoleratedenemy(self, other))) {
                printdebugstring(pd_zs_check, "...neues Ziel gefunden: ", other.name);
            }
            else {
                printdebugnpc(pd_zs_check, "...kein Neues Ziel vorhanden!");
                return loop_end;
            };
        }
        else {
            printdebugnpc(pd_zs_check, "...KEIN neues Ziel gefunden!");
            return loop_end;
        };
    };
    if (npc_getstatetime(self) > 2) {
        if (((!npc_isinfightmode(self, fmode_far)) && (!npc_isinfightmode(self, fmode_magic))) && ((!npc_isinfightmode(other, fmode_far)) && (!npc_isinfightmode(other, fmode_magic)))) {
            printdebugnpc(pd_zs_check, "...WEDER NSC noch Gegner f*hren Fernkampfwaffen!");
            if ((npc_getdisttonpc(self, other) > hai_dist_abort_melee) && (self.aivar[10] == false)) {
                printdebugnpc(pd_zs_check, "...Gegner au*erhalb Nahkampfreichweite & letzter Treffer nicht durch Fernkampfwaffe!");
                b_fullstop(self);
                printglobals(pd_zs_check);
                if (c_npcishuman(other)) {
                    if (npc_getpermattitude(self, other) != att_hostile) {
                        ai_pointatnpc(self, other);
                        b_say(self, other, "$RUNCOWARD");
                        ai_stoppointat(self);
                    };
                    if (npc_isplayer(other)) {
                        printdebugnpc(pd_zs_check, "...SC besiegt!");
                        self.aivar[20] = true;
                    };
                    b_assessandmemorize(news_defeat, news_source_witness, self, self, other);
                };
                return loop_end;
            };
        }
        else {
            printdebugnpc(pd_zs_check, "...entweder NSC oder Gegner F*HREN Fernkampfwaffen!");
            if (npc_getdisttonpc(self, other) > hai_dist_abort_ranged) {
                printdebugnpc(pd_zs_check, "...Gegner au*erhalb Fernkampfreichweite!");
                b_fullstop(self);
                return loop_end;
            };
        };
        countpursuitcycles = countpursuitcycles + 1;
        if ((((npc_isplayer(other) && (c_bodystatecontains(other, bs_run) || c_bodystatecontains(other, bs_jump))) && (!npc_isinfightmode(self, fmode_far))) && (!npc_isinfightmode(self, fmode_magic))) && (c_getattackreason(self) != aiv_ar_intruder)) {
            if (countpursuitcycles > hai_time_follow) {
                printdebugnpc(pd_zs_check, "...Gegner rennt schon zu lange weg!");
                b_fullstop(self);
                if (c_npcishuman(other)) {
                    if (npc_getpermattitude(self, other) != att_hostile) {
                        ai_pointatnpc(self, other);
                        b_say(self, other, "$RUNCOWARD");
                        ai_stoppointat(self);
                    };
                    if (npc_isplayer(other)) {
                        printdebugnpc(pd_zs_check, "...SC besiegt!");
                        self.aivar[20] = true;
                    };
                    b_assessandmemorize(news_defeat, news_source_witness, self, self, other);
                    ai_wait(self, 5.0);
                };
                return loop_end;
            };
        }
        else {
            countpursuitcycles = 0;
        };
        printglobals(pd_zs_detail);
        npc_clearaiqueue(self);
        b_selectweapon(self, other);
        ai_setwalkmode(self, npc_run);
        npc_setstatetime(self, 0);
    };
    if (other.aivar[33] == false) {
        ai_attack(self);
    }
    else {
        ai_wait(self, 0.5);
    };
    if ((((self.npctype == npctype_ambient) || (self.npctype == npctype_ow_ambient)) || (self.npctype == npctype_mine_ambient)) || (self.fight_tactic == fai_human_coward)) {
        if ((self.fight_tactic == fai_human_coward) && (self.attribute[atr_hitpoints] /*0*/ < (self.attribute[atr_hitpoints_max] /*1*/ / 2))) {
            printdebugnpc(pd_zs_check, "...coward flees!");
            ai_startstate(self, zs_flee, 0, "");
        };
        if ((self.fight_tactic == fai_human_strong) && (self.attribute[atr_hitpoints] /*0*/ < ((self.attribute[atr_hitpoints_max] /*1*/ / 4) * 3))) {
            printdebugnpc(pd_zs_check, "...strong flees!");
            ai_startstate(self, zs_flee, 0, "");
        };
        if ((self.fight_tactic == fai_human_mage) && (self.attribute[atr_mana] /*2*/ < (self.attribute[atr_mana_max] /*3*/ / 5))) {
            printdebugnpc(pd_zs_check, "...mage flees!");
            ai_startstate(self, zs_flee, 0, "");
        };
        if ((self.fight_tactic == fai_human_ranged) && (self.attribute[atr_hitpoints] /*0*/ < (self.attribute[atr_hitpoints_max] /*1*/ / 3))) {
            printdebugnpc(pd_zs_check, "...ranged fighter flees!");
            ai_startstate(self, zs_flee, 0, "");
        };
    };
    return loop_continue;
};

func void zs_attack_end() {
    printdebugnpc(pd_zs_frame, "ZS_Attack_End");
    other = hlp_getnpc(self.aivar[39]);
    printglobals(pd_zs_check);
    if (npc_isinstate(other, zs_unconscious) && (self.fight_tactic != fai_human_ranged)) {
        printdebugnpc(pd_zs_check, "...Ziel bewu*tlos/magisch schlafend und NSC kein purer Fernk*mpfer!");
        if (npc_getattitude(self, other) == att_friendly) {
            b_removeweapon(self);
            b_say(self, other, "$LETSFORGETOURLITTLEFIGHT");
            c_stoplookat(self);
            ai_startstate(self, zs_healself, 1, "");
        };
        if ((npc_getpermattitude(self, other) == att_hostile) || ((c_getattackreason(self) == aiv_ar_intruder) && npc_hasnews(self, news_defeat, self, other))) {
            printdebugnpc(pd_zs_check, "...Hostile/Intruder wird gefinished");
            b_fullstop(self);
            printglobals(pd_zs_check);
            ai_finishingmove(self, other);
            ai_wait(self, 1.0);
        }
        else {
            printdebugnpc(pd_zs_check, "...Nicht hostile");
            b_say(self, other, "$NEVERTRYTHATAGAIN");
        };
    };
    b_removeweapon(self);
    c_stoplookat(self);
    b_resettempattitude(self);
    b_setattackreason(self, aiv_ar_none);
    if (other.aivar[27] == aiv_gps_punish) {
        other.aivar[27] = aiv_gps_firstwarn;
    };
    if (((!c_npcisboss(self)) && c_npcishuman(other)) && ((npc_isinstate(other, zs_unconscious) || npc_isdead(other)) || npc_isinstate(other, zs_magicsleep))) {
        if (self.fight_tactic != fai_human_ranged) {
            printdebugnpc(pd_zs_check, "...Pl*nderbedingungen er*llt!");
            ai_startstate(self, zs_assessbody, 1, "");
            return;
        };
    };
    ai_startstate(self, zs_healself, 1, "");
};

func void b_combatremoveweapon() {
    printdebugnpc(pd_zs_frame, "B_CombatRemoveWeapon");
    if (npc_wasinstate(self, zs_assessfighter) || npc_wasinstate(self, zs_assessfighterwait)) {
        printdebugnpc(pd_zs_check, "...Angriffsgrund: Waffe nicht weggesteckt!");
        if (self.attribute[atr_hitpoints] /*0*/ == self.attribute[atr_hitpoints_max] /*1*/) {
            printdebugnpc(pd_zs_check, "...NSC unverletzt!");
            b_fullstop(self);
            b_resettempattitude(self);
            b_assessremoveweapon();
        };
    };
};

func void b_combatassessenterroom() {
    printdebugnpc(pd_zs_frame, "B_CombatAssessEnterRoom");
    if (((wld_getplayerportalguild() == gil_none) && (!npc_hasnews(self, news_theft, other, self))) && (npc_wasinstate(self, zs_clearroom) || npc_wasinstate(self, zs_clearroomwait))) {
        printdebugnpc(pd_zs_check, "...SC hat Raum des NSCs verlassen und noch nichts geklaut!");
        if (self.attribute[atr_hitpoints] /*0*/ == self.attribute[atr_hitpoints_max] /*1*/) {
            printdebugnpc(pd_zs_check, "...NSC unverletzt!");
            b_fullstop(self);
            b_resettempattitude(self);
            b_assessremoveweapon();
        };
    };
};

func void b_combatcatchthief() {
    printdebugnpc(pd_zs_frame, "B_CombatAssessTheft");
    b_assessandmemorize(news_theft, news_source_witness, self, other, self);
    b_fullstop(self);
    b_whirlaround(self, other);
    b_sayoverlay(self, other, "$DIRTYTHIEF");
    npc_settarget(self, other);
    ai_startstate(self, zs_attack, 0, "");
};

func void zs_callguards() {
    printdebugnpc(pd_zs_frame, "ZS_CallGuards");
    printglobals(pd_zs_frame);
    c_zsinit();
    npc_percenable(self, perc_assessdamage, zs_reacttodamage);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assesssurprise, zs_assesssurprise);
    b_smartturntonpc(self, hero);
    b_sayoverlay(self, hero, "$ALARM");
    npc_sendpassiveperc(self, perc_assesswarn, self, hero);
    ai_startstate(self, zs_flee, 0, "");
};

func void zs_callguardsonenterroom() {
    printdebugnpc(pd_zs_frame, "ZS_CallGuardsOnEnterRoom");
    printglobals(pd_zs_frame);
    c_zsinit();
    npc_percenable(self, perc_assessdamage, zs_reacttodamage);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assesssurprise, zs_assesssurprise);
    b_smartturntonpc(self, hero);
    b_sayoverlay(self, hero, "$ALARM");
    npc_sendpassiveperc(self, perc_assesswarn, self, hero);
    ai_startstate(self, zs_flee, 0, "");
};

func void zs_catchthief() {
    printdebugnpc(pd_zs_check, "ZS_CatchThief");
    printglobals(pd_zs_check);
    c_zsinit();
    npc_percenable(self, perc_assessdamage, zs_reacttodamage);
    npc_percenable(self, perc_observeintruder, b_observeintruder);
    npc_percenable(self, perc_assessfightsound, b_assessfightsound);
    npc_percenable(self, perc_assesswarn, b_assesswarn);
    npc_percenable(self, perc_assesstalk, b_assesstalk);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    b_assessandmemorize(news_theft, news_source_witness, self, other, self);
    if (self.aivar[42] == false) {
        b_fullstop(self);
        b_whirlaround(self, other);
    };
    b_say(self, other, "$YOUSTOLEFROMME");
    ai_startstate(self, zs_assessenemy, 0, "");
};

func void zs_clearroom() {
    printdebugnpc(pd_zs_frame, "ZS_ClearRoom");
    npc_percenable(self, perc_assessdamage, zs_reacttodamage);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assessenterroom, b_clearroomenterroom);
    npc_percenable(self, perc_assessusemob, b_clearroomusemob);
    npc_percenable(self, perc_assessfightsound, b_assessfightsound);
    npc_percenable(self, perc_movenpc, b_stopgotohero);
    c_zsinit();
    b_whirlaround(self, other);
    ai_pointatnpc(self, other);
    b_say(self, other, "$HEYYOU");
    ai_stoppointat(self);
    ai_setwalkmode(self, npc_run);
    npc_settarget(self, other);
};

func int zs_clearroom_loop() {
    var int portalguild;

    printdebugnpc(pd_zs_loop, "ZS_ClearRoom_Loop");
    npc_gettarget(self);
    portalguild = wld_getplayerportalguild();
    printguild(pd_zs_check, portalguild);
    if (((portalguild == gil_none) || (wld_getguildattitude(self.guild, portalguild) != att_friendly)) || (npc_getattitude(self, other) == att_friendly)) {
        b_fullstop(self);
        ai_continueroutine(self);
        return loop_end;
    };
    if ((npc_getdisttonpc(self, other) < perc_dist_dialog) && npc_canseenpc(self, other)) {
        b_fullstop(self);
        return loop_end;
    };
    ai_gotonpc(self, other);
    ai_wait(self, 0.5);
    return loop_continue;
};

func void zs_clearroom_end() {
    printdebugnpc(pd_zs_frame, "ZS_ClearRoom_End");
    ai_turntonpc(self, other);
    if (c_amistronger(self, other) || c_npcisguard(self)) {
        printdebugnpc(pd_zs_check, "...Nsc ist st*rker!");
        b_drawweapon(self, other);
        b_say(self, other, "$GETOUTOFHERE");
        ai_startstate(self, zs_clearroomwait, 0, "");
    }
    else {
        printdebugnpc(pd_zs_check, "...Nsc ist schw*cher!");
        b_say(self, other, "$WHYAREYOUINHERE");
        ai_startstate(self, zs_clearroomwait, 0, "");
    };
};

func void zs_clearroomwait() {
    printdebugnpc(pd_zs_frame, "ZS_ClearRoomWait");
    npc_percenable(self, perc_assessdamage, zs_reacttodamage);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assessenterroom, b_clearroomenterroom);
    npc_percenable(self, perc_assessusemob, b_clearroomusemob);
    npc_percenable(self, perc_assessfightsound, b_assessfightsound);
    c_zsinit();
};

func void zs_clearroomwait_loop() {
    printdebugnpc(pd_zs_loop, "ZS_ClearRoomWait_Loop");
    if (npc_getstatetime(self) > 8) {
        printdebugnpc(pd_zs_check, "...NSC wartet seit 8 Sekunden!");
        if ((wld_getplayerportalguild() == gil_none) || (npc_getattitude(self, other) == att_friendly)) {
            if (c_amistronger(self, other) || c_npcisguard(self)) {
                ai_turntonpc(self, other);
                b_say(self, other, "$WISEMOVE");
            };
            ai_continueroutine(self);
        }
        else if (c_amistronger(self, other) || c_npcisguard(self)) {
            b_say(self, other, "$YOUASKEDFORIT");
            npc_settarget(self, other);
            ai_startstate(self, zs_attack, 0, "");
        }
        else {
            ai_startstate(self, zs_callguardsonenterroom, 0, "");
        };
    };
    ai_wait(self, 1.0);
};

func void zs_clearroomwait_end() {
    printdebugnpc(pd_zs_frame, "ZS_ClearRoomWait_End");
};

func void b_clearroomenterroom() {
    printdebugnpc(pd_zs_frame, "B_ClearRoomEnterRoom");
    b_fullstop(self);
    if (npc_canseenpcfreelos(self, other)) {
        printdebugnpc(pd_zs_check, "...NSC kann SC sehen!");
        if (wld_getplayerportalguild() == gil_none) {
            printdebugnpc(pd_zs_check, "...SC nicht mehr im Raum!");
            if (c_amistronger(self, other) || c_npcisguard(self)) {
                ai_turntonpc(self, other);
                b_say(self, other, "$WISEMOVE");
            };
            ai_continueroutine(self);
        }
        printdebugnpc(pd_zs_check, "...SC wieder im Raum!");
        if (c_amistronger(self, other) || c_npcisguard(self)) {
            printdebugnpc(pd_zs_check, "...stronger");
            ai_turntonpc(self, other);
            b_say(self, other, "$YOUASKEDFORIT");
            npc_settarget(self, other);
            ai_startstate(self, zs_attack, 0, "");
        }
        else {
            printdebugnpc(pd_zs_check, "...not stronger--> CallGuards");
            ai_startstate(self, zs_callguardsonenterroom, 0, "");
        };
    };
};

func void b_clearroomusemob() {
    printdebugnpc(pd_zs_frame, "B_ClearRoomUseMob");
    if (npc_isdetectedmobownedbynpc(other, self) || npc_isdetectedmobownedbyguild(other, self.guild)) {
        printdebugnpc(pd_zs_check, "...MOB geh*rt NSC oder seiner Gilde!");
        b_fullstop(self);
        npc_percdisable(self, perc_assessusemob);
        b_assessandmemorize(news_theft, news_source_witness, self, other, self);
        if (c_amistronger(self, other) || c_npcisguard(self)) {
            b_say(self, other, "$DIRTYTHIEF");
            npc_settarget(self, other);
            ai_startstate(self, zs_attack, 0, "");
        }
        else {
            ai_startstate(self, zs_callguardsonenterroom, 0, "");
        };
    };
};

func void zs_dead() {
    printdebugnpc(pd_zs_frame, "ZS_Dead");
    printglobals(pd_zs_check);
    c_zsinit();
    self.aivar[8] = false;
    if ((npc_isplayer(other) || (c_npcishuman(other) && other.aivar[36])) || (c_npcismonster(other) && other.aivar[23])) {
        b_deathxp();
    };
    if (c_npcismonster(self)) {
        b_givedeathinv();
    };
    b_checkdeadmissionnpcs();
    b_respawn(self);
};

func void zs_flee() {
    printdebugnpc(pd_zs_frame, "ZS_Flee");
    printglobals(pd_zs_check);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    c_zsinit();
    ai_setwalkmode(self, npc_run);
    mdl_applyoverlaymds(self, "HUMANS_FLEE.MDS");
    if (npc_isplayer(other)) {
        npc_settempattitude(self, att_hostile);
    };
};

func int zs_flee_loop() {
    printdebugnpc(pd_zs_loop, "ZS_Flee_Loop");
    if (!hlp_isvalidnpc(other)) {
        printdebugnpc(pd_zs_check, "...Gegner nicht mehr g*ltig!");
        return loop_end;
    }
    else if (npc_getdisttonpc(self, other) > hai_dist_abort_flee) {
        printdebugnpc(pd_zs_check, "...Gegner weit genug weg -> Flucht abbrechen!");
        return loop_end;
    }
    else if (c_npcisdown(other)) {
        printdebugnpc(pd_zs_check, "...Gegner nicht mehr kampff*hig!");
        return loop_end;
    }
    else {
        printdebugnpc(pd_zs_check, "...Gegner noch zu nah dran!");
        npc_settarget(self, other);
        npc_gettarget(self);
        ai_flee(self);
        return loop_continue;
    };
};

func void zs_flee_end() {
    printdebugnpc(pd_zs_frame, "ZS_Flee_End");
    mdl_removeoverlaymds(self, "HUMANS_FLEE.MDS");
    b_lookaround();
    ai_startstate(self, zs_healself, 1, "");
};

func void zs_getbackbelongings() {
    printdebugnpc(pd_zs_frame, "ZS_GetBackBelongings");
    c_zsinit();
    npc_percenable(self, perc_assessenemy, b_assessenemy);
    npc_percenable(self, perc_assessfighter, b_assessfighter);
    npc_percenable(self, perc_assessdamage, zs_reacttodamage);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assesswarn, b_assesswarn);
    npc_percenable(self, perc_assessmurder, zs_assessmurder);
    npc_percenable(self, perc_assessdefeat, zs_assessdefeat);
    npc_percenable(self, perc_assessfightsound, b_assessfightsound);
    npc_percenable(self, perc_catchthief, zs_catchthief);
    npc_percenable(self, perc_assesstalk, b_refusetalkangry);
    npc_percenable(self, perc_assessitem, b_getbackitem_seen);
    if (c_amistronger(self, other)) {
        printdebugnpc(pd_zs_check, "...NSC is stronger");
        b_say(self, other, "$IWILLTEACHYOURESPECTFORFOREIGNPROPERTY");
        npc_settarget(self, other);
        ai_startstate(self, zs_attack, 0, "");
    }
    else {
        printdebugnpc(pd_zs_check, "...NSC is weaker");
        b_say(self, other, "$GIVEITTOME");
        ai_startstate(self, zs_getbackbelongingswait, 0, "");
    };
};

func void zs_getbackbelongingswait() {
    printdebugnpc(pd_zs_frame, "ZS_GetBackBelongingsWait");
    npc_percenable(self, perc_assessenemy, b_assessenemy);
    npc_percenable(self, perc_assessfighter, b_assessfighter);
    npc_percenable(self, perc_assessdamage, zs_reacttodamage);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assesswarn, b_assesswarn);
    npc_percenable(self, perc_assessmurder, zs_assessmurder);
    npc_percenable(self, perc_assessdefeat, zs_assessdefeat);
    npc_percenable(self, perc_assessfightsound, b_assessfightsound);
    npc_percenable(self, perc_catchthief, zs_catchthief);
    npc_percenable(self, perc_assesstalk, b_refusetalkangry);
    npc_percenable(self, perc_assessitem, b_getbackitem_seen);
    npc_percenable(self, perc_drawweapon, b_getbackbelongingsthreat);
    npc_percenable(self, perc_assessthreat, b_getbackbelongingsthreat);
};

func void zs_getbackbelongingswait_loop() {
    printdebugnpc(pd_zs_loop, "ZS_GetBackBelongingsWait_Loop");
    if (npc_getdisttonpc(self, other) > perc_dist_intermediat) {
        printdebugnpc(pd_zs_check, "...Dieb weiter weg!");
        b_say(self, other, "$YOUCANKEEPTHECRAP");
        self.aivar[1] = 1;
        if (npc_getpermattitude(self, other) != att_hostile) {
            printdebugnpc(pd_zs_check, "...NSC nicht HOSTILE zum Dieb!");
            npc_settempattitude(self, att_angry);
            ai_continueroutine(self);
            return;
        };
        ai_continueroutine(self);
        return;
    };
    return;
};

func void zs_getbackbelongingswait_end() {
    printdebugnpc(pd_zs_frame, "ZS_GetBackBelongingsWait_End");
};

func void b_getbackbelongingsthreat() {
    printdebugnpc(pd_zs_frame, "B_GetBackBelongingsThreat");
    b_say(self, other, "$OKAYKEEPIT");
    self.aivar[1] = 1;
    ai_continueroutine(self);
};

func void zs_getbackitem() {
    printdebugnpc(pd_zs_frame, "ZS_GetBackItem");
    c_zsinit();
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assessdamage, zs_reacttodamage);
    npc_percenable(self, perc_assesswarn, b_assesswarn);
    npc_percenable(self, perc_assessfightsound, b_assessfightsound);
    npc_percenable(self, perc_catchthief, zs_catchthief);
    npc_percenable(self, perc_assesstalk, b_refusetalkangry);
    npc_percenable(self, perc_assessitem, b_getbackitem_seen);
    npc_percenable(self, perc_drawweapon, zs_getbackitem_drawweapon);
    npc_setperctime(self, 1.0);
    b_say(self, other, "$GIVEITTOME");
    npc_sendpassiveperc(self, perc_npccommand, self, other);
    if (hlp_isvalidnpc(other)) {
        printdebugnpc(pd_zs_check, "other");
    };
};

func int zs_getbackitem_loop() {
    printdebugnpc(pd_zs_loop, "ZS_GetBackItem_Loop");
    if ((npc_getstatetime(self) > 7) && npc_isplayer(other)) {
        printdebugnpc(pd_zs_loop, "ZS_GetBackItem_Loop // after 3 sec Attack");
        npc_settarget(self, other);
        ai_startstate(self, zs_attack, 0, "");
        return 1;
    }
    else {
        if (npc_getstatetime(self) > 7) {
            return 1;
        };
    };
};

func void zs_getbackitem_end() {
    printdebugnpc(pd_zs_frame, "ZS_GetBackItem_End");
};

func void b_getbackitem_seen() {
    printdebugnpc(pd_zs_frame, "B_GetBackItem_Seen");
    npc_percdisable(self, perc_assessitem);
    if (self.aivar == hlp_getinstanceid(item)) {
        printdebugnpc(pd_zs_frame, "B_GetBackItem_Seen want it");
        npc_clearaiqueue(self);
        ai_takeitem(self, item);
        b_say(self, other, "$WISEMOVE");
        ai_continueroutine(self);
    };
};

func void b_getbackitem_given() {
    printdebugnpc(pd_zs_frame, "ZS_GetBackItem_Given");
    if (self.aivar == hlp_getinstanceid(item)) {
        printdebugnpc(pd_zs_frame, "ZS_GetBackItem_Given // want this item cause it*s mine");
        npc_clearaiqueue(self);
        npc_giveitem(other, item /*1258*/, self);
        b_say(self, other, "$WISEMOVE");
        ai_continueroutine(self);
    }
    else {
        if (c_wantitem()) {
            printdebugnpc(pd_zs_frame, "ZS_GetBackItem_Given // want this cause it*s worthy");
            npc_clearaiqueue(self);
            npc_giveitem(other, item /*1258*/, self);
            b_say(self, other, "$OKAYTOO");
        }
        else {
            printdebugnpc(pd_zs_frame, "ZS_GetBackItem_Given don*t want this crap");
            b_say(self, other, "$YOUWANNAFOOLME");
            if (c_amistronger(self, other)) {
                printdebugnpc(pd_zs_frame, "ZS_GetBackItem_Given don*t want this crap // stronger");
                npc_clearaiqueue(self);
                npc_settarget(self, other);
                ai_startstate(self, zs_attack, 0, "");
            };
        };
        ai_continueroutine(self);
    };
};

func void zs_getbackitem_drawweapon() {
    printdebugnpc(pd_zs_frame, "ZS_GetBackItem_DrawWeapon");
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    b_say(self, other, "$YOUASKEDFORIT");
    npc_settarget(self, other);
    ai_startstate(self, zs_attack, 0, "");
};

func void b_stop() {
    printdebugnpc(pd_zs_frame, "B_Stop");
    printglobals(pd_zs_check);
    if (npc_getdisttonpc(self, other) < perc_dist_watchfight) {
        printdebugnpc(pd_zs_frame, "B_Stop To close");
        npc_clearaiqueue(self);
        ai_standup(self);
        ai_startstate(self, zs_watchfight, 0, "");
    };
};

func void zs_gotofight() {
    printdebugnpc(pd_zs_frame, "ZS_GotoFight");
    npc_percenable(self, perc_assessdamage, zs_reacttodamage);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assessplayer, b_stop);
    npc_percenable(self, perc_assesssurprise, zs_assesssurprise);
    npc_percenable(self, perc_assessenemy, b_assessenemy);
    npc_percenable(self, perc_assessmurder, zs_assessmurder);
    npc_percenable(self, perc_assessdefeat, zs_assessdefeat);
    npc_percenable(self, perc_catchthief, zs_catchthief);
    npc_percenable(self, perc_assesstalk, b_refusetalk);
    npc_setperctime(self, 1.0);
    printglobals(pd_zs_check);
    ai_gotonpc(self, victim);
};

func int zs_gotofight_loop() {
    printdebugnpc(pd_zs_loop, "ZS_GotoFight_Loop");
    if ((!hlp_isvalidnpc(other)) || (!hlp_isvalidnpc(victim))) {
        printdebugnpc(pd_zs_check, "...Angreifer oder Opfer ung*ltig!");
        return 1;
    };
    if (npc_isdead(other) || npc_isdead(victim)) {
        printdebugnpc(pd_zs_check, "...Angreifer oder Opfer tot!");
        return 1;
    };
    if (npc_isinstate(other, zs_unconscious) || npc_isinstate(victim, zs_unconscious)) {
        printdebugnpc(pd_zs_check, "...Angreifer oder Opfer bewu*tlos!");
        return 1;
    };
    if (npc_isinstate(other, zs_flee) || npc_isinstate(victim, zs_flee)) {
        printdebugnpc(pd_zs_check, "...Angreifer oder Opfer in ZS_Flee!");
        return 1;
    };
    ai_wait(self, 1.0);
    return 0;
};

func void zs_gotofight_end() {
};

func void zs_healself() {
    printdebugnpc(pd_zs_check, "ZS_HealSelf");
    npc_percenable(self, perc_assessenemy, b_assessenemy);
    npc_percenable(self, perc_assessfighter, b_assessfighter);
    npc_percenable(self, perc_assessdamage, zs_reacttodamage);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assesscaster, b_assesscaster);
    npc_percenable(self, perc_assessthreat, b_assessfighter);
    npc_percenable(self, perc_drawweapon, b_assessfighter);
    npc_percenable(self, perc_assesswarn, b_assesswarn);
    npc_percenable(self, perc_assessmurder, zs_assessmurder);
    npc_percenable(self, perc_assessdefeat, zs_assessdefeat);
    npc_percenable(self, perc_assessfightsound, b_assessfightsound);
    npc_percenable(self, perc_catchthief, zs_catchthief);
    npc_percenable(self, perc_assesstheft, b_assesstheft);
    printglobals(pd_zs_check);
    c_stoplookat(self);
};

func int zs_healself_loop() {
    printdebugnpc(pd_zs_loop, "ZS_HealSelf_Loop");
    if ((self.attribute[atr_hitpoints] /*0*/ == self.attribute[atr_hitpoints_max] /*1*/) || (self.flags == npc_flag_immortal)) {
        printdebugnpc(pd_zs_check, "...vollst*ndig geheilt!");
        return loop_end;
    }
    else if (npc_hasitems(self, itfo_potion_health_03) > 0) {
        printdebugstring(pd_zs_check, "...", itfo_potion_health_03.description);
        ai_useitem(self, itfo_potion_health_03 /*4831*/);
    }
    else if (npc_hasitems(self, itfo_potion_health_02) > 0) {
        printdebugstring(pd_zs_check, "...", itfo_potion_health_02.description);
        ai_useitem(self, itfo_potion_health_02 /*4829*/);
    }
    else if (npc_hasitems(self, itfo_potion_health_01) > 0) {
        printdebugstring(pd_zs_check, "...", itfo_potion_health_01.description);
        ai_useitem(self, itfo_potion_health_01 /*4827*/);
    }
    else if (npc_getinvitembyslot(self, inv_food, 0) > 0) {
        printdebugstring(pd_zs_check, "...", item.description);
        ai_useitem(self, item /*1258*/);
    }
    else {
        printdebugnpc(pd_zs_check, "...keine weiteren Heilmittel vorhanden!");
        return loop_end;
    };
    return loop_continue;
};

func void zs_healself_end() {
    printdebugnpc(pd_zs_frame, "ZS_HealSelf_End");
    ai_startstate(self, zs_healselfmana, 1, "");
};

func void zs_healselfmana() {
    printdebugnpc(pd_zs_check, "ZS_HealSelfMana");
    npc_percenable(self, perc_assessenemy, b_assessenemy);
    npc_percenable(self, perc_assessfighter, b_assessfighter);
    npc_percenable(self, perc_assessdamage, zs_reacttodamage);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assesscaster, b_assesscaster);
    npc_percenable(self, perc_assessthreat, b_assessfighter);
    npc_percenable(self, perc_drawweapon, b_assessfighter);
    npc_percenable(self, perc_assesswarn, b_assesswarn);
    npc_percenable(self, perc_assessmurder, zs_assessmurder);
    npc_percenable(self, perc_assessdefeat, zs_assessdefeat);
    npc_percenable(self, perc_assessfightsound, b_assessfightsound);
    npc_percenable(self, perc_catchthief, zs_catchthief);
    npc_percenable(self, perc_assesstheft, b_assesstheft);
};

func int zs_healselfmana_loop() {
    printdebugnpc(pd_zs_loop, "ZS_HealSelfMana_Loop");
    if (self.attribute[atr_mana] /*2*/ == self.attribute[atr_mana_max] /*3*/) {
        printdebugnpc(pd_zs_check, "...Mana voll regeneriert!");
        return loop_end;
    }
    else if (npc_hasitems(self, itfo_potion_mana_03) > 0) {
        printdebugstring(pd_zs_check, "...", itfo_potion_mana_03.description);
        ai_useitem(self, itfo_potion_mana_03 /*4823*/);
    }
    else if (npc_hasitems(self, itfo_potion_mana_02) > 0) {
        printdebugstring(pd_zs_check, "...", itfo_potion_mana_02.description);
        ai_useitem(self, itfo_potion_mana_02 /*4821*/);
    }
    else if (npc_hasitems(self, itfo_potion_mana_01) > 0) {
        printdebugstring(pd_zs_check, "...", itfo_potion_mana_01.description);
        ai_useitem(self, itfo_potion_mana_01 /*4819*/);
    }
    else {
        printdebugnpc(pd_zs_check, "...keine 'Mana-Regenerierungs-Mittel' mehr vorhanden!");
        return loop_end;
    };
    ai_wait(self, 0.5);
    return loop_continue;
};

func void zs_healselfmana_end() {
    printdebugnpc(pd_zs_frame, "ZS_HealSelfMana_End");
};

func void zs_intruderalert() {
    printdebugnpc(pd_zs_frame, "ZS_IntruderAlert");
    printglobals(pd_zs_frame);
    b_intruderalert(self, hero);
    ai_startstate(self, zs_attack, 0, "");
};

func void zs_movenpcwait() {
    printdebugnpc(pd_zs_frame, "ZS_MoveNpcWait");
    npc_percenable(self, perc_assessdamage, zs_reacttodamage);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assesswarn, b_assesswarn);
    npc_percenable(self, perc_assessfightsound, b_assessfightsound);
    npc_percenable(self, perc_catchthief, zs_catchthief);
    npc_percenable(self, perc_assesstalk, b_assesstalk);
    npc_percenable(self, perc_assessthreat, b_assessfighter);
    npc_percenable(self, perc_assessenterroom, b_assessenterroom);
    c_lookatnpc(self, other);
};

func void zs_movenpcwait_loop() {
    printdebugnpc(pd_zs_loop, "ZS_MoveNpcWait_Loop");
    if (npc_getstatetime(self) > 2) {
        if ((npc_iswayblocked(self) && (npc_getdisttonpc(self, other) < 200)) && (other.aivar[33] == false)) {
            b_drawweapon(self, other);
            b_say(self, other, "$YOUDEAFORWHAT");
            ai_startstate(self, zs_movenpcwait1, 0, "");
            return;
        }
        else {
            ai_continueroutine(self);
            return;
        };
    };
    ai_wait(self, 1.0);
};

func void zs_movenpcwait_end() {
    printdebugnpc(pd_zs_frame, "ZS_MoveNpcWait_End");
};

func void zs_movenpcwait1() {
    printdebugnpc(pd_zs_frame, "ZS_MoveNpcWait1");
    npc_percenable(self, perc_assessdamage, zs_reacttodamage);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assesswarn, b_assesswarn);
    npc_percenable(self, perc_assessfightsound, b_assessfightsound);
    npc_percenable(self, perc_catchthief, zs_catchthief);
    npc_percenable(self, perc_assesstalk, b_assesstalk);
    npc_percenable(self, perc_assessthreat, b_assessfighter);
    npc_percenable(self, perc_assessenterroom, b_assessenterroom);
};

func void zs_movenpcwait1_loop() {
    printdebugnpc(pd_zs_loop, "ZS_MoveNpcWait1_Loop");
    if (npc_getstatetime(self) > 2) {
        if ((npc_iswayblocked(self) && (npc_getdisttonpc(self, other) < 200)) && (other.aivar[33] == false)) {
            npc_settempattitude(self, att_hostile);
            b_say(self, other, "$YOUASKEDFORIT");
            npc_settarget(self, other);
            ai_startstate(self, zs_attack, 0, "");
            return;
        }
        else {
            c_stoplookat(self);
            ai_continueroutine(self);
            return;
        };
    };
    ai_wait(self, 1.0);
};

func void zs_movenpcwait1_end() {
    printdebugnpc(pd_zs_frame, "ZS_MoveNpcWait1_End");
    b_removeweapon(self);
};

func void zs_movenpcfriendlywait() {
    printdebugnpc(pd_zs_frame, "ZS_MoveNpcFriendlyWait");
    npc_percenable(self, perc_assessdamage, zs_reacttodamage);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assesswarn, b_assesswarn);
    npc_percenable(self, perc_assessfightsound, b_assessfightsound);
    npc_percenable(self, perc_catchthief, zs_catchthief);
    npc_percenable(self, perc_assesstalk, b_assesstalk);
    npc_percenable(self, perc_assessthreat, b_assessfighter);
    npc_percenable(self, perc_assessenterroom, b_assessenterroom);
    c_lookatnpc(self, other);
};

func void zs_movenpcfriendlywait_loop() {
    printdebugnpc(pd_zs_loop, "ZS_MoveNpcFriendlyWait_Loop");
    if ((!npc_iswayblocked(self)) || (npc_getdisttonpc(self, other) > 200)) {
        printdebugnpc(pd_zs_check, "...weg wieder frei!");
        ai_continueroutine(self);
        return;
    };
    ai_wait(self, 1.0);
};

func void zs_movenpcfriendlywait_end() {
    printdebugnpc(pd_zs_frame, "ZS_MoveNpcFriendlyWait_End");
    c_stoplookat(self);
};

func void zs_observeintruder() {
    printdebugnpc(pd_zs_frame, "ZS_ObserveIntruder");
    npc_percenable(self, perc_assessenemy, b_assessenemy);
    npc_percenable(self, perc_assessfighter, b_assessfighter);
    npc_percenable(self, perc_assessdamage, zs_reacttodamage);
    npc_percenable(self, perc_assesscaster, b_assesscaster);
    npc_percenable(self, perc_drawweapon, b_assessfighter);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assessfightsound, b_assessfightsound);
    npc_percenable(self, perc_assesswarn, b_assesswarn);
    npc_percenable(self, perc_assessmurder, zs_assessmurder);
    npc_percenable(self, perc_assessdefeat, zs_assessdefeat);
    npc_percenable(self, perc_catchthief, zs_catchthief);
    npc_percenable(self, perc_assesstheft, b_assesstheft);
    npc_percenable(self, perc_assesssurprise, zs_assesssurprise);
    npc_percenable(self, perc_observesuspect, b_observesuspect);
    npc_percenable(self, perc_assessenterroom, b_assessenterroom);
    npc_percenable(self, perc_assessusemob, b_assessusemob);
    npc_percenable(self, perc_assesstalk, b_assesstalk);
    if (c_npcisinfightmode(other)) {
        printdebugnpc(pd_zs_check, "...Eindringling ist im Kampfmodus!");
        b_assessfighter();
        return;
    }
    else if (c_bodystatecontains(other, bs_sneak)) {
        printdebugnpc(pd_zs_check, "...Eindringling schleicht!");
        b_observesuspect();
        return;
    }
    else {
        printdebugnpc(pd_zs_check, "...Eindringling ist NICHT im Kampfmodus und schleicht nicht!");
        ai_turntonpc(self, other);
        ai_startstate(self, zs_observeintruderwaitneutral, 1, "");
        return;
    };
    ai_continueroutine(self);
    return;
};

func void zs_observeintruderwaitneutral() {
    printdebugnpc(pd_zs_frame, "ZS_ObserveIntruderWaitNeutral");
    npc_percenable(self, perc_assessenemy, zs_assessenemy);
    npc_percenable(self, perc_assessfighter, b_assessfighter);
    npc_percenable(self, perc_drawweapon, b_assessfighter);
    npc_percenable(self, perc_assesscaster, b_assesscaster);
    npc_percenable(self, perc_assesswarn, b_assesswarn);
    npc_percenable(self, perc_catchthief, zs_catchthief);
    npc_percenable(self, perc_assesstheft, b_assesstheft);
    npc_percenable(self, perc_assessenterroom, b_assessenterroom);
    npc_percenable(self, perc_assessusemob, b_assessusemob);
    npc_percenable(self, perc_observesuspect, b_observesuspect);
    npc_percenable(self, perc_assesstalk, b_assesstalk);
    npc_percenable(self, perc_assesscall, zs_reacttocall);
};

func int zs_observeintruderwaitneutral_loop() {
    printdebugnpc(pd_zs_loop, "ZS_ObserveIntruderWaitNeutral_Loop");
    if (npc_isinroutine(self, zs_guard) && (npc_getdisttonpc(self, other) > hai_dist_guardobserveintruder)) {
        printdebugnpc(pd_zs_loop, "Guard");
        return loop_end;
    };
    if ((!npc_isinroutine(self, zs_guard)) && (npc_getdisttonpc(self, other) > hai_dist_observeintruder)) {
        printdebugnpc(pd_zs_loop, " No Guard");
        return loop_end;
    };
    if (other.aivar[33]) {
        return loop_end;
    };
    if (npc_getstatetime(self) > 10) {
        b_say(self, other, "$WHATDOYOUWANT");
        ai_startstate(self, zs_observeintruderwaitneutral2, 0, "");
    };
    b_checkforimportantinfo(self, other);
    b_smartturntonpc(self, other);
    ai_wait(self, 1.0);
    return loop_continue;
};

func void zs_observeintruderwaitneutral_end() {
    printdebugnpc(pd_zs_frame, "ZS_ObserveIntruderWaitNeutral_End");
    c_stoplookat(self);
    ai_turntonpc(self, other);
};

func void zs_observeintruderwaitneutral2() {
    printdebugnpc(pd_zs_frame, "ZS_ObserveIntruderWaitNeutral2");
    npc_percenable(self, perc_assessenemy, zs_assessenemy);
    npc_percenable(self, perc_assessfighter, b_assessfighter);
    npc_percenable(self, perc_drawweapon, b_assessfighter);
    npc_percenable(self, perc_assesscaster, b_assesscaster);
    npc_percenable(self, perc_assesswarn, b_assesswarn);
    npc_percenable(self, perc_catchthief, zs_catchthief);
    npc_percenable(self, perc_assesstheft, b_assesstheft);
    npc_percenable(self, perc_assessenterroom, b_assessenterroom);
    npc_percenable(self, perc_assessusemob, b_assessusemob);
    npc_percenable(self, perc_observesuspect, b_observesuspect);
    npc_percenable(self, perc_assesstalk, b_assesstalk);
    npc_percenable(self, perc_assesscall, zs_reacttocall);
};

func int zs_observeintruderwaitneutral2_loop() {
    printdebugnpc(pd_zs_loop, "ZS_ObserveIntruderWaitNeutral2_Loop");
    if (npc_isinroutine(self, zs_guard) && (npc_getdisttonpc(self, other) > hai_dist_guardobserveintruder)) {
        printdebugnpc(pd_zs_loop, "Guard");
        return loop_end;
    };
    if ((!npc_isinroutine(self, zs_guard)) && (npc_getdisttonpc(self, other) > hai_dist_observeintruder)) {
        printdebugnpc(pd_zs_loop, "No Guard");
        return loop_end;
    };
    if (other.aivar[33]) {
        return loop_end;
    };
    if (npc_getstatetime(self) > 20) {
        b_say(self, other, "$ISAIDWHATDOYOUWANT");
        return loop_end;
    };
    b_checkforimportantinfo(self, other);
    b_smartturntonpc(self, other);
    ai_wait(self, 1.0);
    return loop_continue;
};

func void zs_observeintruderwaitneutral2_end() {
    printdebugnpc(pd_zs_frame, "ZS_ObserveIntruderIntruderWaitNeutral2_End");
    c_stoplookat(self);
    ai_turntonpc(self, other);
};

func void zs_observeperson() {
    printdebugnpc(pd_zs_frame, "ZS_ObservePerson");
    c_zsinit();
    npc_percenable(self, perc_assessenemy, b_assessenemy);
    npc_percenable(self, perc_assessfighter, b_assessfighter);
    npc_percenable(self, perc_assessdamage, zs_reacttodamage);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_drawweapon, b_assessfighter);
    npc_percenable(self, perc_assesswarn, b_assesswarn);
    npc_percenable(self, perc_assessmurder, zs_assessmurder);
    npc_percenable(self, perc_assessdefeat, zs_assessdefeat);
    npc_percenable(self, perc_assessfightsound, b_assessfightsound);
    npc_percenable(self, perc_catchthief, zs_catchthief);
    npc_percenable(self, perc_assesstheft, b_assesstheft);
    npc_percenable(self, perc_observeintruder, b_observeintruder);
    npc_percenable(self, perc_assesstalk, b_assesstalk);
    npc_percenable(self, perc_assesscall, zs_reacttocall);
    c_lookatnpc(self, other);
};

func int zs_observeperson_loop() {
    printdebugnpc(pd_zs_loop, "ZS_ObservePerson_Loop");
    if (npc_getstatetime(self) > 5) {
        return 1;
    };
};

func void zs_observeperson_end() {
    printdebugnpc(pd_zs_loop, "ZS_ObservePerson_End");
    c_stoplookat(self);
};

func void zs_observesuspect() {
    printdebugnpc(pd_zs_frame, "ZS_ObserveSuspect");
    c_zsinit();
    npc_percenable(self, perc_assessenemy, b_assessenemy);
    npc_percenable(self, perc_assessfighter, b_assessfighter);
    npc_percenable(self, perc_assessdamage, zs_reacttodamage);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_drawweapon, b_assessfighter);
    npc_percenable(self, perc_observeintruder, b_observeintruder);
    npc_percenable(self, perc_assessfightsound, b_assessfightsound);
    npc_percenable(self, perc_catchthief, zs_catchthief);
    npc_percenable(self, perc_assesstalk, b_assesstalk);
    npc_percenable(self, perc_assessthreat, b_assessthreat);
    npc_percenable(self, perc_assessusemob, b_assessusemob);
    npc_percenable(self, perc_assessenterroom, b_assessenterroom);
    ai_turntonpc(self, other);
    ai_lookatnpc(self, other);
    ai_pointatnpc(self, other);
    b_say(self, other, "$WHATSTHISSUPPOSEDTOBE");
    npc_sendpassiveperc(self, perc_assesswarn, self, other);
    if ((npc_gettempattitude(self, other) == att_hostile) || (npc_getpermattitude(self, other) == att_hostile)) {
        b_assessenemy();
        return;
    };
    b_assesssc();
    ai_stoppointat(self);
};

func int zs_observesuspect_loop() {
    printdebugnpc(pd_zs_loop, "ZS_ObserveSuspect_Loop");
    b_smartturntonpc(self, other);
    if ((npc_getdisttonpc(self, other) > perc_dist_intermediat) || (!c_bodystatecontains(other, bs_sneak))) {
        printdebugnpc(pd_zs_loop, "... loop end");
        return loop_end;
    };
    ai_wait(self, 1.0);
    return loop_continue;
};

func void zs_observesuspect_end() {
    printdebugnpc(pd_zs_frame, "ZS_ObserveSuspect_End");
    ai_stoppointat(self);
    c_stoplookat(self);
    ai_turntonpc(self, other);
    ai_continueroutine(self);
};

func void zs_proclaimandpunish() {
    printdebugnpc(pd_zs_frame, "ZS_ProclaimAndPunish");
    npc_percenable(self, perc_assessdamage, b_combatreacttodamage);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assessmurder, b_combatassessmurder);
    npc_percenable(self, perc_assessdefeat, b_combatassessdefeat);
    npc_percenable(self, perc_movenpc, b_stopgotohero);
    if (((self.aivar[19] && (!c_npcisboss(self))) && (wld_getguildattitude(self.guild, other.guild) != att_hostile)) && (npc_getpermattitude(self, other) != att_hostile)) {
        printdebugnpc(pd_zs_check, "...NSC wurde schon mal vom SC besiegt!");
        b_removeweapon(self);
        ai_startstate(self, zs_turnaway, 0, "");
        return;
    };
    if ((npc_isinfightmode(self, fmode_far) || npc_isinfightmode(self, fmode_magic)) && (npc_getdisttonpc(self, hero) > perc_dist_dialog)) {
        npc_settarget(self, hero);
        ai_startstate(self, zs_attack, 0, "");
    };
    ai_setwalkmode(self, npc_run);
};

func int zs_proclaimandpunish_loop() {
    printdebugnpc(pd_zs_loop, "ZS_ProclaimAndPunish_Loop");
    if (npc_getstatetime(self) > hai_time_pursuit) {
        printdebugnpc(pd_zs_check, "...Verfolgung dauert schon zu lange!");
        ai_continueroutine(self);
    }
    else if (npc_getdisttonpc(self, hero) > perc_dist_dialog) {
        printdebugnpc(pd_zs_check, "...noch NICHT in Dialogreichweite!");
        ai_gotonpc(self, hero);
    }
    else {
        printdebugnpc(pd_zs_check, "...IN Dialogreichweite!");
        b_fullstop(self);
        return loop_end;
    };
    return loop_continue;
};

func void zs_proclaimandpunish_end() {
    var int murder_news;
    var c_npc murder_victim;

    printdebugnpc(pd_zs_frame, "ZS_ProclaimAndPunish_End");
    if (c_npcisdown(hero)) {
        printdebugnpc(pd_zs_check, "...SC mittlerweile am Boden!");
        return;
    };
    if (npc_wasinstate(self, zs_assessenemy)) {
        murder_news = npc_hasnews(self, news_murder, hero, NULL);
        if (murder_news) {
            printdebugnpc(pd_zs_check, "...SC hat get*tet...");
            murder_victim = npc_getnewsvictim(self, murder_news);
            if (npc_getattitude(self, murder_victim) == att_friendly) {
                printdebugnpc(pd_zs_check, "...und zwar einen Freund des NSCs!");
                b_sayoverlay(self, hero, "$YouKilledOneOfUs");
            };
        }
        else if (wld_getguildattitude(self.guild, hero.guild) == att_hostile) {
            printdebugnpc(pd_zs_check, "...SC ist Todfeind!");
            b_sayoverlay(self, hero, "$DieMortalEnemy");
        }
        else if (npc_hasnews(self, news_theft, hero, self)) {
            printdebugnpc(pd_zs_check, "...SC hat vom NSC geklaut!");
            b_sayoverlay(self, hero, "$DIRTYTHIEF");
        }
        else if (npc_hasnews(self, news_defeat, self, hero)) {
            printdebugnpc(pd_zs_check, "...Normaler Angriff (SC ist schon mal besiegt worden)!");
            b_sayoverlay(self, hero, "$YOUSTILLNOTHAVEENOUGH");
        }
        else {
            printdebugnpc(pd_zs_check, "...Normaler Angriff (SC wurde noch nicht besiegt)!");
            b_sayoverlay(self, hero, "$NowWait");
        };
    }
    else if (c_getattackreason(self) == aiv_ar_intruder) {
        printdebugnpc(pd_zs_check, "...SC hat Durchgang durchbrochen!");
        b_sayoverlay(self, hero, "$NowWaitIntruder");
    }
    else {
        printdebugnpc(pd_zs_check, "...SC greift Sch*tzling einer Wache an !");
        b_sayoverlay(self, hero, "$YouAttackedMyCharge");
    };
    npc_settarget(self, hero);
    ai_startstate(self, zs_attack, 0, "");
};

func void zs_reacttocall() {
    printdebugnpc(pd_zs_frame, "ZS_ReactToCall");
    c_zsinit();
    npc_percenable(self, perc_assessenemy, b_assessenemy);
    npc_percenable(self, perc_assessfighter, b_assessfighter);
    npc_percenable(self, perc_assessdamage, zs_reacttodamage);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assessmurder, zs_assessmurder);
    npc_percenable(self, perc_assessdefeat, zs_assessdefeat);
    npc_percenable(self, perc_drawweapon, b_assessfighter);
    npc_percenable(self, perc_assessfightsound, b_assessfightsound);
    npc_percenable(self, perc_assesssurprise, zs_assesssurprise);
    npc_percenable(self, perc_assessthreat, b_assessfighter);
    npc_percenable(self, perc_assesswarn, b_assesswarn);
    npc_percenable(self, perc_catchthief, zs_catchthief);
    npc_percenable(self, perc_assesstheft, b_assesstheft);
    npc_percenable(self, perc_assesstalk, b_assesstalk);
    ai_turntonpc(self, other);
    c_lookatnpc(self, other);
    if (npc_gettempattitude(self, other) == att_hostile) {
        printdebugnpc(pd_zs_check, "...feindlich!");
        c_stoplookat(self);
        b_assessenemy();
        return;
    }
    else {
        printdebugnpc(pd_zs_check, "...nicht feindlich!");
        ai_playani(self, "T_COMEOVERHERE");
        ai_startstate(self, zs_reacttocall_wait, 0, "");
    };
    ai_continueroutine(self);
};

func void zs_reacttocall_wait() {
    printdebugnpc(pd_zs_frame, "ZS_ReactToCall_Wait");
    npc_percenable(self, perc_assessdamage, zs_reacttodamage);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assesssurprise, zs_assesssurprise);
    npc_percenable(self, perc_assessenemy, b_assessenemy);
    npc_percenable(self, perc_assessfighter, b_assessfighter);
    npc_percenable(self, perc_drawweapon, b_assessfighter);
    npc_percenable(self, perc_assessthreat, b_assessfighter);
    npc_percenable(self, perc_assesswarn, b_assesswarn);
    npc_percenable(self, perc_assessmurder, zs_assessmurder);
    npc_percenable(self, perc_assessdefeat, zs_assessdefeat);
    npc_percenable(self, perc_assessfightsound, b_assessfightsound);
    npc_percenable(self, perc_catchthief, zs_catchthief);
    npc_percenable(self, perc_assesstheft, b_assesstheft);
    npc_percenable(self, perc_assesstalk, b_assesstalk);
};

func int zs_reacttocall_wait_loop() {
    printdebugnpc(pd_zs_loop, "ZS_ReactToCall_Wait_Loop");
    b_smartturntonpc(self, other);
    if (npc_getstatetime(self) > 10) {
        return 1;
    };
};

func int zs_reacttocall_wait_end() {
    printdebugnpc(pd_zs_frame, "ZS_ReactToCall_Wait_End");
    c_stoplookat(self);
};

func void zs_reacttodamage() {
    printdebugnpc(pd_zs_frame, "ZS_ReactToDamage");
    printglobals(pd_zs_check);
    c_zsinit();
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assessmurder, b_combatassessmurder);
    npc_percenable(self, perc_assessdefeat, b_combatassessdefeat);
    b_whirlaround(self, other);
    if (self.aivar[37]) {
        b_specialcombatdamagereaction();
    };
    if (npc_isinfightmode(other, fmode_far) || npc_isinfightmode(other, fmode_magic)) {
        self.aivar[10] = true;
    }
    else {
        self.aivar[10] = false;
    };
    if (!c_npcismonster(other)) {
        if (npc_isplayer(other)) {
            self.aivar[2] = 1;
            if ((npc_gettempattitude(self, other) == att_friendly) || (self.npctype == npctype_friend)) {
                printdebugnpc(pd_zs_check, "...NSC FRIENDLY zum Angreifer");
                c_lookatnpc(self, other);
                b_say(self, other, "$WHATAREYOUDOING");
                npc_settempattitude(self, att_angry);
                ai_startstate(self, zs_reacttodamagewait_friendly, 0, "");
                return;
            }
            else {
                printdebugnpc(pd_zs_check, "...NSC nicht FRIENDLY zum Angreifer!");
                if (npc_getpermattitude(self, other) != att_hostile) {
                    npc_setpermattitude(self, att_angry);
                };
                npc_settempattitude(self, att_hostile);
            };
        };
        ai_startstate(self, zs_assessenemy, 0, "");
    }
    else {
        ai_startstate(self, zs_assessmonster, 0, "");
    };
};

func int zs_reacttodamage_loop() {
    return loop_end;
};

func void zs_reacttodamage_end() {
};

func void zs_reacttodamagewait_friendly() {
    printdebugnpc(pd_zs_frame, "ZS_ReactToDamageWaitFriendly");
    printglobals(pd_zs_check);
    c_zsinit();
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assessmurder, b_combatassessmurder);
    npc_percenable(self, perc_assessdefeat, b_combatassessdefeat);
    npc_percenable(self, perc_assessdamage, b_reacttodamagewaitdamage);
};

func int zs_reacttodamagewait_friendly_loop() {
    var int int_wait;

    printdebugnpc(pd_zs_loop, "ZS_ReactToDamage_WaitFriedndlyLoop");
    int_wait = 1;
    if (int_wait == 1) {
        ai_wait(self, 5.0);
        int_wait = 0;
    };
    if (int_wait == 0) {
        return loop_end;
    };
};

func void zs_reacttodamagewaitfriendly_end() {
    ai_continueroutine(self);
};

func void b_reacttodamagewaitdamage() {
    printdebugnpc(pd_zs_check, "B_ReactToDamageWaitDamage");
    b_fullstop(self);
    npc_settarget(self, other);
    ai_startstate(self, zs_attack, 0, "");
};

func void b_refusetalk() {
    printdebugnpc(pd_zs_frame, "B_RefuseTalk");
    b_smartturntonpc(self, other);
    b_say(self, other, "$NOTNOW");
    c_stoplookat(self);
};

func void zs_talk() {
    printdebugnpc(pd_zs_frame, "ZS_Talk");
    if ((self.aivar[21] == true) && (npc_getdisttonpc(self, other) > perc_dist_dialog)) {
        ai_startstate(self, zs_reacttocall, 0, "");
        return;
    };
    self.aivar[21] = false;
    if (other.aivar[33] == true) {
        printdebugnpc(pd_zs_check, "...SC spricht schon!");
        ai_continueroutine(self);
        return;
    };
    c_zsinit();
    b_setfaceexpression(self, other);
    self.aivar[33] = true;
    other.aivar[33] = true;
    if (npc_getdisttonpc(other, self) < 80) {
        ai_dodge(other);
    };
    if ((npc_gettempattitude(self, other) == att_hostile) && (self.aivar[40] == false)) {
        npc_settarget(self, other);
        b_assessenemy();
    };
    if ((!c_bodystatecontains(self, bs_sit)) || (!npc_canseenpc(self, hero))) {
        ai_standup(self);
        ai_turntonpc(self, hero);
    };
    ai_turntonpc(hero, self);
    if (!hero.aivar[22]) {
        b_guildgreetings();
    };
    b_checkstolenequipment();
    if ((self.npctype == npctype_main) || (self.npctype == npctype_friend)) {
        npc_setknowsplayer(self, other);
    };
    if (!hero.aivar[22]) {
        b_reacttomemory();
    };
    b_assignambientinfos(self);
    self.aivar[7] = true;
    ai_processinfos(self);
};

func int zs_talk_loop() {
    printdebugnpc(pd_zs_loop, "ZS_Talk_Loop");
    if (c_bodystatecontains(self, bs_sit)) {
        if (self.aivar[12] <= 1) {
            ai_lookatnpc(self, other);
        };
    };
    if (infomanager_hasfinished()) {
        printdebugnpc(pd_zs_check, "...InfoManager beendet!");
        self.aivar[33] = false;
        other.aivar[33] = false;
        b_resetfaceexpression(self);
        return loop_end;
    };
    return loop_continue;
};

func void zs_talk_end() {
    printdebugnpc(pd_zs_frame, "ZS_Talk_End");
};

func void zs_turnaway() {
    printdebugnpc(pd_zs_frame, "ZS_TurnAway");
    c_zsinit();
    npc_percenable(self, perc_assessenemy, b_assessenemy);
    npc_percenable(self, perc_assessdamage, zs_reacttodamage);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    b_removeweapon(self);
    ai_turnaway(self, hero);
    b_say(self, NULL, "$LookAway");
};

func int zs_turnaway_loop() {
    printdebugnpc(pd_zs_loop, "ZS_TurnAway_Loop");
    if (npc_getstatetime(self) > hai_time_turnaway) {
        printdebugnpc(pd_zs_check, "...TurnAway-Zeit abgelaufen!");
        return loop_end;
    };
    ai_wait(self, 1.0);
    ai_turnaway(self, hero);
    return loop_continue;
};

func void zs_unconscious() {
    printdebugnpc(pd_zs_frame, "ZS_Unconscious");
    c_zsinit();
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    mdl_applyrandomani(self, "S_WOUNDED", "T_WOUNDED_TRY");
    mdl_applyrandomanifreq(self, "S_WOUNDED", 8.0);
    self.aivar[8] = false;
    if (npc_canseenpc(self, other) && (self.guild < gil_seperator_orc)) {
        printdebugnpc(pd_zs_check, "...NSC kann T*ter sehen!");
        if (!npc_isplayer(self)) {
            b_assessandmemorize(news_defeat, news_source_witness, self, other, self);
        };
    };
    c_stoplookat(self);
    ai_stoppointat(self);
    if (c_bodystatecontains(self, bs_swim)) {
        printdebugnpc(pd_zs_check, "...NSC ertrinkt!");
        ai_startstate(self, zs_dead, 0, "");
        return;
    };
    if ((npc_isplayer(other) || (c_npcishuman(other) && other.aivar[36])) || (c_npcismonster(other) && other.aivar[23])) {
        printdebugnpc(pd_zs_check, "...von SC oder Partymember besiegt!");
        b_unconciousxp();
        self.aivar[19] = true;
    };
    if (npc_isplayer(self)) {
        printdebugnpc(pd_zs_check, "...SC besiegt!");
        other.aivar[20] = true;
    };
};

func int zs_unconscious_loop() {
    printdebugnpc(pd_zs_loop, "ZS_Unconscious_Loop");
    if (npc_getstatetime(self) > hai_time_unconscious) {
        printdebugnpc(pd_zs_check, "...Schleifen-Ende");
        return loop_end;
    };
    ai_wait(self, 1.0);
    return loop_continue;
};

func void zs_unconscious_end() {
    printdebugnpc(pd_zs_frame, "ZS_Unconscious_End");
    if (c_npcisorc(self) && (!npc_isplayer(self))) {
        printdebugnpc(pd_zs_frame, "ZS_Unconscious_End: Me, Orc -> temp-HOSTILE");
        ai_standup(self);
        npc_perceiveall(self);
        if (wld_detectitem(self, item_kat_nf) || wld_detectitem(self, item_kat_ff)) {
            printdebugnpc(pd_zs_check, "ZS_Unconscious_End: Me, Orc -> Waffe aufheben");
            if (npc_canseeitem(self, item)) {
                ai_takeitem(self, item);
            };
        };
        npc_settempattitude(self, att_hostile);
        ai_continueroutine(self);
        return;
    };
    if (!npc_isplayer(self)) {
        b_resettempattitude(self);
    };
    ai_standup(self);
    ai_stoplookat(self);
    if ((npc_hasnews(self, news_defeat, other, self) && (!npc_isinstate(other, zs_unconscious))) && (!npc_isdead(other))) {
        printdebugnpc(pd_zs_check, "...NSC kann den Attackierer noch sehen und der ist bei Bewu*tsein!");
        ai_quicklook(self, other);
        if (c_amistronger(self, other)) {
            b_say(self, other, "$YOULLBESORRYFORTHIS");
        }
        else {
            if (npc_getpermattitude(self, other) != att_hostile) {
                b_say(self, other, "$YESYES");
            };
        };
    };
    b_regaindroppedweapon(self);
    ai_startstate(self, zs_healself, 1, "");
};

func void zs_upset() {
    printdebugnpc(pd_zs_frame, "ZS_Upset");
    c_zsinit();
    npc_percenable(self, perc_assessdamage, zs_reacttodamage);
    npc_percenable(self, perc_assessfightsound, b_assessfightsound);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assesscaster, b_assesscaster);
};

func int zs_upset_loop() {
    printdebugnpc(pd_zs_loop, "ZS_Upset_Loop");
    if (c_npcisdown(other)) {
        printdebugnpc(pd_zs_loop, "...other kampfunf*hig!");
        return loop_end;
    };
    if (!c_otheristoleratedenemy(self, other)) {
        printdebugnpc(pd_zs_loop, "...'other' nicht mehr geduldet!");
        return loop_end;
    };
    if (npc_getdisttonpc(self, other) < hai_dist_assesstoleratedenemy) {
        printdebugnpc(pd_zs_check, "...other noch nah genug!");
        ai_turntonpc(self, other);
        b_sayoverlay(self, other, "$HeyHeyHey");
        ai_playani(self, "T_ANGRY");
        if (npc_getdisttonpc(self, other) < perc_dist_watchfight) {
            printdebugnpc(pd_zs_loop, "... zu nahe an 'other'!");
            ai_turntonpc(self, other);
            ai_dodge(self);
            return loop_continue;
        };
    }
    else {
        return loop_end;
    };
    return loop_continue;
};

func void zs_upset_end() {
    printdebugnpc(pd_zs_frame, "ZS_Upset_End");
};

func void zs_waitforpassage() {
    printdebugnpc(pd_zs_frame, "ZS_WaitForPassage");
    c_zsinit();
    npc_percenable(self, perc_assessdamage, zs_reacttodamage);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assesswarn, b_assesswarn);
    npc_percenable(self, perc_assessfightsound, b_assessfightsound);
    npc_percenable(self, perc_catchthief, zs_catchthief);
    npc_percenable(self, perc_observeintruder, b_observeintruder);
    npc_percenable(self, perc_assesstalk, b_assesstalk);
};

func int zs_waitforpassage_loop() {
    printdebugnpc(pd_zs_loop, "ZS_WaitForPassage_Loop");
    if (npc_iswayblocked(self)) {
    }
    else {
        printdebugnpc(pd_zs_check, "...Weg nicht mehr geblockt!");
        return 1;
    };
    ai_wait(self, 0.5);
};

func void zs_waitforpassage_end() {
    printdebugnpc(pd_zs_frame, "ZS_WaitForPassage_End");
};

func void zs_wakeup() {
    var int portalguild;

    printdebugnpc(pd_zs_frame, "ZS_WakeUp");
    c_zsinit();
    b_setperception(self);
    npc_percdisable(self, perc_observeintruder);
    npc_percenable(self, perc_assessenterroom, b_clearroomenterroom);
    npc_percenable(self, perc_assessusemob, b_clearroomusemob);
    ai_usemob(self, "BEDHIGH", -1);
    ai_usemob(self, "BEDLOW", -1);
    ai_usemob(self, "BED", -1);
    portalguild = wld_getplayerportalguild();
    if (((self.guild == portalguild) || (wld_getguildattitude(self.guild, portalguild) == att_friendly)) && (npc_getattitude(self, other) != att_friendly)) {
        printdebugnpc(pd_zs_check, "...Spieler im Raum des NSCs!");
        b_assessenterroom();
    }
    else {
        ai_turntonpc(self, other);
        b_say(self, other, "$YOUDISTURBEDMYSLUMBER");
        ai_wait(self, 3.0);
        b_observeintruder();
    };
};

func void zs_watchfight() {
    printdebugnpc(pd_zs_frame, "ZS_WatchFight");
    c_zsinit();
    npc_percenable(self, perc_assessdamage, zs_reacttodamage);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assesssurprise, zs_assesssurprise);
    npc_percenable(self, perc_assessenemy, b_assessenemy);
    npc_percenable(self, perc_assessmurder, zs_assessmurder);
    npc_percenable(self, perc_assessdefeat, zs_assessdefeat);
    npc_percenable(self, perc_catchthief, zs_catchthief);
    npc_percenable(self, perc_assesstalk, b_refusetalk);
    npc_percenable(self, perc_assessfightsound, b_cheerfight);
    ai_removeweapon(self);
    if (npc_getdisttonpc(self, victim) > perc_dist_watchfight) {
        printdebugnpc(pd_zs_check, "...Opfer weiter als PERC_DIST_WATCHFIGHT entfernt!");
        ai_startstate(self, zs_gotofight, 0, "");
    };
    if (!npc_wasinstate(self, zs_gotofight)) {
        printdebugnpc(pd_zs_check, "...NSC kommt nicht aus ZS_GotoFight!");
        b_say(self, NULL, "$THERESAFIGHT");
    };
    ai_playani(self, "T_STAND_2_WATCHFIGHT");
};

func int zs_watchfight_loop() {
    var int jubel;
    var int anim;

    printdebugnpc(pd_zs_loop, "ZS_WatchFight_Loop");
    if (npc_isdead(other) || npc_isdead(victim)) {
        printdebugnpc(pd_zs_loop, "...Workaraound f*r nicht ankommende PERC_ASSESSMURDER!");
        return loop_end;
    };
    if (npc_isinstate(other, zs_unconscious) || npc_isinstate(victim, zs_unconscious)) {
        printdebugnpc(pd_zs_loop, "...Workaround f*r nicht ankommende PERC_ASSESSDEFEAT!");
        return loop_end;
    };
    if (npc_isinstate(other, zs_attack) || npc_isinstate(victim, zs_attack)) {
        printdebugnpc(pd_zs_check, "...es wird noch gek*mpft!");
        if ((npc_getdisttonpc(self, other) < perc_dist_intermediat) || (npc_getdisttonpc(self, victim) < perc_dist_intermediat)) {
            printdebugnpc(pd_zs_check, "...Kombatanten sind noch nah genug!");
            jubel = hlp_random(100);
            if ((jubel < 5) && (npc_getstatetime(self) < 3)) {
                printdebugnpc(pd_zs_loop, "ZS_WatchFight_Loop // Fight in 10m range // cheer");
                ai_turntonpc(self, victim);
                b_say(self, NULL, "$HEYHEYHEY");
                return loop_continue;
            };
            anim = hlp_random(100);
            if (anim < 5) {
                ai_turntonpc(self, victim);
                ai_playani(self, "T_WATCHFIGHTRANDOM1");
            }
            else if (anim < 10) {
                ai_turntonpc(self, victim);
                ai_playani(self, "T_WATCHFIGHTRANDOM2");
            }
            else if (anim < 15) {
                ai_turntonpc(self, victim);
                ai_playani(self, "T_WATCHFIGHTRANDOM3");
            }
            else {
                if (anim < 20) {
                    ai_turntonpc(self, victim);
                    ai_playani(self, "T_WATCHFIGHTRANDOM4");
                };
            };
            if (npc_getdisttonpc(self, other) < perc_dist_watchfight) {
                printdebugnpc(pd_zs_loop, "... zu nahe an 'other'!");
                ai_turntonpc(self, other);
                ai_dodge(self);
                return loop_continue;
            }
            else {
                if (npc_getdisttonpc(self, victim) < perc_dist_watchfight) {
                    printdebugnpc(pd_zs_loop, "... zu nahe an 'other'!");
                    ai_turntonpc(self, victim);
                    ai_dodge(self);
                    return loop_continue;
                };
            };
        }
        else {
            printdebugnpc(pd_zs_check, "...Kombatanten sind zu weit weg!");
            ai_turntonpc(self, victim);
            ai_startstate(self, zs_gotofight, 0, "");
            return loop_continue;
        };
    }
    else {
        printdebugnpc(pd_zs_check, "...es wird nicht mehr gek*mpft!");
        return loop_end;
    };
    ai_turntonpc(self, other);
    return loop_continue;
};

func void zs_watchfight_end() {
    printdebugnpc(pd_zs_frame, "ZS_WatchFight_End");
    npc_clearaiqueue(self);
    ai_playani(self, "T_WATCHFIGHT_2_STAND");
    ai_continueroutine(self);
};

func void b_setbabedefaultperceptions() {
    npc_percenable(self, perc_assesstalk, b_babe_refusetalk);
    npc_percenable(self, perc_assessdamage, zs_babe_flee);
    npc_percenable(self, perc_drawweapon, zs_babe_flee);
};

func void b_babe_lookaround() {
    printdebugnpc(pd_zs_frame, "B_Babe_LookAround");
    ai_standup(self);
    ai_playani(self, "T_SEARCH");
};

func void b_babe_refusetalk() {
    printdebugnpc(pd_zs_frame, "B_Babe_RefuseTalk");
    b_say(self, other, "$NOTNOW");
    ai_stoplookat(self);
};

func void b_babe_assessplayer() {
    if ((npc_getdisttonpc(self, other) < perc_dist_flee) && npc_canseenpcfreelos(self, other)) {
        ai_startstate(self, zs_babe_assessplayer, 0, "");
    }
    else {
        return;
    };
};

func void zs_babe_assessplayer() {
    printdebugnpc(pd_zs_frame, "ZS_Babe_AssessPlayer");
    ai_unequiparmor(self);
    b_setbabedefaultperceptions();
    c_lookatnpc(self, other);
};

func int zs_babe_assessplayer_loop() {
    printdebugnpc(pd_zs_loop, "ZS_Babe_AssessPlayer_Loop");
    if (!npc_canseenpc(self, other)) {
        b_smartturntonpc(self, other);
    };
    if (npc_getdisttonpc(self, other) > perc_dist_dialog) {
        c_stoplookat(self);
        ai_continueroutine(self);
    };
    return 0;
};

func void zs_babe_assessplayer_end() {
    printdebugnpc(pd_zs_frame, "ZS_Babe_AssessPlayer_End");
};

func void zs_babe_dance() {
    printdebugnpc(pd_ta_frame, "ZS_Babe_Dance");
    ai_unequiparmor(self);
    b_setbabedefaultperceptions();
    ai_setwalkmode(self, npc_run);
    ai_gotowp(self, self.wp);
    ai_aligntowp(self);
};

func void zs_babe_dance_loop() {
    var int dancestyle;

    printdebugnpc(pd_ta_loop, "ZS_Babe_Dance_Loop");
    dancestyle = hlp_random(9);
    if (dancestyle == 0) {
        ai_playani(self, "S_DANCE1");
    };
    if (dancestyle == 1) {
        ai_playani(self, "S_DANCE2");
    };
    if (dancestyle == 2) {
        ai_playani(self, "S_DANCE3");
    };
    if (dancestyle == 3) {
        ai_playani(self, "S_DANCE4");
    };
    if (dancestyle == 4) {
        ai_playani(self, "S_DANCE5");
    };
    if (dancestyle == 5) {
        ai_playani(self, "S_DANCE6");
    };
    if (dancestyle == 6) {
        ai_playani(self, "S_DANCE7");
    };
    if (dancestyle == 7) {
        ai_playani(self, "S_DANCE8");
    };
    if (dancestyle == 8) {
        ai_playani(self, "S_DANCE9");
    };
    ai_gotowp(self, self.wp);
};

func void zs_babe_dance_end() {
    printdebugnpc(pd_ta_frame, "ZS_Babe_Dance_End");
};

func void zs_babe_fan() {
    printdebugnpc(pd_ta_frame, "ZS_Babe_Fan");
    ai_unequiparmor(self);
    b_setbabedefaultperceptions();
    ai_setwalkmode(self, npc_walk);
    if (npc_hasitems(self, itmiwedel) < 1) {
        createinvitem(self, itmiwedel);
    };
    if (wld_isfpavailable(self, "FAN")) {
        ai_gotofp(self, "FAN");
        ai_aligntofp(self);
        ai_useitemtostate(self, itmiwedel /*4509*/, 1);
        mdl_applyrandomani(self, "s_COOLAIR_S1", "t_COOLAIR_RANDOM_1");
        mdl_applyrandomanifreq(self, "s_COOLAIR_S1", 5.0);
    }
    else {
        ai_gotowp(self, self.wp);
        ai_aligntowp(self);
    };
};

func void zs_babe_fan_loop() {
    printdebugnpc(pd_ta_loop, "ZS_Babe_Fan_Loop");
};

func void zs_babe_fan_end() {
    printdebugnpc(pd_ta_frame, "ZS_Babe_Fan_End");
    ai_useitemtostate(self, itmiwedel /*4509*/, -1);
};

func void zs_babe_flee() {
    b_fullstop(self);
    printdebugnpc(pd_zs_frame, "ZS_Babe_Flee");
    ai_setwalkmode(self, npc_run);
    b_say(self, NULL, "$HELP");
    ai_unequiparmor(self);
    if (!hlp_isvalidnpc(other)) {
        printdebugnpc(pd_zs_check, "Other nicht Valid.");
        ai_continueroutine(self);
    }
    else {
        printdebugnpc(pd_zs_check, "Ich hau lieber ab.");
        npc_settarget(self, other);
        npc_gettarget(self);
        ai_flee(self);
    };
};

func int zs_babe_flee_loop() {
    var int state_time;
    var string state_time_str;

    printdebugnpc(pd_zs_loop, "ZS_Babe_Flee_Loop");
    ai_flee(self);
    state_time = npc_getstatetime(self);
    state_time_str = inttostring(state_time);
    if (npc_getstatetime(self) >= 5) {
        ai_continueroutine(self);
    };
};

func void zs_babe_flee_end() {
    printdebugnpc(pd_zs_frame, "ZS_Babe_Flee_End");
};

func void zs_babe_sitaround() {
    printdebugnpc(pd_ta_frame, "ZS_BabeSitAround");
    ai_unequiparmor(self);
    b_setbabedefaultperceptions();
    ai_setwalkmode(self, npc_walk);
    if (!c_bodystatecontains(self, bs_sit)) {
        if (hlp_strcmp(npc_getnearestwp(self), self.wp) == 0) {
            ai_gotowp(self, self.wp);
        };
        ai_usemob(self, "CHAIR", 1);
    };
};

func void zs_babe_sitaround_loop() {
    printdebugnpc(pd_ta_loop, "ZS_BabeSitAround_Loop");
    ai_wait(self, 1.0);
};

func void zs_babe_sitaround_end() {
    printdebugnpc(pd_ta_frame, "ZS_BabeSitAround_End");
    ai_usemob(self, "CHAIR", -1);
};

func void zs_babe_sleep() {
    printdebugnpc(pd_ta_frame, "ZS_BabeSleep");
    ai_unequiparmor(self);
    b_setbabedefaultperceptions();
    ai_setwalkmode(self, npc_walk);
    if (!c_bodystatecontains(self, bs_lie)) {
        if (hlp_strcmp(npc_getnearestwp(self), self.wp) == 0) {
            ai_gotowp(self, self.wp);
        };
        ai_usemob(self, "BABEBED", 1);
    };
};

func void zs_babe_sleep_loop() {
    printdebugnpc(pd_ta_loop, "ZS_BabeSleep_Loop");
    ai_wait(self, 1.0);
};

func void zs_babe_sleep_end() {
    printdebugnpc(pd_ta_frame, "ZS_BabeSleep_End");
    ai_usemob(self, "BABEBED", -1);
};

func void zs_babe_sweep() {
    printdebugnpc(pd_ta_frame, "ZS_Babe_Sweep");
    ai_unequiparmor(self);
    b_setbabedefaultperceptions();
    ai_setwalkmode(self, npc_walk);
    if (npc_hasitems(self, itmibrush) < 1) {
        createinvitem(self, itmibrush);
    };
    if (!npc_isonfp(self, "SWEEP")) {
        ai_gotowp(self, self.wp);
    };
    if (wld_isfpavailable(self, "SWEEP")) {
        ai_gotofp(self, "SWEEP");
        ai_useitemtostate(self, itmibrush /*4510*/, 1);
    };
};

func void zs_babe_sweep_loop() {
    printdebugnpc(pd_ta_loop, "ZS_Babe_Sweep_Loop");
    ai_wait(self, 1.0);
};

func void zs_babe_sweep_end() {
    printdebugnpc(pd_ta_frame, "ZS_Babe_Sweep_End");
    ai_useitemtostate(self, itmibrush /*4510*/, -1);
};

func void zs_bathing_babe() {
    printdebug("Enter ZS_Bathing_Babe () ");
    b_setbabedefaultperceptions();
    ai_setwalkmode(self, npc_walk);
    printdebug("Suche Badewanne !");
    if (wld_ismobavailable(self, "BATHTUB")) {
        printdebug("Wanne gefunden! Gehe baden");
        createinvitem(self, bab_armor_nude);
        ai_equipbestarmor(self);
        ai_usemob(self, "BATHTUB", 1);
        mdl_applyrandomani(self, "S_BATHTUB_S1", "T_BATHTUB_RANDOM1");
        mdl_applyrandomani(self, "S_BATHTUB_S1", "T_BATHTUB_RANDOM2");
        mdl_applyrandomanifreq(self, "S_BATHTUB_S1", 3.0);
    }
    else {
        printdebug("No BATHTUB-Mobsi found !");
    };
};

func void zs_bathing_babe_loop() {
};

func void zs_bathing_babe_end() {
    printdebug("Enter ZS_Bathing_Babe_End() ");
    ai_usemob(self, "BATHTUB", -1);
    ai_unequiparmor(self);
    npc_removeinvitem(self, bab_armor_nude /*4156*/);
};

func void zs_charlotte_dance() {
    printdebugnpc(pd_ta_frame, "ZS_Charlotte_Dance");
    ai_setwalkmode(self, npc_run);
    ai_gotowp(self, self.wp);
    ai_aligntowp(self);
};

func void zs_charlotte_dance_loop() {
    var int dancestyle;

    printdebugnpc(pd_ta_loop, "ZS_Charlotte_Dance_Loop");
    dancestyle = hlp_random(9);
    if (dancestyle == 0) {
        ai_playani(self, "S_DANCE1");
    };
    if (dancestyle == 1) {
        ai_playani(self, "S_DANCE2");
    };
    if (dancestyle == 2) {
        ai_playani(self, "S_DANCE3");
    };
    if (dancestyle == 3) {
        ai_playani(self, "S_DANCE4");
    };
    if (dancestyle == 4) {
        ai_playani(self, "S_DANCE5");
    };
    if (dancestyle == 5) {
        ai_playani(self, "S_DANCE6");
    };
    if (dancestyle == 6) {
        ai_playani(self, "S_DANCE7");
    };
    if (dancestyle == 7) {
        ai_playani(self, "S_DANCE8");
    };
    if (dancestyle == 8) {
        ai_playani(self, "S_DANCE9");
    };
    ai_gotowp(self, self.wp);
};

func void zs_charlotte_dance_end() {
    printdebugnpc(pd_ta_frame, "ZS_Charlotte_Dance_End");
};

prototype testbabe(c_npc) {
    name = "Äåâèöà";
    guild = gil_none;
    level = 1;
    attribute[atr_strength] /*4*/ = 5;
    attribute[atr_dexterity] /*5*/ = 5;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 5;
    attribute[atr_hitpoints] /*0*/ = 5;
    protection[prot_edge] /*2*/ = 5;
    protection[prot_blunt] /*1*/ = 5;
    protection[prot_point] /*6*/ = 5;
    protection[prot_fire] /*3*/ = 5;
    protection[prot_magic] /*5*/ = 5;
    senses = sense_hear | sense_see;
    senses_range = 4000;
};

instance ababetestmodell(testbabe) {
    name = "ATestmodell";
    guild = gil_none;
    level = 10;
    voice = 11;
    id = b_assignambientinfos_mine_grd_7.slf /*3001*/;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 7;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 18;
    attribute[atr_hitpoints] /*0*/ = 18;
    mdl_setvisual(ababetestmodell, "BABE.MDS");
    mdl_setvisualbody(ababetestmodell, "Bab_body_Naked0", default, default, "Bab_Head_Hair1", default, default, -1);
    fight_tactic = fai_human_coward;
    npc_setattitude(ababetestmodell, att_hostile);
    daily_routine = a_ff;
};

func void a_ff() {
};

func int spell_logic_armyofdarkness(var int manainvested) {
    printdebugnpc(pd_magic, "Spell_Logic_ArmyOfDarkness");
    if (manainvested >= spl_sendcast_armyofdarkness) {
        if (npc_isplayer(self)) {
            wld_spawnnpcrange(self, summonedbypc_skeleton /*6831*/, 6, 800.0);
            wld_spawnnpcrange(self, summonedbypc_skeletonwarrior /*6833*/, 3, 800.0);
        }
        else {
            wld_spawnnpcrange(self, summonedbynpc_skeleton /*6832*/, 6, 800.0);
            wld_spawnnpcrange(self, summonedbynpc_skeletonwarrior /*6834*/, 3, 800.0);
        };
        return spl_sendcast;
    }
    else {
        return spl_nextlevel;
    };
};

func int spell_logic_berzerk(var int manainvested) {
    printdebugnpc(pd_magic, "Spell_Logic_Berzerk");
    if ((((((other.guild == gil_slf) || (other.guild == gil_troll)) || (other.guild == gil_demon)) || (other.guild == gil_golem)) || (other.guild == gil_skeleton)) || (other.guild == gil_zombie)) {
        printdebugnpc(pd_magic, "...Ziel immun!");
        return spl_sendstop;
    }
    else if (manainvested >= spl_sendcast_berzerk) {
        npc_sendsingleperc(self, other, perc_assessmagic);
        return spl_sendcast;
    }
    else {
        return spl_receiveinvest;
    };
};

func int spell_logic_breathofdeath(var int manainvested) {
    printdebugnpc(pd_magic, "Spell_Logic_BreathOfDeath");
    if (manainvested >= spl_sendcast_breathofdeath) {
        return spl_sendcast;
    };
    return spl_receiveinvest;
};

func int spell_logic_chainlightning(var int manainvested) {
    printdebugnpc(pd_magic, "Spell_Logic_ChainLightning");
    return spl_nextlevel;
};

func int spell_logic_charm(var int manainvested) {
    printdebugnpc(pd_magic, "Spell_Logic_Charm");
    if (manainvested >= spl_sendcast_charm) {
        npc_sendsingleperc(self, other, perc_assessmagic);
        return spl_sendcast;
    };
    return spl_receiveinvest;
};

func int spell_logic_control(var int manainvested) {
    printdebugnpc(pd_magic, "Spell_Logic_Control");
    if (!npc_isinstate(other, zs_controlled)) {
        printdebugnpc(pd_magic, "npc is valid...");
        printdebugnpc(pd_magic, "manainvested 0...starting ZS_PsiDefense on npc");
        if (!npc_isinstate(other, zs_psidefense)) {
            b_fullstop(other);
            ai_startstate(other, zs_psidefense, 1, "");
        };
        if (other.flags != npc_flag_immortal) {
            printdebugnpc(pd_magic, "npc is not immortal, sub mana");
            if (manainvested >= (other.level * 4)) {
                printdebugnpc(pd_magic, "controlled success, starting states");
                ai_startstate(self, zs_pc_controlling, 0, "");
                npc_setactivespellinfo(self, 1);
                return spl_sendcast;
            };
            return spl_nextlevel;
        }
        else {
            printdebugnpc(pd_magic, "npc is immortal");
            return spl_nextlevel;
        };
        return spl_nextlevel;
    }
    else {
        printdebugnpc(pd_magic, "npc is not valid...");
        return spl_sendstop;
    };
    return spl_dontinvest;
};

func int spell_logic_destroyundead(var int manainvested) {
    printdebugnpc(pd_magic, "Spell_Logic_DestroyUndead");
    if (manainvested >= spl_sendcast_destroyundead) {
        return spl_sendcast;
    };
    return spl_receiveinvest;
};

func int spell_logic_fear(var int manainvested) {
    printdebugnpc(pd_magic, "Spell_Logic_Fear");
    if (manainvested >= spl_sendcast_fear) {
        return spl_sendcast;
    };
    return spl_nextlevel;
};

func int spell_logic_fireball(var int manainvested) {
    printdebugnpc(pd_magic, "Spell_Logic_Fireball");
    if (((manainvested == ((spl_sendcast_fireball * 3) / 10)) || (manainvested == ((spl_sendcast_fireball * 5) / 10))) || (manainvested == ((spl_sendcast_fireball * 8) / 10))) {
        return spl_nextlevel;
    };
    if (manainvested >= spl_sendcast_fireball) {
        return spl_sendcast;
    };
    return spl_receiveinvest;
};

func int spell_logic_firebolt(var int manainvested) {
    printdebugnpc(pd_magic, "Spell_Logic_Firebolt");
    if (manainvested >= spl_sendcast_firebolt) {
        return spl_sendcast;
    };
    return spl_receiveinvest;
};

func int spell_logic_firerain(var int manainvested) {
    printdebugnpc(pd_magic, "Spell_Logic_Firerain");
    if (manainvested == 0) {
        return spl_nextlevel;
    };
    if (manainvested >= spl_sendcast_firerain) {
        return spl_sendcast;
    };
    return spl_receiveinvest;
};

func int spell_logic_firestorm(var int manainvested) {
    printdebugnpc(pd_magic, "Spell_Logic_Firestorm");
    if (((manainvested == ((spl_sendcast_firestorm * 3) / 10)) || (manainvested == ((spl_sendcast_firestorm * 5) / 10))) || (manainvested == ((spl_sendcast_firestorm * 8) / 10))) {
        return spl_nextlevel;
    };
    if (manainvested >= spl_sendcast_firestorm) {
        return spl_sendcast;
    };
    return spl_receiveinvest;
};

func int spell_logic_heal(var int manainvested) {
    printdebugnpc(pd_magic, "Spell_Logic_Heal");
    if (self.attribute[atr_hitpoints] /*0*/ < self.attribute[atr_hitpoints_max] /*1*/) {
        npc_changeattribute(self, atr_hitpoints, +spl_healing_hp_per_mp);
        return spl_nextlevel;
    };
    return spl_sendstop;
};

func int spell_logic_icecube(var int manainvested) {
    printdebugnpc(pd_magic, "Spell_Logic_IceCube");
    if (manainvested >= spl_sendcast_icecube) {
        return spl_sendcast;
    };
    return spl_nextlevel;
};

func int spell_logic_icewave(var int manainvested) {
    printdebugnpc(pd_magic, "Spell_Logic_IceWave");
    if (manainvested >= spl_sendcast_icewave) {
        return spl_sendcast;
    };
    return spl_nextlevel;
};

func int spell_logic_light(var int manainvested) {
    printdebugnpc(pd_magic, "Spell_Logic_Light");
    if (manainvested >= spl_sendcast_light) {
        return spl_sendcast;
    };
    return spl_receiveinvest;
};

func int spell_logic_massdeath(var int manainvested) {
    printdebugnpc(pd_magic, "Spell_Logic_Massdeath");
    if (manainvested == 0) {
        return spl_nextlevel;
    };
    if (manainvested >= spl_sendcast_massdeath) {
        return spl_sendcast;
    };
    return spl_receiveinvest;
};

func int spell_logic_new1(var int manainvested) {
    printdebugnpc(pd_magic, "Spell_Logic_Destroyer");
    if (manainvested >= spl_sendcast_new1) {
        return spl_sendcast;
    };
    return spl_receiveinvest;
};

func int spell_logic_pyrokinesis(var int manainvested) {
    printdebugnpc(pd_magic, "Spell_Logic_Pyrokinesis");
    if ((((((npc_isdead(other) || npc_isinstate(other, zs_unconscious)) || (other.guild == gil_slf)) || (other.guild == gil_demon)) || (other.guild == gil_golem)) || (other.guild == gil_skeleton)) || (other.guild == gil_zombie)) {
        return spl_sendstop;
    };
    return spl_nextlevel;
};

func int spell_logic_shrink(var int manainvested) {
    printdebugnpc(pd_magic, "Spell_Logic_Shrink");
    if (c_npcismonster(other) && (other.aivar[19] == 0)) {
        printdebugnpc(pd_magic, "...Ziel ist Monster!");
        if (manainvested >= spl_sendcast_shrink) {
            npc_sendsingleperc(self, other, perc_assessmagic);
            return spl_sendcast;
        };
        return spl_nextlevel;
    }
    else {
        printdebugnpc(pd_magic, "...Ziel ist KEIN Monster!");
        return spl_sendstop;
    };
};

func int spell_logic_sleep(var int manainvested) {
    printdebugnpc(pd_magic, "Spell_Logic_Sleep");
    if (c_npcishuman(other)) {
        if (manainvested >= spl_sendcast_sleep) {
            ai_startstate(other, zs_magicsleep, 0, "");
            return spl_sendcast;
        };
        return spl_receiveinvest;
    }
    else {
        return spl_dontinvest;
    };
};

func int spell_logic_stormfist(var int manainvested) {
    printdebugnpc(pd_magic, "Spell_Logic_Stormfist");
    if (((manainvested == ((spl_sendcast_stormfist * 3) / 10)) || (manainvested == ((spl_sendcast_stormfist * 5) / 10))) || (manainvested == ((spl_sendcast_stormfist * 8) / 10))) {
        return spl_nextlevel;
    };
    if (manainvested >= spl_sendcast_stormfist) {
        return spl_sendcast;
    };
    return spl_receiveinvest;
};

func int spell_logic_summondemon(var int manainvested) {
    printdebugnpc(pd_magic, "Spell_Logic_SummonDemon");
    if (manainvested >= spl_sendcast_summondemon) {
        if (npc_isplayer(self)) {
            printdebugnpc(pd_magic, "...beschw*rt von Spieler");
            wld_spawnnpcrange(self, summonedbypc_demon /*6737*/, 1, 1000.0);
        }
        else {
            printdebugnpc(pd_magic, "...beschw*rt von NSC");
            wld_spawnnpcrange(self, summonedbynpc_demon /*6738*/, 1, 1000.0);
        };
        return spl_sendcast;
    }
    else {
        return spl_nextlevel;
    };
};

func int spell_logic_summongolem(var int manainvested) {
    printdebugnpc(pd_magic, "Spell_Logic_SummonGolem");
    if (manainvested >= spl_sendcast_summongolem) {
        if (npc_isplayer(self)) {
            wld_spawnnpcrange(self, summonedbypc_stonegolem /*6756*/, 1, 500.0);
        }
        else {
            wld_spawnnpcrange(self, summonedbynpc_stonegolem /*6757*/, 1, 500.0);
        };
        return spl_sendcast;
    }
    else {
        return spl_nextlevel;
    };
};

func int spell_logic_summonskeleton(var int manainvested) {
    printdebugnpc(pd_magic, "Spell_Logic_SummonSkeleton");
    if (manainvested >= spl_sendcast_summonskeleton) {
        if (npc_isplayer(self)) {
            wld_spawnnpcrange(self, summonedbypc_skeleton /*6831*/, 2, 500.0);
            wld_spawnnpcrange(self, summonedbypc_skeletonwarrior /*6833*/, 1, 500.0);
        }
        else {
            wld_spawnnpcrange(self, summonedbynpc_skeleton /*6832*/, 2, 500.0);
            wld_spawnnpcrange(self, summonedbynpc_skeletonwarrior /*6834*/, 1, 500.0);
        };
        return spl_sendcast;
    }
    else {
        return spl_nextlevel;
    };
};

func int spell_logic_telekinesis(var int manainvested) {
    printdebugnpc(pd_magic, "Spell_Logic_Telekinesis");
    return spl_nextlevel;
};

func int spell_logic_teleport1(var int manainvested) {
    printdebugnpc(pd_magic, "Spell_Logic_Teleport1");
    if (manainvested >= spl_sendcast_teleport) {
        ai_teleport(self, "OCC_CHAPEL_UPSTAIRS");
        ai_playani(self, "T_HEASHOOT_2_STAND");
        return spl_sendcast;
    };
    return spl_nextlevel;
};

func int spell_logic_teleport2(var int manainvested) {
    printdebugnpc(pd_magic, "Spell_Logic_Teleport2");
    if (manainvested >= spl_sendcast_teleport) {
        ai_teleport(self, "NC_KDW_CAVE_CENTER");
        ai_playani(self, "T_HEASHOOT_2_STAND");
        return spl_sendcast;
    };
    return spl_nextlevel;
};

func int spell_logic_teleport3(var int manainvested) {
    printdebugnpc(pd_magic, "Spell_Logic_Teleport3");
    if (manainvested >= spl_sendcast_teleport) {
        ai_teleport(self, "DT_E2_06");
        ai_playani(self, "T_HEASHOOT_2_STAND");
        return spl_sendcast;
    };
    return spl_nextlevel;
};

func int spell_logic_teleport4(var int manainvested) {
    printdebugnpc(pd_magic, "Spell_Logic_Teleport4");
    if (kapitel < 5) {
        if (npc_getdisttowp(self, "GRYD_060") > 600) {
            return spl_dontinvest;
        };
        if (manainvested >= spl_sendcast_teleport) {
            ai_teleport(self, "GRYD_072");
            ai_playani(self, "T_HEASHOOT_2_STAND");
            return spl_sendcast;
        };
        return spl_nextlevel;
    }
    else {
        if (manainvested >= spl_sendcast_teleport) {
            ai_teleport(self, "OW_SLEEPERENTRANCE");
            ai_playani(self, "T_HEASHOOT_2_STAND");
            return spl_sendcast;
        };
        return spl_nextlevel;
    };
};

func int spell_logic_teleport5(var int manainvested) {
    printdebugnpc(pd_magic, "Spell_Logic_Teleport5");
    if (manainvested >= spl_sendcast_teleport) {
        ai_teleport(self, "PSI_TEMPLE_COURT_GURU");
        ai_playani(self, "T_HEASHOOT_2_STAND");
        return spl_sendcast;
    };
    return spl_nextlevel;
};

func int spell_logic_thunderball(var int manainvested) {
    printdebugnpc(pd_magic, "Spell_Logic_Thunderball");
    if (((manainvested == ((spl_sendcast_thunderball * 3) / 10)) || (manainvested == ((spl_sendcast_thunderball * 5) / 10))) || (manainvested == ((spl_sendcast_thunderball * 8) / 10))) {
        return spl_nextlevel;
    };
    if (manainvested >= spl_sendcast_thunderball) {
        return spl_sendcast;
    };
    return spl_receiveinvest;
};

func int spell_logic_thunderbolt(var int manainvested) {
    printdebugnpc(pd_magic, "Spell_Logic_Thunderbolt");
    if (manainvested >= spl_sendcast_thunderbolt) {
        return spl_sendcast;
    };
    return spl_receiveinvest;
};

func int spell_logic_trf_bloodfly(var int manainvested) {
    printdebugnpc(pd_magic, "Spell_Logic_Transform");
    if (manainvested >= spl_sendcast_trf_bloodfly) {
        npc_setactivespellinfo(self, bloodfly /*6729*/);
        npc_sendpassiveperc(self, perc_assessfighter, self, other);
        return spl_sendcast;
    };
    return spl_nextlevel;
};

func int spell_logic_trf_crawler(var int manainvested) {
    printdebugnpc(pd_magic, "Spell_Logic_Transform");
    if (manainvested >= spl_sendcast_trf_crawler) {
        npc_setactivespellinfo(self, minecrawler /*6773*/);
        return spl_sendcast;
    };
    return spl_nextlevel;
};

func int spell_logic_trf_lurker(var int manainvested) {
    printdebugnpc(pd_magic, "Spell_Logic_Transform");
    if (manainvested >= spl_sendcast_trf_lurker) {
        npc_setactivespellinfo(self, lurker /*6766*/);
        return spl_sendcast;
    };
    return spl_nextlevel;
};

func int spell_logic_trf_meatbug(var int manainvested) {
    printdebugnpc(pd_magic, "Spell_Logic_Transform");
    if (manainvested >= spl_sendcast_trf_meatbug) {
        npc_setactivespellinfo(self, meatbug /*6770*/);
        return spl_sendcast;
    };
    return spl_nextlevel;
};

func int spell_logic_trf_molerat(var int manainvested) {
    printdebugnpc(pd_magic, "Spell_Logic_Transform");
    if (manainvested >= spl_sendcast_trf_molerat) {
        npc_setactivespellinfo(self, molerat /*6783*/);
        return spl_sendcast;
    };
    return spl_nextlevel;
};

func int spell_logic_trf_orcdog(var int manainvested) {
    printdebugnpc(pd_magic, "Spell_Logic_Transform");
    if (manainvested >= spl_sendcast_trf_orcdog) {
        npc_setactivespellinfo(self, orcdog /*6790*/);
        return spl_sendcast;
    };
    return spl_nextlevel;
};

func int spell_logic_trf_scavenger(var int manainvested) {
    printdebugnpc(pd_magic, "Spell_Logic_Transform");
    if (manainvested >= spl_sendcast_trf_scavenger) {
        npc_setactivespellinfo(self, scavenger /*6815*/);
        return spl_sendcast;
    };
    return spl_nextlevel;
};

func int spell_logic_trf_shadowbeast(var int manainvested) {
    printdebugnpc(pd_magic, "Spell_Logic_Transform");
    if (manainvested >= spl_sendcast_trf_shadowbeast) {
        npc_setactivespellinfo(self, shadowbeast /*6819*/);
        return spl_sendcast;
    };
    return spl_nextlevel;
};

func int spell_logic_trf_snapper(var int manainvested) {
    printdebugnpc(pd_magic, "Spell_Logic_Transform");
    if (manainvested >= spl_sendcast_trf_snapper) {
        npc_setactivespellinfo(self, snapper /*6841*/);
        return spl_sendcast;
    };
    return spl_nextlevel;
};

func int spell_logic_trf_waran(var int manainvested) {
    printdebugnpc(pd_magic, "Spell_Logic_Transform");
    if (manainvested >= spl_sendcast_trf_waran) {
        npc_setactivespellinfo(self, waran /*6859*/);
        return spl_sendcast;
    };
    return spl_nextlevel;
};

func int spell_logic_trf_wolf(var int manainvested) {
    printdebugnpc(pd_magic, "Spell_Logic_Transform");
    if (manainvested >= spl_sendcast_trf_wolf) {
        npc_setactivespellinfo(self, wolf /*6862*/);
        return spl_sendcast;
    };
    return spl_nextlevel;
};

func int spell_logic_windfist(var int manainvested) {
    printdebugnpc(pd_magic, "Spell_Logic_Windfist");
    if (((manainvested == ((spl_sendcast_windfist * 3) / 10)) || (manainvested == ((spl_sendcast_windfist * 5) / 10))) || (manainvested == ((spl_sendcast_windfist * 8) / 10))) {
        return spl_nextlevel;
    };
    if (manainvested >= spl_sendcast_windfist) {
        return spl_sendcast;
    };
    return spl_receiveinvest;
};

const int spell_good = 0;

const int spell_neutral = 1;

const int spell_bad = 2;

const int spl_dontinvest = 0;

const int spl_receiveinvest = 1;

const int spl_sendcast = 2;

const int spl_sendstop = 3;

const int spl_nextlevel = 4;

const int spl_sendcast_light = 1;

const int spl_sendcast_firebolt = 1;

const int spl_sendcast_fireball = 5;

const int spl_sendcast_firestorm = 10;

const int spl_sendcast_firerain = 15;

const int spl_sendcast_teleport = 5;

const int spl_sendcast_trf_meatbug = 5;

const int spl_sendcast_trf_molerat = 5;

const int spl_sendcast_trf_scavenger = 5;

const int spl_sendcast_trf_bloodfly = 10;

const int spl_sendcast_trf_wolf = 10;

const int spl_sendcast_trf_lurker = 15;

const int spl_sendcast_trf_waran = 15;

const int spl_sendcast_trf_orcdog = 20;

const int spl_sendcast_trf_crawler = 20;

const int spl_sendcast_trf_snapper = 25;

const int spl_sendcast_trf_shadowbeast = 25;

const int spl_sendcast_thunderbolt = 1;

const int spl_sendcast_thunderball = 5;

const int spl_sendcast_icecube = 3;

const int spl_sendcast_icewave = 8;

const int spl_sendcast_summondemon = 20;

const int spl_sendcast_summonskeleton = 10;

const int spl_sendcast_summongolem = 15;

const int spl_sendcast_armyofdarkness = 25;

const int spl_sendcast_massdeath = 10;

const int spl_sendcast_destroyundead = 5;

const int spl_sendcast_windfist = 3;

const int spl_sendcast_stormfist = 8;

const int spl_sendcast_charm = 5;

const int spl_sendcast_sleep = 3;

const int spl_sendcast_fear = 5;

const int spl_sendcast_berzerk = 10;

const int spl_sendcast_breathofdeath = 5;

const int spl_sendcast_new1 = 5;

const int spl_sendcast_shrink = 5;

const int spl_damage_firebolt = 30;

const int spl_damage_fireball = 30;

const int spl_damage_firestorm = 50;

const int spl_damage_firerain = 100;

const int spl_damage_thunderbolt = 20;

const int spl_damage_thunderball = 20;

const int spl_damage_massdeath = 200;

const int spl_damage_breathofdeath = 100;

const int spl_damage_destroyundead = 9999;

const int spl_damage_windfist = 10;

const int spl_damage_stormfist = 15;

const int spl_freeze_damage = 50;

const int spl_zapped_damage_per_sec = 25;

const int spl_pyro_damage_per_sec = 20;

const int spl_healing_hp_per_mp = 10;

const int spl_time_shortzapped = 2;

const int spl_time_freeze = 9;

const int spl_time_sleep = 30;

const int spl_time_berzerk = 30;

const int spl_range_iceattack = 300;

const int spl_range_windfist = 1200;

const int spl_range_stormfist = 1200;

const int spl_range_sleep = 1000;

const int spl_range_chainlightning = 1000;

const string spellfxinstancenames[59] = {
    "Light", "Fireball", "Transform", "Fear", "Heal", "Lightning", "Demon", "Skeleton", 
    "Forget", "WindFist", "Telekinesis", "Charm", "Sleep", "Pyrokinesis", "MassDeath", "Control", 
    "DestroyUndead", "Firebolt", "Firestorm", "Firerain", "Speed", "Teleport", "Teleport", "Teleport", 
    "Teleport", "Teleport", "Transform", "Transform", "Transform", "Transform", "Transform", "Transform", 
    "Transform", "Transform", "Transform", "Transform", "Transform", "Transform", "Transform", "Transform", 
    "Chainlightning", "Thunderbolt", "Thunderball", "Icecube", "Icewave", "Golem", "ArmyOfDarkness", "Stormfist", 
    "Telekinesis2", "BreathOfDeath", "Shrink", "Undress", "Dance", "Berzerk", "BreathOfDeath", "New2", 
    "New3", "New4", "New5"
};

const string spellfxaniletters[59] = {
    "SLE", "FIB", "TRF", "FEA", "HEA", "XXX", "SUM", "SUM", 
    "XXX", "WND", "TEL", "SLE", "SLE", "PYR", "FEA", "CON", 
    "FIB", "FBT", "FIB", "FEA", "XXX", "HEA", "HEA", "HEA", 
    "HEA", "HEA", "TRF", "TRF", "TRF", "TRF", "TRF", "TRF", 
    "TRF", "TRF", "TRF", "TRF", "TRF", "TRF", "TRF", "TRF", 
    "LIN", "FBT", "FIB", "FRZ", "FEA", "SUM", "SUM", "WND", 
    "XXX", "FIB", "SLE", "XXX", "XXX", "SLE", "FIB", "NE2", 
    "NE3", "NE4", "NE5"
};

instance spell_light(c_spell_proto) {
    time_per_mana = 500.0;
    spelltype = spell_neutral;
    targetcollectalgo = target_collect_none;
    targetcollectrange = 0;
    targetcollectazi = 0;
    targetcollectelev = 0;
};

instance spell_firebolt(c_spell_proto) {
    time_per_mana = 500.0;
    damage_per_level = spl_damage_firebolt;
    spelltype = spell_bad;
    damagetype = dam_fire;
    targetcollectalgo = target_collect_focus_fallback_none;
    targetcollecttype = target_type_npcs;
};

instance spell_fireball(c_spell_proto) {
    time_per_mana = 750.0;
    damage_per_level = spl_damage_fireball;
    spelltype = spell_bad;
    damagetype = dam_fire;
    ismultieffect = 0;
    targetcollectalgo = target_collect_focus_fallback_none;
    targetcollecttype = target_type_npcs;
};

instance spell_firestorm(c_spell_proto) {
    time_per_mana = 250.0;
    damage_per_level = spl_damage_firestorm;
    spelltype = spell_bad;
    damagetype = dam_fire;
    targetcollectalgo = target_collect_focus_fallback_none;
    targetcollecttype = target_type_npcs;
};

instance spell_firerain(c_spell_proto) {
    time_per_mana = 250.0;
    damage_per_level = spl_damage_firerain;
    spelltype = spell_bad;
    damagetype = dam_fire;
    targetcollectalgo = target_collect_all_fallback_none;
    targetcollectrange = 1000;
    targetcollectazi = 360;
    targetcollectelev = 60;
};

instance spell_teleport(c_spell_proto) {
    time_per_mana = 750.0;
    spelltype = spell_neutral;
    targetcollectalgo = target_collect_caster;
    canturnduringinvest = 0;
    targetcollectrange = 0;
    targetcollectazi = 0;
    targetcollectelev = 0;
};

instance spell_heal(c_spell_proto) {
    time_per_mana = 250.0;
    spelltype = spell_neutral;
    targetcollectalgo = target_collect_caster;
    canturnduringinvest = 0;
    targetcollectrange = 0;
    targetcollectazi = 0;
    targetcollectelev = 0;
};

instance spell_transform(c_spell_proto) {
    time_per_mana = 250.0;
    spelltype = spell_bad;
    targetcollectalgo = target_collect_none;
    canturnduringinvest = 0;
    targetcollectrange = 0;
    targetcollectazi = 0;
    targetcollectelev = 0;
};

instance spell_chainlightning(c_spell_proto) {
    time_per_mana = 750.0;
    spelltype = spell_bad;
    damage_per_level = 0;
    damagetype = dam_magic;
    ismultieffect = 1;
    targetcollectalgo = target_collect_all;
    targetcollectrange = 1500;
    targetcollecttype = target_type_npcs;
};

instance spell_thunderbolt(c_spell_proto) {
    time_per_mana = 100.0;
    spelltype = spell_bad;
    damage_per_level = spl_damage_thunderbolt;
    damagetype = dam_magic;
    targetcollectalgo = target_collect_focus_fallback_none;
    targetcollecttype = target_type_npcs;
};

instance spell_thunderball(c_spell_proto) {
    time_per_mana = 250.0;
    spelltype = spell_bad;
    damage_per_level = spl_damage_thunderball;
    damagetype = dam_magic;
    targetcollectalgo = target_collect_focus_fallback_none;
    targetcollecttype = target_type_npcs;
};

instance spell_icecube(c_spell_proto) {
    time_per_mana = 250.0;
    spelltype = spell_bad;
    damage_per_level = 0;
    damagetype = dam_magic;
    targetcollectalgo = target_collect_focus_fallback_none;
    targetcollectrange = 1500;
    targetcollecttype = target_type_npcs;
};

instance spell_icewave(c_spell_proto) {
    time_per_mana = 125.0;
    spelltype = spell_bad;
    damage_per_level = 0;
    damagetype = dam_magic;
    targetcollectalgo = target_collect_all_fallback_none;
    targetcollectrange = 1000;
    targetcollectazi = 360;
    targetcollectelev = 60;
};

instance spell_demon(c_spell_proto) {
    time_per_mana = 500.0;
    spelltype = spell_bad;
    targetcollectalgo = target_collect_none;
    targetcollectrange = 0;
    targetcollectazi = 0;
    targetcollectelev = 0;
};

instance spell_skeleton(c_spell_proto) {
    time_per_mana = 500.0;
    spelltype = spell_bad;
    targetcollectalgo = target_collect_none;
    targetcollectrange = 0;
    targetcollectazi = 0;
    targetcollectelev = 0;
};

instance spell_golem(c_spell_proto) {
    time_per_mana = 500.0;
    spelltype = spell_bad;
    targetcollectalgo = target_collect_none;
    targetcollectrange = 0;
    targetcollectazi = 0;
    targetcollectelev = 0;
};

instance spell_armyofdarkness(c_spell_proto) {
    time_per_mana = 500.0;
    spelltype = spell_bad;
    targetcollectalgo = target_collect_none;
    targetcollectrange = 0;
    targetcollectazi = 0;
    targetcollectelev = 0;
};

instance spell_massdeath(c_spell_proto) {
    time_per_mana = 250.0;
    damage_per_level = spl_damage_massdeath;
    spelltype = spell_bad;
    damagetype = dam_magic;
    targetcollectalgo = target_collect_all_fallback_none;
    targetcollectrange = 1000;
    targetcollectazi = 360;
    targetcollectelev = 60;
};

instance spell_destroyundead(c_spell_proto) {
    time_per_mana = 250.0;
    damage_per_level = spl_damage_destroyundead;
    spelltype = spell_neutral;
    damagetype = dam_magic;
    targetcollectalgo = target_collect_focus_fallback_none;
    targetcollectrange = 1500;
    targetcollecttype = target_type_undead;
};

instance spell_windfist(c_spell_proto) {
    time_per_mana = 250.0;
    damage_per_level = spl_damage_windfist;
    spelltype = spell_bad;
    damagetype = dam_fly;
    targetcollectalgo = target_collect_focus_fallback_none;
    targetcollectrange = spl_range_windfist;
    targetcollecttype = target_type_npcs;
};

instance spell_stormfist(c_spell_proto) {
    time_per_mana = 125.0;
    damage_per_level = spl_damage_stormfist;
    spelltype = spell_bad;
    damagetype = dam_fly;
    targetcollectalgo = target_collect_all_fallback_none;
    targetcollectrange = spl_range_stormfist;
    targetcollectazi = 60;
    targetcollectelev = 60;
    targetcollecttype = target_type_npcs;
};

instance spell_telekinesis(c_spell_proto) {
    time_per_mana = 5000.0;
    spelltype = spell_neutral;
    targetcollectalgo = target_collect_focus;
    canturnduringinvest = false;
    canchangetargetduringinvest = false;
};

instance spell_charm(c_spell_proto) {
    time_per_mana = 250.0;
    spelltype = spell_bad;
    targetcollectalgo = target_collect_focus;
    targetcollectrange = 1000;
    targetcollecttype = target_type_humans;
};

instance spell_sleep(c_spell_proto) {
    time_per_mana = 250.0;
    spelltype = spell_neutral;
    targetcollectalgo = target_collect_focus;
    targetcollectrange = 1000;
    targetcollecttype = target_type_humans;
};

instance spell_pyrokinesis(c_spell_proto) {
    time_per_mana = 250.0;
    damage_per_level = 0;
    spelltype = spell_bad;
    damagetype = dam_magic;
    targetcollectalgo = target_collect_focus;
    targetcollectrange = 1000;
    targetcollecttype = target_type_npcs;
};

instance spell_control(c_spell_proto) {
    time_per_mana = 500.0;
    spelltype = spell_bad;
    targetcollectalgo = target_collect_focus;
    targetcollectrange = 1000;
    targetcollecttype = target_type_humans;
};

instance spell_fear(c_spell_proto) {
    time_per_mana = 250.0;
    damage_per_level = 0;
    spelltype = spell_bad;
    targetcollectalgo = target_collect_none;
    targetcollectrange = 0;
    targetcollectazi = 0;
    targetcollectelev = 0;
};

instance spell_berzerk(c_spell_proto) {
    time_per_mana = 125.0;
    spelltype = spell_bad;
    targetcollectalgo = target_collect_focus;
    targetcollectrange = 1000;
    targetcollecttype = target_type_npcs;
};

instance spell_breathofdeath(c_spell_proto) {
    time_per_mana = 100.0;
    damage_per_level = spl_damage_breathofdeath;
    spelltype = spell_bad;
    damagetype = dam_magic;
    targetcollectalgo = target_collect_focus_fallback_none;
    targetcollecttype = target_type_npcs;
};

instance spell_new1(c_spell_proto) {
    time_per_mana = 100.0;
    damage_per_level = 150;
    spelltype = spell_bad;
    damagetype = dam_magic;
    targetcollectalgo = target_collect_focus_fallback_none;
    targetcollecttype = target_type_npcs;
};

instance spell_shrink(c_spell_proto) {
    time_per_mana = 1000.0;
    spelltype = spell_neutral;
    targetcollectalgo = target_collect_focus;
    targetcollectrange = 800;
    targetcollecttype = target_type_npcs;
};

func int spell_processmana(var int manainvested) {
    printdebugnpc(pd_magic, "Spell_ProcessMana called");
    printdebugint(pd_magic, "### MAGIC ###-> invested Mana: ", manainvested);
    printdebugint(pd_magic, "### MAGIC ###-> Spell-Level: ", npc_getactivespelllevel(self));
    if (npc_getactivespell(self) == spl_light) {
        return spell_logic_light(manainvested);
    };
    if (npc_getactivespell(self) == spl_firebolt) {
        return spell_logic_firebolt(manainvested);
    };
    if (npc_getactivespell(self) == spl_fireball) {
        return spell_logic_fireball(manainvested);
    };
    if (npc_getactivespell(self) == spl_firestorm) {
        return spell_logic_firestorm(manainvested);
    };
    if (npc_getactivespell(self) == spl_firerain) {
        return spell_logic_firerain(manainvested);
    };
    if (npc_getactivespell(self) == spl_teleport1) {
        return spell_logic_teleport1(manainvested);
    };
    if (npc_getactivespell(self) == spl_teleport2) {
        return spell_logic_teleport2(manainvested);
    };
    if (npc_getactivespell(self) == spl_teleport3) {
        return spell_logic_teleport3(manainvested);
    };
    if (npc_getactivespell(self) == spl_teleport4) {
        return spell_logic_teleport4(manainvested);
    };
    if (npc_getactivespell(self) == spl_teleport5) {
        return spell_logic_teleport5(manainvested);
    };
    if (npc_getactivespell(self) == spl_heal) {
        return spell_logic_heal(manainvested);
    };
    if (npc_getactivespell(self) == spl_trf_bloodfly) {
        return spell_logic_trf_bloodfly(manainvested);
    };
    if (npc_getactivespell(self) == spl_trf_crawler) {
        return spell_logic_trf_crawler(manainvested);
    };
    if (npc_getactivespell(self) == spl_trf_lurker) {
        return spell_logic_trf_lurker(manainvested);
    };
    if (npc_getactivespell(self) == spl_trf_meatbug) {
        return spell_logic_trf_meatbug(manainvested);
    };
    if (npc_getactivespell(self) == spl_trf_molerat) {
        return spell_logic_trf_molerat(manainvested);
    };
    if (npc_getactivespell(self) == spl_trf_orcdog) {
        return spell_logic_trf_orcdog(manainvested);
    };
    if (npc_getactivespell(self) == spl_trf_scavenger) {
        return spell_logic_trf_scavenger(manainvested);
    };
    if (npc_getactivespell(self) == spl_trf_shadowbeast) {
        return spell_logic_trf_shadowbeast(manainvested);
    };
    if (npc_getactivespell(self) == spl_trf_snapper) {
        return spell_logic_trf_snapper(manainvested);
    };
    if (npc_getactivespell(self) == spl_trf_waran) {
        return spell_logic_trf_waran(manainvested);
    };
    if (npc_getactivespell(self) == spl_trf_wolf) {
        return spell_logic_trf_wolf(manainvested);
    };
    if (npc_getactivespell(self) == spl_chainlightning) {
        return spell_logic_chainlightning(manainvested);
    };
    if (npc_getactivespell(self) == spl_thunderbolt) {
        return spell_logic_thunderbolt(manainvested);
    };
    if (npc_getactivespell(self) == spl_thunderball) {
        return spell_logic_thunderball(manainvested);
    };
    if (npc_getactivespell(self) == spl_icecube) {
        return spell_logic_icecube(manainvested);
    };
    if (npc_getactivespell(self) == spl_icewave) {
        return spell_logic_icewave(manainvested);
    };
    if (npc_getactivespell(self) == spl_summondemon) {
        return spell_logic_summondemon(manainvested);
    };
    if (npc_getactivespell(self) == spl_summonskeleton) {
        return spell_logic_summonskeleton(manainvested);
    };
    if (npc_getactivespell(self) == spl_summongolem) {
        return spell_logic_summongolem(manainvested);
    };
    if (npc_getactivespell(self) == spl_armyofdarkness) {
        return spell_logic_armyofdarkness(manainvested);
    };
    if (npc_getactivespell(self) == spl_massdeath) {
        return spell_logic_massdeath(manainvested);
    };
    if (npc_getactivespell(self) == spl_destroyundead) {
        return spell_logic_destroyundead(manainvested);
    };
    if (npc_getactivespell(self) == spl_windfist) {
        return spell_logic_windfist(manainvested);
    };
    if (npc_getactivespell(self) == spl_stormfist) {
        return spell_logic_stormfist(manainvested);
    };
    if (npc_getactivespell(self) == spl_telekinesis) {
        return spell_logic_telekinesis(manainvested);
    };
    if (npc_getactivespell(self) == spl_charm) {
        return spell_logic_charm(manainvested);
    };
    if (npc_getactivespell(self) == spl_sleep) {
        return spell_logic_sleep(manainvested);
    };
    if (npc_getactivespell(self) == spl_pyrokinesis) {
        return spell_logic_pyrokinesis(manainvested);
    };
    if (npc_getactivespell(self) == spl_control) {
        return spell_logic_control(manainvested);
    };
    if (npc_getactivespell(self) == spl_fear) {
        return spell_logic_fear(manainvested);
    };
    if (npc_getactivespell(self) == spl_berzerk) {
        return spell_logic_berzerk(manainvested);
    };
    if (npc_getactivespell(self) == spl_breathofdeath) {
        return spell_logic_breathofdeath(manainvested);
    };
    if (npc_getactivespell(self) == spl_new1) {
        return spell_logic_new1(manainvested);
    };
    if (npc_getactivespell(self) == spl_shrink) {
        return spell_logic_shrink(manainvested);
    };
};

func int spell_processmana_release(var int manainvested) {
    if (npc_getactivespell(self) == spl_fireball) {
        return spl_sendcast;
    };
    if (npc_getactivespell(self) == spl_firestorm) {
        return spl_sendcast;
    };
    if (npc_getactivespell(self) == spl_thunderball) {
        return spl_sendcast;
    };
    if (npc_getactivespell(self) == spl_windfist) {
        return spl_sendcast;
    };
    if (npc_getactivespell(self) == spl_stormfist) {
        return spl_sendcast;
    };
    if (npc_getactivespell(self) == spl_telekinesis) {
        return spl_sendstop;
    };
    if (npc_getactivespell(self) == spl_heal) {
        return spl_sendstop;
    };
    if (npc_getactivespell(self) == spl_chainlightning) {
        return spl_sendstop;
    };
    if (npc_getactivespell(self) == spl_pyrokinesis) {
        npc_sendsingleperc(self, other, perc_assessstopmagic);
        return spl_sendstop;
    };
    if (npc_getactivespell(self) == spl_light) {
        return spl_sendstop;
    };
    if (npc_getactivespell(self) == spl_firebolt) {
        return spl_sendstop;
    };
    if (npc_getactivespell(self) == spl_firerain) {
        return spl_sendstop;
    };
    if (npc_getactivespell(self) == spl_thunderbolt) {
        return spl_sendstop;
    };
    if (npc_getactivespell(self) == spl_breathofdeath) {
        return spl_sendstop;
    };
    if (npc_getactivespell(self) == spl_new1) {
        return spl_sendstop;
    };
    if (npc_getactivespell(self) == spl_teleport1) {
        return spl_sendstop;
    };
    if (npc_getactivespell(self) == spl_teleport2) {
        return spl_sendstop;
    };
    if (npc_getactivespell(self) == spl_teleport3) {
        return spl_sendstop;
    };
    if (npc_getactivespell(self) == spl_teleport4) {
        return spl_sendstop;
    };
    if (npc_getactivespell(self) == spl_teleport5) {
        return spl_sendstop;
    };
    if (npc_getactivespell(self) == spl_trf_bloodfly) {
        return spl_sendstop;
    };
    if (npc_getactivespell(self) == spl_trf_crawler) {
        return spl_sendstop;
    };
    if (npc_getactivespell(self) == spl_trf_lurker) {
        return spl_sendstop;
    };
    if (npc_getactivespell(self) == spl_trf_meatbug) {
        return spl_sendstop;
    };
    if (npc_getactivespell(self) == spl_trf_molerat) {
        return spl_sendstop;
    };
    if (npc_getactivespell(self) == spl_trf_orcdog) {
        return spl_sendstop;
    };
    if (npc_getactivespell(self) == spl_trf_scavenger) {
        return spl_sendstop;
    };
    if (npc_getactivespell(self) == spl_trf_shadowbeast) {
        return spl_sendstop;
    };
    if (npc_getactivespell(self) == spl_trf_snapper) {
        return spl_sendstop;
    };
    if (npc_getactivespell(self) == spl_trf_waran) {
        return spl_sendstop;
    };
    if (npc_getactivespell(self) == spl_trf_wolf) {
        return spl_sendstop;
    };
    if (npc_getactivespell(self) == spl_icecube) {
        return spl_sendstop;
    };
    if (npc_getactivespell(self) == spl_icewave) {
        return spl_sendstop;
    };
    if (npc_getactivespell(self) == spl_summondemon) {
        return spl_sendstop;
    };
    if (npc_getactivespell(self) == spl_summonskeleton) {
        return spl_sendstop;
    };
    if (npc_getactivespell(self) == spl_summongolem) {
        return spl_sendstop;
    };
    if (npc_getactivespell(self) == spl_armyofdarkness) {
        return spl_sendstop;
    };
    if (npc_getactivespell(self) == spl_destroyundead) {
        return spl_sendstop;
    };
    if (npc_getactivespell(self) == spl_charm) {
        return spl_sendstop;
    };
    if (npc_getactivespell(self) == spl_sleep) {
        return spl_sendstop;
    };
    if (npc_getactivespell(self) == spl_control) {
        return spl_sendstop;
    };
    if (npc_getactivespell(self) == spl_berzerk) {
        return spl_sendstop;
    };
    if (npc_getactivespell(self) == spl_shrink) {
        return spl_sendstop;
    };
    if (npc_getactivespell(self) == spl_massdeath) {
        return spl_sendstop;
    };
    if (npc_getactivespell(self) == spl_fear) {
        return spl_sendstop;
    };
};

func void b_assessmagic_firebolt() {
    printdebugnpc(pd_magic, "B_AssessMagic_Firebolt");
    npc_sendpassiveperc(self, perc_assessfightsound, self, other);
};

func void b_assessmagic_fireball() {
    printdebugnpc(pd_magic, "B_AssessMagic_FireBall");
    npc_sendpassiveperc(self, perc_assessfightsound, self, other);
};

func void b_assessmagic_firestorm() {
    printdebugnpc(pd_magic, "B_AssessMagic_Firestorm");
    npc_sendpassiveperc(self, perc_assessfightsound, self, other);
};

func void b_assessmagic_firerain() {
    printdebugnpc(pd_magic, "B_AssessMagic_Firerain");
    npc_sendpassiveperc(self, perc_assessfightsound, self, other);
};

func void b_assessmagic_chainlightning() {
    printdebugnpc(pd_magic, "B_AssessMagic ...ChainLightning");
    npc_percdisable(self, perc_assesscaster);
    npc_sendpassiveperc(self, perc_assessfightsound, self, other);
    npc_clearaiqueue(self);
    if (!npc_isdead(self)) {
        b_fullstop(self);
        ai_startstate(self, zs_zapped, 0, "");
    };
};

func void b_assessmagic_thunderbolt() {
    printdebugnpc(pd_magic, "B_AssessMagic_Thunderbolt");
    npc_sendpassiveperc(self, perc_assessfightsound, self, other);
};

func void b_assessmagic_thunderball() {
    printdebugnpc(pd_magic, "B_AssessMagic ...Thunderball");
    npc_sendpassiveperc(self, perc_assessfightsound, self, other);
    npc_clearaiqueue(self);
    if (!npc_isdead(self)) {
        ai_startstate(self, zs_shortzapped, 0, "");
    };
};

func void b_assessmagic_icecube() {
    printdebugnpc(pd_magic, "B_AssessMagic ...IceCube oder IceWave");
    npc_sendpassiveperc(self, perc_assessfightsound, self, other);
    if ((!(((((self.guild == gil_slf) || (self.guild == gil_demon)) || (self.guild == gil_golem)) || (self.guild == gil_swampshark)) || (self.guild == gil_troll))) && ((!c_bodystatecontains(self, bs_swim)) || c_bodystatecontains(self, bs_dive))) {
        npc_clearaiqueue(self);
        ai_startstate(self, zs_magicfreeze, 0, "");
    };
};

func void b_assessmagic_fear() {
    printdebugnpc(pd_magic, "B_AssessMagic_Fear");
    npc_sendpassiveperc(self, perc_assessfightsound, self, other);
    if (((((((self.guild == gil_slf) || (self.guild == gil_troll)) || (self.guild == gil_swampshark)) || (self.guild == gil_demon)) || (self.guild == gil_golem)) || (self.guild == gil_skeleton)) || (self.guild == gil_zombie)) {
        printdebugnpc(pd_magic, "...Ziel immun!");
    }
    printdebugnpc(pd_magic, "...Ziel NICHT immun!");
    npc_clearaiqueue(self);
    npc_settarget(self, other);
    if (c_npcishuman(self)) {
        ai_startstate(self, zs_flee, 0, "");
    }
    else {
        if (c_npcismonster(self)) {
            ai_startstate(self, zs_mm_flee, 0, "");
        };
    };
};

func void b_assessmagic_massdeath() {
    printdebugnpc(pd_magic, "B_Assessmagic_Massdeath");
    npc_sendpassiveperc(self, perc_assessfightsound, self, other);
};

func void b_assessmagic_destroyundead() {
    printdebugnpc(pd_magic, "B_AssessMagic_Destroyundead");
    npc_sendpassiveperc(self, perc_assessfightsound, self, other);
};

func void b_assessmagic_windfist() {
    printdebugnpc(pd_magic, "B_AssessMagic_Windfist");
    npc_sendpassiveperc(self, perc_assessfightsound, self, other);
};

func void b_assessmagic_stormfist() {
    printdebugnpc(pd_magic, "B_AssessMagic_Stormfist");
    npc_sendpassiveperc(self, perc_assessfightsound, self, other);
};

func void b_assessmagic_charm() {
    printdebugnpc(pd_zs_check, "B_AssessMagic Charm");
    npc_sendpassiveperc(self, perc_assessfightsound, self, other);
    npc_clearaiqueue(self);
    if (!npc_isinstate(self, zs_unconscious)) {
        printdebugnpc(pd_zs_check, "...NSC ist ein Mensch bei bewu*tsein!");
        npc_settempattitude(self, att_friendly);
        b_fullstop(self);
        if (npc_isinstate(self, zs_attack)) {
            b_sayoverlay(self, other, "$LetsForgetOurLittleFight");
        }
        else {
            b_say(self, other, "$FriendlyGreetings");
        };
        ai_continueroutine(self);
    };
};

func void b_assessmagic_pyrokinesis() {
    printdebugnpc(pd_magic, "...Pyrokinesis");
    npc_clearaiqueue(self);
    npc_percdisable(self, perc_assesscaster);
    npc_sendpassiveperc(self, perc_assessfightsound, self, other);
    if ((!npc_isdead(self)) && (!npc_isinstate(self, zs_unconscious))) {
        printdebugnpc(pd_magic, "...weder bewu*tlos noch tot!");
        ai_startstate(self, zs_pyro, 0, "");
    };
};

func void b_assessmagic_berzerk() {
    printdebugnpc(pd_magic, "...Berzerk");
    npc_sendpassiveperc(self, perc_assessfightsound, self, other);
    npc_clearaiqueue(self);
    if ((!npc_isdead(self)) && (!npc_isinstate(self, zs_unconscious))) {
        ai_startstate(self, zs_berzerk, 0, "");
    };
};

func void b_assessmagic_breathofdeath() {
    printdebugnpc(pd_magic, "B_AssessMagic_Breathofdeath");
    npc_sendpassiveperc(self, perc_assessfightsound, self, other);
};

func void b_assessmagic_new1() {
    printdebugnpc(pd_magic, "B_AssessMagic_New1");
    npc_sendpassiveperc(self, perc_assessfightsound, self, other);
};

func void b_assessmagic_shrink() {
    printdebugnpc(pd_magic, "...Shrink");
    npc_sendpassiveperc(self, perc_assessfightsound, self, other);
    npc_clearaiqueue(self);
    ai_startstate(self, zs_magicshrink, 0, "");
};

func void b_assessmagic_control() {
    printdebugnpc(pd_magic, "...Control");
    npc_sendpassiveperc(self, perc_assessfightsound, self, other);
};

func void b_assessmagic() {
    printglobals(pd_magic);
    printdebugnpc(pd_magic, "B_AssessMagic");
    if (npc_getactivespell(other) == spl_firebolt) {
        b_assessmagic_firebolt();
    }
    else if (npc_getactivespell(other) == spl_fireball) {
        b_assessmagic_fireball();
    }
    else if (npc_getactivespell(other) == spl_firestorm) {
        b_assessmagic_firestorm();
    }
    else if (npc_getactivespell(other) == spl_firerain) {
        b_assessmagic_firerain();
    }
    else if (npc_getactivespell(other) == spl_chainlightning) {
        b_assessmagic_chainlightning();
    }
    else if (npc_getactivespell(other) == spl_thunderbolt) {
        b_assessmagic_thunderbolt();
    }
    else if (npc_getactivespell(other) == spl_thunderball) {
        b_assessmagic_thunderball();
    }
    else if (npc_getactivespell(other) == spl_icecube) {
        b_assessmagic_icecube();
    }
    else if (npc_getactivespell(other) == spl_icewave) {
        b_assessmagic_icecube();
    }
    else if (npc_getactivespell(other) == spl_massdeath) {
        b_assessmagic_massdeath();
    }
    else if (npc_getactivespell(other) == spl_destroyundead) {
        b_assessmagic_destroyundead();
    }
    else if (npc_getactivespell(other) == spl_windfist) {
        b_assessmagic_windfist();
    }
    else if (npc_getactivespell(other) == spl_stormfist) {
        b_assessmagic_stormfist();
    }
    else if (npc_getactivespell(other) == spl_charm) {
        b_assessmagic_charm();
    }
    else if (npc_getactivespell(other) == spl_fear) {
        b_assessmagic_fear();
    }
    else if (npc_getactivespell(other) == spl_pyrokinesis) {
        b_assessmagic_pyrokinesis();
    }
    else if (npc_getactivespell(other) == spl_berzerk) {
        b_assessmagic_berzerk();
    }
    else if (npc_getactivespell(other) == spl_breathofdeath) {
        b_assessmagic_breathofdeath();
    }
    else if (npc_getactivespell(other) == spl_new1) {
        b_assessmagic_new1();
    }
    else if (npc_getactivespell(other) == spl_control) {
        b_assessmagic_control();
    }
    else {
        if (npc_getactivespell(other) == spl_shrink) {
            b_assessmagic_shrink();
        };
    };
};

const int player_perc_assessmagic = 5807;

func void zs_berzerk() {
    printdebugnpc(pd_zs_frame, "ZS_Berzerk");
    printglobals(pd_zs_detail);
    b_fullstop(self);
    b_sayoverlay(self, NULL, "$Berzerk");
    ai_playani(self, "T_PSI_VICTIM");
    ai_setwalkmode(self, npc_run);
};

func int zs_berzerk_loop() {
    var int random;

    printdebugnpc(pd_zs_loop, "ZS_Berzerk_Loop");
    if (npc_getstatetime(self) > spl_time_berzerk) {
        b_fullstop(self);
        return loop_end;
    };
    npc_gettarget(self);
    if ((hlp_isvalidnpc(other) && (!c_npcisdown(other))) && (!npc_isplayer(other))) {
        npc_gettarget(self);
        ai_attack(self);
        if (hlp_random(100) < 20) {
            b_sayoverlay(self, other, "$Berzerk");
        };
        return loop_continue;
    }
    printdebugnpc(pd_zs_check, "...kein g*ltiges Ziel mehr!");
    npc_perceiveall(self);
    if (wld_detectnpcex(self, -1, NOFUNC, -1, false)) {
        printdebugnpc(pd_zs_check, "...Neues Ziel entdeckt!");
        printglobals(pd_zs_detail);
        npc_settarget(self, other);
        return loop_continue;
    }
    else {
        printdebugnpc(pd_zs_check, "...kein neues Ziel mehr vorhanden!");
        printglobals(pd_zs_detail);
        ai_gotowp(self, npc_getnearestwp(self));
        b_sayoverlay(self, NULL, "$Berzerk");
        ai_playani(self, "T_SEARCH");
        ai_gotowp(self, npc_getnextwp(self));
        b_sayoverlay(self, NULL, "$Berzerk");
        ai_playani(self, "T_SEARCH");
    };
};

func void zs_berzerk_end() {
    printdebugnpc(pd_zs_frame, "ZS_Berzerk_End");
    b_sayoverlay(self, NULL, "$Berzerk");
    ai_playani(self, "T_PSI_VICTIM");
    ai_wait(self, 2.0);
    ai_continueroutine(self);
};

func void zs_controlled() {
    printdebugnpc(pd_zs_frame, "ZS_Controlled");
};

func void zs_controlled_loop() {
    printdebugnpc(pd_zs_loop, "ZS_Controlled_Loop");
};

func void zs_controlled_end() {
    printdebugnpc(pd_zs_frame, "ZS_Controlled_End");
    b_fullstop(self);
    ai_playani(self, "T_PSI_VICTIM");
    ai_wait(self, 3.5);
    b_regaindroppedweapon(self);
    b_regaindroppedarmor(self);
    npc_settarget(self, hero);
    npc_gettarget(self);
    ai_startstate(self, zs_assessenemy, 1, "");
};

func void b_stopmagicfreeze() {
    printdebugnpc(pd_magic, "B_StopMagicFreeze");
    printglobals(pd_magic);
    npc_clearaiqueue(self);
    ai_standup(self);
    if (c_npcishuman(self) || c_npcisorc(self)) {
        ai_startstate(self, zs_reacttodamage, 0, "");
    }
    else {
        if (c_npcismonster(self)) {
            ai_startstate(self, zs_mm_attack, 0, "");
        };
    };
    return;
};

func int zs_magicfreeze() {
    printdebugnpc(pd_magic, "ZS_MagicFreeze");
    printglobals(pd_magic);
    npc_percenable(self, perc_assessmagic, zs_magicfreeze);
    if (!c_bodystatecontains(self, bs_unconscious)) {
        ai_playanibs(self, "T_STAND_2_FREEZE_VICTIM", bs_unconscious);
    };
    if (self.attribute[atr_hitpoints] /*0*/ > ((spl_freeze_damage + 1) - self.protection[prot_magic] /*5*/)) {
        b_magichurtnpc(other, spl_freeze_damage);
    };
};

func int zs_magicfreeze_loop() {
    printdebugnpc(pd_zs_loop, "ZS_MagicFreeze_Loop");
    if (npc_getstatetime(self) > spl_time_freeze) {
        b_stopmagicfreeze();
        return loop_end;
    };
    ai_wait(self, 1.0);
    return loop_continue;
};

func void zs_magicfreeze_end() {
    printdebugnpc(pd_zs_frame, "ZS_MagicFreeze_End");
};

func int zs_magicshrink() {
    printdebugnpc(pd_zs_frame, "ZS_MagicShrink");
    if (!npc_hasbodyflag(self, bs_flag_interruptable)) {
        printdebugnpc(pd_magic, "bodystate not interuptable, standing up...");
        ai_standup(self);
    };
    ai_playani(self, "T_STUMBLEB");
    self.aivar[19] = 0;
};

func int zs_magicshrink_loop() {
    printdebugnpc(pd_zs_loop, "ZS_MagicShrink_Loop");
    if (self.aivar[19] == 0) {
        mdl_setmodelscale(self, 0.9, 0.9, 0.9);
        self.aivar[19] = 1;
    }
    else if (self.aivar[19] == 1) {
        mdl_setmodelscale(self, 0.85, 0.85, 0.85);
        self.aivar[19] = 2;
    }
    else if (self.aivar[19] == 2) {
        mdl_setmodelscale(self, 0.8, 0.8, 0.8);
        self.aivar[19] = 3;
    }
    else if (self.aivar[19] == 3) {
        mdl_setmodelscale(self, 0.75, 0.75, 0.75);
        self.aivar[19] = 4;
    }
    else if (self.aivar[19] == 4) {
        mdl_setmodelscale(self, 0.7, 0.7, 0.7);
        self.aivar[19] = 5;
    }
    else if (self.aivar[19] == 5) {
        mdl_setmodelscale(self, 0.65, 0.65, 0.65);
        self.aivar[19] = 6;
    }
    else if (self.aivar[19] == 6) {
        mdl_setmodelscale(self, 0.6, 0.6, 0.6);
        self.aivar[19] = 7;
    }
    else if (self.aivar[19] == 7) {
        mdl_setmodelscale(self, 0.55, 0.55, 0.55);
        self.aivar[19] = 8;
    }
    else if (self.aivar[19] == 8) {
        mdl_setmodelscale(self, 0.5, 0.5, 0.5);
        self.aivar[19] = 9;
    }
    else if (self.aivar[19] == 9) {
        mdl_setmodelscale(self, 0.45, 0.45, 0.45);
        self.aivar[19] = 10;
    }
    else if (self.aivar[19] == 10) {
        mdl_setmodelscale(self, 0.4, 0.4, 0.4);
        self.aivar[19] = 11;
    }
    else if (self.aivar[19] == 11) {
        mdl_setmodelscale(self, 0.35, 0.35, 0.35);
        self.aivar[19] = 12;
    }
    else if (self.aivar[19] == 12) {
        mdl_setmodelscale(self, 0.3, 0.3, 0.3);
        self.aivar[19] = 13;
    }
    else if (self.aivar[19] == 13) {
        printdebugnpc(pd_zs_check, "...klein geschrumpft!");
        npc_changeattribute(self, atr_hitpoints, -((self.attribute[atr_hitpoints] /*0*/ * 9) / 10));
        npc_changeattribute(self, atr_hitpoints_max, -((self.attribute[atr_hitpoints_max] /*1*/ * 9) / 10));
        npc_changeattribute(self, atr_strength, -((self.attribute[atr_strength] /*4*/ * 9) / 10));
        self.protection[prot_blunt] /*1*/ = self.protection[prot_blunt] /*1*/ / 10;
        self.protection[prot_edge] /*2*/ = self.protection[prot_edge] /*2*/ / 10;
        self.protection[prot_fire] /*3*/ = self.protection[prot_fire] /*3*/ / 10;
        self.protection[prot_fly] /*4*/ = 0;
        self.protection[prot_magic] /*5*/ = self.protection[prot_magic] /*5*/ / 10;
        self.protection[prot_point] /*6*/ = self.protection[prot_point] /*6*/ / 10;
        self.aivar[19] = 14;
    }
    else {
        if (self.aivar[19] == 14) {
            self.start_aistate = zs_magicshrunk;
            ai_startstate(self, zs_magicshrunk, 1, "");
        };
    };
    ai_wait(self, 0.38);
    return loop_continue;
};

func void zs_magicshrink_end() {
    printdebugnpc(pd_zs_frame, "ZS_MagicShrink_End");
};

func void zs_magicshrunk() {
    printdebugnpc(pd_zs_frame, "ZS_MagicShrunk");
    printglobals(pd_zs_frame);
    npc_settarget(self, hero);
};

func int zs_magicshrunk_loop() {
    printdebugnpc(pd_zs_loop, "ZS_MagicShrunk_Loop");
    ai_flee(self);
    return loop_continue;
};

func int b_stopmagicsleep() {
    npc_percdisable(self, perc_assessdamage);
    npc_clearaiqueue(self);
    ai_playani(self, "T_VICTIM_SLE_2_STAND");
    ai_standup(self);
    b_sayoverlay(self, other, "$WHATSTHAT");
    if (hlp_isvalidnpc(other)) {
        printdebugnpc(pd_zs_check, "...'other' g*ltig!");
        if (npc_getattitude(self, other) == att_hostile) {
            printdebugnpc(pd_zs_check, "...'other' hostile!");
            ai_startstate(self, zs_assessenemy, 0, "");
        };
    };
    ai_continueroutine(self);
};

func void zs_magicsleep() {
    printdebugnpc(pd_zs_frame, "ZS_MagicSleep");
    npc_percenable(self, perc_assessdamage, b_stopmagicsleep);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    if (c_bodystatecontains(self, bs_swim) || c_bodystatecontains(self, bs_dive)) {
        ai_continueroutine(self);
        return;
    };
    if (npc_wasinstate(self, zs_unconscious)) {
        ai_continueroutine(self);
        return;
    };
    npc_clearaiqueue(self);
    if (!npc_hasbodyflag(self, bs_flag_interruptable)) {
        printdebugnpc(pd_magic, "bodystate not interuptable, standing up...");
        ai_standup(self);
    };
    ai_playanibs(self, "T_STAND_2_VICTIM_SLE", bs_lie);
};

func void zs_magicsleep_loop() {
    var int time;

    printdebugnpc(pd_zs_loop, "MagicSleep Loop");
    time = npc_getstatetime(self);
    if (time > spl_time_sleep) {
        b_stopmagicsleep();
    };
    ai_wait(self, 1.0);
};

func void zs_magicsleep_end() {
    printdebugnpc(pd_zs_frame, "ZS_MagicSleep_End");
};

func void zs_pc_controlling() {
    printdebugnpc(pd_zs_frame, "ZS_PC_Controlling");
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assessdamage, zs_reacttodamage);
    npc_playani(self, "T_CONSHOOT_2_CONACTIVE");
};

func void zs_pc_controlling_loop() {
    printdebugnpc(pd_zs_loop, "ZS_PC_Controlling_Loop");
};

func void zs_pc_controlling_end() {
    printdebugnpc(pd_zs_frame, "ZS_PC_Controlling_End");
    npc_clearaiqueue(self);
    ai_standup(self);
    ai_continueroutine(self);
};

func void zs_psidefense() {
    printdebugnpc(pd_zs_check, "ZS_PsiDefense");
    npc_percenable(self, perc_assessdamage, zs_reacttodamage);
    npc_percenable(self, perc_assessstopmagic, b_stoppsidefense);
    if (!npc_hasbodyflag(self, bs_flag_interruptable)) {
        printdebugnpc(pd_magic, "bodystate not interuptable, standing up...");
        ai_standup(self);
    };
};

func void zs_psidefense_loop() {
    printdebugnpc(pd_zs_loop, "ZS_PsiDefense Loop");
    if ((((!npc_isdead(self)) && (!npc_isinstate(self, zs_unconscious))) && (!c_bodystatecontains(self, bs_swim))) && (!c_bodystatecontains(self, bs_dive))) {
        printdebugnpc(pd_magic, "...NSC ist nicht bewu*tlos / tot / schwimmend / tauchend");
        ai_playani(other, "S_CON_VICTIM");
    };
};

func void zs_psidefense_end() {
    printdebugnpc(pd_zs_check, "ZS_PsiDefense End");
};

func void b_stoppsidefense() {
    printdebugnpc(pd_zs_frame, "B_StopPsiDefense");
    if ((!npc_isdead(self)) && (!npc_isinstate(self, zs_unconscious))) {
        b_fullstop(self);
        ai_startstate(self, zs_assessenemy, 1, "");
    };
};

func void b_stoppyro() {
    printdebugnpc(pd_zs_frame, "B_StopPyro");
    npc_percdisable(self, perc_assessstopmagic);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_clearaiqueue(self);
    ai_standup(self);
    if (c_npcishuman(self) || c_npcisorc(self)) {
        ai_startstate(self, zs_reacttodamage, 0, "");
    }
    else {
        if (c_npcismonster(self)) {
            ai_startstate(self, zs_mm_attack, 0, "");
        };
    };
    return;
};

func int zs_pyro() {
    printdebugnpc(pd_zs_frame, "ZS_Pyro");
    npc_percenable(self, perc_assessstopmagic, b_stoppyro);
    if (!npc_hasbodyflag(self, bs_flag_interruptable)) {
        printdebugnpc(pd_magic, "bodystate not interuptable, standing up...");
        ai_standup(self);
    };
    if ((((!npc_isdead(self)) && (!npc_isinstate(self, zs_unconscious))) && (!c_bodystatecontains(self, bs_swim))) && (!c_bodystatecontains(self, bs_dive))) {
        printdebugnpc(pd_magic, "...NSC ist nicht bewu*tlos / tot / schwimmend / tauchend");
        ai_playani(self, "T_STAND_2_LIGHTNING_VICTIM");
    };
};

func int zs_pyro_loop() {
    printdebugnpc(pd_zs_loop, "ZS_Pyro_Loop");
    b_magichurtnpc(other, spl_pyro_damage_per_sec);
    if ((self.attribute[atr_hitpoints] /*0*/ <= 0) || (other.attribute[atr_hitpoints] /*0*/ <= 0)) {
        npc_clearaiqueue(self);
        ai_standup(self);
        return loop_end;
    };
    ai_wait(self, 0.5);
    return loop_continue;
};

func void zs_pyro_end() {
    printdebugnpc(pd_zs_frame, "ZS_Pyro_End");
};

func void b_stopshortzapped() {
    printdebugnpc(pd_magic, "B_StopShortZapped");
    npc_percdisable(self, perc_assessstopmagic);
    npc_clearaiqueue(self);
    ai_standup(self);
    if (c_npcishuman(self) || c_npcisorc(self)) {
        ai_startstate(self, zs_reacttodamage, 0, "");
    }
    else {
        if (c_npcismonster(self)) {
            ai_startstate(self, zs_mm_attack, 0, "");
        };
    };
    return;
};

func int zs_shortzapped() {
    printdebugnpc(pd_zs_frame, "ZS_ShortZapped");
    if (!npc_hasbodyflag(self, bs_flag_interruptable)) {
        printdebugnpc(pd_magic, "bodystate not interuptable, standing up...");
        ai_standup(self);
    };
    if ((((!npc_isdead(self)) && (!npc_isinstate(self, zs_unconscious))) && (!c_bodystatecontains(self, bs_swim))) && (!c_bodystatecontains(self, bs_dive))) {
        printdebugnpc(pd_magic, "...NSC ist nicht bewu*tlos / tot / schwimmend / tauchend");
        ai_playani(self, "T_STAND_2_LIGHTNING_VICTIM");
    };
};

func int zs_shortzapped_loop() {
    printdebugnpc(pd_zs_loop, "ZS_ShortZapped Loop");
    if (npc_getstatetime(self) > spl_time_shortzapped) {
        b_stopshortzapped();
    };
    ai_wait(self, 1.0);
};

func void zs_shortzapped_end() {
    printdebugnpc(pd_zs_frame, "ZS_ShortZapped_End");
};

func void b_stopzapped() {
    printdebugnpc(pd_magic, "B_StopZapped");
    npc_percdisable(self, perc_assessstopmagic);
    npc_clearaiqueue(self);
    ai_standup(self);
    if (c_npcishuman(self) || c_npcisorc(self)) {
        ai_startstate(self, zs_reacttodamage, 0, "");
    }
    else {
        if (c_npcismonster(self)) {
            ai_startstate(self, zs_mm_attack, 0, "");
        };
    };
    return;
};

func int zs_zapped() {
    printdebugnpc(pd_magic, "ZS_Zapped");
    npc_percenable(self, perc_assessstopmagic, b_stopzapped);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    if (!npc_hasbodyflag(self, bs_flag_interruptable)) {
        printdebugnpc(pd_magic, "bodystate not interuptable, standing up...");
        ai_standup(self);
    };
    if ((((!npc_isdead(self)) && (!npc_isinstate(self, zs_unconscious))) && (!c_bodystatecontains(self, bs_swim))) && (!c_bodystatecontains(self, bs_dive))) {
        printdebugnpc(pd_magic, "...NSC ist nicht bewu*tlos / tot / schwimmend / tauchend");
        ai_playani(self, "T_STAND_2_LIGHTNING_VICTIM");
    };
};

func int zs_zapped_loop() {
    printdebugnpc(pd_magic, "ZS_Zapped_Loop");
    b_magichurtnpc(other, spl_zapped_damage_per_sec);
    if (self.attribute[atr_hitpoints] /*0*/ <= 0) {
        npc_clearaiqueue(self);
        ai_standup(self);
        return loop_end;
    };
    ai_wait(self, 1.0);
    return loop_continue;
};

func void zs_zapped_end() {
    printdebugnpc(pd_magic, "ZS_Zapped_End");
};

func void ta_cook(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_cook, waypoint);
};

func void ta_roastscavenger(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_roastscavenger, waypoint);
};

func void ta_guard(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_guard, waypoint);
};

func void ta_repairhut(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_repairhut, waypoint);
};

func void ta_sleep(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_sleep, waypoint);
};

func void ta_listen(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_listen, waypoint);
};

func void ta_babe_sweep(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_babe_sweep, waypoint);
};

func void ta_bathing_babe(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_bathing_babe, waypoint);
};

func void ta_babe_sitaround(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_babe_sitaround, waypoint);
};

func void ta_babe_dance(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_babe_dance, waypoint);
};

func void ta_babe_sleep(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_babe_sleep, waypoint);
};

func void ta_babe_fan(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_babe_fan, waypoint);
};

func void ta_potionalchemy(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_potionalchemy, waypoint);
};

func void ta_herbalchemy(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_herbalchemy, waypoint);
};

func void ta_preach(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_preach, waypoint);
};

func void ta_pray(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_pray, waypoint);
};

func void ta_playtune(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_playtune, waypoint);
};

func void ta_teaching(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_teaching, waypoint);
};

func void ta_cookforme(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_cookforme, waypoint);
};

func void ta_mchunting(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_mchunting, waypoint);
};

func void ta_guardpassage(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_guardpassage, waypoint);
};

func void ta_guardpatrol(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_guardpatrol, waypoint);
};

func void ta_smoke(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_smoke, waypoint);
};

func void ta_walkaround(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_walkaround, waypoint);
};

func void ta_washself(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_washself, waypoint);
};

func void ta_readbook(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_readbook, waypoint);
};

func void ta_practicemagic(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_practicemagic, waypoint);
};

func void ta_bodyguard(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_bodyguard, waypoint);
};

func void ta_pickore(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_pickore, waypoint);
};

func void ta_pickrice(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_pickrice, waypoint);
};

func void ta_smith_anvil(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_smith_anvil, waypoint);
};

func void ta_smith_cool(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_smith_cool, waypoint);
};

func void ta_smith_sharp(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_smith_sharp, waypoint);
};

func void ta_smith_fire(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_smith_fire, waypoint);
};

func void ta_practicebow(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_practicebow, waypoint);
};

func void ta_practicesword(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_practicesword, waypoint);
};

func void ta_iepymonte(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_iepymonte, waypoint);
};

func void ta_ieflex(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_ieflex, waypoint);
};

func void ta_ielutter(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_ielutter, waypoint);
};

func void ta_iepfeiffer(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_iepfeiffer, waypoint);
};

func void ta_ieflail(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_ieflail, waypoint);
};

func void ta_iethomas(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_iethomas, waypoint);
};

func void ta_ieunicorn(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_ieunicorn, waypoint);
};

func void ta_charlotte_dance(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_charlotte_dance, waypoint);
};

func void ta_firespit(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_firespit, waypoint);
};

func void ta_watchinextremo(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_watchinextremo, waypoint);
};

func void ta_ebr_hangaround(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_ebr_hangaround, waypoint);
};

func void ta_testhangaround(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_testhangaround, waypoint);
};

func void ta_testgotowp(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_testgotowp, waypoint);
};

func void ta_meditate(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_meditate, waypoint);
};

func void ta_speech(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_speech, waypoint);
};

func void ta_position(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_position, waypoint);
};

func void ta_guidepc(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_guidepc, waypoint);
};

func void ta_followpc(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_followpc, waypoint);
};

func void ta_guardpalisade(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_guardpalisade, waypoint);
};

func void ta_testbully(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_testbully, waypoint);
};

func void ta_orepile(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_orepile, waypoint);
};

func void ta_walk(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_walk, waypoint);
};

func void ta_minebellows(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_minebellows, waypoint);
};

func void ta_smalltalk(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_smalltalk, waypoint);
};

func void ta_boss(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_boss, waypoint);
};

func void ta_stand(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_stand, waypoint);
};

func void ta_sitcampfire(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_sitcampfire, waypoint);
};

func void ta_arenaspectator(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_arenaspectator, waypoint);
};

func void ta_sittingduck(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_sittingduck, waypoint);
};

func void ta_herbshop(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_herbshop, waypoint);
};

func void ta_guardwheelopen(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_guardwheelopen, waypoint);
};

func void ta_guardwheelclosed(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_guardwheelclosed, waypoint);
};

func void ta_standaround(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_standaround, waypoint);
};

func void ta_sitaround(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_sitaround, waypoint);
};

func void ta_stay(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_stay, waypoint);
};

func void ta_stayneutral(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_stayneutral, waypoint);
};

func void ta_preach_yberion(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_preach_yberion, waypoint);
};

func void ta_drained_yberion(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_drained_yberion, waypoint);
};

func void ta_waitforrescue(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_waitforrescue, waypoint);
};

func void ta_hostileguard(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_hostileguard, waypoint);
};

func void ta_alignguard(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_alignguard, waypoint);
};

func void ta_intercept(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_intercept, waypoint);
};

func void ta_interceptmadcorkalom(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_interceptmadcorkalom, waypoint);
};

func void ta_otmeditate(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_otmeditate, waypoint);
};

func void ta_sleeper(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_sleeper, waypoint);
};

func void ta_readbook_xardas(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_readbook_xardas, waypoint);
};

const int ta_it_none = 0;

const int ta_it_apple = 1;

const int ta_it_loaf = 2;

const int ta_it_cheese = 3;

const int ta_it_beer = 4;

const int ta_it_meat = 5;

const int ta_it_soup = 6;

const int ta_it_rice = 7;

const int ta_it_joint = 8;

const int ta_it_booze = 9;

const int ta_it_wine = 10;

const int ta_it_smalltalk_active = 11;

const int ta_it_smalltalk_passive = 12;

const int ta_it_smalltalk = 13;

const int ta_it_forcedsmalltalk = 14;

func void b_initarmor() {
    var c_item myarmor;

    printdebugnpc(pd_ta_detail, "B_InitArmor");
    myarmor = npc_getequippedarmor(self);
    if (hlp_isitem(myarmor, grd_armor_l /*4125*/)) {
        ai_playani(self, "T_STAND_2_LGUARD");
    }
    else {
        if (hlp_isitem(myarmor, grd_armor_h /*4127*/) || hlp_isitem(myarmor, grd_armor_m /*4126*/)) {
            ai_playani(self, "T_STAND_2_HGUARD");
        };
    };
};

func void b_playarmor() {
    var int guardreaktion;
    var c_item myarmor;

    printdebugnpc(pd_ta_detail, "B_PlayArmor");
    guardreaktion = hlp_random(100);
    myarmor = npc_getequippedarmor(self);
    if (hlp_isitem(myarmor, grd_armor_l /*4125*/)) {
        if (guardreaktion >= 90) {
            ai_playani(self, "T_LGUARD_2_STAND");
            ai_playani(self, "T_STAND_2_LGUARD");
        }
        else if (guardreaktion >= 80) {
            ai_playani(self, "T_LGUARD_SCRATCH");
        }
        else if (guardreaktion >= 70) {
            ai_playani(self, "T_LGUARD_STRETCH");
        }
        else {
            if (guardreaktion >= 60) {
                ai_playani(self, "T_LGUARD_CHANGELEG");
            };
        };
    }
    else if (hlp_isitem(myarmor, grd_armor_h /*4127*/) || hlp_isitem(myarmor, grd_armor_m /*4126*/)) {
        guardreaktion = hlp_random(100);
        if (guardreaktion >= 95) {
            ai_playani(self, "T_HGUARD_2_STAND");
            ai_playani(self, "T_STAND_2_HGUARD");
        }
        else {
            if (guardreaktion >= 90) {
                ai_playani(self, "T_HGUARD_LOOKAROUND");
            };
        };
    };
};

func void b_exitarmor() {
    var c_item myarmor;

    printdebugnpc(pd_ta_detail, "B_ExitArmor");
    myarmor = npc_getequippedarmor(self);
    if (hlp_isitem(myarmor, grd_armor_l /*4125*/)) {
        ai_playani(self, "T_LGUARD_2_STAND");
    }
    else {
        if (hlp_isitem(myarmor, grd_armor_h /*4127*/) || hlp_isitem(myarmor, grd_armor_m /*4126*/)) {
            ai_playani(self, "T_HGUARD_2_STAND");
        };
    };
};

func void b_eatsmall(var c_npc self) {
    printdebugnpc(pd_ta_detail, "B_EatSmall");
    if ((npc_getstatetime(self) >= self.aivar[18]) && (hlp_random(100) > 20)) {
        ai_playani(self, "T_FOOD_RANDOM_1");
        npc_setstatetime(self, 0);
        self.aivar[18] = hlp_random(5) + 5;
    };
};

func void b_eathuge(var c_npc self) {
    printdebugnpc(pd_ta_detail, "B_EatHuge");
    if (npc_getstatetime(self) >= self.aivar[18]) {
        ai_playani(self, "T_FOODHUGE_RANDOM_1");
        npc_setstatetime(self, 0);
        self.aivar[18] = hlp_random(5) + 5;
    };
};

func void b_throwapple(var c_npc self) {
    printdebugnpc(pd_ta_detail, "B_ThrowApple");
    if (npc_getstatetime(self) >= self.aivar[18]) {
        ai_playani(self, "T_FOOD_RANDOM_2");
        npc_setstatetime(self, 0);
        self.aivar[18] = hlp_random(5) + 5;
    };
};

func void b_drinkbottle(var c_npc self) {
    printdebugnpc(pd_ta_detail, "B_DrinkBottle");
    if ((npc_getstatetime(self) >= self.aivar[18]) && (hlp_random(100) > 30)) {
        ai_playani(self, "T_POTION_RANDOM_1");
        npc_setstatetime(self, 0);
        self.aivar[18] = hlp_random(5) + 5;
    };
};

func void b_wipemouth(var c_npc self) {
    printdebugnpc(pd_ta_detail, "B_WipeMouth");
    if ((npc_getstatetime(self) >= self.aivar[18]) && (hlp_random(100) > 50)) {
        ai_playani(self, "T_POTION_RANDOM_2");
        npc_setstatetime(self, 0);
        self.aivar[18] = hlp_random(5) + 5;
    };
};

func void b_lookbottle(var c_npc self) {
    printdebugnpc(pd_ta_detail, "B_LookBottle");
    if (npc_getstatetime(self) >= self.aivar[18]) {
        ai_playani(self, "T_POTION_RANDOM_3");
        npc_setstatetime(self, 0);
        self.aivar[18] = hlp_random(5) + 5;
    };
};

func void b_drawjoint(var c_npc self) {
    printdebugnpc(pd_ta_detail, "B_DrawJoint");
    if (npc_getstatetime(self) >= self.aivar[18]) {
        ai_playani(self, "T_JOINT_RANDOM_1");
        npc_setstatetime(self, 0);
        self.aivar[18] = hlp_random(5) + 5;
    };
};

func void b_eatmeat(var c_npc self) {
    printdebugnpc(pd_ta_detail, "B_EatMeat");
    if (npc_getstatetime(self) >= self.aivar[18]) {
        ai_playani(self, "T_MEAT_RANDOM_1");
        npc_setstatetime(self, 0);
        self.aivar[18] = hlp_random(5) + 5;
    };
};

func void b_eatrice(var c_npc self) {
    printdebugnpc(pd_ta_detail, "B_EatRice");
    if ((npc_getstatetime(self) >= self.aivar[18]) && (hlp_random(1) == 1)) {
        ai_playani(self, "T_RICE_RANDOM_1");
        npc_setstatetime(self, 0);
        self.aivar[18] = hlp_random(5) + 5;
    }
    else {
        ai_playani(self, "T_RICE_RANDOM_2");
        npc_setstatetime(self, 0);
        self.aivar[18] = hlp_random(5) + 5;
    };
};

func void b_playitemrandoms(var c_npc self) {
    if (self.aivar[17] == ta_it_apple) {
        b_eatsmall(self);
    };
    if (self.aivar[17] == ta_it_loaf) {
        b_eathuge(self);
    };
    if (self.aivar[17] == ta_it_cheese) {
        b_eathuge(self);
    };
    if (((self.aivar[17] == ta_it_beer) || (self.aivar[17] == ta_it_booze)) || (self.aivar[17] == ta_it_wine)) {
        b_drinkbottle(self);
    };
    if (self.aivar[17] == ta_it_joint) {
        b_drawjoint(self);
    };
    if (self.aivar[17] == ta_it_meat) {
        b_eatmeat(self);
    };
    if (self.aivar[17] == ta_it_rice) {
        b_eatrice(self);
    };
    if (self.aivar[17] == ta_it_apple) {
        b_throwapple(self);
    };
    if ((self.aivar[17] == ta_it_beer) || (self.aivar[17] == ta_it_booze)) {
        b_lookbottle(self);
    };
    if (((self.aivar[17] == ta_it_beer) || (self.aivar[17] == ta_it_booze)) || (self.aivar[17] == ta_it_wine)) {
        b_wipemouth(self);
    };
};

func void b_chooseapple(var c_npc self) {
    printdebugnpc(pd_ta_detail, "B_ChooseApple");
    self.aivar[17] = ta_it_apple;
    if (npc_hasitems(self, itfoapple) == 0) {
        createinvitem(self, itfoapple);
    };
    ai_useitemtostate(self, itfoapple /*4302*/, 0);
    self.aivar[18] = 1;
};

func void b_chooseloaf(var c_npc self) {
    printdebugnpc(pd_ta_detail, "B_ChooseLoaf");
    self.aivar[17] = ta_it_loaf;
    if (npc_hasitems(self, itfoloaf) == 0) {
        createinvitem(self, itfoloaf);
    };
    ai_useitemtostate(self, itfoloaf /*4306*/, 0);
    self.aivar[18] = 1;
};

func void b_choosecheese(var c_npc self) {
    printdebugnpc(pd_ta_detail, "B_ChooseCheese");
    self.aivar[17] = ta_it_cheese;
    if (npc_hasitems(self, itfocheese) == 0) {
        createinvitem(self, itfocheese);
    };
    ai_useitemtostate(self, itfocheese /*4314*/, 0);
    self.aivar[18] = 1;
};

func void b_choosebeer(var c_npc self) {
    printdebugnpc(pd_ta_detail, "B_ChooseBeer");
    self.aivar[17] = ta_it_beer;
    if (npc_hasitems(self, itfobeer) == 0) {
        createinvitem(self, itfobeer);
    };
    ai_useitemtostate(self, itfobeer /*4326*/, 0);
    self.aivar[18] = 1;
};

func void b_choosemeat(var c_npc self) {
    printdebugnpc(pd_ta_detail, "B_ChooseMeat");
    self.aivar[17] = ta_it_meat;
    if (npc_hasitems(self, itfomutton) == 0) {
        createinvitem(self, itfomutton);
    };
    ai_useitemtostate(self, itfomutton /*4308*/, 0);
    self.aivar[18] = 1;
};

func void b_choosesoup(var c_npc self) {
    printdebugnpc(pd_ta_detail, "B_ChooseSoup");
    self.aivar[17] = ta_it_soup;
    if (npc_hasitems(self, itfosoup) == 0) {
        createinvitem(self, itfosoup);
    };
    ai_useitemtostate(self, itfosoup /*4318*/, 0);
    self.aivar[18] = 1;
};

func void b_chooserice(var c_npc self) {
    printdebugnpc(pd_ta_detail, "B_ChooseRice");
    self.aivar[17] = ta_it_rice;
    if (npc_hasitems(self, itforice) == 0) {
        createinvitem(self, itforice);
    };
    ai_useitemtostate(self, itforice /*4316*/, 0);
    self.aivar[18] = 1;
};

func void b_choosejoint(var c_npc self) {
    printdebugnpc(pd_ta_detail, "B_ChooseJoint");
    self.aivar[17] = ta_it_joint;
    if (npc_hasitems(self, itmijoint_1) == 0) {
        createinvitem(self, itmijoint_1);
    };
    ai_useitemtostate(self, itmijoint_1 /*4511*/, 0);
    self.aivar[18] = 1;
};

func void b_choosebooze(var c_npc self) {
    printdebugnpc(pd_ta_detail, "B_ChooseBooze");
    self.aivar[17] = ta_it_booze;
    if (npc_hasitems(self, itfobooze) == 0) {
        createinvitem(self, itfobooze);
    };
    ai_useitemtostate(self, itfobooze /*4330*/, 0);
    self.aivar[18] = 1;
};

func void b_choosewine(var c_npc self) {
    printdebugnpc(pd_ta_detail, "B_ChooseWine");
    self.aivar[17] = ta_it_wine;
    if (npc_hasitems(self, itfowine) == 0) {
        createinvitem(self, itfowine);
    };
    ai_useitemtostate(self, itfowine /*4328*/, 0);
    self.aivar[18] = 1;
};

func void b_pee(var c_npc self) {
    printdebugnpc(pd_ta_detail, "B_Pee");
    if (wld_isfpavailable(self, "PEE")) {
        ai_standup(self);
        ai_setwalkmode(self, npc_walk);
        ai_gotofp(self, "PEE");
        ai_playani(self, "T_PEE");
        ai_continueroutine(self);
    };
};

func void b_bored(var c_npc self) {
    var int choice;

    printdebugnpc(pd_ta_detail, "B_Bored");
    choice = hlp_random(100);
    if (choice < 20) {
        ai_playani(self, "T_BORINGKICK");
    }
    else if (choice < 30) {
        ai_playani(self, "R_SCRATCHLSHOULDER");
    }
    else if (choice < 40) {
        ai_playani(self, "R_SCRATCHRSHOULDER");
    }
    else if (choice < 60) {
        ai_playani(self, "R_SCRATCHEGG");
    }
    else if (choice < 80) {
        ai_playani(self, "R_SCRATCHHEAD");
    }
    else {
        if (choice < 100) {
            ai_playani(self, "R_LEGSHAKE");
        };
    };
    ai_wait(self, 1.0);
};

func void b_resetiterator(var c_npc self) {
    printdebugnpc(pd_ta_detail, "B_ResetIterator");
    if (self.aivar[15] >= 5000) {
        self.aivar[15] = 0;
        self.aivar[14] = 0;
    };
    self.aivar[15] += 1;
};

func void b_clearitem(var c_npc self) {
    printdebugnpc(pd_ta_detail, "B_ClearItem");
    if (self.aivar[17] == ta_it_apple) {
        ai_useitemtostate(self, itfoapple /*4302*/, -1);
    }
    else if (self.aivar[17] == ta_it_loaf) {
        ai_useitemtostate(self, itfoloaf /*4306*/, -1);
    }
    else if (self.aivar[17] == ta_it_cheese) {
        ai_useitemtostate(self, itfocheese /*4314*/, -1);
    }
    else if (self.aivar[17] == ta_it_beer) {
        ai_useitemtostate(self, itfobeer /*4326*/, -1);
    }
    else if (self.aivar[17] == ta_it_meat) {
        ai_useitemtostate(self, itfomutton /*4308*/, -1);
    }
    else if (self.aivar[17] == ta_it_soup) {
        ai_useitemtostate(self, itfosoup /*4318*/, -1);
    }
    else if (self.aivar[17] == ta_it_rice) {
        ai_useitemtostate(self, itforice /*4316*/, -1);
    }
    else if (self.aivar[17] == ta_it_joint) {
        ai_useitemtostate(self, itmijoint_1 /*4511*/, -1);
    }
    else if (self.aivar[17] == ta_it_booze) {
        ai_useitemtostate(self, itfobooze /*4330*/, -1);
    }
    else {
        if (self.aivar[17] == ta_it_wine) {
            ai_useitemtostate(self, itfowine /*4328*/, -1);
        };
    };
    self.aivar[17] = ta_it_none;
};

func void b_startusemob(var c_npc slf, var string mobname) {
    printdebugnpc(pd_ta_detail, "B_StartUseMob");
    if (!c_bodystatecontains(slf, bs_mobinteract)) {
        ai_setwalkmode(slf, npc_walk);
        if (hlp_strcmp(npc_getnearestwp(slf), slf.wp) == 0) {
            ai_gotowp(slf, slf.wp);
        };
        ai_usemob(slf, mobname, 1);
    };
};

func void b_stopusemob(var c_npc slf, var string mobname) {
    printdebugnpc(pd_ta_detail, "B_StopUseMob");
    ai_usemob(slf, mobname, -1);
};

func void zs_alignguard() {
    printdebugnpc(pd_ta_frame, "ZS_Guard");
    guardperception();
    npc_percenable(self, perc_assessplayer, b_assesssc);
    ai_standup(self);
    ai_setwalkmode(self, npc_walk);
    ai_gotowp(self, self.wp);
    ai_aligntowp(self);
    b_initarmor();
};

func void zs_alignguard_loop() {
    printdebugnpc(pd_ta_loop, "ZS_Guard_Loop");
    b_gotofp(self, "GUARD");
    b_playarmor();
    ai_wait(self, 0.5);
};

func void zs_alignguard_end() {
    printdebugnpc(pd_ta_frame, "ZS_Guard_End");
    b_exitarmor();
};

func void zs_arenaspectator() {
    occupiedperception();
    ai_gotowp(self, self.wp);
    ai_gotofp(self, "STAND");
    ai_aligntofp(self);
};

func int zs_arenaspectator_loop() {
    var int jubel;
    var int anim;
    var int wait;
    var float waitf;

    printdebugnpc(pd_ta_loop, "ZS_ArenaSpectator_Loop");
    npc_perceiveall(self);
    if (wld_detectnpc(self, -1, zs_attack, -1)) {
        jubel = hlp_random(100);
        if (jubel < 20) {
            printdebugnpc(pd_zs_check, "");
            ai_turntonpc(self, other);
            b_say(self, NULL, "$HEYHEYHEY");
        };
        anim = hlp_random(100);
        wait = hlp_random(2);
        waitf = inttofloat(wait);
        if (anim < 10) {
            ai_wait(self, waitf);
            ai_playani(self, "T_WATCHFIGHTRANDOM1");
        }
        else if (anim < 20) {
            ai_wait(self, waitf);
            ai_playani(self, "T_WATCHFIGHTRANDOM2");
        }
        else if (anim < 30) {
            ai_wait(self, waitf);
            ai_playani(self, "T_WATCHFIGHTRANDOM3");
        }
        else if (anim < 40) {
            ai_wait(self, waitf);
            ai_playani(self, "T_WATCHFIGHTRANDOM4");
        }
        else {
            if (anim < 60) {
                ai_wait(self, waitf);
                ai_playani(self, "T_WATCHFIGHTRANDOM5");
            };
        };
    };
    ai_wait(self, 1.0);
    return loop_continue;
};

func void zs_arenaspectator_end() {
    printdebugnpc(pd_ta_frame, "ZS_ArenaSpectator_End");
};

func void zs_bodyguard() {
    printdebugnpc(pd_ta_frame, "ZS_BodyGuard");
    b_setperception(self);
    ai_setwalkmode(self, npc_walk);
    if (!npc_isonfp(self, "BODYGUARD")) {
        ai_gotowp(self, self.wp);
    };
    if (wld_isfpavailable(self, "BODYGUARD")) {
        ai_gotofp(self, "BODYGUARD");
        ai_aligntofp(self);
    };
};

func void zs_bodyguard_loop() {
    printdebugnpc(pd_ta_loop, "ZS_BodyGuard_Loop");
    ai_wait(self, 1.0);
};

func void zs_bodyguard_end() {
    printdebugnpc(pd_ta_frame, "ZS_BodyGuard_End");
};

func void zs_boss() {
    guardperception();
    npc_percenable(self, perc_assessplayer, b_assesssc);
    ai_standup(self);
    ai_setwalkmode(self, npc_walk);
    if (!npc_isonfp(self, "FP_STAND")) {
        ai_gotowp(self, self.wp);
    };
    if (wld_isfpavailable(self, "FP_STAND")) {
        ai_gotofp(self, "FP_STAND");
        ai_aligntofp(self);
    }
    else {
        ai_aligntowp(self);
    };
    ai_playani(self, "T_STAND_2_HGUARD");
};

func void zs_boss_loop() {
    var int zufall;

    zufall = hlp_random(1000);
    if (zufall >= 950) {
        ai_playani(self, "T_HGUARD_2_STAND");
        ai_playani(self, "T_STAND_2_HGUARD");
    }
    else {
        if (zufall >= 600) {
            ai_playani(self, "T_HGUARD_LOOKAROUND");
        };
    };
};

func void zs_boss_end() {
    ai_playani(self, "T_HGUARD_2_STAND");
};

func void zs_cook() {
    printdebugnpc(pd_ta_frame, "ZS_Cook");
    b_setperception(self);
    if (!c_bodystatecontains(self, bs_mobinteract)) {
        ai_setwalkmode(self, npc_walk);
        if (hlp_strcmp(npc_getnearestwp(self), self.wp) == 0) {
            ai_gotowp(self, self.wp);
        };
        ai_usemob(self, "CAULDRON", 1);
    };
};

func int zs_cook_loop() {
    var int randomizer;

    printdebugnpc(pd_ta_loop, "ZS_Cook_Loop");
    randomizer = hlp_random(20);
    if (npc_getstatetime(self) >= (100 + randomizer)) {
        b_interruptmob("CAULDRON");
    };
    ai_wait(self, 1.0);
    return loop_continue;
};

func void zs_cook_end() {
    printdebugnpc(pd_ta_frame, "ZS_Cook_End");
    ai_usemob(self, "CAULDRON", -1);
};

func void zs_cookforme() {
    printdebugnpc(pd_ta_frame, "ZS_CookForMe");
    b_setperception(self);
    if (!c_bodystatecontains(self, bs_mobinteract)) {
        ai_setwalkmode(self, npc_walk);
        if (hlp_strcmp(npc_getnearestwp(self), self.wp) == 0) {
            ai_gotowp(self, self.wp);
        };
        ai_usemob(self, "PAN", 1);
    };
};

func int zs_cookforme_loop() {
    var int randomizer;

    printdebugnpc(pd_ta_loop, "ZS_CookForMe_Loop");
    randomizer = hlp_random(20);
    if (npc_getstatetime(self) >= (100 + randomizer)) {
        b_interruptmob("PAN");
    };
    ai_wait(self, 1.0);
    return loop_continue;
};

func void zs_cookforme_end() {
    printdebugnpc(pd_ta_frame, "ZS_CookForMe_End");
    ai_usemob(self, "PAN", -1);
    ai_useitem(self, itfomutton /*4308*/);
};

func void zs_ebr_hangaround() {
    printdebugnpc(pd_ta_frame, "ZS_Ebr_HangAround");
    observingperception();
    if (!c_bodystatecontains(self, bs_sit)) {
        ai_setwalkmode(self, npc_walk);
        if (hlp_strcmp(npc_getnearestwp(self), self.wp) == 0) {
            ai_gotowp(self, self.wp);
        };
        ai_usemob(self, "THRONE", 1);
    };
};

func int zs_ebr_hangaround_loop() {
    printdebugnpc(pd_ta_loop, "ZS_Ebr_HangAround_Loop");
    ai_wait(self, 1.0);
    return loop_continue;
};

func void zs_ebr_hangaround_end() {
    printdebugnpc(pd_ta_frame, "ZS_Ebr_HangAround_End");
    ai_usemob(self, "THRONE", -1);
};

func void zs_firespit() {
    printdebugnpc(pd_zs_frame, "ZS_Firespit");
    b_setperception(self);
    ai_setwalkmode(self, npc_walk);
    ai_gotowp(self, self.wp);
    ai_aligntowp(self);
    ai_removeweapon(self);
};

func int zs_firespit_loop() {
    var int spitreaktion;

    printdebugnpc(pd_zs_loop, "ZS_Firespit_Loop");
    if (npc_hasitems(self, itlstorchfirespit) <= 1) {
        createinvitem(self, itlstorchfirespit);
    };
    spitreaktion = hlp_random(100);
    if (spitreaktion >= 50) {
        ai_useitemtostate(self, itlstorchfirespit /*4506*/, 5);
        ai_useitemtostate(self, itlstorchfirespit /*4506*/, -1);
    };
    ai_wait(self, 1.0);
};

func void zs_firespit_end() {
    printdebugnpc(pd_zs_frame, "ZS_Firespit_End");
    ai_useitemtostate(self, itlstorchfirespit /*4506*/, -1);
};

func void zs_position() {
    printdebugnpc(pd_zs_frame, "ZS_Position");
    c_zsinit();
    npc_setperctime(self, 1.0);
    npc_percenable(self, perc_assessdamage, b_friendlyattack);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assesscaster, b_assesscaster);
    npc_percenable(self, perc_assessthreat, b_assessfighter);
    npc_percenable(self, perc_assessmurder, zs_assessmurder);
    npc_percenable(self, perc_assessdefeat, zs_assessdefeat);
    npc_percenable(self, perc_drawweapon, b_assessfighter);
    npc_percenable(self, perc_assessfightsound, b_assessfightsound);
    npc_percenable(self, perc_catchthief, zs_catchthief);
    npc_percenable(self, perc_assesstheft, b_assesstheft);
    npc_percenable(self, perc_assesstalk, b_assesstalk);
    npc_percenable(self, perc_assessplayer, b_assesssc);
    ai_setwalkmode(self, npc_walk);
    ai_gotowp(self, self.wp);
    ai_aligntowp(self);
};

func void zs_position_loop() {
    printdebugnpc(pd_zs_loop, "ZS_Position_Loop");
    ai_wait(self, 1.0);
    b_smartturntonpc(self, hero);
};

func void zs_position_end() {
    printdebugnpc(pd_zs_frame, "ZS_Position_End");
};

func void b_friendlyassesscall() {
    printdebugnpc(pd_zs_frame, "B_FriendlyAssessCall");
    ai_turntonpc(self, other);
    ai_playani(self, "T_COMEOVERHERE");
};

func void b_friendlyattack() {
    printdebugnpc(pd_zs_frame, "B_FriendlyAttack");
    b_fullstop(self);
    npc_settarget(self, other);
    ai_startstate(self, zs_friendlyattack, 0, "");
};

func void zs_friendlyattack() {
    printdebugnpc(pd_zs_frame, "ZS_FriendlyAttack");
    c_zsinit();
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assessremoveweapon, b_friendlyattackremoveweapon);
    npc_gettarget(self);
    b_drawweapon(self, other);
    c_lookatnpc(self, other);
};

func int zs_friendlyattack_loop() {
    printdebugnpc(pd_zs_loop, "ZS_FriendlyAttack_Loop");
    npc_gettarget(self);
    if (npc_isinstate(other, zs_unconscious)) {
        printglobals(pd_zs_check);
        b_say(self, other, "$LETSFORGETOURLITTLEFIGHT");
        return 1;
    };
    npc_getnexttarget(self);
    ai_attack(self);
    npc_gettarget(self);
    if (!hlp_isvalidnpc(other)) {
        printdebugnpc(pd_zs_frame, "...'other' invalid");
        return 1;
    };
    if (npc_getdisttonpc(self, other) > 1000) {
        printdebugnpc(pd_zs_frame, "...SC weiter als 10m entfernt!");
        if (npc_isinfightmode(other, fmode_far) || npc_isinfightmode(other, fmode_magic)) {
            printdebugnpc(pd_zs_frame, "...SC hat Fernkampfwaffe oder Magie!");
            ai_setwalkmode(self, npc_run);
            ai_gotonpc(self, other);
        }
        else {
            printdebugnpc(pd_zs_frame, "...SC hat Nahkampfwaffe");
            b_say(self, other, "$LETSFORGETOURLITTLEFIGHT");
            return 1;
        };
    };
    if (npc_isinfightmode(other, fmode_none)) {
        printdebugnpc(pd_zs_frame, "...SC hat keine Waffe mehr in der Hand!");
        b_say(self, other, "$LETSFORGETOURLITTLEFIGHT");
        return 1;
    };
    return 0;
};

func void zs_friendlyattack_end() {
    printdebugnpc(pd_zs_frame, "ZS_FriendlyAttack_End");
    c_stoplookat(self);
    ai_removeweapon(self);
};

func void b_friendlyattackremoveweapon() {
    printdebugnpc(pd_zs_frame, "B_FriendlyAttackRemoveWeapon");
    npc_clearaiqueue(self);
    ai_standup(self);
    b_say(self, other, "$LETSFORGETOURLITTLEFIGHT");
    ai_continueroutine(self);
};

func void b_followmode() {
    npc_percenable(self, perc_assessplayer, b_checkdisttoplayer);
    npc_percenable(self, perc_assessdamage, b_friendlyattack);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assesscaster, b_assesscaster);
    npc_percenable(self, perc_assessthreat, b_assessfighter);
    npc_percenable(self, perc_assessmurder, zs_assessmurder);
    npc_percenable(self, perc_assessdefeat, zs_assessdefeat);
    npc_percenable(self, perc_drawweapon, b_assessfighter);
    npc_percenable(self, perc_assessfightsound, b_assessfightsound);
    npc_percenable(self, perc_catchthief, zs_catchthief);
    npc_percenable(self, perc_assesstheft, b_assesstheft);
    npc_percenable(self, perc_assesstalk, b_assesstalk);
    npc_percenable(self, perc_assesscall, b_friendlyassesscall);
    npc_setperctime(self, 1.0);
    ai_setwalkmode(self, npc_run);
    ai_gotowp(self, self.wp);
};

func void zs_followmode() {
    printdebugnpc(pd_zs_frame, "ZS_FollowMode");
    b_followmode();
};

func void b_checkdisttoplayer() {
    printdebugnpc(pd_zs_frame, "B_CheckDistToPlayer");
    if (hlp_strcmp(npc_getnearestwp(self), self.wp)) {
    }
    else {
        if (npc_getdisttonpc(self, other) > perc_dist_intermediat) {
            printdebugnpc(pd_zs_check, "...SC zu weit weg!");
            npc_clearaiqueue(self);
            ai_standup(self);
            ai_turntonpc(self, other);
            b_say(self, other, "$CATCHUP");
            ai_startstate(self, zs_followmodewait, 1, "");
        };
    };
};

func void zs_followmodewait() {
    printdebugnpc(pd_zs_check, "ZS_FollowModeWait");
    c_zsinit();
    npc_percenable(self, perc_assessplayer, b_checkdisttoplayer);
    npc_percenable(self, perc_assessdamage, b_friendlyattack);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assesscaster, b_assesscaster);
    npc_percenable(self, perc_assessthreat, b_assessfighter);
    npc_percenable(self, perc_assessmurder, zs_assessmurder);
    npc_percenable(self, perc_assessdefeat, zs_assessdefeat);
    npc_percenable(self, perc_drawweapon, b_assessfighter);
    npc_percenable(self, perc_assessfightsound, b_assessfightsound);
    npc_percenable(self, perc_catchthief, zs_catchthief);
    npc_percenable(self, perc_assesstheft, b_assesstheft);
    npc_percenable(self, perc_assesstalk, b_assesstalk);
    npc_percenable(self, perc_assesscall, b_friendlyassesscall);
};

func void zs_followmodewait_loop() {
    printdebugnpc(pd_zs_loop, "ZS_FollowModeWait_Loop");
    if (npc_getdisttonpc(self, other) < 700) {
        ai_continueroutine(self);
    };
};

func void zs_followmodewait_end() {
    printdebugnpc(pd_zs_check, "ZS_FollowModeWait_End");
};

func void zs_followpc() {
    printdebugnpc(pd_ta_frame, "ZS_FollowPC");
    npc_percenable(self, perc_assessenemy, b_assessenemy);
    npc_percenable(self, perc_assessplayer, b_followpc_assesssc);
    npc_setperctime(self, 1.0);
    self.senses = (sense_see | sense_hear) | sense_smell;
    npc_percenable(self, perc_assessdamage, zs_reacttodamage);
    npc_percenable(self, perc_assesscaster, b_assesscaster);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assessmurder, zs_assessmurder);
    npc_percenable(self, perc_assessdefeat, zs_assessdefeat);
    npc_percenable(self, perc_assessfightsound, b_assessfightsound);
    npc_percenable(self, perc_assesstalk, b_assesstalk);
    npc_percenable(self, perc_movemob, b_movemob);
};

func int zs_followpc_loop() {
    printdebugnpc(pd_ta_loop, "ZS_FollowPC_Loop");
    printglobals(pd_mst_detail);
    if (npc_getdisttonpc(self, hero) > hai_dist_followpc) {
        if (!c_bodystatecontains(self, bs_swim)) {
            ai_setwalkmode(self, npc_run);
        };
        ai_gotonpc(self, hero);
    }
    else {
        b_smartturntonpc(self, hero);
    };
    ai_wait(self, 1.0);
    return loop_continue;
};

func void zs_followpc_end() {
    printdebugnpc(pd_ta_frame, "ZS_FollowPC_End");
    self.senses = hero.senses;
};

func void b_followpc_assesssc() {
    printdebugnpc(pd_ta_frame, "B_FollowPC_AssessSC");
    if (((npc_getdisttonpc(self, hero) < hai_dist_followpc) && (!c_bodystatecontains(other, bs_stand))) && (!c_bodystatecontains(self, bs_climb))) {
        printdebugnpc(pd_ta_check, "...SC-Meister jetzt nahe genug!");
        b_fullstop(self);
    };
    if (npc_checkinfo(self, 1)) {
        printdebugnpc(pd_ta_check, "...wichtige Info zu vergeben!");
        hero.aivar[22] = true;
        b_fullstop(other);
        b_fullstop(self);
        ai_startstate(self, zs_talk, 0, "");
        return;
    };
};

func void zs_guard() {
    printdebugnpc(pd_ta_frame, "ZS_Guard");
    guardperception();
    npc_percenable(self, perc_assessplayer, b_assesssc);
    ai_standup(self);
    ai_setwalkmode(self, npc_walk);
    if (!npc_isonfp(self, "GUARD")) {
        ai_gotowp(self, self.wp);
    };
    b_initarmor();
};

func void zs_guard_loop() {
    printdebugnpc(pd_ta_loop, "ZS_Guard_Loop");
    b_gotofp(self, "GUARD");
    if ((npc_getdisttonpc(self, hero) < 800) && npc_canseenpc(self, hero)) {
        b_smartturntonpc(self, hero);
    }
    else {
        ai_aligntofp(self);
    };
    b_playarmor();
    ai_wait(self, 0.5);
};

func void zs_guard_end() {
    printdebugnpc(pd_ta_frame, "ZS_Guard_End");
    b_exitarmor();
};

func void zs_guardpalisade() {
    guardperception();
    printdebugnpc(pd_ta_frame, "ZS_GuardPalisade");
    ai_standup(self);
    ai_setwalkmode(self, npc_walk);
    ai_gotowp(self, self.wp);
    b_initarmor();
};

func void zs_guardpalisade_loop() {
    printdebugnpc(pd_ta_loop, "ZS_GuardPalisade_Loop");
    if ((npc_getdisttonpc(self, hero) < hai_dist_watch) && (!c_bodystatecontains(hero, bs_sneak))) {
        b_smartturntonpc(self, hero);
    }
    else {
        b_playarmor();
        ai_aligntowp(self);
    };
    ai_wait(self, 1.0);
};

func void zs_guardpalisade_end() {
    printdebugnpc(pd_ta_frame, "ZS_GuardPalisade_End");
    b_exitarmor();
};

func void zs_guardpassage() {
    printdebugnpc(pd_ta_frame, "ZS_GuardPassage");
    guardperception();
    npc_percenable(self, perc_assessplayer, b_assesssc);
    npc_percenable(self, perc_assessquietsound, b_assesssc);
    npc_percdisable(self, perc_observeintruder);
    ai_standup(self);
    ai_setwalkmode(self, npc_walk);
    ai_gotowp(self, self.wp);
    ai_aligntowp(self);
    b_initarmor();
};

func int zs_guardpassage_loop() {
    printdebugnpc(pd_ta_loop, "ZS_GuardPassage_Loop");
    if (npc_getdisttowp(self, self.wp) > 200) {
        ai_setwalkmode(self, npc_run);
        ai_gotowp(self, self.wp);
        return loop_continue;
    }
    else {
        if (npc_getdisttonpc(self, hero) > hai_dist_guardpassage_attention) {
            ai_aligntowp(self);
        };
    };
    b_playarmor();
    ai_wait(self, 0.5);
    return loop_continue;
};

func void zs_guardpassage_end() {
    printdebugnpc(pd_ta_frame, "ZS_GuardPassage_End");
    b_exitarmor();
};

func void zs_guardpatrol() {
    printdebugnpc(pd_ta_frame, "ZS_GuardPatrol");
    guardperception();
    ai_standup(self);
    ai_setwalkmode(self, npc_walk);
    if (!hlp_strcmp(self.wp, npc_getnearestwp(self))) {
        ai_gotowp(self, self.wp);
    };
};

func void zs_guardpatrol_loop() {
    var string hlpwp1;
    var string hlpwp2;
    var int varianzcounter;
    var int hlprand;

    printdebugnpc(pd_ta_loop, "ZS_GuardPatrol_Loop");
    ai_gotowp(self, npc_getnearestwp(self));
    if (varianzcounter >= 2) {
        ai_gotowp(self, self.wp);
    }
    else {
        hlpwp1 = npc_getnearestwp(self);
        printdebugnpc(pd_ta_detail, hlpwp1);
        hlpwp2 = npc_getnextwp(self);
        printdebugnpc(pd_ta_detail, hlpwp2);
        ai_gotowp(self, hlpwp1);
        ai_gotowp(self, hlpwp2);
        hlprand = hlp_random(10000);
        if ((!hlp_strcmp(npc_getnearestwp(self), hlpwp1)) && (!hlp_strcmp(npc_getnearestwp(self), hlpwp2))) {
            printdebugnpc(pd_ta_detail, "Gehe zum dritten WP");
            ai_gotowp(self, npc_getnearestwp(self));
            if (hlprand != 666) {
                ai_playani(self, "T_SEARCH");
            };
        }
        else {
            printdebugnpc(pd_ta_detail, "Gehe zum zweiten WP");
            ai_gotowp(self, npc_getnextwp(other));
            ai_playani(self, "T_SEARCH");
            ai_wait(self, 10.0);
            ai_playani(self, "T_SEARCH");
            ai_gotowp(self, npc_getnearestwp(self));
        };
        varianzcounter += 1;
    };
    ai_wait(self, 1.0);
};

func void zs_guardpatrol_end() {
    printdebugnpc(pd_ta_frame, "ZS_GuardPatrol_End");
};

func void zs_guardwheelclosed() {
    printdebugnpc(pd_ta_frame, "ZS_GuardWheelClosed");
    guardperception();
    ai_standup(self);
    ai_setwalkmode(self, npc_walk);
    ai_gotowp(self, self.wp);
};

func int zs_guardwheelclosed_loop() {
    printdebugnpc(pd_ta_loop, "ZS_GuardWheelClosed_Loop");
    if (wld_getmobstate(self, "VWHEEL") == 0) {
        printdebugnpc(pd_ta_check, "...Tor offen!");
        ai_usemob(self, "VWHEEL", 1);
        ai_usemob(self, "VWHEEL", -1);
        ai_aligntowp(self);
    };
    if (npc_getdisttowp(self, self.wp) > 200) {
        ai_setwalkmode(self, npc_run);
        ai_gotowp(self, self.wp);
        return loop_continue;
    }
    else {
        if (npc_getdisttonpc(self, hero) > hai_dist_guardpassage_attention) {
            ai_aligntowp(self);
        };
    };
    ai_wait(self, 1.0);
    return loop_continue;
};

func void zs_guardwheelclosed_end() {
    printdebugnpc(pd_ta_frame, "ZS_GuardWheelClosed_End");
};

func void zs_guardwheelopen() {
    printdebugnpc(pd_ta_frame, "ZS_GuardWheelOpen");
    guardperception();
    ai_standup(self);
    ai_setwalkmode(self, npc_walk);
    ai_gotowp(self, self.wp);
};

func int zs_guardwheelopen_loop() {
    printdebugnpc(pd_ta_loop, "ZS_GuardWheelOpen_Loop");
    if (wld_getmobstate(self, "VWHEEL") == 1) {
        printdebugnpc(pd_ta_check, "...Tor geschlossen!");
        ai_usemob(self, "VWHEEL", 0);
        ai_usemob(self, "VWHEEL", -1);
        ai_aligntowp(self);
    };
    if (npc_getdisttowp(self, self.wp) > 200) {
        ai_setwalkmode(self, npc_run);
        ai_gotowp(self, self.wp);
        return loop_continue;
    }
    else {
        if (npc_getdisttonpc(self, hero) > hai_dist_guardpassage_attention) {
            ai_aligntowp(self);
        };
    };
    ai_wait(self, 1.0);
    return loop_continue;
};

func void zs_guardwheelopen_end() {
    printdebugnpc(pd_ta_frame, "ZS_GuardWheelOpen_End");
};

func void b_guidepc_assessenemy() {
    printdebugnpc(pd_ta_check, "B_GuidePC_AssessEnemy");
    printglobals(pd_ta_check);
    if (npc_getdisttonpc(self, other) < hai_dist_assess_monster) {
        b_assessenemy();
    };
};

func void b_guidepc_assessplayer() {
    printdebugnpc(pd_ta_check, "B_GuidePC_AssessPlayer");
    printglobals(pd_ta_check);
    if (npc_getdisttonpc(self, hero) > hai_dist_guidepc) {
        printdebugnpc(pd_ta_check, "...Spieler zu weit entfernt!");
        b_fullstop(self);
        b_smartturntonpc(self, hero);
    }
    else {
        if (npc_canseenpc(self, hero)) {
            b_assesssc();
        };
    };
};

func void b_guidepc_assesscall() {
    printdebugnpc(pd_zs_frame, "B_GuidePC_AssessCall");
    ai_turntonpc(self, other);
    ai_playani(self, "T_COMEOVERHERE");
};

func void zs_guidepc() {
    printdebugnpc(pd_ta_frame, "ZS_GuidePC");
    npc_percenable(self, perc_assessenemy, b_guidepc_assessenemy);
    npc_percenable(self, perc_assessplayer, b_guidepc_assessplayer);
    npc_setperctime(self, 1.0);
    self.senses_range = perc_dist_max;
    self.senses = (sense_smell | sense_see) | sense_hear;
    npc_percenable(self, perc_assessdamage, zs_reacttodamage);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assessmurder, zs_assessmurder);
    npc_percenable(self, perc_assessdefeat, zs_assessdefeat);
    npc_percenable(self, perc_assessfightsound, b_assessfightsound);
    npc_percenable(self, perc_assesstalk, b_assesstalk);
    npc_percenable(self, perc_assesscall, b_guidepc_assesscall);
};

func int zs_guidepc_loop() {
    printdebugnpc(pd_ta_loop, "ZS_GuidePC_Loop");
    printglobals(pd_ta_check);
    if (npc_getdisttonpc(self, hero) > hai_dist_guidepc) {
        b_guidepc_assessplayer();
    }
    else if (npc_getdisttowp(self, self.wp) > perc_dist_dialog) {
        printdebugnpc(pd_ta_check, "...Ziel noch zu weit entfernt!");
        if (!c_bodystatecontains(self, bs_swim)) {
            ai_setwalkmode(self, npc_run);
        };
        ai_stoplookat(self);
        ai_gotowp(self, self.wp);
    }
    else {
        b_smartturntonpc(self, hero);
    };
    ai_wait(self, 1.0);
    return loop_continue;
};

func int zs_guidepc_end() {
    printdebugnpc(pd_ta_frame, "ZS_GuidePC_End");
    self.senses_range = hero.senses_range;
    self.senses = hero.senses;
};

func void zs_herbalchemy() {
    printdebugnpc(pd_ta_frame, "ZS_HerbAlchemy");
    b_setperception(self);
    if (!c_bodystatecontains(self, bs_mobinteract)) {
        ai_setwalkmode(self, npc_walk);
        if (hlp_strcmp(npc_getnearestwp(self), self.wp) == 0) {
            ai_gotowp(self, self.wp);
        };
        ai_usemob(self, "HERB", 1);
    };
};

func int zs_herbalchemy_loop() {
    var int randomizer;

    printdebugnpc(pd_ta_loop, "ZS_HerbAlchemy_Loop");
    randomizer = hlp_random(20);
    if (npc_getstatetime(self) >= (100 + randomizer)) {
        b_interruptmob("HERB");
    };
    ai_wait(self, 1.0);
    return loop_continue;
};

func void zs_herbalchemy_end() {
    printdebugnpc(pd_ta_frame, "ZS_HerbAlchemy_End");
    ai_usemob(self, "HERB", -1);
};

func void zs_hostileguard() {
    printdebugnpc(pd_ta_frame, "ZS_HostileGuard");
    npc_setattitude(self, att_hostile);
    npc_settempattitude(self, att_hostile);
    guardperception();
    npc_percenable(self, perc_assessplayer, b_assesssc);
    self.senses = (sense_see | sense_hear) | sense_smell;
    self.senses_range = 2500;
    ai_standup(self);
    ai_setwalkmode(self, npc_walk);
    ai_gotowp(self, self.wp);
    ai_aligntowp(self);
    b_initarmor();
};

func void zs_hostileguard_loop() {
    printdebugnpc(pd_ta_loop, "ZS_HostileGuard_Loop");
    b_gotofp(self, "GUARD");
    b_playarmor();
    ai_wait(self, 0.5);
};

func void zs_hostileguard_end() {
    printdebugnpc(pd_ta_frame, "ZS_HostileGuard_End");
    b_exitarmor();
};

func void zs_ieflail() {
    printdebugnpc(pd_ta_frame, "ZS_IEFLAIL");
    ai_setwalkmode(self, npc_walk);
    ai_gotowp(self, self.wp);
    ai_aligntowp(self);
};

func int zs_ieflail_loop() {
    printdebugnpc(pd_ta_loop, "ZS_IEFLAIL_Loop");
    if (inextremoplaying) {
        ai_usemob(self, "PAUKE", 1);
        ai_usemob(self, "PAUKE", 0);
        ai_usemob(self, "PAUKE", 1);
        ai_usemob(self, "PAUKE", 0);
        ai_usemob(self, "PAUKE", 1);
        ai_usemob(self, "PAUKE", 0);
        ai_usemob(self, "PAUKE", 1);
        ai_usemob(self, "PAUKE", 0);
        ai_usemob(self, "PAUKE", 1);
        ai_usemob(self, "PAUKE", 0);
        ai_usemob(self, "PAUKE", 1);
        ai_usemob(self, "PAUKE", 0);
        ai_usemob(self, "PAUKE", 1);
        ai_usemob(self, "PAUKE", 0);
        ai_usemob(self, "PAUKE", 1);
        ai_usemob(self, "PAUKE", 0);
        ai_usemob(self, "PAUKE", 1);
        ai_usemob(self, "PAUKE", 2);
        ai_usemob(self, "PAUKE", 1);
        ai_usemob(self, "PAUKE", 2);
        ai_usemob(self, "PAUKE", 1);
        ai_usemob(self, "PAUKE", 2);
        ai_usemob(self, "PAUKE", 1);
        ai_usemob(self, "PAUKE", 2);
        ai_usemob(self, "PAUKE", 1);
        ai_usemob(self, "PAUKE", 0);
        ai_usemob(self, "PAUKE", 1);
        ai_usemob(self, "PAUKE", 0);
        ai_usemob(self, "PAUKE", 1);
        ai_usemob(self, "PAUKE", 0);
        ai_usemob(self, "PAUKE", 1);
        ai_usemob(self, "PAUKE", 0);
        ai_usemob(self, "PAUKE", 1);
        ai_usemob(self, "PAUKE", 0);
        ai_usemob(self, "PAUKE", 1);
        ai_usemob(self, "PAUKE", 2);
        ai_usemob(self, "PAUKE", 1);
        ai_usemob(self, "PAUKE", 2);
        ai_usemob(self, "PAUKE", 1);
        ai_usemob(self, "PAUKE", 2);
        ai_usemob(self, "PAUKE", 1);
        ai_usemob(self, "PAUKE", 2);
        ai_usemob(self, "PAUKE", 1);
        ai_usemob(self, "PAUKE", 0);
        ai_usemob(self, "PAUKE", 1);
        ai_usemob(self, "PAUKE", 0);
        ai_usemob(self, "PAUKE", 1);
        ai_usemob(self, "PAUKE", 0);
        ai_usemob(self, "PAUKE", 1);
        ai_usemob(self, "PAUKE", 0);
        ai_usemob(self, "PAUKE", 1);
        ai_usemob(self, "PAUKE", 0);
        ai_usemob(self, "PAUKE", 1);
        ai_usemob(self, "PAUKE", 0);
        ai_usemob(self, "PAUKE", 1);
        ai_usemob(self, "PAUKE", 2);
        ai_usemob(self, "PAUKE", 1);
        ai_usemob(self, "PAUKE", 2);
        ai_usemob(self, "PAUKE", 1);
        ai_usemob(self, "PAUKE", 2);
        ai_usemob(self, "PAUKE", 1);
        ai_usemob(self, "PAUKE", 2);
        ai_usemob(self, "PAUKE", 1);
        ai_usemob(self, "PAUKE", 2);
        ai_usemob(self, "PAUKE", 1);
        ai_usemob(self, "PAUKE", 2);
        ai_usemob(self, "PAUKE", 1);
        ai_usemob(self, "PAUKE", 2);
        ai_usemob(self, "PAUKE", 1);
        ai_usemob(self, "PAUKE", 2);
        ai_usemob(self, "PAUKE", 1);
        ai_usemob(self, "PAUKE", 2);
        ai_usemob(self, "PAUKE", 1);
        ai_usemob(self, "PAUKE", 2);
        ai_usemob(self, "PAUKE", 1);
        ai_usemob(self, "PAUKE", 2);
        ai_usemob(self, "PAUKE", 1);
        ai_usemob(self, "PAUKE", 2);
        ai_usemob(self, "PAUKE", -1);
    };
    return loop_continue;
};

func void zs_ieflail_end() {
    printdebugnpc(pd_ta_frame, "ZS_IEFLAIL_End");
    ai_usemob(self, "PAUKE", -1);
};

func void zs_ieflex() {
    printdebugnpc(pd_ta_frame, "ZS_IEFLEX");
    ai_setwalkmode(self, npc_walk);
    ai_gotowp(self, self.wp);
    ai_usemob(self, "MPIPE", 1);
};

func int zs_ieflex_loop() {
    printdebugnpc(pd_ta_loop, "ZS_IEFLEX_Loop");
    if (inextremoplaying) {
        ai_usemob(self, "MPIPE", 3);
        ai_usemob(self, "MPIPE", 2);
        ai_usemob(self, "MPIPE", 3);
        ai_usemob(self, "MPIPE", 4);
        ai_usemob(self, "MPIPE", 5);
        ai_usemob(self, "MPIPE", 6);
        ai_usemob(self, "MPIPE", 7);
        ai_usemob(self, "MPIPE", 6);
        ai_usemob(self, "MPIPE", 5);
        ai_usemob(self, "MPIPE", 4);
        ai_usemob(self, "MPIPE", 5);
        ai_usemob(self, "MPIPE", 6);
        ai_usemob(self, "MPIPE", 4);
        ai_usemob(self, "MPIPE", 6);
        ai_usemob(self, "MPIPE", 8);
        ai_usemob(self, "MPIPE", 7);
        ai_usemob(self, "MPIPE", 6);
        ai_usemob(self, "MPIPE", 7);
        ai_usemob(self, "MPIPE", 6);
        ai_usemob(self, "MPIPE", 7);
        ai_usemob(self, "MPIPE", 6);
        ai_usemob(self, "MPIPE", 5);
        ai_usemob(self, "MPIPE", 6);
        ai_usemob(self, "MPIPE", 5);
        ai_usemob(self, "MPIPE", 3);
        ai_usemob(self, "MPIPE", 4);
        ai_usemob(self, "MPIPE", 3);
        ai_usemob(self, "MPIPE", 4);
        ai_usemob(self, "MPIPE", 5);
        ai_usemob(self, "MPIPE", 6);
        ai_usemob(self, "MPIPE", 4);
        ai_usemob(self, "MPIPE", 6);
        ai_usemob(self, "MPIPE", 4);
        ai_usemob(self, "MPIPE", 5);
        ai_usemob(self, "MPIPE", -1);
    };
    return loop_continue;
};

func void zs_ieflex_end() {
    printdebugnpc(pd_ta_frame, "ZS_IEFLEX_End");
    ai_usemob(self, "MPIPE", -1);
};

func void zs_ielutter() {
    printdebugnpc(pd_ta_frame, "ZS_IELUTTER");
    ai_setwalkmode(self, npc_walk);
    ai_gotowp(self, self.wp);
    ai_aligntowp(self);
};

func int zs_ielutter_loop() {
    printdebugnpc(pd_ta_loop, "ZS_IELUTTER_Loop");
    if (inextremoplaying) {
        ai_usemob(self, "MDRUMSCHEIT", 1);
        ai_usemob(self, "MDRUMSCHEIT", 2);
        ai_usemob(self, "MDRUMSCHEIT", 1);
        ai_usemob(self, "MDRUMSCHEIT", 2);
        ai_usemob(self, "MDRUMSCHEIT", 1);
        ai_usemob(self, "MDRUMSCHEIT", 2);
        ai_usemob(self, "MDRUMSCHEIT", 1);
        ai_usemob(self, "MDRUMSCHEIT", 2);
        ai_usemob(self, "MDRUMSCHEIT", 3);
        ai_usemob(self, "MDRUMSCHEIT", 2);
        ai_usemob(self, "MDRUMSCHEIT", 3);
        ai_usemob(self, "MDRUMSCHEIT", 2);
        ai_usemob(self, "MDRUMSCHEIT", 1);
        ai_usemob(self, "MDRUMSCHEIT", 2);
        ai_usemob(self, "MDRUMSCHEIT", 1);
        ai_usemob(self, "MDRUMSCHEIT", 2);
        ai_usemob(self, "MDRUMSCHEIT", 1);
        ai_usemob(self, "MDRUMSCHEIT", 2);
        ai_usemob(self, "MDRUMSCHEIT", 3);
        ai_usemob(self, "MDRUMSCHEIT", 2);
        ai_usemob(self, "MDRUMSCHEIT", 3);
        ai_usemob(self, "MDRUMSCHEIT", 2);
        ai_usemob(self, "MDRUMSCHEIT", 3);
        ai_usemob(self, "MDRUMSCHEIT", 2);
        ai_usemob(self, "MDRUMSCHEIT", 1);
        ai_usemob(self, "MDRUMSCHEIT", 2);
        ai_usemob(self, "MDRUMSCHEIT", 1);
        ai_usemob(self, "MDRUMSCHEIT", 2);
        ai_usemob(self, "MDRUMSCHEIT", 3);
        ai_usemob(self, "MDRUMSCHEIT", 2);
        ai_usemob(self, "MDRUMSCHEIT", 3);
        ai_usemob(self, "MDRUMSCHEIT", 2);
        ai_usemob(self, "MDRUMSCHEIT", 3);
        ai_usemob(self, "MDRUMSCHEIT", 2);
        ai_usemob(self, "MDRUMSCHEIT", 3);
        ai_usemob(self, "MDRUMSCHEIT", 2);
        ai_usemob(self, "MDRUMSCHEIT", 3);
        ai_usemob(self, "MDRUMSCHEIT", 2);
        ai_usemob(self, "MDRUMSCHEIT", 3);
        ai_usemob(self, "MDRUMSCHEIT", -1);
    };
    return loop_continue;
};

func void zs_ielutter_end() {
    ai_usemob(self, "MDRUMSCHEIT", -1);
    printdebugnpc(pd_ta_frame, "ZS_IELUTTER_End");
};

func void zs_iepfeiffer() {
    printdebugnpc(pd_ta_frame, "ZS_IEPFEIFFER");
    ai_setwalkmode(self, npc_walk);
    ai_gotowp(self, self.wp);
    ai_aligntowp(self);
};

func int zs_iepfeiffer_loop() {
    printdebugnpc(pd_ta_loop, "ZS_IEPFEIFFER_Loop");
    if (inextremoplaying) {
        ai_usemob(self, "MPIPE", 1);
        ai_usemob(self, "MPIPE", 1);
        ai_usemob(self, "MPIPE", 2);
        ai_usemob(self, "MPIPE", 1);
        ai_usemob(self, "MPIPE", 2);
        ai_usemob(self, "MPIPE", 3);
        ai_usemob(self, "MPIPE", 4);
        ai_usemob(self, "MPIPE", 3);
        ai_usemob(self, "MPIPE", 4);
        ai_usemob(self, "MPIPE", 3);
        ai_usemob(self, "MPIPE", 4);
        ai_usemob(self, "MPIPE", 3);
        ai_usemob(self, "MPIPE", 4);
        ai_usemob(self, "MPIPE", 3);
        ai_usemob(self, "MPIPE", 4);
        ai_usemob(self, "MPIPE", 5);
        ai_usemob(self, "MPIPE", 4);
        ai_usemob(self, "MPIPE", 5);
        ai_usemob(self, "MPIPE", 4);
        ai_usemob(self, "MPIPE", 3);
        ai_usemob(self, "MPIPE", 4);
        ai_usemob(self, "MPIPE", 3);
        ai_usemob(self, "MPIPE", 4);
        ai_usemob(self, "MPIPE", 3);
        ai_usemob(self, "MPIPE", 4);
        ai_usemob(self, "MPIPE", 3);
        ai_usemob(self, "MPIPE", 4);
        ai_usemob(self, "MPIPE", 6);
        ai_usemob(self, "MPIPE", 5);
        ai_usemob(self, "MPIPE", 6);
        ai_usemob(self, "MPIPE", 7);
        ai_usemob(self, "MPIPE", 6);
        ai_usemob(self, "MPIPE", 7);
        ai_usemob(self, "MPIPE", 2);
        ai_usemob(self, "MPIPE", 3);
        ai_usemob(self, "MPIPE", 2);
        ai_usemob(self, "MPIPE", 3);
        ai_usemob(self, "MPIPE", 2);
        ai_usemob(self, "MPIPE", 3);
        ai_usemob(self, "MPIPE", -1);
    };
    return loop_continue;
};

func void zs_iepfeiffer_end() {
    ai_usemob(self, "MPIPE", -1);
    printdebugnpc(pd_ta_frame, "ZS_IEPFEIFFER_End");
};

func void zs_iepymonte() {
    printdebugnpc(pd_ta_frame, "ZS_IEPYMONTE");
    ai_setwalkmode(self, npc_walk);
    ai_gotowp(self, self.wp);
    ai_aligntowp(self);
};

func int zs_iepymonte_loop() {
    printdebugnpc(pd_ta_loop, "ZS_IEPYMONTE_Loop");
    if (inextremoplaying) {
        ai_usemob(self, "MHARP", 1);
        ai_usemob(self, "MHARP", 2);
        ai_usemob(self, "MHARP", 1);
        ai_usemob(self, "MHARP", 2);
        ai_usemob(self, "MHARP", 1);
        ai_usemob(self, "MHARP", 2);
        ai_usemob(self, "MHARP", 3);
        ai_usemob(self, "MHARP", 2);
        ai_usemob(self, "MHARP", 3);
        ai_usemob(self, "MHARP", 4);
        ai_usemob(self, "MHARP", 3);
        ai_usemob(self, "MHARP", 2);
        ai_usemob(self, "MHARP", 1);
        ai_usemob(self, "MHARP", 2);
        ai_usemob(self, "MHARP", 3);
        ai_usemob(self, "MHARP", 4);
        ai_usemob(self, "MHARP", 3);
        ai_usemob(self, "MHARP", 4);
        ai_usemob(self, "MHARP", 5);
        ai_usemob(self, "MHARP", 4);
        ai_usemob(self, "MHARP", 3);
        ai_usemob(self, "MHARP", -1);
    };
    return loop_continue;
};

func void zs_iepymonte_end() {
    ai_usemob(self, "MHARP", -1);
    printdebugnpc(pd_ta_frame, "ZS_IEPYMONTE_End");
};

func void zs_iethomas() {
    printdebugnpc(pd_ta_frame, "ZS_IETHOMAS");
    ai_setwalkmode(self, npc_walk);
    ai_gotowp(self, self.wp);
    ai_aligntowp(self);
};

func int zs_iethomas_loop() {
    printdebugnpc(pd_ta_loop, "ZS_IETHOMAS_Loop");
    if (inextremoplaying) {
        ai_usemob(self, "MCELLO", 1);
        ai_usemob(self, "MCELLO", 2);
        ai_usemob(self, "MCELLO", 1);
        ai_usemob(self, "MCELLO", 2);
        ai_usemob(self, "MCELLO", 1);
        ai_usemob(self, "MCELLO", 2);
        ai_usemob(self, "MCELLO", 1);
        ai_usemob(self, "MCELLO", 2);
        ai_usemob(self, "MCELLO", 1);
        ai_usemob(self, "MCELLO", 2);
        ai_usemob(self, "MCELLO", 3);
        ai_usemob(self, "MCELLO", 2);
        ai_usemob(self, "MCELLO", 3);
        ai_usemob(self, "MCELLO", 2);
        ai_usemob(self, "MCELLO", 3);
        ai_usemob(self, "MCELLO", 2);
        ai_usemob(self, "MCELLO", 3);
        ai_usemob(self, "MCELLO", 2);
        ai_usemob(self, "MCELLO", 3);
        ai_usemob(self, "MCELLO", 2);
        ai_usemob(self, "MCELLO", 1);
        ai_usemob(self, "MCELLO", 2);
        ai_usemob(self, "MCELLO", 1);
        ai_usemob(self, "MCELLO", 2);
        ai_usemob(self, "MCELLO", 3);
        ai_usemob(self, "MCELLO", 2);
        ai_usemob(self, "MCELLO", 3);
        ai_usemob(self, "MCELLO", 2);
        ai_usemob(self, "MCELLO", 3);
        ai_usemob(self, "MCELLO", 2);
        ai_usemob(self, "MCELLO", 3);
        ai_usemob(self, "MCELLO", 2);
        ai_usemob(self, "MCELLO", 3);
        ai_usemob(self, "MCELLO", 2);
        ai_usemob(self, "MCELLO", 1);
        ai_usemob(self, "MCELLO", 2);
        ai_usemob(self, "MCELLO", 1);
        ai_usemob(self, "MCELLO", 2);
        ai_usemob(self, "MCELLO", 1);
        ai_usemob(self, "MCELLO", 2);
        ai_usemob(self, "MCELLO", 1);
        ai_usemob(self, "MCELLO", 2);
        ai_usemob(self, "MCELLO", 3);
        ai_usemob(self, "MCELLO", 2);
        ai_usemob(self, "MCELLO", 3);
        ai_usemob(self, "MCELLO", 2);
        ai_usemob(self, "MCELLO", 3);
        ai_usemob(self, "MCELLO", 2);
        ai_usemob(self, "MCELLO", 3);
        ai_usemob(self, "MCELLO", 2);
        ai_usemob(self, "MCELLO", 1);
        ai_usemob(self, "MCELLO", 2);
        ai_usemob(self, "MCELLO", 3);
        ai_usemob(self, "MCELLO", 2);
        ai_usemob(self, "MCELLO", 3);
        ai_usemob(self, "MCELLO", 2);
        ai_usemob(self, "MCELLO", -1);
    };
    return loop_continue;
};

func void zs_iethomas_end() {
    ai_usemob(self, "MCELLO", -1);
    printdebugnpc(pd_ta_frame, "ZS_IETHOMAS_End");
};

func void zs_ieunicorn() {
    printdebugnpc(pd_ta_frame, "ZS_IEUNICORN");
    ai_setwalkmode(self, npc_walk);
    ai_gotowp(self, self.wp);
    ai_aligntowp(self);
};

func int zs_ieunicorn_loop() {
    printdebugnpc(pd_ta_loop, "ZS_IEUNICORN_Loop");
    if (inextremoplaying) {
        ai_usemob(self, "MLUTE", 1);
        ai_usemob(self, "MLUTE", 2);
        ai_usemob(self, "MLUTE", 1);
        ai_usemob(self, "MLUTE", 2);
        ai_usemob(self, "MLUTE", 1);
        ai_usemob(self, "MLUTE", 2);
        ai_usemob(self, "MLUTE", 1);
        ai_usemob(self, "MLUTE", 2);
        ai_usemob(self, "MLUTE", 2);
        ai_usemob(self, "MLUTE", 3);
        ai_usemob(self, "MLUTE", 2);
        ai_usemob(self, "MLUTE", 1);
        ai_usemob(self, "MLUTE", 2);
        ai_usemob(self, "MLUTE", 1);
        ai_usemob(self, "MLUTE", 2);
        ai_usemob(self, "MLUTE", 1);
        ai_usemob(self, "MLUTE", 2);
        ai_usemob(self, "MLUTE", 3);
        ai_usemob(self, "MLUTE", 2);
        ai_usemob(self, "MLUTE", 3);
        ai_usemob(self, "MLUTE", 2);
        ai_usemob(self, "MLUTE", 3);
        ai_usemob(self, "MLUTE", 2);
        ai_usemob(self, "MLUTE", 1);
        ai_usemob(self, "MLUTE", 2);
        ai_usemob(self, "MLUTE", 1);
        ai_usemob(self, "MLUTE", 2);
        ai_usemob(self, "MLUTE", 3);
        ai_usemob(self, "MLUTE", 1);
        ai_usemob(self, "MLUTE", 2);
        ai_usemob(self, "MLUTE", -1);
    };
    return loop_continue;
};

func void zs_ieunicorn_end() {
    printdebugnpc(pd_ta_frame, "ZS_IEUNICORN_End");
    ai_usemob(self, "MLUTE", -1);
};

func void zs_intercept() {
    printdebugnpc(pd_ta_frame, "ZS_Intercept");
    npc_percenable(self, perc_assessenemy, b_assessenemy);
    npc_percenable(self, perc_assessplayer, b_assesssc);
    npc_percenable(self, perc_assessdamage, b_interceptassessdamage);
    npc_percenable(self, perc_assessmagic, b_interceptassessmagic);
    npc_percenable(self, perc_assesscaster, b_assesssc);
    npc_percenable(self, perc_assessthreat, b_assesssc);
    npc_setperctime(self, 0.5);
    ai_standup(self);
    ai_setwalkmode(self, npc_walk);
    ai_gotowp(self, self.wp);
    ai_aligntowp(self);
};

func int zs_intercept_loop() {
    printdebugnpc(pd_ta_loop, "ZS_Intercept_Loop");
    ai_wait(self, 1.0);
    return loop_continue;
};

func void zs_intercept_end() {
    printdebugnpc(pd_ta_frame, "ZS_Intercept_End");
};

func void b_interceptassessdamage() {
    printdebugnpc(pd_ta_frame, "B_InterceptAssessDamage");
    if (npc_checkinfo(self, 1)) {
        printdebugnpc(pd_zs_check, "...wichtige Info zu vergeben!");
        hero.aivar[22] = true;
        b_fullstop(self);
        ai_startstate(self, zs_talk, 1, "");
        return;
    }
    else {
        b_fullstop(self);
        ai_startstate(self, zs_reacttodamage, 0, "");
    };
};

func void b_interceptassessmagic() {
    printdebugnpc(pd_ta_frame, "B_InterceptAssessMagic");
    if (npc_checkinfo(self, 1)) {
        printdebugnpc(pd_zs_check, "...wichtige Info zu vergeben!");
        hero.aivar[22] = true;
        b_fullstop(self);
        ai_startstate(self, zs_talk, 1, "");
        return;
    }
    else {
        b_fullstop(self);
        b_assessmagic();
    };
};

func void zs_listen() {
    printdebugnpc(pd_ta_frame, "ZS_LISTEN");
    occupiedperception();
    if (!c_bodystatecontains(self, bs_sit)) {
        ai_gotowp(self, self.wp);
    };
};

func void zs_listen_loop() {
    printdebugnpc(pd_ta_loop, "ZS_LISTEN");
    b_gotofp(self, "LISTEN");
    if (!c_bodystatecontains(self, bs_sit)) {
        ai_playanibs(self, "T_STAND_2_SIT", bs_sit);
    };
    npc_perceiveall(self);
    if (wld_detectnpc(self, -1, zs_teaching, -1)) {
        c_lookatnpc(self, other);
    };
    ai_wait(self, 1.0);
};

func void zs_listen_end() {
    printdebugnpc(pd_ta_frame, "ZS_Listen_End");
    if (c_bodystatecontains(self, bs_sit)) {
        ai_playanibs(self, "T_SIT_2_STAND", bs_stand);
        c_stoplookat(self);
    };
};

func void zs_mchunting() {
    printdebugnpc(pd_ta_frame, "ZS_MCHunting");
    observingperception();
    ai_setwalkmode(self, npc_walk);
    ai_gotowp(self, self.wp);
};

func void zs_mchunting_loop() {
    printdebugnpc(pd_ta_loop, "ZS_MCHunting_End");
    if (wld_detectnpc(self, -1, NOFUNC, gil_minecrawler)) {
        printdebugnpc(pd_ta_check, "MineCrawler detect");
        npc_settarget(self, other);
        npc_gettarget(self);
        ai_startstate(self, zs_assessmonster, 0, "");
    }
    else {
        ai_gotowp(self, npc_getnextwp(self));
        ai_gotowp(self, npc_getnearestwp(self));
    };
};

func void zs_mchunting_end() {
    printdebugnpc(pd_ta_frame, "ZS_MCHunting_End");
};

func void zs_meditate() {
    printdebugnpc(pd_ta_frame, "ZS_Meditate");
    b_setperception(self);
    ai_setwalkmode(self, npc_walk);
    if (!npc_isonfp(self, "MEDITATE")) {
        ai_gotowp(self, self.wp);
    };
    if (wld_isfpavailable(self, "MEDITATE")) {
        ai_gotofp(self, "MEDITATE");
        ai_aligntofp(self);
    };
    wld_detectnpc(self, -1, zs_teaching, -1);
    if (npc_getdisttonpc(self, other) <= perc_dist_intermediat) {
        b_smartturntonpc(self, other);
    };
    ai_playanibs(self, "T_STAND_2_PRAY", bs_sit);
};

func void zs_meditate_loop() {
    var int praytime;

    printdebugnpc(pd_ta_loop, "ZS_Meditate_Loop");
    praytime = hlp_random(100);
    if (praytime <= 2) {
        ai_playanibs(self, "T_PRAY_RANDOM", bs_sit);
    };
    if (praytime >= 98) {
        b_say(self, NULL, "$Om");
    };
    ai_wait(self, 1.0);
};

func void zs_meditate_end() {
    c_stoplookat(self);
    ai_playanibs(self, "T_PRAY_2_STAND", bs_stand);
    printdebugnpc(pd_ta_frame, "ZS_Meditate_End");
};

func void zs_minebellows() {
    printdebugnpc(pd_ta_frame, "ZS_MineBellows");
    b_setperception(self);
    if (!c_bodystatecontains(self, bs_mobinteract_interrupt)) {
        ai_setwalkmode(self, npc_walk);
        if (hlp_strcmp(npc_getnearestwp(self), self.wp) == 0) {
            ai_gotowp(self, self.wp);
        };
    };
};

func void zs_minebellows_loop() {
    printdebugnpc(pd_ta_loop, "ZS_MineBellows_Loop");
    ai_usemob(self, "BELLOW", 1);
    ai_usemob(self, "BELLOW", 0);
};

func void zs_minebellows_end() {
    printdebugnpc(pd_ta_frame, "ZS_MineBellows_End");
    ai_usemob(self, "BELLOW", -1);
};

func void zs_otmeditate() {
    printdebugnpc(pd_ta_frame, "ZS_Meditate");
    npc_percenable(self, perc_assessenemy, b_assessenemy);
    npc_percenable(self, perc_assessdamage, b_interceptassessdamage);
    npc_percenable(self, perc_assessmurder, b_otmeditate_assessmurder);
    self.senses = (sense_see | sense_hear) | sense_smell;
    self.senses_range = info_vlk_3_dielage /*3500*/;
    if (npc_getpermattitude(self, hero) != att_hostile) {
        npc_setpermattitude(self, att_angry);
    };
    ai_setwalkmode(self, npc_walk);
    if (!npc_isonfp(self, "MEDITATE")) {
        ai_gotowp(self, self.wp);
    };
    if (wld_isfpavailable(self, "MEDITATE")) {
        ai_gotofp(self, "MEDITATE");
        ai_aligntofp(self);
    };
    wld_detectnpc(self, -1, zs_teaching, -1);
    if (npc_getdisttonpc(self, other) <= perc_dist_intermediat) {
        b_smartturntonpc(self, other);
    };
    ai_playanibs(self, "T_STAND_2_PRAY", bs_sit);
};

func void zs_otmeditate_loop() {
    var int praytime;

    printdebugnpc(pd_ta_loop, "ZS_Meditate_Loop");
    praytime = hlp_random(100);
    if (praytime <= 2) {
        ai_playanibs(self, "T_PRAY_RANDOM", bs_sit);
    };
    ai_wait(self, 1.0);
};

func void zs_otmeditate_end() {
    c_stoplookat(self);
    ai_playanibs(self, "T_PRAY_2_STAND", bs_stand);
    printdebugnpc(pd_ta_frame, "ZS_Meditate_End");
};

func void b_otmeditate_assessmurder() {
    var int npcinstance;

    printdebugnpc(pd_ta_frame, "B_OTMeditate_AssessMurder");
    printglobals(pd_ta_detail);
    npcinstance = hlp_getinstanceid(victim);
    if (npcinstance == gur_1212_madcorkalom /*7491*/) {
        b_fullstop(self);
        b_whirlaround(self, other);
        npc_setpermattitude(self, att_hostile);
        npc_settarget(self, other);
        ai_startstate(self, zs_attack, 0, "");
        slf_fire = true;
    };
};

func void zs_pickore() {
    printdebugnpc(pd_ta_frame, "ZS_PickOre");
    b_setperception(self);
    if (self.aivar[34] == 1) {
        self.aivar[34] = 0;
    }
    else {
        b_startusemob(self, "ORE");
    };
};

func int zs_pickore_loop() {
    var int randomizer;

    printdebugnpc(pd_ta_loop, "ZS_PickOre_Loop");
    printattitudes(pd_ta_loop);
    randomizer = hlp_random(20);
    if (npc_getstatetime(self) >= (100 + randomizer)) {
        b_interruptmob("ORE");
    };
    ai_wait(self, 1.0);
    return loop_continue;
};

func void zs_pickore_end() {
    printdebugnpc(pd_ta_frame, "ZS_PickOre_End");
    b_stopusemob(self, "ORE");
};

func void zs_pickrice() {
    printdebugnpc(pd_ta_frame, "ZS_PickRice");
    b_setperception(self);
    ai_setwalkmode(self, npc_walk);
    if (!npc_isonfp(self, "PICKRICE")) {
        ai_gotowp(self, self.wp);
    };
    if (wld_isfpavailable(self, "PICKRICE")) {
        ai_gotofp(self, "PICKRICE");
        ai_aligntofp(self);
    };
    self.aivar[18] = hlp_random(5) + 5;
};

func void zs_pickrice_loop() {
    printdebugnpc(pd_ta_loop, "ZS_PickRice_Loop");
    if ((npc_getstatetime(self) >= self.aivar[18]) && hlp_random(2)) {
        printdebugnpc(pd_ta_detail, "PickRice B*cken mit Platzwechsel");
        if (npc_isonfp(self, "PICKRICE_1") && wld_isfpavailable(self, "PICKRICE_1")) {
            printdebugnpc(pd_ta_detail, "Platzwechsel auf Level 1");
            ai_gotonextfp(self, "PICKRICE_1");
            ai_playani(self, "T_PLUNDER");
            self.aivar[18] = hlp_random(5) + 5;
            npc_setstatetime(self, 0);
        }
        else if (npc_isonfp(self, "PICKRICE_2") && wld_isfpavailable(self, "PICKRICE_2")) {
            printdebugnpc(pd_ta_detail, "Platzwechsel auf Level 2");
            ai_gotonextfp(self, "PICKRICE_2");
            ai_playani(self, "T_PLUNDER");
            self.aivar[18] = hlp_random(5) + 5;
            npc_setstatetime(self, 0);
        }
        else if (npc_isonfp(self, "PICKRICE_3") && wld_isfpavailable(self, "PICKRICE_3")) {
            printdebugnpc(pd_ta_detail, "Platzwechsel auf Level 3");
            ai_gotonextfp(self, "PICKRICE_3");
            ai_playani(self, "T_PLUNDER");
            self.aivar[18] = hlp_random(5) + 5;
            npc_setstatetime(self, 0);
        }
        else {
            if (npc_isonfp(self, "PICKRICE")) {
                printdebugnpc(pd_ta_detail, "keinen freien FP gefunden!");
                ai_playani(self, "T_PLUNDER");
                self.aivar[18] = hlp_random(5) + 5;
                npc_setstatetime(self, 0);
            };
        };
        ai_setwalkmode(self, npc_walk);
    }
    else {
        if (npc_getstatetime(self) >= self.aivar[18]) {
            printdebugnpc(pd_ta_detail, "PickRice B*cken");
            if (npc_isonfp(self, "PICKRICE")) {
                ai_playani(self, "T_PLUNDER");
                self.aivar[18] = hlp_random(5) + 5;
                npc_setstatetime(self, 0);
            };
            ai_setwalkmode(self, npc_walk);
        };
    };
    if ((!npc_isonfp(self, "PICKRICE")) && wld_isfpavailable(self, "PICKRICE")) {
        ai_gotofp(self, "PICKRICE");
    };
    ai_wait(self, 1.0);
};

func void zs_pickrice_end() {
    printdebugnpc(pd_ta_frame, "ZS_PickRice_End");
};

func void zs_playtune() {
    printdebugnpc(pd_ta_frame, "ZS_PlayTune");
    b_setperception(self);
    ai_setwalkmode(self, npc_walk);
    if ((!npc_isonfp(self, "PLAYTUNE")) || (npc_getdisttowp(self, self.wp) > 300)) {
        ai_gotowp(self, self.wp);
    };
};

func int zs_playtune_loop() {
    printdebugnpc(pd_ta_loop, "ZS_PlayTune_Loop");
    if (npc_hasitems(self, itmilute) <= 1) {
        createinvitem(self, itmilute);
    };
    if (!npc_isonfp(self, "PLAYTUNE")) {
        ai_gotofp(self, "PLAYTUNE");
        ai_aligntofp(self);
    };
    if (!c_bodystatecontains(self, bs_iteminteract)) {
        ai_useitemtostate(self, itmilute /*4507*/, 1);
    };
    ai_aligntofp(self);
    ai_wait(self, 1.0);
    return loop_continue;
};

func void zs_playtune_end() {
    ai_useitemtostate(self, itmilute /*4507*/, -1);
    printdebugnpc(pd_ta_frame, "ZS_PlayTune_End");
};

func void zs_potionalchemy() {
    printdebugnpc(pd_ta_frame, "ZS_PotionAlchemy");
    b_setperception(self);
    if (!c_bodystatecontains(self, bs_mobinteract_interrupt)) {
        ai_setwalkmode(self, npc_walk);
        if (hlp_strcmp(npc_getnearestwp(self), self.wp) == 0) {
            ai_gotowp(self, self.wp);
        };
        ai_usemob(self, "LAB", 1);
    };
};

func int zs_potionalchemy_loop() {
    var int randomizer;

    printdebugnpc(pd_ta_loop, "ZS_PotionAlchemy_Loop");
    randomizer = hlp_random(20);
    if (npc_getstatetime(self) >= (100 + randomizer)) {
        b_interruptmob("LAB");
    };
    ai_wait(self, 1.0);
    return loop_continue;
};

func void zs_potionalchemy_end() {
    printdebugnpc(pd_ta_frame, "ZS_PotionAlchemy_End");
    ai_usemob(self, "LAB", -1);
};

func void zs_practicebow() {
    printdebugnpc(pd_ta_frame, "ZS_PracticeBow");
    b_setperception(self);
    ai_setwalkmode(self, npc_walk);
    if (!hlp_strcmp(self.wp, npc_getnearestwp(self))) {
        ai_gotowp(self, self.wp);
    };
    if (wld_isfpavailable(self, "PRACTICEBOW")) {
        ai_gotofp(self, "PRACTICEBOW");
        ai_aligntofp(self);
    };
};

func void zs_practicebow_loop() {
    printdebugnpc(pd_ta_loop, "ZS_PracticeBow_Loop");
    ai_wait(self, 1.0);
};

func void zs_practicebow_end() {
    printdebugnpc(pd_ta_frame, "ZS_PracticeBow_End");
};

func void zs_practicemagic() {
    printdebugnpc(pd_ta_frame, "ZS_PracticeMagic");
    b_setperception(self);
    ai_setwalkmode(self, npc_walk);
    if (!hlp_strcmp(self.wp, npc_getnearestwp(self))) {
        ai_gotowp(self, self.wp);
    };
    if (wld_isfpavailable(self, "PRACTICEMAGIC")) {
        ai_gotofp(self, "PRACTICEMAGIC");
        ai_aligntofp(self);
    };
    self.aivar[18] = hlp_random(6) + 4;
};

func void zs_practicemagic_loop() {
    var int magereaktion;

    printdebugnpc(pd_ta_loop, "ZS_PracticeMagic_Loop");
    magereaktion = hlp_random(100);
    if (npc_getstatetime(self) >= self.aivar[18]) {
        printdebugnpc(pd_ta_loop, "ZS_PracticeMagic_Loop Freq");
        if (magereaktion <= 25) {
            printdebugnpc(pd_ta_loop, "ZS_PracticeMagic_Loop");
            ai_playani(self, "T_PRACTICEMAGIC");
            self.aivar[18] = hlp_random(6) + 4;
            npc_setstatetime(self, 0);
        }
        else if (magereaktion <= 50) {
            printdebugnpc(pd_ta_loop, "ZS_PracticeMagic_Loop");
            ai_playani(self, "T_PRACTICEMAGIC2");
            self.aivar[18] = hlp_random(6) + 4;
            npc_setstatetime(self, 0);
        }
        else if (magereaktion <= 70) {
            printdebugnpc(pd_ta_loop, "ZS_PracticeMagic_Loop");
            ai_playani(self, "T_PRACTICEMAGIC3");
            self.aivar[18] = hlp_random(6) + 4;
            npc_setstatetime(self, 0);
        }
        else if (magereaktion <= 90) {
            printdebugnpc(pd_ta_loop, "ZS_PracticeMagic_Loop");
            ai_playani(self, "T_PRACTICEMAGIC4");
            self.aivar[18] = hlp_random(6) + 4;
            npc_setstatetime(self, 0);
        }
        else {
            if (magereaktion <= 100) {
                printdebugnpc(pd_ta_loop, "ZS_PracticeMagic_Loop");
                ai_playani(self, "R_SCRATCHHEAD");
                self.aivar[18] = hlp_random(6) + 4;
                npc_setstatetime(self, 0);
            };
        };
    };
    ai_wait(self, 1.0);
};

func void zs_practicemagic_end() {
    printdebugnpc(pd_ta_frame, "ZS_PracticeMagic_End");
};

func void zs_practicesword() {
    printdebugnpc(pd_ta_frame, "ZS_PracticeSword");
    b_setperception(self);
    ai_setwalkmode(self, npc_walk);
    if (!hlp_strcmp(self.wp, npc_getnearestwp(self))) {
        ai_gotowp(self, self.wp);
    };
    if ((!npc_hasequippedmeleeweapon(self)) && (!npc_hasreadiedmeleeweapon(self))) {
        ai_startstate(self, zs_standaround, 0, "");
        return;
    };
    ai_equipbestmeleeweapon(self);
    ai_drawweapon(self);
};

func void zs_practicesword_loop() {
    printdebugnpc(pd_ta_loop, "ZS_PracticeSword_Loop");
    ai_playani(self, "T_1HSFREE");
    ai_gotowp(self, self.wp);
    ai_aligntowp(self);
};

func void zs_practicesword_end() {
    printdebugnpc(pd_ta_frame, "ZS_PracticeSword_End");
    b_fullstop(self);
    b_removeweapon(self);
};

func void zs_pray() {
    printdebugnpc(pd_ta_frame, "ZS_Pray");
    b_setperception(self);
    if (!c_bodystatecontains(self, bs_mobinteract)) {
        ai_setwalkmode(self, npc_walk);
        if (hlp_strcmp(npc_getnearestwp(self), self.wp) == 0) {
            ai_gotowp(self, self.wp);
        };
        ai_usemob(self, "IDOL", 1);
    };
};

func void zs_pray_loop() {
    printdebugnpc(pd_ta_loop, "ZS_Pray_Loop");
    ai_wait(self, 1.0);
};

func void zs_pray_end() {
    ai_usemob(self, "IDOL", -1);
    printdebugnpc(pd_ta_frame, "ZS_Pray_End");
};

func void zs_preach() {
    printdebugnpc(pd_ta_frame, "ZS_Preach");
    b_setperception(self);
    ai_setwalkmode(self, npc_walk);
    if (!npc_isonfp(self, "PREACH")) {
        ai_gotowp(self, self.wp);
    };
    if (wld_isfpavailable(self, "PREACH")) {
        ai_gotofp(self, "PREACH");
        ai_aligntofp(self);
    };
};

func void zs_preach_loop() {
    printdebugnpc(pd_ta_loop, "ZS_Preach_Loop");
    ai_wait(self, 1.0);
};

func void zs_preach_end() {
    printdebugnpc(pd_ta_frame, "ZS_Preach_End");
};

func void zs_readbook() {
    printdebugnpc(pd_ta_frame, "ZS_ReadBook");
    b_setperception(self);
    ai_setwalkmode(self, npc_walk);
    if (!c_bodystatecontains(self, bs_mobinteract)) {
        ai_gotowp(self, self.wp);
        ai_usemob(self, "BOOK", 1);
    };
};

func int zs_readbook_loop() {
    var int randomizer;

    printdebugnpc(pd_ta_loop, "ZS_ReadBook_Loop");
    randomizer = hlp_random(20);
    if (npc_getstatetime(self) >= (100 + randomizer)) {
        b_interruptmob("BOOK");
    };
    ai_wait(self, 1.0);
    return loop_continue;
};

func void zs_readbook_end() {
    printdebugnpc(pd_ta_frame, "ZS_ReadBook_End");
    ai_usemob(self, "BOOK", -1);
};

func void zs_repairhut() {
    printdebugnpc(pd_ta_frame, "ZS_RepairHut");
    b_setperception(self);
    ai_setwalkmode(self, npc_walk);
    if (!c_bodystatecontains(self, bs_mobinteract_interrupt)) {
        ai_gotowp(self, self.wp);
        printdebugnpc(pd_ta_check, "...befindet sich nicht im MobInteract!");
        ai_usemob(self, "REPAIR", 1);
    };
};

func int zs_repairhut_loop() {
    var int repairreaktion;
    var int randomizer;

    printdebugnpc(pd_ta_loop, "ZS_RepairHut_Loop");
    if (c_bodystatecontains(self, bs_mobinteract_interrupt)) {
        repairreaktion = hlp_random(100);
        if (repairreaktion >= 90) {
            ai_playanibs(self, "T_REPAIR_RANDOM_1", bs_mobinteract_interrupt);
        }
        else {
            if (repairreaktion >= 85) {
                b_pee(self);
            };
        };
    };
    randomizer = hlp_random(20);
    if (npc_getstatetime(self) >= (100 + randomizer)) {
        b_interruptmob("REPAIR");
    };
    ai_wait(self, 1.0);
    return loop_continue;
};

func void zs_repairhut_end() {
    printdebugnpc(pd_ta_frame, "ZS_RepairHut_End");
    ai_usemob(self, "REPAIR", -1);
};

func void zs_roastscavenger() {
    printdebugnpc(pd_ta_frame, "ZS_RoastScavenger");
    b_setperception(self);
    if (!c_bodystatecontains(self, bs_mobinteract)) {
        ai_setwalkmode(self, npc_walk);
        ai_gotowp(self, self.wp);
        b_startusemob(self, "BARBQ");
    };
};

func int zs_roastscavenger_loop() {
    var int randomizer;

    printdebugnpc(pd_ta_loop, "ZS_RoastScavenger_Loop");
    randomizer = hlp_random(20);
    if (npc_getstatetime(self) >= (100 + randomizer)) {
        b_interruptmob("BARBQ");
    };
    ai_wait(self, 1.0);
    return loop_continue;
};

func void zs_roastscavenger_end() {
    printdebugnpc(pd_ta_frame, "ZS_RoastScavenger_End");
    ai_usemob(self, "BARBQ", -1);
};

func void zs_sitaround() {
    printdebugnpc(pd_ta_frame, "ZS_SitAround");
    b_setperception(self);
    if (npc_getdisttowp(self, self.wp) > perc_dist_dialog) {
        printdebugnpc(pd_ta_check, "...zu weit weg vom TA-Startpunkt!");
        ai_standup(self);
        ai_setwalkmode(self, npc_walk);
        ai_gotowp(self, self.wp);
    };
};

func int zs_sitaround_loop() {
    var int sitreaktion;

    printdebugnpc(pd_ta_loop, "ZS_SitAround_Loop");
    if (!c_bodystatecontains(self, bs_sit)) {
        printdebugnpc(pd_ta_check, "...NSC sitzt noch nicht!");
        if (wld_ismobavailable(self, "BENCH")) {
            printdebugnpc(pd_ta_check, "...Bank gefunden!");
            ai_usemob(self, "BENCH", 1);
            self.aivar[12] = 2;
        }
        else if (wld_ismobavailable(self, "CHAIR")) {
            printdebugnpc(pd_ta_check, "...Stuhl gefunden!");
            ai_usemob(self, "CHAIR", 1);
            self.aivar[12] = 3;
        }
        else if (wld_ismobavailable(self, "SMALL THRONE")) {
            printdebugnpc(pd_ta_check, "...kl. Thron gefunden!");
            ai_usemob(self, "SMALL THRONE", 1);
            self.aivar[12] = 4;
        }
        else if (wld_isfpavailable(self, "SIT")) {
            printdebugnpc(pd_ta_check, "...FP 'SIT' gefunden!");
            ai_gotofp(self, "SIT");
            ai_aligntofp(self);
            ai_playanibs(self, "T_STAND_2_SIT", bs_sit);
            self.aivar[12] = 1;
        }
        else {
            printdebugnpc(pd_ta_check, "...keine Sitzgelegenheit gefunden!");
            ai_startstate(self, zs_standaround, 1, "");
            return loop_continue;
        };
    }
    sitreaktion = hlp_random(100);
    printdebugint(pd_ta_detail, "...Zufallsani-Wurf: ", sitreaktion);
    if (sitreaktion >= 95) {
        b_pee(self);
    }
    else if (sitreaktion >= 90) {
        if (self.aivar[12] == 3) {
            ai_playanibs(self, "R_CHAIR_RANDOM_1", bs_sit);
        }
        else {
            if (self.aivar[12] == 2) {
                ai_playanibs(self, "R_BENCH_RANDOM_1", bs_sit);
            };
        };
    }
    else if (sitreaktion >= 85) {
        if (self.aivar[12] == 3) {
            ai_playanibs(self, "R_CHAIR_RANDOM_2", bs_sit);
        }
        else {
            if (self.aivar[12] == 2) {
                ai_playanibs(self, "R_BENCH_RANDOM_2", bs_sit);
            };
        };
    }
    else if (sitreaktion >= 80) {
        if (self.aivar[12] == 3) {
            ai_playanibs(self, "R_CHAIR_RANDOM_3", bs_sit);
        }
        else {
            if (self.aivar[12] == 2) {
                ai_playanibs(self, "R_BENCH_RANDOM_3", bs_sit);
            };
        };
    }
    else if (sitreaktion >= 75) {
        if (self.aivar[12] == 3) {
            ai_playanibs(self, "R_CHAIR_RANDOM_4", bs_sit);
        }
        else {
            if (self.aivar[12] == 2) {
                ai_playanibs(self, "R_BENCH_RANDOM_4", bs_sit);
            };
        };
    };
    ai_wait(self, 1.0);
    return loop_continue;
};

func void zs_sitaround_end() {
    printdebugnpc(pd_ta_frame, "ZS_SitAround_End");
    if (self.aivar[12] == 1) {
        ai_playani(self, "T_SIT_2_STAND");
        self.aivar[12] = 0;
    }
    else if (self.aivar[12] == 4) {
        ai_usemob(self, "SMALL THRONE", -1);
        self.aivar[12] = 0;
    }
    else if (self.aivar[12] == 2) {
        ai_usemob(self, "BENCH", -1);
        self.aivar[12] = 0;
    }
    else {
        if (self.aivar[12] == 3) {
            ai_usemob(self, "CHAIR", -1);
            self.aivar[12] = 0;
        };
    };
};

func void zs_sitcampfire() {
    guardperception();
    npc_percenable(self, perc_assessplayer, b_assesssc);
    printdebugnpc(pd_ta_frame, "ZS_SitCampfire");
    if (!c_bodystatecontains(self, bs_sit)) {
        printdebugnpc(pd_ta_frame, "ZS_SitCampfire sitzt nicht");
        ai_standup(self);
        ai_setwalkmode(self, npc_walk);
        ai_gotowp(self, self.wp);
    };
    ai_aligntofp(self);
};

func int zs_sitcampfire_loop() {
    if (!c_bodystatecontains(self, bs_sit)) {
        printdebugnpc(pd_ta_loop, "ZS_SitCampfire sitzt nicht");
        ai_standup(self);
        ai_setwalkmode(self, npc_walk);
        ai_gotowp(self, self.wp);
        if (wld_isfpavailable(self, "FP_CAMPFIRE")) {
            printdebugnpc(pd_ta_loop, "ZS_SitCampfire ... Freepoint vorhanden");
            ai_gotofp(self, "FP_CAMPFIRE");
        }
        else {
            printdebugnpc(pd_ta_loop, "ZS_SitCampfire ...kein Freier FP");
            ai_startstate(self, zs_sitaround, 0, "");
        };
        self.aivar[12] = 1;
        ai_playanibs(self, "T_STAND_2_SIT", bs_sit);
    };
    return loop_continue;
};

func void zs_sitcampfire_end() {
    ai_playani(self, "T_SIT_2_STAND");
};

func void zs_sittingduck() {
    printdebugnpc(pd_ta_frame, "ZS_SittingDuck");
    self.senses = (sense_see | sense_hear) | sense_smell;
    ai_setwalkmode(self, npc_walk);
    ai_gotowp(self, self.wp);
    ai_aligntowp(self);
};

func void zs_sittingduck_loop() {
    printdebugnpc(pd_ta_loop, "ZS_SittingDuck_Loop");
    ai_wait(self, 1.0);
};

func void zs_sittingduck_end() {
    printdebugnpc(pd_ta_frame, "ZS_SittingDuck_End");
};

func void zs_sleep() {
    printdebugnpc(pd_ta_frame, "ZS_Sleep");
    b_setperception(self);
    ai_setwalkmode(self, npc_walk);
    if (!c_bodystatecontains(self, bs_mobinteract_interrupt)) {
        if (hlp_strcmp(npc_getnearestwp(self), self.wp) == 0) {
            ai_gotowp(self, self.wp);
        };
    };
    ai_startstate(self, zs_sleepbed, 1, "");
};

func int zs_sleepbed() {
    printdebugnpc(pd_ta_frame, "ZS_SleepBed_Loop");
    lightsleepperception();
    if (wld_ismobavailable(self, "BED")) {
        ai_usemob(self, "BED", 1);
    }
    else if (wld_ismobavailable(self, "BEDHIGH") || wld_ismobavailable(self, "BEDLOW")) {
        ai_usemob(self, "BEDHIGH", 1);
        ai_usemob(self, "BEDLOW", 1);
    }
    else {
        ai_startstate(self, zs_standaround, 0, "");
    };
    return loop_continue;
};

func int zs_sleepbed_loop() {
    printdebugnpc(pd_ta_loop, "ZS_SleepBed_Loop");
    if ((!c_bodystatecontains(self, bs_mobinteract_interrupt)) && (npc_getstatetime(self) > 3)) {
        ai_startstate(self, zs_sitaround, 0, "");
    };
    ai_wait(self, 1.0);
    return loop_continue;
};

func void zs_sleepbed_end() {
    printdebugnpc(pd_ta_frame, "ZS_SleepBed_End");
    if (wld_istime(7, 0, 8, 30)) {
        b_say(self, NULL, "$AWAKE");
    };
    ai_usemob(self, "BEDHIGH", -1);
    ai_usemob(self, "BEDLOW", -1);
    ai_usemob(self, "BED", -1);
    npc_changeattribute(self, atr_hitpoints, self.attribute[atr_hitpoints_max] /*1*/ - self.attribute[atr_hitpoints] /*0*/);
};

func void b_sleepquietsound() {
    printdebugnpc(pd_ta_detail, "B_SleepQuietSound");
    if ((npc_getdisttonpc(self, other) < perc_dist_dialog) && npc_canseenpcfreelos(self, other)) {
        ai_startstate(self, zs_wakeup, 1, "");
    }
    else {
        b_tossandturn();
    };
};

func void zs_smalltalk() {
    printdebugnpc(pd_ta_frame, "ZS_Smalltalk");
    b_setperception(self);
    ai_setwalkmode(self, npc_walk);
    if (!npc_isonfp(self, "SMALLTALK")) {
        printdebugnpc(pd_ta_check, "...nicht auf FP!");
        ai_gotowp(self, self.wp);
    };
    ai_gotofp(self, "SMALLTALK");
    ai_aligntofp(self);
};

func void zs_smalltalk_loop() {
    var int talktime;

    printdebugnpc(pd_ta_loop, "ZS_Smalltalk_Loop");
    printglobals(pd_ta_check);
    npc_perceiveall(self);
    wld_detectnpc(self, -1, zs_smalltalk, -1);
    if (wld_detectnpc(self, -1, zs_smalltalk, -1) && (npc_getdisttonpc(self, other) < hai_dist_smalltalk)) {
        ai_turntonpc(self, other);
        talktime = hlp_random(200);
        if (talktime < 5) {
            b_say(self, NULL, "$SMALLTALK01");
        }
        else if (talktime < 10) {
            b_say(self, NULL, "$SMALLTALK02");
        }
        else if (talktime < 15) {
            b_say(self, NULL, "$SMALLTALK03");
        }
        else if (talktime < 20) {
            b_say(self, NULL, "$SMALLTALK04");
        }
        else if (talktime < 25) {
            b_say(self, NULL, "$SMALLTALK05");
        }
        else if (talktime < 30) {
            b_say(self, NULL, "$SMALLTALK06");
        }
        else if (talktime < 35) {
            b_say(self, NULL, "$SMALLTALK07");
        }
        else if (talktime < 40) {
            b_say(self, NULL, "$SMALLTALK08");
        }
        else if (talktime < 45) {
            b_say(self, NULL, "$SMALLTALK09");
        }
        else if (talktime < 50) {
            b_say(self, NULL, "$SMALLTALK10");
        }
        else if (talktime < 55) {
            b_say(self, NULL, "$SMALLTALK11");
        }
        else if (talktime < 60) {
            b_say(self, NULL, "$SMALLTALK12");
        }
        else if (talktime < 65) {
            b_say(self, NULL, "$SMALLTALK13");
        }
        else if (talktime < 70) {
            b_say(self, NULL, "$SMALLTALK14");
        }
        else if (talktime < 75) {
            b_say(self, NULL, "$SMALLTALK15");
        }
        else if (talktime < 80) {
            b_say(self, NULL, "$SMALLTALK16");
        }
        else if (talktime < 85) {
            b_say(self, NULL, "$SMALLTALK17");
        }
        else if (talktime < 90) {
            b_say(self, NULL, "$SMALLTALK18");
        }
        else if (talktime < 95) {
            b_say(self, NULL, "$SMALLTALK19");
        }
        else if (talktime < 100) {
            b_say(self, NULL, "$SMALLTALK20");
        }
        else if (talktime < 105) {
            b_say(self, NULL, "$SMALLTALK21");
        }
        else if (talktime < 110) {
            b_say(self, NULL, "$SMALLTALK22");
        }
        else if (talktime < 115) {
            b_say(self, NULL, "$SMALLTALK23");
        }
        else {
            if (talktime < 120) {
                b_say(self, NULL, "$SMALLTALK24");
            };
        };
        ai_wait(self, 3.0);
        npc_setstatetime(self, 0);
    }
    else {
        if (npc_getstatetime(self) >= 5) {
            printdebugnpc(pd_ta_check, "... kein Gespr*chspartner gefunden!");
            ai_startstate(self, zs_standaround, 1, "");
        };
    };
    ai_wait(self, 1.0);
};

func void zs_smalltalk_end() {
    printdebugnpc(pd_ta_frame, "ZS_Smalltalk_End");
};

func void zs_smith_anvil() {
    printdebugnpc(pd_ta_frame, "ZS_Smith_Anvil");
    b_setperception(self);
    b_startusemob(self, "BSANVIL");
};

func void zs_smith_anvil_loop() {
    var int randomizer;

    printdebugnpc(pd_ta_loop, "ZS_Smith_Anvil_Loop");
    randomizer = hlp_random(20);
    if (npc_getstatetime(self) >= (100 + randomizer)) {
        b_interruptmob("BSANVIL");
    };
    ai_wait(self, 1.0);
};

func void zs_smith_anvil_end() {
    printdebugnpc(pd_ta_frame, "ZS_Smith_Anvil_End");
    b_stopusemob(self, "BSANVIL");
};

func void zs_smith_cool() {
    printdebugnpc(pd_ta_frame, "ZS_Smith_Cool");
    b_setperception(self);
    b_startusemob(self, "BSCOOL");
};

func void zs_smith_cool_loop() {
    var int randomizer;

    printdebugnpc(pd_ta_loop, "ZS_Smith_Cool_Loop");
    randomizer = hlp_random(20);
    if (npc_getstatetime(self) >= (100 + randomizer)) {
        b_interruptmob("BSCOOL");
    };
    ai_wait(self, 1.0);
};

func void zs_smith_cool_end() {
    printdebugnpc(pd_ta_frame, "ZS_Smith_Cool_End");
    b_stopusemob(self, "BSCOOL");
};

func void zs_smith_fire() {
    printdebugnpc(pd_ta_frame, "ZS_Smith_Fire");
    b_setperception(self);
    b_startusemob(self, "BSFIRE");
};

func void zs_smith_fire_loop() {
    var int randomizer;

    printdebugnpc(pd_ta_loop, "ZS_Smith_Fire_Loop");
    randomizer = hlp_random(20);
    if (npc_getstatetime(self) >= (100 + randomizer)) {
        b_interruptmob("BSFIRE");
    };
    ai_wait(self, 1.0);
};

func void zs_smith_fire_end() {
    printdebugnpc(pd_ta_frame, "ZS_Smith_Fire_End");
    b_stopusemob(self, "BSFIRE");
};

func void zs_smith_sharp() {
    printdebugnpc(pd_ta_frame, "ZS_Smith_Sharp");
    b_setperception(self);
    b_startusemob(self, "BSSHARP");
};

func void zs_smith_sharp_loop() {
    var int randomizer;

    printdebugnpc(pd_ta_loop, "ZS_Smith_Sharp_Loop");
    randomizer = hlp_random(20);
    if (npc_getstatetime(self) >= (100 + randomizer)) {
        b_interruptmob("BSSHARP");
    };
    ai_wait(self, 1.0);
};

func void zs_smith_sharp_end() {
    var int amount;

    printdebugnpc(pd_ta_frame, "ZS_Smith_Sharp_End");
    b_stopusemob(self, "BSSHARP");
    amount = npc_hasitems(self, itmw_1h_sword_01);
    if (amount > 1) {
        npc_removeinvitems(self, itmw_1h_sword_01, amount - 1);
    };
};

func void zs_smoke() {
    printdebugnpc(pd_ta_frame, "ZS_Smoke");
    b_setperception(self);
    ai_setwalkmode(self, npc_walk);
    if (hlp_strcmp(npc_getnearestwp(self), self.wp) == 0) {
        ai_gotowp(self, self.wp);
    };
    if (wld_ismobavailable(self, "SMOKE")) {
        ai_usemob(self, "SMOKE", 1);
    }
    else {
        if (wld_isfpavailable(self, "STAND")) {
            ai_gotofp(self, "STAND");
            b_choosejoint(self);
        };
    };
};

func int zs_smoke_loop() {
    printdebugnpc(pd_ta_loop, "ZS_Smoke_Loop");
    return loop_continue;
};

func void zs_smoke_end() {
    printdebugnpc(pd_ta_frame, "ZS_Smoke_End");
    if (self.aivar[17] == ta_it_joint) {
        ai_useitemtostate(self, itmijoint_1 /*4511*/, -1);
    }
    else {
        ai_usemob(self, "SMOKE", -1);
    };
};

func void zs_speech() {
    printdebugnpc(pd_ta_frame, "ZS_Speech");
    b_setperception(self);
    ai_setwalkmode(self, npc_walk);
    if (!npc_isonfp(self, "SPEECH")) {
        ai_gotowp(self, self.wp);
    };
    if (wld_isfpavailable(self, "SPEECH")) {
        ai_gotofp(self, "SPEECH");
    };
    ai_aligntofp(self);
};

func void zs_speech_loop() {
    printdebugnpc(pd_ta_loop, "ZS_Speech_Loop");
    ai_wait(self, 1.0);
};

func void zs_speech_end() {
    printdebugnpc(pd_ta_frame, "ZS_Speech_End");
};

func void zs_stand() {
    guardperception();
    npc_percenable(self, perc_assessplayer, b_assesssc);
    ai_standup(self);
    ai_setwalkmode(self, npc_walk);
    if (!npc_isonfp(self, "FP_STAND")) {
        ai_gotowp(self, self.wp);
    };
    if (wld_isfpavailable(self, "FP_STAND")) {
        ai_gotofp(self, "FP_STAND");
        ai_aligntofp(self);
    }
    else {
        ai_aligntowp(self);
    };
    ai_playani(self, "T_STAND_2_LGUARD");
};

func void zs_stand_loop() {
    var int zufall;

    zufall = hlp_random(100);
    if (zufall >= 95) {
    }
    else if (zufall >= 90) {
        ai_playani(self, "T_LGUARD_SCRATCH");
    }
    else if (zufall >= 80) {
        ai_playani(self, "T_LGUARD_STRETCH");
    }
    else {
        if (zufall >= 70) {
            ai_playani(self, "T_LGUARD_CHANGELEG");
        };
    };
    ai_wait(self, 1.0);
};

func void zs_stand_end() {
    ai_playani(self, "T_LGUARD_2_STAND");
};

func void zs_standaround() {
    printdebugnpc(pd_ta_frame, "ZS_StandAround");
    b_setperception(self);
    if (npc_wasinstate(self, zs_smalltalk)) {
        npc_percenable(self, perc_npccommand, b_smalltalk);
    };
    ai_setwalkmode(self, npc_walk);
    b_clearitem(self);
    if ((!npc_isonfp(self, "CAMPFIRE")) && (!npc_isonfp(self, "SMALLTALK"))) {
        printdebugnpc(pd_ta_check, "...nicht auf FP!");
        ai_gotowp(self, self.wp);
    };
};

func int zs_standaround_loop() {
    var int choice;

    printdebugnpc(pd_ta_loop, "ZS_StandAround_Loop");
    if (npc_wasinstate(self, zs_smalltalk)) {
        npc_perceiveall(self);
        wld_detectnpc(self, -1, zs_smalltalk, -1);
        if (wld_detectnpc(self, -1, zs_smalltalk, -1) && (npc_getdisttonpc(self, other) < hai_dist_smalltalk)) {
            b_fullstop(self);
            ai_continueroutine(self);
            return loop_end;
        };
    }
    else if (wld_isfpavailable(self, "CAMPFIRE")) {
        printdebugnpc(pd_ta_detail, "...Lagerfeuer gefunden");
        b_gotofp(self, "CAMPFIRE");
        ai_aligntofp(self);
    }
    else {
        npc_perceiveall(self);
        if (wld_detectnpcex(self, -1, NOFUNC, -1, 0)) {
            printdebugnpc(pd_ta_detail, "...anderer NSC gefunden");
            if (npc_canseenpc(self, other) && (npc_getdisttonpc(self, other) < perc_dist_dialog)) {
                printdebugnpc(pd_ta_detail, "...und in Dialogreichweite");
                ai_turntonpc(self, other);
            };
        };
    };
    choice = hlp_random(100);
    printdebugint(pd_ta_detail, "...Zufallsani-Wurf: ", choice);
    if (self.aivar[17] == ta_it_none) {
        if (c_npcbelongstooldcamp(self)) {
            if (choice < 10) {
                b_chooseapple(self);
            }
            else if (choice < 20) {
                b_chooseloaf(self);
            }
            else if (choice < 30) {
                b_choosecheese(self);
            }
            else if (choice < 40) {
                b_choosebeer(self);
            }
            else if (choice < 60) {
                b_choosemeat(self);
            }
            else if (choice < 80) {
                b_pee(self);
            }
            else {
                if (choice < 100) {
                    b_bored(self);
                };
            };
        }
        else if (c_npcbelongstonewcamp(self)) {
            if (choice < 10) {
                b_chooserice(self);
            }
            else if (choice < 30) {
                b_choosewine(self);
            }
            else if (choice < 50) {
                b_choosebooze(self);
            }
            else if (choice < 60) {
                b_choosejoint(self);
            }
            else if (choice < 80) {
                b_pee(self);
            }
            else {
                if (choice < 100) {
                    b_bored(self);
                };
            };
        }
        else if (c_npcbelongstopsicamp(self)) {
            if (choice < 20) {
                b_choosesoup(self);
            }
            else if (choice < 80) {
                b_choosejoint(self);
            }
            else if (choice < 90) {
                b_pee(self);
            }
            else {
                if (choice < 100) {
                    b_bored(self);
                };
            };
        };
    }
    else {
        if (choice < 20) {
            b_clearitem(self);
        };
    };
    b_playitemrandoms(self);
    ai_wait(self, 1.0);
    return loop_continue;
};

func void zs_standaround_end() {
    printdebugnpc(pd_ta_frame, "ZS_StandAround_End");
    c_stoplookat(self);
    b_clearitem(self);
};

func void b_smalltalk() {
    printdebugnpc(pd_ta_frame, "B_SmallTalk");
    if ((npc_isinstate(other, zs_standaround) && npc_isonfp(other, "SMALLTALK")) && (npc_getdisttonpc(self, other) < hai_dist_smalltalk)) {
        printdebugnpc(pd_ta_check, "...'other' geeigneter SmallTalk-Partner!");
        npc_percdisable(other, perc_assessplayer);
        npc_percdisable(other, perc_observeintruder);
        b_fullstop(other);
        npc_settarget(other, self);
        npc_gettarget(self);
        ai_startstate(other, zs_smalltalk, 1, "");
        npc_percdisable(self, perc_assessplayer);
        npc_percdisable(self, perc_observeintruder);
        b_fullstop(self);
        npc_settarget(self, other);
        npc_gettarget(self);
        ai_startstate(self, zs_smalltalk, 1, "");
    };
};

func void zs_stay() {
    printdebugnpc(pd_ta_frame, "ZS_Stay");
    b_setperception(self);
    self.senses = (sense_see | sense_hear) | sense_smell;
    if (npc_hasreadiedweapon(self)) {
        ai_setwalkmode(self, npc_run);
    }
    else {
        ai_setwalkmode(self, npc_walk);
    };
    ai_gotowp(self, self.wp);
    ai_aligntowp(self);
};

func void zs_stay_loop() {
    printdebugnpc(pd_ta_loop, "ZS_Stay_Loop");
    ai_wait(self, 1.0);
};

func void zs_stay_end() {
    printdebugnpc(pd_ta_frame, "ZS_Stay_End");
    self.senses = hero.senses;
    c_stoplookat(self);
};

func void zs_stayneutral() {
    printdebugnpc(pd_ta_frame, "ZS_StayNeutral");
    npc_setattitude(self, att_neutral);
    npc_settempattitude(self, att_neutral);
    b_setperception(self);
    self.senses = (sense_see | sense_hear) | sense_smell;
    if (npc_hasreadiedweapon(self)) {
        ai_setwalkmode(self, npc_run);
    }
    else {
        ai_setwalkmode(self, npc_walk);
    };
    ai_gotowp(self, self.wp);
    ai_aligntowp(self);
};

func void zs_stayneutral_loop() {
    printdebugnpc(pd_ta_loop, "ZS_StayNeutral_Loop");
    ai_wait(self, 1.0);
};

func void zs_stayneutral_end() {
    printdebugnpc(pd_ta_frame, "ZS_StayNeutral_End");
    self.senses = hero.senses;
    c_stoplookat(self);
};

func void zs_teaching() {
    printdebugnpc(pd_ta_frame, "ZS_Teaching");
    b_setperception(self);
    ai_setwalkmode(self, npc_walk);
    if (!npc_isonfp(self, "TEACHING")) {
        ai_gotowp(self, self.wp);
    };
};

func void zs_teaching_loop() {
    var int guardreaktion;

    printdebugnpc(pd_ta_loop, "ZS_Teaching_Loop");
    b_gotofp(self, "TEACHING");
    guardreaktion = hlp_random(1000);
    if (guardreaktion >= 900) {
        ai_playani(self, "T_DIALOGGESTURE_11");
    }
    else if (guardreaktion >= 800) {
        ai_playani(self, "T_DIALOGGESTURE_15");
    }
    else if (guardreaktion >= 700) {
        ai_playani(self, "T_DIALOGGESTURE_16");
    }
    else if (guardreaktion >= 600) {
        ai_playani(self, "T_DIALOGGESTURE_18");
    }
    else if (guardreaktion >= 500) {
        ai_playani(self, "T_DIALOGGESTURE_21");
    }
    else {
        if (guardreaktion >= 400) {
            ai_playani(self, "T_DIALOGGESTURE_20");
        };
    };
    ai_wait(self, 1.0);
};

func void zs_teaching_end() {
    printdebugnpc(pd_ta_frame, "ZS_Teaching_End");
};

func void zs_walk() {
    printdebugnpc(pd_ta_frame, "ZS_Walk");
    b_setperception(self);
    ai_setwalkmode(self, npc_walk);
    if (!npc_isonfp(self, "WALK")) {
        ai_gotowp(self, self.wp);
    };
    if (wld_isfpavailable(self, "WALK_A_")) {
        ai_gotofp(self, "WALK_A_");
    }
    else {
        if (wld_isfpavailable(self, "WALK_B_")) {
            ai_gotofp(self, "WALK_B_");
        };
    };
};

func void zs_walk_loop() {
    printdebugnpc(pd_ta_loop, "ZS_Walk_Loop");
    if (npc_isonfp(self, "WALK_A_") && wld_isfpavailable(self, "WALK_B_")) {
        ai_gotofp(self, "WALK_B_");
    }
    else {
        if (npc_isonfp(self, "WALK_B_") && wld_isfpavailable(self, "WALK_A_")) {
            ai_gotofp(self, "WALK_A_");
        };
    };
    ai_wait(self, 1.0);
};

func void zs_walk_end() {
    printdebugnpc(pd_ta_frame, "ZS_Walk_End");
};

func void zs_walkaround() {
    printdebugnpc(pd_ta_frame, "ZS_WalkAround");
    b_setperception(self);
    ai_setwalkmode(self, npc_walk);
    ai_gotowp(self, self.wp);
    ai_aligntowp(self);
};

func void zs_walkaround_loop() {
    var string hlpwp1;
    var string hlpwp2;
    var int varianzcounter;
    var int hlprand;

    printdebugnpc(pd_ta_loop, "ZS_WalkAround_Loop");
    ai_gotowp(self, npc_getnearestwp(self));
    if (varianzcounter == 7) {
        ai_gotowp(self, self.wp);
    }
    hlpwp1 = npc_getnearestwp(self);
    hlpwp2 = npc_getnextwp(self);
    ai_gotowp(self, hlpwp1);
    ai_gotowp(self, hlpwp2);
    hlprand = hlp_random(10000);
    if (!hlp_strcmp(npc_getnearestwp(self), hlpwp1)) {
        ai_gotowp(self, npc_getnearestwp(self));
        varianzcounter += 1;
        if (hlprand != 666) {
            ai_playani(self, "T_SEARCH");
        };
    }
    else {
        ai_gotowp(self, npc_getnextwp(other));
        ai_wait(self, 10.0);
        varianzcounter += 1;
    };
    ai_wait(self, 1.0);
};

func void zs_walkaround_end() {
    printdebugnpc(pd_ta_frame, "ZS_WalkAround_End");
};

func void zs_washself() {
    printdebugnpc(pd_ta_frame, "ZS_WashSelf");
    b_setperception(self);
    ai_setwalkmode(self, npc_walk);
    if (!npc_isonfp(self, "WASH")) {
        ai_gotowp(self, self.wp);
    };
    if (wld_isfpavailable(self, "WASH")) {
        ai_gotofp(self, "WASH");
        ai_aligntofp(self);
        ai_playani(self, "T_STAND_2_WASH");
    };
};

func void zs_washself_loop() {
    printdebugnpc(pd_ta_loop, "ZS_WashSelf_Loop");
    ai_wait(self, 1.0);
};

func void zs_washself_end() {
    printdebugnpc(pd_ta_frame, "ZS_WashSelf_End");
    ai_playani(self, "T_WASH_2_STAND");
};

func void zs_watchinextremo() {
    printdebugnpc(pd_zs_frame, "zs_WatchInExtremo");
    b_setperception(self);
    ai_setwalkmode(self, npc_walk);
    ai_gotowp(self, self.wp);
    ai_aligntowp(self);
    ai_playani(self, "T_STAND_2_CLAPHANDS");
};

func int zs_watchinextremo_loop() {
    printdebugnpc(pd_zs_loop, "zs_WatchInExtremo_Loop");
};

func void zs_watchinextremo_end() {
    printdebugnpc(pd_zs_frame, "zs_WatchInExtremo_End");
    ai_playani(self, "T_CLAPHANDS_2_STAND");
    ai_continueroutine(self);
};

func int on_occ_gate_trigger() {
    var c_npc wache;

    printdebugnpc(pd_ta_check, "On_OCC_GATE_Trigger");
    wache = hlp_getnpc(grd_213_torwache);
    wache.aivar[13] = 1;
    wache = hlp_getnpc(grd_212_torwache);
    wache.aivar[13] = 1;
};

func int on_ocr_northgate_trigger() {
    var c_npc wache;

    printdebugnpc(pd_ta_check, "On_OCR_NORTHGATE_Trigger");
    wache = hlp_getnpc(grd_216_torwache);
    wache.aivar[13] = 1;
    wache = hlp_getnpc(grd_217_torwache);
    wache.aivar[13] = 1;
};

func int on_ocr_maingate_trigger() {
    var c_npc wache;

    printdebugnpc(pd_ta_check, "On_OCR_MAINGATE_Trigger");
    wache = hlp_getnpc(grd_215_torwache);
    wache.aivar[13] = 1;
    wache = hlp_getnpc(grd_214_torwache);
    wache.aivar[13] = 1;
};

func int on_occ_baronsdoor_trigger() {
    var c_npc wache;

    printdebugnpc(pd_ta_check, "On_OCC_BARONSDOOR_Trigger");
    wache = hlp_getnpc(grd_218_gardist);
    wache.aivar[13] = 1;
    wache = hlp_getnpc(grd_245_gardist);
    wache.aivar[13] = 1;
};

func int on_psi_labdoor_trigger() {
    var c_npc wache;

    printdebugnpc(pd_ta_check, "ON_PSI_LABDOOR_TRIGGER");
    wache = hlp_getnpc(tpl_1406_templer);
    wache.aivar[13] = 1;
};

func int on_psi_temple_gate_trigger() {
    var c_npc wache;

    printdebugnpc(pd_ta_check, "ON_PSI_TEMPLE_GATE_TRIGGER");
    wache = hlp_getnpc(tpl_1413_templer);
    wache.aivar[13] = 1;
    wache = hlp_getnpc(tpl_1430_templer);
    wache.aivar[13] = 1;
    wache = hlp_getnpc(tpl_1431_templer);
    wache.aivar[13] = 1;
    wache = hlp_getnpc(tpl_1432_templer);
    wache.aivar[13] = 1;
};

func int on_nc_mageramp_trigger() {
    var c_npc wache;

    printdebugnpc(pd_ta_check, "ON_NC_MAGERAMP_TRIGGER");
    wache = hlp_getnpc(sld_702_soeldner);
    wache.aivar[13] = 1;
    wache = hlp_getnpc(sld_731_soeldner);
    wache.aivar[13] = 1;
};

func int on_nc_magecave_trigger() {
    var c_npc wache;

    printdebugnpc(pd_ta_check, "ON_NC_MAGECAVE_TRIGGER");
    wache = hlp_getnpc(sld_725_soeldner);
    wache.aivar[13] = 1;
    wache = hlp_getnpc(sld_726_soeldner);
    wache.aivar[13] = 1;
};

func int on_nc_gate_trigger() {
    printdebugnpc(pd_ta_check, "ON_NC_GATE_TRIGGER");
};

func void zs_drained_yberion() {
    printdebugnpc(pd_ta_frame, "ZS_Drained_YBerion");
    ai_playanibs(self, "T_STAND_2_VICTIM_SLE", bs_lie);
};

func void zs_drained_yberion_loop() {
    printdebugnpc(pd_ta_loop, "ZS_Drained_YBerion_Loop");
    ai_wait(self, 1.0);
};

func void zs_drained_yberion_end() {
    printdebugnpc(pd_ta_frame, "ZS_Drained_YBerion_End");
};

func void zs_herbshop() {
    printdebugnpc(pd_ta_frame, "ZS_HerbShop");
    b_setperception(self);
    ai_setwalkmode(self, npc_walk);
    if (!npc_isonfp(self, "STAND")) {
        ai_gotowp(self, self.wp);
    };
    if (wld_isfpavailable(self, "SHOP")) {
        ai_gotofp(self, "SHOP");
    };
    if (npc_isonfp(self, "SHOP")) {
    };
    ai_aligntofp(self);
};

func void zs_herbshop_loop() {
    printdebugnpc(pd_ta_loop, "ZS_HerbShop_Loop");
};

func void zs_herbshop_end() {
    printdebugnpc(pd_ta_frame, "ZS_HerbShop_End");
};

func void zs_interceptmadcorkalom() {
    printdebugnpc(pd_ta_frame, "ZS_InterceptMadCorKalom");
    npc_percenable(self, perc_assessplayer, b_assessscmadcorkalom);
    npc_percenable(self, perc_assessdamage, b_interceptmadcorkalomassessdamage);
    npc_percenable(self, perc_assessmagic, b_interceptmadcorkalomassessmagic);
    npc_percenable(self, perc_assesscaster, b_assessscmadcorkalom);
    npc_percenable(self, perc_assessthreat, b_assessscmadcorkalom);
    npc_setperctime(self, 0.5);
    ai_standup(self);
    ai_setwalkmode(self, npc_walk);
    ai_gotowp(self, self.wp);
    ai_aligntowp(self);
};

func int zs_interceptmadcorkalom_loop() {
    printdebugnpc(pd_ta_loop, "ZS_InterceptMadCorKalom_Loop");
    ai_wait(self, 1.0);
    return loop_continue;
};

func void zs_interceptmadcorkalom_end() {
    printdebugnpc(pd_ta_frame, "ZS_InterceptMadCorKalom_End");
};

func void b_assessscmadcorkalom() {
    printdebugnpc(pd_zs_detail, "B_AssessSCMadCorKalom");
    if (npc_checkinfo(self, 1)) {
        printdebugnpc(pd_zs_check, "...wichtige Info zu vergeben!");
        hero.aivar[22] = true;
        b_fullstop(self);
        ai_startstate(self, zs_talk, 1, "");
        return;
    };
};

func void b_interceptmadcorkalomassessdamage() {
    printdebugnpc(pd_ta_frame, "B_InterceptMadCorKalomAssessDamage");
    if (npc_checkinfo(self, 1)) {
        printdebugnpc(pd_zs_check, "...wichtige Info zu vergeben!");
        hero.aivar[22] = true;
        b_fullstop(self);
        ai_startstate(self, zs_talk, 1, "");
        return;
    }
    else {
        b_fullstop(self);
        ai_startstate(self, zs_reacttodamage, 0, "");
    };
};

func void b_interceptmadcorkalomassessmagic() {
    printdebugnpc(pd_ta_frame, "B_InterceptMadCorKalomAssessMagic");
    if (npc_checkinfo(self, 1)) {
        printdebugnpc(pd_zs_check, "...wichtige Info zu vergeben!");
        hero.aivar[22] = true;
        b_fullstop(self);
        ai_startstate(self, zs_talk, 1, "");
        return;
    }
    else {
        b_fullstop(self);
        b_assessmagic();
    };
};

func void zs_orepile() {
    b_setperception(self);
    printdebugnpc(pd_ta_frame, "ZS_Orepile");
    ai_setwalkmode(self, npc_walk);
    ai_gotowp(self, self.wp);
    ai_aligntowp(self);
};

func void zs_orepile_loop() {
    printdebugnpc(pd_ta_loop, "ZS_Orepile_Loop");
    if (hlp_strcmp(npc_getnearestwp(self), "NC_PATH_TO_PIT_03")) {
        ai_gotowp(self, "NC_PATH_AROUND_PIT_02");
    }
    else if (hlp_strcmp(npc_getnearestwp(self), "NC_PATH_AROUND_PIT_02")) {
        ai_gotowp(self, "NC_PATH_AROUND_PIT_04");
    }
    else if (hlp_strcmp(npc_getnearestwp(self), "NC_PATH_AROUND_PIT_04")) {
        ai_gotowp(self, "NC_PATH_AROUND_PIT_06");
    }
    else {
        if (hlp_strcmp(npc_getnearestwp(self), "NC_PATH_AROUND_PIT_06")) {
            ai_gotowp(self, "NC_PATH_TO_PIT_03");
        };
    };
    ai_setwalkmode(self, npc_walk);
    ai_aligntowp(self);
    ai_lookat(self, "FP_OREPILE_CENTER");
    c_stoplookat(self);
    ai_wait(self, 3.0);
};

func void zs_orepile_end() {
    printdebugnpc(pd_ta_frame, "ZS_Orepile");
};

func void zs_preach_yberion() {
    printdebugnpc(pd_ta_frame, "ZS_Preach_YBerion");
    b_setperception(self);
    ai_setwalkmode(self, npc_walk);
    if (!npc_isonfp(self, "PREACH")) {
        ai_gotowp(self, self.wp);
    };
    if (wld_isfpavailable(self, "PREACH")) {
        ai_gotofp(self, "PREACH");
    };
    ai_aligntofp(self);
};

func void zs_preach_yberion_loop() {
    var int preachtime;

    printdebugnpc(pd_ta_loop, "ZS_Preach_YBerion_Loop");
    preachtime = hlp_random(100);
    if (preachtime <= 3) {
        ai_output(self, NULL, "ZS_Preach_YBerion01"); //**UNKNOWN**
    }
    else if (preachtime >= 98) {
        ai_output(self, NULL, "ZS_Preach_YBerion02"); //**UNKNOWN**
    }
    else {
        if (preachtime >= 95) {
            ai_output(self, NULL, "ZS_Preach_YBerion03"); //**UNKNOWN**
        };
    };
    ai_wait(self, 1.0);
};

func void zs_preach_yberion_end() {
    printdebugnpc(pd_ta_frame, "ZS_Preach_YBerion_End");
};

func void zs_readbook_xardas() {
    printdebugnpc(pd_ta_frame, "ZS_ReadBook");
    npc_percenable(self, perc_assessplayer, b_assesssc);
    npc_percenable(self, perc_assessdamage, zs_reacttodamage);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assesscaster, b_assesscaster);
    npc_percenable(self, perc_assessthreat, b_assessfighter);
    npc_percenable(self, perc_assessmurder, zs_assessmurder);
    npc_percenable(self, perc_assessdefeat, zs_assessdefeat);
    npc_percenable(self, perc_drawweapon, b_assessfighter);
    npc_percenable(self, perc_assessquietsound, b_assessquietsound);
    npc_percenable(self, perc_catchthief, zs_catchthief);
    npc_percenable(self, perc_assesstheft, b_assesstheft);
    npc_percenable(self, perc_assesssurprise, zs_assesssurprise);
    npc_percenable(self, perc_observesuspect, b_observesuspect);
    npc_percenable(self, perc_observeintruder, b_observeintruder);
    npc_percenable(self, perc_assesstalk, b_assesstalk);
    npc_percenable(self, perc_assesscall, zs_reacttocall);
    npc_percenable(self, perc_assessusemob, b_assessusemob);
    npc_percenable(self, perc_assessenterroom, b_assessenterroom);
    npc_percenable(self, perc_movemob, b_movemob);
    npc_percenable(self, perc_movenpc, b_movenpc);
    npc_setperctime(self, 1.0);
    ai_setwalkmode(self, npc_walk);
    if (!c_bodystatecontains(self, bs_mobinteract)) {
        ai_gotowp(self, self.wp);
        ai_usemob(self, "BOOK", 1);
    };
};

func void zs_readbook_xardas_loop() {
    var int randomizer;

    printdebugnpc(pd_ta_loop, "ZS_ReadBook_Loop");
    randomizer = hlp_random(20);
    if (npc_getstatetime(self) >= (100 + randomizer)) {
        b_interruptmob("BOOK");
    };
    ai_wait(self, 1.0);
};

func void zs_readbook_xardas_end() {
    printdebugnpc(pd_ta_frame, "ZS_ReadBook_End");
    ai_usemob(self, "BOOK", -1);
};

func void zs_sleeper() {
    printdebugnpc(pd_mst_frame, "ZS_Sleeper");
    npc_percenable(self, perc_assessplayer, b_sleeper_assesssc);
    npc_setperctime(self, 0.5);
    ai_aligntowp(self);
    if (slf_fire == false) {
        ai_playanibs(self, "T_LIEDOWN", bs_lie);
    };
};

func int zs_sleeper_loop() {
    if ((slf_fire == true) && (!c_bodystatecontains(self, bs_lie))) {
        ai_turntonpc(self, hero);
        if (npc_getstatetime(self) > 5) {
            wld_playeffect("SPELLFX_SLEEPER_FIREBALL", self, hero, 2, 150, dam_fire, true);
            snd_play("DEM_Attack");
            npc_setstatetime(self, 0);
        };
    };
    return 0;
};

func void zs_sleeper_end() {
    printdebugnpc(pd_mst_frame, "ZS_Sleeper_end");
};

func void b_sleeper_assesssc() {
    if ((npc_getdisttonpc(self, hero) < 800) && (!npc_isinstate(hero, zs_magicsleep))) {
        b_fullstop(hero);
        ai_startstate(hero, zs_magicsleep, 0, "");
    };
};

func void zs_testbully() {
    printdebugnpc(pd_ta_frame, "ZS_TestBully");
    b_setperception(self);
    ai_setwalkmode(self, npc_walk);
    if (!npc_isonfp(self, "BULLY")) {
        ai_gotowp(self, self.wp);
    };
    self.aivar[17] = ta_it_none;
    if (wld_isfpavailable(self, "BULLY_A_")) {
        ai_gotofp(self, "BULLY_A_");
    }
    else if (wld_isfpavailable(self, "BULLY_B_")) {
        ai_gotofp(self, "BULLY_B_");
    }
    else {
        if (wld_isfpavailable(self, "BULLY_C_")) {
            ai_gotofp(self, "BULLY_C_");
        };
    };
    if (npc_isonfp(self, "BULLY")) {
        b_chooseapple(self);
    };
};

func int zs_testbully_loop() {
    var int multireaktion;

    printdebugnpc(pd_ta_loop, "ZS_TestBully_Loop");
    multireaktion = hlp_random(1000);
    b_playitemrandoms(self);
    ai_wait(self, 1.0);
    ai_aligntofp(self);
};

func void zs_testbully_end() {
    printdebugnpc(pd_ta_frame, "ZS_TestBully_End");
    b_clearitem(self);
};

func void zs_xardasdemon() {
    printdebugnpc(pd_ta_frame, "ZS_XardasDemon");
    npc_percenable(self, perc_assessplayer, b_assesssc);
    npc_percenable(self, perc_assesstalk, zs_talk);
    npc_setpermattitude(self, att_friendly);
    ai_gotowp(self, self.wp);
    ai_aligntowp(self);
};

func void zs_xardasdemon_loop() {
    printdebugnpc(pd_ta_loop, "ZS_XardasDemon_Loop");
    ai_wait(self, 1.0);
};

func void zs_xardasdemon_end() {
    printdebugnpc(pd_ta_frame, "ZS_XardasDemon_End");
};

func void zs_erpresser() {
    printdebugnpc(pd_ta_frame, "ZS_Erpresser");
    npc_percenable(self, perc_assessplayer, b_assesssc);
    npc_percenable(self, perc_assessdamage, zs_reacttodamage);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assesscaster, b_assesscaster);
    npc_percenable(self, perc_assessthreat, b_assessfighter);
    npc_percenable(self, perc_drawweapon, b_assessfighter);
    npc_percenable(self, perc_assessfightsound, b_assessfightsound);
    npc_percenable(self, perc_assessquietsound, b_assessquietsound);
    npc_percenable(self, perc_assesstalk, b_assesstalk);
    npc_setperctime(self, 1.0);
    if (!npc_isonfp(self, "ERPRESSER")) {
        ai_gotowp(self, self.wp);
    };
    if (wld_isfpavailable(self, "FP_")) {
        ai_gotofp(self, "FP_");
        ai_aligntofp(self);
    };
};

func void zs_erpresser_loop() {
    printdebugnpc(pd_ta_loop, "ZS_Erpresser_Loop");
    if (npc_getdisttonpc(self, hero) > 2000) {
        self.aivar[4] = 0;
    };
    b_smartturntonpc(self, hero);
    ai_wait(self, 0.5);
};

func void zs_erpresser_end() {
    printdebugnpc(pd_ta_frame, "ZS_Erpresser_End");
};

prototype mst_default_blackgobbo(c_npc) {
    name = "×åðíûé ãîáëèí";
    guild = gil_gobbo;
    level = 12;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 20;
    attribute[atr_hitpoints_max] /*1*/ = 80;
    attribute[atr_hitpoints] /*0*/ = 80;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    protection[prot_blunt] /*1*/ = 40;
    protection[prot_edge] /*2*/ = 40;
    protection[prot_point] /*6*/ = 10;
    protection[prot_fire] /*3*/ = 20;
    protection[prot_fly] /*4*/ = 0;
    protection[prot_magic] /*5*/ = 0;
    damagetype = dam_edge;
    aivar[22] = id_blackgobbo;
    aivar[7] = packhunter;
    aivar[1] = 1500;
    aivar[2] = 1200;
    aivar[3] = 700;
    aivar[4] = 4;
    aivar[5] = 10;
    aivar[6] = false;
    aivar[11] = onlyroutine;
    fight_tactic = fai_gobbo;
    senses = (sense_hear | sense_see) | sense_smell;
    senses_range = 3000;
    start_aistate = zs_mm_allscheduler;
};

func void set_blackgobbo_visuals() {
    mdl_setvisual(self, "Gobbo.mds");
    mdl_setvisualbody(self, "Gob_Body", 1, default, "", default, default, -1);
};

instance blackgobbomace(mst_default_blackgobbo) {
    attribute[atr_strength] /*4*/ = attribute[atr_strength] /*4*/ + 35;
    set_blackgobbo_visuals();
    npc_settofightmode(blackgobbomace, itmw_1h_nailmace_01 /*4385*/);
};

instance blackgobbowarrior(mst_default_blackgobbo) {
    name = "Ãîáëèí-âîèí";
    level = 15;
    attribute[atr_strength] /*4*/ = 60 + 30;
    attribute[atr_hitpoints_max] /*1*/ = 105;
    attribute[atr_hitpoints] /*0*/ = 105;
    protection[prot_blunt] /*1*/ = 50;
    protection[prot_edge] /*2*/ = 50;
    set_blackgobbo_visuals();
    npc_settofightmode(blackgobbowarrior, itmw_1h_mace_01 /*4397*/);
};

prototype mst_default_bloodfly(c_npc) {
    name = "Øåðøåíü";
    guild = gil_bloodfly;
    level = 7;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_hitpoints_max] /*1*/ = 50;
    attribute[atr_hitpoints] /*0*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    protection[prot_blunt] /*1*/ = 15;
    protection[prot_edge] /*2*/ = 15;
    protection[prot_point] /*6*/ = 8;
    protection[prot_fire] /*3*/ = 0;
    protection[prot_fly] /*4*/ = 0;
    protection[prot_magic] /*5*/ = 0;
    damagetype = dam_edge;
    aivar[22] = id_bloodfly;
    aivar[7] = passive;
    aivar[1] = 1200;
    aivar[2] = 1000;
    aivar[3] = 700;
    aivar[4] = 5;
    aivar[5] = 5;
    aivar[6] = true;
    aivar[17] = onlyroutine;
    fight_tactic = fai_bloodfly;
    senses = (sense_hear | sense_see) | sense_smell;
    senses_range = 1500;
    start_aistate = zs_mm_allscheduler;
};

func void set_bloodfly_visuals() {
    mdl_setvisual(self, "Bloodfly.mds");
    mdl_setvisualbody(self, "Blo_Body", default, default, "", default, default, -1);
};

instance bloodfly(mst_default_bloodfly) {
    set_bloodfly_visuals();
    npc_settofistmode(bloodfly);
    createinvitems(bloodfly, itat_bloodfly_01, 2);
};

instance helpbrothers_bloodfly(mst_default_bloodfly) {
    name = "Àãðåññèâíûé øåðøåíü";
    set_bloodfly_visuals();
    npc_settofistmode(helpbrothers_bloodfly);
    createinvitems(helpbrothers_bloodfly, itat_bloodfly_01, 2);
};

prototype mst_default_bloodhound(c_npc) {
    name = "Èùåéêà";
    guild = gil_shadowbeast;
    level = 22;
    attribute[atr_strength] /*4*/ = 90;
    attribute[atr_dexterity] /*5*/ = 90;
    attribute[atr_hitpoints_max] /*1*/ = 160;
    attribute[atr_hitpoints] /*0*/ = 160;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    protection[prot_blunt] /*1*/ = 55;
    protection[prot_edge] /*2*/ = 55;
    protection[prot_point] /*6*/ = 0;
    protection[prot_fire] /*3*/ = 0;
    protection[prot_fly] /*4*/ = 0;
    protection[prot_magic] /*5*/ = 0;
    damagetype = dam_edge;
    aivar[22] = id_bloodhound;
    aivar[7] = hunter;
    aivar[1] = 2500;
    aivar[2] = 2000;
    aivar[3] = 1800;
    aivar[4] = 2;
    aivar[5] = 10;
    aivar[6] = false;
    aivar[13] = onlyroutine;
    fight_tactic = fai_shadowbeast;
    senses = (sense_hear | sense_see) | sense_smell;
    senses_range = 3000;
    start_aistate = zs_mm_allscheduler;
};

func void set_bloodhound_visuals() {
    mdl_setvisual(self, "Shadow.mds");
    mdl_setvisualbody(self, "Bhd_Body", default, default, "", default, default, -1);
};

instance bloodhound(mst_default_bloodhound) {
    set_bloodhound_visuals();
    npc_settofistmode(bloodhound);
};

prototype mst_default_demon(c_npc) {
    name = "Îãíåííûé äåìîí";
    guild = gil_demon;
    level = 50;
    attribute[atr_strength] /*4*/ = 75;
    attribute[atr_dexterity] /*5*/ = 75;
    attribute[atr_hitpoints_max] /*1*/ = 300;
    attribute[atr_hitpoints] /*0*/ = 300;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    protection[prot_blunt] /*1*/ = 100;
    protection[prot_edge] /*2*/ = 100;
    protection[prot_point] /*6*/ = 35;
    protection[prot_fire] /*3*/ = 500;
    protection[prot_fly] /*4*/ = 1000;
    protection[prot_magic] /*5*/ = 35;
    damagetype = dam_fire;
    aivar[22] = id_demon;
    aivar[7] = passive;
    aivar[1] = 2800;
    aivar[2] = 2500;
    aivar[3] = 2000;
    aivar[4] = 3;
    aivar[5] = 10;
    aivar[6] = true;
    fight_tactic = fai_demon;
    senses = (sense_hear | sense_see) | sense_smell;
    senses_range = 3000;
    start_aistate = zs_mm_allscheduler;
};

func void set_demon_visuals() {
    mdl_setvisual(self, "Demon.mds");
    mdl_setvisualbody(self, "Dem_Body", default, default, "", default, default, -1);
};

instance demon(mst_default_demon) {
    set_demon_visuals();
    npc_settofistmode(demon);
};

instance summonedbypc_demon(mst_default_demon) {
    set_demon_visuals();
    aivar[20] = 400;
    aivar[21] = 1;
    aivar[23] = true;
    senses = sense_hear | sense_see;
    npc_settofistmode(summonedbypc_demon);
    start_aistate = zs_mm_summonedbypc;
};

instance summonedbynpc_demon(mst_default_demon) {
    set_demon_visuals();
    npc_settofistmode(summonedbynpc_demon);
    start_aistate = zs_mm_summoned;
};

instance xardasdemon(mst_default_demon) {
    npctype = npctype_friend;
    guild = gil_demon;
    flags = npc_flag_immortal;
    set_demon_visuals();
    aivar[22] = id_demon;
    npc_settofistmode(xardasdemon);
    start_aistate = zs_xardasdemon;
};

instance otdemon(mst_default_demon) {
    name = "Äåìîí";
    guild = gil_demon;
    level = 60;
    attribute[atr_strength] /*4*/ = 130;
    attribute[atr_dexterity] /*5*/ = 130;
    attribute[atr_hitpoints_max] /*1*/ = 250;
    attribute[atr_hitpoints] /*0*/ = 250;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    protection[prot_blunt] /*1*/ = 70;
    protection[prot_edge] /*2*/ = 70;
    protection[prot_point] /*6*/ = 70;
    protection[prot_fire] /*3*/ = 35;
    protection[prot_fly] /*4*/ = 70;
    protection[prot_magic] /*5*/ = 35;
    damagetype = dam_edge;
    set_demon_visuals();
    npc_settofistmode(otdemon);
};

prototype mst_default_demonlord(c_npc) {
    name = "Ëîðä äåìîíîâ";
    guild = gil_demon;
    level = 100;
    attribute[atr_strength] /*4*/ = 170;
    attribute[atr_dexterity] /*5*/ = 100;
    attribute[atr_hitpoints_max] /*1*/ = 400;
    attribute[atr_hitpoints] /*0*/ = 400;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    protection[prot_blunt] /*1*/ = 1000;
    protection[prot_edge] /*2*/ = 1000;
    protection[prot_point] /*6*/ = 1000;
    protection[prot_fire] /*3*/ = 70;
    protection[prot_fly] /*4*/ = 1000;
    protection[prot_magic] /*5*/ = 70;
    damagetype = dam_edge;
    aivar[22] = id_demonlord;
    aivar[7] = hunter;
    aivar[1] = 4000;
    aivar[2] = 4000;
    aivar[3] = info_vlk_3_dielage /*3500*/;
    aivar[4] = 0;
    aivar[5] = 10;
    aivar[6] = true;
    fight_tactic = fai_demon;
    senses = (sense_hear | sense_see) | sense_smell;
    senses_range = 4000;
    start_aistate = zs_mm_allscheduler;
};

func void set_demonlord_visuals() {
    mdl_setvisual(self, "Demon.mds");
    mdl_setvisualbody(self, "Dem2_Body", default, default, "", default, default, -1);
};

instance demonlord(mst_default_demonlord) {
    set_demonlord_visuals();
    npc_settofistmode(demonlord);
};

prototype mst_default_firewaran(c_npc) {
    name = "Îãíåííàÿ ÿùåðèöà";
    guild = gil_waran;
    level = 50;
    attribute[atr_strength] /*4*/ = 80;
    attribute[atr_dexterity] /*5*/ = 80;
    attribute[atr_hitpoints_max] /*1*/ = 200;
    attribute[atr_hitpoints] /*0*/ = 200;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    protection[prot_blunt] /*1*/ = 40;
    protection[prot_edge] /*2*/ = 40;
    protection[prot_point] /*6*/ = 20;
    protection[prot_fire] /*3*/ = 9999;
    protection[prot_fly] /*4*/ = 0;
    protection[prot_magic] /*5*/ = 0;
    damagetype = dam_fire;
    aivar[22] = id_firewaran;
    aivar[7] = passive;
    aivar[1] = 1200;
    aivar[2] = 1000;
    aivar[3] = 700;
    aivar[4] = 5;
    aivar[5] = 10;
    aivar[6] = false;
    aivar[13] = onlyroutine;
    fight_tactic = fai_waran;
    senses = (sense_hear | sense_see) | sense_smell;
    senses_range = 3000;
    start_aistate = zs_mm_allscheduler;
};

func void set_firewaran_visuals() {
    mdl_setvisual(self, "Waran.mds");
    mdl_applyoverlaymds(self, "Firewaran.mds");
    mdl_setvisualbody(self, "War_Fire_Body", default, default, "", default, default, -1);
};

instance firewaran(mst_default_firewaran) {
    set_firewaran_visuals();
    npc_settofistmode(firewaran);
};

prototype mst_default_greengobbo(c_npc) {
    name = "Ãîáëèí";
    guild = gil_gobbo;
    level = 6;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 20;
    attribute[atr_hitpoints_max] /*1*/ = 40;
    attribute[atr_hitpoints] /*0*/ = 40;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    protection[prot_blunt] /*1*/ = 15;
    protection[prot_edge] /*2*/ = 15;
    protection[prot_point] /*6*/ = 8;
    protection[prot_fire] /*3*/ = 15;
    protection[prot_fly] /*4*/ = 0;
    protection[prot_magic] /*5*/ = 0;
    damagetype = dam_edge;
    aivar[22] = id_gobbo;
    aivar[7] = packhunter;
    aivar[1] = 1500;
    aivar[2] = 1000;
    aivar[3] = 700;
    aivar[4] = 4;
    aivar[5] = 10;
    aivar[6] = false;
    aivar[11] = onlyroutine;
    fight_tactic = fai_gobbo;
    senses = (sense_hear | sense_see) | sense_smell;
    senses_range = 3000;
    start_aistate = zs_mm_allscheduler;
};

func void set_greengobbo_visuals() {
    mdl_setvisual(self, "Gobbo.mds");
    mdl_setvisualbody(self, "Gob_Body", 0, default, "", default, default, -1);
};

instance greengobboclub(mst_default_greengobbo) {
    attribute[atr_strength] /*4*/ = attribute[atr_strength] /*4*/ + 5;
    set_greengobbo_visuals();
    fight_tactic = fai_monster_coward;
    npc_settofightmode(greengobboclub, itmw_1h_club_01 /*4377*/);
};

instance greengobbosword(mst_default_greengobbo) {
    attribute[atr_strength] /*4*/ = attribute[atr_strength] /*4*/ + 10;
    set_greengobbo_visuals();
    npc_settofightmode(greengobbosword, itmw_1h_sword_old_01 /*4384*/);
};

prototype mst_default_golem(c_npc) {
    name = "Ãîëåì";
    guild = gil_golem;
    level = 100;
    attribute[atr_strength] /*4*/ = 150;
    attribute[atr_dexterity] /*5*/ = 150;
    attribute[atr_hitpoints_max] /*1*/ = 600;
    attribute[atr_hitpoints] /*0*/ = 600;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    protection[prot_blunt] /*1*/ = 9999;
    protection[prot_edge] /*2*/ = 9999;
    protection[prot_point] /*6*/ = 9999;
    protection[prot_fire] /*3*/ = 9999;
    protection[prot_fly] /*4*/ = 9999;
    protection[prot_magic] /*5*/ = 9999;
    damagetype = dam_fly;
    aivar[7] = passive;
    aivar[1] = 1500;
    aivar[2] = 1500;
    aivar[3] = 1500;
    aivar[4] = 0;
    aivar[5] = 5;
    aivar[6] = true;
    aivar[11] = onlyroutine;
    fight_tactic = fai_golem;
    senses = (sense_hear | sense_see) | sense_smell;
    senses_range = 2000;
    start_aistate = zs_mm_allscheduler;
};

func void set_stonegolem_visuals() {
    mdl_setvisual(self, "Golem.mds");
    mdl_setvisualbody(self, "Gol_Body", default, default, "", default, default, -1);
};

func void set_firegolem_visuals() {
    mdl_setvisual(self, "Golem.mds");
    mdl_applyoverlaymds(self, "Golem_Firegolem.mds");
    mdl_setvisualbody(self, "Gol_Fire_Body", default, default, "", default, default, -1);
};

func void set_icegolem_visuals() {
    mdl_setvisual(self, "Golem.mds");
    mdl_applyoverlaymds(self, "Golem_Icegolem.mds");
    mdl_setvisualbody(self, "Gol_Ice_Body", default, default, "", default, default, -1);
};

instance stonegolem(mst_default_golem) {
    name = "Êàìåííûé ãîëåì";
    protection[prot_blunt] /*1*/ = 75;
    set_stonegolem_visuals();
    aivar[22] = id_stonegolem;
    npc_settofistmode(stonegolem);
    createinvitem(stonegolem, itat_stonegolem_01);
};

instance summonedbypc_stonegolem(mst_default_golem) {
    name = "Ãîëåì";
    protection[prot_edge] /*2*/ = 100;
    protection[prot_blunt] /*1*/ = 75;
    set_stonegolem_visuals();
    aivar[22] = id_stonegolem;
    aivar[20] = 400;
    aivar[21] = 2;
    aivar[23] = true;
    senses = sense_hear | sense_see;
    npc_settofistmode(summonedbypc_stonegolem);
    start_aistate = zs_mm_summonedbypc;
};

instance summonedbynpc_stonegolem(mst_default_golem) {
    name = "Êàìåííûé ãîëåì";
    protection[prot_blunt] /*1*/ = 75;
    set_stonegolem_visuals();
    aivar[22] = id_stonegolem;
    npc_settofistmode(summonedbynpc_stonegolem);
    start_aistate = zs_mm_summoned;
};

instance firegolem(mst_default_golem) {
    name = "Îãíåííûé ãîëåì";
    attribute[atr_strength] /*4*/ = 50;
    attribute[atr_hitpoints_max] /*1*/ = 150;
    attribute[atr_hitpoints] /*0*/ = 150;
    protection[prot_magic] /*5*/ = 0;
    damagetype = dam_fire;
    set_firegolem_visuals();
    aivar[22] = id_firegolem;
    npc_settofistmode(firegolem);
    createinvitem(firegolem, itat_firegolem_01);
};

instance icegolem(mst_default_golem) {
    name = "Ëåäÿíîé ãîëåì";
    attribute[atr_mana_max] /*3*/ = 500;
    attribute[atr_mana] /*2*/ = 500;
    attribute[atr_hitpoints_max] /*1*/ = 150;
    attribute[atr_hitpoints] /*0*/ = 150;
    protection[prot_fire] /*3*/ = 0;
    damagetype = dam_blunt;
    set_icegolem_visuals();
    aivar[22] = id_icegolem;
    fight_tactic = fai_human_mage;
    createinvitem(icegolem, itat_icegolem_01);
    createinvitem(icegolem, itat_icegolem_02);
};

instance bridgegolem(mst_default_golem) {
    name = "Ìîñòîâîé ãîëåì";
    level = 50;
    attribute[atr_strength] /*4*/ = 100;
    attribute[atr_dexterity] /*5*/ = 100;
    attribute[atr_hitpoints_max] /*1*/ = 250;
    attribute[atr_hitpoints] /*0*/ = 250;
    protection[prot_blunt] /*1*/ = 50;
    set_stonegolem_visuals();
    npc_settofistmode(bridgegolem);
};

prototype mst_default_harpie(c_npc) {
    name = "Ãàðïèÿ";
    guild = gil_demon;
    level = 20;
    attribute[atr_strength] /*4*/ = 85;
    attribute[atr_dexterity] /*5*/ = 85;
    attribute[atr_hitpoints_max] /*1*/ = 200;
    attribute[atr_hitpoints] /*0*/ = 200;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    protection[prot_blunt] /*1*/ = 50;
    protection[prot_edge] /*2*/ = 30;
    protection[prot_point] /*6*/ = 10;
    protection[prot_fire] /*3*/ = 0;
    protection[prot_fly] /*4*/ = 0;
    protection[prot_magic] /*5*/ = 50;
    damagetype = dam_edge;
    aivar[22] = id_harpie;
    aivar[7] = passive;
    aivar[1] = 2500;
    aivar[2] = 2500;
    aivar[3] = 2000;
    aivar[4] = 3;
    aivar[5] = 10;
    aivar[6] = true;
    aivar[11] = onlyroutine;
    fight_tactic = fai_demon;
    senses = (sense_hear | sense_see) | sense_smell;
    senses_range = 3000;
    start_aistate = zs_mm_allscheduler;
};

func void set_harpie_visuals() {
    mdl_setvisual(self, "Harpie.mds");
    mdl_setvisualbody(self, "Har_Body", default, default, "", default, default, -1);
};

instance harpie(mst_default_harpie) {
    set_harpie_visuals();
    npc_settofistmode(harpie);
};

prototype mst_default_lurker(c_npc) {
    name = "Øíûã";
    guild = gil_lurker;
    level = 17;
    attribute[atr_strength] /*4*/ = 50;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_hitpoints_max] /*1*/ = 90;
    attribute[atr_hitpoints] /*0*/ = 90;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    protection[prot_blunt] /*1*/ = 50;
    protection[prot_edge] /*2*/ = 50;
    protection[prot_point] /*6*/ = 20;
    protection[prot_fire] /*3*/ = 50;
    protection[prot_fly] /*4*/ = 0;
    protection[prot_magic] /*5*/ = 0;
    damagetype = dam_edge;
    aivar[22] = id_lurker;
    aivar[7] = hunter;
    aivar[1] = 1400;
    aivar[2] = 1300;
    aivar[3] = 700;
    aivar[4] = 5;
    aivar[5] = 10;
    aivar[6] = true;
    aivar[13] = onlyroutine;
    fight_tactic = fai_lurker;
    senses = (sense_hear | sense_see) | sense_smell;
    senses_range = 3000;
    start_aistate = zs_mm_allscheduler;
};

func void set_lurker_visuals() {
    mdl_setvisual(self, "Lurker.mds");
    mdl_setvisualbody(self, "Lur_Body", default, default, "", default, default, -1);
};

instance lurker(mst_default_lurker) {
    set_lurker_visuals();
    npc_settofistmode(lurker);
};

instance damlurker(mst_default_lurker) {
    name = "Øíûã ó ïëîòèíû";
    level = 20;
    id = mid_damlurker;
    set_lurker_visuals();
    npc_settofistmode(damlurker);
    createinvitem(damlurker, itat_damlurker_01);
};

prototype mst_default_meatbug(c_npc) {
    name = "Ìÿñíîé æóê";
    guild = gil_meatbug;
    level = 1;
    attribute[atr_strength] /*4*/ = 1;
    attribute[atr_dexterity] /*5*/ = 1;
    attribute[atr_hitpoints_max] /*1*/ = 10;
    attribute[atr_hitpoints] /*0*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    protection[prot_blunt] /*1*/ = 0;
    protection[prot_edge] /*2*/ = 0;
    protection[prot_point] /*6*/ = 0;
    protection[prot_fire] /*3*/ = 100;
    protection[prot_fly] /*4*/ = 0;
    protection[prot_magic] /*5*/ = 0;
    damagetype = dam_edge;
    aivar[22] = id_meatbug;
    aivar[6] = false;
    aivar[17] = onlyroutine;
    senses = sense_smell;
    senses_range = 500;
    start_aistate = zs_mm_allscheduler;
};

func void set_meatbug_visuals() {
    mdl_setvisual(self, "Meatbug.mds");
    mdl_setvisualbody(self, "Mbg_Body", default, default, "", default, default, -1);
};

instance meatbug(mst_default_meatbug) {
    set_meatbug_visuals();
    createinvitems(meatbug, itat_meatbug_01, 1);
};

prototype mst_default_minecrawler(c_npc) {
    name = "Ïîëçóí";
    guild = gil_minecrawler;
    level = 13;
    attribute[atr_strength] /*4*/ = 65;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_hitpoints_max] /*1*/ = 90;
    attribute[atr_hitpoints] /*0*/ = 90;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    protection[prot_blunt] /*1*/ = 55;
    protection[prot_edge] /*2*/ = 50;
    protection[prot_point] /*6*/ = 15;
    protection[prot_fire] /*3*/ = 25;
    protection[prot_fly] /*4*/ = 0;
    protection[prot_magic] /*5*/ = 0;
    damagetype = dam_edge;
    aivar[22] = id_minecrawler;
    aivar[7] = packhunter;
    aivar[1] = 1200;
    aivar[2] = 1200;
    aivar[3] = 1000;
    aivar[4] = 2;
    aivar[5] = 10;
    aivar[6] = false;
    aivar[17] = onlyroutine;
    fight_tactic = fai_minecrawler;
    senses = (sense_hear | sense_see) | sense_smell;
    senses_range = 3000;
    start_aistate = zs_mm_allscheduler;
};

func void set_minecrawler_visuals() {
    mdl_setvisual(self, "Crawler.mds");
    mdl_setvisualbody(self, "Crw_Body", default, default, "", default, default, -1);
};

instance minecrawler(mst_default_minecrawler) {
    set_minecrawler_visuals();
    npc_settofistmode(minecrawler);
};

prototype mst_default_minecrawlerqueen(c_npc) {
    name = "Êîðîëåâà ïîëçóíîâ";
    guild = gil_minecrawler;
    level = 200;
    attribute[atr_strength] /*4*/ = 100;
    attribute[atr_dexterity] /*5*/ = 100;
    attribute[atr_hitpoints_max] /*1*/ = 400;
    attribute[atr_hitpoints] /*0*/ = 400;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    protection[prot_blunt] /*1*/ = 70;
    protection[prot_edge] /*2*/ = 70;
    protection[prot_point] /*6*/ = 60;
    protection[prot_fire] /*3*/ = 60;
    protection[prot_fly] /*4*/ = 1000;
    protection[prot_magic] /*5*/ = 60;
    damagetype = dam_edge;
    aivar[22] = id_minecrawlerqueen;
    aivar[7] = passive;
    aivar[1] = 1200;
    aivar[2] = 1000;
    aivar[3] = 700;
    aivar[4] = 1;
    aivar[5] = 10;
    aivar[6] = false;
    fight_tactic = fai_minecrawlerqueen;
    senses = (sense_hear | sense_see) | sense_smell;
    senses_range = 3000;
    start_aistate = zs_mm_allscheduler;
};

func void set_minecrawlerqueen_visuals() {
    mdl_setvisual(self, "CrwQueen.mds");
    mdl_setvisualbody(self, "CrQ_Body", default, default, "", default, default, -1);
};

instance minecrawlerqueen(mst_default_minecrawlerqueen) {
    set_minecrawlerqueen_visuals();
    npc_settofistmode(minecrawlerqueen);
};

prototype mst_default_minecrawlerwarrior(c_npc) {
    name = "Âîèí ïîëçóíîâ";
    guild = gil_minecrawler;
    level = 22;
    attribute[atr_strength] /*4*/ = 130;
    attribute[atr_dexterity] /*5*/ = 70;
    attribute[atr_hitpoints_max] /*1*/ = 200;
    attribute[atr_hitpoints] /*0*/ = 200;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    protection[prot_blunt] /*1*/ = 120;
    protection[prot_edge] /*2*/ = 120;
    protection[prot_point] /*6*/ = 35;
    protection[prot_fire] /*3*/ = 50;
    protection[prot_fly] /*4*/ = 30;
    protection[prot_magic] /*5*/ = 50;
    damagetype = dam_edge;
    aivar[22] = id_minecrawlerwarrior;
    aivar[7] = hunter;
    aivar[1] = 1200;
    aivar[2] = 1000;
    aivar[3] = 700;
    aivar[4] = 2;
    aivar[5] = 10;
    aivar[6] = false;
    aivar[17] = onlyroutine;
    fight_tactic = fai_minecrawler;
    senses = (sense_hear | sense_see) | sense_smell;
    senses_range = 2000;
    start_aistate = zs_mm_allscheduler;
};

func void set_minecrawlerwarrior_visuals() {
    mdl_setvisual(self, "Crawler.mds");
    mdl_setvisualbody(self, "Cr2_Body", default, default, "", default, default, -1);
};

instance minecrawlerwarrior(mst_default_minecrawlerwarrior) {
    set_minecrawlerwarrior_visuals();
    npc_settofistmode(minecrawlerwarrior);
};

instance otminecrawler(mst_default_minecrawlerwarrior) {
    name = "Õðàìîâûé ïîëçóí";
    level = 25;
    attribute[atr_strength] /*4*/ = 120;
    attribute[atr_dexterity] /*5*/ = 120;
    attribute[atr_hitpoints_max] /*1*/ = 300;
    attribute[atr_hitpoints] /*0*/ = 300;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    protection[prot_blunt] /*1*/ = 70;
    protection[prot_edge] /*2*/ = 70;
    protection[prot_point] /*6*/ = 35;
    protection[prot_fire] /*3*/ = 30;
    protection[prot_fly] /*4*/ = 70;
    protection[prot_magic] /*5*/ = 30;
    damagetype = dam_edge;
    set_minecrawlerwarrior_visuals();
    npc_settofistmode(otminecrawler);
};

prototype mst_default_molerat(c_npc) {
    name = "Êðîòîêðûñ";
    guild = gil_molerat;
    level = 5;
    attribute[atr_strength] /*4*/ = 8;
    attribute[atr_dexterity] /*5*/ = 8;
    attribute[atr_hitpoints_max] /*1*/ = 40;
    attribute[atr_hitpoints] /*0*/ = 40;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    protection[prot_blunt] /*1*/ = 8;
    protection[prot_edge] /*2*/ = 8;
    protection[prot_point] /*6*/ = 5;
    protection[prot_fire] /*3*/ = 5;
    protection[prot_fly] /*4*/ = 0;
    protection[prot_magic] /*5*/ = 0;
    damagetype = dam_edge;
    aivar[22] = id_molerat;
    aivar[7] = passive;
    aivar[1] = 1200;
    aivar[2] = 1000;
    aivar[3] = 700;
    aivar[4] = 5;
    aivar[5] = 5;
    aivar[6] = false;
    aivar[13] = onlyroutine;
    fight_tactic = fai_molerat;
    senses = (sense_hear | sense_see) | sense_smell;
    senses_range = 3000;
    start_aistate = zs_mm_allscheduler;
};

func void set_molerat_visuals() {
    mdl_setvisual(self, "Molerat.mds");
    mdl_setvisualbody(self, "Mol_Body", default, default, "", default, default, -1);
};

instance molerat(mst_default_molerat) {
    set_molerat_visuals();
    npc_settofistmode(molerat);
    createinvitems(molerat, itfomuttonraw, 2);
};

instance ymolerat(mst_default_molerat) {
    name = "Ìîëîäîé êðîòîêðûñ";
    level = 4;
    attribute[atr_strength] /*4*/ = 5;
    attribute[atr_dexterity] /*5*/ = 5;
    attribute[atr_hitpoints_max] /*1*/ = 40;
    attribute[atr_hitpoints] /*0*/ = 40;
    protection[prot_blunt] /*1*/ = 8;
    protection[prot_edge] /*2*/ = 8;
    set_molerat_visuals();
    mdl_setmodelscale(ymolerat, 0.9, 0.9, 0.9);
    fight_tactic = fai_monster_coward;
    npc_settofistmode(ymolerat);
    createinvitems(ymolerat, itfomuttonraw, 1);
};

prototype mst_default_orcbiter(c_npc) {
    name = "Êóñà÷";
    guild = gil_orcdog;
    level = 12;
    attribute[atr_strength] /*4*/ = 80;
    attribute[atr_dexterity] /*5*/ = 80;
    attribute[atr_hitpoints_max] /*1*/ = 80;
    attribute[atr_hitpoints] /*0*/ = 80;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    protection[prot_blunt] /*1*/ = 40;
    protection[prot_edge] /*2*/ = 40;
    protection[prot_point] /*6*/ = 20;
    protection[prot_fire] /*3*/ = 20;
    protection[prot_fly] /*4*/ = 0;
    protection[prot_magic] /*5*/ = 0;
    damagetype = dam_edge;
    aivar[22] = id_orcbiter;
    aivar[7] = hunter;
    aivar[1] = 1200;
    aivar[2] = 1000;
    aivar[3] = 700;
    aivar[4] = 5;
    aivar[5] = 10;
    aivar[6] = true;
    aivar[11] = onlyroutine;
    fight_tactic = fai_scavenger;
    senses = (sense_hear | sense_see) | sense_smell;
    senses_range = 3000;
    start_aistate = zs_mm_allscheduler;
};

func void set_orcbiter_visuals() {
    mdl_setvisual(self, "Scavenger.mds");
    mdl_applyoverlaymds(self, "Orcbiter.mds");
    mdl_setvisualbody(self, "Sc2_Body", default, default, "", default, default, -1);
};

instance orcbiter(mst_default_orcbiter) {
    set_orcbiter_visuals();
    npc_settofistmode(orcbiter);
    createinvitems(orcbiter, itfomuttonraw, 2);
};

prototype mst_default_orcdog(c_npc) {
    name = "Îðî÷üÿ ãîí÷àÿ";
    guild = gil_orcdog;
    level = 12;
    attribute[atr_strength] /*4*/ = 80;
    attribute[atr_dexterity] /*5*/ = 80;
    attribute[atr_hitpoints_max] /*1*/ = 160;
    attribute[atr_hitpoints] /*0*/ = 160;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    protection[prot_blunt] /*1*/ = 60;
    protection[prot_edge] /*2*/ = 60;
    protection[prot_point] /*6*/ = 30;
    protection[prot_fire] /*3*/ = 30;
    protection[prot_fly] /*4*/ = 0;
    protection[prot_magic] /*5*/ = 0;
    damagetype = dam_edge;
    aivar[22] = id_blackwolf;
    aivar[7] = hunter;
    aivar[1] = 2000;
    aivar[2] = 1800;
    aivar[3] = 1500;
    aivar[4] = 5;
    aivar[5] = 15;
    aivar[6] = true;
    aivar[11] = onlyroutine;
    fight_tactic = fai_orcdog;
    senses = (sense_hear | sense_see) | sense_smell;
    senses_range = 3000;
    start_aistate = zs_mm_allscheduler;
};

func void set_orcdog_visuals() {
    mdl_setvisual(self, "Wolf.mds");
    mdl_setvisualbody(self, "Dog_Body", default, default, "", default, default, -1);
};

instance orcdog(mst_default_orcdog) {
    set_orcdog_visuals();
    npc_settofistmode(orcdog);
};

prototype mst_default_orcscout(c_npc) {
    name = "Îõîòíèê îðêîâ";
    npctype = npctype_guard;
    guild = gil_orcscout;
    level = 20;
    voice = 17;
    attribute[atr_strength] /*4*/ = 40;
    attribute[atr_dexterity] /*5*/ = 40;
    attribute[atr_hitpoints_max] /*1*/ = 200;
    attribute[atr_hitpoints] /*0*/ = 200;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    protection[prot_blunt] /*1*/ = 50;
    protection[prot_edge] /*2*/ = 50;
    protection[prot_point] /*6*/ = 25;
    protection[prot_fire] /*3*/ = 25;
    protection[prot_fly] /*4*/ = 0;
    protection[prot_magic] /*5*/ = 0;
    damagetype = dam_edge;
    aivar[7] = hunter;
    aivar[1] = 1200;
    aivar[2] = 1000;
    aivar[3] = 700;
    aivar[4] = 5;
    aivar[5] = 10;
    aivar[6] = false;
    fight_tactic = fai_human_strong;
    senses = (sense_hear | sense_see) | sense_smell;
    senses_range = 2500;
    start_aistate = zs_guardpatrol;
};

func void set_orcscout_visuals() {
    mdl_setvisual(self, "Orc.mds");
    mdl_setvisualbody(self, "Orc_BodyScout", default, default, "Orc_HeadWarrior", default, default, -1);
};

instance orcscout(mst_default_orcscout) {
    set_orcscout_visuals();
    equipitem(orcscout, itmw2horcsword01 /*4452*/);
};

instance orcpeasanteatanddrink(mst_default_orcscout) {
    name = "Îðê";
    guild = gil_orcscout;
    set_orcscout_visuals();
    createinvitem(orcpeasanteatanddrink, itmw2horcsword01);
    start_aistate = zs_orc_eatanddrink;
};

instance orcscoutgyd(mst_default_orcscout) {
    name = "Ðàçâåä÷èê îðêîâ";
    level = 18;
    attribute[atr_strength] /*4*/ = 30;
    set_orcscout_visuals();
    aivar[1] = 1500;
    aivar[2] = 1200;
    aivar[3] = 1000;
    aivar[4] = 0;
    aivar[5] = 10;
    aivar[13] = onlyroutine;
    equipitem(orcscoutgyd, itmw2horcsword01 /*4452*/);
    start_aistate = zs_mm_allscheduler;
};

prototype mst_default_orcshaman(c_npc) {
    name = "Øàìàí îðêîâ";
    npctype = npctype_guard;
    guild = gil_orcshaman;
    level = 50;
    attribute[atr_strength] /*4*/ = 100;
    attribute[atr_dexterity] /*5*/ = 100;
    attribute[atr_hitpoints_max] /*1*/ = 200;
    attribute[atr_hitpoints] /*0*/ = 200;
    attribute[atr_mana_max] /*3*/ = 50;
    attribute[atr_mana] /*2*/ = 50;
    protection[prot_blunt] /*1*/ = 50;
    protection[prot_edge] /*2*/ = 50;
    protection[prot_point] /*6*/ = 25;
    protection[prot_fire] /*3*/ = 25;
    protection[prot_fly] /*4*/ = 20;
    protection[prot_magic] /*5*/ = 100;
    damagetype = dam_edge;
    aivar[7] = passive;
    aivar[1] = 1200;
    aivar[2] = 1000;
    aivar[3] = 700;
    aivar[4] = 5;
    aivar[5] = 10;
    aivar[6] = false;
    aivar[11] = onlyroutine;
    fight_tactic = fai_human_mage;
    senses = (sense_hear | sense_see) | sense_smell;
    senses_range = 3000;
    start_aistate = zs_orc_pray;
};

func void set_orcshaman_visuals() {
    mdl_setvisual(self, "Orc.mds");
    mdl_applyoverlaymds(self, "Orc_Shaman.mds");
    mdl_setvisualbody(self, "Orc_BodyShaman", default, default, "Orc_HeadShaman", default, default, -1);
};

instance orcshaman(mst_default_orcshaman) {
    set_orcshaman_visuals();
    createinvitem(orcshaman, itarrunefireball);
    equipitem(orcshaman, itrworcstaff /*4458*/);
};

prototype mst_default_orcslave(c_npc) {
    name = "Ðàá îðêîâ";
    guild = gil_orcslave;
    level = 15;
    attribute[atr_strength] /*4*/ = 50;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_hitpoints_max] /*1*/ = 200;
    attribute[atr_hitpoints] /*0*/ = 200;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    protection[prot_blunt] /*1*/ = 50;
    protection[prot_edge] /*2*/ = 50;
    protection[prot_point] /*6*/ = 25;
    protection[prot_fire] /*3*/ = 25;
    protection[prot_fly] /*4*/ = 0;
    protection[prot_magic] /*5*/ = 0;
    damagetype = dam_edge;
    aivar[6] = false;
    fight_tactic = fai_orc;
    senses = (sense_hear | sense_see) | sense_smell;
    senses_range = 3000;
    start_aistate = zs_mm_allscheduler;
};

func void set_orcslave_visuals() {
    mdl_setvisual(self, "Orc.mds");
    mdl_setvisualbody(self, "Orc_BodySlave", default, default, "Orc_HeadSlave", default, default, -1);
};

instance orcslave(mst_default_orcslave) {
    guild = gil_orcslave;
    set_orcslave_visuals();
};

instance orcpeasantdance(mst_default_orcslave) {
    name = "Îðê";
    guild = gil_orcwarrior;
    set_orcslave_visuals();
    createinvitem(orcpeasantdance, itmw2horcsword01);
    start_aistate = zs_orc_dance;
};

instance orcpeasantdrum(mst_default_orcslave) {
    name = "Îðê";
    guild = gil_orcwarrior;
    set_orcslave_visuals();
    createinvitem(orcpeasantdrum, itmw2horcsword01);
    start_aistate = zs_orc_drum;
};

prototype mst_default_orcwarrior(c_npc) {
    name = "Âîèí îðêîâ";
    npctype = npctype_guard;
    guild = gil_orcwarrior;
    level = 25;
    voice = 17;
    attribute[atr_strength] /*4*/ = 60;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_hitpoints_max] /*1*/ = 250;
    attribute[atr_hitpoints] /*0*/ = 250;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    protection[prot_blunt] /*1*/ = 100;
    protection[prot_edge] /*2*/ = 100;
    protection[prot_point] /*6*/ = 40;
    protection[prot_fire] /*3*/ = 55;
    protection[prot_fly] /*4*/ = 30;
    protection[prot_magic] /*5*/ = 30;
    damagetype = dam_edge;
    aivar[7] = hunter;
    aivar[1] = 1200;
    aivar[2] = 1000;
    aivar[3] = 700;
    aivar[4] = 5;
    aivar[5] = 10;
    aivar[6] = false;
    fight_tactic = fai_human_master;
    senses = (sense_hear | sense_see) | sense_smell;
    senses_range = 2000;
    start_aistate = zs_guard;
};

func void set_orcwarrior_visuals() {
    mdl_setvisual(self, "Orc.mds");
    mdl_setvisualbody(self, "Orc_BodyWarrior", default, default, "Orc_HeadWarrior", default, default, -1);
};

instance orcwarrior1(mst_default_orcwarrior) {
    name = "Âîèí îðêîâ";
    level = 25;
    attribute[atr_strength] /*4*/ = 55;
    attribute[atr_hitpoints_max] /*1*/ = 210;
    attribute[atr_hitpoints] /*0*/ = 210;
    protection[prot_blunt] /*1*/ = 60;
    protection[prot_edge] /*2*/ = 60;
    protection[prot_point] /*6*/ = 30;
    protection[prot_fire] /*3*/ = 30;
    set_orcwarrior_visuals();
    equipitem(orcwarrior1, itmw2horcaxe01 /*4453*/);
};

instance orcwarrior2(mst_default_orcwarrior) {
    name = "Âîèí îðêîâ";
    level = 30;
    attribute[atr_strength] /*4*/ = 60;
    attribute[atr_hitpoints_max] /*1*/ = 230;
    attribute[atr_hitpoints] /*0*/ = 230;
    protection[prot_blunt] /*1*/ = 70;
    protection[prot_edge] /*2*/ = 70;
    protection[prot_point] /*6*/ = 35;
    protection[prot_fire] /*3*/ = 35;
    set_orcwarrior_visuals();
    equipitem(orcwarrior2, itmw2horcaxe02 /*4454*/);
};

instance orcwarrior3(mst_default_orcwarrior) {
    name = "Êëàíîâûé áîåé îðêîâ";
    level = 35;
    attribute[atr_strength] /*4*/ = 65;
    attribute[atr_hitpoints_max] /*1*/ = 250;
    attribute[atr_hitpoints] /*0*/ = 250;
    protection[prot_blunt] /*1*/ = 80;
    protection[prot_edge] /*2*/ = 80;
    protection[prot_point] /*6*/ = 40;
    protection[prot_fire] /*3*/ = 40;
    set_orcwarrior_visuals();
    equipitem(orcwarrior3, itmw2horcaxe03 /*4455*/);
};

instance orcwarrior4(mst_default_orcwarrior) {
    name = "Õðàìîâûé áîåö îðêîâ";
    level = 40;
    attribute[atr_strength] /*4*/ = 75;
    attribute[atr_hitpoints_max] /*1*/ = 300;
    attribute[atr_hitpoints] /*0*/ = 300;
    protection[prot_blunt] /*1*/ = 100;
    protection[prot_edge] /*2*/ = 100;
    protection[prot_point] /*6*/ = 45;
    protection[prot_fire] /*3*/ = 45;
    set_orcwarrior_visuals();
    equipitem(orcwarrior4, itmw2horcaxe04 /*4456*/);
};

prototype mst_default_razor(c_npc) {
    name = "Îñòåð";
    guild = gil_snapper;
    level = 20;
    attribute[atr_strength] /*4*/ = 110;
    attribute[atr_dexterity] /*5*/ = 110;
    attribute[atr_hitpoints_max] /*1*/ = 200;
    attribute[atr_hitpoints] /*0*/ = 200;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    protection[prot_blunt] /*1*/ = 100;
    protection[prot_edge] /*2*/ = 100;
    protection[prot_point] /*6*/ = 30;
    protection[prot_fire] /*3*/ = 80;
    protection[prot_fly] /*4*/ = 0;
    protection[prot_magic] /*5*/ = 0;
    damagetype = dam_edge;
    aivar[22] = id_razor;
    aivar[7] = hunter;
    aivar[1] = 1400;
    aivar[2] = 1200;
    aivar[3] = 700;
    aivar[4] = 4;
    aivar[5] = 10;
    aivar[6] = true;
    aivar[11] = onlyroutine;
    fight_tactic = fai_snapper;
    senses = (sense_hear | sense_see) | sense_smell;
    senses_range = 3000;
    start_aistate = zs_mm_allscheduler;
};

func void set_razor_visuals() {
    mdl_setvisual(self, "Snapper.mds");
    mdl_setvisualbody(self, "Raz_Body", default, default, "", default, default, -1);
};

instance razor(mst_default_razor) {
    set_razor_visuals();
    npc_settofistmode(razor);
};

prototype mst_default_scavenger(c_npc) {
    name = "Ïàäàëüùèê";
    guild = gil_scavenger;
    level = 5;
    attribute[atr_strength] /*4*/ = 8;
    attribute[atr_dexterity] /*5*/ = 8;
    attribute[atr_hitpoints_max] /*1*/ = 40;
    attribute[atr_hitpoints] /*0*/ = 40;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    protection[prot_blunt] /*1*/ = 9;
    protection[prot_edge] /*2*/ = 9;
    protection[prot_point] /*6*/ = 5;
    protection[prot_fire] /*3*/ = 0;
    protection[prot_fly] /*4*/ = 0;
    protection[prot_magic] /*5*/ = 0;
    damagetype = dam_edge;
    aivar[22] = id_scavenger;
    aivar[7] = passive;
    aivar[1] = 1200;
    aivar[2] = 1000;
    aivar[3] = 700;
    aivar[4] = 5;
    aivar[5] = 10;
    aivar[6] = true;
    aivar[9] = 22;
    aivar[10] = 6;
    aivar[15] = 6;
    aivar[16] = 22;
    fight_tactic = fai_scavenger;
    senses = (sense_hear | sense_see) | sense_smell;
    senses_range = 3000;
    start_aistate = zs_mm_allscheduler;
};

func void set_scavenger_visuals() {
    mdl_setvisual(self, "Scavenger.mds");
    mdl_setvisualbody(self, "Sca_Body", default, default, "", default, default, -1);
};

instance scavenger(mst_default_scavenger) {
    set_scavenger_visuals();
    npc_settofistmode(scavenger);
    createinvitems(scavenger, itfomuttonraw, 2);
};

instance yscavenger(mst_default_scavenger) {
    name = "Ìîëîäîé ïàäàëüùèê";
    level = 4;
    attribute[atr_strength] /*4*/ = 6;
    attribute[atr_dexterity] /*5*/ = 6;
    attribute[atr_hitpoints_max] /*1*/ = 35;
    attribute[atr_hitpoints] /*0*/ = 35;
    protection[prot_blunt] /*1*/ = 8;
    protection[prot_edge] /*2*/ = 8;
    set_scavenger_visuals();
    mdl_setmodelscale(yscavenger, 0.9, 0.9, 0.9);
    fight_tactic = fai_monster_coward;
    npc_settofistmode(yscavenger);
    createinvitems(yscavenger, itfomuttonraw, 1);
};

prototype mst_default_shadowbeast(c_npc) {
    name = "Ìðàêîðèñ";
    guild = gil_shadowbeast;
    level = 40;
    attribute[atr_strength] /*4*/ = 110;
    attribute[atr_dexterity] /*5*/ = 110;
    attribute[atr_hitpoints_max] /*1*/ = 200;
    attribute[atr_hitpoints] /*0*/ = 200;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    protection[prot_blunt] /*1*/ = 100;
    protection[prot_edge] /*2*/ = 100;
    protection[prot_point] /*6*/ = 50;
    protection[prot_fire] /*3*/ = 50;
    protection[prot_fly] /*4*/ = 100;
    protection[prot_magic] /*5*/ = 50;
    damagetype = dam_edge;
    aivar[22] = id_shadowbeast;
    aivar[7] = hunter;
    aivar[1] = 1500;
    aivar[2] = 1300;
    aivar[3] = 700;
    aivar[4] = 4;
    aivar[5] = 10;
    aivar[6] = false;
    aivar[13] = onlyroutine;
    fight_tactic = fai_shadowbeast;
    senses = (sense_hear | sense_see) | sense_smell;
    senses_range = 3000;
    start_aistate = zs_mm_allscheduler;
};

func void set_shadowbeast_visuals() {
    mdl_setvisual(self, "Shadow.mds");
    mdl_setvisualbody(self, "Sha_Body", default, default, "", default, default, -1);
};

instance shadowbeast(mst_default_shadowbeast) {
    set_shadowbeast_visuals();
    npc_settofistmode(shadowbeast);
    createinvitems(shadowbeast, itfomuttonraw, 4);
};

prototype mst_default_skeleton(c_npc) {
    name = "Ñêåëåò";
    guild = gil_skeleton;
    level = 25;
    attribute[atr_strength] /*4*/ = 80;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_hitpoints_max] /*1*/ = 300;
    attribute[atr_hitpoints] /*0*/ = 300;
    attribute[atr_mana_max] /*3*/ = 200;
    attribute[atr_mana] /*2*/ = 200;
    protection[prot_blunt] /*1*/ = 35;
    protection[prot_edge] /*2*/ = 50;
    protection[prot_point] /*6*/ = 100;
    protection[prot_fire] /*3*/ = 35;
    protection[prot_fly] /*4*/ = 0;
    protection[prot_magic] /*5*/ = 35;
    damagetype = dam_edge;
    aivar[7] = packhunter;
    aivar[1] = 2000;
    aivar[2] = 1500;
    aivar[3] = 1500;
    aivar[4] = 0;
    aivar[5] = 5;
    aivar[6] = false;
    fight_tactic = fai_skeleton;
    senses = (sense_hear | sense_see) | sense_smell;
    senses_range = 3000;
    start_aistate = zs_mm_allscheduler;
};

func void set_skeleton_visuals() {
    mdl_setvisual(self, "HumanS.mds");
    mdl_applyoverlaymds(self, "humans_skeleton.mds");
    mdl_setvisualbody(self, "Ske_Body", default, default, "", default, default, -1);
};

func void set_skeletonwarrior_visuals() {
    mdl_setvisual(self, "HumanS.mds");
    mdl_applyoverlaymds(self, "humans_skeleton.mds");
    mdl_setvisualbody(self, "Ske_Body3", default, default, "", default, default, -1);
};

func void set_skeletonscout_visuals() {
    mdl_setvisual(self, "HumanS.mds");
    mdl_applyoverlaymds(self, "humans_skeleton.mds");
    mdl_setvisualbody(self, "Ske_Body2", default, default, "", default, default, -1);
};

func void set_skeletonmage_visuals() {
    mdl_setvisual(self, "HumanS.mds");
    mdl_applyoverlaymds(self, "humans_skeleton.mds");
    mdl_applyoverlaymds(self, "humans_skeleton_fly.mds");
    mdl_setvisualbody(self, "Ske_Fly_Body", 1, default, "", 1, default, -1);
};

instance skeleton(mst_default_skeleton) {
    attribute[atr_strength] /*4*/ = attribute[atr_strength] /*4*/ + 10;
    set_skeleton_visuals();
    aivar[22] = id_skeleton;
    npc_settofightmode(skeleton, itmw_1h_sword_old_01 /*4384*/);
};

instance skeletonsh(mst_default_skeleton) {
    attribute[atr_strength] /*4*/ = attribute[atr_strength] /*4*/ + 10;
    protection[prot_fire] /*3*/ = 40;
    set_skeleton_visuals();
    aivar[22] = id_skeleton;
    aivar[7] = packhunter;
    aivar[1] = 1000;
    aivar[2] = 1000;
    aivar[3] = 1000;
    aivar[4] = 0;
    aivar[5] = 5;
    aivar[6] = false;
    senses_range = 1000;
    npc_settofightmode(skeletonsh, itmw_1h_axe_old_01 /*4391*/);
};

instance skeletonscout(mst_default_skeleton) {
    name = "Ðàçâåä÷èê ñêåëåòîâ";
    attribute[atr_strength] /*4*/ = attribute[atr_strength] /*4*/ + 10;
    set_skeletonscout_visuals();
    aivar[22] = id_skeletonscout;
    npc_settofightmode(skeletonscout, itmw_1h_scythe_01 /*4392*/);
};

instance skeletonwarrior(mst_default_skeleton) {
    name = "Áîåö ñêåëåòîâ";
    level = 30;
    attribute[atr_strength] /*4*/ = 120;
    attribute[atr_strength] /*4*/ = attribute[atr_strength] /*4*/ + 10;
    set_skeletonwarrior_visuals();
    aivar[22] = id_skeletonwarrior;
    npc_settofightmode(skeletonwarrior, itmw_1h_axe_old_01 /*4391*/);
};

instance skeletonmage(mst_default_skeleton) {
    name = "Ìàã ñêåëåòîâ";
    guild = gil_demon;
    level = 50;
    protection[prot_blunt] /*1*/ = 50;
    protection[prot_edge] /*2*/ = 80;
    protection[prot_point] /*6*/ = 50;
    protection[prot_fire] /*3*/ = 50;
    protection[prot_fly] /*4*/ = 0;
    protection[prot_magic] /*5*/ = 50;
    set_skeletonmage_visuals();
    aivar[22] = id_skeletonmage;
    fight_tactic = fai_human_mage;
    createinvitem(skeletonmage, itarrunethunderbolt);
    createinvitems(skeletonmage, itarscrollsummonskeletons, 5);
};

instance skeletonmage_fogtower(mst_default_skeleton) {
    name = "Ìàã ñêåëåòîâ èç Áàøíè òóìàíîâ";
    guild = gil_demon;
    level = 50;
    protection[prot_blunt] /*1*/ = 50;
    protection[prot_edge] /*2*/ = 80;
    protection[prot_point] /*6*/ = 50;
    protection[prot_fire] /*3*/ = 50;
    protection[prot_fly] /*4*/ = 0;
    protection[prot_magic] /*5*/ = 50;
    set_skeletonmage_visuals();
    aivar[22] = id_skeletonmage;
    fight_tactic = fai_human_mage;
    createinvitem(skeletonmage_fogtower, itarrunethunderbolt);
    createinvitem(skeletonmage_fogtower, theriddle1);
    createinvitems(skeletonmage_fogtower, itarscrollsummonskeletons, 5);
};

instance summonedbypc_skeleton(mst_default_skeleton) {
    attribute[atr_strength] /*4*/ = attribute[atr_strength] /*4*/ + 10;
    set_skeleton_visuals();
    aivar[22] = id_skeleton;
    aivar[20] = 300;
    aivar[21] = 5;
    aivar[23] = true;
    senses = sense_hear | sense_see;
    npc_settofightmode(summonedbypc_skeleton, itmw_1h_sword_old_01 /*4384*/);
    start_aistate = zs_mm_summonedbypc;
};

instance summonedbynpc_skeleton(mst_default_skeleton) {
    attribute[atr_strength] /*4*/ = attribute[atr_strength] /*4*/ + 10;
    set_skeleton_visuals();
    aivar[22] = id_skeleton;
    npc_settofightmode(summonedbynpc_skeleton, itmw_1h_sword_old_01 /*4384*/);
    start_aistate = zs_mm_summoned;
};

instance summonedbypc_skeletonwarrior(mst_default_skeleton) {
    name = "Áîåö ñêåëåòîâ";
    level = 30;
    attribute[atr_strength] /*4*/ = 120;
    attribute[atr_strength] /*4*/ = attribute[atr_strength] /*4*/ + 10;
    set_skeletonwarrior_visuals();
    aivar[22] = id_skeletonwarrior;
    aivar[20] = 300;
    aivar[21] = 5;
    aivar[23] = true;
    senses = sense_hear | sense_see;
    npc_settofightmode(summonedbypc_skeletonwarrior, itmw_1h_axe_old_01 /*4391*/);
    start_aistate = zs_mm_summonedbypc;
};

instance summonedbynpc_skeletonwarrior(mst_default_skeleton) {
    name = "Áîåö ñêåëåòîâ";
    level = 30;
    attribute[atr_strength] /*4*/ = 120;
    attribute[atr_strength] /*4*/ = attribute[atr_strength] /*4*/ + 10;
    set_skeletonwarrior_visuals();
    aivar[22] = id_skeletonwarrior;
    npc_settofightmode(summonedbynpc_skeletonwarrior, itmw_1h_axe_old_01 /*4391*/);
    start_aistate = zs_mm_summoned;
};

prototype mst_default_sleeper(c_npc) {
    name = "Ñïÿùèé";
    guild = gil_slf;
    level = 2000;
    attribute[atr_strength] /*4*/ = 500;
    attribute[atr_dexterity] /*5*/ = 500;
    attribute[atr_hitpoints_max] /*1*/ = 1000;
    attribute[atr_hitpoints] /*0*/ = 1000;
    attribute[atr_mana_max] /*3*/ = 500;
    attribute[atr_mana] /*2*/ = 500;
    protection[prot_blunt] /*1*/ = 500;
    protection[prot_edge] /*2*/ = 500;
    protection[prot_point] /*6*/ = 1000;
    protection[prot_fire] /*3*/ = 1000;
    protection[prot_fly] /*4*/ = 1000;
    protection[prot_magic] /*5*/ = 500;
    damagetype = dam_magic;
    aivar[22] = id_sleeper;
    aivar[7] = passive;
    aivar[1] = 1200;
    aivar[2] = 1000;
    aivar[3] = 700;
    aivar[4] = 5;
    aivar[5] = 10;
    aivar[6] = false;
    fight_tactic = fai_sleeper;
    senses = (sense_hear | sense_see) | sense_smell;
    senses_range = 2000;
    daily_routine = rtn_start_sleeper;
};

func void set_sleeper_visuals() {
    mdl_setvisual(self, "Sleeper.mds");
    mdl_setvisualbody(self, "Sle_Body", default, default, "", default, default, -1);
};

instance sleeper(mst_default_sleeper) {
    set_sleeper_visuals();
    npc_settofistmode(sleeper);
};

func void rtn_start_sleeper() {
    ta_sleeper(24, 0, 6, 0, "TPL_395");
    ta_sleeper(6, 0, 24, 0, "TPL_395");
};

prototype mst_default_snapper(c_npc) {
    name = "Ãëîðõ";
    guild = gil_snapper;
    level = 22;
    attribute[atr_strength] /*4*/ = 80;
    attribute[atr_dexterity] /*5*/ = 80;
    attribute[atr_hitpoints_max] /*1*/ = 160;
    attribute[atr_hitpoints] /*0*/ = 160;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    protection[prot_blunt] /*1*/ = 40;
    protection[prot_edge] /*2*/ = 40;
    protection[prot_point] /*6*/ = 20;
    protection[prot_fire] /*3*/ = 20;
    protection[prot_fly] /*4*/ = 10;
    protection[prot_magic] /*5*/ = 0;
    damagetype = dam_edge;
    aivar[22] = id_snapper;
    aivar[7] = hunter;
    aivar[1] = 2200;
    aivar[2] = 1800;
    aivar[3] = 1500;
    aivar[4] = 3;
    aivar[5] = 10;
    aivar[6] = true;
    aivar[11] = onlyroutine;
    fight_tactic = fai_snapper;
    senses = (sense_hear | sense_see) | sense_smell;
    senses_range = 3000;
    start_aistate = zs_mm_allscheduler;
};

func void set_snapper_visuals() {
    mdl_setvisual(self, "Snapper.mds");
    mdl_setvisualbody(self, "Sna_Body", default, default, "", default, default, -1);
};

instance snapper(mst_default_snapper) {
    set_snapper_visuals();
    npc_settofistmode(snapper);
};

prototype mst_default_swampshark(c_npc) {
    name = "Áîëîòîæîð";
    guild = gil_swampshark;
    level = 40;
    attribute[atr_strength] /*4*/ = 140;
    attribute[atr_dexterity] /*5*/ = 140;
    attribute[atr_hitpoints_max] /*1*/ = 300;
    attribute[atr_hitpoints] /*0*/ = 300;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    protection[prot_blunt] /*1*/ = 130;
    protection[prot_edge] /*2*/ = 130;
    protection[prot_point] /*6*/ = 70;
    protection[prot_fire] /*3*/ = 50;
    protection[prot_fly] /*4*/ = 9999;
    protection[prot_magic] /*5*/ = 40;
    damagetype = dam_edge;
    aivar[22] = id_swampshark;
    aivar[7] = hunter;
    aivar[1] = 1500;
    aivar[2] = 1300;
    aivar[3] = 1000;
    aivar[4] = 5;
    aivar[5] = 10;
    aivar[6] = true;
    aivar[13] = onlyroutine;
    fight_tactic = fai_swampshark;
    senses = (sense_hear | sense_see) | sense_smell;
    senses_range = 3000;
    start_aistate = zs_mm_allscheduler;
};

func void set_swampshark_visuals() {
    mdl_setvisual(self, "Swampshark.mds");
    mdl_setvisualbody(self, "Swa_Body", default, default, "", default, default, -1);
};

instance swampshark(mst_default_swampshark) {
    set_swampshark_visuals();
    npc_settofistmode(swampshark);
};

instance hurtswampshark(mst_default_swampshark) {
    name = "Ðàíåííûé áîëîòîæîð";
    attribute[atr_hitpoints] /*0*/ = 20;
    set_swampshark_visuals();
    npc_settofistmode(hurtswampshark);
};

prototype mst_default_troll(c_npc) {
    name = "Òðîëëü";
    guild = gil_troll;
    level = 200;
    attribute[atr_strength] /*4*/ = 160;
    attribute[atr_dexterity] /*5*/ = 20;
    attribute[atr_hitpoints_max] /*1*/ = 1000;
    attribute[atr_hitpoints] /*0*/ = 1000;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    protection[prot_blunt] /*1*/ = 150;
    protection[prot_edge] /*2*/ = 150;
    protection[prot_point] /*6*/ = 9999;
    protection[prot_fire] /*3*/ = 110;
    protection[prot_fly] /*4*/ = 9999;
    protection[prot_magic] /*5*/ = 100;
    damagetype = dam_fly;
    aivar[22] = id_troll;
    aivar[7] = passive;
    aivar[1] = 1500;
    aivar[2] = 1300;
    aivar[3] = 700;
    aivar[4] = 5;
    aivar[5] = 10;
    aivar[6] = false;
    aivar[11] = onlyroutine;
    fight_tactic = fai_troll;
    senses = (sense_hear | sense_see) | sense_smell;
    senses_range = 3000;
    start_aistate = zs_mm_allscheduler;
};

func void set_troll_visuals() {
    mdl_setvisual(self, "Troll.mds");
    mdl_setvisualbody(self, "Tro_Body", default, default, "", default, default, -1);
};

instance troll(mst_default_troll) {
    set_troll_visuals();
    npc_settofistmode(troll);
};

instance youngtroll(mst_default_troll) {
    name = "Ìîëîäîé òðîëëü";
    guild = gil_troll;
    level = 100;
    id = mid_youngtroll;
    attribute[atr_strength] /*4*/ = 120;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_hitpoints_max] /*1*/ = 600;
    attribute[atr_hitpoints] /*0*/ = 600;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    protection[prot_blunt] /*1*/ = 120;
    protection[prot_edge] /*2*/ = 120;
    protection[prot_point] /*6*/ = 9999;
    protection[prot_fire] /*3*/ = 9999;
    protection[prot_fly] /*4*/ = 9999;
    protection[prot_magic] /*5*/ = 9999;
    damagetype = dam_fly;
    set_troll_visuals();
    mdl_setmodelscale(youngtroll, 0.7, 0.7, 0.7);
    aivar[22] = id_troll;
    aivar[7] = passive;
    aivar[1] = 3000;
    aivar[2] = 2500;
    aivar[3] = 2000;
    aivar[4] = 5;
    aivar[5] = 10;
    aivar[6] = false;
    aivar[11] = onlyroutine;
    fight_tactic = fai_troll;
    senses = (sense_hear | sense_see) | sense_smell;
    senses_range = 4000;
    npc_settofistmode(youngtroll);
    start_aistate = zs_mm_allscheduler;
};

prototype mst_default_undeadorcshaman(c_npc) {
    name = "Âûñøèé ñâÿùåííèê";
    guild = gil_undeadorc;
    level = 30;
    attribute[atr_strength] /*4*/ = 190;
    attribute[atr_dexterity] /*5*/ = 190;
    attribute[atr_hitpoints_max] /*1*/ = 350;
    attribute[atr_hitpoints] /*0*/ = 350;
    attribute[atr_mana_max] /*3*/ = 75;
    attribute[atr_mana] /*2*/ = 75;
    protection[prot_blunt] /*1*/ = 9999;
    protection[prot_edge] /*2*/ = 9999;
    protection[prot_point] /*6*/ = 9999;
    protection[prot_fire] /*3*/ = 9999;
    protection[prot_fly] /*4*/ = 9999;
    protection[prot_magic] /*5*/ = 150;
    damagetype = dam_edge;
    aivar[22] = id_undeadorcshaman;
    aivar[7] = passive;
    aivar[1] = 1200;
    aivar[2] = 1000;
    aivar[3] = 700;
    aivar[4] = 5;
    aivar[5] = 10;
    aivar[6] = false;
    aivar[11] = onlyroutine;
    fight_tactic = fai_human_mage;
    senses = (sense_hear | sense_see) | sense_smell;
    senses_range = 3000;
    start_aistate = zs_mm_allscheduler;
};

func void set_undeadorcshaman_visuals() {
    mdl_setvisual(self, "Orc.mds");
    mdl_setvisualbody(self, "UOS_Body", default, default, "", default, default, -1);
};

instance undeadorcshaman(mst_default_undeadorcshaman) {
    set_undeadorcshaman_visuals();
    createinvitem(undeadorcshaman, itarrunebreathofdeath);
    createinvitems(undeadorcshaman, itarscrollsummongolem, 20);
    equipitem(undeadorcshaman, itrwudorcstaff /*4459*/);
};

prototype mst_default_undeadorcwarrior(c_npc) {
    name = "Õðàìîâûé ñòðàæ";
    guild = gil_undeadorc;
    level = 25;
    attribute[atr_strength] /*4*/ = 100;
    attribute[atr_dexterity] /*5*/ = 100;
    attribute[atr_hitpoints_max] /*1*/ = 400;
    attribute[atr_hitpoints] /*0*/ = 400;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    protection[prot_blunt] /*1*/ = 50;
    protection[prot_edge] /*2*/ = 50;
    protection[prot_point] /*6*/ = 25;
    protection[prot_fire] /*3*/ = 50;
    protection[prot_fly] /*4*/ = 50;
    protection[prot_magic] /*5*/ = 50;
    damagetype = dam_edge;
    aivar[22] = id_undeadorcwarrior;
    aivar[7] = passive;
    aivar[1] = 1200;
    aivar[2] = 1000;
    aivar[3] = 700;
    aivar[4] = 5;
    aivar[5] = 10;
    aivar[6] = false;
    fight_tactic = fai_orc;
    senses = (sense_hear | sense_see) | sense_smell;
    senses_range = 3000;
    start_aistate = zs_mm_allscheduler;
};

func void set_undeadorcwarrior_visuals() {
    mdl_setvisual(self, "Orc.mds");
    mdl_setvisualbody(self, "UOW_Body", default, default, "", default, default, -1);
};

instance undeadorcwarrior(mst_default_undeadorcwarrior) {
    set_undeadorcwarrior_visuals();
    equipitem(undeadorcwarrior, itmw2horcmace01 /*4457*/);
};

instance undeadowh(mst_default_undeadorcwarrior) {
    name = "Âûñøèé õðàìîâûé ñòðàæ";
    level = 40;
    attribute[atr_strength] /*4*/ = 120;
    protection[prot_blunt] /*1*/ = 70;
    protection[prot_edge] /*2*/ = 70;
    protection[prot_point] /*6*/ = 35;
    protection[prot_fire] /*3*/ = 70;
    protection[prot_fly] /*4*/ = 70;
    protection[prot_magic] /*5*/ = 70;
    set_undeadorcwarrior_visuals();
    equipitem(undeadowh, itmw2horcmace01 /*4457*/);
};

prototype mst_default_waran(c_npc) {
    name = "ßùåðèöà";
    guild = gil_waran;
    level = 8;
    attribute[atr_strength] /*4*/ = 40;
    attribute[atr_dexterity] /*5*/ = 40;
    attribute[atr_hitpoints_max] /*1*/ = 80;
    attribute[atr_hitpoints] /*0*/ = 80;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    protection[prot_blunt] /*1*/ = 20;
    protection[prot_edge] /*2*/ = 20;
    protection[prot_point] /*6*/ = 10;
    protection[prot_fire] /*3*/ = 10;
    protection[prot_fly] /*4*/ = 0;
    protection[prot_magic] /*5*/ = 0;
    damagetype = dam_edge;
    aivar[22] = id_waran;
    aivar[7] = passive;
    aivar[1] = 1400;
    aivar[2] = 1100;
    aivar[3] = 700;
    aivar[4] = 2;
    aivar[5] = 10;
    aivar[6] = true;
    aivar[13] = onlyroutine;
    fight_tactic = fai_waran;
    senses = (sense_hear | sense_see) | sense_smell;
    senses_range = 3000;
    start_aistate = zs_mm_allscheduler;
};

func void set_waran_visuals() {
    mdl_setvisual(self, "Waran.mds");
    mdl_setvisualbody(self, "War_Body", default, default, "", default, default, -1);
};

instance waran(mst_default_waran) {
    set_waran_visuals();
    npc_settofistmode(waran);
};

prototype mst_default_wolf(c_npc) {
    name = "Âîëê";
    guild = gil_wolf;
    level = 9;
    attribute[atr_strength] /*4*/ = 40;
    attribute[atr_dexterity] /*5*/ = 40;
    attribute[atr_hitpoints_max] /*1*/ = 80;
    attribute[atr_hitpoints] /*0*/ = 80;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    protection[prot_blunt] /*1*/ = 20;
    protection[prot_edge] /*2*/ = 20;
    protection[prot_point] /*6*/ = 10;
    protection[prot_fire] /*3*/ = 10;
    protection[prot_fly] /*4*/ = 0;
    protection[prot_magic] /*5*/ = 0;
    damagetype = dam_edge;
    aivar[22] = id_wolf;
    aivar[7] = packhunter;
    aivar[1] = 1500;
    aivar[2] = 1200;
    aivar[3] = 500;
    aivar[4] = 3;
    aivar[5] = 10;
    aivar[6] = true;
    aivar[13] = onlyroutine;
    fight_tactic = fai_wolf;
    senses = (sense_hear | sense_see) | sense_smell;
    senses_range = 3000;
    start_aistate = zs_mm_allscheduler;
};

func void set_wolf_visuals() {
    mdl_setvisual(self, "Wolf.mds");
    mdl_setvisualbody(self, "Wol_Body", default, default, "", default, default, -1);
};

instance wolf(mst_default_wolf) {
    set_wolf_visuals();
    npc_settofistmode(wolf);
};

prototype mst_default_zombie(c_npc) {
    name = "Çîìáè";
    guild = gil_zombie;
    level = 20;
    attribute[atr_strength] /*4*/ = 140;
    attribute[atr_dexterity] /*5*/ = 140;
    attribute[atr_hitpoints_max] /*1*/ = 250;
    attribute[atr_hitpoints] /*0*/ = 250;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    protection[prot_blunt] /*1*/ = 130;
    protection[prot_edge] /*2*/ = 130;
    protection[prot_point] /*6*/ = 9999;
    protection[prot_fire] /*3*/ = 100;
    protection[prot_fly] /*4*/ = 30;
    protection[prot_magic] /*5*/ = 100;
    damagetype = dam_edge;
    aivar[22] = id_zombie;
    aivar[7] = hunter;
    aivar[1] = 2000;
    aivar[2] = 1500;
    aivar[3] = 1500;
    aivar[4] = 0;
    aivar[5] = 10;
    aivar[6] = false;
    aivar[11] = onlyroutine;
    fight_tactic = fai_zombie;
    senses = (sense_hear | sense_see) | sense_smell;
    senses_range = 3000;
    start_aistate = zs_mm_allscheduler;
};

func void set_zombie_visuals() {
    mdl_setvisual(self, "Zombie.mds");
    mdl_setvisualbody(self, "Zom_Body", 0, 0, "Zom_Head", 0, 3, -1);
};

func void set_zombie2_visuals() {
    mdl_setvisual(self, "Zombie.mds");
    mdl_setvisualbody(self, "Zom_Body", 0, 0, "Zom_Head", 1, 3, -1);
};

func void set_zombie3_visuals() {
    mdl_setvisual(self, "Zombie.mds");
    mdl_setvisualbody(self, "Zom_Body", 0, 1, "Zom_Head", 0, 3, -1);
};

func void set_zombie4_visuals() {
    mdl_setvisual(self, "Zombie.mds");
    mdl_setvisualbody(self, "Zom_Body", 0, 1, "Zom_Head", 1, 3, -1);
};

instance zombie(mst_default_zombie) {
    set_zombie_visuals();
    npc_settofistmode(zombie);
};

instance zombie2(mst_default_zombie) {
    set_zombie2_visuals();
    npc_settofistmode(zombie2);
};

instance zombie3(mst_default_zombie) {
    set_zombie3_visuals();
    npc_settofistmode(zombie3);
};

instance zombie4(mst_default_zombie) {
    set_zombie4_visuals();
    npc_settofistmode(zombie4);
};

instance zombiethekeeper(mst_default_zombie) {
    name = "Ñòðàæíèê";
    level = 150;
    id = mid_thekeeper;
    protection[prot_blunt] /*1*/ = 150;
    protection[prot_edge] /*2*/ = 150;
    protection[prot_fire] /*3*/ = 9999;
    set_zombie4_visuals();
    aivar[7] = hunter;
    aivar[1] = 1000;
    aivar[2] = 1000;
    aivar[3] = 1000;
    aivar[4] = 0;
    aivar[5] = 10;
    aivar[6] = false;
    senses_range = 1000;
    npc_settofistmode(zombiethekeeper);
    createinvitem(zombiethekeeper, itmi_orctalisman);
    createinvitem(zombiethekeeper, itke_focus5);
};

func void orcslaveperc() {
    npc_percenable(self, perc_assessdamage, zs_orcslave_assessdamage);
    npc_percenable(self, perc_observeintruder, b_orcslave_quicklook);
    npc_percenable(self, perc_drawweapon, b_orcslave_quicklook);
    npc_percenable(self, perc_assesssurprise, b_orcslave_quicklook);
};

func void orcdefaultperc() {
    if (self.guild == gil_orcslave) {
        orcslaveperc();
        return;
    }
    else {
        observingperception();
    };
};

func void orcdefaultpercdoing() {
    if (self.guild == gil_orcslave) {
        orcslaveperc();
        return;
    }
    else {
        occupiedperception();
    };
};

func void orcdeepsleepperc() {
    if (self.guild == gil_orcslave) {
        orcslaveperc();
        return;
    }
    else {
        deepsleepperception();
    };
};

func void orclightsleepperc() {
    if (self.guild == gil_orcslave) {
        orcslaveperc();
        return;
    }
    else {
        lightsleepperception();
    };
};

func void b_orc_smartturn() {
    printdebugnpc(pd_orc_frame, "B_Orc_SmartTurn");
    ai_lookatnpc(self, other);
    if ((npc_getbodystate(self) != bs_sit) && (!npc_canseenpc(self, other))) {
        ai_turntonpc(self, other);
    };
};

func void b_orc_drawweapon() {
    var int att;

    printdebugnpc(pd_orc_frame, "B_Orc_DrawWeapon");
    if (other.guild < gil_seperator_orc) {
        printdebugnpc(pd_orc_frame, "B_Orc_DrawWeapon: Ein Nicht-Ork hat die Waffe gezogen!");
        ai_turntonpc(self, other);
        if (hlp_random(20) < 4) {
            b_say(self, other, "$REMOVEYOURWEAPON");
        };
        att = npc_getpermattitude(self, other);
        if (att == att_angry) {
            npc_settempattitude(self, att_hostile);
        }
        else if (att == att_neutral) {
            npc_settempattitude(self, att_angry);
        }
        else {
            if (att == att_friendly) {
                npc_settempattitude(self, att_neutral);
            };
        };
    };
};

func void b_orc_itemhorn() {
    printdebugnpc(pd_ta_frame, "B_Orc_ItemHorn");
    if (npc_hasitems(self, itmialarmhorn)) {
        if (npc_hasreadiedweapon(self)) {
            ai_removeweapon(self);
        };
        ai_setwalkmode(self, npc_walk);
        if (npc_getbodystate(self) != bs_iteminteract) {
            ai_useitemtostate(self, itmialarmhorn /*4754*/, 1);
        };
        ai_useitemtostate(self, itmialarmhorn /*4754*/, -1);
    };
};

func void b_orc_itemeat() {
    printdebugnpc(pd_ta_frame, "B_Orc_ItemEat");
    if (npc_hasreadiedweapon(self)) {
        ai_removeweapon(self);
    };
    if (hlp_random(10) < 5) {
        if (npc_hasitems(self, itfocheese) == 0) {
            createinvitem(self, itfocheese);
        };
        if (npc_getbodystate(self) != bs_iteminteract) {
            ai_useitemtostate(self, itfocheese /*4314*/, 1);
        };
        ai_useitemtostate(self, itfocheese /*4314*/, -1);
    }
    else {
        if (npc_hasitems(self, itfoloaf) == 0) {
            createinvitem(self, itfoloaf);
        };
        if (npc_getbodystate(self) != bs_iteminteract) {
            ai_useitemtostate(self, itfoloaf /*4306*/, 1);
        };
        ai_useitemtostate(self, itfoloaf /*4306*/, -1);
    };
};

func void b_orc_itempotion() {
    printdebugnpc(pd_ta_frame, "B_Orc_ItemPotion");
    if (npc_hasreadiedweapon(self)) {
        ai_removeweapon(self);
    };
    if (!npc_hasitems(self, itfowine)) {
        createinvitem(self, itfowine);
    };
    if (npc_getbodystate(self) != bs_iteminteract) {
        equipitem(self, itfobeer /*4326*/);
        ai_useitemtostate(self, itfowine /*4328*/, 1);
    };
    ai_useitemtostate(self, itfowine /*4328*/, -1);
};

func void b_orcguard_observeintruder() {
    if (npc_hasreadiedweapon(other) || npc_isinfightmode(other, fmode_fist)) {
        printdebugnpc(pd_orc_frame, "B_OrcGuard_ObserveIntruder: Mensch ist im Kampf-Modus -> TempAtt +1");
        b_orc_drawweapon();
    };
    npc_clearaiqueue(self);
    ai_standupquick(self);
    ai_startstate(self, zs_orcguard_observeintruder, 0, "");
};

func void b_orcwarrior_observeintruder() {
    if (npc_hasreadiedweapon(other) || npc_isinfightmode(other, fmode_fist)) {
        printdebugnpc(pd_orc_frame, "B_OrcWarrior_ObserveIntruder: Mensch ist im Kampf-Modus -> TempAtt +1");
        b_orc_drawweapon();
    };
    if (npc_getattitude(self, other) == att_hostile) {
        printdebugnpc(pd_orc_frame, "B_OrcWarrior_ObserveIntruder: Mensch & HOSTILE");
        if (npc_getdisttonpc(self, other) < 2000) {
            npc_clearaiqueue(self);
            ai_standupquick(self);
            ai_startstate(self, zs_orc_attack, 0, "");
        };
        return;
    }
    else if (npc_getattitude(self, other) == att_angry) {
        printdebugnpc(pd_orc_frame, "B_OrcWarrior_ObserveIntruder: Mensch & ANGRY");
        if (npc_getdisttonpc(self, other) < 1200) {
            npc_clearaiqueue(self);
            ai_standupquick(self);
            ai_turntonpc(self, other);
            ai_startstate(self, zs_orcwarrior_observeintruder, 0, "");
        };
        return;
    }
    else if (npc_getattitude(self, other) == att_neutral) {
        printdebugnpc(pd_orc_frame, "B_OrcWarrior_ObserveIntruder: Mensch & NEUTRAL");
        if (npc_getdisttonpc(self, other) < 800) {
            npc_clearaiqueue(self);
            ai_standup(self);
            ai_turntonpc(self, other);
            ai_startstate(self, zs_orcwarrior_observeintruder, 0, "");
        };
        return;
    }
    else {
        if (npc_getattitude(self, other) == att_friendly) {
            printdebugnpc(pd_orc_frame, "B_OrcWarrior_ObserveIntruder: Mensch & NEUTRAL");
            if (npc_getdisttonpc(self, other) < 400) {
                npc_clearaiqueue(self);
                ai_standup(self);
                ai_turntonpc(self, other);
                ai_startstate(self, zs_orcwarrior_observeintruder, 0, "");
            };
            return;
        };
    };
};

func void b_orcscout_observeintruder() {
    if (npc_hasreadiedweapon(other) || npc_isinfightmode(other, fmode_fist)) {
        printdebugnpc(pd_orc_frame, "B_OrcScout_ObserveIntruder: Mensch ist im Kampf-Modus -> TempAtt +1");
        b_orc_drawweapon();
    };
    if (npc_getattitude(self, other) == att_hostile) {
        printdebugnpc(pd_orc_frame, "B_OrcScout_ObserveIntruder: Mensch & HOSTILE");
        if (npc_getdisttonpc(self, other) < 1000) {
            npc_clearaiqueue(self);
            ai_standupquick(self);
            ai_startstate(self, zs_orc_attack, 0, "");
        };
        return;
    }
    else if (npc_getattitude(self, other) == att_angry) {
        printdebugnpc(pd_orc_frame, "B_OrcScout_ObserveIntruder: Mensch & ANGRY");
        if (npc_getdisttonpc(self, other) < 600) {
            npc_clearaiqueue(self);
            ai_standupquick(self);
            ai_turntonpc(self, other);
            ai_startstate(self, zs_orcscout_observeintruder, 0, "");
        };
        return;
    }
    else if (npc_getattitude(self, other) == att_neutral) {
        printdebugnpc(pd_orc_frame, "B_OrcScout_ObserveIntruder: Mensch & NEUTRAL");
        if (npc_getdisttonpc(self, other) < 400) {
            npc_clearaiqueue(self);
            ai_standup(self);
            ai_turntonpc(self, other);
            ai_startstate(self, zs_orcscout_observeintruder, 0, "");
        };
        return;
    }
    else {
        if (npc_getattitude(self, other) == att_friendly) {
            printdebugnpc(pd_orc_frame, "B_OrcScout_ObserveIntruder: Mensch & NEUTRAL");
            if (npc_getdisttonpc(self, other) < 200) {
                npc_clearaiqueue(self);
                ai_standup(self);
                ai_turntonpc(self, other);
                ai_startstate(self, zs_orcscout_observeintruder, 0, "");
            };
            return;
        };
    };
};

func void b_orcshaman_observeintruder() {
    if (npc_hasreadiedweapon(other) || npc_isinfightmode(other, fmode_fist)) {
        printdebugnpc(pd_orc_frame, "B_OrcShaman_ObserveIntruder: Mensch ist im Kampf-Modus -> TempAtt +1");
        b_orc_drawweapon();
    };
    if (npc_getattitude(self, other) == att_hostile) {
        printdebugnpc(pd_orc_frame, "B_OrcShaman_ObserveIntruder: Mensch & HOSTILE");
        if (npc_getdisttonpc(self, other) < 1500) {
            npc_clearaiqueue(self);
            ai_standup(self);
            ai_startstate(self, zs_orc_attack, 0, "");
        };
        return;
    }
    else if (npc_getattitude(self, other) == att_angry) {
        printdebugnpc(pd_orc_frame, "B_OrcShaman_ObserveIntruder: Mensch & ANGRY");
        if (npc_getdisttonpc(self, other) < 1000) {
            npc_clearaiqueue(self);
            ai_standup(self);
            ai_turntonpc(self, other);
            ai_startstate(self, zs_orcshaman_observeintruder, 0, "");
        };
        return;
    }
    else if (npc_getattitude(self, other) == att_neutral) {
        printdebugnpc(pd_orc_frame, "B_OrcShaman_ObserveIntruder: Mensch & NEUTRAL");
        if (npc_getdisttonpc(self, other) < 400) {
            npc_clearaiqueue(self);
            ai_standup(self);
            ai_turntonpc(self, other);
            ai_startstate(self, zs_orcshaman_observeintruder, 0, "");
        };
        return;
    }
    else {
        if (npc_getattitude(self, other) == att_friendly) {
            printdebugnpc(pd_orc_frame, "B_OrcShaman_ObserveIntruder: Mensch & NEUTRAL");
            if (npc_getdisttonpc(self, other) < 200) {
                npc_clearaiqueue(self);
                ai_standup(self);
                ai_turntonpc(self, other);
                ai_startstate(self, zs_orcshaman_observeintruder, 0, "");
            };
            return;
        };
    };
};

func void b_orc_observeintruder() {
    if ((other.guild > gil_seperator_orc) || (other.guild == gil_orcdog)) {
        printdebugnpc(pd_orc_frame, "B_Orc_ObserveIntruder: Orc oder Hund -> ignore");
        return;
    };
    if ((!npc_canseenpc(self, other)) && c_bodystatecontains(other, bs_sneak)) {
        printdebugnpc(pd_orc_frame, "B_Orc_ObserveIntruder: kann niemand sehen und schleicht -> ignore");
        return;
    };
    if ((other.guild > gil_seperator_hum) && (other.guild < gil_seperator_orc)) {
        printdebugnpc(pd_orc_frame, "B_Orc_ObserveIntruder: Monster!");
        ai_quicklook(self, other);
        if ((other.guild != gil_orcdog) && (other.guild != gil_meatbug)) {
            printdebugnpc(pd_orc_frame, "B_Orc_ObserveIntruder: Monster: !OrcDog && !MeatBug -> Angriff");
            npc_clearaiqueue(self);
            ai_standup(self);
            ai_startstate(self, zs_orc_attack, 0, "");
        };
        return;
    };
    if (other.guild < gil_seperator_hum) {
        if (self.npctype == npctype_guard) {
            b_orcguard_observeintruder();
        };
        if (self.guild == gil_orcwarrior) {
            b_orcwarrior_observeintruder();
        };
        if (self.guild == gil_orcscout) {
            b_orcscout_observeintruder();
        };
        if (self.guild == gil_orcshaman) {
            b_orcshaman_observeintruder();
        };
    };
};

func void zs_orcguard_observeintruder() {
    printdebugnpc(pd_orc_frame, "ZS_OrcGuard_ObserveIntruder");
    npc_percenable(self, perc_assessdamage, b_orc_assessdamage);
    npc_percenable(self, perc_drawweapon, b_orc_drawweapon);
    npc_percenable(self, perc_assessothersdamage, zs_orc_watchfight);
    npc_percenable(self, perc_assessmurder, b_orc_assessmurder);
    npc_percenable(self, perc_assessdefeat, b_orc_assessdefeat);
    npc_percenable(self, perc_assesscaster, b_orc_assesssomethingevil);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assessthreat, b_orc_assesssomethingevil);
    self.aivar[6] = 0;
    self.aivar[9] = 0;
    printdebugnpc(pd_orc_frame, "B_OrcGuard_ObserveIntruder: Waechter sieht Player");
    if ((npc_getdisttonpc(self, other) > 900) && (npc_getattitude(self, other) != att_friendly)) {
        printdebugnpc(pd_orc_frame, "B_OrcGuard_ObserveIntruder: Waechter tutet ins Horn -> TOR****!");
        b_orc_itemhorn();
    };
    npc_sendpassiveperc(self, perc_assesswarn, self, self);
};

func int zs_orcguard_observeintruder_loop() {
    printdebugnpc(pd_orc_frame, "ZS_OrcGuard_ObserveIntruder_Loop:");
    printdebugnpc(pd_orc_frame, "ZS_OrcGUARD_ObserveIntruder_Loop: Waechter!");
    if (!npc_hasreadiedweapon(self)) {
        printdebugnpc(pd_orc_frame, "ZS_OrcGuard_ObserveIntruder_Loop: Ork-Waechter zieht Waffe");
        ai_turntonpc(self, other);
        ai_equipbestmeleeweapon(self);
        ai_drawweapon(self);
    };
    if (npc_getdisttonpc(self, other) > 1500) {
        self.aivar[9] = 1;
    }
    else {
        self.aivar[9] = 0;
    };
    if (npc_getattitude(self, other) == att_hostile) {
        printdebugnpc(pd_orc_frame, "ZS_OrcGuard_ObserveIntruder: HOSTILE");
        b_say(self, other, "$DIE");
        ai_startstate(self, zs_orc_attack, 1, "");
        return 1;
    }
    else if ((npc_getattitude(self, other) == att_angry) && (self.aivar[9] == 0)) {
        printdebugnpc(pd_orc_frame, "ZS_OrcGuard_ObserveIntruder: ANGRY");
        b_orc_smartturn();
        if ((npc_getdisttonpc(self, other) < 500) && ((self.aivar[6] == 1) || (npc_getstatetime(self) > 6))) {
            printdebugnpc(pd_orc_frame, "ZS_OrcGuard_ObserveIntruder: ANGRY: Angriff 1");
            b_say(self, other, "$DIE");
            ai_startstate(self, zs_orc_attack, 1, "");
        }
        else if ((npc_getdisttonpc(self, other) < 1500) && (self.aivar[6] == 0)) {
            printdebugnpc(pd_orc_frame, "ZS_OrcGuard_ObserveIntruder: ANGRY: Waffe ziehen");
            self.aivar[6] = 1;
            b_say(self, other, "$LOOKINGFORTROUBLEEH");
        }
        else {
            if ((self.aivar[6] == 1) && (npc_getstatetime(self) > 6)) {
                printdebugnpc(pd_orc_frame, "ZS_OrcGuard_ObserveIntruder: ANGRY: Angriff 2");
                b_say(self, other, "$DIE");
                ai_startstate(self, zs_orc_attack, 1, "");
            };
        };
        return 0;
    }
    else if ((npc_getattitude(self, other) == att_neutral) && (self.aivar[9] == 0)) {
        printdebugnpc(pd_orc_frame, "ZS_OrcGuard_ObserveIntruder: NEUTRAL");
        b_orc_smartturn();
        if ((npc_getdisttonpc(self, other) < 300) && (self.aivar[6] > 0)) {
            if (self.aivar[6] != 2) {
                self.aivar[6] = 2;
                ai_wait(self, 3.0);
            }
            else {
                if (npc_getstatetime(self) > 10) {
                    printdebugnpc(pd_orc_frame, "ZS_OrcGuard_ObserveIntruder: NEUTRAL: Angriff");
                    ai_startstate(self, zs_orc_attack, 1, "");
                };
            };
        }
        else if ((npc_getdisttonpc(self, other) < 500) && (self.aivar[6] == 0)) {
            self.aivar[6] = 1;
            printdebugnpc(pd_orc_frame, "ZS_OrcGuard_ObserveIntruder: NEUTRAL: Waffe ziehen");
            if (!npc_hasreadiedweapon(self)) {
                ai_equipbestmeleeweapon(self);
                ai_drawweapon(self);
            };
            b_say(self, other, "$LOOKINGFORTROUBLEEH");
        }
        else {
            if (npc_getstatetime(self) > 15) {
                return 1;
            };
        };
        return 0;
    }
    else if (npc_getattitude(self, other) == att_friendly) {
        printdebugnpc(pd_orc_frame, "ZS_OrcGuard_ObserveIntruder: FRIENDLY");
        b_orc_smartturn();
        if ((npc_getdisttonpc(self, other) < 300) && (self.aivar[6] != 1)) {
            self.aivar[6] = 1;
            b_say(self, other, "$WHAT");
        };
        if (npc_getdisttonpc(self, other) > 700) {
            return 1;
        };
        return 0;
    }
    else {
        if (npc_getdisttonpc(self, other) > 2000) {
            return 1;
        };
    };
    return 0;
};

func void zs_orcguard_observeintruder_end() {
    printdebugnpc(pd_orc_frame, "ZS_OrcGuard_ObserveIntruder_End");
    if (npc_hasreadiedweapon(self)) {
        ai_removeweapon(self);
    };
    ai_stoplookat(self);
    ai_continueroutine(self);
};

func void zs_orcwarrior_observeintruder() {
    printdebugnpc(pd_orc_frame, "ZS_OrcWarrior_ObserveIntruder");
    npc_percenable(self, perc_assessdamage, b_orc_assessdamage);
    npc_percenable(self, perc_drawweapon, b_orc_drawweapon);
    npc_percenable(self, perc_assessothersdamage, zs_orc_watchfight);
    npc_percenable(self, perc_assessmurder, b_orc_assessmurder);
    npc_percenable(self, perc_assessdefeat, b_orc_assessdefeat);
    npc_percenable(self, perc_assesscaster, b_orc_assesssomethingevil);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assessthreat, b_orc_assesssomethingevil);
    self.aivar[6] = 0;
    self.aivar[9] = 0;
};

func int zs_orcwarrior_observeintruder_loop() {
    printdebugnpc(pd_orc_frame, "ZS_OrcWarrior_ObserveIntruder_Loop:");
    if (npc_getattitude(self, other) == att_hostile) {
        printdebugnpc(pd_orc_frame, "ZS_OrcWarrior_ObserveIntruder: HOSTILE");
        b_say(self, other, "$DIE");
        ai_startstate(self, zs_orc_attack, 1, "");
        return 1;
    }
    else if ((npc_getattitude(self, other) == att_angry) && (self.aivar[9] == 0)) {
        printdebugnpc(pd_orc_frame, "ZS_OrcWarrior_ObserveIntruder: ANGRY");
        b_orc_smartturn();
        if ((npc_getdisttonpc(self, other) < 500) && ((self.aivar[6] == 1) || (npc_getstatetime(self) > 6))) {
            printdebugnpc(pd_orc_frame, "ZS_OrcWarrior_ObserveIntruder: ANGRY: Angriff 1");
            b_say(self, other, "$DIE");
            ai_startstate(self, zs_orc_attack, 1, "");
        }
        else if ((npc_getdisttonpc(self, other) < 1500) && (self.aivar[6] == 0)) {
            printdebugnpc(pd_orc_frame, "ZS_OrcWarrior_ObserveIntruder: ANGRY: Waffe ziehen");
            if (!npc_hasreadiedweapon(self)) {
                ai_equipbestmeleeweapon(self);
                ai_drawweapon(self);
            };
            self.aivar[6] = 1;
            b_say(self, other, "$LOOKINGFORTROUBLEEH");
        }
        else if ((self.aivar[6] == 1) && (npc_getstatetime(self) > 6)) {
            printdebugnpc(pd_orc_frame, "ZS_OrcWarrior_ObserveIntruder: ANGRY: Angriff 2");
            b_say(self, other, "$DIE");
            ai_startstate(self, zs_orc_attack, 1, "");
        }
        else {
            if (npc_getdisttonpc(self, other) > 1500) {
                return 1;
            };
        };
        return 0;
    }
    else if ((npc_getattitude(self, other) == att_neutral) && (self.aivar[9] == 0)) {
        printdebugnpc(pd_orc_frame, "ZS_OrcWarrior_ObserveIntruder: NEUTRAL");
        b_orc_smartturn();
        if ((npc_getdisttonpc(self, other) < 300) && (self.aivar[6] > 0)) {
            if (self.aivar[6] != 2) {
                self.aivar[6] = 2;
                ai_wait(self, 3.0);
            }
            else {
                if (npc_getstatetime(self) > 10) {
                    printdebugnpc(pd_orc_frame, "ZS_OrcWarrior_ObserveIntruder: NEUTRAL: Angriff");
                    ai_startstate(self, zs_orc_attack, 1, "");
                };
            };
        }
        else if ((npc_getdisttonpc(self, other) < 500) && (self.aivar[6] == 0)) {
            self.aivar[6] = 1;
            printdebugnpc(pd_orc_frame, "ZS_OrcWarrior_ObserveIntruder: NEUTRAL: Waffe ziehen");
            if (!npc_hasreadiedweapon(self)) {
                ai_equipbestmeleeweapon(self);
                ai_drawweapon(self);
            };
            b_say(self, other, "$LOOKINGFORTROUBLEEH");
        }
        else {
            if (npc_getstatetime(self) > 15) {
                return 1;
            };
        };
        return 0;
    }
    else if (npc_getattitude(self, other) == att_friendly) {
        printdebugnpc(pd_orc_frame, "ZS_OrcWarrior_ObserveIntruder: FRIENDLY");
        b_orc_smartturn();
        if ((npc_getdisttonpc(self, other) < 300) && (self.aivar[6] != 1)) {
            self.aivar[6] = 1;
            b_say(self, other, "$WHAT");
        };
        if (npc_getdisttonpc(self, other) > 700) {
            return 1;
        };
        return 0;
    }
    else {
        if (npc_getdisttonpc(self, other) > 2000) {
            return 1;
        };
    };
    return 0;
};

func void zs_orcwarrior_observeintruder_end() {
    printdebugnpc(pd_orc_frame, "ZS_OrcWarrior_ObserveIntruder_End");
    if (npc_hasreadiedweapon(self)) {
        ai_removeweapon(self);
    };
    ai_stoplookat(self);
    ai_continueroutine(self);
};

func void zs_orcscout_observeintruder() {
    printdebugnpc(pd_orc_frame, "ZS_OrcScout_ObserveIntruder");
    npc_percenable(self, perc_assessdamage, b_orc_assessdamage);
    npc_percenable(self, perc_drawweapon, b_orc_drawweapon);
    npc_percenable(self, perc_assessothersdamage, zs_orc_watchfight);
    npc_percenable(self, perc_assessmurder, b_orc_assessmurder);
    npc_percenable(self, perc_assessdefeat, b_orc_assessdefeat);
    npc_percenable(self, perc_assesscaster, b_orc_assesssomethingevil);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assessthreat, b_orc_assesssomethingevil);
    self.aivar[6] = 0;
    self.aivar[9] = 0;
};

func int zs_orcscout_observeintruder_loop() {
    printdebugnpc(pd_orc_frame, "ZS_OrcScout_ObserveIntruder_Loop:");
    if ((npc_getattitude(self, other) == att_hostile) && (npc_getdisttonpc(self, other) < 1000)) {
        printdebugnpc(pd_orc_frame, "ZS_OrcScout_ObserveIntruder: HOSTILE");
        b_say(self, other, "$DIE");
        ai_startstate(self, zs_orc_attack, 1, "");
        return 1;
    }
    else if ((npc_getattitude(self, other) == att_angry) && (self.aivar[9] == 0)) {
        printdebugnpc(pd_orc_frame, "ZS_OrcScout_ObserveIntruder: ANGRY");
        b_orc_smartturn();
        if ((npc_getdisttonpc(self, other) < 300) && ((self.aivar[6] == 1) || (npc_getstatetime(self) > 6))) {
            printdebugnpc(pd_orc_frame, "ZS_OrcScout_ObserveIntruder: ANGRY: Angriff 1");
            b_say(self, other, "$DIE");
            ai_startstate(self, zs_orc_attack, 1, "");
        }
        else if ((npc_getdisttonpc(self, other) < 400) && (self.aivar[6] == 0)) {
            printdebugnpc(pd_orc_frame, "ZS_OrcScout_ObserveIntruder: ANGRY: Waffe ziehen");
            if (!npc_hasreadiedweapon(self)) {
                ai_equipbestmeleeweapon(self);
                ai_drawweapon(self);
            };
            self.aivar[6] = 1;
            b_say(self, other, "$LOOKINGFORTROUBLEEH");
        }
        else if ((self.aivar[6] == 1) && (npc_getstatetime(self) > 6)) {
            printdebugnpc(pd_orc_frame, "ZS_OrcScout_ObserveIntruder: ANGRY: Angriff 2");
            b_say(self, other, "$DIE");
            ai_startstate(self, zs_orc_attack, 1, "");
        }
        else {
            if (npc_getdisttonpc(self, other) > 600) {
                return 1;
            };
        };
        return 0;
    }
    else if ((npc_getattitude(self, other) == att_neutral) && (self.aivar[9] == 0)) {
        printdebugnpc(pd_orc_frame, "ZS_OrcScout_ObserveIntruder: NEUTRAL");
        b_orc_smartturn();
        if ((npc_getdisttonpc(self, other) < 200) && (self.aivar[6] > 0)) {
            if (self.aivar[6] != 2) {
                self.aivar[6] = 2;
                ai_wait(self, 3.0);
            }
            else {
                if (npc_getstatetime(self) > 10) {
                    printdebugnpc(pd_orc_frame, "ZS_OrcScout_ObserveIntruder: NEUTRAL: Angriff");
                    ai_startstate(self, zs_orc_attack, 1, "");
                };
            };
        }
        else if ((npc_getdisttonpc(self, other) < 400) && (self.aivar[6] == 0)) {
            self.aivar[6] = 1;
            printdebugnpc(pd_orc_frame, "ZS_OrcScout_ObserveIntruder: NEUTRAL: Waffe ziehen");
            b_say(self, other, "$LOOKINGFORTROUBLEEH");
        }
        else {
            if (npc_getstatetime(self) > 15) {
                return 1;
            };
        };
        return 0;
    }
    else if (npc_getattitude(self, other) == att_friendly) {
        printdebugnpc(pd_orc_frame, "ZS_OrcScout_ObserveIntruder: FRIENDLY");
        b_orc_smartturn();
        if ((npc_getdisttonpc(self, other) < 300) && (self.aivar[6] != 1)) {
            self.aivar[6] = 1;
            b_say(self, other, "$WHAT");
        };
        if (npc_getdisttonpc(self, other) > 400) {
            return 1;
        };
        return 0;
    }
    else {
        if (npc_getdisttonpc(self, other) > 2000) {
            return 1;
        };
    };
    return 0;
};

func void zs_orcscout_observeintruder_end() {
    printdebugnpc(pd_orc_frame, "ZS_OrcScout_ObserveIntruder_End");
    if (npc_hasreadiedweapon(self)) {
        ai_removeweapon(self);
    };
    ai_stoplookat(self);
    ai_continueroutine(self);
};

func void zs_orcshaman_observeintruder() {
    printdebugnpc(pd_orc_frame, "ZS_OrcShaman_ObserveIntruder");
    npc_percenable(self, perc_assessdamage, b_orc_assessdamage);
    npc_percenable(self, perc_drawweapon, b_orc_drawweapon);
    npc_percenable(self, perc_assessothersdamage, zs_orc_watchfight);
    npc_percenable(self, perc_assessmurder, b_orc_assessmurder);
    npc_percenable(self, perc_assessdefeat, b_orc_assessdefeat);
    npc_percenable(self, perc_assesscaster, b_orc_assesssomethingevil);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assessthreat, b_orc_assesssomethingevil);
    self.aivar[6] = 0;
    self.aivar[9] = 0;
};

func int zs_orcshaman_observeintruder_loop() {
    printdebugnpc(pd_orc_frame, "ZS_OrcShaman_ObserveIntruder_Loop:");
    if ((npc_getattitude(self, other) == att_hostile) && (npc_getdisttonpc(self, other) < 1500)) {
        printdebugnpc(pd_orc_frame, "ZS_OrcShaman_ObserveIntruder: HOSTILE");
        b_say(self, other, "$DIE");
        ai_startstate(self, zs_orc_attack, 1, "");
        return 1;
    }
    else if ((npc_getattitude(self, other) == att_angry) && (self.aivar[9] == 0)) {
        printdebugnpc(pd_orc_frame, "ZS_OrcShaman_ObserveIntruder: ANGRY");
        b_orc_smartturn();
        if ((npc_getdisttonpc(self, other) < 500) && ((self.aivar[6] == 1) || (npc_getstatetime(self) > 6))) {
            printdebugnpc(pd_orc_frame, "ZS_OrcShaman_ObserveIntruder: ANGRY: Angriff 1");
            b_say(self, other, "$DIE");
            ai_startstate(self, zs_orc_attack, 1, "");
        }
        else if ((npc_getdisttonpc(self, other) < 1500) && (self.aivar[6] == 0)) {
            printdebugnpc(pd_orc_frame, "ZS_OrcShaman_ObserveIntruder: ANGRY: Waffe ziehen");
            if (!npc_hasreadiedweapon(self)) {
                ai_equipbestmeleeweapon(self);
                ai_drawweapon(self);
            };
            self.aivar[6] = 1;
            b_say(self, other, "$LOOKINGFORTROUBLEEH");
        }
        else {
            if ((self.aivar[6] == 1) && (npc_getstatetime(self) > 6)) {
                printdebugnpc(pd_orc_frame, "ZS_OrcShaman_ObserveIntruder: ANGRY: Angriff 2");
                b_say(self, other, "$DIE");
                ai_startstate(self, zs_orc_attack, 1, "");
            };
        };
        return 0;
    }
    else if ((npc_getattitude(self, other) == att_neutral) && (self.aivar[9] == 0)) {
        printdebugnpc(pd_orc_frame, "ZS_OrcShaman_ObserveIntruder: NEUTRAL");
        b_orc_smartturn();
        if ((npc_getdisttonpc(self, other) < 300) && (self.aivar[6] > 0)) {
            if (self.aivar[6] != 2) {
                self.aivar[6] = 2;
                ai_wait(self, 3.0);
            }
            else {
                if (npc_getstatetime(self) > 10) {
                    printdebugnpc(pd_orc_frame, "ZS_OrcShaman_ObserveIntruder: NEUTRAL: Angriff");
                    ai_startstate(self, zs_orc_attack, 1, "");
                };
            };
        }
        else if ((npc_getdisttonpc(self, other) < 1000) && (self.aivar[6] == 0)) {
            self.aivar[6] = 1;
            printdebugnpc(pd_orc_frame, "ZS_OrcShaman_ObserveIntruder: NEUTRAL: Waffe ziehen");
            if (!npc_hasreadiedweapon(self)) {
                ai_equipbestmeleeweapon(self);
                ai_drawweapon(self);
            };
            b_say(self, other, "$LOOKINGFORTROUBLEEH");
        }
        else {
            if (npc_getstatetime(self) > 15) {
                return 1;
            };
        };
        return 0;
    }
    else if (npc_getattitude(self, other) == att_friendly) {
        printdebugnpc(pd_orc_frame, "ZS_OrcShaman_ObserveIntruder: FRIENDLY");
        b_orc_smartturn();
        if ((npc_getdisttonpc(self, other) < 300) && (self.aivar[6] != 1)) {
            self.aivar[6] = 1;
            b_say(self, other, "$WHAT");
        };
        if (npc_getdisttonpc(self, other) > 400) {
            return 1;
        };
        return 0;
    }
    else {
        if (npc_getdisttonpc(self, other) > 2000) {
            return 1;
        };
    };
    return 0;
};

func void zs_orcshaman_observeintruder_end() {
    printdebugnpc(pd_orc_frame, "ZS_OrcShaman_ObserveIntruder_End");
    if (npc_hasreadiedweapon(self)) {
        ai_removeweapon(self);
    };
    ai_stoplookat(self);
    ai_continueroutine(self);
};

func void b_orc_assesssomethingevil() {
    var int att;

    printdebugnpc(pd_orc_frame, "B_Orc_AssessSomethingEvil");
    npc_percdisable(self, perc_assessthreat);
    if (other.guild < gil_seperator_orc) {
        printdebugnpc(pd_orc_frame, "B_Orc_AssessSomethingEvil: other ist Nicht-Ork");
        att = npc_getpermattitude(self, other);
        if (att == att_angry) {
            npc_settempattitude(self, att_hostile);
        }
        else if (att == att_neutral) {
            npc_settempattitude(self, att_angry);
        }
        else {
            if (att == att_friendly) {
                npc_settempattitude(self, att_neutral);
            };
        };
    };
};

func void b_initorcattitudes(var int orcsvshuman) {
    if (orcsvshuman == 1) {
        b_setguildattitude(gil_orcshaman, att_friendly, gil_seperator_hum);
        b_setguildattitude(gil_orcwarrior, att_friendly, gil_seperator_hum);
        b_setguildattitude(gil_orcscout, att_friendly, gil_seperator_hum);
        b_setguildattitude(gil_orcslave, att_friendly, gil_seperator_hum);
    }
    else if (orcsvshuman == 2) {
        b_setguildattitude(gil_orcshaman, att_neutral, gil_seperator_hum);
        b_setguildattitude(gil_orcwarrior, att_neutral, gil_seperator_hum);
        b_setguildattitude(gil_orcscout, att_neutral, gil_seperator_hum);
        b_setguildattitude(gil_orcslave, att_neutral, gil_seperator_hum);
    }
    else if (orcsvshuman == 3) {
        b_setguildattitude(gil_orcshaman, att_angry, gil_seperator_hum);
        b_setguildattitude(gil_orcwarrior, att_angry, gil_seperator_hum);
        b_setguildattitude(gil_orcscout, att_angry, gil_seperator_hum);
        b_setguildattitude(gil_orcslave, att_angry, gil_seperator_hum);
    }
    else {
        if (orcsvshuman == 4) {
            b_setguildattitude(gil_orcshaman, att_hostile, gil_seperator_hum);
            b_setguildattitude(gil_orcwarrior, att_hostile, gil_seperator_hum);
            b_setguildattitude(gil_orcscout, att_hostile, gil_seperator_hum);
            b_setguildattitude(gil_orcslave, att_hostile, gil_seperator_hum);
        };
    };
    b_setguildattitude(gil_seperator_orc, att_neutral, gil_waran);
    b_setguildattitude(gil_seperator_orc, att_neutral, gil_slf);
    b_setguildattitude(gil_seperator_orc, att_neutral, gil_gobbo);
    b_setguildattitude(gil_seperator_orc, att_neutral, gil_troll);
    b_setguildattitude(gil_seperator_orc, att_neutral, gil_snapper);
    b_setguildattitude(gil_seperator_orc, att_neutral, gil_minecrawler);
    b_setguildattitude(gil_seperator_orc, att_neutral, gil_meatbug);
    b_setguildattitude(gil_seperator_orc, att_neutral, gil_scavenger);
    b_setguildattitude(gil_seperator_orc, att_neutral, gil_demon);
    b_setguildattitude(gil_seperator_orc, att_neutral, gil_wolf);
    b_setguildattitude(gil_seperator_orc, att_neutral, gil_shadowbeast);
    b_setguildattitude(gil_seperator_orc, att_neutral, gil_bloodfly);
    b_setguildattitude(gil_seperator_orc, att_neutral, gil_swampshark);
    b_setguildattitude(gil_seperator_orc, att_neutral, gil_zombie);
    b_setguildattitude(gil_seperator_orc, att_neutral, gil_undeadorc);
    b_setguildattitude(gil_seperator_orc, att_neutral, gil_skeleton);
    b_setguildattitude(gil_seperator_orc, att_neutral, gil_orcdog);
    b_setguildattitude(gil_seperator_orc, att_neutral, gil_molerat);
    b_setguildattitude(gil_seperator_orc, att_neutral, gil_golem);
    b_setguildattitude(gil_seperator_orc, att_neutral, gil_lurker);
    b_setguildattitude(gil_orcshaman, att_friendly, gil_orcshaman);
    b_setguildattitude(gil_orcshaman, att_friendly, gil_orcwarrior);
    b_setguildattitude(gil_orcshaman, att_friendly, gil_orcscout);
    b_setguildattitude(gil_orcshaman, att_friendly, gil_orcslave);
    b_setguildattitude(gil_orcwarrior, att_friendly, gil_orcshaman);
    b_setguildattitude(gil_orcwarrior, att_friendly, gil_orcwarrior);
    b_setguildattitude(gil_orcwarrior, att_friendly, gil_orcscout);
    b_setguildattitude(gil_orcwarrior, att_friendly, gil_orcslave);
    b_setguildattitude(gil_orcscout, att_friendly, gil_orcshaman);
    b_setguildattitude(gil_orcscout, att_friendly, gil_orcwarrior);
    b_setguildattitude(gil_orcscout, att_friendly, gil_orcscout);
    b_setguildattitude(gil_orcscout, att_friendly, gil_orcslave);
    b_setguildattitude(gil_orcslave, att_friendly, gil_orcshaman);
    b_setguildattitude(gil_orcslave, att_friendly, gil_orcwarrior);
    b_setguildattitude(gil_orcslave, att_friendly, gil_orcscout);
    b_setguildattitude(gil_orcslave, att_friendly, gil_orcslave);
};

func void b_orcslave_quicklook() {
    printdebugnpc(pd_orc_frame, "OrcSlave_ObserveIntruder");
    if ((npc_isplayer(other) && (npc_getdisttonpc(self, other) < perc_dist_flee)) && npc_canseenpc(self, other)) {
        printdebugnpc(pd_orc_frame, "OrcSlave_ObserveIntruder: Quicklook");
        npc_clearaiqueue(self);
        ai_lookatnpc(self, other);
        ai_wait(self, 3.0);
        ai_stoplookat(self);
    };
    ai_continueroutine(self);
};

func void b_orc_assessdamage() {
    printdebugnpc(pd_orc_frame, "B_Orc_AssessDamage");
    ai_turntonpc(self, other);
    if (npc_getdisttonpc(self, other) > 500) {
        printdebugnpc(pd_orc_frame, "B_Orc_AssessDamage: Gegner weit weg -> hinspringen");
        ai_playani(self, "T_STAND_2_JUMP");
    };
    b_fullstop(self);
    npc_sendpassiveperc(self, perc_assesswarn, self, other);
    npc_settempattitude(self, att_hostile);
    npc_settarget(self, other);
    ai_startstate(self, zs_orc_attack, 0, "");
};

func void b_orc_assessdefeat() {
    printdebugnpc(pd_orc_frame, "B_Orc_AssessDefeat");
    if ((npc_getpermattitude(self, victim) == att_hostile) || (npc_getpermattitude(self, victim) == att_angry)) {
        if (hlp_getinstanceid(other) == hlp_getinstanceid(self)) {
            printdebugnpc(pd_orc_check, "B_Orc_AssessDefeat: Hostile wird gefinished");
            ai_turntonpc(self, victim);
            ai_finishingmove(self, victim);
        };
    };
    if ((npc_hasreadiedrangedweapon(other) && (other.guild < gil_seperator_orc)) && ((victim.guild > gil_seperator_orc) || (victim.guild == gil_orcdog))) {
        printdebugnpc(pd_orc_frame, "B_Orc_AssessDefeat: Fernkampfwaffentraeger sind Schweine");
        ai_startstate(self, zs_orc_attack, 0, "");
    };
    if (npc_gettempattitude(self, other) == att_hostile) {
        npc_settempattitude(self, att_angry);
    };
    if (npc_gettempattitude(self, victim) == att_hostile) {
        npc_settempattitude(self, att_angry);
    };
};

func void b_orc_assessmurder() {
    printdebugnpc(pd_orc_frame, "B_Orc_AssesMurder");
    if ((victim.guild > gil_seperator_orc) && npc_isplayer(other)) {
        printdebugnpc(pd_orc_frame, "B_Orc_AssesMurder: Spieler hat Ork gekillt -> RAAAAAAAAAACHE!");
        ai_turntonpc(self, other);
        if (hlp_random(10) < 5) {
            ai_playani(self, "T_ANGRY");
        };
        npc_setattitude(self, att_hostile);
        npc_settempattitude(self, att_hostile);
        return;
    }
    else if ((victim.guild > gil_seperator_orc) || (victim.guild == gil_orcdog)) {
        printdebugnpc(pd_orc_frame, "B_Orc_AssesMurder: ein Ork(Hund) ist tot -> RAAAAAAAAAACHE!");
        ai_turntonpc(self, other);
        if (hlp_random(10) < 5) {
            ai_playani(self, "T_ANGRY");
        }
        else {
            if (hlp_random(10) < 5) {
                b_say(self, other, "$NEVERTRYTHATAGAIN");
            };
        };
        ai_startstate(self, zs_orc_attack, 1, "");
    }
    else {
        if (npc_canseenpc(self, other)) {
            printdebugnpc(pd_orc_frame, "B_Orc_AssesMurder: irgendwas ist tot -> cooool");
            b_say(self, NULL, "$CHEERFIGHT");
            ai_playani(self, "T_HAPPY");
        };
    };
};

func void b_orc_assesswarn() {
    printdebugnpc(pd_orc_frame, "B_Orc_AssessWarn");
    if (c_npcisorc(victim)) {
        printdebugnpc(pd_orc_frame, "B_Orc_AssessWarn: Von Ork geschickt -> hingehen");
        npc_clearaiqueue(self);
        ai_standupquick(self);
        ai_setwalkmode(self, npc_run);
        if (!npc_hasreadiedweapon(self)) {
            ai_equipbestmeleeweapon(self);
            ai_drawweapon(self);
        };
        ai_gotonpc(self, victim);
    };
};

func void b_orc_cheerfight() {
    var int h;

    printdebugnpc(pd_orc_frame, "B_Orc_CheerFight");
    h = hlp_random(20);
    if ((npc_gettempattitude(self, victim) == att_friendly) || (victim.guild > gil_seperator_orc)) {
        printdebugnpc(pd_orc_check, "B_Orc_CheerFight: Opfer ist mein Freund/Ork -> Trauer");
        b_say(self, NULL, "$OOH");
        if (h < 6) {
            ai_playani(self, "T_FRIGHTENED");
        };
    }
    else {
        printdebugnpc(pd_orc_check, "B_Orc_CheerFight: Opfer ist nicht mein Freund -> Freude");
        b_say(self, NULL, "$CHEERFIGHT");
        if (h < 6) {
            ai_playani(self, "T_HAPPY");
        };
    };
};

func void b_orc_idle_ani() {
    var int ani;

    ani = hlp_random(130);
    if (ani < 10) {
        ai_playani(self, "T_PERCEPTION");
    }
    else if (ani < 20) {
        ai_playani(self, "T_WARN");
    }
    else if (ani < 30) {
        ai_playani(self, "T_ANGRY");
    }
    else if (ani < 40) {
        ai_playani(self, "T_FRIGHTEND");
    }
    else if (ani < 50) {
        ai_playani(self, "T_HAPPY");
    }
    else if (ani < 60) {
        ai_playani(self, "T_DIALOGGESTURE_01");
    }
    else if (ani < 70) {
        ai_playani(self, "T_DIALOGGESTURE_02");
    }
    else if (ani < 80) {
        ai_playani(self, "T_DIALOGGESTURE_03");
    }
    else if (ani < 90) {
        ai_playani(self, "T_DIALOGGESTURE_04");
    }
    else if (ani < 100) {
        ai_playani(self, "T_DIALOGGESTURE_05");
    }
    else if (ani < 110) {
        ai_playani(self, "T_DIALOGGESTURE_06");
    }
    else if (ani < 120) {
        ai_playani(self, "T_DIALOGGESTURE_07");
    }
    else {
        if (ani < 130) {
            ai_playani(self, "T_DIALOGGESTURE_08");
        };
    };
    ai_wait(self, 1.0);
};

func void zs_orc_stonemill() {
    printdebugnpc(pd_zs_frame, "ZS_Orc_Stonemill");
    if (npc_getbodystate(self) != bs_mobinteract) {
        ai_setwalkmode(self, npc_walk);
        if (hlp_strcmp(npc_getnearestwp(self), self.wp) == 0) {
            ai_gotowp(self, self.wp);
        };
    };
    orcdefaultpercdoing();
};

func void zs_orc_stonemill_loop() {
    printdebugnpc(pd_zs_frame, "ZS_Orc_Stonemill_Loop");
    ai_usemob(self, "STONEMILL", 1);
    ai_usemob(self, "STONEMILL", 0);
    ai_usemob(self, "STONEMILL", -1);
};

func void zs_orc_stonemill_end() {
    printdebugnpc(pd_zs_frame, "ZS_Orc_Stonemill_End");
    npc_clearaiqueue(self);
    ai_usemob(self, "STONEMILL", -1);
};

func void zs_orc_stomper() {
    printdebugnpc(pd_ta_frame, "ZS_Orc_Stomper");
    if (npc_getbodystate(self) != bs_mobinteract) {
        ai_setwalkmode(self, npc_walk);
        if (hlp_strcmp(npc_getnearestwp(self), self.wp) == 0) {
            ai_gotowp(self, self.wp);
        };
    };
    orcdefaultpercdoing();
};

func void zs_orc_stomper_loop() {
    printdebugnpc(pd_ta_frame, "ZS_Orc_Stomper_Loop");
    ai_usemob(self, "STOMPER", 1);
    ai_usemob(self, "STOMPER", 0);
    ai_usemob(self, "STOMPER", -1);
};

func void zs_orc_stomper_end() {
    printdebugnpc(pd_ta_frame, "ZS_Orc_Stomper_End");
    npc_clearaiqueue(self);
    ai_usemob(self, "STOMPER", -1);
};

func void zs_orc_eat() {
    printdebugnpc(pd_zs_frame, "ZS_Orc_Eat");
    ai_setwalkmode(self, npc_walk);
    if (!npc_isonfp(self, "STAND")) {
        ai_gotowp(self, self.wp);
    };
    orcdefaultperc();
};

func int zs_orc_eat_loop() {
    var float pause;

    printdebugnpc(pd_zs_frame, "ZS_Orc_Eat_Loop");
    b_gotofp(self, "STAND");
    b_orc_itemeat();
    pause = inttofloat(hlp_random(5) + 2);
    ai_wait(self, pause);
    return 0;
};

func void zs_orc_eat_end() {
    printdebugnpc(pd_zs_frame, "ZS_Eat_End");
    npc_clearaiqueue(self);
};

func void zs_orc_sleep() {
    printdebugnpc(pd_zs_frame, "ZS_Orc_Sleep");
    if (!c_bodystatecontains(self, bs_mobinteract)) {
        if (hlp_strcmp(npc_getnearestwp(self), self.wp) == 0) {
            ai_gotowp(self, self.wp);
        };
        ai_unequipweapons(self);
        ai_usemob(self, "BEDLOW", 1);
    };
    orclightsleepperc();
};

func int zs_orc_sleep_loop() {
    printdebugnpc(pd_zs_loop, "ZS_ORC_Sleep_Loop");
    if (c_bodystatecontains(self, bs_mobinteract)) {
    };
    return 0;
};

func void zs_orc_sleep_end() {
    printdebugnpc(pd_zs_frame, "ZS_Orc_Sleep_End");
    npc_clearaiqueue(self);
    ai_usemob(self, "BEDLOW", -1);
    b_say(self, NULL, "$AWAKE");
    ai_equipbestmeleeweapon(self);
    ai_equipbestrangedweapon(self);
};

func void zs_orc_pray() {
    printdebugnpc(pd_zs_frame, "ZS_Orc_Pray");
    orcdefaultpercdoing();
    ai_setwalkmode(self, npc_walk);
    if (!npc_isonfp(self, "PREY")) {
        ai_gotowp(self, self.wp);
    };
};

func void zs_orc_pray_loop() {
    printdebugnpc(pd_zs_loop, "ZS_Orc_Pray_Loop");
    b_gotofp(self, "PREY");
    if (npc_getbodystate(self) != bs_sit) {
        ai_playanibs(self, "T_STAND_2_PRAY", bs_sit);
    }
    else {
        ai_playanibs(self, "T_PRAY_RANDOM", bs_sit);
    };
    ai_wait(self, 1.0);
};

func void zs_orc_pray_end() {
    printdebugnpc(pd_zs_frame, "ZS_Orc_Pray_End");
    npc_clearaiqueue(self);
    ai_playanibs(self, "T_PRAY_2_STAND", bs_stand);
};

func void zs_orc_drum() {
    printdebugnpc(pd_zs_frame, "ZS_Orc_Drum");
    if (npc_getbodystate(self) != bs_mobinteract) {
        ai_setwalkmode(self, npc_walk);
        if (hlp_strcmp(npc_getnearestwp(self), self.wp) == 0) {
            ai_gotowp(self, self.wp);
        };
        ai_usemob(self, "DRUM", 1);
    };
    orcdefaultpercdoing();
};

func int zs_orc_drum_loop() {
    var int random;

    printdebugnpc(pd_zs_loop, "ZS_Orc_Drum_Loop");
    if (npc_getbodystate(self) == bs_mobinteract_interrupt) {
        random = hlp_random(15);
        if (random < 5) {
            ai_playanibs(self, "T_ORCDRUM_RANDOM_1", bs_mobinteract_interrupt);
        }
        else if (random < 10) {
            ai_playanibs(self, "T_ORCDRUM_RANDOM_2", bs_mobinteract_interrupt);
        }
        else {
            ai_playanibs(self, "T_ORCDRUM_RANDOM_3", bs_mobinteract_interrupt);
        };
    };
    return loop_continue;
};

func int zs_orc_drum_end() {
    printdebugnpc(pd_zs_frame, "ZS_Orc_Drum_End");
    npc_clearaiqueue(self);
    ai_usemob(self, "DRUM", -1);
};

func void zs_orc_speech() {
    printdebugnpc(pd_zs_frame, "ZS_Orc_Speech");
    ai_setwalkmode(self, npc_walk);
    if (!npc_isonfp(self, "STAND")) {
        ai_gotowp(self, self.wp);
    };
    orcdefaultperc();
};

func int zs_orc_speech_loop() {
    var int ani;

    printdebugnpc(pd_zs_loop, "ZS_Orc_Speech_Loop");
    b_gotofp(self, "STAND");
    ani = hlp_random(30);
    if (ani == 1) {
        ai_playani(self, "T_DIALOGGESTURE_01");
    }
    else if (ani == 2) {
        ai_playani(self, "T_DIALOGGESTURE_02");
    }
    else if (ani == 3) {
        ai_playani(self, "T_DIALOGGESTURE_03");
    }
    else if (ani == 4) {
        ai_playani(self, "T_DIALOGGESTURE_04");
    }
    else if (ani == 5) {
        ai_playani(self, "T_DIALOGGESTURE_05");
    }
    else if (ani == 6) {
        ai_playani(self, "T_DIALOGGESTURE_06");
    }
    else if (ani == 7) {
        ai_playani(self, "T_DIALOGGESTURE_07");
    }
    else {
        if (ani == 8) {
            ai_playani(self, "T_DIALOGGESTURE_08");
        };
    };
    ai_wait(self, 1.0);
};

func void zs_orc_speech_end() {
    printdebugnpc(pd_ta_frame, "ZS_Orc_Speech_End");
    npc_clearaiqueue(self);
};

func void zs_orc_gotowp() {
    printdebugnpc(pd_zs_frame, "ZS_Orc_GotoWP");
    ai_setwalkmode(self, npc_walk);
    ai_gotowp(self, self.wp);
    ai_aligntowp(self);
    orcdefaultperc();
};

func void zs_orc_gotowp_loop() {
    printdebugnpc(pd_zs_loop, "ZS_Orc_GotoWP_Loop");
    if (hlp_random(250) < 10) {
        b_orc_idle_ani();
    };
};

func void zs_orc_gotowp_end() {
    printdebugnpc(pd_zs_frame, "ZS_Orc_GotoWP_End");
    npc_clearaiqueue(self);
};

func void zs_orc_walkaround() {
    printdebugnpc(pd_zs_frame, "ZS_Orc_WalkAround");
    orcdefaultperc();
    ai_setwalkmode(self, npc_walk);
    if (!npc_isonfp(self, "FP_ORC_STAND")) {
        ai_gotowp(self, self.wp);
    };
    if (wld_isfpavailable(self, "FP_ORC_STAND_A")) {
        ai_gotofp(self, "FP_ORC_STAND_A");
    }
    else if (wld_isfpavailable(self, "FP_ORC_STAND_B")) {
        ai_gotofp(self, "FP_ORC_STAND_B");
    }
    else {
        if (wld_isfpavailable(self, "FP_ORC_STAND_C")) {
            ai_gotofp(self, "FP_ORC_STAND_C");
        };
    };
    ai_aligntofp(self);
};

func void zs_orc_walkaround_loop() {
    var string wp1;
    var string wp2;
    var float f;

    printdebugnpc(pd_ta_loop, "ZS_Orc_WalkAround_Loop");
    wp1 = npc_getnearestwp(self);
    wp2 = npc_getnextwp(self);
    if ((!hlp_strcmp(wp1, self.wp)) && (hlp_random(10) < 5)) {
        printdebugnpc(pd_zs_frame, "ZS_Orc_WalkAround: Goto Nearest");
        ai_gotowp(self, wp1);
        self.wp = wp1;
    }
    else {
        if (!hlp_strcmp(wp2, self.wp)) {
            printdebugnpc(pd_zs_frame, "ZS_Orc_WalkAround: Goto Next");
            ai_gotowp(self, wp2);
            self.wp = wp2;
        };
    };
    if (hlp_random(80) < 10) {
        printdebugnpc(pd_zs_frame, "ZS_Orc_WalkAround: Idle Ani");
        b_orc_idle_ani();
        ai_wait(self, 2.0);
        return;
    };
    if (hlp_random(50) < 5) {
        printdebugnpc(pd_zs_frame, "ZS_Orc_WalkAround: Wait");
        f = inttofloat(hlp_random(4));
        ai_wait(self, f);
    };
};

func void zs_orc_walkaround_end() {
    printdebugnpc(pd_ta_frame, "ZS_Orc_WalkAround_End");
    npc_clearaiqueue(self);
};

func void zs_orc_drinkalcohol() {
    printdebugnpc(pd_zs_frame, "ZS_Orc_DrinkAlcohol");
    orcdefaultperc();
    ai_setwalkmode(self, npc_walk);
    if (!npc_isonfp(self, "STAND")) {
        ai_gotowp(self, self.wp);
    };
};

func int zs_orc_drinkalcohol_loop() {
    var float pause;

    printdebugnpc(pd_zs_frame, "ZS_Orc_DrinkAlcohol_Loop");
    b_gotofp(self, "STAND");
    b_orc_itempotion();
    pause = inttofloat(hlp_random(5) + 2);
    ai_wait(self, pause);
    return 0;
};

func void zs_orc_drinkalcohol_end() {
    printdebugnpc(pd_zs_frame, "ZS_DrinkAlcohol_End");
    npc_clearaiqueue(self);
};

func void zs_orc_dance() {
    printdebugnpc(pd_zs_frame, "ZS_Orc_Dance");
    ai_setwalkmode(self, npc_walk);
    if (!npc_isonfp(self, "DANCE")) {
        ai_gotowp(self, self.wp);
    };
    orcdefaultpercdoing();
};

func void zs_orc_dance_loop() {
    printdebugnpc(pd_zs_loop, "ZS_Orc_Dance_Loop");
    b_gotofp(self, "DANCE");
    if (hlp_random(10) < 5) {
        printdebugnpc(pd_zs_frame, "ZS_Orc_Dance_Loop: T_DANCE");
        ai_playani(self, "T_DANCE");
    }
    else {
        printdebugnpc(pd_zs_frame, "ZS_Orc_Dance_Loop: T_DANCE_RANDOM_1");
        ai_playani(self, "T_DANCE_RANDOM_1");
    };
};

func void zs_orc_dance_end() {
    printdebugnpc(pd_zs_frame, "ZS_Orc_Dance_End");
    npc_clearaiqueue(self);
    ai_standup(self);
};

func void zs_orc_eatanddrink() {
    printdebugnpc(pd_zs_frame, "ZS_Orc_EatAndDrink");
    ai_setwalkmode(self, npc_walk);
    if (!npc_isonfp(self, "STAND")) {
        ai_gotowp(self, self.wp);
    };
    orcdefaultperc();
};

func void zs_orc_eatanddrink_loop() {
    var float pause;

    printdebugnpc(pd_zs_frame, "ZS_Orc_EatAndDrink_Loop");
    b_gotofp(self, "STAND");
    if (hlp_random(10) < 5) {
        b_orc_itemeat();
    }
    else {
        b_orc_itempotion();
    };
    pause = inttofloat(hlp_random(5) + 2);
    ai_wait(self, pause);
};

func void zs_orc_eatanddrink_end() {
    printdebugnpc(pd_zs_frame, "ZS_Orc_EatAndDrink_End");
    npc_clearaiqueue(self);
};

func void zs_orc_guardsleepy() {
    printdebugnpc(pd_ta_frame, "ZS_Orc_GuardSleepy");
    ai_setwalkmode(self, npc_walk);
    if (!npc_isonfp(self, "SIT")) {
        ai_gotowp(self, self.wp);
    };
    orcdefaultperc();
};

func void zs_orc_guardsleepy_loop() {
    var float sleep;

    printdebugnpc(pd_zs_frame, "ZS_Orc_GuardSleepy_Loop");
    b_gotofp(self, "SIT");
    if ((!c_bodystatecontains(self, bs_sit)) && (hlp_random(500) < 10)) {
        printdebugnpc(pd_zs_frame, "ZS_Orc_GuardSleepy_Loop: stehende Ani");
        b_orc_idle_ani();
        return;
    };
    if ((!c_bodystatecontains(self, bs_sit)) && (hlp_random(600) < 10)) {
        printdebugnpc(pd_zs_frame, "ZS_Orc_GuardSleepy_Loop: hinsetzen");
        ai_playanibs(self, "T_STAND_2_GUARDSIT", bs_sit);
        ai_wait(self, 2.0);
        return;
    };
    if (c_bodystatecontains(self, bs_sit) && (hlp_random(700) < 10)) {
        printdebugnpc(pd_zs_frame, "ZS_Orc_GuardSleepy_Loop: einschlafen im Sitzen");
        ai_playanibs(self, "T_GUARDSIT_2_GUARDSLEEP", bs_sit);
        sleep = inttofloat(hlp_random(5) + 15);
        ai_wait(self, sleep);
        ai_playanibs(self, "T_GUARDSLEEP_2_GUARDSIT", bs_sit);
        return;
    };
};

func void zs_orc_guardsleepy_end() {
    printdebugnpc(pd_ta_frame, "ZS_Orc_GuardSleepy_End");
};

func void zs_orc_guard() {
    printdebugnpc(pd_ta_frame, "ZS_Orc_Guard");
    orcdefaultperc();
    b_fullstop(self);
    ai_setwalkmode(self, npc_walk);
    if (!npc_isonfp(self, "FP_ORC_GUARD")) {
        ai_gotowp(self, self.wp);
    };
};

func void zs_orc_guard_loop() {
    printdebugnpc(pd_zs_frame, "ZS_Orc_Guard_Loop");
    b_gotofp(self, "FP_ORC_GUARD");
    ai_aligntofp(self);
    ai_wait(self, 1.0);
};

func void zs_orc_guard_end() {
    printdebugnpc(pd_ta_frame, "ZS_Orc_Guard_End");
    npc_clearaiqueue(self);
};

func void zs_orc_sitonfloor() {
    printdebugnpc(pd_zs_frame, "ZS_Orc_SitOnFloor");
    npc_clearaiqueue(self);
    if (npc_getbodystate(self) != bs_sit) {
        printdebugnpc(pd_zs_frame, "ZS_Orc_SitOnFloor: sitzt nicht....");
        ai_setwalkmode(self, npc_walk);
        if (!npc_isonfp(self, "FP_ORC_SIT")) {
            ai_gotowp(self, self.wp);
        };
        if (wld_isfpavailable(self, "FP_ORC_SIT_A_")) {
            ai_gotofp(self, "FP_ORC_SIT_A_");
        }
        else if (wld_isfpavailable(self, "FP_ORC_SIT_B_")) {
            ai_gotofp(self, "FP_ORC_SIT_B_");
        }
        else {
            if (wld_isfpavailable(self, "FP_ORC_SIT")) {
                ai_gotofp(self, "FP_ORC_SIT");
            };
        };
        ai_playanibs(self, "T_STAND_2_GUARDSIT", bs_sit);
    };
    orcdefaultperc();
};

func void zs_orc_sitonfloor_loop() {
    printdebugnpc(pd_zs_frame, "ZS_Orc_SitOnFloor_Loop");
    if (npc_getbodystate(self) == bs_sit) {
    };
};

func void zs_orc_sitonfloor_end() {
    printdebugnpc(pd_zs_frame, "ZS_Orc_SitOnFloor_End");
    npc_clearaiqueue(self);
    ai_playanibs(self, "T_GUARDSIT_2_STAND", bs_stand);
};

func void zs_orcslave_assessdamage() {
    printdebugnpc(pd_orc_frame, "ZS_OrcSlave_AssessDamage: Weglaufen ");
    ai_turntonpc(self, other);
    ai_dodge(self);
    ai_playani(self, "T_FRIGHTENED");
    npc_settarget(self, other);
};

func int zs_orcslave_assessdamage_loop() {
    printdebugnpc(pd_orc_frame, "ZS_OrcSlave_AssessDamage_Loop: Weglaufen ");
    if (npc_getdisttonpc(self, other) > 1200) {
        return 1;
    };
    ai_flee(self);
    return 0;
};

func void zs_orcslave_assessdamage_end() {
    printdebugnpc(pd_orc_frame, "ZS_OrcSlave_AssessDamage_End");
    npc_clearaiqueue(self);
    ai_standup(self);
    ai_continueroutine(self);
};

func void zs_orc_attack() {
    printdebugnpc(pd_orc_frame, "Orc_Attack!");
    npc_settarget(self, other);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assessmurder, b_orc_assessmurder);
    npc_percenable(self, perc_assessdefeat, b_orc_assessdefeat);
    ai_standup(self);
    ai_setwalkmode(self, npc_run);
    if (!npc_hasreadiedweapon(self)) {
        ai_equipbestmeleeweapon(self);
        ai_drawweapon(self);
    };
};

func int zs_orc_attack_loop() {
    if (!hlp_isvalidnpc(other)) {
        printdebugnpc(pd_orc_check, "Orc_Attack_Loop: ...Ziel ung*ltig!");
        return loop_end;
    };
    if (c_npcisdown(other)) {
        printdebugnpc(pd_orc_check, "Orc_Attack_Loop: Gegner tot");
        return loop_end;
    };
    if (npc_gettarget(self) && (!c_npcisdown(other))) {
        printdebugnpc(pd_orc_loop, "...Ziel vorhanden!");
        if (c_bodystatecontains(other, bs_run)) {
            printdebugnpc(pd_orc_loop, "...Ziel l*uft!");
            if (npc_getstatetime(self) > 10) {
                printdebugnpc(pd_orc_check, "...Ziel schon zu lange verfolgt!");
                ai_pointatnpc(self, other);
                b_say(self, other, "$RUNCOWARD");
                ai_stoppointat(self);
                return loop_end;
            };
        }
        else if (c_bodystatecontains(other, bs_swim) || c_bodystatecontains(other, bs_dive)) {
            return loop_end;
        }
        else {
            npc_setstatetime(self, 0);
        };
        ai_attack(self);
    }
    npc_perceiveall(self);
    if (npc_isnexttargetavailable(self)) {
        if (c_npcisdown(other)) {
            return loop_end;
        }
        else {
            npc_getnexttarget(self);
        };
    };
    return loop_continue;
};

func void zs_orc_attack_end() {
    printdebugnpc(pd_orc_frame, "ZS_MM_Attack_End");
    npc_clearaiqueue(self);
    ai_standup(self);
    ai_playani(self, "T_WARN");
    ai_wait(self, 1.0);
    ai_removeweapon(self);
    ai_continueroutine(self);
};

func int zs_orc_watchfight() {
    var int i;

    printdebugnpc(pd_orc_frame, "ZS_Orc_WatchFight");
    npc_percenable(self, perc_assessothersdamage, b_orc_cheerfight);
    npc_percenable(self, perc_assessenemy, b_orc_observeintruder);
    npc_percenable(self, perc_assessdamage, b_orc_assessdamage);
    npc_percenable(self, perc_assessmurder, b_orc_assessmurder);
    npc_percenable(self, perc_assessdefeat, b_orc_assessdefeat);
    npc_percenable(self, perc_assessthreat, b_orc_assesssomethingevil);
    npc_percenable(self, perc_assesscaster, b_orc_assesssomethingevil);
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assesswarn, b_orc_assesswarn);
    if ((other.guild == gil_orcslave) || (victim.guild == gil_orcslave)) {
        printdebugnpc(pd_orc_frame, "ZS_Orc_WatchFight: Orc-Slave -> Abbruch");
        ai_continueroutine(self);
        return 0;
    };
    if (hlp_random(20) < 4) {
        ai_pointatnpc(self, other);
        b_say(self, NULL, "$THERESAFIGHT");
    };
    ai_standup(self);
    if ((npc_getattitude(self, other) == att_hostile) || (npc_getattitude(self, other) == att_angry)) {
        printdebugnpc(pd_orc_frame, "ZS_Orc_WatchFight: other HOSTILE|ANGRY -> Angriff!");
        ai_startstate(self, zs_orc_attack, 0, "");
        return 0;
    };
    if ((npc_getattitude(self, victim) == att_hostile) || (npc_getattitude(self, victim) == att_angry)) {
        printdebugnpc(pd_orc_frame, "ZS_Orc_WatchFight: victim HOSTILE|ANGRY -> Angriff!");
        i = hlp_getinstanceid(victim);
        other = hlp_getnpc(i);
        ai_startstate(self, zs_orc_attack, 0, "");
        return 0;
    };
    if ((npc_hasreadiedrangedweapon(other) && (other.guild < gil_seperator_orc)) && ((victim.guild > gil_seperator_orc) || (victim.guild == gil_orcdog))) {
        ai_startstate(self, zs_orc_attack, 0, "");
        return 0;
    };
    npc_clearaiqueue(self);
    npc_setperctime(self, 1.0);
    ai_gotonpc(self, other);
    return 1;
};

func int zs_orc_watchfight_loop() {
    var int i;
    var int anim;

    printdebugnpc(pd_orc_loop, "ZS_Orc_WatchFight_Loop");
    if ((npc_getattitude(self, other) == att_hostile) || (npc_getattitude(self, other) == att_angry)) {
        printdebugnpc(pd_orc_frame, "ZS_Orc_WatchFight: other HOSTILE|ANGRY -> Angriff!");
        ai_startstate(self, zs_orc_attack, 0, "");
        return 0;
    };
    if ((npc_getattitude(self, victim) == att_hostile) || (npc_getattitude(self, victim) == att_angry)) {
        printdebugnpc(pd_orc_frame, "ZS_Orc_WatchFight: victim HOSTILE|ANGRY -> Angriff!");
        i = hlp_getinstanceid(victim);
        other = hlp_getnpc(i);
        ai_startstate(self, zs_orc_attack, 0, "");
        return 0;
    };
    if ((npc_getdisttonpc(self, other) > (perc_dist_watchfight + 200)) && (npc_getdisttonpc(self, other) < (perc_dist_watchfight * 2))) {
        printdebugnpc(pd_orc_loop, "ZS_Orc_WatchFight_Loop: gehe wieder naeher heran");
        npc_clearaiqueue(self);
        ai_gotonpc(self, other);
        ai_dodge(self);
        return 0;
    };
    if (npc_getdisttonpc(self, other) < (perc_dist_watchfight / 2)) {
        npc_clearaiqueue(self);
        ai_standup(self);
        ai_dodge(self);
    };
    ai_turntonpc(self, other);
    if (((((((!hlp_isvalidnpc(other)) || (!hlp_isvalidnpc(victim))) || npc_isdead(other)) || npc_isdead(victim)) || npc_isinstate(other, zs_unconscious)) || npc_isinstate(victim, zs_unconscious)) || ((((((!npc_isinfightmode(other, fmode_fist)) && (!npc_isinfightmode(other, fmode_magic))) && (!npc_hasreadiedweapon(other))) && (!npc_isinfightmode(victim, fmode_fist))) && (!npc_isinfightmode(victim, fmode_magic))) && (!npc_hasreadiedweapon(victim)))) {
        printdebugnpc(pd_orc_loop, "ZS_Orc_WatchFight_Loop: einer der Kaempfer tot oder bewusstlos");
        npc_clearaiqueue(self);
        return 1;
    };
    if (hlp_random(100) < 10) {
        printdebugnpc(pd_orc_loop, "ZS_Orc_WatchFight_Loop: Jubel");
        ai_turntonpc(self, other);
        b_say(self, NULL, "$HEYHEYHEY");
    };
    anim = hlp_random(100);
    if (anim < 5) {
        ai_playani(self, "T_DANCE_RANDOM1");
    }
    else if (anim < 10) {
        ai_playani(self, "T_ANGRY");
    }
    else if (anim < 15) {
        ai_playani(self, "T_HAPPY");
    }
    else {
        if (anim < 20) {
            ai_playani(self, "T_DCBITE");
        };
    };
    return 0;
};

func void zs_orc_watchfight_end() {
    printdebugnpc(pd_orc_frame, "ZS_Orc_WatchFight_End");
    npc_clearaiqueue(self);
    npc_setperctime(self, 3.0);
    ai_standup(self);
    ai_continueroutine(self);
};

func void ta_orc_stonemill(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_orc_stonemill, waypoint);
};

func void ta_orc_stomper(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_orc_stomper, waypoint);
};

func void ta_orc_drum(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_orc_drum, waypoint);
};

func void ta_orc_sleep(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_orc_sleep, waypoint);
};

func void ta_orc_pray(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_orc_pray, waypoint);
};

func void ta_orc_eat(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_orc_eat, waypoint);
};

func void ta_orc_drinkalcohol(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_orc_drinkalcohol, waypoint);
};

func void ta_orc_eatanddrink(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_orc_eatanddrink, waypoint);
};

func void ta_orc_speech(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_orc_speech, waypoint);
};

func void ta_orc_sitonfloor(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_orc_sitonfloor, waypoint);
};

func void ta_orc_dance(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_orc_dance, waypoint);
};

func void ta_orc_walkaround(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_orc_walkaround, waypoint);
};

func void ta_orc_gotowp(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_orc_gotowp, waypoint);
};

func void ta_orc_guardsleepy(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_orc_guardsleepy, waypoint);
};

func void ta_orc_guard(var int start_h, var int start_m, var int stop_h, var int stop_m, var string waypoint) {
    ta_min(self, start_h, start_m, stop_h, stop_m, zs_orc_guard, waypoint);
};

prototype orc_testtype(c_npc) {
    name = "Orc Prototype";
    guild = gil_none;
    level = 1;
    attribute[atr_strength] /*4*/ = 8;
    attribute[atr_dexterity] /*5*/ = 8;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 90;
    attribute[atr_hitpoints] /*0*/ = 90;
    protection[prot_edge] /*2*/ = 5;
    protection[prot_blunt] /*1*/ = 5;
    protection[prot_point] /*6*/ = 5;
    protection[prot_fire] /*3*/ = 5;
    protection[prot_magic] /*5*/ = 5;
    senses = (sense_hear | sense_see) | sense_smell;
    senses_range = 2000;
};

instance orc01(orc_testtype) {
    name = "Orc_01";
    npctype = npctype_main;
    guild = gil_orcwarrior;
    level = 10;
    voice = 6;
    attribute[atr_strength] /*4*/ = 100;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 99;
    attribute[atr_hitpoints] /*0*/ = 99;
    mdl_setvisual(orc01, "orc.mds");
    mdl_setvisualbody(orc01, "Orc_BodyWarrior", default, default, "Orc_Head", default, default, -1);
    b_scale(orc01);
    fight_tactic = fai_orc;
    createinvitem(orc01, itmw2horcaxe04);
    equipitem(orc01, itmw2horcaxe04 /*4456*/);
    daily_routine = rtn_orc01;
};

instance orc02(orc_testtype) {
    name = "Orc_02";
    guild = gil_orcwarrior;
    level = 10;
    voice = 6;
    attribute[atr_strength] /*4*/ = 100;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 99;
    attribute[atr_hitpoints] /*0*/ = 99;
    mdl_setvisual(orc02, "orc.mds");
    mdl_setvisualbody(orc02, "Orc_BodyWarrior", default, default, "Orc_Head", default, default, -1);
    b_scale(orc02);
    fight_tactic = fai_orc;
    createinvitem(orc02, itmw2horcaxe04);
    equipitem(orc02, itmw2horcaxe04 /*4456*/);
    daily_routine = rtn_orc02;
};

instance orc03(orc_testtype) {
    name = "Orc_03";
    guild = gil_orcwarrior;
    level = 10;
    voice = 6;
    attribute[atr_strength] /*4*/ = 100;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 99;
    attribute[atr_hitpoints] /*0*/ = 99;
    mdl_setvisual(orc03, "orc.mds");
    mdl_setvisualbody(orc03, "Orc_BodyWarrior", default, default, "Orc_Head", default, default, -1);
    b_scale(orc03);
    fight_tactic = fai_orc;
    createinvitem(orc03, itmw2horcaxe04);
    equipitem(orc03, itmw2horcaxe04 /*4456*/);
    daily_routine = rtn_orc03;
};

instance orc04(orc_testtype) {
    name = "Orc_04";
    guild = gil_orcwarrior;
    level = 10;
    voice = 6;
    attribute[atr_strength] /*4*/ = 100;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 99;
    attribute[atr_hitpoints] /*0*/ = 99;
    mdl_setvisual(orc04, "orc.mds");
    mdl_setvisualbody(orc04, "Orc_BodyWarrior", default, default, "Orc_Head", default, default, -1);
    b_scale(orc04);
    fight_tactic = fai_orc;
    createinvitem(orc04, itmw2horcaxe04);
    equipitem(orc04, itmw2horcaxe04 /*4456*/);
    daily_routine = rtn_orc04;
};

instance orc05(orc_testtype) {
    name = "Orc_05";
    guild = gil_orcwarrior;
    level = 10;
    voice = 6;
    attribute[atr_strength] /*4*/ = 100;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 99;
    attribute[atr_hitpoints] /*0*/ = 99;
    mdl_setvisual(orc05, "orc.mds");
    mdl_setvisualbody(orc05, "Orc_BodyWarrior", default, default, "Orc_Head", default, default, -1);
    b_scale(orc05);
    fight_tactic = fai_orc;
    createinvitem(orc05, itmw2horcaxe04);
    equipitem(orc05, itmw2horcaxe04 /*4456*/);
    daily_routine = rtn_orc05;
};

instance orc06(orc_testtype) {
    name = "Orc_06";
    guild = gil_orcwarrior;
    level = 10;
    voice = 6;
    attribute[atr_strength] /*4*/ = 100;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 99;
    attribute[atr_hitpoints] /*0*/ = 99;
    mdl_setvisual(orc06, "orc.mds");
    mdl_setvisualbody(orc06, "Orc_BodyWarrior", default, default, "Orc_Head", default, default, -1);
    b_scale(orc06);
    fight_tactic = fai_orc;
    createinvitem(orc06, itmw2horcaxe04);
    equipitem(orc06, itmw2horcaxe04 /*4456*/);
    daily_routine = rtn_orc06;
};

instance orc07(orc_testtype) {
    name = "Orc_07";
    guild = gil_orcwarrior;
    level = 10;
    voice = 6;
    attribute[atr_strength] /*4*/ = 100;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 99;
    attribute[atr_hitpoints] /*0*/ = 99;
    mdl_setvisual(orc07, "orc.mds");
    mdl_setvisualbody(orc07, "Orc_BodyWarrior", default, default, "Orc_Head", default, default, -1);
    b_scale(orc07);
    fight_tactic = fai_orc;
    createinvitem(orc07, itmw2horcaxe04);
    equipitem(orc07, itmw2horcaxe04 /*4456*/);
    daily_routine = rtn_orc07;
};

instance orc08(orc_testtype) {
    name = "Orc_08";
    guild = gil_orcwarrior;
    level = 10;
    voice = 6;
    attribute[atr_strength] /*4*/ = 100;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 99;
    attribute[atr_hitpoints] /*0*/ = 99;
    mdl_setvisual(orc08, "orc.mds");
    mdl_setvisualbody(orc08, "Orc_BodyWarrior", default, default, "Orc_Head", default, default, -1);
    b_scale(orc08);
    fight_tactic = fai_orc;
    createinvitem(orc08, itmw2horcaxe04);
    equipitem(orc08, itmw2horcaxe04 /*4456*/);
    daily_routine = rtn_orc08;
};

instance orc09(orc_testtype) {
    name = "Orc_09";
    npctype = npctype_guard;
    guild = gil_orcwarrior;
    level = 10;
    voice = 6;
    attribute[atr_strength] /*4*/ = 100;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 99;
    attribute[atr_hitpoints] /*0*/ = 99;
    mdl_setvisual(orc09, "orc.mds");
    mdl_setvisualbody(orc09, "Orc_BodyWarrior", default, default, "Orc_Head", default, default, -1);
    b_scale(orc09);
    fight_tactic = fai_orc;
    createinvitem(orc09, itmw2horcaxe04);
    equipitem(orc09, itmw2horcaxe04 /*4456*/);
    daily_routine = rtn_orc09;
};

instance orc10(orc_testtype) {
    name = "Orc_10";
    npctype = npctype_guard;
    guild = gil_orcwarrior;
    level = 10;
    voice = 6;
    attribute[atr_strength] /*4*/ = 100;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 99;
    attribute[atr_hitpoints] /*0*/ = 99;
    mdl_setvisual(orc10, "orc.mds");
    mdl_setvisualbody(orc10, "Orc_BodyWarrior", default, default, "Orc_Head", default, default, -1);
    b_scale(orc10);
    fight_tactic = fai_orc;
    createinvitem(orc10, itmw2horcaxe04);
    equipitem(orc10, itmw2horcaxe04 /*4456*/);
    daily_routine = rtn_orc10;
};

instance orc11(orc_testtype) {
    name = "Orc_11";
    npctype = npctype_guard;
    guild = gil_orcwarrior;
    level = 10;
    voice = 6;
    attribute[atr_strength] /*4*/ = 100;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 99;
    attribute[atr_hitpoints] /*0*/ = 99;
    mdl_setvisual(orc11, "orc.mds");
    mdl_setvisualbody(orc11, "Orc_BodyWarrior", default, default, "Orc_Head", default, default, -1);
    b_scale(orc11);
    fight_tactic = fai_orc;
    createinvitem(orc11, itmw2horcaxe04);
    createinvitem(orc11, itmialarmhorn);
    equipitem(orc11, itmw2horcaxe04 /*4456*/);
    daily_routine = rtn_orc11;
};

instance orc12(orc_testtype) {
    name = "Orc_12";
    npctype = npctype_guard;
    guild = gil_orcwarrior;
    level = 10;
    voice = 6;
    attribute[atr_strength] /*4*/ = 100;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 99;
    attribute[atr_mana] /*2*/ = 99;
    attribute[atr_hitpoints_max] /*1*/ = 99;
    attribute[atr_hitpoints] /*0*/ = 99;
    mdl_setvisual(orc12, "orc.mds");
    mdl_setvisualbody(orc12, "Orc_BodyWarrior", default, default, "Orc_Head", default, default, -1);
    b_scale(orc12);
    fight_tactic = fai_orc;
    createinvitem(orc12, itmw2horcaxe04);
    createinvitem(orc12, itarrunelight);
    createinvitem(orc12, itarruneheal);
    createinvitem(orc12, itarrunechainlightning);
    createinvitem(orc12, itarruneicewave);
    createinvitem(orc12, itarrunethunderball);
    equipitem(orc12, itmw2horcaxe04 /*4456*/);
    start_aistate = zs_orc_guard;
};

func void rtn_orc01() {
    ta_orc_eatanddrink(23, 0, 12, 0, "OW_ORC_PATH_04");
    ta_orc_eatanddrink(12, 0, 23, 0, "OW_ORC_PATH_04");
};

func void rtn_orc02() {
    ta_orc_sitonfloor(23, 0, 12, 0, "OW_ORC_HUT_02");
    ta_orc_sitonfloor(12, 0, 23, 0, "OW_ORC_HUT_02");
};

func void rtn_orc03() {
    ta_orc_sitonfloor(23, 0, 12, 0, "OW_ORC_HUT_01");
    ta_orc_sitonfloor(12, 0, 23, 0, "OW_ORC_HUT_01");
};

func void rtn_orc04() {
    ta_orc_eat(23, 0, 12, 0, "OW_ORC_PLACE_01");
    ta_orc_eat(12, 0, 23, 0, "OW_ORC_PLACE_01");
};

func void rtn_orc05() {
    ta_orc_drinkalcohol(23, 0, 12, 0, "OW_ORC_PLACE_01");
    ta_orc_drinkalcohol(12, 0, 23, 0, "OW_ORC_PLACE_01");
};

func void rtn_orc06() {
    ta_orc_walkaround(23, 0, 12, 0, "OW_ORC_PATH_03");
    ta_orc_walkaround(12, 0, 23, 0, "OW_ORC_PATH_03");
};

func void rtn_orc07() {
    ta_orc_speech(23, 0, 12, 0, "ORC_PLACE_02");
    ta_orc_speech(12, 0, 23, 0, "ORC_PLACE_02");
};

func void rtn_orc08() {
    ta_orc_eatanddrink(23, 0, 12, 0, "OW_ORC_PLACE_01");
    ta_orc_eatanddrink(12, 0, 23, 0, "OW_ORC_PLACE_01");
};

func void rtn_orc09() {
    ta_orc_guardsleepy(23, 0, 12, 0, "ORC_GUARD_SLEEP");
    ta_orc_guardsleepy(12, 0, 23, 0, "ORC_GUARD_SLEEP");
};

func void rtn_orc10() {
    ta_orc_guardsleepy(23, 0, 12, 0, "ORC_GUARD_SLEEP");
    ta_orc_guardsleepy(12, 0, 23, 0, "ORC_GUARD_SLEEP");
};

func void rtn_orc11() {
    ta_orc_guard(23, 0, 12, 0, "OW_ORC_BRIDGE_GUARD");
    ta_orc_guard(12, 0, 23, 0, "OW_ORC_BRIDGE_GUARD");
};

func void rtn_orc12() {
    ta_orc_guard(23, 0, 12, 0, "ORC_BRIDGE_02");
    ta_orc_guard(12, 0, 23, 0, "ORC_BRIDGE_02");
};

func void startup_world_orcs() {
    b_initorcattitudes(3);
    wld_insertnpc(orc11 /*7081*/, "OW_ORC_BRIDGE_GUARD");
    wld_insertnpc(orc12 /*7082*/, "ORC_BRIDGE_02");
};

prototype orcslave_testtype(c_npc) {
    name = "OrcSlave Prototype";
    guild = gil_orcslave;
    level = 1;
    attribute[atr_strength] /*4*/ = 8;
    attribute[atr_dexterity] /*5*/ = 8;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 90;
    attribute[atr_hitpoints] /*0*/ = 90;
    protection[prot_edge] /*2*/ = 5;
    protection[prot_blunt] /*1*/ = 5;
    protection[prot_point] /*6*/ = 5;
    protection[prot_fire] /*3*/ = 5;
    protection[prot_magic] /*5*/ = 5;
    senses = sense_hear | sense_see;
    senses_range = 2000;
};

instance slave0(orcslave_testtype) {
    name = "Slave0";
    guild = gil_orcslave;
    level = 10;
    voice = 0;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 40;
    attribute[atr_hitpoints] /*0*/ = 40;
    mdl_setvisual(slave0, "orc.mds");
    mdl_setvisualbody(slave0, "Orc_BodyWarrior", default, default, "Orc_Head", default, default, -1);
    b_scale(slave0);
    fight_tactic = fai_orc;
    daily_routine = rtn_orcslavea;
};

instance slave1(orcslave_testtype) {
    name = "Slave1";
    guild = gil_orcslave;
    level = 10;
    voice = 0;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 40;
    attribute[atr_hitpoints] /*0*/ = 40;
    mdl_setvisual(slave1, "orc.mds");
    mdl_setvisualbody(slave1, "Orc_BodyWarrior", default, default, "Orc_Head", default, default, -1);
    b_scale(slave1);
    fight_tactic = fai_orc;
    daily_routine = rtn_orcslaveb;
};

instance slave2(orcslave_testtype) {
    name = "Slave1";
    guild = gil_orcslave;
    level = 10;
    voice = 0;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 40;
    attribute[atr_hitpoints] /*0*/ = 40;
    mdl_setvisual(slave2, "orc.mds");
    mdl_setvisualbody(slave2, "Orc_BodyWarrior", default, default, "Orc_Head", default, default, -1);
    b_scale(slave2);
    fight_tactic = fai_orc;
    daily_routine = rtn_orcslavea;
};

func void rtn_orcslavea() {
    orcslaveperc();
    ta_orc_sitonfloor(22, 30, 5, 0, "ORC_WAY_SIT_01");
    ta_orc_stonemill(5, 0, 12, 0, "ORC_WAY_09");
    ta_orc_eat(12, 0, 12, 30, "ORC_WAY_09");
    ta_orc_stonemill(12, 30, 20, 0, "ORC_WAY_09");
    ta_orc_eat(20, 0, 20, 30, "ORC_WAY_09");
    ta_orc_stonemill(20, 30, 22, 30, "ORC_WAY_09");
};

func void rtn_orcslaveb() {
    orcslaveperc();
    ta_orc_sitonfloor(22, 30, 5, 0, "ORC_WAY_LISTEN_01");
    ta_orc_stomper(5, 0, 12, 0, "ORC_WAY_08");
    ta_orc_eat(12, 0, 12, 30, "ORC_WAY_08");
    ta_orc_stomper(12, 30, 20, 0, "ORC_WAY_08");
    ta_orc_eat(20, 0, 20, 30, "ORC_WAY_08");
    ta_orc_stomper(20, 30, 22, 30, "ORC_WAY_08");
};

instance bau_900_ricelord(npc_default) {
    name = "Ëîðä";
    npctype = npctype_guard;
    guild = gil_bau;
    level = 10;
    voice = 12;
    id = 900;
    attribute[atr_strength] /*4*/ = 50;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 170;
    attribute[atr_hitpoints] /*0*/ = 170;
    mdl_setvisual(bau_900_ricelord, "HUMANS.MDS");
    mdl_applyoverlaymds(bau_900_ricelord, "Humans_Arrogance.mds");
    mdl_setvisualbody(bau_900_ricelord, "Hum_Body_CookSmith", 1, 1, "Hum_Head_FatBald", 91, 0, -1);
    b_scale(bau_900_ricelord);
    mdl_setmodelfatness(bau_900_ricelord, 2.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(bau_900_ricelord, npc_talent_1h, 1);
    createinvitem(bau_900_ricelord, itfowine);
    createinvitem(bau_900_ricelord, itmi_alchemy_moleratlubric_01);
    createinvitems(bau_900_ricelord, itforice, 10);
    createinvitems(bau_900_ricelord, itminugget, 40);
    equipitem(bau_900_ricelord, heerscherstab /*4988*/);
    equipitem(bau_900_ricelord, ring_des_lebens /*4944*/);
    daily_routine = rtn_start_900;
};

func void rtn_start_900() {
    ta_boss(7, 0, 20, 0, "NC_RICELORD");
    ta_sitaround(20, 0, 24, 0, "NC_RICELORD_SIT");
    ta_sleep(24, 0, 7, 0, "NC_RICEBUNKER_10");
};

instance bau_901_horatio(npc_default) {
    name = "Ãîðàöèî";
    npctype = npctype_main;
    guild = gil_bau;
    level = 8;
    voice = 9;
    id = 901;
    attribute[atr_strength] /*4*/ = 45;
    attribute[atr_dexterity] /*5*/ = 11;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 136;
    attribute[atr_hitpoints] /*0*/ = 136;
    mdl_setvisual(bau_901_horatio, "HUMANS.MDS");
    mdl_setvisualbody(bau_901_horatio, "hum_body_Naked0", 2, 1, "Hum_Head_Fighter", 99, 2, -1);
    b_scale(bau_901_horatio);
    mdl_setmodelfatness(bau_901_horatio, 0.0);
    fight_tactic = fai_human_coward;
    npc_settalentskill(bau_901_horatio, npc_talent_1h, 1);
    createinvitem(bau_901_horatio, itmi_stuff_plate_01);
    createinvitem(bau_901_horatio, itfobooze);
    createinvitems(bau_901_horatio, itforice, 5);
    equipitem(bau_901_horatio, itmw_1h_scythe_01 /*4392*/);
    daily_routine = rtn_start_901;
};

func void rtn_start_901() {
    ta_sitcampfire(20, 0, 6, 0, "NC_PATH_PEASANT_OUTSIDE10");
    ta_pickrice(6, 0, 20, 0, "NC_PATH78_A");
};

instance bau_902_pock(npc_default) {
    name = "Ïîê";
    npctype = npctype_main;
    guild = gil_bau;
    level = 4;
    voice = 4;
    id = 902;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 88;
    attribute[atr_hitpoints] /*0*/ = 88;
    mdl_setvisual(bau_902_pock, "HUMANS.MDS");
    mdl_applyoverlaymds(bau_902_pock, "Humans_Tired.mds");
    mdl_setvisualbody(bau_902_pock, "hum_body_Naked0", 2, 1, "Hum_Head_Pony", 3, 2, -1);
    b_scale(bau_902_pock);
    mdl_setmodelfatness(bau_902_pock, 0.0);
    fight_tactic = fai_human_coward;
    npc_settalentskill(bau_902_pock, npc_talent_1h, 1);
    createinvitem(bau_902_pock, itmi_stuff_plate_01);
    createinvitem(bau_902_pock, itfobooze);
    createinvitems(bau_902_pock, itforice, 6);
    equipitem(bau_902_pock, itmw_1h_scythe_01 /*4392*/);
    daily_routine = rtn_start_902;
};

func void rtn_start_902() {
    ta_sleep(20, 15, 7, 15, "NC_PATH_PEASANT_OUTSIDE2");
    ta_pickrice(7, 15, 20, 15, "NC_PATH54_02");
};

instance bau_903_rufus(npc_default) {
    name = "Ðóôóñ";
    npctype = npctype_main;
    guild = gil_bau;
    level = 4;
    voice = 2;
    id = 903;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 88;
    attribute[atr_hitpoints] /*0*/ = 88;
    mdl_setvisual(bau_903_rufus, "HUMANS.MDS");
    mdl_applyoverlaymds(bau_903_rufus, "Humans_Tired.mds");
    mdl_setvisualbody(bau_903_rufus, "hum_body_Naked0", 2, 2, "Hum_Head_Bald", 2, 1, -1);
    b_scale(bau_903_rufus);
    mdl_setmodelfatness(bau_903_rufus, 0.0);
    fight_tactic = fai_human_coward;
    npc_settalentskill(bau_903_rufus, npc_talent_1h, 1);
    createinvitems(bau_903_rufus, itforice, 3);
    equipitem(bau_903_rufus, itmw_1h_scythe_01 /*4392*/);
    daily_routine = rtn_start_903;
};

func void rtn_start_903() {
    ta_pickrice(7, 10, 20, 10, "NC_PATH83_MOVEMENT");
    ta_sitcampfire(20, 10, 7, 10, "NC_PATH_PEASANT_OUTSIDE5");
};

instance bau_904_bauer(npc_default) {
    name = name_bauer;
    guild = gil_bau;
    level = 2;
    flags = 0;
    voice = 9;
    id = 904;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 88;
    attribute[atr_hitpoints] /*0*/ = 88;
    mdl_setvisual(bau_904_bauer, "HUMANS.MDS");
    mdl_applyoverlaymds(bau_904_bauer, "Humans_Tired.mds");
    mdl_setvisualbody(bau_904_bauer, "hum_body_Naked0", 2, 1, "Hum_Head_Thief", 5, 1, -1);
    b_scale(bau_904_bauer);
    mdl_setmodelfatness(bau_904_bauer, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(bau_904_bauer, itmi_stuff_plate_01);
    createinvitems(bau_904_bauer, itforice, 4);
    equipitem(bau_904_bauer, itmw_1h_scythe_01 /*4392*/);
    daily_routine = rtn_start_904;
};

func void rtn_start_904() {
    ta_sleep(20, 0, 7, 0, "NC_PATH_PEASANT3");
    ta_washself(7, 0, 7, 20, "NC_PATH_PEASANT5");
    ta_pickrice(7, 20, 20, 0, "NC_DAM_BOTTOM");
};

instance bau_905_bauer(npc_default) {
    name = name_bauer;
    npctype = npctype_ambient;
    guild = gil_bau;
    level = 2;
    voice = 2;
    id = 905;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 88;
    attribute[atr_hitpoints] /*0*/ = 88;
    mdl_setvisual(bau_905_bauer, "HUMANS.MDS");
    mdl_applyoverlaymds(bau_905_bauer, "Humans_Tired.mds");
    mdl_setvisualbody(bau_905_bauer, "hum_body_Naked0", 3, 1, "Hum_Head_Pony", 5, 1, -1);
    b_scale(bau_905_bauer);
    mdl_setmodelfatness(bau_905_bauer, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(bau_905_bauer, itmi_stuff_plate_01);
    createinvitems(bau_905_bauer, itforice, 5);
    equipitem(bau_905_bauer, itmw_1h_scythe_01 /*4392*/);
    daily_routine = rtn_start_905;
};

func void rtn_start_905() {
    ta_sleep(20, 5, 7, 5, "NC_PATH_PEASANT3");
    ta_washself(7, 5, 7, 25, "NC_PATH_PEASANT5");
    ta_pickrice(7, 25, 20, 5, "NC_PATH69");
};

instance bau_907_bauer(npc_default) {
    name = name_bauer;
    npctype = npctype_ambient;
    guild = gil_bau;
    level = 2;
    voice = 9;
    id = 907;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 88;
    attribute[atr_hitpoints] /*0*/ = 88;
    mdl_setvisual(bau_907_bauer, "HUMANS.MDS");
    mdl_applyoverlaymds(bau_907_bauer, "Humans_Tired.mds");
    mdl_setvisualbody(bau_907_bauer, "hum_body_Naked0", 2, 1, "Hum_Head_Bald", 4, 1, -1);
    b_scale(bau_907_bauer);
    mdl_setmodelfatness(bau_907_bauer, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(bau_907_bauer, itmi_stuff_plate_01);
    createinvitem(bau_907_bauer, itfobooze);
    createinvitems(bau_907_bauer, itforice, 4);
    equipitem(bau_907_bauer, itmw_1h_scythe_01 /*4392*/);
    daily_routine = rtn_start_907;
};

func void rtn_start_907() {
    ta_sleep(20, 10, 7, 10, "NC_PATH_PEASANT3");
    ta_pickrice(7, 10, 20, 10, "NC_PATH82");
};

instance bau_908_bauer(npc_default) {
    name = name_bauer;
    npctype = npctype_ambient;
    guild = gil_bau;
    level = 2;
    voice = 4;
    id = 908;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 88;
    attribute[atr_hitpoints] /*0*/ = 88;
    mdl_setvisual(bau_908_bauer, "HUMANS.MDS");
    mdl_applyoverlaymds(bau_908_bauer, "Humans_Tired.mds");
    mdl_setvisualbody(bau_908_bauer, "hum_body_Naked0", 2, 2, "Hum_Head_Pony", 1, 2, -1);
    b_scale(bau_908_bauer);
    mdl_setmodelfatness(bau_908_bauer, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(bau_908_bauer, itmi_stuff_plate_01);
    createinvitem(bau_908_bauer, itfobooze);
    createinvitems(bau_908_bauer, itforice, 5);
    equipitem(bau_908_bauer, itmw_1h_scythe_01 /*4392*/);
    daily_routine = rtn_start_908;
};

func void rtn_start_908() {
    ta_sleep(20, 15, 7, 15, "NC_PATH_PEASANT3");
    ta_pickrice(7, 15, 20, 15, "NC_PATH69");
};

instance bau_912_jeremiah(npc_default) {
    name = "Èåðåìèÿ";
    npctype = npctype_main;
    guild = gil_bau;
    level = 7;
    voice = 4;
    id = 912;
    attribute[atr_strength] /*4*/ = 35;
    attribute[atr_dexterity] /*5*/ = 13;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 124;
    attribute[atr_hitpoints] /*0*/ = 124;
    mdl_setvisual(bau_912_jeremiah, "HUMANS.MDS");
    mdl_applyoverlaymds(bau_912_jeremiah, "Humans_Tired.mds");
    mdl_setvisualbody(bau_912_jeremiah, "hum_body_Naked0", 3, 1, "Hum_Head_Bald", 80, 2, -1);
    b_scale(bau_912_jeremiah);
    mdl_setmodelfatness(bau_912_jeremiah, 0.0);
    fight_tactic = fai_human_coward;
    npc_settalentskill(bau_912_jeremiah, npc_talent_1h, 1);
    createinvitem(bau_912_jeremiah, itmi_alchemy_alcohol_01);
    createinvitem(bau_912_jeremiah, itmi_stuff_cup_01);
    createinvitems(bau_912_jeremiah, itforice, 7);
    createinvitems(bau_912_jeremiah, itminugget, 15);
    createinvitems(bau_912_jeremiah, itfobooze, 5);
    equipitem(bau_912_jeremiah, itmw_1h_sword_short_01 /*4386*/);
    daily_routine = rtn_start_912;
};

func void rtn_start_912() {
    ta_sleep(22, 0, 8, 0, "NC_TAVERN_BACKROOM05");
    ta_potionalchemy(8, 0, 22, 0, "NC_TAVERN_BACKROOM01");
};

instance bau_914_bauer(npc_default) {
    name = name_bauer;
    npctype = npctype_ambient;
    guild = gil_bau;
    level = 2;
    voice = 9;
    id = 914;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 11;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(bau_914_bauer, "HUMANS.MDS");
    mdl_applyoverlaymds(bau_914_bauer, "Humans_Tired.mds");
    mdl_setvisualbody(bau_914_bauer, "hum_body_Naked0", 3, 2, "Hum_Head_Bald", 1, 1, -1);
    b_scale(bau_914_bauer);
    mdl_setmodelfatness(bau_914_bauer, 0.0);
    fight_tactic = fai_human_coward;
    createinvitems(bau_914_bauer, itforice, 6);
    equipitem(bau_914_bauer, itmw_1h_scythe_01 /*4392*/);
    daily_routine = rtn_start_914;
};

func void rtn_start_914() {
    ta_sleep(20, 20, 7, 20, "NC_PATH_PEASANT2");
    ta_pickrice(7, 20, 20, 20, "NC_PATH81");
};

instance bau_915_bauer(npc_default) {
    name = name_bauer;
    npctype = npctype_ambient;
    guild = gil_bau;
    level = 2;
    voice = 4;
    id = 915;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 11;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(bau_915_bauer, "HUMANS.MDS");
    mdl_applyoverlaymds(bau_915_bauer, "Humans_Tired.mds");
    mdl_setvisualbody(bau_915_bauer, "hum_body_Naked0", 2, 1, "Hum_Head_Fighter", 84, 2, -1);
    b_scale(bau_915_bauer);
    mdl_setmodelfatness(bau_915_bauer, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(bau_915_bauer, itmi_stuff_plate_01);
    createinvitem(bau_915_bauer, itfobooze);
    createinvitems(bau_915_bauer, itforice, 4);
    equipitem(bau_915_bauer, itmw_1h_scythe_01 /*4392*/);
    daily_routine = rtn_start_915;
};

func void rtn_start_915() {
    ta_sleep(20, 25, 7, 25, "NC_PATH_PEASANT2");
    ta_pickrice(7, 25, 20, 25, "NC_PATH80");
};

instance bau_916_bauer(npc_default) {
    name = name_bauer;
    npctype = npctype_ambient;
    guild = gil_bau;
    level = 2;
    voice = 2;
    id = 916;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 11;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(bau_916_bauer, "HUMANS.MDS");
    mdl_applyoverlaymds(bau_916_bauer, "Humans_Tired.mds");
    mdl_setvisualbody(bau_916_bauer, "hum_body_Naked0", 2, 1, "Hum_Head_Pony", 3, 2, -1);
    b_scale(bau_916_bauer);
    mdl_setmodelfatness(bau_916_bauer, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(bau_916_bauer, itmi_stuff_plate_01);
    createinvitem(bau_916_bauer, itfobooze);
    createinvitems(bau_916_bauer, itforice, 3);
    equipitem(bau_916_bauer, itmw_1h_scythe_01 /*4392*/);
    daily_routine = rtn_start_916;
};

func void rtn_start_916() {
    ta_sleep(20, 30, 7, 30, "NC_PATH_PEASANT2");
    ta_pickrice(7, 30, 20, 30, "NC_PATH81");
};

instance bau_917_bauer(npc_default) {
    name = name_bauer;
    npctype = npctype_ambient;
    guild = gil_bau;
    level = 2;
    voice = 9;
    id = 917;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 11;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(bau_917_bauer, "HUMANS.MDS");
    mdl_applyoverlaymds(bau_917_bauer, "Humans_Tired.mds");
    mdl_setvisualbody(bau_917_bauer, "hum_body_Naked0", 2, 2, "Hum_Head_Bald", 2, 1, -1);
    b_scale(bau_917_bauer);
    mdl_setmodelfatness(bau_917_bauer, 0.0);
    fight_tactic = fai_human_coward;
    createinvitems(bau_917_bauer, itforice, 5);
    equipitem(bau_917_bauer, itmw_1h_scythe_01 /*4392*/);
    daily_routine = rtn_start_917;
};

func void rtn_start_917() {
    ta_sleep(20, 35, 7, 35, "NC_PATH_PEASANT_SLEEP");
    ta_pickrice(7, 35, 20, 35, "NC_PATH80");
};

instance bau_919_bauer(npc_default) {
    name = name_bauer;
    npctype = npctype_ambient;
    guild = gil_bau;
    level = 2;
    voice = 4;
    id = 919;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 11;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(bau_919_bauer, "HUMANS.MDS");
    mdl_applyoverlaymds(bau_919_bauer, "Humans_Tired.mds");
    mdl_setvisualbody(bau_919_bauer, "hum_body_Naked0", 3, 1, "Hum_Head_Pony", 78, 1, -1);
    b_scale(bau_919_bauer);
    mdl_setmodelfatness(bau_919_bauer, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(bau_919_bauer, itmi_stuff_plate_01);
    createinvitems(bau_919_bauer, itforice, 4);
    equipitem(bau_919_bauer, itmw_1h_scythe_01 /*4392*/);
    daily_routine = rtn_start_919;
};

func void rtn_start_919() {
    ta_sleep(20, 40, 7, 40, "NC_PATH_PEASANT");
    ta_pickrice(7, 40, 20, 40, "NC_PATH54");
};

instance bau_920_bauer(npc_default) {
    name = name_bauer;
    npctype = npctype_ambient;
    guild = gil_bau;
    level = 2;
    voice = 2;
    id = 920;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 11;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(bau_920_bauer, "HUMANS.MDS");
    mdl_applyoverlaymds(bau_920_bauer, "Humans_Tired.mds");
    mdl_setvisualbody(bau_920_bauer, "hum_body_Naked0", 3, 1, "Hum_Head_Thief", 2, 1, -1);
    b_scale(bau_920_bauer);
    mdl_setmodelfatness(bau_920_bauer, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(bau_920_bauer, itfobooze);
    createinvitems(bau_920_bauer, itforice, 4);
    equipitem(bau_920_bauer, itmw_1h_scythe_01 /*4392*/);
    daily_routine = rtn_start_920;
};

func void rtn_start_920() {
    ta_sleep(20, 45, 7, 45, "NC_PATH_PEASANT");
    ta_pickrice(7, 45, 20, 45, "NC_PATH54");
};

instance bau_921_bauer(npc_default) {
    name = name_bauer;
    npctype = npctype_ambient;
    guild = gil_bau;
    level = 2;
    voice = 4;
    id = 921;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 11;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(bau_921_bauer, "HUMANS.MDS");
    mdl_applyoverlaymds(bau_921_bauer, "Humans_Tired.mds");
    mdl_setvisualbody(bau_921_bauer, "hum_body_Naked0", 2, 1, "Hum_Head_Bald", 56, 1, -1);
    b_scale(bau_921_bauer);
    mdl_setmodelfatness(bau_921_bauer, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(bau_921_bauer, itfobooze);
    createinvitem(bau_921_bauer, itmi_stuff_plate_01);
    createinvitems(bau_921_bauer, itforice, 6);
    equipitem(bau_921_bauer, itmw_1h_scythe_01 /*4392*/);
    daily_routine = rtn_start_921;
};

func void rtn_start_921() {
    ta_sleep(20, 50, 7, 50, "NC_PATH_PEASANT");
    ta_pickrice(7, 50, 20, 50, "NC_PATH82");
};

instance bau_922_bauer(npc_default) {
    name = name_bauer;
    npctype = npctype_ambient;
    guild = gil_bau;
    level = 2;
    voice = 4;
    id = 922;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 11;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(bau_922_bauer, "HUMANS.MDS");
    mdl_applyoverlaymds(bau_922_bauer, "Humans_Tired.mds");
    mdl_setvisualbody(bau_922_bauer, "hum_body_Naked0", 2, 2, "Hum_Head_Pony", 51, 2, -1);
    b_scale(bau_922_bauer);
    mdl_setmodelfatness(bau_922_bauer, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(bau_922_bauer, itfobooze);
    createinvitem(bau_922_bauer, itmi_stuff_plate_01);
    createinvitems(bau_922_bauer, itforice, 4);
    equipitem(bau_922_bauer, itmw_1h_scythe_01 /*4392*/);
    daily_routine = rtn_start_922;
};

func void rtn_start_922() {
    ta_sitcampfire(20, 0, 7, 0, "NC_PATH59");
    ta_washself(7, 0, 7, 18, "NC_PATH_PEASANT_OUTSIDE8_WASH");
    ta_pickrice(7, 18, 20, 0, "NC_PATH82");
};

instance bau_923_bauer(npc_default) {
    name = name_bauer;
    npctype = npctype_ambient;
    guild = gil_bau;
    level = 2;
    voice = 2;
    id = 923;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 11;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(bau_923_bauer, "HUMANS.MDS");
    mdl_applyoverlaymds(bau_923_bauer, "Humans_Tired.mds");
    mdl_setvisualbody(bau_923_bauer, "hum_body_Naked0", 3, 1, "Hum_Head_Bald", 5, 2, -1);
    b_scale(bau_923_bauer);
    mdl_setmodelfatness(bau_923_bauer, 0.0);
    fight_tactic = fai_human_coward;
    createinvitems(bau_923_bauer, itforice, 3);
    equipitem(bau_923_bauer, itmw_1h_scythe_01 /*4392*/);
    daily_routine = rtn_start_923;
};

func void rtn_start_923() {
    ta_sitcampfire(20, 5, 7, 5, "NC_PATH_PEASANT_OUTSIDE20");
    ta_washself(7, 5, 7, 23, "NC_PATH_PEASANT_OUTSIDE8_WASH");
    ta_pickrice(7, 23, 20, 5, "NC_PATH83_MOVEMENT");
};

instance bau_924_bauer(npc_default) {
    name = name_bauer;
    npctype = npctype_ambient;
    guild = gil_bau;
    level = 2;
    voice = 9;
    id = 924;
    attribute[atr_strength] /*4*/ = 13;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 64;
    attribute[atr_hitpoints] /*0*/ = 64;
    mdl_setvisual(bau_924_bauer, "HUMANS.MDS");
    mdl_applyoverlaymds(bau_924_bauer, "Humans_Tired.mds");
    mdl_setvisualbody(bau_924_bauer, "hum_body_Naked0", 2, 1, "Hum_Head_FatBald", 111, 1, -1);
    b_scale(bau_924_bauer);
    mdl_setmodelfatness(bau_924_bauer, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(bau_924_bauer, itmi_stuff_plate_01);
    createinvitems(bau_924_bauer, itforice, 5);
    equipitem(bau_924_bauer, itmw_1h_sickle_01 /*4379*/);
    daily_routine = rtn_start_924;
};

func void rtn_start_924() {
    ta_sitcampfire(20, 20, 8, 20, "NC_PATH_PEASANT_OUTSIDE20");
    ta_pickrice(8, 20, 20, 20, "NC_PATH83");
};

instance bau_925_bauer(npc_default) {
    name = name_bauer;
    npctype = npctype_ambient;
    guild = gil_bau;
    level = 2;
    voice = 4;
    id = 925;
    attribute[atr_strength] /*4*/ = 13;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 64;
    attribute[atr_hitpoints] /*0*/ = 64;
    mdl_setvisual(bau_925_bauer, "HUMANS.MDS");
    mdl_applyoverlaymds(bau_925_bauer, "Humans_Tired.mds");
    mdl_setvisualbody(bau_925_bauer, "hum_body_Naked0", 2, 2, "Hum_Head_Bald", 45, 1, -1);
    b_scale(bau_925_bauer);
    mdl_setmodelfatness(bau_925_bauer, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(bau_925_bauer, itmi_stuff_plate_01);
    createinvitems(bau_925_bauer, itforice, 4);
    equipitem(bau_925_bauer, itmw_1h_sickle_01 /*4379*/);
    daily_routine = rtn_start_925;
};

func void rtn_start_925() {
    ta_smalltalk(8, 0, 20, 0, "OW_PATH_069");
    ta_smalltalk(20, 0, 8, 0, "OW_PATH_069");
};

instance bau_926_bauer(npc_default) {
    name = name_bauer;
    npctype = npctype_ambient;
    guild = gil_bau;
    level = 2;
    voice = 2;
    id = 926;
    attribute[atr_strength] /*4*/ = 13;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 64;
    attribute[atr_hitpoints] /*0*/ = 64;
    mdl_setvisual(bau_926_bauer, "HUMANS.MDS");
    mdl_applyoverlaymds(bau_926_bauer, "Humans_Tired.mds");
    mdl_setvisualbody(bau_926_bauer, "hum_body_Naked0", 2, 2, "Hum_Head_Pony", 2, 2, -1);
    b_scale(bau_926_bauer);
    mdl_setmodelfatness(bau_926_bauer, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(bau_926_bauer, itfobooze);
    createinvitems(bau_926_bauer, itforice, 3);
    equipitem(bau_926_bauer, itmw_1h_sickle_01 /*4379*/);
    daily_routine = rtn_start_926;
};

func void rtn_start_926() {
    ta_smalltalk(8, 0, 20, 0, "OW_PATH_069");
    ta_smalltalk(20, 0, 8, 0, "OW_PATH_069");
};

instance bau_927_bauer(npc_default) {
    name = name_bauer;
    npctype = npctype_ambient;
    guild = gil_bau;
    level = 2;
    voice = 9;
    id = 927;
    attribute[atr_strength] /*4*/ = 13;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 64;
    attribute[atr_hitpoints] /*0*/ = 64;
    mdl_setvisual(bau_927_bauer, "HUMANS.MDS");
    mdl_applyoverlaymds(bau_927_bauer, "Humans_Tired.mds");
    mdl_setvisualbody(bau_927_bauer, "hum_body_Naked0", 2, 1, "Hum_Head_Bald", 4, 1, -1);
    b_scale(bau_927_bauer);
    mdl_setmodelfatness(bau_927_bauer, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(bau_927_bauer, itfobooze);
    createinvitem(bau_927_bauer, itmi_stuff_plate_01);
    createinvitems(bau_927_bauer, itforice, 4);
    equipitem(bau_927_bauer, itmw_1h_sickle_01 /*4379*/);
    daily_routine = rtn_start_927;
};

func void rtn_start_927() {
    ta_sitcampfire(20, 25, 7, 25, "NC_PATH_PEASANT_OUTSIDE4");
    ta_pickrice(7, 25, 20, 25, "NC_PATH81");
};

instance bau_928_bauer(npc_default) {
    name = name_bauer;
    npctype = npctype_ambient;
    guild = gil_bau;
    level = 2;
    voice = 9;
    id = 928;
    attribute[atr_strength] /*4*/ = 13;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 64;
    attribute[atr_hitpoints] /*0*/ = 64;
    mdl_setvisual(bau_928_bauer, "HUMANS.MDS");
    mdl_applyoverlaymds(bau_928_bauer, "Humans_Tired.mds");
    mdl_setvisualbody(bau_928_bauer, "hum_body_Naked0", 2, 1, "Hum_Head_FatBald", 2, 1, -1);
    b_scale(bau_928_bauer);
    mdl_setmodelfatness(bau_928_bauer, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(bau_928_bauer, itmi_stuff_plate_01);
    createinvitems(bau_928_bauer, itforice, 3);
    equipitem(bau_928_bauer, itmw_1h_sickle_01 /*4379*/);
    daily_routine = rtn_start_928;
};

func void rtn_start_928() {
    ta_sitcampfire(20, 25, 7, 25, "NC_PATH_PEASANT_OUTSIDE6");
    ta_pickrice(8, 25, 20, 25, "NC_PATH81");
};

instance bau_929_bauer(npc_default) {
    name = name_bauer;
    npctype = npctype_ambient;
    guild = gil_bau;
    level = 2;
    voice = 2;
    id = 929;
    attribute[atr_strength] /*4*/ = 13;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 64;
    attribute[atr_hitpoints] /*0*/ = 64;
    mdl_setvisual(bau_929_bauer, "HUMANS.MDS");
    mdl_applyoverlaymds(bau_929_bauer, "Humans_Tired.mds");
    mdl_setvisualbody(bau_929_bauer, "hum_body_Naked0", 2, 2, "Hum_Head_Bald", 2, 1, -1);
    b_scale(bau_929_bauer);
    mdl_setmodelfatness(bau_929_bauer, 0.0);
    fight_tactic = fai_human_coward;
    createinvitems(bau_929_bauer, itforice, 5);
    equipitem(bau_929_bauer, itmw_1h_sickle_01 /*4379*/);
    daily_routine = rtn_start_929;
};

func void rtn_start_929() {
    ta_sitcampfire(20, 30, 8, 30, "NC_PATH_PEASANT_OUTSIDE9");
    ta_pickrice(8, 30, 20, 30, "NC_PATH80");
};

instance bau_930_bauer(npc_default) {
    name = name_bauer;
    npctype = npctype_ambient;
    guild = gil_bau;
    level = 2;
    voice = 4;
    id = 930;
    attribute[atr_strength] /*4*/ = 13;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 64;
    attribute[atr_hitpoints] /*0*/ = 64;
    mdl_setvisual(bau_930_bauer, "HUMANS.MDS");
    mdl_applyoverlaymds(bau_930_bauer, "Humans_Tired.mds");
    mdl_setvisualbody(bau_930_bauer, "hum_body_Naked0", 3, 1, "Hum_Head_Pony", 110, 1, -1);
    b_scale(bau_930_bauer);
    mdl_setmodelfatness(bau_930_bauer, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(bau_930_bauer, itmi_stuff_plate_01);
    createinvitems(bau_930_bauer, itforice, 4);
    equipitem(bau_930_bauer, itmw_1h_sickle_01 /*4379*/);
    daily_routine = rtn_start_930;
};

func void rtn_start_930() {
    ta_sitcampfire(20, 35, 8, 35, "NC_PATH_PEASANT_OUTSIDE11");
    ta_pickrice(8, 35, 20, 35, "NC_PATH79");
};

instance bau_935_homer(npc_default) {
    name = "Ãîìåð";
    npctype = npctype_main;
    guild = gil_bau;
    level = 6;
    flags = 0;
    voice = 2;
    id = 935;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 11;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 112;
    attribute[atr_hitpoints] /*0*/ = 112;
    mdl_setvisual(bau_935_homer, "HUMANS.MDS");
    mdl_applyoverlaymds(bau_935_homer, "Humans_Tired.mds");
    mdl_setvisualbody(bau_935_homer, "hum_body_Naked0", 2, 1, "Hum_Head_Thief", 5, 1, -1);
    b_scale(bau_935_homer);
    mdl_setmodelfatness(bau_935_homer, 2.0);
    fight_tactic = fai_human_coward;
    npc_settalentskill(bau_935_homer, npc_talent_1h, 1);
    createinvitem(bau_935_homer, itfoloaf);
    createinvitem(bau_935_homer, itfobooze);
    createinvitem(bau_935_homer, itmi_stuff_pipe_01);
    createinvitem(bau_935_homer, itmi_stuff_barbknife_01);
    createinvitem(bau_935_homer, itmi_stuff_mug_01);
    createinvitem(bau_935_homer, itmi_alchemy_quicksilver_01);
    createinvitems(bau_935_homer, itforice, 5);
    equipitem(bau_935_homer, itmw_1h_mace_01 /*4397*/);
    daily_routine = rtn_prestart_935;
};

func void rtn_prestart_935() {
    ta_boss(7, 30, 21, 30, "NC_DAM");
    ta_boss(21, 30, 7, 30, "NC_DAM");
};

func void rtn_start_935() {
    ta_sitaround(7, 30, 21, 30, "NC_HUT13_OUT");
    ta_sleep(21, 30, 7, 30, "NC_HUT13_IN");
};

func void rtn_damnpast_935() {
    ta_sitaround(7, 30, 21, 30, "NC_HUT13_OUT");
    ta_sleep(21, 30, 7, 30, "NC_HUT13_IN");
};

instance bau_940_riddler(npc_default) {
    name = "Òðóï";
    npctype = npctype_main;
    guild = gil_bau;
    level = 10;
    voice = 7;
    id = 940;
    attribute[atr_strength] /*4*/ = 13;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 64;
    attribute[atr_hitpoints] /*0*/ = 64;
    mdl_setvisual(bau_940_riddler, "HUMANS.MDS");
    mdl_applyoverlaymds(bau_940_riddler, "Humans_Tired.mds");
    mdl_setvisualbody(bau_940_riddler, "hum_body_Naked0", 3, 1, "Hum_Head_Pony", 110, 1, -1);
    b_scale(bau_940_riddler);
    mdl_setmodelfatness(bau_940_riddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(bau_940_riddler, itfobooze);
    createinvitem(bau_940_riddler, theriddle6);
    createinvitem(bau_940_riddler, lebensamulett);
    createinvitems(bau_940_riddler, itminugget, 302);
    createinvitems(bau_940_riddler, itforice, 6);
    createinvitems(bau_940_riddler, itarscrolltrfbloodfly, 2);
    daily_routine = rtn_start_940;
};

func void rtn_start_940() {
    ta_stand(8, 0, 20, 0, "OW_FOGDUNGEON_36_MOVEMENT");
    ta_stand(20, 0, 8, 0, "OW_FOGDUNGEON_36_MOVEMENT");
};

instance cs_eskorte1(npc_default) {
    name = "Ýñêîðò1";
    slot = "guard";
    guild = gil_grd;
    level = 5;
    flags = 0;
    voice = 11;
    id = 3024;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 100;
    attribute[atr_hitpoints] /*0*/ = 100;
    mdl_setvisual(cs_eskorte1, "HUMANS.MDS");
    mdl_applyoverlaymds(cs_eskorte1, "Humans_Militia.MDS");
    mdl_setvisualbody(cs_eskorte1, "hum_body_Naked0", 0, 1, "Hum_Head_Fighter", 18, 2, grd_armor_i /*4155*/);
    b_scale(cs_eskorte1);
    mdl_setmodelfatness(cs_eskorte1, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(cs_eskorte1, npc_talent_1h, 2);
    npc_settalentskill(cs_eskorte1, npc_talent_1h, 2);
    npc_settalentskill(cs_eskorte1, npc_talent_2h, 1);
    npc_settalentskill(cs_eskorte1, npc_talent_crossbow, 1);
    daily_routine = rtn_start_3024;
};

func void rtn_start_3024() {
    ta_position(0, 0, 24, 0, "WP_INTRO06");
};

instance cs_eskorte2(npc_default) {
    name = "Ýñêîðò2";
    slot = "guard";
    guild = gil_grd;
    level = 5;
    flags = 0;
    voice = 11;
    id = 3023;
    attribute[atr_strength] /*4*/ = 13;
    attribute[atr_dexterity] /*5*/ = 9;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 26;
    attribute[atr_hitpoints] /*0*/ = 26;
    mdl_setvisual(cs_eskorte2, "HUMANS.MDS");
    mdl_applyoverlaymds(cs_eskorte2, "Humans_Militia.MDS");
    mdl_setvisualbody(cs_eskorte2, "hum_body_Naked0", 0, 1, "Hum_Head_Fighter", 18, 2, grd_armor_i /*4155*/);
    b_scale(cs_eskorte2);
    mdl_setmodelfatness(cs_eskorte2, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(cs_eskorte2, npc_talent_1h, 2);
    npc_settalentskill(cs_eskorte2, npc_talent_1h, 2);
    npc_settalentskill(cs_eskorte2, npc_talent_2h, 1);
    npc_settalentskill(cs_eskorte2, npc_talent_crossbow, 1);
    daily_routine = rtn_start_3023;
};

func void rtn_start_3023() {
    ta_position(0, 0, 24, 0, "WP_INTRO07");
};

instance cs_eskorte3(npc_default) {
    name = "Ýñêîðò3";
    slot = "guard";
    guild = gil_grd;
    level = 5;
    flags = 0;
    voice = 11;
    id = 3027;
    attribute[atr_strength] /*4*/ = 13;
    attribute[atr_dexterity] /*5*/ = 9;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 26;
    attribute[atr_hitpoints] /*0*/ = 26;
    mdl_setvisual(cs_eskorte3, "HUMANS.MDS");
    mdl_applyoverlaymds(cs_eskorte3, "Humans_Militia.MDS");
    mdl_setvisualbody(cs_eskorte3, "hum_body_Naked0", 0, 1, "Hum_Head_Fighter", 18, 2, grd_armor_i /*4155*/);
    b_scale(cs_eskorte3);
    mdl_setmodelfatness(cs_eskorte3, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(cs_eskorte3, npc_talent_1h, 2);
    npc_settalentskill(cs_eskorte3, npc_talent_1h, 2);
    npc_settalentskill(cs_eskorte3, npc_talent_2h, 1);
    npc_settalentskill(cs_eskorte3, npc_talent_crossbow, 1);
    daily_routine = rtn_start_3027;
};

func void rtn_start_3027() {
    ta_position(0, 0, 24, 0, "WP_INTRO05");
};

instance cs_eskorte4(npc_default) {
    name = "Ýñêîðò4";
    slot = "guard";
    guild = gil_grd;
    level = 5;
    flags = 0;
    voice = 11;
    id = 3028;
    attribute[atr_strength] /*4*/ = 13;
    attribute[atr_dexterity] /*5*/ = 9;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 26;
    attribute[atr_hitpoints] /*0*/ = 26;
    mdl_setvisual(cs_eskorte4, "HUMANS.MDS");
    mdl_applyoverlaymds(cs_eskorte4, "Humans_Militia.MDS");
    mdl_setvisualbody(cs_eskorte4, "hum_body_Naked0", 0, 1, "Hum_Head_Fighter", 18, 2, grd_armor_i /*4155*/);
    b_scale(cs_eskorte4);
    mdl_setmodelfatness(cs_eskorte4, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(cs_eskorte4, npc_talent_1h, 2);
    npc_settalentskill(cs_eskorte4, npc_talent_1h, 2);
    npc_settalentskill(cs_eskorte4, npc_talent_2h, 1);
    npc_settalentskill(cs_eskorte4, npc_talent_crossbow, 1);
    daily_routine = rtn_start_3028;
};

func void rtn_start_3028() {
    ta_position(0, 0, 24, 0, "WP_INTRO08");
};

instance cs_eskorte5(npc_default) {
    name = "Ýñêîðò5";
    slot = "guard";
    guild = gil_grd;
    level = 5;
    flags = 0;
    voice = 11;
    id = 3028;
    attribute[atr_strength] /*4*/ = 13;
    attribute[atr_dexterity] /*5*/ = 9;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 26;
    attribute[atr_hitpoints] /*0*/ = 26;
    mdl_setvisual(cs_eskorte5, "HUMANS.MDS");
    mdl_applyoverlaymds(cs_eskorte5, "Humans_Militia.MDS");
    mdl_setvisualbody(cs_eskorte5, "hum_body_Naked0", 0, 1, "Hum_Head_Fighter", 18, 2, grd_armor_i /*4155*/);
    b_scale(cs_eskorte5);
    mdl_setmodelfatness(cs_eskorte5, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(cs_eskorte5, npc_talent_1h, 2);
    npc_settalentskill(cs_eskorte5, npc_talent_1h, 2);
    npc_settalentskill(cs_eskorte5, npc_talent_2h, 1);
    npc_settalentskill(cs_eskorte5, npc_talent_crossbow, 1);
    daily_routine = rtn_start_3029;
};

func void rtn_start_3029() {
    ta_position(0, 0, 24, 0, "WP_INTRO_WI01");
};

instance cs_eskorte6(npc_default) {
    name = "Ýñêîðò6";
    slot = "guard";
    guild = gil_grd;
    level = 5;
    flags = 0;
    voice = 11;
    id = 3028;
    attribute[atr_strength] /*4*/ = 13;
    attribute[atr_dexterity] /*5*/ = 9;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 26;
    attribute[atr_hitpoints] /*0*/ = 26;
    mdl_setvisual(cs_eskorte6, "HUMANS.MDS");
    mdl_applyoverlaymds(cs_eskorte6, "Humans_Militia.MDS");
    mdl_setvisualbody(cs_eskorte6, "hum_body_Naked0", 0, 1, "Hum_Head_Fighter", 18, 2, grd_armor_i /*4155*/);
    b_scale(cs_eskorte6);
    mdl_setmodelfatness(cs_eskorte6, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(cs_eskorte6, npc_talent_1h, 2);
    npc_settalentskill(cs_eskorte6, npc_talent_1h, 2);
    npc_settalentskill(cs_eskorte6, npc_talent_2h, 1);
    npc_settalentskill(cs_eskorte6, npc_talent_crossbow, 1);
    daily_routine = rtn_start_3030;
};

func void rtn_start_3030() {
    ta_position(0, 0, 24, 0, "WP_INTRO_WI01");
};

instance cs_richter(npc_default) {
    name = "Ñóäüÿ";
    npctype = npctype_main;
    guild = gil_none;
    level = 5;
    voice = 13;
    id = info_mine_org_6_wichtigepersonen /*3022*/;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 100;
    attribute[atr_hitpoints] /*0*/ = 100;
    mdl_setvisual(cs_richter, "HUMANS.MDS");
    mdl_applyoverlaymds(cs_richter, "Humans_Mage.MDS");
    mdl_setvisualbody(cs_richter, "hum_body_Naked0", 0, 1, "Hum_Head_Bald", 89, 1, law_armor /*4154*/);
    b_scale(cs_richter);
    mdl_setmodelfatness(cs_richter, 0.0);
    fight_tactic = fai_human_coward;
    daily_routine = rtn_start_3022;
};

func void rtn_start_3022() {
    ta_position(0, 0, 24, 0, "WP_INTRO_WI01");
};

instance ebr_100_gomez(npc_default) {
    name = "Ãîìåç";
    npctype = npctype_main;
    guild = gil_ebr;
    level = 100;
    flags = npc_flag_immortal;
    voice = 11;
    id = 100;
    attribute[atr_strength] /*4*/ = 95;
    attribute[atr_dexterity] /*5*/ = 80;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 400;
    attribute[atr_hitpoints] /*0*/ = 400;
    mdl_setvisual(ebr_100_gomez, "HUMANS.MDS");
    mdl_applyoverlaymds(ebr_100_gomez, "Humans_Arrogance.mds");
    mdl_setvisualbody(ebr_100_gomez, "hum_body_Naked0", 0, 1, "Hum_Head_Bald", 85, 4, ebr_armor_h /*4129*/);
    b_scale(ebr_100_gomez);
    mdl_setmodelfatness(ebr_100_gomez, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_master;
    npc_settalentskill(ebr_100_gomez, npc_talent_2h, 2);
    npc_settalentskill(ebr_100_gomez, npc_talent_1h, 2);
    npc_settalentskill(ebr_100_gomez, npc_talent_bow, 2);
    createinvitem(ebr_100_gomez, itke_gomez_01);
    equipitem(ebr_100_gomez, innos_zorn /*4966*/);
    equipitem(ebr_100_gomez, amulett_der_macht /*4048*/);
    equipitem(ebr_100_gomez, schutzring_total2 /*4935*/);
    daily_routine = rtn_prestart_100;
};

func void rtn_prestart_100() {
    ta_ebr_hangaround(0, 0, 8, 0, "OCC_BARONS_GREATHALL_THRONE");
    ta_ebr_hangaround(8, 0, 0, 0, "OCC_BARONS_GREATHALL_THRONE");
};

func void rtn_start_100() {
    ta_sitaround(0, 0, 8, 0, "OCC_BARONS_UPSTAIRS_LEFT_BACK_ROOM_LEFT_FRONT");
    ta_ebr_hangaround(8, 0, 0, 0, "OCC_BARONS_GREATHALL_THRONE");
};

func void rtn_ot_100() {
    ta_ebr_hangaround(7, 0, 20, 0, "OCC_BARONS_GREATHALL_THRONE");
    ta_ebr_hangaround(20, 0, 7, 0, "OCC_BARONS_GREATHALL_THRONE");
};

instance ebr_101_scar(npc_default) {
    name = "Øðàì";
    npctype = npctype_main;
    guild = gil_ebr;
    level = 80;
    voice = 8;
    id = 101;
    attribute[atr_strength] /*4*/ = 75;
    attribute[atr_dexterity] /*5*/ = 55;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 400;
    attribute[atr_hitpoints] /*0*/ = 400;
    mdl_setvisual(ebr_101_scar, "HUMANS.MDS");
    mdl_applyoverlaymds(ebr_101_scar, "Humans_Arrogance.mds");
    mdl_setvisualbody(ebr_101_scar, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 79, 1, ebr_armor_h2 /*4130*/);
    b_scale(ebr_101_scar);
    mdl_setmodelfatness(ebr_101_scar, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_master;
    npc_settalentskill(ebr_101_scar, npc_talent_2h, 2);
    npc_settalentskill(ebr_101_scar, npc_talent_1h, 2);
    npc_settalentskill(ebr_101_scar, npc_talent_bow, 2);
    createinvitem(ebr_101_scar, itfo_potion_health_03);
    createinvitem(ebr_101_scar, itrw_crossbow_04);
    equipitem(ebr_101_scar, scars_schwert /*4967*/);
    daily_routine = rtn_start_101;
};

func void rtn_start_101() {
    ta_sleep(2, 10, 7, 40, "OCC_BARONS_UPPER_RIGHT_ROOM_BED3");
    ta_smalltalk(7, 40, 21, 5, "OCC_BARONS_GREATHALL_CENTER_FRONT");
    ta_standaround(21, 5, 2, 10, "OCC_BARONS_GREATHALL_CENTER_MOVEMENT2");
};

func void rtn_ot_101() {
    ta_guard(7, 0, 20, 0, "OCC_MERCS_HALLWAY_MIDDLE");
    ta_guard(20, 0, 7, 0, "OCC_MERCS_HALLWAY_MIDDLE");
};

instance ebr_102_arto(npc_default) {
    name = "Àðòî";
    npctype = npctype_main;
    guild = gil_ebr;
    level = 80;
    voice = 13;
    id = 102;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 70;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 388;
    attribute[atr_hitpoints] /*0*/ = 388;
    mdl_setvisual(ebr_102_arto, "HUMANS.MDS");
    mdl_applyoverlaymds(ebr_102_arto, "Humans_Arrogance.mds");
    mdl_setvisualbody(ebr_102_arto, "hum_body_Naked0", 0, 1, "Hum_Head_Bald", 10, 1, ebr_armor_h2 /*4130*/);
    b_scale(ebr_102_arto);
    mdl_setmodelfatness(ebr_102_arto, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_master;
    npc_settalentskill(ebr_102_arto, npc_talent_2h, 2);
    npc_settalentskill(ebr_102_arto, npc_talent_1h, 2);
    npc_settalentskill(ebr_102_arto, npc_talent_bow, 2);
    createinvitem(ebr_102_arto, itfo_potion_health_03);
    createinvitem(ebr_102_arto, ring_des_geschicks);
    equipitem(ebr_102_arto, artos_schwert /*4968*/);
    daily_routine = rtn_start_102;
};

func void rtn_start_102() {
    ta_sleep(2, 5, 7, 35, "OCC_BARONS_UPPER_RIGHT_ROOM_BED2");
    ta_smalltalk(7, 35, 21, 10, "OCC_BARONS_GREATHALL_CENTER_LEFT");
    ta_standaround(21, 10, 2, 5, "OCC_BARONS_GREATHALL_CENTER_MOVEMENT4");
};

func void rtn_ot_102() {
    ta_guard(23, 0, 7, 0, "OCC_BARONS_HALLWAY_FRONT");
    ta_guard(23, 0, 7, 0, "OCC_BARONS_HALLWAY_FRONT");
};

instance ebr_105_raven(npc_default) {
    name = "Ðàâåí";
    npctype = npctype_main;
    guild = gil_ebr;
    level = 80;
    voice = 10;
    id = 105;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 75;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 388;
    attribute[atr_hitpoints] /*0*/ = 388;
    mdl_setvisual(ebr_105_raven, "HUMANS.MDS");
    mdl_applyoverlaymds(ebr_105_raven, "Humans_Arrogance.mds");
    mdl_setvisualbody(ebr_105_raven, "hum_body_Naked0", 0, 1, "Hum_Head_Thief", 6, 2, ebr_armor_h2 /*4130*/);
    b_scale(ebr_105_raven);
    mdl_setmodelfatness(ebr_105_raven, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_master;
    npc_settalentskill(ebr_105_raven, npc_talent_2h, 2);
    npc_settalentskill(ebr_105_raven, npc_talent_1h, 2);
    npc_settalentskill(ebr_105_raven, npc_talent_bow, 2);
    createinvitem(ebr_105_raven, itfo_potion_health_03);
    equipitem(ebr_105_raven, rabenrecht /*4969*/);
    daily_routine = rtn_prestart_105;
};

func void rtn_prestart_105() {
    ta_stand(9, 0, 22, 0, "OCC_BARONS_HALLWAY_FRONT");
    ta_stand(22, 0, 9, 0, "OCC_BARONS_HALLWAY_FRONT");
};

func void rtn_guide_105() {
    ta_guidepc(8, 0, 20, 0, "OCC_BARONS_GREATHALL_CENTER_MOVEMENT");
    ta_guidepc(20, 0, 8, 0, "OCC_BARONS_GREATHALL_CENTER_MOVEMENT");
};

func void rtn_start_105() {
    ta_sleep(2, 0, 9, 0, "OCC_BARONS_UPSTAIRS_LEFT_FRONT_ROOM_FRONT");
    ta_stand(9, 0, 22, 0, "OCC_BARONS_GREATHALL_RIGHT_FRONT");
    ta_standaround(22, 0, 2, 0, "OCC_BARONS_GREATHALL_LEFT_BACK");
};

func void rtn_ot_105() {
    ta_guard(7, 0, 20, 0, "OCC_CENTER_1");
    ta_guard(20, 0, 7, 0, "OCC_CENTER_1");
};

instance ebr_106_bartholo(npc_default) {
    name = "Áàðòîëî";
    npctype = npctype_main;
    guild = gil_ebr;
    level = 70;
    flags = npc_flag_immortal;
    voice = 12;
    id = 106;
    attribute[atr_strength] /*4*/ = 65;
    attribute[atr_dexterity] /*5*/ = 60;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 388;
    attribute[atr_hitpoints] /*0*/ = 388;
    mdl_setvisual(ebr_106_bartholo, "HUMANS.MDS");
    mdl_applyoverlaymds(ebr_106_bartholo, "Humans_Arrogance.mds");
    mdl_setvisualbody(ebr_106_bartholo, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 11, 3, ebr_armor_m /*4128*/);
    b_scale(ebr_106_bartholo);
    mdl_setmodelfatness(ebr_106_bartholo, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_master;
    senses = (sense_see | sense_hear) | sense_smell;
    npc_settalentskill(ebr_106_bartholo, npc_talent_2h, 2);
    npc_settalentskill(ebr_106_bartholo, npc_talent_1h, 2);
    npc_settalentskill(ebr_106_bartholo, npc_talent_bow, 2);
    createinvitem(ebr_106_bartholo, itfo_potion_health_03);
    equipitem(ebr_106_bartholo, prankenhieb /*4970*/);
    daily_routine = rtn_start_106;
};

func void rtn_start_106() {
    ta_sleep(1, 0, 8, 0, "OCC_BARONS_UPSTAIRS_RIGHT_BACK_ROOM_RIGHT");
    ta_stand(8, 0, 15, 55, "OCC_BARONS_RIGHT_ROOM_BACK");
    ta_playtune(15, 55, 22, 0, "OCC_BARONS_GREATHALL_RIGHT_BACK");
    ta_standaround(22, 0, 1, 0, "OCC_BARONS_GREATHALL_LEFT_BACK");
};

func void rtn_ot_106() {
    ta_guard(10, 0, 22, 0, "OCC_CHAPEL_STAIRCASE_TOP");
    ta_guard(22, 0, 10, 0, "OCC_CHAPEL_STAIRCASE_TOP");
};

instance ebr_108_velaya(npc_default) {
    name = "Âåëàÿ";
    npctype = npctype_main;
    guild = gil_bab;
    level = 1;
    flags = npc_flag_immortal;
    voice = 16;
    id = 108;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 20;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 40;
    attribute[atr_hitpoints] /*0*/ = 40;
    mdl_setvisual(ebr_108_velaya, "BABE.MDS");
    mdl_setvisualbody(ebr_108_velaya, "Bab_body_Naked0", 0, 1, "Bab_Head_Hair1", 0, default, -1);
    aivar[22] = true;
    fight_tactic = fai_human_coward;
    createinvitem(ebr_108_velaya, itmibrush);
    createinvitem(ebr_108_velaya, itmiwedel);
    daily_routine = rtn_start_108;
};

func void rtn_start_108() {
    ta_babe_sleep(1, 0, 10, 0, "OCC_BARONS_UPSTAIRS_LEFT_BACK_ROOM_LEFT_BACK");
    ta_babe_sitaround(10, 0, 11, 0, "OCC_BARONS_UPSTAIRS_LEFT_BACK_ROOM_FRONT");
    ta_bathing_babe(11, 0, 14, 0, "OCC_BARONS_UPSTAIRS_LEFT_BACK_ROOM_FRONT");
    ta_babe_sitaround(14, 0, 16, 0, "OCC_BARONS_UPSTAIRS_LEFT_BACK_ROOM_FRONT");
    ta_bathing_babe(16, 0, 19, 0, "OCC_BARONS_UPSTAIRS_LEFT_BACK_ROOM_FRONT");
    ta_babe_sitaround(19, 0, 1, 0, "OCC_BARONS_UPSTAIRS_LEFT_BACK_ROOM_FRONT");
};

instance ebr_109_syra(npc_default) {
    name = "Ñèðà";
    npctype = npctype_main;
    guild = gil_bab;
    level = 1;
    flags = npc_flag_immortal;
    voice = 16;
    id = 109;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 20;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 40;
    attribute[atr_hitpoints] /*0*/ = 40;
    mdl_setvisual(ebr_109_syra, "Babe.MDS");
    mdl_setvisualbody(ebr_109_syra, "Bab_body_Naked0", 1, 1, "Bab_Head_Hair1", 1, default, -1);
    aivar[22] = true;
    fight_tactic = fai_human_coward;
    createinvitem(ebr_109_syra, itmibrush);
    createinvitem(ebr_109_syra, itmiwedel);
    daily_routine = rtn_start_109;
};

func void rtn_start_109() {
    ta_babe_sweep(22, 0, 6, 0, "OCC_BARONS_LEFT_ROOM_FRONT");
    ta_babe_sweep(6, 0, 16, 0, "OCC_BARONS_RIGHT_ROOM_TABLE");
    ta_babe_dance(16, 0, 22, 0, "OCC_BARONS_DANCE");
};

instance ebr_110_seraphia(npc_default) {
    name = "Ñåðàôèÿ";
    npctype = npctype_main;
    guild = gil_bab;
    level = 1;
    flags = npc_flag_immortal;
    voice = 16;
    id = 110;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 20;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 40;
    attribute[atr_hitpoints] /*0*/ = 40;
    mdl_setvisual(ebr_110_seraphia, "Babe.MDS");
    mdl_setvisualbody(ebr_110_seraphia, "Bab_body_Naked0", 2, 1, "Bab_Head_Hair1", 2, default, -1);
    aivar[22] = true;
    fight_tactic = fai_human_coward;
    createinvitem(ebr_110_seraphia, itmibrush);
    createinvitem(ebr_110_seraphia, itmiwedel);
    daily_routine = rtn_start_110;
};

func void rtn_start_110() {
    ta_babe_sweep(0, 1, 8, 30, "OCC_BARONS_GREATHALL_CENTER_LEFT");
    ta_babe_fan(8, 30, 0, 1, "OCC_BARONS_GREATHALL_BERATER");
};

instance grd_200_thorus(npc_default) {
    name = "Òîðóñ";
    npctype = npctype_friend;
    guild = gil_grd;
    level = 50;
    flags = npc_flag_immortal;
    voice = 9;
    id = 200;
    attribute[atr_strength] /*4*/ = 100;
    attribute[atr_dexterity] /*5*/ = 80;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 280;
    attribute[atr_hitpoints] /*0*/ = 280;
    mdl_setvisual(grd_200_thorus, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_200_thorus, "Humans_Militia.mds");
    mdl_setvisualbody(grd_200_thorus, "hum_body_Naked0", 0, 3, "Hum_Head_Fighter", 12, 0, grd_armor_h /*4127*/);
    b_scale(grd_200_thorus);
    mdl_setmodelfatness(grd_200_thorus, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_200_thorus, npc_talent_1h, 2);
    npc_settalentskill(grd_200_thorus, npc_talent_2h, 2);
    npc_settalentskill(grd_200_thorus, npc_talent_crossbow, 1);
    createinvitem(grd_200_thorus, itfo_potion_health_02);
    createinvitem(grd_200_thorus, itlstorch);
    createinvitems(grd_200_thorus, itambolt, 30);
    createinvitems(grd_200_thorus, itminugget, 200);
    equipitem(grd_200_thorus, thorus_schwert /*4965*/);
    equipitem(grd_200_thorus, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_start_200;
};

func void rtn_start_200() {
    ta_boss(8, 0, 23, 0, "OCR_THORUS");
    ta_sleep(23, 0, 8, 0, "OCC_BARONS_UPPER_RIGHT_ROOM_BED1");
};

instance grd_201_jackal(npc_default) {
    name = "Øàêàë";
    npctype = npctype_main;
    guild = gil_grd;
    level = 50;
    voice = 7;
    id = 201;
    attribute[atr_strength] /*4*/ = 100;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 300;
    attribute[atr_hitpoints] /*0*/ = 300;
    mdl_setvisual(grd_201_jackal, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_201_jackal, "Humans_Militia.mds");
    mdl_setvisualbody(grd_201_jackal, "hum_body_Naked0", 1, 2, "Hum_Head_Fighter", 4, 1, grd_armor_h /*4127*/);
    b_scale(grd_201_jackal);
    mdl_setmodelfatness(grd_201_jackal, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_master;
    npc_settalentskill(grd_201_jackal, npc_talent_1h, 2);
    npc_settalentskill(grd_201_jackal, npc_talent_2h, 2);
    npc_settalentskill(grd_201_jackal, npc_talent_crossbow, 1);
    createinvitems(grd_201_jackal, itambolt, 15);
    equipitem(grd_201_jackal, itmw_1h_axe_03 /*4420*/);
    equipitem(grd_201_jackal, itrw_crossbow_03 /*4892*/);
    daily_routine = rtn_start_201;
};

func void rtn_start_201() {
    ta_guard(6, 0, 7, 0, "OCR_CAMPFIRE_F_1");
    ta_guard(7, 0, 8, 0, "OCR_OUTSIDE_HUT_42");
    ta_guard(8, 0, 9, 0, "OCR_CAMPFIRE_F_1");
    ta_guard(9, 0, 10, 0, "OCR_NORTHGATE_RAMP_BELOW");
    ta_guard(10, 0, 11, 0, "OCR_CAMPFIRE_F_1");
    ta_guard(11, 0, 12, 0, "OCR_OUTSIDE_HUT_42");
    ta_guard(12, 0, 13, 0, "OCR_CAMPFIRE_F_1");
    ta_guard(13, 0, 14, 0, "OCR_NORTHGATE_RAMP_BELOW");
    ta_guard(14, 0, 15, 0, "OCR_CAMPFIRE_F_1");
    ta_guard(15, 0, 16, 0, "OCR_OUTSIDE_HUT_42");
    ta_guard(16, 0, 17, 0, "OCR_CAMPFIRE_F_1");
    ta_guard(17, 0, 18, 0, "OCR_NORTHGATE_RAMP_BELOW");
    ta_guard(18, 0, 19, 0, "OCR_CAMPFIRE_F_1");
    ta_guard(19, 0, 20, 0, "OCR_OUTSIDE_HUT_42");
    ta_guard(20, 0, 21, 0, "OCR_CAMPFIRE_F_1");
    ta_guard(21, 0, 22, 0, "OCR_NORTHGATE_RAMP_BELOW");
    ta_guard(22, 0, 23, 0, "OCR_CAMPFIRE_F_1");
    ta_guard(23, 0, 0, 0, "OCR_OUTSIDE_HUT_42");
    ta_guard(0, 0, 1, 0, "OCR_CAMPFIRE_F_1");
    ta_guard(1, 0, 2, 0, "OCR_NORTHGATE_RAMP_BELOW");
    ta_guard(2, 0, 3, 0, "OCR_CAMPFIRE_F_1");
    ta_guard(3, 0, 4, 0, "OCR_OUTSIDE_HUT_42");
    ta_guard(4, 0, 5, 0, "OCR_CAMPFIRE_F_1");
    ta_guard(5, 0, 6, 0, "OCR_NORTHGATE_RAMP_BELOW");
};

func void rtn_fmtaken_201() {
    ta_stayneutral(2, 0, 3, 0, "FMC_FM_ENTRANCE");
    ta_stayneutral(3, 0, 2, 0, "FMC_FM_ENTRANCE");
};

func void rtn_fmtaken2_201() {
    ta_stay(2, 0, 3, 0, "FMC_FM_ENTRANCE");
    ta_stay(3, 0, 2, 0, "FMC_FM_ENTRANCE");
};

instance grd_203_bullit(npc_default) {
    name = "Áóëëèò";
    npctype = npctype_main;
    guild = gil_grd;
    level = 10;
    voice = 6;
    id = 203;
    attribute[atr_strength] /*4*/ = 35;
    attribute[atr_dexterity] /*5*/ = 35;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 160;
    attribute[atr_hitpoints] /*0*/ = 160;
    mdl_setvisual(grd_203_bullit, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_203_bullit, "Humans_Militia.mds");
    mdl_setvisualbody(grd_203_bullit, "hum_body_Naked0", 0, 1, "Hum_Head_Thief", 57, 2, grd_armor_m /*4126*/);
    b_scale(grd_203_bullit);
    mdl_setmodelfatness(grd_203_bullit, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_203_bullit, npc_talent_1h, 2);
    npc_settalentskill(grd_203_bullit, npc_talent_2h, 1);
    npc_settalentskill(grd_203_bullit, npc_talent_crossbow, 1);
    createinvitem(grd_203_bullit, itfocheese);
    createinvitem(grd_203_bullit, itfoapple);
    createinvitem(grd_203_bullit, itlstorch);
    createinvitems(grd_203_bullit, itambolt, 30);
    createinvitems(grd_203_bullit, itminugget, 25);
    equipitem(grd_203_bullit, itmw_1h_sword_long_02 /*4411*/);
    equipitem(grd_203_bullit, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_start_203;
};

func void rtn_start_203() {
    ta_sitaround(0, 0, 21, 0, "OCC_MERCS_RIGHT_ROOM_BACK");
    ta_sitaround(21, 0, 24, 0, "OCC_MERCS_RIGHT_ROOM_BACK");
};

func void rtn_ot_203() {
    ta_guard(7, 0, 20, 0, "OCC_MERCS_DOWNSTAIRS_2");
    ta_guard(20, 0, 7, 0, "OCC_MERCS_DOWNSTAIRS_2");
};

instance grd_204_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 10;
    voice = 7;
    id = 204;
    attribute[atr_strength] /*4*/ = 35;
    attribute[atr_dexterity] /*5*/ = 35;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 160;
    attribute[atr_hitpoints] /*0*/ = 160;
    mdl_setvisual(grd_204_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_204_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_204_gardist, "hum_body_Naked0", 0, 3, "Hum_Head_Fighter", 1, 1, grd_armor_l /*4125*/);
    b_scale(grd_204_gardist);
    mdl_setmodelfatness(grd_204_gardist, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_204_gardist, npc_talent_1h, 2);
    npc_settalentskill(grd_204_gardist, npc_talent_2h, 1);
    npc_settalentskill(grd_204_gardist, npc_talent_crossbow, 1);
    createinvitem(grd_204_gardist, itfocheese);
    createinvitem(grd_204_gardist, itfoapple);
    createinvitem(grd_204_gardist, itlstorch);
    createinvitems(grd_204_gardist, itambolt, 20);
    createinvitems(grd_204_gardist, itminugget, 10);
    equipitem(grd_204_gardist, itmw_1h_sword_01 /*4401*/);
    equipitem(grd_204_gardist, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_start_204;
};

func void rtn_start_204() {
    ta_practicesword(7, 30, 20, 0, "OCC_CENTER_4_TRAIN");
    ta_standaround(20, 0, 0, 0, "OCC_SHADOWS_CORNER_MOVEMENT4");
    ta_sleep(0, 0, 7, 30, "OCC_MERCS_UPPER_RIGHT_ROOM_BED1");
};

instance grd_205_scorpio(npc_default) {
    name = "Ñêîðïèî";
    npctype = npctype_main;
    guild = gil_grd;
    level = 15;
    voice = 13;
    id = 205;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 220;
    attribute[atr_hitpoints] /*0*/ = 220;
    mdl_setvisual(grd_205_scorpio, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_205_scorpio, "Humans_Militia.mds");
    mdl_setvisualbody(grd_205_scorpio, "hum_body_Naked0", 0, 1, "Hum_Head_Fighter", 18, 2, grd_armor_m /*4126*/);
    b_scale(grd_205_scorpio);
    mdl_setmodelfatness(grd_205_scorpio, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_205_scorpio, npc_talent_1h, 2);
    npc_settalentskill(grd_205_scorpio, npc_talent_2h, 1);
    npc_settalentskill(grd_205_scorpio, npc_talent_crossbow, 1);
    createinvitems(grd_205_scorpio, itminugget, 200);
    createinvitems(grd_205_scorpio, itfo_potion_health_02, 5);
    equipitem(grd_205_scorpio, itmw_1h_sword_03 /*4403*/);
    daily_routine = rtn_start_205;
};

func void rtn_start_205() {
    ta_boss(7, 25, 20, 0, "OCC_CENTER_4");
    ta_smalltalk(20, 0, 1, 0, "OCC_STABLE_ENTRANCE_INSERT");
    ta_sleep(20, 0, 7, 25, "OCC_MERCS_UPPER_RIGHT_ROOM_BED4");
};

func void rtn_bannished_205() {
    ta_stay(7, 0, 20, 0, "OW_CAVALORN_01");
    ta_stay(20, 0, 7, 0, "OW_CAVALORN_01");
};

instance grd_206_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 15;
    voice = 6;
    id = 206;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 220;
    attribute[atr_hitpoints] /*0*/ = 220;
    mdl_setvisual(grd_206_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_206_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_206_gardist, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 13, 1, grd_armor_m /*4126*/);
    b_scale(grd_206_gardist);
    mdl_setmodelfatness(grd_206_gardist, 2.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_206_gardist, npc_talent_1h, 2);
    npc_settalentskill(grd_206_gardist, npc_talent_1h, 1);
    npc_settalentskill(grd_206_gardist, npc_talent_2h, 1);
    npc_settalentskill(grd_206_gardist, npc_talent_crossbow, 1);
    createinvitem(grd_206_gardist, itfocheese);
    createinvitem(grd_206_gardist, itfoapple);
    createinvitem(grd_206_gardist, itlstorch);
    createinvitems(grd_206_gardist, itambolt, 15);
    createinvitems(grd_206_gardist, itminugget, 10);
    equipitem(grd_206_gardist, itmw_1h_sword_02 /*4402*/);
    equipitem(grd_206_gardist, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_start_206;
};

func void rtn_start_206() {
    ta_sleep(23, 30, 8, 30, "OCC_MERCS_UPPER_RIGHT_ROOM_BED5");
    ta_smalltalk(8, 30, 23, 30, "OCC_MERCS_ENTRANCE");
};

instance grd_208_cutter(npc_default) {
    name = "Êàòýð";
    npctype = npctype_main;
    guild = gil_grd;
    level = 20;
    voice = 8;
    id = 208;
    attribute[atr_strength] /*4*/ = 100;
    attribute[atr_dexterity] /*5*/ = 80;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 280;
    attribute[atr_hitpoints] /*0*/ = 280;
    mdl_setvisual(grd_208_cutter, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_208_cutter, "Humans_Militia.mds");
    mdl_setvisualbody(grd_208_cutter, "hum_body_Naked0", 0, 0, "Hum_Head_Bald", 3, 1, grd_armor_h /*4127*/);
    b_scale(grd_208_cutter);
    mdl_setmodelfatness(grd_208_cutter, 1.0);
    aivar[22] = true;
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_208_cutter, npc_talent_1h, 2);
    npc_settalentskill(grd_208_cutter, npc_talent_2h, 1);
    npc_settalentskill(grd_208_cutter, npc_talent_crossbow, 1);
    createinvitem(grd_208_cutter, itfomutton);
    createinvitem(grd_208_cutter, itfo_potion_health_01);
    createinvitem(grd_208_cutter, itlstorch);
    createinvitems(grd_208_cutter, itambolt, 30);
    createinvitems(grd_208_cutter, itminugget, 20);
    equipitem(grd_208_cutter, itmw_1h_sword_03 /*4403*/);
    equipitem(grd_208_cutter, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_start_208;
};

func void rtn_start_208() {
    ta_sleep(23, 35, 8, 35, "OCC_MERCS_UPPER_RIGHT_ROOM_BED6");
    ta_smalltalk(8, 35, 23, 35, "OCC_MERCS_ENTRANCE");
};

func void rtn_ot_208() {
    ta_guard(7, 0, 20, 0, "OCC_MERCS_ENTRANCE");
    ta_guard(20, 0, 7, 0, "OCC_MERCS_ENTRANCE");
};

instance grd_209_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 15;
    voice = 6;
    id = 209;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 220;
    attribute[atr_hitpoints] /*0*/ = 220;
    mdl_setvisual(grd_209_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_209_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_209_gardist, "hum_body_Naked0", 1, 2, "Hum_Head_Thief", 3, 1, grd_armor_m /*4126*/);
    b_scale(grd_209_gardist);
    mdl_setmodelfatness(grd_209_gardist, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_209_gardist, npc_talent_1h, 2);
    npc_settalentskill(grd_209_gardist, npc_talent_1h, 1);
    npc_settalentskill(grd_209_gardist, npc_talent_2h, 1);
    npc_settalentskill(grd_209_gardist, npc_talent_crossbow, 1);
    createinvitem(grd_209_gardist, itfocheese);
    createinvitem(grd_209_gardist, itfoapple);
    createinvitem(grd_209_gardist, itlstorch);
    createinvitems(grd_209_gardist, itambolt, 30);
    createinvitems(grd_209_gardist, itminugget, 10);
    equipitem(grd_209_gardist, itmw_1h_sword_02 /*4402*/);
    equipitem(grd_209_gardist, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_start_209;
};

func void rtn_start_209() {
    ta_sleep(0, 20, 7, 20, "OCC_MERCS_UPPER_LEFT_ROOM_BED1");
    ta_smalltalk(7, 20, 21, 20, "OCC_GATE_INSIDE_SMALLTALK");
    ta_smalltalk(21, 20, 0, 20, "OCC_SHADOWS_CORNER_MOVEMENT4");
};

instance grd_210_scatty(npc_default) {
    name = "Ñêàòòè";
    npctype = npctype_main;
    guild = gil_grd;
    level = 15;
    voice = 1;
    id = 210;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 220;
    attribute[atr_hitpoints] /*0*/ = 220;
    mdl_setvisual(grd_210_scatty, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_210_scatty, "Humans_Militia.mds");
    mdl_setvisualbody(grd_210_scatty, "hum_body_Naked0", 0, 2, "Hum_Head_FatBald", 5, 2, stt_armor_h /*4124*/);
    b_scale(grd_210_scatty);
    mdl_setmodelfatness(grd_210_scatty, 2.0);
    aivar[22] = true;
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_210_scatty, npc_talent_1h, 2);
    npc_settalentskill(grd_210_scatty, npc_talent_2h, 1);
    npc_settalentskill(grd_210_scatty, npc_talent_crossbow, 1);
    createinvitem(grd_210_scatty, itfocheese);
    createinvitem(grd_210_scatty, itfoapple);
    createinvitem(grd_210_scatty, itlstorch);
    createinvitems(grd_210_scatty, itambolt, 30);
    createinvitems(grd_210_scatty, itminugget, 10);
    equipitem(grd_210_scatty, itmw_1h_sword_02 /*4402*/);
    equipitem(grd_210_scatty, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_start_210;
};

func void rtn_start_210() {
    ta_sleep(0, 0, 8, 0, "OCR_HUT_19");
    ta_sitaround(8, 0, 10, 0, "OCR_ARENABATTLE_BENCH");
    ta_smalltalk(10, 0, 16, 0, "OCR_SMALLTALK_A_OC_ARENA");
    ta_stand(16, 0, 20, 0, "OCR_STAND_WETT");
    ta_sitaround(20, 0, 0, 0, "OCR_ARENABATTLE_BENCH");
};

instance grd_211_skip(npc_default) {
    name = "Ñêèï";
    npctype = npctype_main;
    guild = gil_grd;
    level = 15;
    voice = 12;
    id = 211;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 220;
    attribute[atr_hitpoints] /*0*/ = 220;
    mdl_setvisual(grd_211_skip, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_211_skip, "Humans_Militia.mds");
    mdl_setvisualbody(grd_211_skip, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 19, 1, grd_armor_m /*4126*/);
    b_scale(grd_211_skip);
    mdl_setmodelfatness(grd_211_skip, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_211_skip, npc_talent_1h, 2);
    npc_settalentskill(grd_211_skip, npc_talent_2h, 1);
    npc_settalentskill(grd_211_skip, npc_talent_crossbow, 1);
    createinvitems(grd_211_skip, itminugget, 400);
    equipitem(grd_211_skip, itmw_1h_sword_02 /*4402*/);
    daily_routine = rtn_start_211;
};

func void rtn_start_211() {
    ta_sleep(0, 0, 7, 0, "OCC_MERCS_UPPER_LEFT_ROOM_BED4");
    ta_stand(7, 0, 23, 0, "OCC_STABLE_BACK");
    ta_standaround(23, 0, 1, 0, "OCC_WELL_RIGHT_MOVEMENT");
};

func void rtn_ot_211() {
    ta_position(7, 0, 20, 0, "OCC_STABLE_BACK");
    ta_position(20, 0, 7, 0, "OCC_STABLE_BACK");
};

instance grd_212_torwache(npc_default) {
    name = name_torwache;
    npctype = npctype_main;
    guild = gil_grd;
    level = 15;
    voice = 13;
    id = 212;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 220;
    attribute[atr_hitpoints] /*0*/ = 220;
    mdl_setvisual(grd_212_torwache, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_212_torwache, "Humans_Militia.mds");
    mdl_setvisualbody(grd_212_torwache, "hum_body_Naked0", 0, 1, "Hum_Head_Bald", 19, 1, grd_armor_m /*4126*/);
    b_scale(grd_212_torwache);
    mdl_setmodelfatness(grd_212_torwache, 0.0);
    aivar[22] = true;
    aivar[38] = true;
    fight_tactic = fai_human_ranged;
    npc_settalentskill(grd_212_torwache, npc_talent_1h, 2);
    npc_settalentskill(grd_212_torwache, npc_talent_2h, 1);
    npc_settalentskill(grd_212_torwache, npc_talent_crossbow, 1);
    createinvitem(grd_212_torwache, itfocheese);
    createinvitem(grd_212_torwache, itfoapple);
    createinvitem(grd_212_torwache, itlstorch);
    createinvitems(grd_212_torwache, itambolt, 30);
    createinvitems(grd_212_torwache, itminugget, 10);
    equipitem(grd_212_torwache, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_start_212;
};

func void rtn_start_212() {
    ta_guardpassage(6, 0, 21, 0, "OCC_GATE_RIGHT_GUARD");
    ta_guardpassage(21, 0, 6, 0, "OCC_GATE_RIGHT_GUARD");
};

func void rtn_omfull_212() {
    ta_guardpassage(6, 0, 21, 0, "OCC_GATE_RIGHT_GUARD");
    ta_standaround(21, 0, 22, 0, "OCC_MERCS_RIGHT_ROOM_FRONT");
    ta_sitaround(22, 0, 24, 0, "OCC_GATE_CAMPFIRE_1");
    ta_sleep(24, 0, 6, 0, "OCC_MERCS_UPPER_LEFT_ROOM_FRONT");
};

func void rtn_fmtaken_212() {
};

func void rtn_orcassault_212() {
};

instance grd_213_torwache(npc_default) {
    name = name_torwache;
    npctype = npctype_main;
    guild = gil_grd;
    level = 15;
    voice = 7;
    id = 213;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 220;
    attribute[atr_hitpoints] /*0*/ = 220;
    mdl_setvisual(grd_213_torwache, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_213_torwache, "Humans_Militia.mds");
    mdl_setvisualbody(grd_213_torwache, "hum_body_Naked0", 0, 1, "Hum_Head_Bald", 13, 1, grd_armor_m /*4126*/);
    b_scale(grd_213_torwache);
    mdl_setmodelfatness(grd_213_torwache, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_ranged;
    npc_settalentskill(grd_213_torwache, npc_talent_1h, 2);
    npc_settalentskill(grd_213_torwache, npc_talent_2h, 1);
    npc_settalentskill(grd_213_torwache, npc_talent_crossbow, 1);
    createinvitem(grd_213_torwache, itfocheese);
    createinvitem(grd_213_torwache, itfoapple);
    createinvitem(grd_213_torwache, itlstorch);
    createinvitems(grd_213_torwache, itambolt, 30);
    createinvitems(grd_213_torwache, itminugget, 10);
    equipitem(grd_213_torwache, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_start_213;
};

func void rtn_start_213() {
    ta_guardpassage(6, 0, 21, 0, "OCC_GATE_LEFT_GUARD");
    ta_guardpassage(21, 0, 6, 0, "OCC_GATE_LEFT_GUARD");
};

func void rtn_omfull_213() {
    ta_sleep(0, 0, 6, 0, "OCC_MERCS_UPPER_LEFT_ROOM_FRONT");
    ta_guardpassage(6, 0, 21, 0, "OCC_GATE_LEFT_GUARD");
    ta_standaround(21, 0, 22, 0, "OCC_MERCS_RIGHT_ROOM_FRONT");
    ta_sitaround(22, 0, 22, 15, "OCC_FIGHTTRAINING");
    ta_practicesword(22, 15, 24, 0, "OCC_FIGHTTRAINING");
};

func void rtn_fmtaken_213() {
};

func void rtn_orcassault_213() {
};

instance grd_214_torwache(npc_default) {
    name = name_torwache;
    npctype = npctype_main;
    guild = gil_grd;
    level = 15;
    voice = 7;
    id = 214;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 220;
    attribute[atr_hitpoints] /*0*/ = 220;
    mdl_setvisual(grd_214_torwache, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_214_torwache, "Humans_Militia.mds");
    mdl_setvisualbody(grd_214_torwache, "hum_body_Naked0", 0, 0, "Hum_Head_Bald", 2, 3, grd_armor_m /*4126*/);
    b_scale(grd_214_torwache);
    mdl_setmodelfatness(grd_214_torwache, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_214_torwache, npc_talent_1h, 1);
    createinvitem(grd_214_torwache, itfoapple);
    createinvitems(grd_214_torwache, itminugget, 10);
    equipitem(grd_214_torwache, itmw_1h_sword_01 /*4401*/);
    daily_routine = rtn_start_214;
};

func void rtn_start_214() {
    ta_guard(6, 0, 21, 0, "OCR_MAINGATE_LEFT_GUARD");
    ta_guard(21, 0, 6, 0, "OCR_MAINGATE_LEFT_GUARD");
};

func void rtn_fmtaken_214() {
    ta_stayneutral(6, 0, 21, 0, "OCR_MAINGATE_LEFT_GUARD");
    ta_stayneutral(21, 0, 6, 0, "OCR_MAINGATE_LEFT_GUARD");
};

func void rtn_fmtaken2_214() {
    ta_guard(6, 0, 21, 0, "OCR_MAINGATE_LEFT_GUARD");
    ta_guard(21, 0, 6, 0, "OCR_MAINGATE_LEFT_GUARD");
};

instance grd_215_torwache(npc_default) {
    name = name_torwache;
    npctype = npctype_main;
    guild = gil_grd;
    level = 15;
    voice = 6;
    id = 215;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 220;
    attribute[atr_hitpoints] /*0*/ = 220;
    mdl_setvisual(grd_215_torwache, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_215_torwache, "Humans_Militia.mds");
    mdl_setvisualbody(grd_215_torwache, "hum_body_Naked0", 0, 1, "Hum_Head_Fighter", 12, 2, grd_armor_m /*4126*/);
    b_scale(grd_215_torwache);
    mdl_setmodelfatness(grd_215_torwache, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_215_torwache, npc_talent_1h, 1);
    npc_settalentskill(grd_215_torwache, npc_talent_1h, 1);
    createinvitem(grd_215_torwache, itfoapple);
    createinvitems(grd_215_torwache, itminugget, 10);
    equipitem(grd_215_torwache, itmw_1h_sword_01 /*4401*/);
    daily_routine = rtn_start_215;
};

func void rtn_start_215() {
    ta_guard(6, 0, 21, 0, "OCR_MAINGATE_RIGHT_GUARD");
    ta_guard(21, 0, 6, 0, "OCR_MAINGATE_RIGHT_GUARD");
};

func void rtn_fmtaken_215() {
    ta_stayneutral(6, 0, 21, 0, "OCR_MAINGATE_RIGHT_GUARD");
    ta_stayneutral(21, 0, 6, 0, "OCR_MAINGATE_RIGHT_GUARD");
};

func void rtn_fmtaken2_215() {
    ta_guard(6, 0, 21, 0, "OCR_MAINGATE_RIGHT_GUARD");
    ta_guard(21, 0, 6, 0, "OCR_MAINGATE_RIGHT_GUARD");
};

instance grd_216_torwache(npc_default) {
    name = name_torwache;
    npctype = npctype_main;
    guild = gil_grd;
    level = 15;
    voice = 13;
    id = 216;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 220;
    attribute[atr_hitpoints] /*0*/ = 220;
    mdl_setvisual(grd_216_torwache, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_216_torwache, "Humans_Militia.mds");
    mdl_setvisualbody(grd_216_torwache, "hum_body_Naked0", 0, 3, "Hum_Head_Bald", 3, 2, grd_armor_m /*4126*/);
    b_scale(grd_216_torwache);
    mdl_setmodelfatness(grd_216_torwache, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_216_torwache, npc_talent_1h, 1);
    createinvitem(grd_216_torwache, itfoapple);
    createinvitems(grd_216_torwache, itminugget, 10);
    equipitem(grd_216_torwache, itmw_1h_sword_01 /*4401*/);
    daily_routine = rtn_start_216;
};

func void rtn_start_216() {
    ta_guard(6, 0, 14, 0, "OCR_NORTHGATE_RIGHT_GUARD");
    ta_guard(14, 0, 6, 0, "OCR_NORTHGATE_RIGHT_GUARD");
};

func void rtn_fmtaken_216() {
    ta_stayneutral(6, 0, 14, 0, "OCR_NORTHGATE_RIGHT_GUARD");
    ta_stayneutral(14, 0, 6, 0, "OCR_NORTHGATE_RIGHT_GUARD");
};

func void rtn_fmtaken2_216() {
    ta_guard(6, 0, 14, 0, "OCR_NORTHGATE_RIGHT_GUARD");
    ta_guard(14, 0, 6, 0, "OCR_NORTHGATE_RIGHT_GUARD");
};

instance grd_217_torwache(npc_default) {
    name = name_torwache;
    npctype = npctype_main;
    guild = gil_grd;
    level = 15;
    voice = 6;
    id = 217;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 220;
    attribute[atr_hitpoints] /*0*/ = 220;
    mdl_setvisual(grd_217_torwache, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_217_torwache, "Humans_Militia.mds");
    mdl_setvisualbody(grd_217_torwache, "hum_body_Naked0", 0, 1, "Hum_Head_Psionic", 14, 1, grd_armor_m /*4126*/);
    b_scale(grd_217_torwache);
    mdl_setmodelfatness(grd_217_torwache, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_217_torwache, npc_talent_1h, 1);
    createinvitem(grd_217_torwache, itfoapple);
    createinvitems(grd_217_torwache, itminugget, 10);
    equipitem(grd_217_torwache, itmw_1h_sword_01 /*4401*/);
    daily_routine = rtn_start_217;
};

func void rtn_start_217() {
    ta_guard(6, 0, 14, 0, "OCR_NORTHGATE_RIGHT_GUARD");
    ta_guard(14, 0, 6, 0, "OCR_NORTHGATE_RIGHT_GUARD");
};

func void rtn_fmtaken_217() {
    ta_stayneutral(6, 0, 14, 0, "OCR_NORTHGATE_RIGHT_GUARD");
    ta_stayneutral(14, 0, 6, 0, "OCR_NORTHGATE_RIGHT_GUARD");
};

func void rtn_fmtaken2_217() {
    ta_guard(6, 0, 14, 0, "OCR_NORTHGATE_RIGHT_GUARD");
    ta_guard(14, 0, 6, 0, "OCR_NORTHGATE_RIGHT_GUARD");
};

instance grd_218_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 20;
    voice = 7;
    id = 218;
    attribute[atr_strength] /*4*/ = 100;
    attribute[atr_dexterity] /*5*/ = 80;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 280;
    attribute[atr_hitpoints] /*0*/ = 280;
    mdl_setvisual(grd_218_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_218_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_218_gardist, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 15, 1, grd_armor_h /*4127*/);
    b_scale(grd_218_gardist);
    mdl_setmodelfatness(grd_218_gardist, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_218_gardist, npc_talent_1h, 2);
    npc_settalentskill(grd_218_gardist, npc_talent_2h, 1);
    npc_settalentskill(grd_218_gardist, npc_talent_crossbow, 1);
    createinvitem(grd_218_gardist, itfomutton);
    createinvitem(grd_218_gardist, itfo_potion_health_01);
    createinvitem(grd_218_gardist, itlstorch);
    createinvitems(grd_218_gardist, itambolt, 30);
    createinvitems(grd_218_gardist, itminugget, 20);
    equipitem(grd_218_gardist, itmw_1h_sword_03 /*4403*/);
    equipitem(grd_218_gardist, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_start_218;
};

func void rtn_start_218() {
    ta_guardpassage(6, 0, 21, 0, "OCC_BARONS_RIGHT_GUARD");
    ta_guardpassage(21, 0, 6, 0, "OCC_BARONS_RIGHT_GUARD");
};

instance grd_219_stone(npc_default) {
    name = "Ñòîóí";
    npctype = npctype_main;
    guild = gil_grd;
    level = 15;
    flags = npc_flag_immortal;
    voice = 6;
    id = 219;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 220;
    attribute[atr_hitpoints] /*0*/ = 220;
    mdl_setvisual(grd_219_stone, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_219_stone, "Humans_Militia.mds");
    mdl_setvisualbody(grd_219_stone, "Hum_Body_CookSmith", 1, 1, "Hum_Head_Pony", 16, 4, -1);
    b_scale(grd_219_stone);
    mdl_setmodelfatness(grd_219_stone, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_219_stone, npc_talent_1h, 2);
    npc_settalentskill(grd_219_stone, npc_talent_2h, 1);
    npc_settalentskill(grd_219_stone, npc_talent_crossbow, 1);
    createinvitem(grd_219_stone, itfocheese);
    createinvitem(grd_219_stone, itfoapple);
    createinvitem(grd_219_stone, itlstorch);
    createinvitems(grd_219_stone, itminugget, 10);
    equipitem(grd_219_stone, itmw_1h_sword_02 /*4402*/);
    daily_routine = rtn_start_219;
};

func void rtn_start_219() {
    ta_smith_fire(8, 0, 8, 10, "OCC_STABLE_LEFT_FRONT");
    ta_smith_anvil(8, 10, 8, 20, "OCC_STABLE_LEFT_FRONT");
    ta_smith_fire(8, 20, 8, 30, "OCC_STABLE_LEFT_FRONT");
    ta_smith_anvil(8, 30, 8, 40, "OCC_STABLE_LEFT_FRONT");
    ta_smith_cool(8, 40, 8, 50, "OCC_STABLE_LEFT_FRONT");
    ta_smith_sharp(8, 50, 8, 55, "OCC_STABLE_LEFT_FRONT");
    ta_sitaround(8, 55, 9, 0, "OCC_STABLE_LEFT_FRONT");
    ta_smith_fire(9, 0, 9, 10, "OCC_STABLE_LEFT_FRONT");
    ta_smith_anvil(9, 10, 9, 20, "OCC_STABLE_LEFT_FRONT");
    ta_smith_fire(9, 20, 9, 30, "OCC_STABLE_LEFT_FRONT");
    ta_smith_anvil(9, 30, 9, 40, "OCC_STABLE_LEFT_FRONT");
    ta_smith_cool(9, 40, 9, 50, "OCC_STABLE_LEFT_FRONT");
    ta_smith_sharp(9, 50, 9, 55, "OCC_STABLE_LEFT_FRONT");
    ta_sitaround(9, 55, 10, 0, "OCC_STABLE_LEFT_FRONT");
    ta_smith_fire(10, 0, 10, 10, "OCC_STABLE_LEFT_FRONT");
    ta_smith_anvil(10, 10, 10, 20, "OCC_STABLE_LEFT_FRONT");
    ta_smith_fire(10, 20, 10, 30, "OCC_STABLE_LEFT_FRONT");
    ta_smith_anvil(10, 30, 10, 40, "OCC_STABLE_LEFT_FRONT");
    ta_smith_cool(10, 40, 10, 50, "OCC_STABLE_LEFT_FRONT");
    ta_smith_sharp(10, 50, 10, 55, "OCC_STABLE_LEFT_FRONT");
    ta_sitaround(10, 55, 11, 0, "OCC_STABLE_LEFT_FRONT");
    ta_smith_fire(11, 0, 11, 10, "OCC_STABLE_LEFT_FRONT");
    ta_smith_anvil(11, 10, 11, 20, "OCC_STABLE_LEFT_FRONT");
    ta_smith_fire(11, 20, 11, 30, "OCC_STABLE_LEFT_FRONT");
    ta_smith_anvil(11, 30, 11, 40, "OCC_STABLE_LEFT_FRONT");
    ta_smith_cool(11, 40, 11, 50, "OCC_STABLE_LEFT_FRONT");
    ta_smith_sharp(11, 50, 11, 55, "OCC_STABLE_LEFT_FRONT");
    ta_sitaround(11, 55, 12, 0, "OCC_STABLE_LEFT_FRONT");
    ta_smith_fire(12, 0, 12, 10, "OCC_STABLE_LEFT_FRONT");
    ta_smith_anvil(12, 10, 12, 20, "OCC_STABLE_LEFT_FRONT");
    ta_smith_fire(12, 20, 12, 30, "OCC_STABLE_LEFT_FRONT");
    ta_smith_anvil(12, 30, 12, 40, "OCC_STABLE_LEFT_FRONT");
    ta_smith_cool(12, 40, 12, 50, "OCC_STABLE_LEFT_FRONT");
    ta_smith_sharp(12, 50, 12, 55, "OCC_STABLE_LEFT_FRONT");
    ta_sitaround(12, 55, 13, 0, "OCC_STABLE_LEFT_FRONT");
    ta_smith_fire(13, 0, 13, 10, "OCC_STABLE_LEFT_FRONT");
    ta_smith_anvil(13, 10, 13, 20, "OCC_STABLE_LEFT_FRONT");
    ta_smith_fire(13, 20, 13, 30, "OCC_STABLE_LEFT_FRONT");
    ta_smith_anvil(13, 30, 13, 40, "OCC_STABLE_LEFT_FRONT");
    ta_smith_cool(13, 40, 13, 50, "OCC_STABLE_LEFT_FRONT");
    ta_smith_sharp(13, 50, 13, 55, "OCC_STABLE_LEFT_FRONT");
    ta_sitaround(13, 55, 14, 0, "OCC_STABLE_LEFT_FRONT");
    ta_smith_fire(14, 0, 14, 10, "OCC_STABLE_LEFT_FRONT");
    ta_smith_anvil(14, 10, 14, 20, "OCC_STABLE_LEFT_FRONT");
    ta_smith_fire(14, 20, 14, 30, "OCC_STABLE_LEFT_FRONT");
    ta_smith_anvil(14, 30, 14, 40, "OCC_STABLE_LEFT_FRONT");
    ta_smith_cool(14, 40, 14, 50, "OCC_STABLE_LEFT_FRONT");
    ta_smith_sharp(14, 50, 14, 55, "OCC_STABLE_LEFT_FRONT");
    ta_sitaround(14, 55, 15, 0, "OCC_STABLE_LEFT_FRONT");
    ta_smith_fire(15, 0, 15, 10, "OCC_STABLE_LEFT_FRONT");
    ta_smith_anvil(15, 10, 15, 20, "OCC_STABLE_LEFT_FRONT");
    ta_smith_fire(15, 20, 15, 30, "OCC_STABLE_LEFT_FRONT");
    ta_smith_anvil(15, 30, 15, 40, "OCC_STABLE_LEFT_FRONT");
    ta_smith_cool(15, 40, 15, 50, "OCC_STABLE_LEFT_FRONT");
    ta_smith_sharp(15, 50, 15, 55, "OCC_STABLE_LEFT_FRONT");
    ta_sitaround(15, 55, 16, 0, "OCC_STABLE_LEFT_FRONT");
    ta_smith_fire(16, 0, 16, 10, "OCC_STABLE_LEFT_FRONT");
    ta_smith_anvil(16, 10, 16, 20, "OCC_STABLE_LEFT_FRONT");
    ta_smith_fire(16, 20, 16, 30, "OCC_STABLE_LEFT_FRONT");
    ta_smith_anvil(16, 30, 16, 40, "OCC_STABLE_LEFT_FRONT");
    ta_smith_cool(16, 40, 16, 50, "OCC_STABLE_LEFT_FRONT");
    ta_smith_sharp(16, 50, 16, 55, "OCC_STABLE_LEFT_FRONT");
    ta_sitaround(16, 55, 17, 0, "OCC_STABLE_LEFT_FRONT");
    ta_smith_fire(17, 0, 17, 10, "OCC_STABLE_LEFT_FRONT");
    ta_smith_anvil(17, 10, 17, 20, "OCC_STABLE_LEFT_FRONT");
    ta_smith_fire(17, 20, 17, 30, "OCC_STABLE_LEFT_FRONT");
    ta_smith_anvil(17, 30, 17, 40, "OCC_STABLE_LEFT_FRONT");
    ta_smith_cool(17, 40, 17, 50, "OCC_STABLE_LEFT_FRONT");
    ta_smith_sharp(17, 50, 17, 55, "OCC_STABLE_LEFT_FRONT");
    ta_sitaround(17, 55, 18, 0, "OCC_STABLE_LEFT_FRONT");
    ta_smith_fire(18, 0, 18, 10, "OCC_STABLE_LEFT_FRONT");
    ta_smith_anvil(18, 10, 18, 20, "OCC_STABLE_LEFT_FRONT");
    ta_smith_fire(18, 20, 18, 30, "OCC_STABLE_LEFT_FRONT");
    ta_smith_anvil(18, 30, 18, 40, "OCC_STABLE_LEFT_FRONT");
    ta_smith_cool(18, 40, 18, 50, "OCC_STABLE_LEFT_FRONT");
    ta_smith_sharp(18, 50, 18, 55, "OCC_STABLE_LEFT_FRONT");
    ta_sitaround(18, 55, 19, 0, "OCC_STABLE_LEFT_FRONT");
    ta_smith_fire(19, 0, 19, 10, "OCC_STABLE_LEFT_FRONT");
    ta_smith_anvil(19, 10, 19, 20, "OCC_STABLE_LEFT_FRONT");
    ta_smith_fire(19, 20, 19, 30, "OCC_STABLE_LEFT_FRONT");
    ta_smith_anvil(19, 30, 19, 40, "OCC_STABLE_LEFT_FRONT");
    ta_smith_cool(19, 40, 19, 50, "OCC_STABLE_LEFT_FRONT");
    ta_smith_sharp(19, 50, 19, 55, "OCC_STABLE_LEFT_FRONT");
    ta_sitaround(19, 55, 20, 5, "OCC_STABLE_LEFT_FRONT");
    ta_smalltalk(20, 5, 1, 5, "OCC_STABLE_ENTRANCE_INSERT");
    ta_sleep(1, 5, 8, 0, "OCC_MERCS_LEFT_ROOM_BED3");
};

func void rtn_ot_219() {
    ta_stay(7, 0, 20, 0, "OCC_CELLAR_BACK_LEFT_CELL");
    ta_stay(20, 0, 7, 0, "OCC_CELLAR_BACK_LEFT_CELL");
};

func void rtn_otnew_219() {
    ta_standaround(7, 0, 8, 0, "OCC_MERCS_RIGHT_ROOM_BACK");
    ta_smith_fire(8, 0, 8, 30, "OCC_STABLE_LEFT_FRONT");
    ta_smith_anvil(8, 30, 9, 30, "OCC_STABLE_LEFT_FRONT");
    ta_smith_fire(9, 30, 10, 0, "OCC_STABLE_LEFT_FRONT");
    ta_smith_anvil(10, 0, 11, 0, "OCC_STABLE_LEFT_FRONT");
    ta_smith_cool(11, 0, 11, 30, "OCC_STABLE_LEFT_FRONT");
    ta_smith_sharp(11, 30, 12, 0, "OCC_STABLE_LEFT_FRONT");
    ta_smith_fire(12, 0, 12, 30, "OCC_STABLE_LEFT_FRONT");
    ta_smith_anvil(12, 30, 13, 30, "OCC_STABLE_LEFT_FRONT");
    ta_smith_fire(13, 30, 14, 0, "OCC_STABLE_LEFT_FRONT");
    ta_smith_anvil(14, 0, 15, 0, "OCC_STABLE_LEFT_FRONT");
    ta_smith_cool(15, 0, 15, 30, "OCC_STABLE_LEFT_FRONT");
    ta_smith_sharp(15, 30, 16, 0, "OCC_STABLE_LEFT_FRONT");
    ta_smith_fire(16, 0, 16, 30, "OCC_STABLE_LEFT_FRONT");
    ta_smith_anvil(16, 30, 17, 30, "OCC_STABLE_LEFT_FRONT");
    ta_smith_fire(17, 30, 18, 0, "OCC_STABLE_LEFT_FRONT");
    ta_smith_anvil(18, 0, 19, 0, "OCC_STABLE_LEFT_FRONT");
    ta_smith_cool(19, 0, 19, 30, "OCC_STABLE_LEFT_FRONT");
    ta_smith_sharp(19, 30, 20, 0, "OCC_STABLE_LEFT_FRONT");
    ta_sitaround(20, 0, 7, 0, "OCC_CENTER_2");
};

instance grd_220_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 10;
    voice = 7;
    id = 220;
    attribute[atr_strength] /*4*/ = 35;
    attribute[atr_dexterity] /*5*/ = 35;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 160;
    attribute[atr_hitpoints] /*0*/ = 160;
    mdl_setvisual(grd_220_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_220_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_220_gardist, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 19, 1, grd_armor_l /*4125*/);
    b_scale(grd_220_gardist);
    mdl_setmodelfatness(grd_220_gardist, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_220_gardist, npc_talent_1h, 1);
    npc_settalentskill(grd_220_gardist, npc_talent_1h, 1);
    createinvitem(grd_220_gardist, itfoapple);
    createinvitems(grd_220_gardist, itminugget, 10);
    equipitem(grd_220_gardist, itmw_1h_sword_01 /*4401*/);
    daily_routine = rtn_start_220;
};

func void rtn_start_220() {
    ta_practicesword(7, 35, 20, 5, "OCC_CENTER_4_TRAIN2");
    ta_standaround(20, 5, 0, 5, "OCC_SHADOWS_CORNER_MOVEMENT");
    ta_sleep(0, 5, 7, 35, "OCC_MERCS_UPPER_RIGHT_ROOM_BED2");
};

func void rtn_ot_220() {
    ta_guard(7, 0, 20, 0, "OCC_CHAPEL_UPSTAIRS_LEFT");
    ta_guard(20, 0, 7, 0, "OCC_CHAPEL_UPSTAIRS_LEFT");
};

instance grd_221_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 10;
    voice = 13;
    id = 221;
    attribute[atr_strength] /*4*/ = 35;
    attribute[atr_dexterity] /*5*/ = 35;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 160;
    attribute[atr_hitpoints] /*0*/ = 160;
    mdl_setvisual(grd_221_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_221_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_221_gardist, "hum_body_Naked0", 0, 0, "Hum_Head_Fighter", 1, 2, grd_armor_l /*4125*/);
    b_scale(grd_221_gardist);
    mdl_setmodelfatness(grd_221_gardist, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_221_gardist, npc_talent_1h, 1);
    npc_settalentskill(grd_221_gardist, npc_talent_1h, 1);
    createinvitem(grd_221_gardist, itfoapple);
    createinvitems(grd_221_gardist, itminugget, 10);
    equipitem(grd_221_gardist, itmw_1h_sword_01 /*4401*/);
    daily_routine = rtn_start_221;
};

func void rtn_start_221() {
    ta_practicesword(7, 40, 20, 10, "OCC_CENTER_4_TRAIN3");
    ta_roastscavenger(20, 10, 22, 10, "OCC_SHADOWS_CORNER_MOVEMENT2");
    ta_standaround(22, 10, 0, 10, "OCC_SHADOWS_CORNER_MOVEMENT");
    ta_sleep(0, 10, 7, 40, "OCC_MERCS_UPPER_RIGHT_ROOM_BED3");
};

func void rtn_ot_221() {
    ta_guard(7, 0, 20, 0, "OCC_CHAPEL_UPSTAIRS_RIGHT");
    ta_guard(20, 0, 7, 0, "OCC_CHAPEL_UPSTAIRS_RIGHT");
};

instance grd_222_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 15;
    voice = 13;
    id = 222;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 220;
    attribute[atr_hitpoints] /*0*/ = 220;
    mdl_setvisual(grd_222_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_222_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_222_gardist, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 17, 4, grd_armor_m /*4126*/);
    b_scale(grd_222_gardist);
    mdl_setmodelfatness(grd_222_gardist, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_222_gardist, npc_talent_1h, 1);
    npc_settalentskill(grd_222_gardist, npc_talent_2h, 1);
    npc_settalentskill(grd_222_gardist, npc_talent_crossbow, 1);
    createinvitem(grd_222_gardist, itfocheese);
    createinvitem(grd_222_gardist, itfoapple);
    createinvitem(grd_222_gardist, itlstorch);
    createinvitems(grd_222_gardist, itambolt, 30);
    createinvitems(grd_222_gardist, itminugget, 10);
    equipitem(grd_222_gardist, itmw_1h_sword_02 /*4402*/);
    equipitem(grd_222_gardist, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_start_222;
};

func void rtn_start_222() {
    ta_guardpalisade(6, 0, 23, 0, "OCC_BARONS_UPSTAIRS_PROMENADE_RIGHT_GUARD");
    ta_guardpalisade(23, 0, 6, 0, "OCC_BARONS_UPSTAIRS_PROMENADE_RIGHT_GUARD");
};

func void rtn_ot_222() {
    ta_guard(7, 0, 20, 0, "OCC_BARONS_DOOR");
    ta_guard(20, 0, 7, 0, "OCC_BARONS_DOOR");
};

instance grd_223_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 15;
    voice = 13;
    id = 223;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 220;
    attribute[atr_hitpoints] /*0*/ = 220;
    mdl_setvisual(grd_223_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_223_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_223_gardist, "hum_body_Naked0", 0, 1, "Hum_Head_Pony", 13, 1, grd_armor_m /*4126*/);
    b_scale(grd_223_gardist);
    mdl_setmodelfatness(grd_223_gardist, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_223_gardist, npc_talent_1h, 1);
    npc_settalentskill(grd_223_gardist, npc_talent_2h, 1);
    npc_settalentskill(grd_223_gardist, npc_talent_crossbow, 2);
    createinvitem(grd_223_gardist, itfocheese);
    createinvitem(grd_223_gardist, itfoapple);
    createinvitem(grd_223_gardist, itlstorch);
    createinvitems(grd_223_gardist, itambolt, 30);
    createinvitems(grd_223_gardist, itminugget, 10);
    equipitem(grd_223_gardist, itmw_1h_sword_02 /*4402*/);
    equipitem(grd_223_gardist, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_start_223;
};

func void rtn_start_223() {
    ta_guardpalisade(6, 0, 23, 0, "OCC_BARONS_UPSTAIRS_PROMENADE_LEFT_GUARD");
    ta_guardpalisade(23, 0, 6, 0, "OCC_BARONS_UPSTAIRS_PROMENADE_LEFT_GUARD");
};

func void rtn_ot_223() {
    ta_guard(7, 0, 12, 0, "OCC_BARONS_UPSTAIRS_PROMENADE_RIGHT_CORNER");
    ta_guard(12, 0, 19, 0, "OCC_BARONS_UPSTAIRS_PROMENADE_LEFT_DOOR");
    ta_guard(19, 0, 7, 0, "OCC_BARONS_UPSTAIRS_PROMENADE_LEFT_CORNER");
};

instance grd_224_pacho(npc_default) {
    name = "Ïà÷î";
    npctype = npctype_main;
    guild = gil_grd;
    level = 10;
    voice = 13;
    id = 224;
    attribute[atr_strength] /*4*/ = 35;
    attribute[atr_dexterity] /*5*/ = 35;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 160;
    attribute[atr_hitpoints] /*0*/ = 160;
    mdl_setvisual(grd_224_pacho, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_224_pacho, "Humans_Militia.mds");
    mdl_setvisualbody(grd_224_pacho, "hum_body_Naked0", 0, 3, "Hum_Head_Fighter", 4, 1, grd_armor_l /*4125*/);
    b_scale(grd_224_pacho);
    mdl_setmodelfatness(grd_224_pacho, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_224_pacho, npc_talent_1h, 1);
    npc_settalentskill(grd_224_pacho, npc_talent_1h, 1);
    npc_settalentskill(grd_224_pacho, npc_talent_crossbow, 1);
    createinvitem(grd_224_pacho, itmw_1h_sword_01);
    createinvitem(grd_224_pacho, itrw_crossbow_01);
    createinvitem(grd_224_pacho, itfoapple);
    createinvitems(grd_224_pacho, itambolt, 30);
    createinvitems(grd_224_pacho, itminugget, 10);
    daily_routine = rtn_start_224;
};

func void rtn_start_224() {
    ta_sitaround(0, 0, 12, 0, "OW_PATH_018");
    ta_sitaround(12, 0, 24, 0, "OW_PATH_018");
};

instance grd_225_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 10;
    voice = 7;
    id = 225;
    attribute[atr_strength] /*4*/ = 35;
    attribute[atr_dexterity] /*5*/ = 35;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 160;
    attribute[atr_hitpoints] /*0*/ = 160;
    mdl_setvisual(grd_225_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_225_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_225_gardist, "hum_body_Naked0", 0, 0, "Hum_Head_FatBald", 3, 3, grd_armor_l /*4125*/);
    b_scale(grd_225_gardist);
    mdl_setmodelfatness(grd_225_gardist, 0.0);
    fight_tactic = fai_human_ranged;
    npc_settalentskill(grd_225_gardist, npc_talent_1h, 1);
    npc_settalentskill(grd_225_gardist, npc_talent_1h, 1);
    npc_settalentskill(grd_225_gardist, npc_talent_crossbow, 1);
    createinvitem(grd_225_gardist, itfoapple);
    createinvitems(grd_225_gardist, itminugget, 10);
    createinvitems(grd_225_gardist, itambolt, 30);
    equipitem(grd_225_gardist, itmw_1h_sword_01 /*4401*/);
    equipitem(grd_225_gardist, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_start_225;
};

func void rtn_start_225() {
    ta_guardpalisade(0, 0, 12, 0, "OCC_PALISADE_WALLCRACK");
    ta_guardpalisade(12, 0, 0, 0, "OCC_PALISADE_WALLCRACK");
};

instance grd_226_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 10;
    voice = 13;
    id = 226;
    attribute[atr_strength] /*4*/ = 35;
    attribute[atr_dexterity] /*5*/ = 35;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 160;
    attribute[atr_hitpoints] /*0*/ = 160;
    mdl_setvisual(grd_226_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_226_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_226_gardist, "hum_body_Naked0", 1, 1, "Hum_Head_Fighter", 16, 0, grd_armor_l /*4125*/);
    b_scale(grd_226_gardist);
    mdl_setmodelfatness(grd_226_gardist, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_226_gardist, npc_talent_1h, 1);
    npc_settalentskill(grd_226_gardist, npc_talent_1h, 1);
    createinvitem(grd_226_gardist, itfoapple);
    createinvitems(grd_226_gardist, itminugget, 10);
    equipitem(grd_226_gardist, itmw_1h_sword_01 /*4401*/);
    daily_routine = rtn_start_226;
};

func void rtn_start_226() {
    ta_sleep(0, 25, 7, 25, "OCC_MERCS_UPPER_LEFT_ROOM_BED2");
    ta_smalltalk(7, 25, 21, 25, "OCC_MAINGATE_TALK");
    ta_smalltalk(21, 25, 0, 25, "OCC_SHADOWS_CORNER_MOVEMENT4");
};

instance grd_227_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 10;
    voice = 6;
    id = 227;
    attribute[atr_strength] /*4*/ = 35;
    attribute[atr_dexterity] /*5*/ = 35;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 160;
    attribute[atr_hitpoints] /*0*/ = 160;
    mdl_setvisual(grd_227_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_227_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_227_gardist, "hum_body_Naked0", 0, 1, "Hum_Head_Fighter", 17, 2, grd_armor_l /*4125*/);
    b_scale(grd_227_gardist);
    mdl_setmodelfatness(grd_227_gardist, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_227_gardist, npc_talent_1h, 1);
    npc_settalentskill(grd_227_gardist, npc_talent_1h, 1);
    createinvitem(grd_227_gardist, itfoapple);
    createinvitems(grd_227_gardist, itminugget, 10);
    equipitem(grd_227_gardist, itmw_1h_sword_01 /*4401*/);
    daily_routine = rtn_start_227;
};

func void rtn_start_227() {
    ta_sleep(1, 35, 7, 45, "OCC_MERCS_UPPER_LEFT_ROOM_BED5");
    ta_standaround(7, 45, 11, 0, "OCC_WELL_RIGHT_MOVEMENT2");
    ta_roastscavenger(11, 0, 21, 0, "OCC_WELL_RIGHT_MOVEMENT2");
    ta_standaround(21, 0, 1, 35, "OCC_WELL_RIGHT_MOVEMENT2");
};

instance grd_228_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 15;
    flags = npc_flag_immortal;
    voice = 7;
    id = 228;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 220;
    attribute[atr_hitpoints] /*0*/ = 220;
    mdl_setvisual(grd_228_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_228_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_228_gardist, "hum_body_Naked0", 0, 2, "Hum_Head_FatBald", 5, 1, grd_armor_m /*4126*/);
    b_scale(grd_228_gardist);
    mdl_setmodelfatness(grd_228_gardist, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_228_gardist, npc_talent_1h, 2);
    npc_settalentskill(grd_228_gardist, npc_talent_2h, 1);
    npc_settalentskill(grd_228_gardist, npc_talent_crossbow, 1);
    createinvitem(grd_228_gardist, itfocheese);
    createinvitem(grd_228_gardist, itfoapple);
    createinvitem(grd_228_gardist, itlstorch);
    createinvitems(grd_228_gardist, itambolt, 30);
    createinvitems(grd_228_gardist, itminugget, 10);
    equipitem(grd_228_gardist, itmw_1h_sword_02 /*4402*/);
    equipitem(grd_228_gardist, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_prestart_228;
};

func void rtn_prestart_228() {
    ta_guardwheelopen(7, 55, 19, 55, "OCR_NORTHGATE_VWHEEL");
    ta_guardwheelopen(19, 55, 7, 55, "OCR_NORTHGATE_VWHEEL");
};

func void rtn_start_228() {
    ta_guardwheelopen(7, 55, 19, 55, "OCR_NORTHGATE_VWHEEL");
    ta_guardwheelopen(19, 55, 7, 55, "OCR_NORTHGATE_VWHEEL");
};

func void rtn_omfull_228() {
    ta_standaround(12, 0, 13, 0, "OCC_MERCS_RIGHT_ROOM_FRONT");
    ta_sitaround(13, 0, 13, 15, "OCC_FIGHTTRAINING");
    ta_practicesword(13, 15, 18, 0, "OCC_FIGHTTRAINING");
    ta_sitaround(18, 0, 21, 0, "OCC_GATE_BEHIND_RIGHT_TOWER");
    ta_guardpassage(21, 0, 6, 0, "OCR_MAINGATE_LEFT_GUARD");
    ta_sleep(6, 0, 12, 0, "OCC_MERCS_UPPER_RIGHT_ROOM_FRONT");
};

func void rtn_fmtaken_228() {
    ta_guardwheelclosed(7, 0, 20, 0, "OCR_NORTHGATE_VWHEEL");
    ta_guardwheelclosed(20, 0, 7, 0, "OCR_NORTHGATE_VWHEEL");
};

func void rtn_orcassault_228() {
};

instance grd_229_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 20;
    voice = 13;
    id = 229;
    attribute[atr_strength] /*4*/ = 100;
    attribute[atr_dexterity] /*5*/ = 80;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 280;
    attribute[atr_hitpoints] /*0*/ = 280;
    mdl_setvisual(grd_229_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_229_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_229_gardist, "hum_body_Naked0", 0, 0, "Hum_Head_Psionic", 2, 1, grd_armor_h /*4127*/);
    b_scale(grd_229_gardist);
    mdl_setmodelfatness(grd_229_gardist, 0.0);
    fight_tactic = fai_human_ranged;
    npc_settalentskill(grd_229_gardist, npc_talent_1h, 2);
    npc_settalentskill(grd_229_gardist, npc_talent_2h, 1);
    npc_settalentskill(grd_229_gardist, npc_talent_crossbow, 1);
    createinvitem(grd_229_gardist, itfomutton);
    createinvitem(grd_229_gardist, itfo_potion_health_01);
    createinvitem(grd_229_gardist, itlstorch);
    createinvitems(grd_229_gardist, itambolt, 30);
    createinvitems(grd_229_gardist, itminugget, 20);
    equipitem(grd_229_gardist, itmw_1h_sword_03 /*4403*/);
    equipitem(grd_229_gardist, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_start_229;
};

func void rtn_start_229() {
    ta_guardpalisade(8, 0, 22, 0, "OCR_PALISADE_ABOVE_MARKETPLACE_01");
    ta_sleep(22, 0, 8, 0, "OCC_MERCS_UPPER_LEFT_ROOM_FRONT");
};

func void rtn_fmtaken_229() {
    ta_stayneutral(7, 0, 20, 0, "OCR_NORTHGATE_OUTSIDE_DOOR");
    ta_stayneutral(20, 0, 7, 0, "OCR_NORTHGATE_OUTSIDE_DOOR");
};

func void rtn_fmtaken2_229() {
    ta_stay(7, 0, 20, 0, "OCR_NORTHGATE_OUTSIDE_DOOR");
    ta_stay(20, 0, 7, 0, "OCR_NORTHGATE_OUTSIDE_DOOR");
};

instance grd_230_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 20;
    flags = npc_flag_immortal;
    voice = 6;
    id = 230;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 220;
    attribute[atr_hitpoints] /*0*/ = 220;
    mdl_setvisual(grd_230_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_230_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_230_gardist, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 19, 0, grd_armor_m /*4126*/);
    b_scale(grd_230_gardist);
    mdl_setmodelfatness(grd_230_gardist, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_230_gardist, npc_talent_1h, 1);
    npc_settalentskill(grd_230_gardist, npc_talent_crossbow, 1);
    createinvitem(grd_230_gardist, itfoapple);
    createinvitems(grd_230_gardist, itambolt, 30);
    createinvitems(grd_230_gardist, itminugget, 10);
    equipitem(grd_230_gardist, itmw_1h_sword_02 /*4402*/);
    equipitem(grd_230_gardist, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_start_230;
};

func void rtn_start_230() {
    ta_guardwheelopen(7, 55, 19, 55, "OCC_MAINGATE_VWHEEL");
    ta_guardwheelopen(19, 55, 7, 55, "OCC_MAINGATE_VWHEEL");
};

func void rtn_forgetspell_230() {
    ta_sitaround(0, 0, 24, 0, "OCC_CENTER_1");
};

func void rtn_omfull_230() {
    ta_guardpassage(21, 0, 6, 0, "OCR_MAINGATE_RIGHT_GUARD");
    ta_sleep(6, 0, 15, 0, "OCC_MERCS_UPPER_RIGHT_ROOM_BACK");
    ta_standaround(15, 0, 16, 0, "OCC_MERCS_RIGHT_ROOM_FRONT");
    ta_smoke(16, 0, 18, 0, "OCC_GATE_CAMPFIRE_1");
    ta_sitaround(18, 0, 21, 0, "OCC_GATE_CAMPFIRE_1");
};

func void rtn_fmtaken_230() {
    ta_guardwheelclosed(7, 0, 20, 0, "OCC_MAINGATE_VWHEEL");
    ta_guardwheelclosed(20, 0, 7, 0, "OCC_MAINGATE_VWHEEL");
};

instance grd_231_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 10;
    voice = 13;
    id = 231;
    attribute[atr_strength] /*4*/ = 35;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 160;
    attribute[atr_hitpoints] /*0*/ = 160;
    mdl_setvisual(grd_231_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_231_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_231_gardist, "hum_body_Naked0", 0, 2, "Hum_Head_Thief", 4, 1, grd_armor_l /*4125*/);
    b_scale(grd_231_gardist);
    mdl_setmodelfatness(grd_231_gardist, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_231_gardist, npc_talent_1h, 1);
    npc_settalentskill(grd_231_gardist, npc_talent_1h, 1);
    createinvitem(grd_231_gardist, itmw_1h_sword_01);
    createinvitem(grd_231_gardist, itfoapple);
    createinvitems(grd_231_gardist, itminugget, 10);
    daily_routine = rtn_start_231;
};

func void rtn_start_231() {
    ta_sleep(1, 40, 7, 50, "OCC_MERCS_UPPER_LEFT_ROOM_BED7");
    ta_standaround(7, 50, 1, 40, "OCC_WELL_RIGHT_MOVEMENT3");
};

instance grd_232_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 15;
    voice = 13;
    id = 232;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 220;
    attribute[atr_hitpoints] /*0*/ = 220;
    mdl_setvisual(grd_232_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_232_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_232_gardist, "hum_body_Naked0", 0, 0, "Hum_Head_Thief", 1, 2, grd_armor_m /*4126*/);
    b_scale(grd_232_gardist);
    mdl_setmodelfatness(grd_232_gardist, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_232_gardist, npc_talent_1h, 2);
    npc_settalentskill(grd_232_gardist, npc_talent_2h, 1);
    npc_settalentskill(grd_232_gardist, npc_talent_crossbow, 1);
    createinvitem(grd_232_gardist, itfocheese);
    createinvitem(grd_232_gardist, itfoapple);
    createinvitem(grd_232_gardist, itlstorch);
    createinvitems(grd_232_gardist, itambolt, 30);
    createinvitems(grd_232_gardist, itminugget, 10);
    equipitem(grd_232_gardist, itmw_1h_sword_02 /*4402*/);
    equipitem(grd_232_gardist, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_start_232;
};

func void rtn_start_232() {
    ta_sleep(23, 0, 7, 0, "OCC_MERCS_LEFT_ROOM_BED1");
    ta_smalltalk(7, 0, 23, 0, "OCR_TO_MAINGATE_INSERT");
};

func void rtn_fmtaken_232() {
    ta_stayneutral(7, 0, 20, 0, "OCR_NORTHGATE_RIGHT_GUARD_CHANGE");
    ta_stayneutral(20, 0, 7, 0, "OCR_NORTHGATE_RIGHT_GUARD_CHANGE");
};

func void rtn_fmtaken2_232() {
    ta_stay(7, 0, 20, 0, "OCR_NORTHGATE_RIGHT_GUARD_CHANGE");
    ta_stay(20, 0, 7, 0, "OCR_NORTHGATE_RIGHT_GUARD_CHANGE");
};

instance grd_233_bloodwyn(npc_default) {
    name = "Áëàäâèí";
    npctype = npctype_main;
    guild = gil_grd;
    level = 15;
    voice = 8;
    id = 233;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 160;
    attribute[atr_hitpoints] /*0*/ = 160;
    mdl_setvisual(grd_233_bloodwyn, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_233_bloodwyn, "Humans_Militia.mds");
    mdl_setvisualbody(grd_233_bloodwyn, "hum_body_Naked0", 0, 1, "Hum_Head_Bald", 18, 1, grd_armor_m /*4126*/);
    b_scale(grd_233_bloodwyn);
    mdl_setmodelfatness(grd_233_bloodwyn, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_233_bloodwyn, npc_talent_1h, 2);
    createinvitem(grd_233_bloodwyn, itfoapple);
    createinvitems(grd_233_bloodwyn, itminugget, 10);
    equipitem(grd_233_bloodwyn, itmw_1h_sword_04 /*4404*/);
    daily_routine = rtn_start_233;
};

func void rtn_start_233() {
    ta_guard(6, 0, 7, 0, "OCR_OUTSIDE_HUT_77_INSERT");
    ta_guard(7, 0, 8, 0, "OCR_OUTSIDE_HUT_63");
    ta_guard(8, 0, 9, 0, "OCR_OUTSIDE_HUT_77_INSERT");
    ta_guard(9, 0, 10, 0, "OCR_OUTSIDE_HUT_63");
    ta_guard(10, 0, 11, 0, "OCR_OUTSIDE_HUT_77_INSERT");
    ta_guard(11, 0, 12, 0, "OCR_OUTSIDE_HUT_63");
    ta_guard(12, 0, 13, 0, "OCR_OUTSIDE_HUT_77_INSERT");
    ta_guard(13, 0, 14, 0, "OCR_OUTSIDE_HUT_63");
    ta_guard(14, 0, 15, 0, "OCR_OUTSIDE_HUT_77_INSERT");
    ta_guard(15, 0, 16, 0, "OCR_OUTSIDE_HUT_63");
    ta_guard(16, 0, 17, 0, "OCR_OUTSIDE_HUT_77_INSERT");
    ta_guard(17, 0, 18, 0, "OCR_OUTSIDE_HUT_63");
    ta_guard(18, 0, 19, 0, "OCR_OUTSIDE_HUT_77_INSERT");
    ta_guard(19, 0, 20, 0, "OCR_OUTSIDE_HUT_63");
    ta_guard(20, 0, 21, 0, "OCR_OUTSIDE_HUT_77_INSERT");
    ta_guard(21, 0, 22, 0, "OCR_OUTSIDE_HUT_63");
    ta_guard(22, 0, 23, 0, "OCR_OUTSIDE_HUT_77_INSERT");
    ta_guard(23, 0, 0, 0, "OCR_OUTSIDE_HUT_63");
    ta_guard(0, 0, 1, 0, "OCR_OUTSIDE_HUT_77_INSERT");
    ta_guard(1, 0, 2, 0, "OCR_OUTSIDE_HUT_63");
    ta_guard(2, 0, 3, 0, "OCR_OUTSIDE_HUT_77_INSERT");
    ta_guard(3, 0, 4, 0, "OCR_OUTSIDE_HUT_63");
    ta_guard(4, 0, 5, 0, "OCR_OUTSIDE_HUT_77_INSERT");
    ta_guard(5, 0, 6, 0, "OCR_OUTSIDE_HUT_63");
};

func void rtn_fmtaken_233() {
    ta_stayneutral(7, 0, 20, 0, "OCR_NORTHGATE_LEFT_GUARD_CHANGE");
    ta_stayneutral(20, 0, 7, 0, "OCR_NORTHGATE_LEFT_GUARD_CHANGE");
};

func void rtn_fmtaken2_233() {
    ta_stay(7, 0, 20, 0, "OCR_NORTHGATE_LEFT_GUARD_CHANGE");
    ta_stay(20, 0, 7, 0, "OCR_NORTHGATE_LEFT_GUARD_CHANGE");
};

instance grd_234_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_mine_guard;
    guild = gil_grd;
    level = 10;
    voice = 7;
    id = 234;
    attribute[atr_strength] /*4*/ = 35;
    attribute[atr_dexterity] /*5*/ = 35;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 160;
    attribute[atr_hitpoints] /*0*/ = 160;
    mdl_setvisual(grd_234_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_234_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_234_gardist, "hum_body_Naked0", 0, 2, "Hum_Head_Bald", 3, 2, grd_armor_l /*4125*/);
    b_scale(grd_234_gardist);
    mdl_setmodelfatness(grd_234_gardist, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_234_gardist, npc_talent_1h, 1);
    npc_settalentskill(grd_234_gardist, npc_talent_1h, 1);
    createinvitem(grd_234_gardist, itfoapple);
    createinvitems(grd_234_gardist, itminugget, 10);
    equipitem(grd_234_gardist, itmw_1h_sword_01 /*4401*/);
    daily_routine = rtn_start_234;
};

func void rtn_start_234() {
    ta_guard(21, 0, 6, 0, "OM_CAVE1_85");
    ta_guard(6, 0, 21, 0, "OM_CAVE1_85");
};

instance grd_235_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_mine_guard;
    guild = gil_grd;
    level = 10;
    voice = 13;
    id = 235;
    attribute[atr_strength] /*4*/ = 35;
    attribute[atr_dexterity] /*5*/ = 35;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 160;
    attribute[atr_hitpoints] /*0*/ = 160;
    mdl_setvisual(grd_235_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_235_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_235_gardist, "hum_body_Naked0", 0, 3, "Hum_Head_FatBald", 2, 1, grd_armor_l /*4125*/);
    b_scale(grd_235_gardist);
    mdl_setmodelfatness(grd_235_gardist, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_235_gardist, npc_talent_1h, 1);
    npc_settalentskill(grd_235_gardist, npc_talent_1h, 1);
    createinvitem(grd_235_gardist, itfoapple);
    createinvitems(grd_235_gardist, itminugget, 10);
    equipitem(grd_235_gardist, itmw_1h_sword_01 /*4401*/);
    daily_routine = rtn_start_235;
};

func void rtn_start_235() {
    ta_guard(21, 0, 6, 0, "OM_CAVE1_79");
    ta_guard(6, 0, 21, 0, "OM_CAVE1_79");
};

instance grd_236_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_mine_guard;
    guild = gil_grd;
    level = 10;
    voice = 6;
    id = 236;
    attribute[atr_strength] /*4*/ = 35;
    attribute[atr_dexterity] /*5*/ = 35;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 160;
    attribute[atr_hitpoints] /*0*/ = 160;
    mdl_setvisual(grd_236_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_236_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_236_gardist, "hum_body_Naked0", 0, 2, "Hum_Head_Fighter", 3, 1, grd_armor_l /*4125*/);
    b_scale(grd_236_gardist);
    mdl_setmodelfatness(grd_236_gardist, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_236_gardist, npc_talent_1h, 1);
    npc_settalentskill(grd_236_gardist, npc_talent_1h, 1);
    createinvitem(grd_236_gardist, itfoapple);
    createinvitems(grd_236_gardist, itminugget, 10);
    equipitem(grd_236_gardist, itmw_1h_sword_01 /*4401*/);
    daily_routine = rtn_start_236;
};

func void rtn_start_236() {
    ta_guard(21, 0, 6, 0, "OM_CAVE3_01");
    ta_guard(6, 0, 21, 0, "OM_CAVE3_01");
};

instance grd_237_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 20;
    voice = 7;
    id = 237;
    attribute[atr_strength] /*4*/ = 100;
    attribute[atr_dexterity] /*5*/ = 80;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 280;
    attribute[atr_hitpoints] /*0*/ = 280;
    mdl_setvisual(grd_237_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_237_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_237_gardist, "hum_body_Naked0", 0, 3, "Hum_Head_Thief", 1, 2, grd_armor_h /*4127*/);
    b_scale(grd_237_gardist);
    mdl_setmodelfatness(grd_237_gardist, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_237_gardist, npc_talent_1h, 2);
    npc_settalentskill(grd_237_gardist, npc_talent_2h, 1);
    npc_settalentskill(grd_237_gardist, npc_talent_crossbow, 1);
    createinvitem(grd_237_gardist, itmw_1h_sword_03);
    createinvitem(grd_237_gardist, itrw_crossbow_01);
    createinvitem(grd_237_gardist, itfomutton);
    createinvitem(grd_237_gardist, itfo_potion_health_01);
    createinvitem(grd_237_gardist, itlstorch);
    createinvitems(grd_237_gardist, itambolt, 30);
    createinvitems(grd_237_gardist, itminugget, 20);
    daily_routine = rtn_start_237;
};

func void rtn_start_237() {
    ta_guardpassage(0, 0, 6, 0, "SPAWN_PATH_GUARD1");
    ta_guardpassage(6, 0, 24, 0, "SPAWN_PATH_GUARD1");
};

instance grd_238_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 15;
    voice = 13;
    id = 238;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 160;
    attribute[atr_hitpoints] /*0*/ = 160;
    mdl_setvisual(grd_238_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_238_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_238_gardist, "hum_body_Naked0", 0, 1, "Hum_Head_Thief", 14, 2, grd_armor_m /*4126*/);
    b_scale(grd_238_gardist);
    mdl_setmodelfatness(grd_238_gardist, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_238_gardist, npc_talent_1h, 2);
    npc_settalentskill(grd_238_gardist, npc_talent_2h, 1);
    npc_settalentskill(grd_238_gardist, npc_talent_crossbow, 1);
    createinvitem(grd_238_gardist, itmw_1h_sword_02);
    createinvitem(grd_238_gardist, itrw_crossbow_01);
    createinvitem(grd_238_gardist, itfocheese);
    createinvitem(grd_238_gardist, itfoapple);
    createinvitem(grd_238_gardist, itlstorch);
    createinvitems(grd_238_gardist, itambolt, 30);
    createinvitems(grd_238_gardist, itminugget, 10);
    daily_routine = rtn_start_238;
};

func void rtn_start_238() {
    ta_guardpassage(0, 0, 6, 0, "SPAWN_PATH_GUARD1");
    ta_guardpassage(6, 0, 24, 0, "SPAWN_PATH_GUARD1");
};

instance grd_239_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_ambient;
    guild = gil_grd;
    level = 15;
    voice = 7;
    id = 239;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 220;
    attribute[atr_hitpoints] /*0*/ = 220;
    mdl_setvisual(grd_239_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_239_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_239_gardist, "hum_body_Naked0", 0, 0, "Hum_Head_FatBald", 10, 1, grd_armor_m /*4126*/);
    b_scale(grd_239_gardist);
    mdl_setmodelfatness(grd_239_gardist, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_239_gardist, npc_talent_1h, 2);
    npc_settalentskill(grd_239_gardist, npc_talent_1h, 1);
    npc_settalentskill(grd_239_gardist, npc_talent_2h, 1);
    npc_settalentskill(grd_239_gardist, npc_talent_crossbow, 1);
    createinvitem(grd_239_gardist, itfocheese);
    createinvitem(grd_239_gardist, itfoapple);
    createinvitem(grd_239_gardist, itlstorch);
    createinvitems(grd_239_gardist, itambolt, 30);
    createinvitems(grd_239_gardist, itminugget, 10);
    equipitem(grd_239_gardist, itmw_1h_sword_02 /*4402*/);
    equipitem(grd_239_gardist, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_start_239;
};

func void rtn_start_239() {
    ta_standaround(18, 0, 19, 0, "OCC_CELLAR_HALLWAY_FRONT");
    ta_standaround(19, 0, 18, 0, "OCC_CELLAR_HALLWAY_FRONT");
};

func void rtn_ot_239() {
    ta_guard(7, 0, 20, 0, "OCC_CELLAR_HALL");
    ta_guard(20, 0, 7, 0, "OCC_CELLAR_HALL");
};

instance grd_240_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 20;
    voice = 7;
    id = 240;
    attribute[atr_strength] /*4*/ = 100;
    attribute[atr_dexterity] /*5*/ = 80;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 280;
    attribute[atr_hitpoints] /*0*/ = 280;
    mdl_setvisual(grd_240_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_240_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_240_gardist, "hum_body_Naked0", 0, 0, "Hum_Head_Bald", 3, 1, grd_armor_h /*4127*/);
    b_scale(grd_240_gardist);
    mdl_setmodelfatness(grd_240_gardist, 1.0);
    fight_tactic = fai_human_ranged;
    npc_settalentskill(grd_240_gardist, npc_talent_1h, 2);
    npc_settalentskill(grd_240_gardist, npc_talent_2h, 1);
    npc_settalentskill(grd_240_gardist, npc_talent_crossbow, 1);
    createinvitem(grd_240_gardist, itfomutton);
    createinvitem(grd_240_gardist, itfo_potion_health_01);
    createinvitem(grd_240_gardist, itlstorch);
    createinvitems(grd_240_gardist, itambolt, 30);
    createinvitems(grd_240_gardist, itminugget, 20);
    equipitem(grd_240_gardist, itmw_1h_sword_03 /*4403*/);
    equipitem(grd_240_gardist, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_start_240;
};

func void rtn_start_240() {
    ta_guardpalisade(6, 0, 21, 0, "OCR_PALISADE_WALK_10");
    ta_guardpalisade(21, 0, 6, 0, "OCR_PALISADE_WALK_10");
};

func void rtn_omfull_240() {
    ta_guardpassage(6, 0, 21, 0, "OCC_BARONS_RIGHT_GUARD");
    ta_standaround(21, 0, 22, 0, "OCC_MERCS_RIGHT_ROOM_FRONT");
    ta_sitaround(22, 0, 24, 0, "OCC_MERCS_RIGHT_ROOM_BACK");
    ta_sleep(24, 0, 6, 0, "OCC_MERCS_UPPER_LEFT_ROOM_BACK");
};

func void rtn_fmtaken_240() {
};

func void rtn_orcassault_240() {
};

instance grd_241_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 20;
    voice = 6;
    id = 241;
    attribute[atr_strength] /*4*/ = 100;
    attribute[atr_dexterity] /*5*/ = 80;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 280;
    attribute[atr_hitpoints] /*0*/ = 280;
    mdl_setvisual(grd_241_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_241_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_241_gardist, "hum_body_Naked0", 0, 0, "Hum_Head_Psionic", 2, 1, grd_armor_h /*4127*/);
    b_scale(grd_241_gardist);
    mdl_setmodelfatness(grd_241_gardist, 0.0);
    fight_tactic = fai_human_ranged;
    npc_settalentskill(grd_241_gardist, npc_talent_1h, 2);
    npc_settalentskill(grd_241_gardist, npc_talent_2h, 1);
    npc_settalentskill(grd_241_gardist, npc_talent_crossbow, 1);
    createinvitem(grd_241_gardist, itfomutton);
    createinvitem(grd_241_gardist, itfo_potion_health_01);
    createinvitem(grd_241_gardist, itlstorch);
    createinvitems(grd_241_gardist, itambolt, 30);
    createinvitems(grd_241_gardist, itminugget, 20);
    equipitem(grd_241_gardist, itmw_1h_sword_03 /*4403*/);
    equipitem(grd_241_gardist, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_start_241;
};

func void rtn_start_241() {
    ta_guardpalisade(6, 0, 21, 0, "OCR_PALISADE_WALK_14");
    ta_guardpalisade(21, 0, 6, 0, "OCR_PALISADE_WALK_14");
};

func void rtn_omfull_241() {
    ta_guardpatrol(3, 0, 4, 0, "OCR_MAINGATE_SQUARE");
    ta_guardpatrol(4, 0, 5, 0, "OCR_TO_HUT_72");
    ta_guardpatrol(5, 0, 6, 0, "OCR_NORTHGATE_RAMP_ATOP");
    ta_sleep(6, 0, 14, 0, "OCC_MERCS_UPPER_RIGHT_ROOM_FRONT");
    ta_sitaround(14, 0, 3, 0, "OCC_MERCS_RIGHT_ROOM_BACK");
};

func void rtn_fmtaken_241() {
};

func void rtn_orcassault_241() {
};

instance grd_242_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 20;
    voice = 7;
    id = 242;
    attribute[atr_strength] /*4*/ = 100;
    attribute[atr_dexterity] /*5*/ = 80;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 280;
    attribute[atr_hitpoints] /*0*/ = 280;
    mdl_setvisual(grd_242_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_242_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_242_gardist, "hum_body_Naked0", 0, 3, "Hum_Head_Thief", 1, 2, grd_armor_h /*4127*/);
    b_scale(grd_242_gardist);
    mdl_setmodelfatness(grd_242_gardist, 0.0);
    fight_tactic = fai_human_ranged;
    npc_settalentskill(grd_242_gardist, npc_talent_1h, 2);
    npc_settalentskill(grd_242_gardist, npc_talent_2h, 1);
    npc_settalentskill(grd_242_gardist, npc_talent_crossbow, 1);
    createinvitem(grd_242_gardist, itfomutton);
    createinvitem(grd_242_gardist, itfo_potion_health_01);
    createinvitem(grd_242_gardist, itlstorch);
    createinvitems(grd_242_gardist, itambolt, 30);
    createinvitems(grd_242_gardist, itminugget, 20);
    equipitem(grd_242_gardist, itmw_1h_sword_03 /*4403*/);
    equipitem(grd_242_gardist, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_start_242;
};

func void rtn_start_242() {
    ta_guardpalisade(6, 0, 21, 0, "OCR_PALISADE_WALK_15");
    ta_guardpalisade(21, 0, 6, 0, "OCR_PALISADE_WALK_15");
};

func void rtn_omfull_242() {
    ta_guardpalisade(6, 0, 21, 0, "OCC_BARONS_UPSTAIRS_PROMENADE_LEFT_GUARD");
    ta_sitaround(21, 0, 24, 0, "OCC_MERCS_RIGHT_ROOM_FRONT");
    ta_sleep(24, 0, 6, 0, "OCC_MERCS_UPPER_RIGHT_ROOM_FRONT");
};

func void rtn_fmtaken_242() {
};

func void rtn_orcassault_242() {
};

instance grd_243_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 20;
    voice = 6;
    id = 243;
    attribute[atr_strength] /*4*/ = 100;
    attribute[atr_dexterity] /*5*/ = 80;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 280;
    attribute[atr_hitpoints] /*0*/ = 280;
    mdl_setvisual(grd_243_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_243_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_243_gardist, "hum_body_Naked0", 0, 2, "Hum_Head_Bald", 4, 1, grd_armor_h /*4127*/);
    b_scale(grd_243_gardist);
    mdl_setmodelfatness(grd_243_gardist, 0.0);
    fight_tactic = fai_human_ranged;
    npc_settalentskill(grd_243_gardist, npc_talent_1h, 2);
    npc_settalentskill(grd_243_gardist, npc_talent_2h, 1);
    npc_settalentskill(grd_243_gardist, npc_talent_crossbow, 1);
    createinvitem(grd_243_gardist, itfomutton);
    createinvitem(grd_243_gardist, itfo_potion_health_01);
    createinvitem(grd_243_gardist, itlstorch);
    createinvitems(grd_243_gardist, itambolt, 30);
    createinvitems(grd_243_gardist, itminugget, 20);
    equipitem(grd_243_gardist, itmw_1h_sword_03 /*4403*/);
    equipitem(grd_243_gardist, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_start_243;
};

func void rtn_start_243() {
    ta_guardpalisade(6, 0, 21, 0, "OCR_PALISADE_WALK_17");
    ta_guardpalisade(21, 0, 6, 0, "OCR_PALISADE_WALK_17");
};

func void rtn_omfull_243() {
    ta_guardpalisade(8, 0, 22, 0, "VIEW_PSI");
    ta_standaround(22, 0, 23, 0, "OCC_MERCS_RIGHT_ROOM_FRONT");
    ta_sitaround(23, 0, 24, 0, "OCC_CENTER_2");
    ta_sleep(24, 0, 8, 0, "OCC_MERCS_UPPER_LEFT_ROOM_FRONT");
};

func void rtn_fmtaken_243() {
    ta_guardpatrol(8, 0, 24, 0, "FMC_FM_ENTRANCE");
    ta_sleep(24, 0, 8, 0, "OCC_MERCS_UPPER_LEFT_ROOM_FRONT");
};

func void rtn_orcassault_243() {
};

instance grd_244_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 20;
    voice = 7;
    id = 244;
    attribute[atr_strength] /*4*/ = 100;
    attribute[atr_dexterity] /*5*/ = 80;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 280;
    attribute[atr_hitpoints] /*0*/ = 280;
    mdl_setvisual(grd_244_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_244_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_244_gardist, "hum_body_Naked0", 0, 1, "Hum_Head_Fighter", 18, 2, grd_armor_h /*4127*/);
    b_scale(grd_244_gardist);
    mdl_setmodelfatness(grd_244_gardist, 0.0);
    fight_tactic = fai_human_ranged;
    npc_settalentskill(grd_244_gardist, npc_talent_1h, 2);
    npc_settalentskill(grd_244_gardist, npc_talent_2h, 1);
    npc_settalentskill(grd_244_gardist, npc_talent_crossbow, 1);
    createinvitem(grd_244_gardist, itfomutton);
    createinvitem(grd_244_gardist, itfo_potion_health_01);
    createinvitem(grd_244_gardist, itlstorch);
    createinvitems(grd_244_gardist, itambolt, 30);
    createinvitems(grd_244_gardist, itminugget, 20);
    equipitem(grd_244_gardist, itmw_1h_sword_03 /*4403*/);
    equipitem(grd_244_gardist, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_start_244;
};

func void rtn_start_244() {
    ta_guardpalisade(6, 0, 21, 0, "OCR_PALISADE_WALK_18");
    ta_guardpalisade(21, 0, 6, 0, "OCR_PALISADE_WALK_18");
};

func void rtn_fmtaken_244() {
    ta_stayneutral(7, 0, 20, 0, "OCR_MAINGATE_OUTSIDE");
    ta_stayneutral(20, 0, 7, 0, "OCR_MAINGATE_OUTSIDE");
};

func void rtn_fmtaken2_244() {
    ta_stay(7, 0, 20, 0, "OCR_MAINGATE_OUTSIDE");
    ta_stay(20, 0, 7, 0, "OCR_MAINGATE_OUTSIDE");
};

instance grd_245_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 20;
    voice = 13;
    id = 245;
    attribute[atr_strength] /*4*/ = 100;
    attribute[atr_dexterity] /*5*/ = 80;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 280;
    attribute[atr_hitpoints] /*0*/ = 280;
    mdl_setvisual(grd_245_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_245_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_245_gardist, "hum_body_Naked0", 0, 0, "Hum_Head_Psionic", 2, 1, grd_armor_h /*4127*/);
    b_scale(grd_245_gardist);
    mdl_setmodelfatness(grd_245_gardist, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_245_gardist, npc_talent_1h, 2);
    npc_settalentskill(grd_245_gardist, npc_talent_2h, 1);
    npc_settalentskill(grd_245_gardist, npc_talent_crossbow, 2);
    createinvitem(grd_245_gardist, itfomutton);
    createinvitem(grd_245_gardist, itfo_potion_health_01);
    createinvitem(grd_245_gardist, itlstorch);
    createinvitems(grd_245_gardist, itambolt, 30);
    createinvitems(grd_245_gardist, itminugget, 20);
    equipitem(grd_245_gardist, itmw_1h_sword_03 /*4403*/);
    equipitem(grd_245_gardist, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_start_245;
};

func void rtn_start_245() {
    ta_stand(6, 0, 21, 0, "OCC_BARONS_LEFT_GUARD");
    ta_stand(21, 0, 6, 0, "OCC_BARONS_LEFT_GUARD");
};

func void rtn_ot_245() {
    ta_guard(7, 0, 20, 0, "OCC_WELL_FIGHT01");
    ta_guard(20, 0, 7, 0, "OCC_WELL_FIGHT01");
};

instance grd_246_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 30;
    voice = 13;
    id = 246;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 220;
    attribute[atr_hitpoints] /*0*/ = 220;
    mdl_setvisual(grd_246_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_246_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_246_gardist, "hum_body_Naked0", 0, 0, "Hum_Head_Thief", 1, 2, grd_armor_m /*4126*/);
    b_scale(grd_246_gardist);
    mdl_setmodelfatness(grd_246_gardist, 0.0);
    fight_tactic = fai_human_ranged;
    npc_settalentskill(grd_246_gardist, npc_talent_1h, 2);
    npc_settalentskill(grd_246_gardist, npc_talent_2h, 1);
    npc_settalentskill(grd_246_gardist, npc_talent_crossbow, 1);
    createinvitem(grd_246_gardist, itfocheese);
    createinvitem(grd_246_gardist, itfoapple);
    createinvitem(grd_246_gardist, itlstorch);
    createinvitems(grd_246_gardist, itambolt, 30);
    createinvitems(grd_246_gardist, itminugget, 10);
    equipitem(grd_246_gardist, itmw_1h_sword_02 /*4402*/);
    equipitem(grd_246_gardist, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_fmstart_246;
};

func void rtn_fmstart_246() {
    ta_guardpalisade(0, 0, 13, 0, "FM_100");
    ta_guardpalisade(13, 0, 0, 0, "FM_100");
};

instance grd_250_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_mine_guard;
    guild = gil_grd;
    level = 15;
    flags = npc_flag_immortal;
    voice = 6;
    id = 250;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 160;
    attribute[atr_hitpoints] /*0*/ = 160;
    mdl_setvisual(grd_250_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_250_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_250_gardist, "hum_body_Naked0", 0, 0, "Hum_Head_Thief", 1, 2, grd_armor_m /*4126*/);
    b_scale(grd_250_gardist);
    mdl_setmodelfatness(grd_250_gardist, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_250_gardist, npc_talent_1h, 2);
    npc_settalentskill(grd_250_gardist, npc_talent_2h, 1);
    npc_settalentskill(grd_250_gardist, npc_talent_crossbow, 1);
    createinvitem(grd_250_gardist, itmw_1h_sword_02);
    createinvitem(grd_250_gardist, itrw_crossbow_01);
    createinvitem(grd_250_gardist, itfocheese);
    createinvitem(grd_250_gardist, itfoapple);
    createinvitem(grd_250_gardist, itlstorch);
    createinvitems(grd_250_gardist, itambolt, 30);
    createinvitems(grd_250_gardist, itminugget, 10);
    daily_routine = rtn_start_250;
};

func void rtn_start_250() {
    ta_guardwheelopen(22, 0, 8, 0, "OW_OM_ENTRANCE02_WHEEL_USE");
    ta_guardwheelopen(8, 0, 22, 0, "OW_OM_ENTRANCE02_WHEEL_USE");
};

func void rtn_fmtaken_250() {
    ta_guardwheelclosed(22, 0, 8, 0, "OW_OM_ENTRANCE02_WHEEL_USE");
    ta_guardwheelclosed(8, 0, 22, 0, "OW_OM_ENTRANCE02_WHEEL_USE");
};

instance grd_251_kirgo(npc_default) {
    name = "Êèðãî";
    npctype = npctype_main;
    guild = gil_none;
    level = 10;
    voice = 5;
    id = 251;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 160;
    attribute[atr_hitpoints] /*0*/ = 160;
    mdl_setvisual(grd_251_kirgo, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_251_kirgo, "Humans_Militia.mds");
    mdl_setvisualbody(grd_251_kirgo, "hum_body_Naked0", 0, 3, "Hum_Head_FatBald", 2, 1, grd_armor_l /*4125*/);
    b_scale(grd_251_kirgo);
    mdl_setmodelfatness(grd_251_kirgo, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_251_kirgo, npc_talent_1h, 1);
    npc_settalentskill(grd_251_kirgo, npc_talent_1h, 1);
    createinvitem(grd_251_kirgo, itfoapple);
    createinvitems(grd_251_kirgo, itminugget, 10);
    equipitem(grd_251_kirgo, itmw_1h_sword_01 /*4401*/);
    daily_routine = rtn_start_251;
};

func void rtn_start_251() {
    ta_sleep(23, 45, 7, 45, "OCR_HUT_21");
    ta_standaround(7, 45, 10, 0, "OCR_ARENABATTLE_OUTSIDE");
    ta_practicesword(10, 0, 14, 5, "OCR_ARENABATTLE");
    ta_smith_sharp(14, 5, 17, 15, "OCR_ARENABATTLE_OUTSIDE");
    ta_sitcampfire(17, 15, 23, 45, "OCR_ARENABATTLE_OUTSIDE");
};

func void rtn_guide_251() {
    ta_guidepc(8, 0, 20, 0, "OCR_ARENABATTLE_TRAIN");
    ta_guidepc(20, 0, 8, 0, "OCR_ARENABATTLE_TRAIN");
};

instance grd_252_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 10;
    voice = 6;
    id = 252;
    attribute[atr_strength] /*4*/ = 35;
    attribute[atr_dexterity] /*5*/ = 35;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 160;
    attribute[atr_hitpoints] /*0*/ = 160;
    mdl_setvisual(grd_252_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_252_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_252_gardist, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 19, 1, grd_armor_l /*4125*/);
    b_scale(grd_252_gardist);
    mdl_setmodelfatness(grd_252_gardist, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_252_gardist, npc_talent_1h, 1);
    npc_settalentskill(grd_252_gardist, npc_talent_1h, 1);
    createinvitem(grd_252_gardist, itfoapple);
    createinvitems(grd_252_gardist, itminugget, 10);
    equipitem(grd_252_gardist, itmw_1h_sword_01 /*4401*/);
    daily_routine = rtn_start_252;
};

func void rtn_start_252() {
    ta_sleep(23, 0, 6, 0, "OCC_MERCS_LEFT_ROOM_BED2");
    ta_smalltalk(6, 0, 23, 0, "OCR_TO_MAINGATE_INSERT");
};

func void rtn_fmtaken_252() {
    ta_stayneutral(7, 0, 20, 0, "OCR_MAINGATE_OUTSIDE");
    ta_stayneutral(20, 0, 7, 0, "OCR_MAINGATE_OUTSIDE");
};

func void rtn_fmtaken2_252() {
    ta_stay(7, 0, 20, 0, "OCR_MAINGATE_OUTSIDE");
    ta_stay(20, 0, 7, 0, "OCR_MAINGATE_OUTSIDE");
};

instance grd_253_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 10;
    voice = 7;
    id = 253;
    attribute[atr_strength] /*4*/ = 35;
    attribute[atr_dexterity] /*5*/ = 35;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 160;
    attribute[atr_hitpoints] /*0*/ = 160;
    mdl_setvisual(grd_253_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_253_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_253_gardist, "hum_body_Naked0", 0, 1, "Hum_Head_Psionic", 14, 1, grd_armor_l /*4125*/);
    b_scale(grd_253_gardist);
    mdl_setmodelfatness(grd_253_gardist, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_253_gardist, npc_talent_1h, 1);
    npc_settalentskill(grd_253_gardist, npc_talent_1h, 1);
    createinvitem(grd_253_gardist, itfoapple);
    createinvitems(grd_253_gardist, itminugget, 10);
    equipitem(grd_253_gardist, itmw_1h_sword_01 /*4401*/);
    daily_routine = rtn_start_253;
};

func void rtn_start_253() {
    ta_smalltalk(0, 0, 8, 0, "OCR_AT_HUT_3");
    ta_smalltalk(8, 0, 0, 0, "OCR_AT_HUT_3");
};

func void rtn_fmtaken_253() {
    ta_stayneutral(7, 0, 20, 0, "OCR_MAINGATE_OUTSIDE");
    ta_stayneutral(20, 0, 7, 0, "OCR_MAINGATE_OUTSIDE");
};

func void rtn_fmtaken2_253() {
    ta_stay(7, 0, 20, 0, "OCR_MAINGATE_OUTSIDE");
    ta_stay(20, 0, 7, 0, "OCR_MAINGATE_OUTSIDE");
};

instance grd_254_orry(npc_default) {
    name = "Îððè";
    npctype = npctype_main;
    guild = gil_grd;
    level = 10;
    voice = 6;
    id = 254;
    attribute[atr_strength] /*4*/ = 35;
    attribute[atr_dexterity] /*5*/ = 35;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 160;
    attribute[atr_hitpoints] /*0*/ = 160;
    mdl_setvisual(grd_254_orry, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_254_orry, "Humans_Militia.mds");
    mdl_setvisualbody(grd_254_orry, "hum_body_Naked0", 0, 1, "Hum_Head_Psionic", 14, 1, grd_armor_l /*4125*/);
    b_scale(grd_254_orry);
    mdl_setmodelfatness(grd_254_orry, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_254_orry, npc_talent_1h, 1);
    npc_settalentskill(grd_254_orry, npc_talent_1h, 1);
    createinvitem(grd_254_orry, itfoapple);
    createinvitems(grd_254_orry, itambolt, 30);
    createinvitems(grd_254_orry, itminugget, 10);
    equipitem(grd_254_orry, itmw_1h_sword_01 /*4401*/);
    equipitem(grd_254_orry, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_start_254;
};

func void rtn_start_254() {
    ta_guardpalisade(0, 0, 23, 0, "OW_PATH_1_16_B");
    ta_guardpalisade(23, 0, 24, 0, "OW_PATH_1_16_B");
};

func void rtn_omfull_254() {
};

func void rtn_fmtaken_254() {
};

func void rtn_orcassault_254() {
};

instance grd_255_fletcher(npc_default) {
    name = "Ôëåò÷åð";
    npctype = npctype_main;
    guild = gil_grd;
    level = 15;
    voice = 6;
    id = 255;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 220;
    attribute[atr_hitpoints] /*0*/ = 220;
    mdl_setvisual(grd_255_fletcher, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_255_fletcher, "Humans_Militia.mds");
    mdl_setvisualbody(grd_255_fletcher, "hum_body_Naked0", 0, 0, "Hum_Head_Thief", 1, 2, grd_armor_m /*4126*/);
    b_scale(grd_255_fletcher);
    mdl_setmodelfatness(grd_255_fletcher, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_255_fletcher, npc_talent_1h, 2);
    npc_settalentskill(grd_255_fletcher, npc_talent_2h, 1);
    npc_settalentskill(grd_255_fletcher, npc_talent_crossbow, 1);
    createinvitem(grd_255_fletcher, itfocheese);
    createinvitem(grd_255_fletcher, itfoapple);
    createinvitem(grd_255_fletcher, itlstorch);
    createinvitems(grd_255_fletcher, itambolt, 30);
    createinvitems(grd_255_fletcher, itminugget, 10);
    equipitem(grd_255_fletcher, itmw_1h_sword_02 /*4402*/);
    equipitem(grd_255_fletcher, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_start_255;
};

func void rtn_start_255() {
    ta_guard(6, 0, 7, 0, "OCR_OUTSIDE_ARENA_BARONS_HUT");
    ta_guard(7, 0, 8, 0, "OCR_LADDER_TOP_01");
    ta_guard(8, 0, 9, 0, "OCR_OUTSIDE_ARENA_BARONS_HUT");
    ta_guard(9, 0, 10, 0, "OCR_BEHIND_HUT_17");
    ta_guard(10, 0, 11, 0, "OCR_OUTSIDE_ARENA_BARONS_HUT");
    ta_guard(11, 0, 12, 0, "OCR_LADDER_TOP_01");
    ta_guard(12, 0, 13, 0, "OCR_OUTSIDE_ARENA_BARONS_HUT");
    ta_guard(13, 0, 14, 0, "OCR_BEHIND_HUT_17");
    ta_guard(14, 0, 15, 0, "OCR_OUTSIDE_ARENA_BARONS_HUT");
    ta_guard(15, 0, 16, 0, "OCR_LADDER_TOP_01");
    ta_guard(16, 0, 17, 0, "OCR_OUTSIDE_ARENA_BARONS_HUT");
    ta_guard(17, 0, 18, 0, "OCR_BEHIND_HUT_17");
    ta_guard(18, 0, 19, 0, "OCR_OUTSIDE_ARENA_BARONS_HUT");
    ta_guard(19, 0, 20, 0, "OCR_LADDER_TOP_01");
    ta_guard(20, 0, 21, 0, "OCR_OUTSIDE_ARENA_BARONS_HUT");
    ta_guard(21, 0, 22, 0, "OCR_BEHIND_HUT_17");
    ta_guard(22, 0, 23, 0, "OCR_OUTSIDE_ARENA_BARONS_HUT");
    ta_guard(23, 0, 0, 0, "OCR_LADDER_TOP_01");
    ta_guard(0, 0, 1, 0, "OCR_OUTSIDE_ARENA_BARONS_HUT");
    ta_guard(1, 0, 2, 0, "OCR_BEHIND_HUT_17");
    ta_guard(2, 0, 3, 0, "OCR_OUTSIDE_ARENA_BARONS_HUT");
    ta_guard(3, 0, 4, 0, "OCR_LADDER_TOP_01");
    ta_guard(4, 0, 5, 0, "OCR_OUTSIDE_ARENA_BARONS_HUT");
    ta_guard(5, 0, 6, 0, "OCR_BEHIND_HUT_17");
};

func void rtn_fmtaken_255() {
    ta_stayneutral(7, 0, 20, 0, "OC1");
    ta_stayneutral(20, 0, 7, 0, "OC1");
};

func void rtn_fmtaken2_255() {
    ta_stay(7, 0, 20, 0, "OC1");
    ta_stay(20, 0, 7, 0, "OC1");
};

instance grd_260_drake(npc_default) {
    name = "Äðåéê";
    npctype = npctype_main;
    guild = gil_grd;
    level = 4;
    voice = 11;
    id = 260;
    attribute[atr_strength] /*4*/ = 35;
    attribute[atr_dexterity] /*5*/ = 35;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 220;
    attribute[atr_hitpoints] /*0*/ = 220;
    mdl_setvisual(grd_260_drake, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_260_drake, "Humans_Militia.mds");
    mdl_setvisualbody(grd_260_drake, "hum_body_Naked0", 0, 1, "Hum_Head_Fighter", 110, 1, grd_armor_m /*4126*/);
    b_scale(grd_260_drake);
    mdl_setmodelfatness(grd_260_drake, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_260_drake, npc_talent_1h, 2);
    npc_settalentskill(grd_260_drake, npc_talent_2h, 1);
    npc_settalentskill(grd_260_drake, npc_talent_crossbow, 1);
    createinvitem(grd_260_drake, itfocheese);
    createinvitem(grd_260_drake, itlstorch);
    createinvitems(grd_260_drake, itambolt, 30);
    createinvitems(grd_260_drake, itminugget, 10);
    equipitem(grd_260_drake, itmw_1h_sword_02 /*4402*/);
    equipitem(grd_260_drake, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_start_260;
};

func void rtn_start_260() {
    ta_guard(0, 0, 8, 0, "OM_CAVE1_12");
    ta_guard(8, 0, 24, 0, "OM_CAVE1_12");
};

instance grd_261_brandick(npc_default) {
    name = "Áðåíäèê";
    npctype = npctype_main;
    guild = gil_grd;
    level = 15;
    voice = 6;
    id = 261;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 220;
    attribute[atr_hitpoints] /*0*/ = 220;
    mdl_setvisual(grd_261_brandick, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_261_brandick, "Humans_Militia.mds");
    mdl_setvisualbody(grd_261_brandick, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 13, 1, grd_armor_m /*4126*/);
    b_scale(grd_261_brandick);
    mdl_setmodelfatness(grd_261_brandick, 2.0);
    fight_tactic = fai_human_ranged;
    npc_settalentskill(grd_261_brandick, npc_talent_1h, 2);
    npc_settalentskill(grd_261_brandick, npc_talent_2h, 1);
    npc_settalentskill(grd_261_brandick, npc_talent_crossbow, 1);
    createinvitem(grd_261_brandick, itfocheese);
    createinvitem(grd_261_brandick, itfoapple);
    createinvitem(grd_261_brandick, itlstorch);
    createinvitems(grd_261_brandick, itambolt, 30);
    createinvitems(grd_261_brandick, itminugget, 10);
    equipitem(grd_261_brandick, itmw_1h_sword_02 /*4402*/);
    equipitem(grd_261_brandick, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_start_261;
};

func void rtn_start_261() {
    ta_guard(0, 0, 12, 0, "OM_052");
    ta_guard(12, 0, 0, 0, "OM_052");
};

func void rtn_watch_261() {
    ta_guard(0, 0, 12, 0, "OM_055");
    ta_guard(12, 0, 0, 0, "OM_055");
};

instance grd_262_aaron(npc_default) {
    name = "Àðîí";
    npctype = npctype_main;
    guild = gil_grd;
    level = 15;
    voice = 9;
    id = 262;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 220;
    attribute[atr_hitpoints] /*0*/ = 220;
    mdl_setvisual(grd_262_aaron, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_262_aaron, "Humans_Militia.mds");
    mdl_setvisualbody(grd_262_aaron, "hum_body_Naked0", 1, 2, "Hum_Head_Thief", 3, 1, grd_armor_m /*4126*/);
    b_scale(grd_262_aaron);
    mdl_setmodelfatness(grd_262_aaron, 0.0);
    fight_tactic = fai_human_strong;
    senses = (sense_see | sense_hear) | sense_smell;
    npc_settalentskill(grd_262_aaron, npc_talent_1h, 2);
    npc_settalentskill(grd_262_aaron, npc_talent_2h, 1);
    npc_settalentskill(grd_262_aaron, npc_talent_crossbow, 1);
    createinvitem(grd_262_aaron, itfocheese);
    createinvitem(grd_262_aaron, itfoapple);
    createinvitem(grd_262_aaron, itlstorch);
    createinvitems(grd_262_aaron, itambolt, 30);
    createinvitems(grd_262_aaron, itminugget, 10);
    equipitem(grd_262_aaron, itmw_1h_sword_02 /*4402*/);
    equipitem(grd_262_aaron, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_start_262;
};

func void rtn_start_262() {
    ta_standaround(0, 0, 12, 0, "OM_CAVE1_34");
    ta_standaround(12, 0, 24, 0, "OM_CAVE1_34");
};

func void rtn_trick_262() {
    ta_stay(0, 0, 12, 0, "OM_CAVE1_47");
    ta_stay(12, 0, 24, 0, "OM_CAVE1_47");
};

instance grd_263_asghan(npc_default) {
    name = "Àñãõàí";
    npctype = npctype_main;
    guild = gil_grd;
    level = 20;
    flags = npc_flag_immortal;
    voice = 6;
    id = 263;
    attribute[atr_strength] /*4*/ = 100;
    attribute[atr_dexterity] /*5*/ = 80;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 280;
    attribute[atr_hitpoints] /*0*/ = 280;
    mdl_setvisual(grd_263_asghan, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_263_asghan, "Humans_Militia.mds");
    mdl_setvisualbody(grd_263_asghan, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 15, 1, grd_armor_h /*4127*/);
    b_scale(grd_263_asghan);
    mdl_setmodelfatness(grd_263_asghan, 0.0);
    fight_tactic = fai_human_strong;
    npc_setpermattitude(grd_263_asghan, att_neutral);
    npc_settalentskill(grd_263_asghan, npc_talent_1h, 2);
    npc_settalentskill(grd_263_asghan, npc_talent_2h, 1);
    npc_settalentskill(grd_263_asghan, npc_talent_crossbow, 1);
    createinvitem(grd_263_asghan, itfomutton);
    createinvitem(grd_263_asghan, itfo_potion_health_01);
    createinvitem(grd_263_asghan, itlstorch);
    createinvitems(grd_263_asghan, itambolt, 30);
    createinvitems(grd_263_asghan, itminugget, 20);
    equipitem(grd_263_asghan, itmw_1h_sword_03 /*4403*/);
    equipitem(grd_263_asghan, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_start_263;
};

func void rtn_start_263() {
    ta_stay(0, 0, 12, 0, "OM_CAVE3_21");
    ta_stay(12, 0, 24, 0, "OM_CAVE3_21");
};

func void rtn_opengate_263() {
    ta_stay(0, 0, 12, 0, "OM_CAVE3_18");
    ta_stay(12, 0, 24, 0, "OM_CAVE3_18");
};

instance grd_264_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_mine_guard;
    guild = gil_grd;
    level = 15;
    voice = 7;
    id = 264;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 220;
    attribute[atr_hitpoints] /*0*/ = 220;
    mdl_setvisual(grd_264_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_264_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_264_gardist, "hum_body_Naked0", 0, 3, "Hum_Head_Fighter", 1, 1, grd_armor_m /*4126*/);
    b_scale(grd_264_gardist);
    mdl_setmodelfatness(grd_264_gardist, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_264_gardist, npc_talent_1h, 2);
    npc_settalentskill(grd_264_gardist, npc_talent_2h, 1);
    npc_settalentskill(grd_264_gardist, npc_talent_crossbow, 1);
    createinvitem(grd_264_gardist, itfocheese);
    createinvitem(grd_264_gardist, itfoapple);
    createinvitem(grd_264_gardist, itlstorch);
    createinvitems(grd_264_gardist, itambolt, 30);
    createinvitems(grd_264_gardist, itminugget, 10);
    equipitem(grd_264_gardist, itmw_1h_sword_02 /*4402*/);
    equipitem(grd_264_gardist, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_start_264;
};

func void rtn_start_264() {
    ta_guard(0, 0, 8, 0, "OM_CAVE1_16");
    ta_guard(8, 0, 24, 0, "OM_CAVE1_16");
};

instance grd_265_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 10;
    voice = 7;
    id = 265;
    attribute[atr_strength] /*4*/ = 35;
    attribute[atr_dexterity] /*5*/ = 35;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 160;
    attribute[atr_hitpoints] /*0*/ = 160;
    mdl_setvisual(grd_265_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_265_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_265_gardist, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 19, 1, grd_armor_l /*4125*/);
    b_scale(grd_265_gardist);
    mdl_setmodelfatness(grd_265_gardist, 0.0);
    fight_tactic = fai_human_ranged;
    npc_settalentskill(grd_265_gardist, npc_talent_1h, 1);
    npc_settalentskill(grd_265_gardist, npc_talent_1h, 1);
    createinvitem(grd_265_gardist, itmw_1h_sword_01);
    createinvitem(grd_265_gardist, itrw_crossbow_01);
    createinvitem(grd_265_gardist, itfoapple);
    createinvitem(grd_265_gardist, itfomutton);
    createinvitem(grd_265_gardist, itfoloaf);
    createinvitem(grd_265_gardist, itat_teeth_01);
    createinvitem(grd_265_gardist, itat_claws_01);
    createinvitems(grd_265_gardist, itambolt, 30);
    createinvitems(grd_265_gardist, itminugget, 10);
    createinvitems(grd_265_gardist, itlstorch, 2);
    createinvitems(grd_265_gardist, itfo_potion_health_01, 1);
    daily_routine = rtn_start_265;
};

func void rtn_start_265() {
    ta_stand(7, 30, 22, 30, "OCR_OUTSIDE_HUT_48");
    ta_sleep(22, 30, 7, 30, "OCR_OUTSIDE_SMALLTALK_49");
};

instance grd_266_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_mine_guard;
    guild = gil_grd;
    level = 10;
    voice = 13;
    id = 266;
    attribute[atr_strength] /*4*/ = 35;
    attribute[atr_dexterity] /*5*/ = 35;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 160;
    attribute[atr_hitpoints] /*0*/ = 160;
    mdl_setvisual(grd_266_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_266_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_266_gardist, "hum_body_Naked0", 0, 0, "Hum_Head_Fighter", 1, 2, grd_armor_l /*4125*/);
    b_scale(grd_266_gardist);
    mdl_setmodelfatness(grd_266_gardist, 0.0);
    fight_tactic = fai_human_ranged;
    npc_settalentskill(grd_266_gardist, npc_talent_1h, 1);
    createinvitem(grd_266_gardist, itfoapple);
    createinvitems(grd_266_gardist, itambolt, 30);
    createinvitems(grd_266_gardist, itminugget, 10);
    equipitem(grd_266_gardist, itmw_1h_sword_01 /*4401*/);
    equipitem(grd_266_gardist, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_start_266;
};

func void rtn_start_266() {
    ta_guard(8, 0, 20, 0, "OM_050");
    ta_guard(20, 0, 8, 0, "OM_050");
};

instance grd_267_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_mine_guard;
    guild = gil_grd;
    level = 15;
    voice = 13;
    id = 267;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 220;
    attribute[atr_hitpoints] /*0*/ = 220;
    mdl_setvisual(grd_267_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_267_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_267_gardist, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 17, 4, grd_armor_m /*4126*/);
    b_scale(grd_267_gardist);
    mdl_setmodelfatness(grd_267_gardist, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_267_gardist, npc_talent_1h, 2);
    npc_settalentskill(grd_267_gardist, npc_talent_2h, 1);
    npc_settalentskill(grd_267_gardist, npc_talent_crossbow, 1);
    createinvitem(grd_267_gardist, itfocheese);
    createinvitem(grd_267_gardist, itfoapple);
    createinvitem(grd_267_gardist, itlstorch);
    createinvitems(grd_267_gardist, itambolt, 30);
    createinvitems(grd_267_gardist, itminugget, 10);
    equipitem(grd_267_gardist, itmw_1h_sword_02 /*4402*/);
    equipitem(grd_267_gardist, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_start_267;
};

func void rtn_start_267() {
    ta_guard(6, 0, 23, 0, "OM_CAVE1_70");
    ta_guard(23, 0, 6, 0, "OM_CAVE1_70");
};

instance grd_268_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_mine_guard;
    guild = gil_grd;
    level = 15;
    voice = 13;
    id = 268;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 220;
    attribute[atr_hitpoints] /*0*/ = 220;
    mdl_setvisual(grd_268_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_268_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_268_gardist, "hum_body_Naked0", 0, 1, "Hum_Head_Pony", 13, 1, grd_armor_m /*4126*/);
    b_scale(grd_268_gardist);
    mdl_setmodelfatness(grd_268_gardist, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_268_gardist, npc_talent_1h, 2);
    npc_settalentskill(grd_268_gardist, npc_talent_2h, 1);
    npc_settalentskill(grd_268_gardist, npc_talent_crossbow, 1);
    createinvitem(grd_268_gardist, itfocheese);
    createinvitem(grd_268_gardist, itfoapple);
    createinvitem(grd_268_gardist, itlstorch);
    createinvitems(grd_268_gardist, itambolt, 30);
    createinvitems(grd_268_gardist, itminugget, 10);
    equipitem(grd_268_gardist, itmw_1h_sword_02 /*4402*/);
    equipitem(grd_268_gardist, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_start_268;
};

func void rtn_start_268() {
    ta_guard(6, 0, 23, 0, "OM_CAVE1_66");
    ta_guard(23, 0, 6, 0, "OM_CAVE1_66");
};

instance grd_269_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_mine_guard;
    guild = gil_grd;
    level = 15;
    voice = 6;
    id = 269;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 160;
    attribute[atr_hitpoints] /*0*/ = 160;
    mdl_setvisual(grd_269_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_269_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_269_gardist, "hum_body_Naked0", 0, 0, "Hum_Head_Thief", 1, 2, grd_armor_m /*4126*/);
    b_scale(grd_269_gardist);
    mdl_setmodelfatness(grd_269_gardist, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_269_gardist, npc_talent_1h, 2);
    npc_settalentskill(grd_269_gardist, npc_talent_2h, 1);
    npc_settalentskill(grd_269_gardist, npc_talent_crossbow, 1);
    createinvitem(grd_269_gardist, itfocheese);
    createinvitem(grd_269_gardist, itfoapple);
    createinvitem(grd_269_gardist, itlstorch);
    createinvitems(grd_269_gardist, itambolt, 30);
    createinvitems(grd_269_gardist, itminugget, 10);
    equipitem(grd_269_gardist, itmw_1h_sword_02 /*4402*/);
    equipitem(grd_269_gardist, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_start_269;
};

func void rtn_start_269() {
    ta_guard(8, 0, 18, 0, "OM_201");
    ta_guard(18, 0, 8, 0, "OM_201");
};

instance grd_271_ulbert(npc_default) {
    name = "Óëüáåðò";
    npctype = npctype_main;
    guild = gil_grd;
    level = 10;
    voice = 7;
    id = 271;
    attribute[atr_strength] /*4*/ = 35;
    attribute[atr_dexterity] /*5*/ = 35;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 160;
    attribute[atr_hitpoints] /*0*/ = 160;
    mdl_setvisual(grd_271_ulbert, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_271_ulbert, "Humans_Militia.mds");
    mdl_setvisualbody(grd_271_ulbert, "hum_body_Naked0", 1, 1, "Hum_Head_FatBald", 100, 3, grd_armor_l /*4125*/);
    b_scale(grd_271_ulbert);
    mdl_setmodelfatness(grd_271_ulbert, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_271_ulbert, npc_talent_1h, 1);
    npc_settalentskill(grd_271_ulbert, npc_talent_crossbow, 1);
    createinvitem(grd_271_ulbert, itfoapple);
    createinvitems(grd_271_ulbert, itminugget, 10);
    equipitem(grd_271_ulbert, itmw_1h_sword_01 /*4401*/);
    equipitem(grd_271_ulbert, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_start_271;
};

func void rtn_start_271() {
    ta_guard(0, 0, 12, 0, "OM_014B");
    ta_guard(12, 0, 24, 0, "OM_014B");
};

func void rtn_away_271() {
    ta_guard(0, 0, 12, 0, "OM_CAVE1_49");
    ta_guard(12, 0, 24, 0, "OM_CAVE1_49");
};

instance grd_272_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_mine_guard;
    guild = gil_grd;
    level = 10;
    voice = 13;
    id = 272;
    attribute[atr_strength] /*4*/ = 35;
    attribute[atr_dexterity] /*5*/ = 35;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 160;
    attribute[atr_hitpoints] /*0*/ = 160;
    mdl_setvisual(grd_272_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_272_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_272_gardist, "hum_body_Naked0", 0, 3, "Hum_Head_Fighter", 4, 1, grd_armor_l /*4125*/);
    b_scale(grd_272_gardist);
    mdl_setmodelfatness(grd_272_gardist, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_272_gardist, npc_talent_1h, 1);
    npc_settalentskill(grd_272_gardist, npc_talent_1h, 1);
    npc_settalentskill(grd_272_gardist, npc_talent_crossbow, 1);
    createinvitem(grd_272_gardist, itfoapple);
    createinvitems(grd_272_gardist, itminugget, 10);
    equipitem(grd_272_gardist, itmw_1h_sword_01 /*4401*/);
    equipitem(grd_272_gardist, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_start_272;
};

func void rtn_start_272() {
    ta_guard(0, 0, 12, 0, "OM_203");
    ta_guard(12, 0, 24, 0, "OM_203");
};

instance grd_273_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_mine_guard;
    guild = gil_grd;
    level = 10;
    voice = 7;
    id = 273;
    attribute[atr_strength] /*4*/ = 35;
    attribute[atr_dexterity] /*5*/ = 35;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 160;
    attribute[atr_hitpoints] /*0*/ = 160;
    mdl_setvisual(grd_273_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_273_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_273_gardist, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 19, 1, grd_armor_l /*4125*/);
    b_scale(grd_273_gardist);
    mdl_setmodelfatness(grd_273_gardist, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_273_gardist, npc_talent_1h, 1);
    npc_settalentskill(grd_273_gardist, npc_talent_1h, 1);
    createinvitem(grd_273_gardist, itfoapple);
    createinvitems(grd_273_gardist, itminugget, 10);
    equipitem(grd_273_gardist, itmw_1h_sword_01 /*4401*/);
    daily_routine = rtn_start_273;
};

func void rtn_start_273() {
    ta_guard(0, 0, 6, 0, "OM_CAVE1_63");
    ta_guard(6, 0, 24, 0, "OM_CAVE1_63");
};

instance grd_275_brueckenwache(npc_default) {
    name = name_brueckenwache;
    npctype = npctype_ow_guard;
    guild = gil_grd;
    level = 10;
    voice = 6;
    id = 275;
    attribute[atr_strength] /*4*/ = 35;
    attribute[atr_dexterity] /*5*/ = 35;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 160;
    attribute[atr_hitpoints] /*0*/ = 160;
    mdl_setvisual(grd_275_brueckenwache, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_275_brueckenwache, "Humans_Militia.mds");
    mdl_setvisualbody(grd_275_brueckenwache, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 19, 1, grd_armor_l /*4125*/);
    b_scale(grd_275_brueckenwache);
    mdl_setmodelfatness(grd_275_brueckenwache, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_275_brueckenwache, npc_talent_1h, 1);
    npc_settalentskill(grd_275_brueckenwache, npc_talent_1h, 1);
    createinvitem(grd_275_brueckenwache, itfoapple);
    createinvitems(grd_275_brueckenwache, itminugget, 10);
    equipitem(grd_275_brueckenwache, itmw_1h_sword_01 /*4401*/);
    daily_routine = rtn_start_275;
};

func void rtn_start_275() {
    ta_guard(6, 0, 21, 0, "OW_PATH_1_1");
    ta_guard(21, 0, 6, 0, "OW_PATH_1_1");
};

instance grd_276_brueckenwache(npc_default) {
    name = name_brueckenwache;
    npctype = npctype_ow_guard;
    guild = gil_grd;
    level = 10;
    voice = 7;
    id = 276;
    attribute[atr_strength] /*4*/ = 35;
    attribute[atr_dexterity] /*5*/ = 35;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 160;
    attribute[atr_hitpoints] /*0*/ = 160;
    mdl_setvisual(grd_276_brueckenwache, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_276_brueckenwache, "Humans_Militia.mds");
    mdl_setvisualbody(grd_276_brueckenwache, "hum_body_Naked0", 0, 0, "Hum_Head_Psionic", 2, 1, grd_armor_l /*4125*/);
    b_scale(grd_276_brueckenwache);
    mdl_setmodelfatness(grd_276_brueckenwache, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_276_brueckenwache, npc_talent_1h, 1);
    npc_settalentskill(grd_276_brueckenwache, npc_talent_1h, 1);
    createinvitem(grd_276_brueckenwache, itfoapple);
    createinvitems(grd_276_brueckenwache, itminugget, 10);
    equipitem(grd_276_brueckenwache, itmw_1h_sword_01 /*4401*/);
    daily_routine = rtn_start_276;
};

func void rtn_start_276() {
    ta_guard(6, 0, 21, 0, "OW_PATH_1_1");
    ta_guard(21, 0, 6, 0, "OW_PATH_1_1");
};

instance grd_277_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_mine_guard;
    guild = gil_grd;
    level = 11;
    voice = 6;
    id = 277;
    attribute[atr_strength] /*4*/ = 25;
    attribute[atr_dexterity] /*5*/ = 35;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 172;
    attribute[atr_hitpoints] /*0*/ = 172;
    mdl_setvisual(grd_277_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_277_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_277_gardist, "hum_body_Naked0", 0, 0, "Hum_Head_Thief", 1, 2, grd_armor_m /*4126*/);
    b_scale(grd_277_gardist);
    mdl_setmodelfatness(grd_277_gardist, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_277_gardist, npc_talent_1h, 2);
    npc_settalentskill(grd_277_gardist, npc_talent_crossbow, 1);
    createinvitem(grd_277_gardist, itfocheese);
    createinvitem(grd_277_gardist, itfoapple);
    createinvitem(grd_277_gardist, itlstorch);
    createinvitems(grd_277_gardist, itambolt, 45);
    createinvitems(grd_277_gardist, itminugget, 10);
    equipitem(grd_277_gardist, itmw_1h_sword_02 /*4402*/);
    equipitem(grd_277_gardist, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_start_277;
};

func void rtn_start_277() {
    ta_guard(22, 0, 8, 0, "OM_CAVE3_04");
    ta_guard(8, 0, 22, 0, "OM_CAVE3_04");
};

instance grd_278_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_mine_guard;
    guild = gil_grd;
    level = 10;
    voice = 13;
    id = 278;
    attribute[atr_strength] /*4*/ = 35;
    attribute[atr_dexterity] /*5*/ = 35;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 160;
    attribute[atr_hitpoints] /*0*/ = 160;
    mdl_setvisual(grd_278_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_278_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_278_gardist, "hum_body_Naked0", 0, 1, "Hum_Head_Fighter", 12, 2, grd_armor_l /*4125*/);
    b_scale(grd_278_gardist);
    mdl_setmodelfatness(grd_278_gardist, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_278_gardist, npc_talent_1h, 1);
    createinvitem(grd_278_gardist, itfoapple);
    createinvitems(grd_278_gardist, itminugget, 10);
    equipitem(grd_278_gardist, itmw_1h_sword_01 /*4401*/);
    daily_routine = rtn_start_278;
};

func void rtn_start_278() {
    ta_guardpalisade(20, 0, 7, 0, "OM_CAVE3_30");
    ta_guardpalisade(7, 0, 20, 0, "OM_CAVE3_30");
};

instance grd_279_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 15;
    voice = 13;
    id = 279;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 220;
    attribute[atr_hitpoints] /*0*/ = 220;
    mdl_setvisual(grd_279_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_279_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_279_gardist, "hum_body_Naked0", 0, 1, "Hum_Head_Pony", 13, 1, grd_armor_m /*4126*/);
    b_scale(grd_279_gardist);
    mdl_setmodelfatness(grd_279_gardist, 0.0);
    aivar[42] = true;
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_279_gardist, npc_talent_1h, 1);
    npc_settalentskill(grd_279_gardist, npc_talent_2h, 1);
    npc_settalentskill(grd_279_gardist, npc_talent_crossbow, 2);
    createinvitem(grd_279_gardist, itfocheese);
    createinvitem(grd_279_gardist, itfoapple);
    createinvitem(grd_279_gardist, itlstorch);
    createinvitems(grd_279_gardist, itminugget, 10);
    equipitem(grd_279_gardist, itmw_1h_sword_02 /*4402*/);
    daily_routine = rtn_start_279;
};

func void rtn_start_279() {
    ta_guard(6, 0, 23, 0, "OCC_BARONS_LEFT_ROOM_FRONT");
    ta_guard(23, 0, 6, 0, "OCC_BARONS_LEFT_ROOM_FRONT");
};

instance grd_280_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 20;
    flags = npc_flag_immortal;
    voice = 6;
    id = 280;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 220;
    attribute[atr_hitpoints] /*0*/ = 220;
    mdl_setvisual(grd_280_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_280_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_280_gardist, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 19, 0, grd_armor_m /*4126*/);
    b_scale(grd_280_gardist);
    mdl_setmodelfatness(grd_280_gardist, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_280_gardist, npc_talent_1h, 2);
    npc_settalentskill(grd_280_gardist, npc_talent_2h, 1);
    createinvitem(grd_280_gardist, itfoapple);
    createinvitems(grd_280_gardist, itminugget, 10);
    equipitem(grd_280_gardist, itmw_1h_sword_02 /*4402*/);
    daily_routine = rtn_start_280;
};

func void rtn_start_280() {
    ta_guardwheelopen(6, 25, 23, 10, "OCC_GATE_VWHEEL");
    ta_guardwheelopen(23, 10, 6, 25, "OCC_GATE_VWHEEL");
};

func void rtn_fmtaken_280() {
    ta_guardwheelclosed(7, 0, 20, 0, "OCC_GATE_VWHEEL");
    ta_guardwheelclosed(20, 0, 7, 0, "OCC_GATE_VWHEEL");
};

instance grd_281_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_main;
    guild = gil_grd;
    level = 10;
    voice = 7;
    id = 281;
    attribute[atr_strength] /*4*/ = 35;
    attribute[atr_dexterity] /*5*/ = 35;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 160;
    attribute[atr_hitpoints] /*0*/ = 160;
    mdl_setvisual(grd_281_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_281_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_281_gardist, "hum_body_Naked0", 0, 0, "Hum_Head_FatBald", 3, 3, grd_armor_l /*4125*/);
    b_scale(grd_281_gardist);
    mdl_setmodelfatness(grd_281_gardist, 0.0);
    fight_tactic = fai_human_ranged;
    npc_settalentskill(grd_281_gardist, npc_talent_1h, 1);
    npc_settalentskill(grd_281_gardist, npc_talent_1h, 1);
    npc_settalentskill(grd_281_gardist, npc_talent_crossbow, 1);
    createinvitem(grd_281_gardist, itfoapple);
    createinvitems(grd_281_gardist, itminugget, 10);
    createinvitems(grd_281_gardist, itambolt, 30);
    equipitem(grd_281_gardist, itmw_1h_sword_01 /*4401*/);
    equipitem(grd_281_gardist, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_start_281;
};

func void rtn_start_281() {
    ta_guardwheelopen(7, 55, 19, 55, "OW_PATH_1_16_C");
    ta_guardwheelopen(19, 55, 7, 55, "OW_PATH_1_16_C");
};

func void rtn_fmtaken_281() {
    ta_guardwheelclosed(7, 0, 20, 0, "OW_PATH_1_16_C");
    ta_guardwheelclosed(20, 0, 7, 0, "OW_PATH_1_16_C");
};

instance grd_282_nek(npc_default) {
    name = "Ìåðòâûé ñòðàæíèê";
    npctype = npctype_main;
    guild = gil_grd;
    level = 10;
    voice = 7;
    id = 282;
    attribute[atr_strength] /*4*/ = 40;
    attribute[atr_dexterity] /*5*/ = 20;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 160;
    attribute[atr_hitpoints] /*0*/ = 160;
    mdl_setvisual(grd_282_nek, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_282_nek, "Humans_Militia.mds");
    mdl_setvisualbody(grd_282_nek, "hum_body_Naked0", 0, 0, "Hum_Head_FatBald", 2, 1, grd_armor_l /*4125*/);
    b_scale(grd_282_nek);
    mdl_setmodelfatness(grd_282_nek, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_282_nek, npc_talent_1h, 1);
    npc_settalentskill(grd_282_nek, npc_talent_1h, 1);
    createinvitem(grd_282_nek, neks_amulett);
    createinvitems(grd_282_nek, itminugget, 10);
    daily_routine = rtn_start_282;
};

func void rtn_start_282() {
    ta_stand(8, 0, 20, 0, "LOCATION_15_IN_2");
    ta_stand(20, 0, 8, 0, "LOCATION_15_IN_2");
};

instance grd_283_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 30;
    voice = 6;
    id = 283;
    attribute[atr_strength] /*4*/ = 60;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 200;
    attribute[atr_hitpoints] /*0*/ = 200;
    mdl_setvisual(grd_283_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_283_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_283_gardist, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 13, 1, grd_armor_m /*4126*/);
    b_scale(grd_283_gardist);
    mdl_setmodelfatness(grd_283_gardist, 2.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_283_gardist, npc_talent_1h, 2);
    npc_settalentskill(grd_283_gardist, npc_talent_crossbow, 1);
    createinvitem(grd_283_gardist, itfocheese);
    createinvitem(grd_283_gardist, itfoapple);
    createinvitem(grd_283_gardist, itlstorch);
    createinvitems(grd_283_gardist, itambolt, 15);
    createinvitems(grd_283_gardist, itminugget, 10);
    equipitem(grd_283_gardist, itmw_1h_sword_broad_04 /*4424*/);
    equipitem(grd_283_gardist, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_fmtaken_283;
};

func void rtn_fmtaken_283() {
    ta_stayneutral(1, 0, 13, 0, "FMC_PATH27");
    ta_stayneutral(13, 0, 1, 0, "FMC_PATH27");
};

func void rtn_fmtaken2_283() {
    ta_stay(1, 0, 13, 0, "FMC_PATH27");
    ta_stay(13, 0, 1, 0, "FMC_PATH27");
};

instance grd_284_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 30;
    voice = 7;
    id = 284;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 280;
    attribute[atr_hitpoints] /*0*/ = 280;
    mdl_setvisual(grd_284_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_284_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_284_gardist, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 15, 1, grd_armor_l /*4125*/);
    b_scale(grd_284_gardist);
    mdl_setmodelfatness(grd_284_gardist, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_284_gardist, npc_talent_1h, 2);
    npc_settalentskill(grd_284_gardist, npc_talent_2h, 1);
    npc_settalentskill(grd_284_gardist, npc_talent_crossbow, 1);
    createinvitem(grd_284_gardist, itfomutton);
    createinvitem(grd_284_gardist, itfo_potion_health_01);
    createinvitem(grd_284_gardist, itlstorch);
    createinvitems(grd_284_gardist, itambolt, 30);
    createinvitems(grd_284_gardist, itminugget, 20);
    equipitem(grd_284_gardist, itmw_1h_sword_03 /*4403*/);
    equipitem(grd_284_gardist, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_fmstart_284;
};

func void rtn_fmstart_284() {
    ta_guardpalisade(0, 0, 13, 0, "FM_167");
    ta_guardpalisade(13, 0, 0, 0, "FM_167");
};

instance grd_285_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 30;
    voice = 7;
    id = 285;
    attribute[atr_strength] /*4*/ = 60;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 200;
    attribute[atr_hitpoints] /*0*/ = 200;
    mdl_setvisual(grd_285_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_285_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_285_gardist, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 19, 1, grd_armor_m /*4126*/);
    b_scale(grd_285_gardist);
    mdl_setmodelfatness(grd_285_gardist, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_285_gardist, npc_talent_1h, 2);
    createinvitem(grd_285_gardist, itfoapple);
    createinvitems(grd_285_gardist, itminugget, 10);
    equipitem(grd_285_gardist, itmw_1h_sword_broad_04 /*4424*/);
    daily_routine = rtn_fmtaken_285;
};

func void rtn_fmtaken_285() {
    ta_stayneutral(1, 0, 13, 0, "FMC_PATH28");
    ta_stayneutral(13, 0, 1, 0, "FMC_PATH28");
};

func void rtn_fmtaken2_285() {
    ta_guard(1, 0, 13, 0, "FMC_PATH28");
    ta_guard(13, 0, 1, 0, "FMC_PATH28");
};

instance grd_286_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 30;
    voice = 13;
    id = 286;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 220;
    attribute[atr_hitpoints] /*0*/ = 220;
    mdl_setvisual(grd_286_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_286_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_286_gardist, "hum_body_Naked0", 0, 1, "Hum_Head_Pony", 13, 1, grd_armor_m /*4126*/);
    b_scale(grd_286_gardist);
    mdl_setmodelfatness(grd_286_gardist, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_286_gardist, npc_talent_1h, 2);
    npc_settalentskill(grd_286_gardist, npc_talent_2h, 1);
    npc_settalentskill(grd_286_gardist, npc_talent_crossbow, 1);
    createinvitem(grd_286_gardist, itfocheese);
    createinvitem(grd_286_gardist, itfoapple);
    createinvitem(grd_286_gardist, itlstorch);
    createinvitems(grd_286_gardist, itminugget, 10);
    equipitem(grd_286_gardist, itmw_1h_sword_02 /*4402*/);
    daily_routine = rtn_fmstart_286;
};

func void rtn_fmstart_286() {
    ta_guard(0, 0, 13, 0, "FM_94");
    ta_guard(13, 0, 0, 0, "FM_94");
};

instance grd_287_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 20;
    voice = 13;
    id = 287;
    attribute[atr_strength] /*4*/ = 35;
    attribute[atr_dexterity] /*5*/ = 35;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 160;
    attribute[atr_hitpoints] /*0*/ = 160;
    mdl_setvisual(grd_287_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_287_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_287_gardist, "hum_body_Naked0", 1, 1, "Hum_Head_Fighter", 16, 0, grd_armor_l /*4125*/);
    b_scale(grd_287_gardist);
    mdl_setmodelfatness(grd_287_gardist, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_287_gardist, npc_talent_1h, 1);
    npc_settalentskill(grd_287_gardist, npc_talent_1h, 1);
    createinvitem(grd_287_gardist, itfoapple);
    createinvitems(grd_287_gardist, itminugget, 10);
    equipitem(grd_287_gardist, itmw_1h_sword_01 /*4401*/);
    daily_routine = rtn_fmstart_287;
};

func void rtn_fmstart_287() {
    ta_guard(0, 0, 13, 0, "FM_116");
    ta_guard(13, 0, 0, 0, "FM_116");
};

instance grd_288_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 20;
    voice = 13;
    id = 288;
    attribute[atr_strength] /*4*/ = 65;
    attribute[atr_dexterity] /*5*/ = 60;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 280;
    attribute[atr_hitpoints] /*0*/ = 280;
    mdl_setvisual(grd_288_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_288_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_288_gardist, "hum_body_Naked0", 0, 0, "Hum_Head_Psionic", 2, 1, grd_armor_l /*4125*/);
    b_scale(grd_288_gardist);
    mdl_setmodelfatness(grd_288_gardist, 0.0);
    fight_tactic = fai_human_ranged;
    npc_settalentskill(grd_288_gardist, npc_talent_1h, 2);
    npc_settalentskill(grd_288_gardist, npc_talent_2h, 1);
    npc_settalentskill(grd_288_gardist, npc_talent_crossbow, 1);
    createinvitem(grd_288_gardist, itfomutton);
    createinvitem(grd_288_gardist, itfo_potion_health_01);
    createinvitem(grd_288_gardist, itlstorch);
    createinvitems(grd_288_gardist, itambolt, 30);
    createinvitems(grd_288_gardist, itminugget, 20);
    equipitem(grd_288_gardist, itmw_1h_sword_03 /*4403*/);
    equipitem(grd_288_gardist, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_fmstart_288;
};

func void rtn_fmstart_288() {
    ta_guardpalisade(0, 0, 13, 0, "FM_111");
    ta_guardpalisade(13, 0, 0, 0, "FM_111");
};

instance grd_289_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 20;
    voice = 6;
    id = 289;
    attribute[atr_strength] /*4*/ = 35;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 160;
    attribute[atr_hitpoints] /*0*/ = 160;
    mdl_setvisual(grd_289_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_289_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_289_gardist, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 19, 0, grd_armor_l /*4125*/);
    b_scale(grd_289_gardist);
    mdl_setmodelfatness(grd_289_gardist, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_289_gardist, npc_talent_1h, 1);
    npc_settalentskill(grd_289_gardist, npc_talent_1h, 1);
    createinvitem(grd_289_gardist, itfoapple);
    createinvitems(grd_289_gardist, itminugget, 10);
    equipitem(grd_289_gardist, itmw_1h_sword_01 /*4401*/);
    daily_routine = rtn_fmstart_289;
};

func void rtn_fmstart_289() {
    ta_guard(0, 0, 13, 0, "FM_18");
    ta_guard(13, 0, 0, 0, "FM_18");
};

instance grd_290_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 20;
    voice = 7;
    id = 290;
    attribute[atr_strength] /*4*/ = 35;
    attribute[atr_dexterity] /*5*/ = 35;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 160;
    attribute[atr_hitpoints] /*0*/ = 160;
    mdl_setvisual(grd_290_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_290_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_290_gardist, "hum_body_Naked0", 0, 3, "Hum_Head_Fighter", 1, 1, grd_armor_l /*4125*/);
    b_scale(grd_290_gardist);
    mdl_setmodelfatness(grd_290_gardist, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_ranged;
    npc_settalentskill(grd_290_gardist, npc_talent_1h, 2);
    npc_settalentskill(grd_290_gardist, npc_talent_2h, 1);
    npc_settalentskill(grd_290_gardist, npc_talent_crossbow, 1);
    createinvitem(grd_290_gardist, itfocheese);
    createinvitem(grd_290_gardist, itfoapple);
    createinvitem(grd_290_gardist, itlstorch);
    createinvitems(grd_290_gardist, itambolt, 20);
    createinvitems(grd_290_gardist, itminugget, 10);
    equipitem(grd_290_gardist, itmw_1h_sword_01 /*4401*/);
    equipitem(grd_290_gardist, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_fmstart_290;
};

func void rtn_fmstart_290() {
    ta_guardpalisade(0, 0, 13, 0, "FM_113");
    ta_guardpalisade(13, 0, 0, 0, "FM_113");
};

instance grd_291_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 20;
    voice = 13;
    id = 291;
    attribute[atr_strength] /*4*/ = 35;
    attribute[atr_dexterity] /*5*/ = 35;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 160;
    attribute[atr_hitpoints] /*0*/ = 160;
    mdl_setvisual(grd_291_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_291_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_291_gardist, "hum_body_Naked0", 0, 3, "Hum_Head_FatBald", 2, 1, grd_armor_l /*4125*/);
    b_scale(grd_291_gardist);
    mdl_setmodelfatness(grd_291_gardist, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_291_gardist, npc_talent_1h, 1);
    npc_settalentskill(grd_291_gardist, npc_talent_1h, 1);
    createinvitem(grd_291_gardist, itfoapple);
    createinvitems(grd_291_gardist, itminugget, 10);
    equipitem(grd_291_gardist, itmw_1h_sword_01 /*4401*/);
    daily_routine = rtn_fmstart_291;
};

func void rtn_fmstart_291() {
    ta_guard(0, 0, 13, 0, "FM_97");
    ta_guard(13, 0, 0, 0, "FM_97");
};

instance grd_292_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 40;
    voice = 6;
    id = 292;
    attribute[atr_strength] /*4*/ = 100;
    attribute[atr_dexterity] /*5*/ = 80;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 280;
    attribute[atr_hitpoints] /*0*/ = 280;
    mdl_setvisual(grd_292_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_292_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_292_gardist, "hum_body_Naked0", 0, 0, "Hum_Head_Psionic", 2, 1, grd_armor_h /*4127*/);
    b_scale(grd_292_gardist);
    mdl_setmodelfatness(grd_292_gardist, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_292_gardist, npc_talent_1h, 2);
    npc_settalentskill(grd_292_gardist, npc_talent_2h, 1);
    npc_settalentskill(grd_292_gardist, npc_talent_crossbow, 1);
    createinvitem(grd_292_gardist, itfomutton);
    createinvitem(grd_292_gardist, itfo_potion_health_01);
    createinvitem(grd_292_gardist, itlstorch);
    createinvitems(grd_292_gardist, itminugget, 20);
    equipitem(grd_292_gardist, itmw_1h_sword_03 /*4403*/);
    daily_routine = rtn_fmstart_292;
};

func void rtn_fmstart_292() {
    ta_guard(0, 0, 13, 0, "FM_03");
    ta_guard(13, 0, 0, 0, "FM_03");
};

instance grd_293_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 30;
    voice = 7;
    id = 293;
    attribute[atr_strength] /*4*/ = 80;
    attribute[atr_dexterity] /*5*/ = 70;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 280;
    attribute[atr_hitpoints] /*0*/ = 280;
    mdl_setvisual(grd_293_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_293_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_293_gardist, "hum_body_Naked0", 0, 1, "Hum_Head_Fighter", 18, 2, grd_armor_m /*4126*/);
    b_scale(grd_293_gardist);
    mdl_setmodelfatness(grd_293_gardist, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_293_gardist, npc_talent_1h, 2);
    npc_settalentskill(grd_293_gardist, npc_talent_2h, 1);
    npc_settalentskill(grd_293_gardist, npc_talent_crossbow, 1);
    createinvitem(grd_293_gardist, itfomutton);
    createinvitem(grd_293_gardist, itfo_potion_health_01);
    createinvitem(grd_293_gardist, itlstorch);
    createinvitems(grd_293_gardist, itminugget, 20);
    equipitem(grd_293_gardist, itmw_1h_sword_03 /*4403*/);
    daily_routine = rtn_fmstart_293;
};

func void rtn_fmstart_293() {
    ta_guard(0, 0, 13, 0, "FM_84");
    ta_guard(13, 0, 0, 0, "FM_84");
};

instance grd_294_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 30;
    voice = 7;
    id = 294;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 220;
    attribute[atr_hitpoints] /*0*/ = 220;
    mdl_setvisual(grd_294_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_294_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_294_gardist, "hum_body_Naked0", 0, 3, "Hum_Head_Fighter", 1, 1, grd_armor_m /*4126*/);
    b_scale(grd_294_gardist);
    mdl_setmodelfatness(grd_294_gardist, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_ranged;
    npc_settalentskill(grd_294_gardist, npc_talent_1h, 2);
    npc_settalentskill(grd_294_gardist, npc_talent_2h, 1);
    npc_settalentskill(grd_294_gardist, npc_talent_crossbow, 1);
    createinvitem(grd_294_gardist, itfocheese);
    createinvitem(grd_294_gardist, itfoapple);
    createinvitem(grd_294_gardist, itlstorch);
    createinvitems(grd_294_gardist, itambolt, 30);
    createinvitems(grd_294_gardist, itminugget, 10);
    equipitem(grd_294_gardist, itmw_1h_sword_02 /*4402*/);
    equipitem(grd_294_gardist, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_fmstart_294;
};

func void rtn_fmstart_294() {
    ta_guardpalisade(0, 0, 13, 0, "FM_132");
    ta_guardpalisade(13, 0, 0, 0, "FM_132");
};

instance grd_295_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 30;
    voice = 13;
    id = 295;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 220;
    attribute[atr_hitpoints] /*0*/ = 220;
    mdl_setvisual(grd_295_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_295_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_295_gardist, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 17, 4, grd_armor_m /*4126*/);
    b_scale(grd_295_gardist);
    mdl_setmodelfatness(grd_295_gardist, 0.0);
    fight_tactic = fai_human_ranged;
    npc_settalentskill(grd_295_gardist, npc_talent_1h, 2);
    npc_settalentskill(grd_295_gardist, npc_talent_2h, 1);
    npc_settalentskill(grd_295_gardist, npc_talent_crossbow, 1);
    createinvitem(grd_295_gardist, itfocheese);
    createinvitem(grd_295_gardist, itfoapple);
    createinvitem(grd_295_gardist, itlstorch);
    createinvitems(grd_295_gardist, itambolt, 30);
    createinvitems(grd_295_gardist, itminugget, 10);
    equipitem(grd_295_gardist, itmw_1h_sword_02 /*4402*/);
    equipitem(grd_295_gardist, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_fmstart_295;
};

func void rtn_fmstart_295() {
    ta_guardpalisade(0, 0, 13, 0, "FM_139");
    ta_guardpalisade(13, 0, 0, 0, "FM_139");
};

instance grd_296_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 30;
    voice = 13;
    id = 296;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 220;
    attribute[atr_hitpoints] /*0*/ = 220;
    mdl_setvisual(grd_296_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_296_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_296_gardist, "hum_body_Naked0", 0, 1, "Hum_Head_Pony", 13, 1, grd_armor_m /*4126*/);
    b_scale(grd_296_gardist);
    mdl_setmodelfatness(grd_296_gardist, 0.0);
    fight_tactic = fai_human_ranged;
    npc_settalentskill(grd_296_gardist, npc_talent_1h, 2);
    npc_settalentskill(grd_296_gardist, npc_talent_2h, 1);
    npc_settalentskill(grd_296_gardist, npc_talent_crossbow, 1);
    createinvitem(grd_296_gardist, itfocheese);
    createinvitem(grd_296_gardist, itfoapple);
    createinvitem(grd_296_gardist, itlstorch);
    createinvitems(grd_296_gardist, itambolt, 30);
    createinvitems(grd_296_gardist, itminugget, 10);
    equipitem(grd_296_gardist, itmw_1h_sword_02 /*4402*/);
    equipitem(grd_296_gardist, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_fmstart_296;
};

func void rtn_fmstart_296() {
    ta_guardpalisade(0, 0, 13, 0, "FM_149");
    ta_guardpalisade(13, 0, 0, 0, "FM_149");
};

instance grd_297_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 20;
    voice = 7;
    id = 297;
    attribute[atr_strength] /*4*/ = 50;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 160;
    attribute[atr_hitpoints] /*0*/ = 160;
    mdl_setvisual(grd_297_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_297_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_297_gardist, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 19, 1, grd_armor_l /*4125*/);
    b_scale(grd_297_gardist);
    mdl_setmodelfatness(grd_297_gardist, 0.0);
    fight_tactic = fai_human_ranged;
    npc_settalentskill(grd_297_gardist, npc_talent_1h, 1);
    npc_settalentskill(grd_297_gardist, npc_talent_1h, 1);
    npc_settalentskill(grd_297_gardist, npc_talent_crossbow, 1);
    createinvitem(grd_297_gardist, itfoapple);
    createinvitems(grd_297_gardist, itminugget, 10);
    createinvitems(grd_297_gardist, itambolt, 30);
    equipitem(grd_297_gardist, itmw_1h_sword_01 /*4401*/);
    equipitem(grd_297_gardist, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_fmstart_297;
};

func void rtn_fmstart_297() {
    ta_guardpalisade(0, 0, 13, 0, "FM_14");
    ta_guardpalisade(13, 0, 0, 0, "FM_14");
};

instance grd_298_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 30;
    voice = 6;
    id = 298;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 172;
    attribute[atr_hitpoints] /*0*/ = 172;
    mdl_setvisual(grd_298_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_298_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_298_gardist, "hum_body_Naked0", 0, 0, "Hum_Head_Thief", 1, 2, grd_armor_m /*4126*/);
    b_scale(grd_298_gardist);
    mdl_setmodelfatness(grd_298_gardist, 0.0);
    fight_tactic = fai_human_ranged;
    npc_settalentskill(grd_298_gardist, npc_talent_1h, 1);
    npc_settalentskill(grd_298_gardist, npc_talent_crossbow, 1);
    createinvitem(grd_298_gardist, itfocheese);
    createinvitem(grd_298_gardist, itfoapple);
    createinvitem(grd_298_gardist, itlstorch);
    createinvitems(grd_298_gardist, itambolt, 45);
    createinvitems(grd_298_gardist, itminugget, 10);
    equipitem(grd_298_gardist, itmw_1h_sword_02 /*4402*/);
    equipitem(grd_298_gardist, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_fmstart_298;
};

func void rtn_fmstart_298() {
    ta_guardpalisade(0, 0, 13, 0, "FM_07");
    ta_guardpalisade(13, 0, 0, 0, "FM_07");
};

instance grd_299_gardist(npc_default) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 20;
    voice = 7;
    id = 299;
    attribute[atr_strength] /*4*/ = 35;
    attribute[atr_dexterity] /*5*/ = 35;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 160;
    attribute[atr_hitpoints] /*0*/ = 160;
    mdl_setvisual(grd_299_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_299_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_299_gardist, "hum_body_Naked0", 0, 0, "Hum_Head_FatBald", 3, 3, grd_armor_l /*4125*/);
    b_scale(grd_299_gardist);
    mdl_setmodelfatness(grd_299_gardist, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_299_gardist, npc_talent_1h, 1);
    npc_settalentskill(grd_299_gardist, npc_talent_1h, 1);
    npc_settalentskill(grd_299_gardist, npc_talent_crossbow, 1);
    createinvitem(grd_299_gardist, itfoapple);
    createinvitems(grd_299_gardist, itminugget, 10);
    equipitem(grd_299_gardist, itmw_1h_sword_01 /*4401*/);
    daily_routine = rtn_fmstart_299;
};

func void rtn_fmstart_299() {
    ta_guard(0, 0, 13, 0, "FM_133");
    ta_guard(13, 0, 0, 0, "FM_133");
};

instance gur_1200_yberion(npc_default) {
    name = "Þ'Áåðèîí";
    npctype = npctype_main;
    guild = gil_gur;
    level = 30;
    flags = npc_flag_immortal;
    voice = 12;
    id = 1200;
    attribute[atr_strength] /*4*/ = 60;
    attribute[atr_dexterity] /*5*/ = 45;
    attribute[atr_mana_max] /*3*/ = 50;
    attribute[atr_mana] /*2*/ = 50;
    attribute[atr_hitpoints_max] /*1*/ = 400;
    attribute[atr_hitpoints] /*0*/ = 400;
    mdl_setvisual(gur_1200_yberion, "HUMANS.MDS");
    mdl_applyoverlaymds(gur_1200_yberion, "Humans_Mage.mds");
    mdl_setvisualbody(gur_1200_yberion, "hum_body_Naked0", 1, 1, "Hum_Head_Bald", 83, 0, gur_armor_h /*4145*/);
    b_scale(gur_1200_yberion);
    mdl_setmodelfatness(gur_1200_yberion, 0.0);
    fight_tactic = fai_human_mage;
    npc_settalentskill(gur_1200_yberion, npc_talent_mage, 6);
    createinvitem(gur_1200_yberion, itarrunepyrokinesis);
    daily_routine = rtn_start_1200;
};

func void rtn_start_1200() {
    ta_sitaround(5, 0, 1, 0, "PSI_TEMPLE_SITTING_PRIEST");
    ta_readbook(1, 0, 5, 0, "PSI_TEMPLE_ROOMS_IN_02");
};

func void rtn_callsleeper_1200() {
    ta_stay(23, 0, 21, 0, "PSI_TEMPLE_STAIRS_02");
    ta_stay(21, 0, 23, 0, "PSI_TEMPLE_STAIRS_02");
};

func void rtn_drained_1200() {
    ta_drained_yberion(23, 0, 21, 0, "PSI_TEMPLE_STAIRS_02");
    ta_drained_yberion(21, 0, 23, 0, "PSI_TEMPLE_STAIRS_02");
};

func void rtn_dead_1200() {
    ta_drained_yberion(23, 0, 21, 0, "PSI_TEMPLE_ROOMS_IN_03");
    ta_drained_yberion(21, 0, 23, 0, "PSI_TEMPLE_ROOMS_IN_03");
};

instance gur_1201_corkalom(npc_default) {
    name = "Êîð Ãàëîì";
    npctype = npctype_friend;
    guild = gil_gur;
    level = 30;
    flags = npc_flag_immortal;
    voice = 10;
    id = 1201;
    attribute[atr_strength] /*4*/ = 80;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 50;
    attribute[atr_mana] /*2*/ = 50;
    attribute[atr_hitpoints_max] /*1*/ = 400;
    attribute[atr_hitpoints] /*0*/ = 400;
    mdl_setvisual(gur_1201_corkalom, "HUMANS.MDS");
    mdl_applyoverlaymds(gur_1201_corkalom, "Humans_Mage.mds");
    mdl_setvisualbody(gur_1201_corkalom, "hum_body_Naked0", 1, 0, "Hum_Head_Psionic", 19, 0, gur_armor_h /*4145*/);
    b_scale(gur_1201_corkalom);
    mdl_setmodelfatness(gur_1201_corkalom, 0.0);
    fight_tactic = fai_human_mage;
    npc_settalentskill(gur_1201_corkalom, npc_talent_mage, 6);
    createinvitem(gur_1201_corkalom, itarrunesleep);
    equipitem(gur_1201_corkalom, kaloms_schwert /*4974*/);
    daily_routine = rtn_start_1201;
};

func void rtn_start_1201() {
    ta_potionalchemy(15, 0, 22, 0, "PSI_LABOR_DOWN");
    ta_potionalchemy(22, 0, 15, 0, "PSI_LABOR_DOWN");
};

func void rtn_callsleeper_1201() {
    ta_stay(0, 0, 12, 0, "PSI_TEMPLE_STAIRS_RIGHT");
    ta_stay(12, 0, 24, 0, "PSI_TEMPLE_STAIRS_RIGHT");
};

func void rtn_flee_1201() {
    ta_stay(0, 0, 12, 0, "");
    ta_stay(12, 0, 24, 0, "");
};

instance gur_1202_corangar(npc_default) {
    name = "Êîð Àíãàð";
    npctype = npctype_friend;
    guild = gil_tpl;
    level = 30;
    flags = npc_flag_immortal;
    voice = 8;
    id = 1202;
    attribute[atr_strength] /*4*/ = 85;
    attribute[atr_dexterity] /*5*/ = 65;
    attribute[atr_mana_max] /*3*/ = 50;
    attribute[atr_mana] /*2*/ = 50;
    attribute[atr_hitpoints_max] /*1*/ = 400;
    attribute[atr_hitpoints] /*0*/ = 400;
    mdl_setvisual(gur_1202_corangar, "HUMANS.MDS");
    mdl_applyoverlaymds(gur_1202_corangar, "Humans_Militia.mds");
    mdl_setvisualbody(gur_1202_corangar, "hum_body_Naked0", 1, 3, "Hum_Head_Bald", 11, 0, tpl_armor_h /*4143*/);
    b_scale(gur_1202_corangar);
    fight_tactic = fai_human_mage;
    npc_settalentskill(gur_1202_corangar, npc_talent_1h, 2);
    npc_settalentskill(gur_1202_corangar, npc_talent_1h, 2);
    npc_settalentskill(gur_1202_corangar, npc_talent_2h, 2);
    npc_settalentskill(gur_1202_corangar, npc_talent_2h, 2);
    npc_settalentskill(gur_1202_corangar, npc_talent_bow, 2);
    npc_settalentskill(gur_1202_corangar, npc_talent_crossbow, 2);
    npc_settalentskill(gur_1202_corangar, npc_talent_mage, 6);
    createinvitem(gur_1202_corangar, itarrunesleep);
    createinvitem(gur_1202_corangar, roter_wind);
    daily_routine = rtn_start_1202;
};

func void rtn_start_1202() {
    ta_sleep(1, 0, 5, 0, "PSI_17_HUT_IN");
    ta_teaching(5, 0, 1, 0, "PSI_TRAINING_TEACHER");
};

func void rtn_callsleeper_1202() {
    ta_stay(23, 0, 21, 0, "PSI_TEMPLE_STAIRS_LEFT");
    ta_stay(21, 0, 23, 0, "PSI_TEMPLE_STAIRS_LEFT");
};

instance gur_1203_baaltondral(npc_default) {
    name = "Èäîë Òîíäðàë";
    npctype = npctype_main;
    guild = gil_gur;
    level = 28;
    flags = 0;
    voice = 13;
    id = 1203;
    attribute[atr_strength] /*4*/ = 60;
    attribute[atr_dexterity] /*5*/ = 40;
    attribute[atr_mana_max] /*3*/ = 50;
    attribute[atr_mana] /*2*/ = 50;
    attribute[atr_hitpoints_max] /*1*/ = 388;
    attribute[atr_hitpoints] /*0*/ = 388;
    mdl_setvisual(gur_1203_baaltondral, "HUMANS.MDS");
    mdl_applyoverlaymds(gur_1203_baaltondral, "Humans_Mage.mds");
    mdl_setvisualbody(gur_1203_baaltondral, "hum_body_Naked0", 1, 1, "Hum_Head_Psionic", 24, 2, gur_armor_m /*4144*/);
    b_scale(gur_1203_baaltondral);
    mdl_setmodelfatness(gur_1203_baaltondral, -1.0);
    fight_tactic = fai_human_mage;
    npc_settalentskill(gur_1203_baaltondral, npc_talent_mage, 6);
    createinvitem(gur_1203_baaltondral, itarrunewindfist);
    daily_routine = rtn_start_1203;
};

func void rtn_start_1203() {
    ta_sleep(23, 0, 7, 45, "PSI_28_HUT_IN");
    ta_teaching(7, 45, 23, 0, "PSI_PLATFORM_TEACHER");
};

instance gur_1204_baalnamib(npc_default) {
    name = "Èäîë Íàìèá";
    npctype = npctype_main;
    guild = gil_gur;
    level = 29;
    flags = npc_flag_immortal;
    voice = 2;
    id = 1204;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 55;
    attribute[atr_mana_max] /*3*/ = 50;
    attribute[atr_mana] /*2*/ = 50;
    attribute[atr_hitpoints_max] /*1*/ = 388;
    attribute[atr_hitpoints] /*0*/ = 388;
    mdl_setvisual(gur_1204_baalnamib, "HUMANS.MDS");
    mdl_applyoverlaymds(gur_1204_baalnamib, "Humans_Mage.mds");
    mdl_setvisualbody(gur_1204_baalnamib, "hum_body_Naked0", 1, 1, "Hum_Head_Psionic", 20, 1, gur_armor_m /*4144*/);
    b_scale(gur_1204_baalnamib);
    mdl_setmodelfatness(gur_1204_baalnamib, -1.0);
    fight_tactic = fai_human_mage;
    npc_settalentskill(gur_1204_baalnamib, npc_talent_mage, 6);
    createinvitem(gur_1204_baalnamib, itarrunesleep);
    equipitem(gur_1204_baalnamib, namibs_keule /*4977*/);
    daily_routine = rtn_start_1204;
};

func void rtn_start_1204() {
    ta_smalltalk(8, 0, 20, 0, "PSI_PATH_1");
    ta_smalltalk(20, 0, 8, 0, "PSI_PATH_1");
};

instance gur_1205_chani(npc_default) {
    name = "×àíè";
    npctype = npctype_main;
    guild = gil_bab;
    level = 1;
    flags = npc_flag_immortal;
    voice = 16;
    id = 1205;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 20;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 52;
    attribute[atr_hitpoints] /*0*/ = 52;
    mdl_setvisual(gur_1205_chani, "Babe.MDS");
    mdl_setvisualbody(gur_1205_chani, "Bab_body_Naked0", 0, 3, "Bab_Head_Hair1", 0, default, -1);
    daily_routine = rtn_start_1205;
};

func void rtn_start_1205() {
    ta_babe_sitaround(0, 0, 6, 0, "PSI_TEMPLE_ROOMS_IN_03");
    ta_babe_sitaround(6, 0, 7, 0, "PSI_TEMPLE_ROOMS_IN_03");
    ta_babe_fan(7, 0, 8, 0, "PSI_TEMPLE_ROOMS_05");
    ta_babe_sitaround(8, 0, 9, 0, "PSI_TEMPLE_ROOMS_IN_03");
    ta_babe_fan(9, 0, 10, 0, "PSI_TEMPLE_ROOMS_05");
    ta_babe_sitaround(10, 0, 11, 0, "PSI_TEMPLE_ROOMS_IN_03");
    ta_babe_fan(11, 0, 12, 0, "PSI_TEMPLE_ROOMS_05");
    ta_babe_sitaround(12, 0, 13, 0, "PSI_TEMPLE_ROOMS_IN_03");
    ta_babe_fan(13, 0, 14, 0, "PSI_TEMPLE_ROOMS_05");
    ta_babe_sitaround(14, 0, 15, 0, "PSI_TEMPLE_ROOMS_IN_03");
    ta_babe_fan(15, 0, 16, 0, "PSI_TEMPLE_ROOMS_05");
    ta_babe_sitaround(16, 0, 17, 0, "PSI_TEMPLE_ROOMS_IN_03");
    ta_babe_fan(17, 0, 18, 0, "PSI_TEMPLE_ROOMS_05");
    ta_babe_sitaround(18, 0, 19, 0, "PSI_TEMPLE_ROOMS_IN_03");
    ta_babe_fan(19, 0, 20, 0, "PSI_TEMPLE_ROOMS_05");
    ta_babe_sitaround(20, 0, 21, 0, "PSI_TEMPLE_ROOMS_IN_03");
    ta_babe_fan(21, 0, 22, 0, "PSI_TEMPLE_ROOMS_05");
    ta_babe_sitaround(22, 0, 23, 0, "PSI_TEMPLE_ROOMS_IN_03");
    ta_babe_fan(23, 0, 0, 0, "PSI_TEMPLE_ROOMS_05");
};

func void rtn_dead_1205() {
    ta_babe_sitaround(0, 0, 6, 0, "PSI_TEMPLE_ROOMS_IN_02");
    ta_babe_sitaround(6, 0, 0, 0, "PSI_TEMPLE_ROOMS_IN_02");
};

instance gur_1207_natalia(npc_default) {
    name = "Íàòàëüÿ";
    npctype = npctype_main;
    guild = gil_bab;
    level = 1;
    flags = npc_flag_immortal;
    voice = 16;
    id = 1207;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 20;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 52;
    attribute[atr_hitpoints] /*0*/ = 52;
    mdl_setvisual(gur_1207_natalia, "Babe.MDS");
    mdl_setvisualbody(gur_1207_natalia, "Bab_body_Naked0", 0, 0, "Bab_Head_Hair1", 0, default, -1);
    fight_tactic = fai_human_coward;
    daily_routine = rtn_start_1207;
};

func void rtn_start_1207() {
    ta_babe_sitaround(0, 0, 6, 0, "PSI_TEMPLE_ROOMS_IN");
    ta_babe_fan(6, 0, 7, 0, "PSI_TEMPLE_ROOMS_03");
    ta_babe_sitaround(7, 0, 8, 0, "PSI_TEMPLE_ROOMS_IN");
    ta_babe_fan(8, 0, 9, 0, "PSI_TEMPLE_ROOMS_03");
    ta_babe_sitaround(9, 0, 10, 0, "PSI_TEMPLE_ROOMS_IN");
    ta_babe_fan(10, 0, 11, 0, "PSI_TEMPLE_ROOMS_03");
    ta_babe_sitaround(11, 0, 12, 0, "PSI_TEMPLE_ROOMS_IN");
    ta_babe_fan(12, 0, 13, 0, "PSI_TEMPLE_ROOMS_03");
    ta_babe_sitaround(13, 0, 14, 0, "PSI_TEMPLE_ROOMS_IN");
    ta_babe_fan(14, 0, 15, 0, "PSI_TEMPLE_ROOMS_03");
    ta_babe_sitaround(15, 0, 16, 0, "PSI_TEMPLE_ROOMS_IN");
    ta_babe_fan(16, 0, 17, 0, "PSI_TEMPLE_ROOMS_03");
    ta_babe_sitaround(17, 0, 18, 0, "PSI_TEMPLE_ROOMS_IN");
    ta_babe_fan(18, 0, 19, 0, "PSI_TEMPLE_ROOMS_03");
    ta_babe_sitaround(19, 0, 20, 0, "PSI_TEMPLE_ROOMS_IN");
    ta_babe_fan(20, 0, 21, 0, "PSI_TEMPLE_ROOMS_03");
    ta_babe_sitaround(21, 0, 22, 0, "PSI_TEMPLE_ROOMS_IN");
    ta_babe_fan(22, 0, 23, 0, "PSI_TEMPLE_ROOMS_03");
    ta_babe_sitaround(23, 0, 0, 0, "PSI_TEMPLE_ROOMS_IN");
};

func void rtn_dead_1207() {
    ta_babe_sitaround(0, 0, 6, 0, "PSI_TEMPLE_ROOMS_IN_03");
    ta_babe_sitaround(6, 0, 0, 0, "PSI_TEMPLE_ROOMS_IN_03");
};

instance gur_1208_baalcadar(npc_default) {
    name = "Èäîë Êàäàð";
    npctype = npctype_main;
    guild = gil_gur;
    level = 28;
    voice = 2;
    id = 1208;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 55;
    attribute[atr_mana_max] /*3*/ = 50;
    attribute[atr_mana] /*2*/ = 50;
    attribute[atr_hitpoints_max] /*1*/ = 376;
    attribute[atr_hitpoints] /*0*/ = 376;
    mdl_setvisual(gur_1208_baalcadar, "HUMANS.MDS");
    mdl_applyoverlaymds(gur_1208_baalcadar, "Humans_Mage.mds");
    mdl_setvisualbody(gur_1208_baalcadar, "hum_body_Naked0", 1, 1, "Hum_Head_Psionic", 20, 1, gur_armor_m /*4144*/);
    b_scale(gur_1208_baalcadar);
    mdl_setmodelfatness(gur_1208_baalcadar, -1.0);
    fight_tactic = fai_human_mage;
    npc_settalentskill(gur_1208_baalcadar, npc_talent_mage, 6);
    b_give_baalcadarchapter1runes();
    createinvitem(gur_1208_baalcadar, itarrunewindfist);
    daily_routine = rtn_start_1208;
};

func void rtn_start_1208() {
    ta_sleep(2, 0, 8, 0, "PSI_23_HUT_IN");
    ta_teaching(8, 0, 2, 0, "PSI_TEACH_CADAR");
};

instance gur_1209_baalorun(npc_default) {
    name = "Èäîë Îðàí";
    npctype = npctype_main;
    guild = gil_gur;
    level = 28;
    voice = 12;
    id = 1209;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 60;
    attribute[atr_mana_max] /*3*/ = 50;
    attribute[atr_mana] /*2*/ = 50;
    attribute[atr_hitpoints_max] /*1*/ = 376;
    attribute[atr_hitpoints] /*0*/ = 376;
    mdl_setvisual(gur_1209_baalorun, "HUMANS.MDS");
    mdl_applyoverlaymds(gur_1209_baalorun, "Humans_Mage.mds");
    mdl_setvisualbody(gur_1209_baalorun, "hum_body_Naked0", 1, 1, "Hum_Head_Psionic", 20, 1, gur_armor_m /*4144*/);
    b_scale(gur_1209_baalorun);
    mdl_setmodelfatness(gur_1209_baalorun, -1.0);
    fight_tactic = fai_human_mage;
    npc_settalentskill(gur_1209_baalorun, npc_talent_mage, 6);
    equipitem(gur_1209_baalorun, oruns_keule /*4978*/);
    daily_routine = rtn_start_1209;
};

func void rtn_start_1209() {
    ta_boss(7, 0, 0, 0, "PSI_PATH_2_6");
    ta_sleep(0, 0, 7, 0, "PSI_TREE_IN");
};

instance gur_1210_baaltyon(npc_default) {
    name = "Èäîë Òèîí";
    npctype = npctype_friend;
    guild = gil_gur;
    level = 28;
    flags = npc_flag_immortal;
    voice = 11;
    id = 1210;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 35;
    attribute[atr_mana_max] /*3*/ = 50;
    attribute[atr_mana] /*2*/ = 50;
    attribute[atr_hitpoints_max] /*1*/ = 376;
    attribute[atr_hitpoints] /*0*/ = 376;
    mdl_setvisual(gur_1210_baaltyon, "HUMANS.MDS");
    mdl_applyoverlaymds(gur_1210_baaltyon, "Humans_Mage.mds");
    mdl_setvisualbody(gur_1210_baaltyon, "hum_body_Naked0", 1, 1, "Hum_Head_Psionic", 24, 2, gur_armor_m /*4144*/);
    b_scale(gur_1210_baaltyon);
    mdl_setmodelfatness(gur_1210_baaltyon, -1.0);
    fight_tactic = fai_human_mage;
    npc_settalentskill(gur_1210_baaltyon, npc_talent_mage, 6);
    createinvitem(gur_1210_baaltyon, itarrunewindfist);
    daily_routine = rtn_start_1210;
};

func void rtn_start_1210() {
    ta_teaching(16, 0, 23, 0, "PSI_TEMPLE_COURT_GURU");
    ta_teaching(23, 0, 16, 0, "PSI_TEMPLE_COURT_GURU");
};

func void rtn_prepareritual_1210() {
    ta_sitaround(16, 0, 23, 0, "PSI_TEMPLE_IN_05");
    ta_sitaround(23, 0, 16, 0, "PSI_TEMPLE_IN_05");
};

func void rtn_omfull_1210() {
    ta_sitaround(16, 0, 23, 0, "PSI_TEMPLE_IN_05");
    ta_sitaround(23, 0, 16, 0, "PSI_TEMPLE_IN_05");
};

func void rtn_fmtaken_1210() {
    ta_sitaround(16, 0, 23, 0, "PSI_TEMPLE_IN_05");
    ta_sitaround(23, 0, 16, 0, "PSI_TEMPLE_IN_05");
};

func void rtn_orcassault_1210() {
    ta_sitaround(16, 0, 23, 0, "PSI_TEMPLE_IN_05");
    ta_sitaround(23, 0, 16, 0, "PSI_TEMPLE_IN_05");
};

instance gur_1211_baallukor(npc_default) {
    name = "Èäîë Ëþêîð";
    npctype = npctype_friend;
    guild = gil_gur;
    level = 50;
    flags = npc_flag_immortal;
    voice = 13;
    id = 1211;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 40;
    attribute[atr_mana_max] /*3*/ = 100;
    attribute[atr_mana] /*2*/ = 100;
    attribute[atr_hitpoints_max] /*1*/ = 388;
    attribute[atr_hitpoints] /*0*/ = 388;
    mdl_setvisual(gur_1211_baallukor, "HUMANS.MDS");
    mdl_applyoverlaymds(gur_1211_baallukor, "Humans_Mage.mds");
    mdl_setvisualbody(gur_1211_baallukor, "hum_body_Naked0", 1, 1, "Hum_Head_Psionic", 20, 1, gur_armor_m /*4144*/);
    b_scale(gur_1211_baallukor);
    mdl_setmodelfatness(gur_1211_baallukor, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(gur_1211_baallukor, npc_talent_mage, 6);
    equipitem(gur_1211_baallukor, itmw_1h_sword_02 /*4402*/);
    daily_routine = rtn_start_1211;
};

func void rtn_start_1211() {
    ta_guard(23, 0, 16, 0, "GRYD_025");
    ta_guard(16, 0, 23, 0, "GRYD_025");
};

func void rtn_follow_1211() {
    ta_followpc(23, 0, 16, 0, "GRYD_025");
    ta_followpc(16, 0, 23, 0, "GRYD_025");
};

func void rtn_waitinsidetunnelone_1211() {
    ta_stay(23, 0, 16, 0, "GRYD_040");
    ta_stay(16, 0, 23, 0, "GRYD_040");
};

func void rtn_waitinsidetunneltwo_1211() {
    ta_stay(23, 0, 16, 0, "GRYD_047");
    ta_stay(16, 0, 23, 0, "GRYD_047");
};

func void rtn_door_1211() {
    ta_stay(23, 0, 16, 0, "GRYD_060");
    ta_stay(16, 0, 23, 0, "GRYD_060");
};

func void rtn_teleport_1211() {
    ta_followpc(23, 0, 16, 0, "GRYD_060");
    ta_followpc(16, 0, 23, 0, "GRYD_060");
};

func void rtn_meditate_1211() {
    ta_meditate(23, 0, 16, 0, "GRYD_082");
    ta_meditate(16, 0, 23, 0, "GRYD_082");
};

instance gur_1211_baallukorow(npc_default) {
    name = "Baal Lukor";
    npctype = npctype_main;
    guild = gil_gur;
    level = 50;
    flags = npc_flag_immortal;
    voice = 13;
    id = 12110;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 40;
    attribute[atr_mana_max] /*3*/ = 100;
    attribute[atr_mana] /*2*/ = 100;
    attribute[atr_hitpoints_max] /*1*/ = 388;
    attribute[atr_hitpoints] /*0*/ = 388;
    mdl_setvisual(gur_1211_baallukorow, "HUMANS.MDS");
    mdl_applyoverlaymds(gur_1211_baallukorow, "Humans_Mage.mds");
    mdl_setvisualbody(gur_1211_baallukorow, "hum_body_Naked0", 1, 1, "Hum_Head_Psionic", 20, 1, gur_armor_m /*4144*/);
    b_scale(gur_1211_baallukorow);
    mdl_setmodelfatness(gur_1211_baallukorow, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(gur_1211_baallukorow, npc_talent_mage, 6);
    equipitem(gur_1211_baallukorow, itmw_1h_sword_02 /*4402*/);
    daily_routine = rtn_start_12110;
};

func void rtn_start_12110() {
    ta_sleep(21, 0, 6, 0, "PSI_TEMPLE_ROOMS_IN_03");
    ta_boss(6, 0, 9, 0, "PSI_TEMPLE_IN_04");
    ta_boss(9, 0, 10, 0, "PSI_TEMPLE_RIGHTCORNER");
    ta_boss(10, 0, 11, 0, "PSI_TEMPLE_LEFTCORNER");
    ta_boss(11, 0, 13, 0, "PSI_TEMPLE_IN_06");
    ta_boss(13, 0, 15, 0, "PSI_TEMPLE_RIGHTCORNER");
    ta_boss(15, 0, 17, 0, "PSI_TEMPLE_LEFTCORNER");
    ta_boss(17, 0, 21, 0, "PSI_TEMPLE_IN_06");
};

func void rtn_ogy_12110() {
    ta_stay(0, 0, 12, 0, "");
    ta_stay(12, 0, 24, 0, "");
};

instance gur_1212_madcorkalom(npc_default) {
    name = "Áåçóìíûé Êîð Ãàëîì";
    npctype = npctype_main;
    guild = gil_gur;
    level = 1000;
    flags = 0;
    voice = 10;
    id = 1212;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 100;
    attribute[atr_mana_max] /*3*/ = 500;
    attribute[atr_mana] /*2*/ = 500;
    attribute[atr_hitpoints_max] /*1*/ = 500;
    attribute[atr_hitpoints] /*0*/ = 500;
    protection[prot_blunt] /*1*/ = 500;
    protection[prot_edge] /*2*/ = 500;
    protection[prot_point] /*6*/ = 500;
    protection[prot_fire] /*3*/ = 80;
    protection[prot_fly] /*4*/ = 80;
    protection[prot_magic] /*5*/ = 60;
    mdl_setvisual(gur_1212_madcorkalom, "HUMANS.MDS");
    mdl_applyoverlaymds(gur_1212_madcorkalom, "Humans_Mage.mds");
    mdl_setvisualbody(gur_1212_madcorkalom, "hum_body_Naked0", 1, 0, "Hum_Head_Psionic", 19, 0, gur_armor_h /*4145*/);
    b_scale(gur_1212_madcorkalom);
    mdl_setmodelfatness(gur_1212_madcorkalom, 0.0);
    fight_tactic = fai_human_mage;
    senses = (sense_see | sense_hear) | sense_smell;
    senses_range = 2000;
    npc_settalentskill(gur_1212_madcorkalom, npc_talent_mage, 6);
    createinvitems(gur_1212_madcorkalom, itarrunepyrokinesis, 1);
    equipitem(gur_1212_madcorkalom, kaloms_schwert /*4974*/);
    daily_routine = rtn_ot_1212;
};

func void rtn_start_1212() {
    ta_stay(15, 0, 22, 0, "TPL_408");
    ta_stay(22, 0, 15, 0, "TPL_408");
};

func void rtn_ot_1212() {
    ta_interceptmadcorkalom(15, 0, 22, 0, "TPL_390");
    ta_interceptmadcorkalom(22, 0, 15, 0, "TPL_390");
};

instance inextremo_drpymonte(npc_default) {
    name = "Äîêòîð Ïèìîíòý";
    npctype = npctype_main;
    guild = gil_none;
    level = 4;
    flags = npc_flag_immortal;
    voice = 11;
    id = 390;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 88;
    attribute[atr_hitpoints] /*0*/ = 88;
    mdl_setvisual(inextremo_drpymonte, "HUMANS.MDS");
    mdl_setvisualbody(inextremo_drpymonte, "HUM_IE_PYMONTE_INSTRUMENT", default, default, "HUM_HEAD_PYMONTE", default, default, -1);
    fight_tactic = fai_human_strong;
    npc_settalentskill(inextremo_drpymonte, npc_talent_1h, 1);
    daily_routine = rtn_concert_390;
};

func void rtn_concert_390() {
    ta_iepymonte(8, 0, 20, 0, "OCR_IE_PYMONTE");
    ta_iepymonte(20, 0, 8, 0, "OCR_IE_PYMONTE");
};

func void rtn_off_390() {
    ta_stay(8, 0, 20, 0, "NOWHERE");
    ta_stay(20, 0, 8, 0, "NOWHERE");
};

instance inextremo_theflail(npc_default) {
    name = "Öåï";
    npctype = npctype_main;
    guild = gil_none;
    level = 4;
    flags = 0;
    flags = npc_flag_immortal;
    voice = 11;
    id = 391;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 88;
    attribute[atr_hitpoints] /*0*/ = 88;
    mdl_setvisual(inextremo_theflail, "HUMANS.MDS");
    mdl_setvisualbody(inextremo_theflail, "HUM_IE_FLAIL_INSTRUMENT", default, default, "HUM_HEAD_FLAIL", default, default, -1);
    fight_tactic = fai_human_strong;
    npc_settalentskill(inextremo_theflail, npc_talent_1h, 1);
    daily_routine = rtn_concert_391;
};

func void rtn_concert_391() {
    ta_ieflail(8, 0, 20, 0, "OCR_IE_FLAIL");
    ta_ieflail(20, 0, 8, 0, "OCR_IE_FLAIL");
};

func void rtn_off_391() {
    ta_stay(8, 0, 20, 0, "NOWHERE");
    ta_stay(20, 0, 8, 0, "NOWHERE");
};

instance inextremo_thomastheforger(npc_default) {
    name = "Êóçíåö Òîìàñ";
    npctype = npctype_main;
    guild = gil_none;
    level = 4;
    flags = 0;
    flags = npc_flag_immortal;
    voice = 11;
    id = 392;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 88;
    attribute[atr_hitpoints] /*0*/ = 88;
    mdl_setvisual(inextremo_thomastheforger, "HUMANS.MDS");
    mdl_setvisualbody(inextremo_thomastheforger, "HUM_IE_THOMAS_INSTRUMENT", default, default, "HUM_HEAD_THOMAS", default, default, -1);
    fight_tactic = fai_human_strong;
    npc_settalentskill(inextremo_thomastheforger, npc_talent_1h, 1);
    daily_routine = rtn_concert_392;
};

func void rtn_concert_392() {
    ta_iethomas(8, 0, 20, 0, "OCR_IE_THOMAS");
    ta_iethomas(20, 0, 8, 0, "OCR_IE_THOMAS");
};

func void rtn_off_392() {
    ta_stay(8, 0, 20, 0, "NOWHERE");
    ta_stay(20, 0, 8, 0, "NOWHERE");
};

instance inextremo_unicorn(npc_default) {
    name = "Åäèíîðîã";
    npctype = npctype_main;
    guild = gil_none;
    level = 4;
    flags = 0;
    flags = npc_flag_immortal;
    voice = 11;
    id = 393;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 88;
    attribute[atr_hitpoints] /*0*/ = 88;
    mdl_setvisual(inextremo_unicorn, "HUMANS.MDS");
    mdl_setvisualbody(inextremo_unicorn, "HUM_IE_UNICORN_INSTRUMENT", default, default, "HUM_HEAD_UNICORN", default, default, -1);
    fight_tactic = fai_human_strong;
    npc_settalentskill(inextremo_unicorn, npc_talent_1h, 1);
    daily_routine = rtn_concert_393;
};

func void rtn_concert_393() {
    ta_ieunicorn(8, 0, 20, 0, "OCR_IE_UNICORN");
    ta_ieunicorn(20, 0, 8, 0, "OCR_IE_UNICORN");
};

func void rtn_off_393() {
    ta_stay(8, 0, 20, 0, "NOWHERE");
    ta_stay(20, 0, 8, 0, "NOWHERE");
};

instance inextremo_yellowpfeiffer(npc_default) {
    name = "Æåëòûé òðóáà÷";
    npctype = npctype_main;
    guild = gil_none;
    level = 4;
    flags = 0;
    flags = npc_flag_immortal;
    voice = 11;
    id = 394;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 88;
    attribute[atr_hitpoints] /*0*/ = 88;
    mdl_setvisual(inextremo_yellowpfeiffer, "HUMANS.MDS");
    mdl_setvisualbody(inextremo_yellowpfeiffer, "Hum_IE_Pfeiffer_INSTRUMENT", default, default, "HUM_HEAD_Pfeiffer", default, default, -1);
    fight_tactic = fai_human_strong;
    npc_settalentskill(inextremo_yellowpfeiffer, npc_talent_1h, 1);
    daily_routine = rtn_concert_394;
};

func void rtn_concert_394() {
    ta_iepfeiffer(8, 0, 20, 0, "OCR_IE_PFEIFFER");
    ta_iepfeiffer(20, 0, 8, 0, "OCR_IE_PFEIFFER");
};

func void rtn_off_394() {
    ta_stay(8, 0, 20, 0, "NOWHERE");
    ta_stay(20, 0, 8, 0, "NOWHERE");
};

instance inextremo_lutter(npc_default) {
    name = "Ëþòåð";
    npctype = npctype_main;
    guild = gil_none;
    level = 4;
    flags = npc_flag_immortal;
    voice = 11;
    id = 395;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 88;
    attribute[atr_hitpoints] /*0*/ = 88;
    mdl_setvisual(inextremo_lutter, "HUMANS.MDS");
    mdl_setvisualbody(inextremo_lutter, "Hum_IE_Lutter_INSTRUMENT", default, default, "HUM_HEAD_Lutter", default, default, -1);
    fight_tactic = fai_human_strong;
    npc_settalentskill(inextremo_lutter, npc_talent_1h, 1);
    daily_routine = rtn_concert_395;
};

func void rtn_concert_395() {
    ta_ielutter(8, 0, 20, 0, "OCR_IE_LUTTER");
    ta_ielutter(20, 0, 8, 0, "OCR_IE_LUTTER");
};

func void rtn_off_395() {
    ta_stay(8, 0, 20, 0, "NOWHERE");
    ta_stay(20, 0, 8, 0, "NOWHERE");
};

instance inextremo_flex(npc_default) {
    name = "Ôëåêñ";
    npctype = npctype_main;
    guild = gil_none;
    level = 4;
    flags = 0;
    flags = npc_flag_immortal;
    voice = 11;
    id = 396;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 88;
    attribute[atr_hitpoints] /*0*/ = 88;
    mdl_setvisual(inextremo_flex, "HUMANS.MDS");
    mdl_setvisualbody(inextremo_flex, "Hum_IE_Flex_INSTRUMENT", default, default, "HUM_HEAD_Flex", default, default, -1);
    fight_tactic = fai_human_strong;
    npc_settalentskill(inextremo_flex, npc_talent_1h, 1);
    daily_routine = rtn_concert_396;
};

func void rtn_concert_396() {
    ta_ieflex(8, 0, 20, 0, "OCR_IE_FLEX");
    ta_ieflex(20, 0, 8, 0, "OCR_IE_FLEX");
};

func void rtn_off_396() {
    ta_stay(8, 0, 20, 0, "NOWHERE");
    ta_stay(20, 0, 8, 0, "NOWHERE");
};

instance ie_397_announcer(npc_default) {
    name = "Ñòèâ";
    npctype = npctype_main;
    guild = gil_none;
    level = 4;
    flags = npc_flag_immortal;
    voice = 11;
    id = 397;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 88;
    attribute[atr_hitpoints] /*0*/ = 88;
    mdl_setvisual(ie_397_announcer, "HUMANS.MDS");
    mdl_setvisualbody(ie_397_announcer, "hum_body_Naked0", 4, 1, "Hum_Head_FatBald", 113, default, -1);
    fight_tactic = fai_human_strong;
    npc_settalentskill(ie_397_announcer, npc_talent_1h, 1);
    daily_routine = rtn_announce_397;
};

func void rtn_announce_397() {
    ta_stay(8, 0, 20, 0, "OCR_AUDIENCE_02");
    ta_stay(20, 0, 8, 0, "OCR_AUDIENCE_02");
};

func void rtn_concert_397() {
    ta_firespit(8, 0, 20, 0, "OCR_AUDIENCE_02");
    ta_firespit(20, 0, 8, 0, "OCR_AUDIENCE_02");
};

func void rtn_off_397() {
    ta_stay(8, 0, 20, 0, "NOWHERE");
    ta_stay(20, 0, 8, 0, "NOWHERE");
};

instance charlotte(npc_default) {
    name = "Øàðëîòòà";
    npctype = npctype_main;
    guild = gil_bab;
    level = 1;
    flags = npc_flag_immortal;
    voice = 16;
    id = 398;
    attribute[atr_strength] /*4*/ = 5;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 40;
    attribute[atr_hitpoints] /*0*/ = 40;
    mdl_setvisual(charlotte, "BABE.MDS");
    mdl_setvisualbody(charlotte, "Bab_body_Naked0", 0, 2, "Bab_Head_Hair1", 0, default, -1);
    aivar[22] = true;
    fight_tactic = fai_human_coward;
    daily_routine = rtn_announce_398;
};

func void rtn_announce_398() {
    ta_stay(8, 0, 20, 0, "OCR_AUDIENCE_03");
    ta_stay(20, 0, 8, 0, "OCR_AUDIENCE_03");
};

func void rtn_concert_398() {
    ta_charlotte_dance(8, 0, 20, 0, "OCR_AUDIENCE_03");
    ta_charlotte_dance(20, 0, 8, 0, "OCR_AUDIENCE_03");
};

func void rtn_off_398() {
    ta_stay(8, 0, 20, 0, "NOWHERE");
    ta_stay(20, 0, 8, 0, "NOWHERE");
};

instance iefan1(npc_default) {
    name = name_buddler;
    npctype = npctype_main;
    guild = gil_vlk;
    level = 5;
    voice = 2;
    id = 399;
    attribute[atr_strength] /*4*/ = 25;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 100;
    attribute[atr_hitpoints] /*0*/ = 100;
    mdl_setvisual(iefan1, "HUMANS.MDS");
    mdl_setvisualbody(iefan1, "hum_body_Naked0", 1, 1, "Hum_Head_FatBald", 74, default, -1);
    b_scale(iefan1);
    mdl_setmodelfatness(iefan1, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(iefan1, itfoloaf);
    createinvitem(iefan1, itfobeer);
    equipitem(iefan1, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_concert_399;
};

func void rtn_concert_399() {
    ta_watchinextremo(8, 0, 20, 0, "OCR_CROWD_01");
    ta_watchinextremo(20, 0, 8, 0, "OCR_CROWD_01");
};

func void rtn_off_399() {
    ta_stay(8, 0, 20, 0, "NOWHERE");
    ta_stay(20, 0, 8, 0, "NOWHERE");
};

instance iefan2(npc_default) {
    name = name_buddler;
    npctype = npctype_main;
    guild = gil_vlk;
    level = 5;
    voice = 2;
    id = 400;
    attribute[atr_strength] /*4*/ = 25;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 100;
    attribute[atr_hitpoints] /*0*/ = 100;
    mdl_setvisual(iefan2, "HUMANS.MDS");
    mdl_setvisualbody(iefan2, "hum_body_Naked0", 2, 1, "Hum_Head_FatBald", 73, default, -1);
    b_scale(iefan2);
    mdl_setmodelfatness(iefan2, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(iefan2, itfoloaf);
    createinvitem(iefan2, itfobeer);
    daily_routine = rtn_concert_400;
};

func void rtn_concert_400() {
    ta_watchinextremo(8, 0, 20, 0, "OCR_CROWD_02");
    ta_watchinextremo(20, 0, 8, 0, "OCR_CROWD_02");
};

func void rtn_off_400() {
    ta_stay(8, 0, 20, 0, "NOWHERE");
    ta_stay(20, 0, 8, 0, "NOWHERE");
};

instance iefan3(npc_default) {
    name = name_buddler;
    npctype = npctype_main;
    guild = gil_vlk;
    level = 5;
    voice = 2;
    id = 401;
    attribute[atr_strength] /*4*/ = 25;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 100;
    attribute[atr_hitpoints] /*0*/ = 100;
    mdl_setvisual(iefan3, "HUMANS.MDS");
    mdl_setvisualbody(iefan3, "hum_body_Naked0", 2, 0, "Hum_Head_FatBald", 10, default, -1);
    b_scale(iefan3);
    mdl_setmodelfatness(iefan3, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(iefan3, itfoloaf);
    createinvitem(iefan3, itfobeer);
    equipitem(iefan3, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_concert_401;
};

func void rtn_concert_401() {
    ta_watchinextremo(8, 0, 20, 0, "OCR_CROWD_03");
    ta_watchinextremo(20, 0, 8, 0, "OCR_CROWD_03");
};

func void rtn_off_401() {
    ta_stay(8, 0, 20, 0, "NOWHERE");
    ta_stay(20, 0, 8, 0, "NOWHERE");
};

instance iefan4(npc_default) {
    name = name_buddler;
    npctype = npctype_main;
    guild = gil_vlk;
    level = 5;
    voice = 2;
    id = 402;
    attribute[atr_strength] /*4*/ = 25;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 100;
    attribute[atr_hitpoints] /*0*/ = 100;
    mdl_setvisual(iefan4, "HUMANS.MDS");
    mdl_setvisualbody(iefan4, "hum_body_Naked0", 4, 2, "Hum_Head_FatBald", 4, default, -1);
    b_scale(iefan4);
    mdl_setmodelfatness(iefan4, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(iefan4, itfoloaf);
    createinvitem(iefan4, itfobeer);
    daily_routine = rtn_concert_402;
};

func void rtn_concert_402() {
    ta_watchinextremo(8, 0, 20, 0, "OCR_CROWD_04");
    ta_watchinextremo(20, 0, 8, 0, "OCR_CROWD_04");
};

func void rtn_off_402() {
    ta_stay(8, 0, 20, 0, "NOWHERE");
    ta_stay(20, 0, 8, 0, "NOWHERE");
};

instance kdf_400_rodriguez(npc_default) {
    name = "Ðîäðèãåç";
    npctype = npctype_main;
    guild = gil_kdf;
    level = 25;
    voice = 12;
    id = 400;
    attribute[atr_strength] /*4*/ = 45;
    attribute[atr_dexterity] /*5*/ = 35;
    attribute[atr_mana_max] /*3*/ = 90;
    attribute[atr_mana] /*2*/ = 90;
    attribute[atr_hitpoints_max] /*1*/ = 340;
    attribute[atr_hitpoints] /*0*/ = 340;
    mdl_setvisual(kdf_400_rodriguez, "HUMANS.MDS");
    mdl_applyoverlaymds(kdf_400_rodriguez, "Humans_Mage.mds");
    mdl_setvisualbody(kdf_400_rodriguez, "hum_body_Naked0", 0, 0, "Hum_Head_Pony", 6, 1, kdf_armor_l /*4146*/);
    b_scale(kdf_400_rodriguez);
    mdl_setmodelfatness(kdf_400_rodriguez, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_mage;
    npc_settalentskill(kdf_400_rodriguez, npc_talent_mage, 6);
    createinvitem(kdf_400_rodriguez, itmi_stuff_oldcoin_02);
    createinvitem(kdf_400_rodriguez, itarrunefirebolt);
    daily_routine = rtn_start_400;
};

func void rtn_start_400() {
    ta_sitcampfire(22, 0, 7, 0, "OCC_CHAPEL_MAGE_03");
    ta_smalltalk(7, 0, 22, 0, "OCC_CENTER_2");
};

func void rtn_kdfritual_400() {
    ta_position(8, 0, 20, 0, "OCC_CHAPEL_MAGE_01");
    ta_position(20, 0, 8, 0, "OCC_CHAPEL_MAGE_01");
};

instance kdf_401_damarok(npc_default) {
    name = "Äàìàðîê";
    npctype = npctype_main;
    guild = gil_kdf;
    level = 27;
    voice = 14;
    id = 401;
    attribute[atr_strength] /*4*/ = 35;
    attribute[atr_dexterity] /*5*/ = 35;
    attribute[atr_mana_max] /*3*/ = 100;
    attribute[atr_mana] /*2*/ = 100;
    attribute[atr_hitpoints_max] /*1*/ = 364;
    attribute[atr_hitpoints] /*0*/ = 364;
    mdl_setvisual(kdf_401_damarok, "HUMANS.MDS");
    mdl_applyoverlaymds(kdf_401_damarok, "Humans_Mage.mds");
    mdl_setvisualbody(kdf_401_damarok, "hum_body_Naked0", 0, 0, "Hum_Head_FatBald", 5, 1, kdf_armor_l /*4146*/);
    b_scale(kdf_401_damarok);
    mdl_setmodelfatness(kdf_401_damarok, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_mage;
    npc_settalentskill(kdf_401_damarok, npc_talent_mage, 6);
    createinvitem(kdf_401_damarok, itmi_stuff_oldcoin_02);
    createinvitems(kdf_401_damarok, itfo_potion_health_02, 3);
    createinvitems(kdf_401_damarok, itfo_potion_health_01, 4);
    equipitem(kdf_401_damarok, schutzamulett_geschosse /*4015*/);
    createinvitem(kdf_401_damarok, itarrunefireball);
    daily_routine = rtn_start_401;
};

func void rtn_start_401() {
    ta_sitcampfire(19, 1, 7, 1, "OCC_CHAPEL_MAGE_01");
    ta_potionalchemy(7, 1, 19, 1, "OCC_CHAPEL_RIGHT_ROOM");
};

func void rtn_kdfritual_401() {
    ta_position(8, 0, 20, 0, "OCC_CHAPEL_MAGE_04");
    ta_position(20, 0, 8, 0, "OCC_CHAPEL_MAGE_04");
};

instance kdf_402_corristo(npc_default) {
    name = "Êîððèñòî";
    npctype = npctype_main;
    guild = gil_kdf;
    level = 30;
    flags = npc_flag_immortal;
    voice = 14;
    id = 402;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 40;
    attribute[atr_mana_max] /*3*/ = 100;
    attribute[atr_mana] /*2*/ = 100;
    attribute[atr_hitpoints_max] /*1*/ = 400;
    attribute[atr_hitpoints] /*0*/ = 400;
    mdl_setvisual(kdf_402_corristo, "HUMANS.MDS");
    mdl_applyoverlaymds(kdf_402_corristo, "Humans_Mage.mds");
    mdl_setvisualbody(kdf_402_corristo, "hum_body_Naked0", 0, 1, "Hum_Head_Pony", 84, 1, kdf_armor_h /*4147*/);
    b_scale(kdf_402_corristo);
    mdl_setmodelfatness(kdf_402_corristo, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_mage;
    npc_settalentskill(kdf_402_corristo, npc_talent_mage, 6);
    createinvitem(kdf_402_corristo, itmi_stuff_oldcoin_02);
    createinvitems(kdf_402_corristo, itfo_potion_health_02, 2);
    createinvitems(kdf_402_corristo, itfo_potion_mana_02, 2);
    createinvitems(kdf_402_corristo, itfowine, 2);
    equipitem(kdf_402_corristo, schutzring_magie2_fire2 /*4923*/);
    createinvitem(kdf_402_corristo, itarrunefireball);
    daily_routine = rtn_start_402;
};

func void rtn_start_402() {
    ta_sitcampfire(19, 5, 6, 55, "OCC_CHAPEL_MAGE_02");
    ta_readbook(6, 55, 19, 5, "OCC_CHAPEL_UPSTAIRS_RIGHT");
};

func void rtn_kdfritual_402() {
    ta_position(8, 0, 20, 0, "OCC_CHAPEL_UPSTAIRS");
    ta_position(20, 0, 8, 0, "OCC_CHAPEL_UPSTAIRS");
};

func void rtn_waitforsc_402() {
    ta_position(8, 0, 20, 0, "OCC_CHAPEL_HALL");
    ta_position(20, 0, 8, 0, "OCC_CHAPEL_HALL");
};

instance kdf_403_drago(npc_default) {
    name = "Äðàãî";
    npctype = npctype_main;
    guild = gil_kdf;
    level = 28;
    voice = 13;
    id = 403;
    attribute[atr_strength] /*4*/ = 40;
    attribute[atr_dexterity] /*5*/ = 35;
    attribute[atr_mana_max] /*3*/ = 90;
    attribute[atr_mana] /*2*/ = 90;
    attribute[atr_hitpoints_max] /*1*/ = 376;
    attribute[atr_hitpoints] /*0*/ = 376;
    mdl_setvisual(kdf_403_drago, "HUMANS.MDS");
    mdl_applyoverlaymds(kdf_403_drago, "Humans_Mage.mds");
    mdl_setvisualbody(kdf_403_drago, "hum_body_Naked0", 0, 0, "Hum_Head_Thief", 4, 0, kdf_armor_l /*4146*/);
    b_scale(kdf_403_drago);
    mdl_setmodelfatness(kdf_403_drago, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_mage;
    npc_settalentskill(kdf_403_drago, npc_talent_mage, 6);
    createinvitem(kdf_403_drago, itmi_stuff_oldcoin_02);
    createinvitems(kdf_403_drago, itfo_potion_health_02, 3);
    createinvitems(kdf_403_drago, itfo_potion_health_01, 4);
    equipitem(kdf_403_drago, schutzring_total2 /*4935*/);
    createinvitem(kdf_403_drago, itarrunefireball);
    daily_routine = rtn_start_403;
};

func void rtn_start_403() {
    ta_sitcampfire(18, 50, 7, 10, "OCC_CHAPEL_MAGE_04");
    ta_practicemagic(7, 10, 18, 50, "OCC_CHAPEL_MAGE_04");
};

func void rtn_kdfritual_403() {
    ta_position(8, 0, 20, 0, "OCC_CHAPEL_MAGE_03");
    ta_position(20, 0, 8, 0, "OCC_CHAPEL_MAGE_03");
};

instance kdf_404_xardas(npc_default) {
    name = "Êñàðäàñ";
    npctype = npctype_friend;
    guild = gil_dmb;
    level = 30;
    flags = npc_flag_immortal;
    voice = 14;
    id = 404;
    attribute[atr_strength] /*4*/ = 55;
    attribute[atr_dexterity] /*5*/ = 65;
    attribute[atr_mana_max] /*3*/ = 100;
    attribute[atr_mana] /*2*/ = 100;
    attribute[atr_hitpoints_max] /*1*/ = 400;
    attribute[atr_hitpoints] /*0*/ = 400;
    mdl_setvisual(kdf_404_xardas, "HUMANS.MDS");
    mdl_applyoverlaymds(kdf_404_xardas, "Humans_Mage.mds");
    mdl_setvisualbody(kdf_404_xardas, "hum_body_Naked0", 0, 1, "Hum_Head_Bald", 82, 1, dmb_armor_m /*4150*/);
    b_scale(kdf_404_xardas);
    mdl_setmodelfatness(kdf_404_xardas, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_mage;
    senses = (sense_see | sense_hear) | sense_smell;
    npc_settalentskill(kdf_404_xardas, npc_talent_mage, 6);
    daily_routine = rtn_start_404;
};

func void rtn_start_404() {
    ta_readbook_xardas(6, 0, 8, 0, "DT_E3_07");
    ta_readbook_xardas(8, 0, 6, 0, "DT_E3_07");
};

func void rtn_study_404() {
    ta_practicemagic(21, 0, 6, 0, "DT_PLATFORM_02");
    ta_readbook_xardas(6, 0, 9, 0, "DT_E3_07");
    ta_readbook_xardas(9, 0, 10, 0, "DT_E3_05");
    ta_readbook_xardas(10, 0, 11, 0, "DT_E3_07");
    ta_readbook_xardas(11, 0, 13, 0, "DT_E3_04");
    ta_readbook_xardas(13, 0, 15, 0, "DT_E3_07");
    ta_readbook_xardas(15, 0, 17, 0, "DT_E3_05");
    ta_readbook_xardas(17, 0, 21, 0, "DT_E3_07");
};

instance kdf_405_torrez(npc_default) {
    name = "Òîððåç";
    npctype = npctype_main;
    guild = gil_kdf;
    level = 26;
    voice = 4;
    id = 405;
    attribute[atr_strength] /*4*/ = 40;
    attribute[atr_dexterity] /*5*/ = 40;
    attribute[atr_mana_max] /*3*/ = 85;
    attribute[atr_mana] /*2*/ = 85;
    attribute[atr_hitpoints_max] /*1*/ = 352;
    attribute[atr_hitpoints] /*0*/ = 352;
    mdl_setvisual(kdf_405_torrez, "HUMANS.MDS");
    mdl_applyoverlaymds(kdf_405_torrez, "Humans_Mage.mds");
    mdl_setvisualbody(kdf_405_torrez, "hum_body_Naked0", 0, 0, "Hum_Head_Thief", 5, 4, kdf_armor_l /*4146*/);
    b_scale(kdf_405_torrez);
    mdl_setmodelfatness(kdf_405_torrez, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_mage;
    npc_settalentskill(kdf_405_torrez, npc_talent_mage, 6);
    b_give_torrezchapter1runes();
    createinvitem(kdf_405_torrez, itmi_stuff_oldcoin_02);
    equipitem(kdf_405_torrez, itarrunefireball /*4162*/);
    daily_routine = rtn_start_405;
};

func void rtn_start_405() {
    ta_sitcampfire(22, 5, 6, 55, "OCC_CHAPEL_MAGE_05");
    ta_smalltalk(6, 55, 22, 5, "OCC_CENTER_2");
};

func void rtn_kdfritual_405() {
    ta_position(8, 0, 20, 0, "OCC_CHAPEL_MAGE_02");
    ta_position(20, 0, 8, 0, "OCC_CHAPEL_MAGE_02");
};

instance kdf_406_otxardas(npc_default) {
    name = "Êñàðäàñ";
    npctype = npctype_main;
    guild = gil_none;
    level = 30;
    flags = npc_flag_immortal;
    voice = 14;
    id = 406;
    attribute[atr_strength] /*4*/ = 55;
    attribute[atr_dexterity] /*5*/ = 65;
    attribute[atr_mana_max] /*3*/ = 100;
    attribute[atr_mana] /*2*/ = 100;
    attribute[atr_hitpoints_max] /*1*/ = 400;
    attribute[atr_hitpoints] /*0*/ = 400;
    mdl_setvisual(kdf_406_otxardas, "HUMANS.MDS");
    mdl_applyoverlaymds(kdf_406_otxardas, "Humans_Mage.mds");
    mdl_setvisualbody(kdf_406_otxardas, "hum_body_Naked0", 0, 1, "Hum_Head_Bald", 82, 1, dmb_armor_m /*4150*/);
    b_scale(kdf_406_otxardas);
    mdl_setmodelfatness(kdf_406_otxardas, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_mage;
    senses = (sense_see | sense_hear) | sense_smell;
    npc_percenable(kdf_406_otxardas, perc_assessenemy, b_assessenemy);
    npc_percenable(kdf_406_otxardas, perc_assessfighter, b_assessfighter);
    npc_percenable(kdf_406_otxardas, perc_assessplayer, b_assesssc);
    npc_percenable(kdf_406_otxardas, perc_assessdamage, zs_reacttodamage);
    npc_percenable(kdf_406_otxardas, perc_assessmagic, b_assessmagic);
    npc_percenable(kdf_406_otxardas, perc_assesscaster, b_assesscaster);
    npc_settalentskill(kdf_406_otxardas, npc_talent_mage, 6);
    createinvitems(kdf_406_otxardas, itfo_potion_health_03, 3);
    createinvitems(kdf_406_otxardas, itfo_potion_mana_03, 3);
    equipitem(kdf_406_otxardas, amulett_der_erleuchtung /*4051*/);
    equipitem(kdf_406_otxardas, ring_der_magie /*4956*/);
    equipitem(kdf_406_otxardas, ring_der_erleuchtung /*4959*/);
    createinvitem(kdf_406_otxardas, itarrunefireball);
    createinvitems(kdf_406_otxardas, itarscrollsummondemon, 20);
    daily_routine = rtn_start_406;
};

func void rtn_start_406() {
    ta_intercept(15, 0, 22, 0, "TPL_331");
    ta_intercept(22, 0, 15, 0, "TPL_331");
};

func void rtn_drained_406() {
    ta_drained_yberion(23, 0, 7, 0, "TPL_331");
    ta_drained_yberion(7, 0, 23, 0, "TPL_331");
};

instance kdw_600_saturas(npc_default) {
    name = "Ñàòóðàñ";
    npctype = npctype_friend;
    guild = gil_kdw;
    level = 29;
    flags = npc_flag_immortal;
    voice = 14;
    id = 600;
    attribute[atr_strength] /*4*/ = 50;
    attribute[atr_dexterity] /*5*/ = 40;
    attribute[atr_mana_max] /*3*/ = 100;
    attribute[atr_mana] /*2*/ = 100;
    attribute[atr_hitpoints_max] /*1*/ = 388;
    attribute[atr_hitpoints] /*0*/ = 388;
    mdl_setvisual(kdw_600_saturas, "HUMANS.MDS");
    mdl_applyoverlaymds(kdw_600_saturas, "Humans_Mage.mds");
    mdl_setvisualbody(kdw_600_saturas, "hum_body_Naked0", 0, 3, "Hum_Head_FatBald", 7, 0, kdw_armor_h /*4149*/);
    b_scale(kdw_600_saturas);
    mdl_setmodelfatness(kdw_600_saturas, 0.0);
    fight_tactic = fai_human_mage;
    senses = (sense_see | sense_hear) | sense_smell;
    npc_settalentskill(kdw_600_saturas, npc_talent_mage, 6);
    createinvitem(kdw_600_saturas, itfo_potion_health_01);
    createinvitem(kdw_600_saturas, itfo_potion_mana_01);
    createinvitem(kdw_600_saturas, itfo_plants_flameberry_01);
    equipitem(kdw_600_saturas, schutzamulett_feuer /*4009*/);
    equipitem(kdw_600_saturas, machtring /*4962*/);
    createinvitem(kdw_600_saturas, itarrunechainlightning);
    createinvitem(kdw_600_saturas, itarruneicecube);
    daily_routine = rtn_start_600;
};

func void rtn_start_600() {
    ta_readbook(1, 0, 5, 0, "NC_KDW_CAVE_CENTER");
    ta_readbook(5, 0, 1, 0, "NC_KDW_CAVE_CENTER");
};

instance kdw_601_myxir(npc_default) {
    name = "Ìèêñèð";
    npctype = npctype_main;
    guild = gil_kdw;
    level = 24;
    voice = 10;
    id = 601;
    attribute[atr_strength] /*4*/ = 55;
    attribute[atr_dexterity] /*5*/ = 35;
    attribute[atr_mana_max] /*3*/ = 96;
    attribute[atr_mana] /*2*/ = 96;
    attribute[atr_hitpoints_max] /*1*/ = 328;
    attribute[atr_hitpoints] /*0*/ = 328;
    mdl_setvisual(kdw_601_myxir, "HUMANS.MDS");
    mdl_applyoverlaymds(kdw_601_myxir, "Humans_Mage.mds");
    mdl_setvisualbody(kdw_601_myxir, "hum_body_Naked0", 0, 0, "Hum_Head_Pony", 7, 4, kdw_armor_l /*4148*/);
    b_scale(kdw_601_myxir);
    mdl_setmodelfatness(kdw_601_myxir, 0.0);
    fight_tactic = fai_human_mage;
    npc_settalentskill(kdw_601_myxir, npc_talent_mage, 6);
    createinvitem(kdw_601_myxir, itfo_potion_health_02);
    createinvitem(kdw_601_myxir, itfo_potion_mana_03);
    createinvitem(kdw_601_myxir, itfo_plants_flameberry_01);
    createinvitem(kdw_601_myxir, itfo_plants_ravenherb_01);
    createinvitem(kdw_601_myxir, itarrunethunderbolt);
    daily_routine = rtn_start_601;
};

func void rtn_start_601() {
    ta_sleep(1, 0, 4, 0, "NC_KDW03_IN");
    ta_readbook(4, 0, 1, 0, "NC_KDW03_IN");
};

instance kdw_602_merdarion(npc_default) {
    name = "Ìåðäàðèîí";
    npctype = npctype_main;
    guild = gil_kdw;
    level = 26;
    voice = 14;
    id = 602;
    attribute[atr_strength] /*4*/ = 45;
    attribute[atr_dexterity] /*5*/ = 35;
    attribute[atr_mana_max] /*3*/ = 90;
    attribute[atr_mana] /*2*/ = 90;
    attribute[atr_hitpoints_max] /*1*/ = 352;
    attribute[atr_hitpoints] /*0*/ = 352;
    mdl_setvisual(kdw_602_merdarion, "HUMANS.MDS");
    mdl_applyoverlaymds(kdw_602_merdarion, "Humans_Mage.mds");
    mdl_setvisualbody(kdw_602_merdarion, "hum_body_Naked0", 0, 0, "Hum_Head_Thief", 8, 0, kdw_armor_l /*4148*/);
    b_scale(kdw_602_merdarion);
    mdl_setmodelfatness(kdw_602_merdarion, 0.0);
    fight_tactic = fai_human_mage;
    npc_settalentskill(kdw_602_merdarion, npc_talent_mage, 6);
    createinvitem(kdw_602_merdarion, itfo_potion_health_03);
    createinvitems(kdw_602_merdarion, itfo_potion_mana_02, 2);
    equipitem(kdw_602_merdarion, lebensamulett /*4042*/);
    createinvitem(kdw_602_merdarion, itarrunechainlightning);
    daily_routine = rtn_start_602;
};

func void rtn_start_602() {
    ta_sleep(23, 0, 6, 0, "NC_KDW01_IN");
    ta_readbook(6, 0, 23, 0, "NC_KDW01_IN");
};

func void rtn_kdwaufnahme_602() {
    ta_position(1, 0, 5, 0, "NC_KDW_CAVE_STAIRS_MOVEMENT2");
    ta_position(5, 0, 1, 0, "NC_KDW_CAVE_STAIRS_MOVEMENT2");
};

instance kdw_603_nefarius(npc_default) {
    name = "Íåôàðèóñ";
    npctype = npctype_main;
    guild = gil_kdw;
    level = 25;
    voice = 4;
    id = 603;
    attribute[atr_strength] /*4*/ = 35;
    attribute[atr_dexterity] /*5*/ = 35;
    attribute[atr_mana_max] /*3*/ = 85;
    attribute[atr_mana] /*2*/ = 85;
    attribute[atr_hitpoints_max] /*1*/ = 340;
    attribute[atr_hitpoints] /*0*/ = 340;
    mdl_setvisual(kdw_603_nefarius, "HUMANS.MDS");
    mdl_applyoverlaymds(kdw_603_nefarius, "Humans_Mage.mds");
    mdl_setvisualbody(kdw_603_nefarius, "hum_body_Naked0", 0, 0, "Hum_Head_Psionic", 8, 1, kdw_armor_l /*4148*/);
    b_scale(kdw_603_nefarius);
    mdl_setmodelfatness(kdw_603_nefarius, 0.0);
    fight_tactic = fai_human_mage;
    npc_settalentskill(kdw_603_nefarius, npc_talent_mage, 6);
    createinvitem(kdw_603_nefarius, itfo_potion_health_02);
    createinvitem(kdw_603_nefarius, itfo_potion_mana_02);
    createinvitems(kdw_603_nefarius, itfo_plants_flameberry_01, 2);
    equipitem(kdw_603_nefarius, schutzring_total1 /*4932*/);
    equipitem(kdw_603_nefarius, ring_der_magie /*4956*/);
    createinvitem(kdw_603_nefarius, itarrunethunderball);
    daily_routine = rtn_start_603;
};

func void rtn_start_603() {
    ta_practicemagic(4, 0, 23, 0, "NC_PLACE02");
    ta_practicemagic(23, 0, 4, 0, "NC_PLACE02");
};

instance kdw_604_cronos(npc_default) {
    name = "Êðîíîñ";
    npctype = npctype_friend;
    guild = gil_kdw;
    level = 28;
    flags = npc_flag_immortal;
    voice = 8;
    id = 604;
    attribute[atr_strength] /*4*/ = 45;
    attribute[atr_dexterity] /*5*/ = 35;
    attribute[atr_mana_max] /*3*/ = 100;
    attribute[atr_mana] /*2*/ = 100;
    attribute[atr_hitpoints_max] /*1*/ = 376;
    attribute[atr_hitpoints] /*0*/ = 376;
    mdl_setvisual(kdw_604_cronos, "HUMANS.MDS");
    mdl_applyoverlaymds(kdw_604_cronos, "Humans_Mage.mds");
    mdl_setvisualbody(kdw_604_cronos, "hum_body_Naked0", 0, 0, "Hum_Head_Thief", 7, 1, kdw_armor_l /*4148*/);
    b_scale(kdw_604_cronos);
    mdl_setmodelfatness(kdw_604_cronos, 0.0);
    fight_tactic = fai_human_mage;
    npc_settalentskill(kdw_604_cronos, npc_talent_mage, 6);
    b_give_cronoschapter1runes();
    createinvitem(kdw_604_cronos, itarruneicecube);
    createinvitem(kdw_604_cronos, itarrunethunderbolt);
    daily_routine = rtn_start_604;
};

func void rtn_start_604() {
    ta_sleep(23, 0, 8, 0, "NC_PATH_TO_PIT_03");
    ta_orepile(8, 0, 23, 0, "NC_PATH_TO_PIT_03");
};

instance kdw_605_riordian(npc_default) {
    name = "Ðèîðäàí";
    npctype = npctype_friend;
    guild = gil_kdw;
    level = 25;
    voice = 14;
    id = 605;
    attribute[atr_strength] /*4*/ = 35;
    attribute[atr_dexterity] /*5*/ = 35;
    attribute[atr_mana_max] /*3*/ = 90;
    attribute[atr_mana] /*2*/ = 90;
    attribute[atr_hitpoints_max] /*1*/ = 340;
    attribute[atr_hitpoints] /*0*/ = 340;
    mdl_setvisual(kdw_605_riordian, "HUMANS.MDS");
    mdl_applyoverlaymds(kdw_605_riordian, "Humans_Mage.mds");
    mdl_setvisualbody(kdw_605_riordian, "hum_body_Naked0", 0, 0, "Hum_Head_Bald", 9, 1, kdw_armor_l /*4148*/);
    b_scale(kdw_605_riordian);
    mdl_setmodelfatness(kdw_605_riordian, 0.0);
    fight_tactic = fai_human_mage;
    senses = (sense_see | sense_hear) | sense_smell;
    npc_settalentskill(kdw_605_riordian, npc_talent_mage, 6);
    b_giveriordianchapter1potions();
    createinvitem(kdw_605_riordian, itarrunethunderball);
    daily_routine = rtn_start_605;
};

func void rtn_start_605() {
    ta_sleep(23, 0, 4, 0, "NC_KDW06_IN");
    ta_potionalchemy(4, 0, 23, 0, "NC_KDW06_IN");
};

func void rtn_foundurshak_605() {
    ta_practicemagic(1, 0, 5, 0, "NC_KDW_CAVE_STAIRS_MOVEMENT2");
    ta_practicemagic(5, 0, 1, 0, "NC_KDW_CAVE_STAIRS_MOVEMENT2");
};

instance non_1500_gilbert(npc_default) {
    name = "Ãèëáåðò";
    npctype = npctype_main;
    guild = gil_none;
    level = 4;
    voice = 4;
    id = 1500;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 148;
    attribute[atr_hitpoints] /*0*/ = 148;
    mdl_setvisual(non_1500_gilbert, "HUMANS.MDS");
    mdl_applyoverlaymds(non_1500_gilbert, "Humans_Tired.mds");
    mdl_setvisualbody(non_1500_gilbert, "hum_body_Naked0", 2, 0, "Hum_Head_Thief", 16, 1, vlk_armor_l /*4121*/);
    b_scale(non_1500_gilbert);
    mdl_setmodelfatness(non_1500_gilbert, 0.0);
    fight_tactic = fai_human_coward;
    npc_settalentskill(non_1500_gilbert, npc_talent_1h, 1);
    createinvitems(non_1500_gilbert, itkelockpick, 5);
    createinvitems(non_1500_gilbert, itmiscoop, 1);
    createinvitems(non_1500_gilbert, itmihammer, 1);
    createinvitems(non_1500_gilbert, itmistomper, 1);
    createinvitems(non_1500_gilbert, itmiswordraw, 3);
    createinvitems(non_1500_gilbert, itmilute, 1);
    createinvitems(non_1500_gilbert, itlstorch, 4);
    createinvitems(non_1500_gilbert, itmi_stuff_barbknife_01, 1);
    createinvitems(non_1500_gilbert, itmi_stuff_oldcoin_02, 17);
    createinvitems(non_1500_gilbert, itmi_stuff_cup_01, 1);
    createinvitems(non_1500_gilbert, itmi_stuff_pan_01, 1);
    createinvitems(non_1500_gilbert, itmi_stuff_mug_01, 1);
    createinvitems(non_1500_gilbert, itfobeer, 3);
    createinvitems(non_1500_gilbert, itfocheese, 5);
    createinvitems(non_1500_gilbert, itfomutton, 4);
    createinvitems(non_1500_gilbert, itfoloaf, 2);
    equipitem(non_1500_gilbert, itmw_1h_axe_old_01 /*4391*/);
    daily_routine = rtn_start_1500;
};

func void rtn_start_1500() {
    ta_sitaround(22, 0, 5, 0, "LOCATION_01_07");
    ta_sitaround(5, 0, 22, 0, "LOCATION_01_07");
};

instance non_1501_wegelagerer(npc_default) {
    name = "Áðîäÿãà";
    npctype = npctype_rogue;
    guild = gil_none;
    level = 9;
    voice = 6;
    id = 1501;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 175;
    attribute[atr_hitpoints] /*0*/ = 175;
    mdl_setvisual(non_1501_wegelagerer, "HUMANS.MDS");
    mdl_setvisualbody(non_1501_wegelagerer, "hum_body_Naked0", 3, 0, "Hum_Head_Thief", 11, 3, -1);
    b_scale(non_1501_wegelagerer);
    mdl_setmodelfatness(non_1501_wegelagerer, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(non_1501_wegelagerer, itfoloaf);
    createinvitems(non_1501_wegelagerer, itminugget, 9);
    createinvitems(non_1501_wegelagerer, itfobeer, 2);
    equipitem(non_1501_wegelagerer, itmw_1h_axe_old_01 /*4391*/);
    daily_routine = rtn_start_1501;
};

func void rtn_start_1501() {
    npc_setpermattitude(self, att_hostile);
    ta_sitcampfire(22, 0, 6, 0, "SPAWN_TALL_PATH_BANDITOS2_03");
    ta_smalltalk(6, 0, 22, 0, "SPAWN_TALL_PATH_BANDITOS2_02_04");
};

instance non_1502_wegelagerer(npc_default) {
    name = "Áðîäÿãà";
    npctype = npctype_rogue;
    guild = gil_none;
    level = 9;
    voice = 6;
    id = 1502;
    attribute[atr_strength] /*4*/ = 35;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 195;
    attribute[atr_hitpoints] /*0*/ = 195;
    mdl_setvisual(non_1502_wegelagerer, "HUMANS.MDS");
    mdl_setvisualbody(non_1502_wegelagerer, "hum_body_Naked0", 2, 3, "Hum_Head_Thief", 5, 2, -1);
    b_scale(non_1502_wegelagerer);
    mdl_setmodelfatness(non_1502_wegelagerer, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(non_1502_wegelagerer, npc_talent_1h, 1);
    createinvitems(non_1502_wegelagerer, itfo_potion_health_01, 2);
    createinvitems(non_1502_wegelagerer, itminugget, 43);
    createinvitems(non_1502_wegelagerer, itfobeer, 3);
    equipitem(non_1502_wegelagerer, itmw_1h_sword_old_01 /*4384*/);
    daily_routine = rtn_start_1502;
};

func void rtn_start_1502() {
    npc_setpermattitude(self, att_hostile);
    ta_sitcampfire(22, 0, 6, 0, "SPAWN_TALL_PATH_BANDITOS2_03");
    ta_smalltalk(6, 0, 22, 0, "SPAWN_TALL_PATH_BANDITOS2_02_04");
};

instance non_1503_wegelagerer(npc_default) {
    name = "Áðîäÿãà";
    npctype = npctype_rogue;
    guild = gil_none;
    level = 9;
    voice = 6;
    id = 1503;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 170;
    attribute[atr_hitpoints] /*0*/ = 170;
    mdl_setvisual(non_1503_wegelagerer, "HUMANS.MDS");
    mdl_setvisualbody(non_1503_wegelagerer, "hum_body_Naked0", 3, 2, "Hum_Head_FatBald", 9, 3, -1);
    b_scale(non_1503_wegelagerer);
    mdl_setmodelfatness(non_1503_wegelagerer, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(non_1503_wegelagerer, itfoloaf);
    createinvitem(non_1503_wegelagerer, itfobeer);
    createinvitems(non_1503_wegelagerer, itminugget, 11);
    equipitem(non_1503_wegelagerer, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_1503;
};

func void rtn_start_1503() {
    npc_setpermattitude(self, att_hostile);
    ta_standaround(22, 0, 6, 0, "OW_PATH_BANDITOS01");
    ta_standaround(6, 0, 22, 0, "OW_PATH_BANDITOS01");
};

instance non_1504_wegelagerer(npc_default) {
    name = "Áðîäÿãà";
    npctype = npctype_rogue;
    guild = gil_none;
    level = 9;
    voice = 6;
    id = 1504;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 166;
    attribute[atr_hitpoints] /*0*/ = 166;
    mdl_setvisual(non_1504_wegelagerer, "HUMANS.MDS");
    mdl_setvisualbody(non_1504_wegelagerer, "hum_body_Naked0", 2, 0, "Hum_Head_Bald", 10, 3, -1);
    b_scale(non_1504_wegelagerer);
    mdl_setmodelfatness(non_1504_wegelagerer, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(non_1504_wegelagerer, npc_talent_1h, 1);
    createinvitem(non_1504_wegelagerer, itfobeer);
    createinvitems(non_1504_wegelagerer, itminugget, 54);
    createinvitems(non_1504_wegelagerer, itfo_potion_health_01, 2);
    equipitem(non_1504_wegelagerer, itmw_1h_axe_old_01 /*4391*/);
    daily_routine = rtn_start_1504;
};

func void rtn_start_1504() {
    npc_setpermattitude(self, att_hostile);
    ta_standaround(22, 0, 6, 0, "OW_PATH_BANDITOS01");
    ta_standaround(6, 0, 22, 0, "OW_PATH_BANDITOS01");
};

instance nov_1300_talas(npc_default) {
    name = "Òàëàñ";
    npctype = npctype_friend;
    guild = gil_nov;
    level = 4;
    flags = npc_flag_immortal;
    voice = 2;
    id = 1300;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 78;
    attribute[atr_hitpoints] /*0*/ = 78;
    mdl_setvisual(nov_1300_talas, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1300_talas, "Humans_Mage.mds");
    mdl_setvisualbody(nov_1300_talas, "hum_body_Naked0", 1, 1, "Hum_Head_FatBald", 27, 1, nov_armor_l /*4138*/);
    b_scale(nov_1300_talas);
    mdl_setmodelfatness(nov_1300_talas, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(nov_1300_talas, npc_talent_1h, 1);
    createinvitems(nov_1300_talas, itminugget, 9);
    createinvitems(nov_1300_talas, itforice, 5);
    createinvitems(nov_1300_talas, itfobooze, 5);
    createinvitems(nov_1300_talas, itlstorch, 2);
    equipitem(nov_1300_talas, itmw_1h_mace_01 /*4397*/);
    daily_routine = rtn_start_1300;
};

func void rtn_start_1300() {
    ta_smoke(24, 0, 6, 0, "PSI_PATH_TEMPLE_4_MOVEMENT");
    ta_smoke(6, 0, 24, 0, "PSI_PATH_TEMPLE_4_MOVEMENT");
};

func void rtn_gobbocave_1300() {
    ta_guidepc(24, 0, 6, 0, "LOCATION_29_02");
    ta_guidepc(6, 0, 24, 0, "LOCATION_29_02");
};

func void rtn_returntocamp_1300() {
    ta_guidepc(24, 0, 6, 0, "PSI_START");
    ta_guidepc(6, 0, 24, 0, "PSI_START");
};

func void rtn_backincamp_1300() {
    ta_smoke(24, 0, 6, 0, "PSI_PATH_TEMPLE_4_MOVEMENT");
    ta_smoke(6, 0, 24, 0, "PSI_PATH_TEMPLE_4_MOVEMENT");
};

func void rtn_ogy_1300() {
    ta_guidepc(24, 0, 6, 0, "OW_PATH_011");
    ta_guidepc(6, 0, 24, 0, "OW_PATH_011");
};

func void rtn_returntocampagain_1300() {
    ta_smoke(24, 0, 6, 0, "PSI_PATH_TEMPLE_4_MOVEMENT");
    ta_smoke(6, 0, 24, 0, "PSI_PATH_TEMPLE_4_MOVEMENT");
};

instance nov_1301_caine(npc_default) {
    name = "Êàèí";
    npctype = npctype_main;
    guild = gil_nov;
    level = 9;
    voice = 13;
    id = 1301;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 148;
    attribute[atr_hitpoints] /*0*/ = 148;
    mdl_setvisual(nov_1301_caine, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1301_caine, "Humans_Mage.mds");
    mdl_setvisualbody(nov_1301_caine, "hum_body_Naked0", 1, 1, "Hum_Head_Psionic", 21, 1, nov_armor_h /*4140*/);
    b_scale(nov_1301_caine);
    mdl_setmodelfatness(nov_1301_caine, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(nov_1301_caine, npc_talent_1h, 1);
    createinvitems(nov_1301_caine, itminugget, 5);
    createinvitems(nov_1301_caine, itforice, 2);
    createinvitems(nov_1301_caine, itfobooze, 6);
    equipitem(nov_1301_caine, itmw_1h_axe_old_01 /*4391*/);
    daily_routine = rtn_start_1301;
};

func void rtn_start_1301() {
    ta_sleep(23, 0, 8, 0, "PSI_21_HUT_IN");
    ta_potionalchemy(8, 0, 9, 0, "PSI_LABOR_BASEMENT_1");
    ta_smoke(9, 0, 10, 0, "PSI_21_HUT_EX");
    ta_potionalchemy(10, 0, 11, 0, "PSI_LABOR_BASEMENT_1");
    ta_smoke(11, 0, 12, 0, "PSI_21_HUT_EX");
    ta_potionalchemy(12, 0, 13, 0, "PSI_LABOR_BASEMENT_1");
    ta_smoke(13, 0, 14, 0, "PSI_21_HUT_EX");
    ta_potionalchemy(14, 0, 15, 0, "PSI_LABOR_BASEMENT_1");
    ta_smoke(15, 0, 16, 0, "PSI_21_HUT_EX");
    ta_potionalchemy(16, 0, 17, 0, "PSI_LABOR_BASEMENT_1");
    ta_smoke(17, 0, 18, 0, "PSI_21_HUT_EX");
    ta_potionalchemy(18, 0, 19, 0, "PSI_LABOR_BASEMENT_1");
    ta_smoke(19, 0, 20, 0, "PSI_21_HUT_EX");
    ta_potionalchemy(20, 0, 21, 0, "PSI_LABOR_BASEMENT_1");
    ta_smoke(21, 0, 22, 0, "PSI_21_HUT_EX");
    ta_potionalchemy(22, 0, 23, 0, "PSI_LABOR_BASEMENT_1");
};

instance nov_1302_viran(npc_default) {
    name = "Âàéðàí";
    npctype = npctype_main;
    guild = gil_nov;
    level = 15;
    voice = 7;
    id = 1302;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 100;
    attribute[atr_hitpoints] /*0*/ = 100;
    mdl_setvisual(nov_1302_viran, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1302_viran, "Humans_Mage.mds");
    mdl_setvisualbody(nov_1302_viran, "hum_body_Naked0", 1, 1, "Hum_Head_Bald", 26, 3, nov_armor_l /*4138*/);
    b_scale(nov_1302_viran);
    mdl_setmodelfatness(nov_1302_viran, -1.0);
    fight_tactic = fai_human_strong;
    createinvitems(nov_1302_viran, itminugget, 5);
    createinvitems(nov_1302_viran, itforice, 2);
    createinvitems(nov_1302_viran, itfobooze, 6);
    equipitem(nov_1302_viran, itmw_1h_hatchet_01 /*4383*/);
    daily_routine = rtn_start_1302;
};

func void rtn_start_1302() {
    ta_boss(7, 0, 19, 0, "PATH_TAKE_HERB_2_1");
    ta_boss(19, 0, 7, 0, "PATH_TAKE_HERB_2_1");
};

instance nov_1303_nyras(npc_default) {
    name = "Íèðàñ";
    npctype = npctype_main;
    guild = gil_none;
    level = 6;
    flags = npc_flag_immortal;
    voice = 3;
    id = 1303;
    attribute[atr_strength] /*4*/ = 24;
    attribute[atr_dexterity] /*5*/ = 13;
    attribute[atr_mana_max] /*3*/ = 12;
    attribute[atr_mana] /*2*/ = 12;
    attribute[atr_hitpoints_max] /*1*/ = 132;
    attribute[atr_hitpoints] /*0*/ = 132;
    mdl_setvisual(nov_1303_nyras, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1303_nyras, "Humans_Mage.mds");
    mdl_setvisualbody(nov_1303_nyras, "hum_body_Naked0", 1, 1, "Hum_Head_FatBald", 22, 1, nov_armor_m /*4139*/);
    b_scale(nov_1303_nyras);
    mdl_setmodelfatness(nov_1303_nyras, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(nov_1303_nyras, npc_talent_1h, 1);
    createinvitems(nov_1303_nyras, itminugget, 15);
    createinvitems(nov_1303_nyras, itforice, 5);
    createinvitems(nov_1303_nyras, itfobooze, 3);
    createinvitems(nov_1303_nyras, itmijoint_1, 1);
    equipitem(nov_1303_nyras, itmw_1h_mace_04 /*4400*/);
    daily_routine = rtn_start_1303;
};

func void rtn_start_1303() {
    ta_smalltalk(8, 0, 23, 0, "PSI_3_HUT_EX");
    ta_sleep(23, 0, 8, 0, "PSI_4_HUT_IN");
};

func void rtn_prepareritual_1303() {
    ta_stay(0, 0, 7, 0, "WP_CIRCLE_01");
    ta_stay(7, 0, 24, 0, "WP_CIRCLE_01");
};

instance nov_1304_balor(npc_default) {
    name = "Áýëîð";
    npctype = npctype_main;
    guild = gil_nov;
    level = 15;
    voice = 1;
    id = 1304;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(nov_1304_balor, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1304_balor, "Humans_Mage.mds");
    mdl_setvisualbody(nov_1304_balor, "hum_body_Naked0", 1, 1, "Hum_Head_Bald", 26, 3, nov_armor_l /*4138*/);
    b_scale(nov_1304_balor);
    mdl_setmodelfatness(nov_1304_balor, -1.0);
    fight_tactic = fai_human_strong;
    createinvitems(nov_1304_balor, itminugget, 7);
    createinvitems(nov_1304_balor, itforice, 3);
    createinvitems(nov_1304_balor, itfobooze, 3);
    createinvitems(nov_1304_balor, itmijoint_1, 4);
    equipitem(nov_1304_balor, itmw_1h_hatchet_01 /*4383*/);
    daily_routine = rtn_start_1304;
};

func void rtn_start_1304() {
    ta_boss(7, 0, 19, 0, "PATH_TAKE_HERB_06");
    ta_boss(19, 0, 7, 0, "PATH_TAKE_HERB_06");
};

instance nov_1305_joru(npc_default) {
    name = "Éîðó";
    npctype = npctype_main;
    guild = gil_nov;
    level = 9;
    flags = 0;
    voice = 7;
    id = 1305;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 148;
    attribute[atr_hitpoints] /*0*/ = 148;
    mdl_setvisual(nov_1305_joru, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1305_joru, "Humans_Mage.mds");
    mdl_setvisualbody(nov_1305_joru, "hum_body_Naked0", 1, 1, "Hum_Head_Psionic", 75, 1, nov_armor_m /*4139*/);
    b_scale(nov_1305_joru);
    mdl_setmodelfatness(nov_1305_joru, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(nov_1305_joru, npc_talent_1h, 1);
    equipitem(nov_1305_joru, itmw_1h_axe_old_01 /*4391*/);
    daily_routine = rtn_start_1305;
};

func void rtn_start_1305() {
    ta_sleep(23, 55, 8, 5, "PSI_14_HUT_IN");
    ta_teaching(8, 5, 23, 55, "PSI_11_HUT_EX");
};

instance nov_1306_novize(npc_default) {
    name = name_novize;
    npctype = npctype_ambient;
    guild = gil_nov;
    level = 9;
    voice = 2;
    id = 1306;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 148;
    attribute[atr_hitpoints] /*0*/ = 148;
    mdl_setvisual(nov_1306_novize, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1306_novize, "Humans_Mage.mds");
    mdl_setvisualbody(nov_1306_novize, "hum_body_Naked0", 1, 1, "Hum_Head_Bald", 23, 3, nov_armor_m /*4139*/);
    b_scale(nov_1306_novize);
    mdl_setmodelfatness(nov_1306_novize, 0.0);
    fight_tactic = fai_human_coward;
    equipitem(nov_1306_novize, itmw_1h_axe_old_01 /*4391*/);
    daily_routine = rtn_start_1306;
};

func void rtn_start_1306() {
    ta_sitcampfire(8, 0, 1, 0, "PSI_PATH_1_3");
    ta_sleep(1, 0, 8, 0, "PSI_1_HUT_IN");
};

instance nov_1307_novize(npc_default) {
    name = name_novize;
    npctype = npctype_ambient;
    guild = gil_nov;
    level = 9;
    voice = 5;
    id = 1307;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 148;
    attribute[atr_hitpoints] /*0*/ = 148;
    mdl_setvisual(nov_1307_novize, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1307_novize, "Humans_Mage.mds");
    mdl_setvisualbody(nov_1307_novize, "hum_body_Naked0", 1, 1, "Hum_Head_FatBald", 29, 2, nov_armor_m /*4139*/);
    b_scale(nov_1307_novize);
    mdl_setmodelfatness(nov_1307_novize, -1.0);
    fight_tactic = fai_human_coward;
    npc_settalentskill(nov_1307_novize, npc_talent_1h, 1);
    equipitem(nov_1307_novize, itmw_1h_axe_old_01 /*4391*/);
    daily_routine = rtn_start_1307;
};

func void rtn_start_1307() {
    ta_smoke(7, 30, 1, 0, "PSI_PATH_1_3_BLUBBER");
    ta_sleep(1, 0, 7, 30, "PSI_2_HUT_IN");
};

instance nov_1308_novize(npc_default) {
    name = name_novize;
    npctype = npctype_ambient;
    guild = gil_nov;
    level = 9;
    voice = 5;
    id = 1308;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 148;
    attribute[atr_hitpoints] /*0*/ = 148;
    mdl_setvisual(nov_1308_novize, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1308_novize, "Humans_Mage.mds");
    mdl_setvisualbody(nov_1308_novize, "hum_body_Naked0", 1, 1, "Hum_Head_Bald", 34, 3, nov_armor_m /*4139*/);
    b_scale(nov_1308_novize);
    mdl_setmodelfatness(nov_1308_novize, 0.0);
    fight_tactic = fai_human_coward;
    equipitem(nov_1308_novize, itmw_1h_axe_old_01 /*4391*/);
    daily_routine = rtn_start_1308;
};

func void rtn_start_1308() {
    ta_herbalchemy(7, 5, 0, 5, "PSI_HERB_PLACE_3");
    ta_sleep(0, 5, 7, 5, "PSI_6_HUT_IN_BED1");
};

instance nov_1309_novize(npc_default) {
    name = name_novize;
    npctype = npctype_ambient;
    guild = gil_nov;
    level = 9;
    voice = 3;
    id = 1309;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 148;
    attribute[atr_hitpoints] /*0*/ = 148;
    mdl_setvisual(nov_1309_novize, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1309_novize, "Humans_Mage.mds");
    mdl_setvisualbody(nov_1309_novize, "hum_body_Naked0", 1, 1, "Hum_Head_Psionic", 30, 1, nov_armor_m /*4139*/);
    b_scale(nov_1309_novize);
    mdl_setmodelfatness(nov_1309_novize, -1.0);
    fight_tactic = fai_human_coward;
    equipitem(nov_1309_novize, itmw_1h_axe_old_01 /*4391*/);
    daily_routine = rtn_start_1309;
};

func void rtn_start_1309() {
    ta_herbalchemy(7, 0, 0, 0, "PSI_HERB_PLACE_2");
    ta_sleep(0, 0, 7, 0, "PSI_6_HUT_IN_BED2");
};

instance nov_1310_ghorim(npc_default) {
    name = "Ãîðèì";
    npctype = npctype_main;
    guild = gil_nov;
    level = 9;
    voice = 2;
    id = 1310;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 148;
    attribute[atr_hitpoints] /*0*/ = 148;
    mdl_setvisual(nov_1310_ghorim, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1310_ghorim, "Humans_Mage.mds");
    mdl_setvisualbody(nov_1310_ghorim, "hum_body_Naked0", 1, 1, "Hum_Head_Psionic", 29, 1, nov_armor_m /*4139*/);
    b_scale(nov_1310_ghorim);
    mdl_setmodelfatness(nov_1310_ghorim, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(nov_1310_ghorim, npc_talent_1h, 1);
    equipitem(nov_1310_ghorim, itmw_1h_axe_old_01 /*4391*/);
    daily_routine = rtn_prestart_1310;
};

func void rtn_prestart_1310() {
    ta_herbalchemy(6, 55, 23, 55, "PSI_HERB_PLACE_1");
    ta_sleep(23, 55, 6, 55, "PSI_6_HUT_IN_BED3");
};

func void rtn_start_1310() {
    ta_sleep(6, 55, 23, 55, "PSI_6_HUT_IN_BED3");
    ta_sleep(23, 55, 6, 55, "PSI_6_HUT_IN_BED3");
};

instance nov_1311_novize(npc_default) {
    name = name_novize;
    npctype = npctype_ambient;
    guild = gil_nov;
    level = 9;
    voice = 3;
    id = 1311;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 148;
    attribute[atr_hitpoints] /*0*/ = 148;
    mdl_setvisual(nov_1311_novize, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1311_novize, "Humans_Mage.mds");
    mdl_setvisualbody(nov_1311_novize, "hum_body_Naked0", 1, 1, "Hum_Head_Psionic", 25, 2, nov_armor_m /*4139*/);
    b_scale(nov_1311_novize);
    mdl_setmodelfatness(nov_1311_novize, -1.0);
    fight_tactic = fai_human_coward;
    daily_routine = rtn_start_1311;
};

func void rtn_start_1311() {
    ta_sleep(0, 0, 8, 0, "PSI_10_HUT_IN");
    ta_smalltalk(8, 0, 24, 0, "PSI_TALK_AT_11_HUT");
};

instance nov_1312_darrion(npc_default) {
    name = "Äàððèîí";
    npctype = npctype_main;
    guild = gil_nov;
    level = 9;
    voice = 11;
    id = 1312;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 148;
    attribute[atr_hitpoints] /*0*/ = 148;
    mdl_setvisual(nov_1312_darrion, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1312_darrion, "Humans_Mage.mds");
    mdl_setvisualbody(nov_1312_darrion, "hum_body_Naked0", 1, 2, "Hum_Head_Bald", 6, 0, nov_armor_m /*4139*/);
    b_scale(nov_1312_darrion);
    mdl_setmodelfatness(nov_1312_darrion, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(nov_1312_darrion, npc_talent_1h, 1);
    b_give_darrionchapter1weapons();
    equipitem(nov_1312_darrion, itmw_1h_axe_old_01 /*4391*/);
    daily_routine = rtn_start_1312;
};

func void rtn_start_1312() {
    ta_smith_fire(8, 10, 8, 20, "PSI_SMITH_03");
    ta_smith_anvil(8, 20, 8, 30, "PSI_SMITH_03");
    ta_smith_fire(8, 30, 8, 40, "PSI_SMITH_03");
    ta_smith_anvil(8, 30, 8, 40, "PSI_SMITH_03");
    ta_smith_cool(8, 50, 9, 0, "PSI_SMITH_03");
    ta_smith_sharp(9, 0, 9, 5, "PSI_SMITH_03");
    ta_sitaround(9, 5, 9, 10, "PSI_SMITH_03");
    ta_smith_fire(9, 10, 9, 20, "PSI_SMITH_03");
    ta_smith_anvil(9, 20, 9, 30, "PSI_SMITH_03");
    ta_smith_fire(9, 30, 9, 40, "PSI_SMITH_03");
    ta_smith_anvil(9, 30, 9, 40, "PSI_SMITH_03");
    ta_smith_cool(9, 50, 10, 0, "PSI_SMITH_03");
    ta_smith_sharp(10, 0, 10, 5, "PSI_SMITH_03");
    ta_sitaround(10, 5, 10, 10, "PSI_SMITH_03");
    ta_smith_fire(10, 10, 10, 20, "PSI_SMITH_03");
    ta_smith_anvil(10, 20, 10, 30, "PSI_SMITH_03");
    ta_smith_fire(10, 30, 10, 40, "PSI_SMITH_03");
    ta_smith_anvil(10, 30, 10, 40, "PSI_SMITH_03");
    ta_smith_cool(10, 50, 11, 0, "PSI_SMITH_03");
    ta_smith_sharp(11, 0, 11, 5, "PSI_SMITH_03");
    ta_sitaround(11, 5, 11, 10, "PSI_SMITH_03");
    ta_smith_fire(11, 10, 11, 20, "PSI_SMITH_03");
    ta_smith_anvil(11, 20, 11, 30, "PSI_SMITH_03");
    ta_smith_fire(11, 30, 11, 40, "PSI_SMITH_03");
    ta_smith_anvil(11, 40, 11, 50, "PSI_SMITH_03");
    ta_smith_cool(11, 50, 12, 0, "PSI_SMITH_03");
    ta_smith_sharp(12, 0, 12, 5, "PSI_SMITH_03");
    ta_sitaround(12, 5, 12, 10, "PSI_SMITH_03");
    ta_smith_fire(12, 10, 12, 20, "PSI_SMITH_03");
    ta_smith_anvil(12, 20, 12, 30, "PSI_SMITH_03");
    ta_smith_fire(12, 30, 12, 40, "PSI_SMITH_03");
    ta_smith_anvil(12, 40, 12, 50, "PSI_SMITH_03");
    ta_smith_cool(12, 50, 13, 0, "PSI_SMITH_03");
    ta_smith_sharp(13, 0, 13, 5, "PSI_SMITH_03");
    ta_sitaround(13, 5, 13, 10, "PSI_SMITH_03");
    ta_smith_fire(13, 10, 13, 20, "PSI_SMITH_03");
    ta_smith_anvil(13, 20, 13, 30, "PSI_SMITH_03");
    ta_smith_fire(13, 30, 13, 40, "PSI_SMITH_03");
    ta_smith_anvil(13, 40, 13, 50, "PSI_SMITH_03");
    ta_smith_cool(13, 50, 14, 0, "PSI_SMITH_03");
    ta_smith_sharp(14, 0, 14, 5, "PSI_SMITH_03");
    ta_sitaround(14, 5, 14, 10, "PSI_SMITH_03");
    ta_smith_fire(14, 10, 14, 20, "PSI_SMITH_03");
    ta_smith_anvil(14, 20, 14, 30, "PSI_SMITH_03");
    ta_smith_fire(14, 30, 14, 40, "PSI_SMITH_03");
    ta_smith_anvil(14, 40, 14, 50, "PSI_SMITH_03");
    ta_smith_cool(14, 50, 15, 0, "PSI_SMITH_03");
    ta_smith_sharp(15, 0, 15, 5, "PSI_SMITH_03");
    ta_sitaround(15, 5, 15, 10, "PSI_SMITH_03");
    ta_smith_fire(15, 10, 15, 20, "PSI_SMITH_03");
    ta_smith_anvil(15, 20, 15, 30, "PSI_SMITH_03");
    ta_smith_fire(15, 30, 15, 40, "PSI_SMITH_03");
    ta_smith_anvil(15, 40, 15, 50, "PSI_SMITH_03");
    ta_smith_cool(15, 50, 16, 0, "PSI_SMITH_03");
    ta_smith_sharp(16, 0, 16, 5, "PSI_SMITH_03");
    ta_sitaround(16, 5, 16, 10, "PSI_SMITH_03");
    ta_smith_fire(16, 10, 16, 20, "PSI_SMITH_03");
    ta_smith_anvil(16, 20, 16, 30, "PSI_SMITH_03");
    ta_smith_fire(16, 30, 16, 40, "PSI_SMITH_03");
    ta_smith_anvil(16, 40, 16, 50, "PSI_SMITH_03");
    ta_smith_cool(16, 50, 16, 0, "PSI_SMITH_03");
    ta_smith_sharp(17, 0, 17, 5, "PSI_SMITH_03");
    ta_sitaround(17, 5, 17, 10, "PSI_SMITH_03");
    ta_smith_fire(17, 10, 17, 20, "PSI_SMITH_03");
    ta_smith_anvil(17, 20, 17, 30, "PSI_SMITH_03");
    ta_smith_fire(17, 30, 17, 40, "PSI_SMITH_03");
    ta_smith_anvil(17, 40, 17, 50, "PSI_SMITH_03");
    ta_smith_cool(17, 50, 17, 0, "PSI_SMITH_03");
    ta_smith_sharp(18, 0, 18, 5, "PSI_SMITH_03");
    ta_sitaround(18, 5, 18, 10, "PSI_SMITH_03");
    ta_smith_fire(18, 10, 18, 20, "PSI_SMITH_03");
    ta_smith_anvil(18, 20, 18, 30, "PSI_SMITH_03");
    ta_smith_fire(18, 30, 18, 40, "PSI_SMITH_03");
    ta_smith_anvil(18, 40, 18, 50, "PSI_SMITH_03");
    ta_smith_cool(18, 50, 19, 0, "PSI_SMITH_03");
    ta_smith_sharp(19, 0, 19, 5, "PSI_SMITH_03");
    ta_sitaround(19, 5, 19, 10, "PSI_SMITH_03");
    ta_smith_fire(19, 10, 19, 20, "PSI_SMITH_03");
    ta_smith_anvil(19, 20, 19, 30, "PSI_SMITH_03");
    ta_smith_fire(19, 30, 19, 40, "PSI_SMITH_03");
    ta_smith_anvil(19, 40, 19, 50, "PSI_SMITH_03");
    ta_smith_cool(19, 50, 19, 0, "PSI_SMITH_03");
    ta_smith_sharp(20, 0, 20, 5, "PSI_SMITH_03");
    ta_sitaround(20, 5, 20, 10, "PSI_SMITH_03");
    ta_smith_fire(20, 10, 20, 20, "PSI_SMITH_03");
    ta_smith_anvil(20, 20, 20, 30, "PSI_SMITH_03");
    ta_smith_fire(20, 30, 20, 40, "PSI_SMITH_03");
    ta_smith_anvil(20, 40, 20, 50, "PSI_SMITH_03");
    ta_smith_cool(20, 50, 21, 0, "PSI_SMITH_03");
    ta_smith_sharp(21, 0, 21, 5, "PSI_SMITH_03");
    ta_sitaround(21, 5, 21, 10, "PSI_SMITH_03");
    ta_smith_fire(21, 10, 21, 20, "PSI_SMITH_03");
    ta_smith_anvil(21, 20, 21, 30, "PSI_SMITH_03");
    ta_smith_fire(21, 30, 21, 40, "PSI_SMITH_03");
    ta_smith_anvil(21, 40, 21, 50, "PSI_SMITH_03");
    ta_smith_cool(21, 50, 22, 0, "PSI_SMITH_03");
    ta_smith_sharp(22, 0, 22, 5, "PSI_SMITH_03");
    ta_sitaround(22, 5, 22, 10, "PSI_SMITH_03");
    ta_smith_fire(22, 10, 22, 20, "PSI_SMITH_03");
    ta_smith_anvil(22, 20, 22, 30, "PSI_SMITH_03");
    ta_smith_fire(22, 30, 22, 40, "PSI_SMITH_03");
    ta_smith_anvil(22, 40, 22, 50, "PSI_SMITH_03");
    ta_smith_cool(22, 50, 22, 60, "PSI_SMITH_03");
    ta_smith_sharp(23, 0, 23, 5, "PSI_SMITH_03");
    ta_sitaround(23, 5, 23, 10, "PSI_SMITH_03");
    ta_smith_fire(23, 10, 23, 20, "PSI_SMITH_03");
    ta_smith_anvil(23, 20, 23, 30, "PSI_SMITH_03");
    ta_smith_fire(23, 30, 23, 40, "PSI_SMITH_03");
    ta_smith_anvil(23, 40, 23, 60, "PSI_SMITH_03");
    ta_smith_cool(23, 50, 0, 0, "PSI_SMITH_03");
    ta_smith_sharp(0, 0, 0, 5, "PSI_SMITH_03");
    ta_sitaround(0, 5, 0, 10, "PSI_SMITH_03");
    ta_smith_fire(0, 10, 0, 20, "PSI_SMITH_03");
    ta_smith_anvil(0, 20, 0, 30, "PSI_SMITH_03");
    ta_smith_fire(0, 30, 0, 40, "PSI_SMITH_03");
    ta_smith_anvil(0, 40, 0, 50, "PSI_SMITH_03");
    ta_smith_cool(0, 50, 1, 0, "PSI_SMITH_03");
    ta_smith_sharp(1, 0, 1, 5, "PSI_SMITH_03");
    ta_sitaround(1, 5, 1, 10, "PSI_SMITH_03");
    ta_smith_fire(1, 10, 1, 20, "PSI_SMITH_03");
    ta_smith_anvil(1, 20, 1, 30, "PSI_SMITH_03");
    ta_smith_fire(1, 30, 1, 40, "PSI_SMITH_03");
    ta_smith_anvil(1, 40, 1, 50, "PSI_SMITH_03");
    ta_smith_cool(1, 50, 2, 0, "PSI_SMITH_03");
    ta_smith_sharp(2, 0, 2, 5, "PSI_SMITH_03");
    ta_sitaround(2, 5, 2, 10, "PSI_SMITH_03");
    ta_smith_fire(2, 10, 2, 20, "PSI_SMITH_03");
    ta_smith_anvil(2, 20, 2, 30, "PSI_SMITH_03");
    ta_smith_fire(2, 30, 2, 40, "PSI_SMITH_03");
    ta_smith_anvil(2, 40, 2, 50, "PSI_SMITH_03");
    ta_smith_cool(2, 50, 3, 0, "PSI_SMITH_03");
    ta_smith_sharp(3, 0, 3, 5, "PSI_SMITH_03");
    ta_sitaround(3, 5, 3, 10, "PSI_SMITH_03");
    ta_smith_fire(3, 10, 3, 20, "PSI_SMITH_03");
    ta_smith_anvil(3, 20, 3, 30, "PSI_SMITH_03");
    ta_smith_fire(3, 30, 3, 40, "PSI_SMITH_03");
    ta_smith_anvil(3, 40, 3, 50, "PSI_SMITH_03");
    ta_smith_cool(3, 50, 4, 0, "PSI_SMITH_03");
    ta_smith_sharp(4, 0, 4, 5, "PSI_SMITH_03");
    ta_sitaround(4, 5, 4, 10, "PSI_SMITH_03");
    ta_smith_fire(4, 10, 4, 20, "PSI_SMITH_03");
    ta_smith_anvil(4, 20, 4, 30, "PSI_SMITH_03");
    ta_smith_fire(4, 30, 4, 40, "PSI_SMITH_03");
    ta_smith_anvil(4, 40, 4, 50, "PSI_SMITH_03");
    ta_smith_cool(4, 50, 5, 0, "PSI_SMITH_03");
    ta_smith_sharp(5, 0, 5, 5, "PSI_SMITH_03");
    ta_sitaround(5, 5, 5, 10, "PSI_SMITH_03");
    ta_smith_fire(5, 10, 5, 20, "PSI_SMITH_03");
    ta_smith_anvil(5, 20, 5, 30, "PSI_SMITH_03");
    ta_smith_fire(5, 30, 5, 40, "PSI_SMITH_03");
    ta_smith_anvil(5, 40, 5, 50, "PSI_SMITH_03");
    ta_smith_cool(5, 50, 6, 0, "PSI_SMITH_03");
    ta_smith_sharp(6, 0, 6, 5, "PSI_SMITH_03");
    ta_sitaround(6, 5, 6, 10, "PSI_SMITH_03");
    ta_smith_fire(6, 10, 6, 20, "PSI_SMITH_03");
    ta_smith_anvil(6, 20, 6, 30, "PSI_SMITH_03");
    ta_smith_fire(6, 30, 6, 40, "PSI_SMITH_03");
    ta_smith_anvil(6, 40, 6, 50, "PSI_SMITH_03");
    ta_smith_cool(6, 50, 7, 0, "PSI_SMITH_03");
    ta_smith_sharp(7, 0, 7, 5, "PSI_SMITH_03");
    ta_sitaround(7, 5, 7, 10, "PSI_SMITH_03");
    ta_smith_fire(7, 10, 7, 20, "PSI_SMITH_03");
    ta_smith_anvil(7, 20, 7, 30, "PSI_SMITH_03");
    ta_smith_fire(7, 30, 7, 40, "PSI_SMITH_03");
    ta_smith_anvil(7, 40, 7, 50, "PSI_SMITH_03");
    ta_smith_cool(7, 50, 8, 0, "PSI_SMITH_03");
    ta_smith_sharp(8, 0, 8, 5, "PSI_SMITH_03");
    ta_sitaround(8, 5, 8, 10, "PSI_SMITH_03");
};

func void rtn_prepareritual_1312() {
};

func void rtn_omfull_1312() {
};

func void rtn_fmtaken_1312() {
};

func void rtn_orcassault_1312() {
};

instance nov_1313_novize(npc_default) {
    name = name_novize;
    npctype = npctype_ambient;
    guild = gil_nov;
    level = 3;
    voice = 2;
    id = 1313;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(nov_1313_novize, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1313_novize, "Humans_Relaxed.mds");
    mdl_setvisualbody(nov_1313_novize, "hum_body_Naked0", 1, 1, "Hum_Head_Bald", 30, 1, nov_armor_l /*4138*/);
    b_scale(nov_1313_novize);
    mdl_setmodelfatness(nov_1313_novize, -1.0);
    fight_tactic = fai_human_coward;
    equipitem(nov_1313_novize, itmw_1h_hatchet_01 /*4383*/);
    daily_routine = rtn_start_1313;
};

func void rtn_start_1313() {
    ta_sleep(23, 55, 8, 5, "PSI_12_HUT_IN_BED2");
    ta_listen(8, 5, 23, 55, "PSI_12_HUT_EX_TEACH2");
};

instance nov_1314_novize(npc_default) {
    name = name_novize;
    npctype = npctype_ambient;
    guild = gil_nov;
    level = 9;
    voice = 2;
    id = 1314;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 148;
    attribute[atr_hitpoints] /*0*/ = 148;
    mdl_setvisual(nov_1314_novize, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1314_novize, "Humans_Relaxed.mds");
    mdl_setvisualbody(nov_1314_novize, "hum_body_Naked0", 1, 1, "Hum_Head_Psionic", 31, 1, nov_armor_m /*4139*/);
    b_scale(nov_1314_novize);
    mdl_setmodelfatness(nov_1314_novize, -1.0);
    fight_tactic = fai_human_coward;
    equipitem(nov_1314_novize, itmw_1h_axe_old_01 /*4391*/);
    daily_routine = rtn_start_1314;
};

func void rtn_start_1314() {
    ta_sleep(0, 30, 7, 30, "PSI_13_HUT_IN");
    ta_smoke(7, 30, 0, 30, "PSI_PATH_4_2");
};

instance nov_1315_novize(npc_default) {
    name = name_novize;
    npctype = npctype_ambient;
    guild = gil_nov;
    level = 3;
    voice = 2;
    id = 1315;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(nov_1315_novize, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1315_novize, "Humans_Relaxed.mds");
    mdl_setvisualbody(nov_1315_novize, "hum_body_Naked0", 1, 1, "Hum_Head_FatBald", 31, 2, nov_armor_l /*4138*/);
    b_scale(nov_1315_novize);
    mdl_setmodelfatness(nov_1315_novize, -1.0);
    fight_tactic = fai_human_coward;
    equipitem(nov_1315_novize, itmw_1h_hatchet_01 /*4383*/);
    daily_routine = rtn_start_1315;
};

func void rtn_start_1315() {
    ta_sleep(23, 50, 8, 10, "PSI_12_HUT_IN_BED3");
    ta_listen(8, 10, 23, 50, "PSI_12_HUT_EX");
};

instance nov_1316_novize(npc_default) {
    name = name_novize;
    npctype = npctype_ambient;
    guild = gil_nov;
    level = 3;
    voice = 2;
    id = 1316;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(nov_1316_novize, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1316_novize, "Humans_Relaxed.mds");
    mdl_setvisualbody(nov_1316_novize, "hum_body_Naked0", 1, 1, "Hum_Head_Bald", 32, 1, nov_armor_l /*4138*/);
    b_scale(nov_1316_novize);
    mdl_setmodelfatness(nov_1316_novize, -1.0);
    fight_tactic = fai_human_coward;
    equipitem(nov_1316_novize, itmw_1h_hatchet_01 /*4383*/);
    daily_routine = rtn_start_1316;
};

func void rtn_start_1316() {
    ta_smith_fire(8, 0, 8, 10, "PSI_SMITH_01");
    ta_smith_anvil(8, 10, 8, 20, "PSI_SMITH_01");
    ta_smith_fire(8, 20, 8, 30, "PSI_SMITH_01");
    ta_smith_anvil(8, 30, 8, 40, "PSI_SMITH_01");
    ta_smith_cool(8, 40, 8, 50, "PSI_SMITH_01");
    ta_smith_sharp(8, 50, 8, 55, "PSI_SMITH_01");
    ta_sitaround(8, 55, 9, 0, "PSI_SMITH_01");
    ta_smith_fire(9, 0, 9, 10, "PSI_SMITH_01");
    ta_smith_anvil(9, 10, 9, 20, "PSI_SMITH_01");
    ta_smith_fire(9, 20, 9, 30, "PSI_SMITH_01");
    ta_smith_anvil(9, 30, 9, 40, "PSI_SMITH_01");
    ta_smith_cool(9, 40, 9, 50, "PSI_SMITH_01");
    ta_smith_sharp(9, 50, 9, 55, "PSI_SMITH_01");
    ta_sitaround(9, 55, 10, 0, "PSI_SMITH_01");
    ta_smith_fire(10, 0, 10, 10, "PSI_SMITH_01");
    ta_smith_anvil(10, 10, 10, 20, "PSI_SMITH_01");
    ta_smith_fire(10, 20, 10, 30, "PSI_SMITH_01");
    ta_smith_anvil(10, 30, 10, 40, "PSI_SMITH_01");
    ta_smith_cool(10, 40, 10, 50, "PSI_SMITH_01");
    ta_smith_sharp(10, 50, 10, 55, "PSI_SMITH_01");
    ta_sitaround(10, 55, 11, 0, "PSI_SMITH_01");
    ta_smith_fire(11, 0, 11, 10, "PSI_SMITH_01");
    ta_smith_anvil(11, 10, 11, 20, "PSI_SMITH_01");
    ta_smith_fire(11, 20, 11, 30, "PSI_SMITH_01");
    ta_smith_anvil(11, 30, 11, 40, "PSI_SMITH_01");
    ta_smith_cool(11, 40, 11, 50, "PSI_SMITH_01");
    ta_smith_sharp(11, 50, 11, 55, "PSI_SMITH_01");
    ta_sitaround(11, 55, 12, 0, "PSI_SMITH_01");
    ta_smith_fire(12, 0, 12, 10, "PSI_SMITH_01");
    ta_smith_anvil(12, 10, 12, 20, "PSI_SMITH_01");
    ta_smith_fire(12, 20, 12, 30, "PSI_SMITH_01");
    ta_smith_anvil(12, 30, 12, 40, "PSI_SMITH_01");
    ta_smith_cool(12, 40, 12, 50, "PSI_SMITH_01");
    ta_smith_sharp(12, 50, 12, 55, "PSI_SMITH_01");
    ta_sitaround(12, 55, 13, 0, "PSI_SMITH_01");
    ta_smith_fire(13, 0, 13, 10, "PSI_SMITH_01");
    ta_smith_anvil(13, 10, 13, 20, "PSI_SMITH_01");
    ta_smith_fire(13, 20, 13, 30, "PSI_SMITH_01");
    ta_smith_anvil(13, 30, 13, 40, "PSI_SMITH_01");
    ta_smith_cool(13, 40, 13, 50, "PSI_SMITH_01");
    ta_smith_sharp(13, 50, 13, 55, "PSI_SMITH_01");
    ta_sitaround(13, 55, 14, 0, "PSI_SMITH_01");
    ta_smith_fire(14, 0, 14, 10, "PSI_SMITH_01");
    ta_smith_anvil(14, 10, 14, 20, "PSI_SMITH_01");
    ta_smith_fire(14, 20, 14, 30, "PSI_SMITH_01");
    ta_smith_anvil(14, 30, 14, 40, "PSI_SMITH_01");
    ta_smith_cool(14, 40, 14, 50, "PSI_SMITH_01");
    ta_smith_sharp(14, 50, 14, 55, "PSI_SMITH_01");
    ta_sitaround(14, 55, 15, 0, "PSI_SMITH_01");
    ta_smith_fire(15, 0, 15, 10, "PSI_SMITH_01");
    ta_smith_anvil(15, 10, 15, 20, "PSI_SMITH_01");
    ta_smith_fire(15, 20, 15, 30, "PSI_SMITH_01");
    ta_smith_anvil(15, 30, 15, 40, "PSI_SMITH_01");
    ta_smith_cool(15, 40, 15, 50, "PSI_SMITH_01");
    ta_smith_sharp(15, 50, 15, 55, "PSI_SMITH_01");
    ta_sitaround(15, 55, 16, 0, "PSI_SMITH_01");
    ta_smith_fire(16, 0, 16, 10, "PSI_SMITH_01");
    ta_smith_anvil(16, 10, 16, 20, "PSI_SMITH_01");
    ta_smith_fire(16, 20, 16, 30, "PSI_SMITH_01");
    ta_smith_anvil(16, 30, 16, 40, "PSI_SMITH_01");
    ta_smith_cool(16, 40, 16, 50, "PSI_SMITH_01");
    ta_smith_sharp(16, 50, 16, 55, "PSI_SMITH_01");
    ta_sitaround(16, 55, 17, 0, "PSI_SMITH_01");
    ta_smith_fire(17, 0, 17, 10, "PSI_SMITH_01");
    ta_smith_anvil(17, 10, 17, 20, "PSI_SMITH_01");
    ta_smith_fire(17, 20, 17, 30, "PSI_SMITH_01");
    ta_smith_anvil(17, 30, 17, 40, "PSI_SMITH_01");
    ta_smith_cool(17, 40, 17, 50, "PSI_SMITH_01");
    ta_smith_sharp(17, 50, 17, 55, "PSI_SMITH_01");
    ta_sitaround(17, 55, 18, 0, "PSI_SMITH_01");
    ta_smith_fire(18, 0, 18, 10, "PSI_SMITH_01");
    ta_smith_anvil(18, 10, 18, 20, "PSI_SMITH_01");
    ta_smith_fire(18, 20, 18, 30, "PSI_SMITH_01");
    ta_smith_anvil(18, 30, 18, 40, "PSI_SMITH_01");
    ta_smith_cool(18, 40, 18, 50, "PSI_SMITH_01");
    ta_smith_sharp(18, 50, 18, 55, "PSI_SMITH_01");
    ta_sitaround(18, 55, 19, 0, "PSI_SMITH_01");
    ta_smith_fire(19, 0, 19, 10, "PSI_SMITH_01");
    ta_smith_anvil(19, 10, 19, 20, "PSI_SMITH_01");
    ta_smith_fire(19, 20, 19, 30, "PSI_SMITH_01");
    ta_smith_anvil(19, 30, 19, 40, "PSI_SMITH_01");
    ta_smith_cool(19, 40, 19, 50, "PSI_SMITH_01");
    ta_smith_sharp(19, 50, 19, 55, "PSI_SMITH_01");
    ta_sitaround(19, 55, 20, 0, "PSI_SMITH_01");
    ta_smith_fire(20, 0, 20, 10, "PSI_SMITH_01");
    ta_smith_anvil(20, 10, 20, 20, "PSI_SMITH_01");
    ta_smith_fire(20, 20, 20, 30, "PSI_SMITH_01");
    ta_smith_anvil(20, 30, 20, 40, "PSI_SMITH_01");
    ta_smith_cool(20, 40, 20, 50, "PSI_SMITH_01");
    ta_smith_sharp(20, 50, 20, 55, "PSI_SMITH_01");
    ta_sitaround(20, 55, 21, 0, "PSI_SMITH_01");
    ta_smith_fire(21, 0, 21, 10, "PSI_SMITH_01");
    ta_smith_anvil(21, 10, 21, 20, "PSI_SMITH_01");
    ta_smith_fire(21, 20, 21, 30, "PSI_SMITH_01");
    ta_smith_anvil(21, 30, 21, 40, "PSI_SMITH_01");
    ta_smith_cool(21, 40, 21, 50, "PSI_SMITH_01");
    ta_smith_sharp(21, 50, 21, 55, "PSI_SMITH_01");
    ta_sitaround(21, 55, 22, 0, "PSI_SMITH_01");
    ta_smith_fire(22, 0, 22, 10, "PSI_SMITH_01");
    ta_smith_anvil(22, 10, 22, 20, "PSI_SMITH_01");
    ta_smith_fire(22, 20, 22, 30, "PSI_SMITH_01");
    ta_smith_anvil(22, 30, 22, 40, "PSI_SMITH_01");
    ta_smith_cool(22, 40, 22, 50, "PSI_SMITH_01");
    ta_smith_sharp(22, 50, 22, 55, "PSI_SMITH_01");
    ta_sitaround(22, 55, 23, 0, "PSI_SMITH_01");
    ta_smith_fire(23, 0, 23, 10, "PSI_SMITH_01");
    ta_smith_anvil(23, 10, 23, 20, "PSI_SMITH_01");
    ta_smith_fire(23, 20, 23, 30, "PSI_SMITH_01");
    ta_smith_anvil(23, 30, 23, 40, "PSI_SMITH_01");
    ta_smith_cool(23, 40, 23, 50, "PSI_SMITH_01");
    ta_smith_sharp(23, 50, 23, 55, "PSI_SMITH_01");
    ta_sitaround(23, 55, 24, 0, "PSI_SMITH_01");
    ta_smith_fire(0, 0, 0, 10, "PSI_SMITH_01");
    ta_smith_anvil(0, 10, 0, 20, "PSI_SMITH_01");
    ta_smith_fire(0, 20, 0, 30, "PSI_SMITH_01");
    ta_smith_anvil(0, 30, 0, 40, "PSI_SMITH_01");
    ta_smith_cool(0, 40, 0, 50, "PSI_SMITH_01");
    ta_smith_sharp(0, 50, 0, 55, "PSI_SMITH_01");
    ta_sitaround(0, 55, 1, 0, "PSI_SMITH_01");
    ta_smith_fire(1, 0, 1, 10, "PSI_SMITH_01");
    ta_smith_anvil(1, 10, 1, 20, "PSI_SMITH_01");
    ta_smith_fire(1, 20, 1, 30, "PSI_SMITH_01");
    ta_smith_anvil(1, 30, 1, 40, "PSI_SMITH_01");
    ta_smith_cool(1, 40, 1, 50, "PSI_SMITH_01");
    ta_smith_sharp(1, 50, 1, 55, "PSI_SMITH_01");
    ta_sitaround(1, 55, 2, 0, "PSI_SMITH_01");
    ta_smith_fire(2, 0, 2, 10, "PSI_SMITH_01");
    ta_smith_anvil(2, 10, 2, 20, "PSI_SMITH_01");
    ta_smith_fire(2, 20, 2, 30, "PSI_SMITH_01");
    ta_smith_anvil(2, 30, 2, 40, "PSI_SMITH_01");
    ta_smith_cool(2, 40, 2, 50, "PSI_SMITH_01");
    ta_smith_sharp(2, 50, 2, 55, "PSI_SMITH_01");
    ta_sitaround(2, 55, 3, 0, "PSI_SMITH_01");
    ta_smith_fire(3, 0, 3, 10, "PSI_SMITH_01");
    ta_smith_anvil(3, 10, 3, 20, "PSI_SMITH_01");
    ta_smith_fire(3, 20, 3, 30, "PSI_SMITH_01");
    ta_smith_anvil(3, 30, 3, 40, "PSI_SMITH_01");
    ta_smith_cool(3, 40, 3, 50, "PSI_SMITH_01");
    ta_smith_sharp(3, 50, 3, 55, "PSI_SMITH_01");
    ta_sitaround(3, 55, 4, 0, "PSI_SMITH_01");
    ta_smith_fire(4, 0, 4, 10, "PSI_SMITH_01");
    ta_smith_anvil(4, 10, 4, 20, "PSI_SMITH_01");
    ta_smith_fire(4, 20, 4, 30, "PSI_SMITH_01");
    ta_smith_anvil(4, 30, 4, 40, "PSI_SMITH_01");
    ta_smith_cool(4, 40, 4, 50, "PSI_SMITH_01");
    ta_smith_sharp(4, 50, 4, 55, "PSI_SMITH_01");
    ta_sitaround(4, 55, 5, 0, "PSI_SMITH_01");
    ta_smith_fire(5, 0, 5, 10, "PSI_SMITH_01");
    ta_smith_anvil(5, 10, 5, 20, "PSI_SMITH_01");
    ta_smith_fire(5, 20, 5, 30, "PSI_SMITH_01");
    ta_smith_anvil(5, 30, 5, 40, "PSI_SMITH_01");
    ta_smith_cool(5, 40, 5, 50, "PSI_SMITH_01");
    ta_smith_sharp(5, 50, 5, 55, "PSI_SMITH_01");
    ta_sitaround(5, 55, 6, 0, "PSI_SMITH_01");
    ta_smith_fire(6, 0, 6, 10, "PSI_SMITH_01");
    ta_smith_anvil(6, 10, 6, 20, "PSI_SMITH_01");
    ta_smith_fire(6, 20, 6, 30, "PSI_SMITH_01");
    ta_smith_anvil(6, 30, 6, 40, "PSI_SMITH_01");
    ta_smith_cool(6, 40, 6, 50, "PSI_SMITH_01");
    ta_smith_sharp(6, 50, 6, 55, "PSI_SMITH_01");
    ta_sitaround(6, 55, 7, 0, "PSI_SMITH_01");
    ta_smith_fire(7, 0, 7, 10, "PSI_SMITH_01");
    ta_smith_anvil(7, 10, 7, 20, "PSI_SMITH_01");
    ta_smith_fire(7, 20, 7, 30, "PSI_SMITH_01");
    ta_smith_anvil(7, 30, 7, 40, "PSI_SMITH_01");
    ta_smith_cool(7, 40, 7, 50, "PSI_SMITH_01");
    ta_smith_sharp(7, 50, 7, 55, "PSI_SMITH_01");
    ta_sitaround(7, 55, 8, 0, "PSI_SMITH_01");
};

func void rtn_prepareritual_1316() {
};

func void rtn_omfull_1316() {
};

func void rtn_fmtaken_1316() {
};

func void rtn_orcassault_1316() {
};

instance nov_1317_novize(npc_default) {
    name = name_novize;
    npctype = npctype_ambient;
    guild = gil_nov;
    level = 3;
    voice = 5;
    id = 1317;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(nov_1317_novize, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1317_novize, "Humans_Relaxed.mds");
    mdl_setvisualbody(nov_1317_novize, "hum_body_Naked0", 1, 1, "Hum_Head_Psionic", 32, 1, nov_armor_l /*4138*/);
    b_scale(nov_1317_novize);
    mdl_setmodelfatness(nov_1317_novize, -1.0);
    fight_tactic = fai_human_coward;
    equipitem(nov_1317_novize, itmw_1h_hatchet_01 /*4383*/);
    daily_routine = rtn_start_1317;
};

func void rtn_start_1317() {
    ta_smalltalk(8, 0, 23, 0, "PSI_HUT_3_WAIT");
    ta_sleep(23, 0, 8, 0, "PSI_3_HUT_IN");
};

instance nov_1318_novize(npc_default) {
    name = name_novize;
    npctype = npctype_ambient;
    guild = gil_nov;
    level = 3;
    voice = 3;
    id = 1318;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(nov_1318_novize, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1318_novize, "Humans_Relaxed.mds");
    mdl_setvisualbody(nov_1318_novize, "hum_body_Naked0", 1, 1, "Hum_Head_Psionic", 33, 2, nov_armor_l /*4138*/);
    b_scale(nov_1318_novize);
    mdl_setmodelfatness(nov_1318_novize, -1.0);
    fight_tactic = fai_human_coward;
    equipitem(nov_1318_novize, itmw_1h_hatchet_01 /*4383*/);
    daily_routine = rtn_start_1318;
};

func void rtn_start_1318() {
    ta_sleep(0, 0, 8, 0, "PSI_10_HUT_IN_BED");
    ta_smalltalk(8, 0, 24, 0, "PSI_TALK_AT_11_HUT");
};

instance nov_1319_novize(npc_default) {
    name = name_novize;
    npctype = npctype_ambient;
    guild = gil_nov;
    level = 3;
    flags = 0;
    voice = 5;
    id = 1319;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(nov_1319_novize, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1319_novize, "Humans_Relaxed.mds");
    mdl_setvisualbody(nov_1319_novize, "hum_body_Naked0", 1, 1, "Hum_Head_FatBald", 33, 2, nov_armor_l /*4138*/);
    b_scale(nov_1319_novize);
    mdl_setmodelfatness(nov_1319_novize, -1.0);
    fight_tactic = fai_human_coward;
    equipitem(nov_1319_novize, itmw_1h_hatchet_01 /*4383*/);
    daily_routine = rtn_start_1319;
};

func void rtn_start_1319() {
    ta_smalltalk(7, 0, 23, 0, "PSI_PATH_TEMPLE_4");
    ta_sleep(23, 0, 7, 0, "PSI_11_HUT_IN");
};

func void rtn_ritual_1319() {
    ta_stay(0, 0, 8, 0, "PSI_TEMPLE_COURT_2");
    ta_stay(8, 0, 24, 0, "PSI_TEMPLE_COURT_2");
};

instance nov_1320_novize(npc_default) {
    name = name_novize;
    npctype = npctype_ambient;
    guild = gil_nov;
    level = 3;
    voice = 3;
    id = 1320;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(nov_1320_novize, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1320_novize, "Humans_Relaxed.mds");
    mdl_setvisualbody(nov_1320_novize, "hum_body_Naked0", 1, 1, "Hum_Head_Psionic", 26, 2, nov_armor_l /*4138*/);
    b_scale(nov_1320_novize);
    mdl_setmodelfatness(nov_1320_novize, -1.0);
    fight_tactic = fai_human_coward;
    equipitem(nov_1320_novize, itmw_1h_hatchet_01 /*4383*/);
    daily_routine = rtn_start_1320;
};

func void rtn_start_1320() {
    ta_smalltalk(7, 5, 23, 5, "PSI_PATH_TEMPLE_4");
    ta_sleep(23, 5, 7, 5, "PSI_11_HUT_IN");
};

func void rtn_ritual_1320() {
    ta_stay(0, 0, 8, 0, "PSI_TEMPLE_COURT_3");
    ta_stay(8, 0, 0, 0, "PSI_TEMPLE_COURT_3");
};

instance nov_1321_novize(npc_default) {
    name = name_novize;
    npctype = npctype_ambient;
    guild = gil_nov;
    level = 3;
    voice = 5;
    id = 1321;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(nov_1321_novize, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1321_novize, "Humans_Relaxed.mds");
    mdl_setvisualbody(nov_1321_novize, "hum_body_Naked0", 1, 1, "Hum_Head_FatBald", 25, 1, nov_armor_l /*4138*/);
    b_scale(nov_1321_novize);
    mdl_setmodelfatness(nov_1321_novize, -1.0);
    fight_tactic = fai_human_coward;
    equipitem(nov_1321_novize, itmw_1h_hatchet_01 /*4383*/);
    daily_routine = rtn_start_1321;
};

func void rtn_start_1321() {
    ta_sleep(23, 0, 7, 30, "PSI_9_HUT_IN");
    ta_sitcampfire(7, 30, 23, 0, "PSI_PATH_2_14_2");
};

instance nov_1322_novize(npc_default) {
    name = name_novize;
    npctype = npctype_ambient;
    guild = gil_nov;
    level = 3;
    voice = 5;
    id = 1322;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(nov_1322_novize, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1322_novize, "Humans_Relaxed.mds");
    mdl_setvisualbody(nov_1322_novize, "hum_body_Naked0", 1, 1, "Hum_Head_FatBald", 26, 4, nov_armor_l /*4138*/);
    b_scale(nov_1322_novize);
    mdl_setmodelfatness(nov_1322_novize, -1.0);
    fight_tactic = fai_human_coward;
    equipitem(nov_1322_novize, itmw_1h_hatchet_01 /*4383*/);
    daily_routine = rtn_start_1322;
};

func void rtn_start_1322() {
    ta_sleep(23, 0, 7, 30, "PSI_7_HUT_IN");
    ta_sitcampfire(7, 30, 23, 0, "PSI_PATH_2_14_1");
};

instance nov_1323_novize(npc_default) {
    name = name_novize;
    npctype = npctype_ambient;
    guild = gil_nov;
    level = 3;
    voice = 3;
    id = 1323;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(nov_1323_novize, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1323_novize, "Humans_Relaxed.mds");
    mdl_setvisualbody(nov_1323_novize, "hum_body_Naked0", 1, 1, "Hum_Head_Bald", 34, 2, nov_armor_l /*4138*/);
    b_scale(nov_1323_novize);
    mdl_setmodelfatness(nov_1323_novize, -1.0);
    fight_tactic = fai_human_coward;
    equipitem(nov_1323_novize, itmw_1h_hatchet_01 /*4383*/);
    equipitem(nov_1323_novize, itmilute /*4507*/);
    daily_routine = rtn_start_1323;
};

func void rtn_start_1323() {
    ta_sleep(1, 0, 8, 0, "PSI_29_HUT_IN");
    ta_sitcampfire(8, 0, 1, 0, "PSI_PATH_4_CAMPFIRE_A");
};

instance nov_1324_novize(npc_default) {
    name = name_novize;
    npctype = npctype_ambient;
    guild = gil_nov;
    level = 3;
    voice = 5;
    id = 1324;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(nov_1324_novize, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1324_novize, "Humans_Relaxed.mds");
    mdl_setvisualbody(nov_1324_novize, "hum_body_Naked0", 1, 1, "Hum_Head_Psionic", 28, 2, nov_armor_l /*4138*/);
    b_scale(nov_1324_novize);
    mdl_setmodelfatness(nov_1324_novize, -1.0);
    fight_tactic = fai_human_coward;
    equipitem(nov_1324_novize, itmw_1h_hatchet_01 /*4383*/);
    daily_routine = rtn_start_1324;
};

func void rtn_start_1324() {
    ta_sleep(0, 0, 8, 0, "PSI_30_HUT_IN");
    ta_sitcampfire(8, 0, 0, 0, "PSI_PATH_4_CAMPFIRE_B");
};

instance nov_1325_novize(npc_default) {
    name = name_novize;
    npctype = npctype_ambient;
    guild = gil_nov;
    level = 3;
    flags = 0;
    voice = 3;
    id = 1325;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(nov_1325_novize, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1325_novize, "Humans_Relaxed.mds");
    mdl_setvisualbody(nov_1325_novize, "hum_body_Naked0", 1, 1, "Hum_Head_FatBald", 28, 1, nov_armor_l /*4138*/);
    b_scale(nov_1325_novize);
    mdl_setmodelfatness(nov_1325_novize, 0.0);
    fight_tactic = fai_human_coward;
    equipitem(nov_1325_novize, itmw_1h_hatchet_01 /*4383*/);
    daily_routine = rtn_start_1325;
};

func void rtn_start_1325() {
    ta_sleep(23, 0, 7, 30, "PSI_8_HUT_IN");
    ta_sitcampfire(7, 30, 23, 0, "PSI_PATH_2_14");
};

instance nov_1326_novize(npc_default) {
    name = name_novize;
    npctype = npctype_ambient;
    guild = gil_nov;
    level = 3;
    flags = 0;
    voice = 3;
    id = 1326;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(nov_1326_novize, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1326_novize, "Humans_Relaxed.mds");
    mdl_setvisualbody(nov_1326_novize, "hum_body_Naked0", 1, 1, "Hum_Head_Psionic", 34, 1, nov_armor_l /*4138*/);
    b_scale(nov_1326_novize);
    mdl_setmodelfatness(nov_1326_novize, -1.0);
    fight_tactic = fai_human_coward;
    equipitem(nov_1326_novize, itmw_1h_hatchet_01 /*4383*/);
    daily_routine = rtn_start_1326;
};

func void rtn_start_1326() {
    ta_sleep(23, 5, 7, 30, "PSI_27_HUT_IN");
    ta_listen(7, 30, 23, 5, "PSI_PLATFORM_1");
};

instance nov_1327_novize(npc_default) {
    name = name_novize;
    npctype = npctype_ambient;
    guild = gil_nov;
    level = 3;
    voice = 5;
    id = 1327;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(nov_1327_novize, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1327_novize, "Humans_Relaxed.mds");
    mdl_setvisualbody(nov_1327_novize, "hum_body_Naked0", 1, 1, "Hum_Head_Bald", 29, 1, nov_armor_l /*4138*/);
    b_scale(nov_1327_novize);
    mdl_setmodelfatness(nov_1327_novize, -1.0);
    fight_tactic = fai_human_coward;
    equipitem(nov_1327_novize, itmw_1h_hatchet_01 /*4383*/);
    daily_routine = rtn_start_1327;
};

func void rtn_start_1327() {
    ta_sleep(0, 0, 7, 0, "PSI_31_HUT_IN");
    ta_stand(7, 0, 0, 0, "PSI_31_HUT_EX");
};

instance nov_1328_novize(npc_default) {
    name = name_novize;
    npctype = npctype_ambient;
    guild = gil_nov;
    level = 3;
    voice = 3;
    id = 1328;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(nov_1328_novize, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1328_novize, "Humans_Mage.mds");
    mdl_setvisualbody(nov_1328_novize, "hum_body_Naked0", 1, 1, "Hum_Head_Bald", 26, 3, nov_armor_l /*4138*/);
    b_scale(nov_1328_novize);
    mdl_setmodelfatness(nov_1328_novize, -1.0);
    fight_tactic = fai_human_coward;
    equipitem(nov_1328_novize, itmw_1h_hatchet_01 /*4383*/);
    daily_routine = rtn_start_1328;
};

func void rtn_start_1328() {
    ta_pickrice(7, 0, 19, 0, "PATH_TAKE_HERB_2_1");
    ta_pickrice(19, 0, 7, 0, "PATH_TAKE_HERB_2_1");
};

instance nov_1329_novize(npc_default) {
    name = name_novize;
    npctype = npctype_ambient;
    guild = gil_nov;
    level = 3;
    voice = 5;
    id = 1329;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(nov_1329_novize, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1329_novize, "Humans_Mage.mds");
    mdl_setvisualbody(nov_1329_novize, "hum_body_Naked0", 1, 1, "Hum_Head_Bald", 26, 3, nov_armor_l /*4138*/);
    b_scale(nov_1329_novize);
    mdl_setmodelfatness(nov_1329_novize, -1.0);
    fight_tactic = fai_human_coward;
    equipitem(nov_1329_novize, itmw_1h_hatchet_01 /*4383*/);
    daily_routine = rtn_start_1329;
};

func void rtn_start_1329() {
    ta_pickrice(7, 0, 19, 0, "PATH_TAKE_HERB_2_1");
    ta_pickrice(19, 0, 7, 0, "PATH_TAKE_HERB_2_1");
};

instance nov_1330_baalparvez(npc_default) {
    name = "Èäîë Ïàðâåç";
    npctype = npctype_main;
    guild = gil_nov;
    level = 18;
    voice = 10;
    id = 1330;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 50;
    attribute[atr_mana] /*2*/ = 50;
    attribute[atr_hitpoints_max] /*1*/ = 200;
    attribute[atr_hitpoints] /*0*/ = 200;
    mdl_setvisual(nov_1330_baalparvez, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1330_baalparvez, "Humans_Mage.mds");
    mdl_setvisualbody(nov_1330_baalparvez, "hum_body_Naked0", 1, 1, "Hum_Head_Psionic", 25, 2, nov_armor_m /*4139*/);
    b_scale(nov_1330_baalparvez);
    mdl_setmodelfatness(nov_1330_baalparvez, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(nov_1330_baalparvez, npc_talent_1h, 1);
    createinvitem(nov_1330_baalparvez, itmi_stuff_oldcoin_02);
    createinvitems(nov_1330_baalparvez, itminugget, 50);
    createinvitems(nov_1330_baalparvez, itfo_potion_health_03, 1);
    createinvitems(nov_1330_baalparvez, itforice, 1);
    equipitem(nov_1330_baalparvez, itmw_1h_mace_04 /*4400*/);
    daily_routine = rtn_start_1330;
};

func void rtn_start_1330() {
    ta_sleep(22, 35, 7, 45, "OCR_HUT_59");
    ta_washself(7, 45, 8, 0, "OCR_WASH_8");
    ta_standaround(8, 0, 22, 35, "OCR_MARKETPLACE_HANGAROUND");
};

func void rtn_guide_1330() {
    ta_guidepc(8, 0, 20, 0, "PATH_OC_PSI_18");
    ta_guidepc(20, 0, 8, 0, "PATH_OC_PSI_18");
};

instance nov_1331_baaltaran(npc_default) {
    name = "Èäîë Òàðàí";
    npctype = npctype_main;
    guild = gil_nov;
    level = 9;
    voice = 5;
    id = 1331;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 148;
    attribute[atr_hitpoints] /*0*/ = 148;
    mdl_setvisual(nov_1331_baaltaran, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1331_baaltaran, "Humans_Mage.mds");
    mdl_setvisualbody(nov_1331_baaltaran, "hum_body_Naked0", 1, 1, "Hum_Head_FatBald", 29, 2, nov_armor_m /*4139*/);
    b_scale(nov_1331_baaltaran);
    mdl_setmodelfatness(nov_1331_baaltaran, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(nov_1331_baaltaran, npc_talent_1h, 1);
    createinvitem(nov_1331_baaltaran, itmi_stuff_oldcoin_02);
    createinvitems(nov_1331_baaltaran, itminugget, 15);
    createinvitems(nov_1331_baaltaran, itforice, 5);
    createinvitems(nov_1331_baaltaran, itfobooze, 3);
    createinvitems(nov_1331_baaltaran, itmijoint_1, 13);
    equipitem(nov_1331_baaltaran, itmw_1h_axe_old_01 /*4391*/);
    daily_routine = rtn_start_1331;
};

func void rtn_start_1331() {
    ta_smalltalk(0, 0, 8, 0, "OCR_TO_HUT_6");
    ta_standaround(8, 0, 0, 0, "OCR_OUTSIDE_HUT_77_INSERT");
};

instance nov_1332_baalkagan(npc_default) {
    name = "Èäîë Êàãàí";
    npctype = npctype_main;
    guild = gil_nov;
    level = 9;
    voice = 13;
    id = 1332;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 148;
    attribute[atr_hitpoints] /*0*/ = 148;
    mdl_setvisual(nov_1332_baalkagan, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1332_baalkagan, "Humans_Mage.mds");
    mdl_setvisualbody(nov_1332_baalkagan, "hum_body_Naked0", 1, 1, "Hum_Head_Psionic", 29, 1, nov_armor_m /*4139*/);
    b_scale(nov_1332_baalkagan);
    mdl_setmodelfatness(nov_1332_baalkagan, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(nov_1332_baalkagan, npc_talent_1h, 1);
    createinvitems(nov_1332_baalkagan, itmijoint_1, 10);
    createinvitems(nov_1332_baalkagan, itmijoint_2, 20);
    createinvitems(nov_1332_baalkagan, itmijoint_3, 20);
    equipitem(nov_1332_baalkagan, itmw_1h_axe_old_01 /*4391*/);
    daily_routine = rtn_start_1332;
};

func void rtn_start_1332() {
    ta_standaround(0, 0, 7, 30, "NC_PATH_PEASANT_OUTSIDE11");
    ta_smalltalk(7, 30, 0, 0, "NC_PLACE06");
};

instance nov_1333_baalisidro(npc_default) {
    name = "Èäîë Èñèäðî";
    npctype = npctype_main;
    guild = gil_nov;
    level = 9;
    voice = 3;
    id = 1333;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 148;
    attribute[atr_hitpoints] /*0*/ = 148;
    mdl_setvisual(nov_1333_baalisidro, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1333_baalisidro, "Humans_Mage.mds");
    mdl_setvisualbody(nov_1333_baalisidro, "hum_body_Naked0", 1, 1, "Hum_Head_FatBald", 29, 2, nov_armor_m /*4139*/);
    b_scale(nov_1333_baalisidro);
    mdl_setmodelfatness(nov_1333_baalisidro, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(nov_1333_baalisidro, npc_talent_1h, 1);
    createinvitems(nov_1333_baalisidro, itmijoint_1, 10);
    createinvitems(nov_1333_baalisidro, itmijoint_2, 20);
    createinvitems(nov_1333_baalisidro, itmijoint_3, 20);
    equipitem(nov_1333_baalisidro, itmw_1h_axe_old_01 /*4391*/);
    daily_routine = rtn_start_1333;
};

func void rtn_start_1333() {
    ta_sitaround(8, 0, 20, 0, "NC_TAVERN_SIT2");
    ta_sitaround(20, 0, 8, 0, "NC_TAVERN_SIT2");
};

instance nov_1334_novize(npc_default) {
    name = name_novize;
    npctype = npctype_ambient;
    guild = gil_nov;
    level = 9;
    voice = 3;
    id = 1334;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 12;
    attribute[atr_mana] /*2*/ = 12;
    attribute[atr_hitpoints_max] /*1*/ = 148;
    attribute[atr_hitpoints] /*0*/ = 148;
    mdl_setvisual(nov_1334_novize, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1334_novize, "Humans_Mage.mds");
    mdl_setvisualbody(nov_1334_novize, "hum_body_Naked0", 1, 1, "Hum_Head_FatBald", 29, 2, nov_armor_m /*4139*/);
    b_scale(nov_1334_novize);
    mdl_setmodelfatness(nov_1334_novize, -1.0);
    fight_tactic = fai_human_coward;
    equipitem(nov_1334_novize, itmw_1h_axe_old_01 /*4391*/);
    daily_routine = rtn_start_1334;
};

func void rtn_start_1334() {
    ta_pickrice(7, 0, 19, 0, "PATH_TAKE_HERB_06");
    ta_pickrice(19, 0, 7, 0, "PATH_TAKE_HERB_06");
};

instance nov_1335_novize(npc_default) {
    name = name_novize;
    npctype = npctype_ambient;
    guild = gil_nov;
    level = 9;
    voice = 5;
    id = 1335;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 15;
    attribute[atr_mana] /*2*/ = 15;
    attribute[atr_hitpoints_max] /*1*/ = 148;
    attribute[atr_hitpoints] /*0*/ = 148;
    mdl_setvisual(nov_1335_novize, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1335_novize, "Humans_Relaxed.mds");
    mdl_setvisualbody(nov_1335_novize, "hum_body_Naked0", 1, 1, "Hum_Head_FatBald", 26, 4, nov_armor_m /*4139*/);
    b_scale(nov_1335_novize);
    mdl_setmodelfatness(nov_1335_novize, -1.0);
    fight_tactic = fai_human_coward;
    npc_settalentskill(nov_1335_novize, npc_talent_1h, 1);
    equipitem(nov_1335_novize, itmw_1h_axe_old_01 /*4391*/);
    daily_routine = rtn_start_1335;
};

func void rtn_start_1335() {
    ta_pickrice(7, 5, 19, 5, "PATH_TAKE_HERB_06");
    ta_pickrice(19, 5, 7, 5, "PATH_TAKE_HERB_06");
};

instance nov_1336_novize(npc_default) {
    name = name_novize;
    npctype = npctype_ambient;
    guild = gil_nov;
    level = 3;
    voice = 2;
    id = 1336;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 7;
    attribute[atr_mana] /*2*/ = 7;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(nov_1336_novize, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1336_novize, "Humans_Relaxed.mds");
    mdl_setvisualbody(nov_1336_novize, "hum_body_Naked0", 1, 1, "Hum_Head_FatBald", 28, 1, nov_armor_l /*4138*/);
    b_scale(nov_1336_novize);
    mdl_setmodelfatness(nov_1336_novize, 0.0);
    fight_tactic = fai_human_coward;
    equipitem(nov_1336_novize, itmw_1h_hatchet_01 /*4383*/);
    daily_routine = rtn_start_1336;
};

func void rtn_start_1336() {
    ta_sleep(2, 0, 8, 0, "PSI_24_HUT_IN_BED");
    ta_listen(8, 0, 2, 0, "PSI_TEACH_CADAR");
};

instance nov_1337_novize(npc_default) {
    name = name_novize;
    npctype = npctype_ambient;
    guild = gil_nov;
    level = 3;
    voice = 2;
    id = 1337;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 8;
    attribute[atr_mana] /*2*/ = 8;
    attribute[atr_hitpoints_max] /*1*/ = 208;
    attribute[atr_hitpoints] /*0*/ = 208;
    mdl_setvisual(nov_1337_novize, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1337_novize, "Humans_Relaxed.mds");
    mdl_setvisualbody(nov_1337_novize, "hum_body_Naked0", 1, 1, "Hum_Head_FatBald", 31, 2, nov_armor_l /*4138*/);
    b_scale(nov_1337_novize);
    mdl_setmodelfatness(nov_1337_novize, -1.0);
    fight_tactic = fai_human_coward;
    equipitem(nov_1337_novize, itmw_1h_hatchet_01 /*4383*/);
    daily_routine = rtn_start_1337;
};

func void rtn_start_1337() {
    ta_meditate(8, 0, 10, 0, "PSI_TEMPLE_COURT_2_MOVEMENT");
    ta_meditate(10, 0, 8, 0, "PSI_TEMPLE_COURT_2_MOVEMENT");
};

func void rtn_ritual_1337() {
    ta_stay(8, 0, 10, 0, "PSI_TEMPLE_NOVIZE_PR2");
    ta_stay(10, 0, 8, 0, "PSI_TEMPLE_NOVIZE_PR2");
};

instance nov_1338_novize(npc_default) {
    name = name_novize;
    npctype = npctype_ambient;
    guild = gil_nov;
    level = 14;
    voice = 5;
    id = 1338;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 19;
    attribute[atr_mana] /*2*/ = 19;
    attribute[atr_hitpoints_max] /*1*/ = 208;
    attribute[atr_hitpoints] /*0*/ = 208;
    mdl_setvisual(nov_1338_novize, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1338_novize, "Humans_Mage.mds");
    mdl_setvisualbody(nov_1338_novize, "hum_body_Naked0", 1, 1, "Hum_Head_FatBald", 22, 1, nov_armor_h /*4140*/);
    b_scale(nov_1338_novize);
    mdl_setmodelfatness(nov_1338_novize, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(nov_1338_novize, npc_talent_1h, 1);
    equipitem(nov_1338_novize, itmw_1h_mace_01 /*4397*/);
    daily_routine = rtn_start_1338;
};

func void rtn_start_1338() {
    ta_meditate(8, 0, 10, 0, "PSI_TEMPLE_COURT_2");
    ta_meditate(10, 0, 8, 0, "PSI_TEMPLE_COURT_2");
};

func void rtn_ritual_1338() {
    ta_stay(0, 0, 8, 0, "PSI_TEMPLE_NOVIZE_PR6");
    ta_stay(8, 0, 24, 0, "PSI_TEMPLE_NOVIZE_PR6");
};

instance nov_1339_novize(npc_default) {
    name = name_novize;
    npctype = npctype_ambient;
    guild = gil_nov;
    level = 14;
    voice = 3;
    id = 1339;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 19;
    attribute[atr_mana] /*2*/ = 19;
    attribute[atr_hitpoints_max] /*1*/ = 208;
    attribute[atr_hitpoints] /*0*/ = 208;
    mdl_setvisual(nov_1339_novize, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1339_novize, "Humans_Mage.mds");
    mdl_setvisualbody(nov_1339_novize, "hum_body_Naked0", 1, 1, "Hum_Head_FatBald", 27, 1, nov_armor_h /*4140*/);
    b_scale(nov_1339_novize);
    mdl_setmodelfatness(nov_1339_novize, -1.0);
    fight_tactic = fai_human_coward;
    npc_settalentskill(nov_1339_novize, npc_talent_1h, 1);
    equipitem(nov_1339_novize, itmw_1h_mace_01 /*4397*/);
    daily_routine = rtn_start_1339;
};

func void rtn_start_1339() {
    ta_meditate(8, 0, 10, 0, "PSI_TEMPLE_NOVIZE_PR4_MOVEMENT");
    ta_meditate(10, 0, 8, 0, "PSI_TEMPLE_NOVIZE_PR4_MOVEMENT");
};

func void rtn_ritual_1339() {
    ta_stay(0, 0, 8, 0, "PSI_TEMPLE_NOVIZE_PR");
    ta_stay(8, 0, 24, 0, "PSI_TEMPLE_NOVIZE_PR");
};

instance nov_1340_novize(npc_default) {
    name = name_novize;
    npctype = npctype_ambient;
    guild = gil_nov;
    level = 9;
    flags = 0;
    voice = 3;
    id = 1340;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 148;
    attribute[atr_hitpoints] /*0*/ = 148;
    mdl_setvisual(nov_1340_novize, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1340_novize, "Humans_Mage.mds");
    mdl_setvisualbody(nov_1340_novize, "hum_body_Naked0", 1, 1, "Hum_Head_Psionic", 75, 1, nov_armor_m /*4139*/);
    b_scale(nov_1340_novize);
    mdl_setmodelfatness(nov_1340_novize, -1.0);
    fight_tactic = fai_human_coward;
    npc_settalentskill(nov_1340_novize, npc_talent_1h, 1);
    equipitem(nov_1340_novize, itmw_1h_axe_old_01 /*4391*/);
    daily_routine = rtn_start_1340;
};

func void rtn_start_1340() {
    ta_sleep(2, 0, 8, 5, "PSI_24_HUT_IN");
    ta_listen(8, 5, 2, 0, "PSI_TEACH_CADAR");
};

instance nov_1341_novize(npc_default) {
    name = name_novize;
    npctype = npctype_ambient;
    guild = gil_nov;
    level = 14;
    flags = 0;
    voice = 2;
    id = 1341;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 208;
    attribute[atr_hitpoints] /*0*/ = 208;
    mdl_setvisual(nov_1341_novize, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1341_novize, "Humans_Mage.mds");
    mdl_setvisualbody(nov_1341_novize, "hum_body_Naked0", 1, 1, "Hum_Head_FatBald", 27, 1, nov_armor_h /*4140*/);
    b_scale(nov_1341_novize);
    mdl_setmodelfatness(nov_1341_novize, -1.0);
    fight_tactic = fai_human_coward;
    npc_settalentskill(nov_1341_novize, npc_talent_1h, 1);
    equipitem(nov_1341_novize, itmw_1h_mace_01 /*4397*/);
    daily_routine = rtn_start_1341;
};

func void rtn_start_1341() {
    ta_meditate(8, 0, 10, 0, "PSI_TEMPLE_NOVIZE_PR4_MOVEMENT");
    ta_meditate(10, 0, 8, 0, "PSI_TEMPLE_NOVIZE_PR4_MOVEMENT");
};

func void rtn_ritual_1341() {
    ta_stay(18, 0, 21, 0, "PSI_TEMPLE_NOVIZE_PR2");
    ta_stay(21, 0, 18, 0, "PSI_TEMPLE_NOVIZE_PR2");
};

instance nov_1342_novize(npc_default) {
    name = name_novize;
    npctype = npctype_ambient;
    guild = gil_nov;
    level = 3;
    voice = 5;
    id = 1342;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(nov_1342_novize, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1342_novize, "Humans_Relaxed.mds");
    mdl_setvisualbody(nov_1342_novize, "hum_body_Naked0", 1, 1, "Hum_Head_Psionic", 28, 2, nov_armor_l /*4138*/);
    b_scale(nov_1342_novize);
    mdl_setmodelfatness(nov_1342_novize, -1.0);
    fight_tactic = fai_human_coward;
    equipitem(nov_1342_novize, itmw_1h_hatchet_01 /*4383*/);
    daily_routine = rtn_start_1342;
};

func void rtn_start_1342() {
    ta_sleep(23, 10, 7, 30, "PSI_27_HUT_IN");
    ta_listen(7, 30, 23, 10, "PSI_PLATFORM_1");
};

instance nov_1343_novize(npc_default) {
    name = name_novize;
    npctype = npctype_ambient;
    guild = gil_nov;
    level = 9;
    voice = 5;
    id = 1343;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 148;
    attribute[atr_hitpoints] /*0*/ = 148;
    mdl_setvisual(nov_1343_novize, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1343_novize, "Humans_Mage.mds");
    mdl_setvisualbody(nov_1343_novize, "hum_body_Naked0", 1, 1, "Hum_Head_FatBald", 22, 1, nov_armor_m /*4139*/);
    b_scale(nov_1343_novize);
    mdl_setmodelfatness(nov_1343_novize, -1.0);
    fight_tactic = fai_human_coward;
    npc_settalentskill(nov_1343_novize, npc_talent_1h, 1);
    equipitem(nov_1343_novize, itmw_1h_axe_old_01 /*4391*/);
    daily_routine = rtn_start_1343;
};

func void rtn_start_1343() {
    ta_meditate(8, 0, 10, 0, "PSI_TEMPLE_COURT_3_MOVEMENT");
    ta_meditate(10, 0, 8, 0, "PSI_TEMPLE_COURT_3_MOVEMENT");
};

func void rtn_ritual_1343() {
    ta_stay(0, 0, 8, 0, "PSI_TEMPLE_NOVIZE_PR");
    ta_stay(8, 0, 24, 0, "PSI_TEMPLE_NOVIZE_PR");
};

instance nov_1344_novize(npc_default) {
    name = name_novize;
    npctype = npctype_ambient;
    guild = gil_nov;
    level = 3;
    voice = 5;
    id = 1344;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(nov_1344_novize, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1344_novize, "Humans_Relaxed.mds");
    mdl_setvisualbody(nov_1344_novize, "hum_body_Naked0", 1, 1, "Hum_Head_FatBald", 25, 1, nov_armor_l /*4138*/);
    b_scale(nov_1344_novize);
    mdl_setmodelfatness(nov_1344_novize, -1.0);
    fight_tactic = fai_human_coward;
    equipitem(nov_1344_novize, itmw_1h_hatchet_01 /*4383*/);
    daily_routine = rtn_start_1344;
};

func void rtn_start_1344() {
    ta_meditate(8, 0, 10, 0, "PSI_TEMPLE_COURT_3");
    ta_meditate(10, 0, 8, 0, "PSI_TEMPLE_COURT_3");
};

func void rtn_ritual_1344() {
    ta_stay(0, 0, 8, 0, "PSI_TEMPLE_NOVIZE_PR4");
    ta_stay(8, 0, 24, 0, "PSI_TEMPLE_NOVIZE_PR4");
};

instance nov_1345_novize(npc_default) {
    name = name_novize;
    npctype = npctype_ambient;
    guild = gil_nov;
    level = 9;
    voice = 5;
    id = 1345;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 148;
    attribute[atr_hitpoints] /*0*/ = 148;
    mdl_setvisual(nov_1345_novize, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1345_novize, "Humans_Mage.mds");
    mdl_setvisualbody(nov_1345_novize, "hum_body_Naked0", 1, 1, "Hum_Head_FatBald", 22, 1, nov_armor_m /*4139*/);
    b_scale(nov_1345_novize);
    mdl_setmodelfatness(nov_1345_novize, -1.0);
    fight_tactic = fai_human_coward;
    npc_settalentskill(nov_1345_novize, npc_talent_1h, 1);
    equipitem(nov_1345_novize, itmw_1h_axe_old_01 /*4391*/);
    daily_routine = rtn_start_1345;
};

func void rtn_start_1345() {
    ta_sleep(2, 0, 8, 10, "PSI_24_HUT_IN");
    ta_listen(8, 10, 2, 0, "PSI_TEACH_CADAR");
};

instance nov_1346_novize(npc_default) {
    name = name_novize;
    npctype = npctype_ambient;
    guild = gil_nov;
    level = 3;
    voice = 3;
    id = 1346;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(nov_1346_novize, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1346_novize, "Humans_Relaxed.mds");
    mdl_setvisualbody(nov_1346_novize, "hum_body_Naked0", 1, 1, "Hum_Head_Psionic", 26, 2, nov_armor_l /*4138*/);
    b_scale(nov_1346_novize);
    mdl_setmodelfatness(nov_1346_novize, -1.0);
    fight_tactic = fai_human_coward;
    equipitem(nov_1346_novize, itmw_1h_hatchet_01 /*4383*/);
    equipitem(nov_1346_novize, itmilute /*4507*/);
    daily_routine = rtn_start_1346;
};

func void rtn_start_1346() {
    ta_smalltalk(8, 0, 23, 0, "PSI_PATH_TEMPLE_9_MOVEMENT");
    ta_smalltalk(23, 0, 8, 0, "PSI_PATH_TEMPLE_9_MOVEMENT");
};

func void rtn_ritual_1346() {
    ta_meditate(0, 0, 8, 0, "PSI_TEMPLE_NOVIZE_PR2");
    ta_meditate(8, 0, 24, 0, "PSI_TEMPLE_NOVIZE_PR2");
};

instance nov_1347_novize(npc_default) {
    name = name_novize;
    npctype = npctype_ambient;
    guild = gil_nov;
    level = 3;
    flags = 0;
    voice = 5;
    id = 1347;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(nov_1347_novize, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1347_novize, "Humans_Relaxed.mds");
    mdl_setvisualbody(nov_1347_novize, "hum_body_Naked0", 1, 1, "Hum_Head_FatBald", 33, 2, nov_armor_l /*4138*/);
    b_scale(nov_1347_novize);
    mdl_setmodelfatness(nov_1347_novize, -1.0);
    fight_tactic = fai_human_coward;
    equipitem(nov_1347_novize, itmw_1h_hatchet_01 /*4383*/);
    daily_routine = rtn_start_1347;
};

func void rtn_start_1347() {
    ta_smalltalk(8, 0, 23, 0, "PSI_PATH_TEMPLE_9_MOVEMENT");
    ta_smalltalk(23, 0, 8, 0, "PSI_PATH_TEMPLE_9_MOVEMENT");
};

func void rtn_ritual_1347() {
    ta_stay(0, 0, 8, 0, "PSI_TEMPLE_NOVIZE_PR7");
    ta_stay(8, 0, 24, 0, "PSI_TEMPLE_NOVIZE_PR7");
};

instance nov_1348_novize(npc_default) {
    name = name_novize;
    npctype = npctype_ambient;
    guild = gil_nov;
    level = 3;
    voice = 5;
    id = 1348;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(nov_1348_novize, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1348_novize, "Humans_Relaxed.mds");
    mdl_setvisualbody(nov_1348_novize, "hum_body_Naked0", 1, 1, "Hum_Head_FatBald", 26, 4, nov_armor_l /*4138*/);
    b_scale(nov_1348_novize);
    mdl_setmodelfatness(nov_1348_novize, -1.0);
    fight_tactic = fai_human_coward;
    equipitem(nov_1348_novize, itmw_1h_hatchet_01 /*4383*/);
    daily_routine = rtn_start_1348;
};

func void rtn_start_1348() {
    ta_smalltalk(8, 0, 23, 0, "PSI_TEMPLE_STAIRS_3");
    ta_smalltalk(23, 0, 8, 0, "PSI_TEMPLE_STAIRS_3");
};

func void rtn_ritual_1348() {
    ta_meditate(0, 0, 8, 0, "PSI_TEMPLE_NOVIZE_PR");
    ta_meditate(8, 0, 24, 0, "PSI_TEMPLE_NOVIZE_PR");
};

instance nov_1349_novize(npc_default) {
    name = name_novize;
    npctype = npctype_ambient;
    guild = gil_nov;
    level = 3;
    voice = 3;
    id = 1349;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(nov_1349_novize, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1349_novize, "Humans_Relaxed.mds");
    mdl_setvisualbody(nov_1349_novize, "hum_body_Naked0", 1, 1, "Hum_Head_Psionic", 26, 2, nov_armor_l /*4138*/);
    b_scale(nov_1349_novize);
    mdl_setmodelfatness(nov_1349_novize, -1.0);
    fight_tactic = fai_human_coward;
    equipitem(nov_1349_novize, itmw_1h_hatchet_01 /*4383*/);
    equipitem(nov_1349_novize, itmilute /*4507*/);
    daily_routine = rtn_start_1349;
};

func void rtn_start_1349() {
    ta_smalltalk(8, 0, 23, 0, "PSI_TEMPLE_STAIRS_3");
    ta_smalltalk(23, 0, 8, 0, "PSI_TEMPLE_STAIRS_3");
};

func void rtn_ritual_1349() {
    ta_stay(0, 0, 8, 0, "PSI_TEMPLE_NOVIZE_PR3");
    ta_stay(8, 0, 24, 0, "PSI_TEMPLE_NOVIZE_PR3");
};

instance nov_1350_novize(npc_default) {
    name = name_novize;
    npctype = npctype_ambient;
    guild = gil_nov;
    level = 20;
    flags = 0;
    voice = 3;
    id = 1350;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 20;
    attribute[atr_mana_max] /*3*/ = 100;
    attribute[atr_mana] /*2*/ = 100;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(nov_1350_novize, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1350_novize, "Humans_Relaxed.mds");
    mdl_setvisualbody(nov_1350_novize, "hum_body_Naked0", 1, 1, "Hum_Head_FatBald", 28, 1, nov_armor_l /*4138*/);
    b_scale(nov_1350_novize);
    mdl_setmodelfatness(nov_1350_novize, 0.0);
    fight_tactic = fai_human_coward;
    equipitem(nov_1350_novize, itmw_1h_hatchet_01 /*4383*/);
    daily_routine = rtn_start_1350;
};

func void rtn_start_1350() {
    ta_guardpassage(8, 0, 20, 0, "PSI_22_HUT_EX_GUARD");
    ta_guardpassage(20, 0, 8, 0, "PSI_22_HUT_EX_GUARD");
};

instance nov_1351_novize(npc_default) {
    name = name_novize;
    npctype = npctype_ambient;
    guild = gil_nov;
    level = 3;
    flags = 0;
    voice = 3;
    id = 1351;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(nov_1351_novize, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1351_novize, "Humans_Mage.mds");
    mdl_setvisualbody(nov_1351_novize, "hum_body_Naked0", 1, 2, "Hum_Head_Bald", 6, 0, nov_armor_l /*4138*/);
    b_scale(nov_1351_novize);
    mdl_setmodelfatness(nov_1351_novize, -1.0);
    fight_tactic = fai_human_coward;
    equipitem(nov_1351_novize, itmw_1h_hatchet_01 /*4383*/);
    daily_routine = rtn_start_1351;
};

func void rtn_start_1351() {
    ta_smith_fire(8, 10, 8, 20, "PSI_SMITH_01");
    ta_smith_anvil(8, 20, 8, 30, "PSI_SMITH_01");
    ta_smith_fire(8, 30, 8, 40, "PSI_SMITH_01");
    ta_smith_anvil(8, 30, 8, 40, "PSI_SMITH_01");
    ta_smith_cool(8, 50, 9, 0, "PSI_SMITH_01");
    ta_smith_sharp(9, 0, 9, 5, "PSI_SMITH_01");
    ta_sitaround(9, 5, 9, 10, "PSI_SMITH_01");
    ta_smith_fire(9, 10, 9, 20, "PSI_SMITH_01");
    ta_smith_anvil(9, 20, 9, 30, "PSI_SMITH_01");
    ta_smith_fire(9, 30, 9, 40, "PSI_SMITH_01");
    ta_smith_anvil(9, 30, 9, 40, "PSI_SMITH_01");
    ta_smith_cool(9, 50, 10, 0, "PSI_SMITH_01");
    ta_smith_sharp(10, 0, 10, 5, "PSI_SMITH_01");
    ta_sitaround(10, 5, 10, 10, "PSI_SMITH_01");
    ta_smith_fire(10, 10, 10, 20, "PSI_SMITH_01");
    ta_smith_anvil(10, 20, 10, 30, "PSI_SMITH_01");
    ta_smith_fire(10, 30, 10, 40, "PSI_SMITH_01");
    ta_smith_anvil(10, 30, 10, 40, "PSI_SMITH_01");
    ta_smith_cool(10, 50, 11, 0, "PSI_SMITH_01");
    ta_smith_sharp(11, 0, 11, 5, "PSI_SMITH_01");
    ta_sitaround(11, 5, 11, 10, "PSI_SMITH_01");
    ta_smith_fire(11, 10, 11, 20, "PSI_SMITH_01");
    ta_smith_anvil(11, 20, 11, 30, "PSI_SMITH_01");
    ta_smith_fire(11, 30, 11, 40, "PSI_SMITH_01");
    ta_smith_anvil(11, 40, 11, 50, "PSI_SMITH_01");
    ta_smith_cool(11, 50, 12, 0, "PSI_SMITH_01");
    ta_smith_sharp(12, 0, 12, 5, "PSI_SMITH_01");
    ta_sitaround(12, 5, 12, 10, "PSI_SMITH_01");
    ta_smith_fire(12, 10, 12, 20, "PSI_SMITH_01");
    ta_smith_anvil(12, 20, 12, 30, "PSI_SMITH_01");
    ta_smith_fire(12, 30, 12, 40, "PSI_SMITH_01");
    ta_smith_anvil(12, 40, 12, 50, "PSI_SMITH_01");
    ta_smith_cool(12, 50, 13, 0, "PSI_SMITH_01");
    ta_smith_sharp(13, 0, 13, 5, "PSI_SMITH_01");
    ta_sitaround(13, 5, 13, 10, "PSI_SMITH_01");
    ta_smith_fire(13, 10, 13, 20, "PSI_SMITH_01");
    ta_smith_anvil(13, 20, 13, 30, "PSI_SMITH_01");
    ta_smith_fire(13, 30, 13, 40, "PSI_SMITH_01");
    ta_smith_anvil(13, 40, 13, 50, "PSI_SMITH_01");
    ta_smith_cool(13, 50, 14, 0, "PSI_SMITH_01");
    ta_smith_sharp(14, 0, 14, 5, "PSI_SMITH_01");
    ta_sitaround(14, 5, 14, 10, "PSI_SMITH_01");
    ta_smith_fire(14, 10, 14, 20, "PSI_SMITH_01");
    ta_smith_anvil(14, 20, 14, 30, "PSI_SMITH_01");
    ta_smith_fire(14, 30, 14, 40, "PSI_SMITH_01");
    ta_smith_anvil(14, 40, 14, 50, "PSI_SMITH_01");
    ta_smith_cool(14, 50, 15, 0, "PSI_SMITH_01");
    ta_smith_sharp(15, 0, 15, 5, "PSI_SMITH_01");
    ta_sitaround(15, 5, 15, 10, "PSI_SMITH_01");
    ta_smith_fire(15, 10, 15, 20, "PSI_SMITH_01");
    ta_smith_anvil(15, 20, 15, 30, "PSI_SMITH_01");
    ta_smith_fire(15, 30, 15, 40, "PSI_SMITH_01");
    ta_smith_anvil(15, 40, 15, 50, "PSI_SMITH_01");
    ta_smith_cool(15, 50, 16, 0, "PSI_SMITH_01");
    ta_smith_sharp(16, 0, 16, 5, "PSI_SMITH_01");
    ta_sitaround(16, 5, 16, 10, "PSI_SMITH_01");
    ta_smith_fire(16, 10, 16, 20, "PSI_SMITH_01");
    ta_smith_anvil(16, 20, 16, 30, "PSI_SMITH_01");
    ta_smith_fire(16, 30, 16, 40, "PSI_SMITH_01");
    ta_smith_anvil(16, 40, 16, 50, "PSI_SMITH_01");
    ta_smith_cool(16, 50, 16, 0, "PSI_SMITH_01");
    ta_smith_sharp(17, 0, 17, 5, "PSI_SMITH_01");
    ta_sitaround(17, 5, 17, 10, "PSI_SMITH_01");
    ta_smith_fire(17, 10, 17, 20, "PSI_SMITH_01");
    ta_smith_anvil(17, 20, 17, 30, "PSI_SMITH_01");
    ta_smith_fire(17, 30, 17, 40, "PSI_SMITH_01");
    ta_smith_anvil(17, 40, 17, 50, "PSI_SMITH_01");
    ta_smith_cool(17, 50, 17, 0, "PSI_SMITH_01");
    ta_smith_sharp(18, 0, 18, 5, "PSI_SMITH_01");
    ta_sitaround(18, 5, 18, 10, "PSI_SMITH_01");
    ta_smith_fire(18, 10, 18, 20, "PSI_SMITH_01");
    ta_smith_anvil(18, 20, 18, 30, "PSI_SMITH_01");
    ta_smith_fire(18, 30, 18, 40, "PSI_SMITH_01");
    ta_smith_anvil(18, 40, 18, 50, "PSI_SMITH_01");
    ta_smith_cool(18, 50, 19, 0, "PSI_SMITH_01");
    ta_smith_sharp(19, 0, 19, 5, "PSI_SMITH_01");
    ta_sitaround(19, 5, 19, 10, "PSI_SMITH_01");
    ta_smith_fire(19, 10, 19, 20, "PSI_SMITH_01");
    ta_smith_anvil(19, 20, 19, 30, "PSI_SMITH_01");
    ta_smith_fire(19, 30, 19, 40, "PSI_SMITH_01");
    ta_smith_anvil(19, 40, 19, 50, "PSI_SMITH_01");
    ta_smith_cool(19, 50, 19, 0, "PSI_SMITH_01");
    ta_smith_sharp(20, 0, 20, 5, "PSI_SMITH_01");
    ta_sitaround(20, 5, 20, 10, "PSI_SMITH_01");
    ta_smith_fire(20, 10, 20, 20, "PSI_SMITH_01");
    ta_smith_anvil(20, 20, 20, 30, "PSI_SMITH_01");
    ta_smith_fire(20, 30, 20, 40, "PSI_SMITH_01");
    ta_smith_anvil(20, 40, 20, 50, "PSI_SMITH_01");
    ta_smith_cool(20, 50, 21, 0, "PSI_SMITH_01");
    ta_smith_sharp(21, 0, 21, 5, "PSI_SMITH_01");
    ta_sitaround(21, 5, 21, 10, "PSI_SMITH_01");
    ta_smith_fire(21, 10, 21, 20, "PSI_SMITH_01");
    ta_smith_anvil(21, 20, 21, 30, "PSI_SMITH_01");
    ta_smith_fire(21, 30, 21, 40, "PSI_SMITH_01");
    ta_smith_anvil(21, 40, 21, 50, "PSI_SMITH_01");
    ta_smith_cool(21, 50, 22, 0, "PSI_SMITH_01");
    ta_smith_sharp(22, 0, 22, 5, "PSI_SMITH_01");
    ta_sitaround(22, 5, 22, 10, "PSI_SMITH_01");
    ta_smith_fire(22, 10, 22, 20, "PSI_SMITH_01");
    ta_smith_anvil(22, 20, 22, 30, "PSI_SMITH_01");
    ta_smith_fire(22, 30, 22, 40, "PSI_SMITH_01");
    ta_smith_anvil(22, 40, 22, 50, "PSI_SMITH_01");
    ta_smith_cool(22, 50, 22, 60, "PSI_SMITH_01");
    ta_smith_sharp(23, 0, 23, 5, "PSI_SMITH_01");
    ta_sitaround(23, 5, 23, 10, "PSI_SMITH_01");
    ta_smith_fire(23, 10, 23, 20, "PSI_SMITH_01");
    ta_smith_anvil(23, 20, 23, 30, "PSI_SMITH_01");
    ta_smith_fire(23, 30, 23, 40, "PSI_SMITH_01");
    ta_smith_anvil(23, 40, 23, 60, "PSI_SMITH_01");
    ta_smith_cool(23, 50, 0, 0, "PSI_SMITH_01");
    ta_smith_sharp(0, 0, 0, 5, "PSI_SMITH_01");
    ta_sitaround(0, 5, 0, 10, "PSI_SMITH_01");
    ta_smith_fire(0, 10, 0, 20, "PSI_SMITH_01");
    ta_smith_anvil(0, 20, 0, 30, "PSI_SMITH_01");
    ta_smith_fire(0, 30, 0, 40, "PSI_SMITH_01");
    ta_smith_anvil(0, 40, 0, 50, "PSI_SMITH_01");
    ta_smith_cool(0, 50, 1, 0, "PSI_SMITH_01");
    ta_smith_sharp(1, 0, 1, 5, "PSI_SMITH_01");
    ta_sitaround(1, 5, 1, 10, "PSI_SMITH_01");
    ta_smith_fire(1, 10, 1, 20, "PSI_SMITH_01");
    ta_smith_anvil(1, 20, 1, 30, "PSI_SMITH_01");
    ta_smith_fire(1, 30, 1, 40, "PSI_SMITH_01");
    ta_smith_anvil(1, 40, 1, 50, "PSI_SMITH_01");
    ta_smith_cool(1, 50, 2, 0, "PSI_SMITH_01");
    ta_smith_sharp(2, 0, 2, 5, "PSI_SMITH_01");
    ta_sitaround(2, 5, 2, 10, "PSI_SMITH_01");
    ta_smith_fire(2, 10, 2, 20, "PSI_SMITH_01");
    ta_smith_anvil(2, 20, 2, 30, "PSI_SMITH_01");
    ta_smith_fire(2, 30, 2, 40, "PSI_SMITH_01");
    ta_smith_anvil(2, 40, 2, 50, "PSI_SMITH_01");
    ta_smith_cool(2, 50, 3, 0, "PSI_SMITH_01");
    ta_smith_sharp(3, 0, 3, 5, "PSI_SMITH_01");
    ta_sitaround(3, 5, 3, 10, "PSI_SMITH_01");
    ta_smith_fire(3, 10, 3, 20, "PSI_SMITH_01");
    ta_smith_anvil(3, 20, 3, 30, "PSI_SMITH_01");
    ta_smith_fire(3, 30, 3, 40, "PSI_SMITH_01");
    ta_smith_anvil(3, 40, 3, 50, "PSI_SMITH_01");
    ta_smith_cool(3, 50, 4, 0, "PSI_SMITH_01");
    ta_smith_sharp(4, 0, 4, 5, "PSI_SMITH_01");
    ta_sitaround(4, 5, 4, 10, "PSI_SMITH_01");
    ta_smith_fire(4, 10, 4, 20, "PSI_SMITH_01");
    ta_smith_anvil(4, 20, 4, 30, "PSI_SMITH_01");
    ta_smith_fire(4, 30, 4, 40, "PSI_SMITH_01");
    ta_smith_anvil(4, 40, 4, 50, "PSI_SMITH_01");
    ta_smith_cool(4, 50, 5, 0, "PSI_SMITH_01");
    ta_smith_sharp(5, 0, 5, 5, "PSI_SMITH_01");
    ta_sitaround(5, 5, 5, 10, "PSI_SMITH_01");
    ta_smith_fire(5, 10, 5, 20, "PSI_SMITH_01");
    ta_smith_anvil(5, 20, 5, 30, "PSI_SMITH_01");
    ta_smith_fire(5, 30, 5, 40, "PSI_SMITH_01");
    ta_smith_anvil(5, 40, 5, 50, "PSI_SMITH_01");
    ta_smith_cool(5, 50, 6, 0, "PSI_SMITH_01");
    ta_smith_sharp(6, 0, 6, 5, "PSI_SMITH_01");
    ta_sitaround(6, 5, 6, 10, "PSI_SMITH_01");
    ta_smith_fire(6, 10, 6, 20, "PSI_SMITH_01");
    ta_smith_anvil(6, 20, 6, 30, "PSI_SMITH_01");
    ta_smith_fire(6, 30, 6, 40, "PSI_SMITH_01");
    ta_smith_anvil(6, 40, 6, 50, "PSI_SMITH_01");
    ta_smith_cool(6, 50, 7, 0, "PSI_SMITH_01");
    ta_smith_sharp(7, 0, 7, 5, "PSI_SMITH_01");
    ta_sitaround(7, 5, 7, 10, "PSI_SMITH_01");
    ta_smith_fire(7, 10, 7, 20, "PSI_SMITH_01");
    ta_smith_anvil(7, 20, 7, 30, "PSI_SMITH_01");
    ta_smith_fire(7, 30, 7, 40, "PSI_SMITH_01");
    ta_smith_anvil(7, 40, 7, 50, "PSI_SMITH_01");
    ta_smith_cool(7, 50, 8, 0, "PSI_SMITH_01");
    ta_smith_sharp(8, 0, 8, 5, "PSI_SMITH_01");
    ta_sitaround(8, 5, 8, 10, "PSI_SMITH_01");
};

func void rtn_prepareritual_1351() {
};

func void rtn_omfull_1351() {
};

func void rtn_fmtaken_1351() {
};

func void rtn_orcassault_1351() {
};

instance nov_1353_novize(npc_default) {
    name = name_novize;
    npctype = npctype_ambient;
    guild = gil_nov;
    level = 3;
    flags = 0;
    voice = 3;
    id = 1353;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(nov_1353_novize, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1353_novize, "Humans_Relaxed.mds");
    mdl_setvisualbody(nov_1353_novize, "hum_body_Naked0", 1, 1, "Hum_Head_Psionic", 34, 1, nov_armor_l /*4138*/);
    b_scale(nov_1353_novize);
    mdl_setmodelfatness(nov_1353_novize, -1.0);
    fight_tactic = fai_human_coward;
    equipitem(nov_1353_novize, itmw_1h_hatchet_01 /*4383*/);
    daily_routine = rtn_start_1353;
};

func void rtn_start_1353() {
    ta_sleep(23, 0, 7, 30, "PSI_25_HUT_IN");
    ta_listen(7, 30, 23, 0, "PSI_PLATFORM_1");
};

instance nov_1354_novize(npc_default) {
    name = name_novize;
    npctype = npctype_ambient;
    guild = gil_nov;
    level = 3;
    flags = 0;
    voice = 5;
    id = 1354;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(nov_1354_novize, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1354_novize, "Humans_Relaxed.mds");
    mdl_setvisualbody(nov_1354_novize, "hum_body_Naked0", 1, 1, "Hum_Head_FatBald", 33, 2, nov_armor_l /*4138*/);
    b_scale(nov_1354_novize);
    mdl_setmodelfatness(nov_1354_novize, -1.0);
    fight_tactic = fai_human_coward;
    equipitem(nov_1354_novize, itmw_1h_hatchet_01 /*4383*/);
    daily_routine = rtn_start_1354;
};

func void rtn_start_1354() {
    ta_sleep(2, 0, 7, 35, "PSI_19_HUT_IN");
    ta_smalltalk(7, 35, 2, 0, "PSI_19_HUT_EX");
};

instance nov_1355_novize(npc_default) {
    name = name_novize;
    npctype = npctype_ambient;
    guild = gil_nov;
    level = 3;
    flags = 0;
    voice = 3;
    id = 1355;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(nov_1355_novize, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1355_novize, "Humans_Relaxed.mds");
    mdl_setvisualbody(nov_1355_novize, "hum_body_Naked0", 1, 1, "Hum_Head_FatBald", 28, 1, nov_armor_l /*4138*/);
    b_scale(nov_1355_novize);
    mdl_setmodelfatness(nov_1355_novize, 0.0);
    fight_tactic = fai_human_coward;
    equipitem(nov_1355_novize, itmw_1h_hatchet_01 /*4383*/);
    daily_routine = rtn_start_1355;
};

func void rtn_start_1355() {
    ta_sleep(2, 5, 7, 30, "PSI_19_HUT_IN");
    ta_smalltalk(7, 30, 2, 5, "PSI_TEACH_1");
};

instance nov_1356_shrat(npc_default) {
    name = "Øðåò";
    npctype = npctype_main;
    guild = gil_nov;
    level = 3;
    voice = 2;
    id = 1356;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 7;
    attribute[atr_mana] /*2*/ = 7;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(nov_1356_shrat, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1356_shrat, "Humans_Relaxed.mds");
    mdl_setvisualbody(nov_1356_shrat, "hum_body_Naked0", 1, 1, "Hum_Head_FatBald", 28, 1, nov_armor_l /*4138*/);
    b_scale(nov_1356_shrat);
    mdl_setmodelfatness(nov_1356_shrat, 0.0);
    fight_tactic = fai_human_strong;
    equipitem(nov_1356_shrat, itmw_1h_hatchet_01 /*4383*/);
    daily_routine = rtn_start_1356;
};

func void rtn_start_1356() {
    ta_sitcampfire(8, 0, 20, 0, "PATH_SWAMP_HUT");
    ta_sitcampfire(20, 0, 8, 0, "PATH_SWAMP_HUT");
};

func void rtn_follow_1356() {
    ta_followpc(23, 0, 16, 0, "PATH_SWAMP_HUT");
    ta_followpc(16, 0, 23, 0, "PATH_SWAMP_HUT");
};

instance nov_1357_fortuno(npc_default) {
    name = "Ôîðòóíî";
    npctype = npctype_main;
    guild = gil_nov;
    level = 9;
    voice = 5;
    id = 1357;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 148;
    attribute[atr_hitpoints] /*0*/ = 148;
    mdl_setvisual(nov_1357_fortuno, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1357_fortuno, "Humans_Mage.mds");
    mdl_setvisualbody(nov_1357_fortuno, "hum_body_Naked0", 1, 1, "Hum_Head_Bald", 27, 1, nov_armor_h /*4140*/);
    b_scale(nov_1357_fortuno);
    mdl_setmodelfatness(nov_1357_fortuno, -1.0);
    fight_tactic = fai_human_master;
    npc_settalentskill(nov_1357_fortuno, npc_talent_1h, 1);
    createinvitems(nov_1357_fortuno, itmijoint_1, 30);
    createinvitems(nov_1357_fortuno, itmijoint_2, 20);
    createinvitems(nov_1357_fortuno, itmijoint_3, 10);
    createinvitems(nov_1357_fortuno, itminugget, 237);
    equipitem(nov_1357_fortuno, fortunos_keule /*4979*/);
    daily_routine = rtn_start_1357;
};

func void rtn_start_1357() {
    ta_sleep(1, 0, 6, 0, "PSI_32_HUT_IN");
    ta_stand(6, 0, 1, 0, "PSI_HERB_SHOP");
};

instance nov_1358_harlok(npc_default) {
    name = "Õàðëîê";
    npctype = npctype_main;
    guild = gil_none;
    level = 3;
    voice = 1;
    id = 1358;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 7;
    attribute[atr_mana] /*2*/ = 7;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(nov_1358_harlok, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1358_harlok, "Humans_Relaxed.mds");
    mdl_setvisualbody(nov_1358_harlok, "hum_body_Naked0", 1, 1, "Hum_Head_Bald", 28, 1, nov_armor_l /*4138*/);
    b_scale(nov_1358_harlok);
    mdl_setmodelfatness(nov_1358_harlok, 0.0);
    fight_tactic = fai_human_strong;
    equipitem(nov_1358_harlok, itmw_1h_hatchet_01 /*4383*/);
    daily_routine = rtn_prestart_1358;
};

func void rtn_prestart_1358() {
    ta_smoke(8, 0, 20, 0, "PSI_31_HUT_EX");
    ta_smoke(20, 0, 8, 0, "PSI_31_HUT_EX");
};

func void rtn_start_1358() {
    ta_herbalchemy(6, 55, 23, 55, "PSI_HERB_PLACE_1");
    ta_herbalchemy(23, 55, 6, 55, "PSI_HERB_PLACE_1");
};

instance nov_1359_novize(npc_default) {
    name = name_madnovice;
    npctype = npctype_main;
    guild = gil_gur;
    level = 30;
    flags = 0;
    voice = 3;
    id = 1359;
    attribute[atr_strength] /*4*/ = 115;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 250;
    attribute[atr_hitpoints] /*0*/ = 250;
    protection[prot_blunt] /*1*/ = 500;
    protection[prot_edge] /*2*/ = 500;
    protection[prot_point] /*6*/ = 500;
    protection[prot_fire] /*3*/ = 80;
    protection[prot_fly] /*4*/ = 80;
    protection[prot_magic] /*5*/ = 50;
    mdl_setvisual(nov_1359_novize, "HUMANS.MDS");
    mdl_setvisualbody(nov_1359_novize, "hum_body_Naked0", 1, 1, "Hum_Head_FatBald", 117, 2, nov_armor_l /*4138*/);
    b_scale(nov_1359_novize);
    mdl_setmodelfatness(nov_1359_novize, 0.0);
    fight_tactic = fai_human_strong;
    createinvitem(nov_1359_novize, itmw_2h_staff_02);
    daily_routine = rtn_ot_1359;
};

func void rtn_start_1359() {
    ta_otmeditate(24, 0, 6, 0, "TPL_408");
    ta_otmeditate(6, 0, 24, 0, "TPL_408");
};

func void rtn_ot_1359() {
    ta_otmeditate(24, 0, 6, 0, "TPL_387");
    ta_otmeditate(6, 0, 24, 0, "TPL_387");
};

instance nov_1360_novize(npc_default) {
    name = name_madnovice;
    npctype = npctype_main;
    guild = gil_gur;
    level = 30;
    flags = 0;
    voice = 3;
    id = 1360;
    attribute[atr_strength] /*4*/ = 115;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 250;
    attribute[atr_hitpoints] /*0*/ = 250;
    protection[prot_blunt] /*1*/ = 1000;
    protection[prot_edge] /*2*/ = 1000;
    protection[prot_point] /*6*/ = 1000;
    protection[prot_fire] /*3*/ = 80;
    protection[prot_fly] /*4*/ = 80;
    protection[prot_magic] /*5*/ = 50;
    mdl_setvisual(nov_1360_novize, "HUMANS.MDS");
    mdl_setvisualbody(nov_1360_novize, "hum_body_Naked0", 1, 1, "Hum_Head_FatBald", 117, 3, nov_armor_l /*4138*/);
    b_scale(nov_1360_novize);
    mdl_setmodelfatness(nov_1360_novize, 0.0);
    fight_tactic = fai_human_strong;
    createinvitem(nov_1360_novize, itmw_2h_staff_02);
    daily_routine = rtn_ot_1360;
};

func void rtn_start_1360() {
    ta_meditate(24, 0, 6, 0, "TPL_408");
    ta_meditate(6, 0, 24, 0, "TPL_408");
};

func void rtn_ot_1360() {
    ta_otmeditate(24, 0, 6, 0, "TPL_387");
    ta_otmeditate(6, 0, 24, 0, "TPL_387");
};

instance nov_1361_novize(npc_default) {
    name = name_madnovice;
    npctype = npctype_main;
    guild = gil_gur;
    level = 30;
    flags = 0;
    voice = 3;
    id = 1361;
    attribute[atr_strength] /*4*/ = 115;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 250;
    attribute[atr_hitpoints] /*0*/ = 250;
    protection[prot_blunt] /*1*/ = 1000;
    protection[prot_edge] /*2*/ = 1000;
    protection[prot_point] /*6*/ = 1000;
    protection[prot_fire] /*3*/ = 80;
    protection[prot_fly] /*4*/ = 80;
    protection[prot_magic] /*5*/ = 50;
    mdl_setvisual(nov_1361_novize, "HUMANS.MDS");
    mdl_setvisualbody(nov_1361_novize, "hum_body_Naked0", 1, 1, "Hum_Head_FatBald", 117, 3, nov_armor_l /*4138*/);
    b_scale(nov_1361_novize);
    mdl_setmodelfatness(nov_1361_novize, 0.0);
    fight_tactic = fai_human_strong;
    createinvitem(nov_1361_novize, itmw_2h_staff_02);
    daily_routine = rtn_ot_1361;
};

func void rtn_start_1361() {
    ta_meditate(24, 0, 6, 0, "TPL_408");
    ta_meditate(6, 0, 24, 0, "TPL_408");
};

func void rtn_ot_1361() {
    ta_otmeditate(24, 0, 6, 0, "TPL_387");
    ta_otmeditate(6, 0, 24, 0, "TPL_387");
};

instance nov_1362_novize(npc_default) {
    name = name_madnovice;
    npctype = npctype_main;
    guild = gil_gur;
    level = 30;
    flags = 0;
    voice = 3;
    id = 1362;
    attribute[atr_strength] /*4*/ = 115;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 250;
    attribute[atr_hitpoints] /*0*/ = 250;
    protection[prot_blunt] /*1*/ = 1000;
    protection[prot_edge] /*2*/ = 1000;
    protection[prot_point] /*6*/ = 1000;
    protection[prot_fire] /*3*/ = 80;
    protection[prot_fly] /*4*/ = 80;
    protection[prot_magic] /*5*/ = 50;
    mdl_setvisual(nov_1362_novize, "HUMANS.MDS");
    mdl_setvisualbody(nov_1362_novize, "hum_body_Naked0", 1, 1, "Hum_Head_FatBald", 117, 3, nov_armor_l /*4138*/);
    b_scale(nov_1362_novize);
    mdl_setmodelfatness(nov_1362_novize, 0.0);
    fight_tactic = fai_human_strong;
    createinvitem(nov_1362_novize, itmw_2h_staff_02);
    daily_routine = rtn_ot_1362;
};

func void rtn_start_1362() {
    ta_meditate(24, 0, 6, 0, "TPL_408");
    ta_meditate(6, 0, 24, 0, "TPL_408");
};

func void rtn_ot_1362() {
    ta_otmeditate(24, 0, 6, 0, "TPL_390");
    ta_otmeditate(6, 0, 24, 0, "TPL_390");
};

instance nov_1363_novize(npc_default) {
    name = name_madnovice;
    npctype = npctype_main;
    guild = gil_gur;
    level = 30;
    flags = 0;
    voice = 3;
    id = 1363;
    attribute[atr_strength] /*4*/ = 115;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 250;
    attribute[atr_hitpoints] /*0*/ = 250;
    protection[prot_blunt] /*1*/ = 1000;
    protection[prot_edge] /*2*/ = 1000;
    protection[prot_point] /*6*/ = 1000;
    protection[prot_fire] /*3*/ = 80;
    protection[prot_fly] /*4*/ = 80;
    protection[prot_magic] /*5*/ = 50;
    mdl_setvisual(nov_1363_novize, "HUMANS.MDS");
    mdl_setvisualbody(nov_1363_novize, "hum_body_Naked0", 1, 1, "Hum_Head_FatBald", 117, 3, nov_armor_l /*4138*/);
    b_scale(nov_1363_novize);
    mdl_setmodelfatness(nov_1363_novize, 0.0);
    fight_tactic = fai_human_strong;
    createinvitem(nov_1363_novize, itmw_2h_staff_02);
    daily_routine = rtn_ot_1363;
};

func void rtn_start_1363() {
    ta_meditate(24, 0, 6, 0, "TPL_408");
    ta_meditate(6, 0, 24, 0, "TPL_408");
};

func void rtn_ot_1363() {
    ta_otmeditate(24, 0, 6, 0, "TPL_390");
    ta_otmeditate(6, 0, 24, 0, "TPL_390");
};

instance nov_1364_novize(npc_default) {
    name = name_madnovice;
    npctype = npctype_main;
    guild = gil_gur;
    level = 30;
    flags = 0;
    voice = 3;
    id = 1364;
    attribute[atr_strength] /*4*/ = 115;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 250;
    attribute[atr_hitpoints] /*0*/ = 250;
    protection[prot_blunt] /*1*/ = 1000;
    protection[prot_edge] /*2*/ = 1000;
    protection[prot_point] /*6*/ = 1000;
    protection[prot_fire] /*3*/ = 80;
    protection[prot_fly] /*4*/ = 80;
    protection[prot_magic] /*5*/ = 50;
    mdl_setvisual(nov_1364_novize, "HUMANS.MDS");
    mdl_setvisualbody(nov_1364_novize, "hum_body_Naked0", 1, 1, "Hum_Head_FatBald", 117, 3, nov_armor_l /*4138*/);
    b_scale(nov_1364_novize);
    mdl_setmodelfatness(nov_1364_novize, 0.0);
    fight_tactic = fai_human_strong;
    createinvitem(nov_1364_novize, itmw_2h_staff_02);
    daily_routine = rtn_ot_1364;
};

func void rtn_start_1364() {
    ta_meditate(24, 0, 6, 0, "TPL_408");
    ta_meditate(6, 0, 24, 0, "TPL_408");
};

func void rtn_ot_1364() {
    ta_otmeditate(24, 0, 6, 0, "TPL_390");
    ta_otmeditate(6, 0, 24, 0, "TPL_390");
};

instance nov_1365_novize(npc_default) {
    name = name_madnovice;
    npctype = npctype_main;
    guild = gil_gur;
    level = 30;
    flags = 0;
    voice = 3;
    id = 1365;
    attribute[atr_strength] /*4*/ = 115;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 250;
    attribute[atr_hitpoints] /*0*/ = 250;
    protection[prot_blunt] /*1*/ = 1000;
    protection[prot_edge] /*2*/ = 1000;
    protection[prot_point] /*6*/ = 1000;
    protection[prot_fire] /*3*/ = 80;
    protection[prot_fly] /*4*/ = 80;
    protection[prot_magic] /*5*/ = 50;
    mdl_setvisual(nov_1365_novize, "HUMANS.MDS");
    mdl_setvisualbody(nov_1365_novize, "hum_body_Naked0", 1, 1, "Hum_Head_FatBald", 117, 2, nov_armor_l /*4138*/);
    b_scale(nov_1365_novize);
    mdl_setmodelfatness(nov_1365_novize, 0.0);
    fight_tactic = fai_human_strong;
    createinvitem(nov_1365_novize, itmw_2h_staff_02);
    daily_routine = rtn_ot_1365;
};

func void rtn_start_1365() {
    ta_meditate(24, 0, 6, 0, "TPL_408");
    ta_meditate(6, 0, 24, 0, "TPL_408");
};

func void rtn_ot_1365() {
    ta_otmeditate(24, 0, 6, 0, "TPL_390");
    ta_otmeditate(6, 0, 24, 0, "TPL_390");
};

instance nov_1366_novize(npc_default) {
    name = name_madnovice;
    npctype = npctype_main;
    guild = gil_gur;
    level = 30;
    flags = 0;
    voice = 3;
    id = 1366;
    attribute[atr_strength] /*4*/ = 115;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 250;
    attribute[atr_hitpoints] /*0*/ = 250;
    protection[prot_blunt] /*1*/ = 1000;
    protection[prot_edge] /*2*/ = 1000;
    protection[prot_point] /*6*/ = 1000;
    protection[prot_fire] /*3*/ = 80;
    protection[prot_fly] /*4*/ = 80;
    protection[prot_magic] /*5*/ = 50;
    mdl_setvisual(nov_1366_novize, "HUMANS.MDS");
    mdl_setvisualbody(nov_1366_novize, "hum_body_Naked0", 1, 1, "Hum_Head_FatBald", 117, 3, nov_armor_l /*4138*/);
    b_scale(nov_1366_novize);
    mdl_setmodelfatness(nov_1366_novize, 0.0);
    fight_tactic = fai_human_strong;
    createinvitem(nov_1366_novize, itmw_2h_staff_02);
    daily_routine = rtn_ot_1366;
};

func void rtn_start_1366() {
    ta_meditate(24, 0, 6, 0, "TPL_408");
    ta_meditate(6, 0, 24, 0, "TPL_408");
};

func void rtn_ot_1366() {
    ta_otmeditate(24, 0, 6, 0, "TPL_388");
    ta_otmeditate(6, 0, 24, 0, "TPL_388");
};

instance nov_1367_novize(npc_default) {
    name = name_madnovice;
    npctype = npctype_main;
    guild = gil_gur;
    level = 30;
    flags = 0;
    voice = 3;
    id = 1367;
    attribute[atr_strength] /*4*/ = 115;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 250;
    attribute[atr_hitpoints] /*0*/ = 250;
    protection[prot_blunt] /*1*/ = 1000;
    protection[prot_edge] /*2*/ = 1000;
    protection[prot_point] /*6*/ = 1000;
    protection[prot_fire] /*3*/ = 80;
    protection[prot_fly] /*4*/ = 80;
    protection[prot_magic] /*5*/ = 50;
    mdl_setvisual(nov_1367_novize, "HUMANS.MDS");
    mdl_setvisualbody(nov_1367_novize, "hum_body_Naked0", 1, 1, "Hum_Head_FatBald", 117, 3, nov_armor_l /*4138*/);
    b_scale(nov_1367_novize);
    mdl_setmodelfatness(nov_1367_novize, 0.0);
    fight_tactic = fai_human_strong;
    createinvitem(nov_1367_novize, itmw_2h_staff_02);
    daily_routine = rtn_ot_1367;
};

func void rtn_start_1367() {
    ta_meditate(24, 0, 6, 0, "TPL_408");
    ta_meditate(6, 0, 24, 0, "TPL_408");
};

func void rtn_ot_1367() {
    ta_otmeditate(24, 0, 6, 0, "TPL_388");
    ta_otmeditate(6, 0, 24, 0, "TPL_388");
};

instance nov_1368_novize(npc_default) {
    name = name_madnovice;
    npctype = npctype_main;
    guild = gil_gur;
    level = 30;
    flags = 0;
    voice = 3;
    id = 1368;
    attribute[atr_strength] /*4*/ = 115;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 250;
    attribute[atr_hitpoints] /*0*/ = 250;
    protection[prot_blunt] /*1*/ = 1000;
    protection[prot_edge] /*2*/ = 1000;
    protection[prot_point] /*6*/ = 1000;
    protection[prot_fire] /*3*/ = 80;
    protection[prot_fly] /*4*/ = 80;
    protection[prot_magic] /*5*/ = 50;
    mdl_setvisual(nov_1368_novize, "HUMANS.MDS");
    mdl_setvisualbody(nov_1368_novize, "hum_body_Naked0", 1, 1, "Hum_Head_FatBald", 117, 3, nov_armor_l /*4138*/);
    b_scale(nov_1368_novize);
    mdl_setmodelfatness(nov_1368_novize, 0.0);
    fight_tactic = fai_human_strong;
    createinvitem(nov_1368_novize, itmw_2h_staff_02);
    daily_routine = rtn_ot_1368;
};

func void rtn_start_1368() {
    ta_meditate(24, 0, 6, 0, "TPL_408");
    ta_meditate(6, 0, 24, 0, "TPL_408");
};

func void rtn_ot_1368() {
    ta_otmeditate(24, 0, 6, 0, "TPL_386");
    ta_otmeditate(6, 0, 24, 0, "TPL_386");
};

instance nov_1369_novize(npc_default) {
    name = name_madnovice;
    npctype = npctype_main;
    guild = gil_gur;
    level = 30;
    flags = 0;
    voice = 3;
    id = 1369;
    attribute[atr_strength] /*4*/ = 115;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 250;
    attribute[atr_hitpoints] /*0*/ = 250;
    protection[prot_blunt] /*1*/ = 1000;
    protection[prot_edge] /*2*/ = 1000;
    protection[prot_point] /*6*/ = 1000;
    protection[prot_fire] /*3*/ = 80;
    protection[prot_fly] /*4*/ = 80;
    protection[prot_magic] /*5*/ = 50;
    mdl_setvisual(nov_1369_novize, "HUMANS.MDS");
    mdl_setvisualbody(nov_1369_novize, "hum_body_Naked0", 1, 1, "Hum_Head_FatBald", 117, 2, nov_armor_l /*4138*/);
    b_scale(nov_1369_novize);
    mdl_setmodelfatness(nov_1369_novize, 0.0);
    fight_tactic = fai_human_strong;
    createinvitem(nov_1369_novize, itmw_2h_staff_02);
    daily_routine = rtn_ot_1369;
};

func void rtn_start_1369() {
    ta_meditate(24, 0, 6, 0, "TPL_408");
    ta_meditate(6, 0, 24, 0, "TPL_408");
};

func void rtn_ot_1369() {
    ta_otmeditate(24, 0, 6, 0, "TPL_386");
    ta_otmeditate(6, 0, 24, 0, "TPL_386");
};

instance nov_1370_novize(npc_default) {
    name = name_madnovice;
    npctype = npctype_main;
    guild = gil_gur;
    level = 30;
    flags = 0;
    voice = 3;
    id = 1370;
    attribute[atr_strength] /*4*/ = 115;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 250;
    attribute[atr_hitpoints] /*0*/ = 250;
    protection[prot_blunt] /*1*/ = 1000;
    protection[prot_edge] /*2*/ = 1000;
    protection[prot_point] /*6*/ = 1000;
    protection[prot_fire] /*3*/ = 80;
    protection[prot_fly] /*4*/ = 80;
    protection[prot_magic] /*5*/ = 50;
    mdl_setvisual(nov_1370_novize, "HUMANS.MDS");
    mdl_setvisualbody(nov_1370_novize, "hum_body_Naked0", 1, 1, "Hum_Head_FatBald", 117, 3, nov_armor_l /*4138*/);
    b_scale(nov_1370_novize);
    mdl_setmodelfatness(nov_1370_novize, 0.0);
    fight_tactic = fai_human_strong;
    createinvitem(nov_1370_novize, itmw_2h_staff_02);
    daily_routine = rtn_ot_1370;
};

func void rtn_start_1370() {
    ta_otmeditate(24, 0, 6, 0, "TPL_408");
    ta_otmeditate(6, 0, 24, 0, "TPL_408");
};

func void rtn_ot_1370() {
    ta_meditate(24, 0, 6, 0, "TPL_386");
    ta_meditate(6, 0, 24, 0, "TPL_386");
};

instance nov_1371_baalnetbek(npc_default) {
    name = "Èäîë Íåòáåê";
    npctype = npctype_main;
    guild = gil_nov;
    level = 3;
    flags = 0;
    voice = 3;
    id = 1371;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(nov_1371_baalnetbek, "HUMANS.MDS");
    mdl_applyoverlaymds(nov_1371_baalnetbek, "Humans_Relaxed.mds");
    mdl_setvisualbody(nov_1371_baalnetbek, "hum_body_Naked0", 1, 1, "Hum_Head_FatBald", 101, 1, nov_armor_l /*4138*/);
    b_scale(nov_1371_baalnetbek);
    mdl_setmodelfatness(nov_1371_baalnetbek, 3.0);
    fight_tactic = fai_human_strong;
    createinvitem(nov_1371_baalnetbek, itmw_1h_hatchet_01);
    daily_routine = rtn_start_1371;
};

func void rtn_start_1371() {
    ta_stay(24, 0, 6, 0, "PATH_TAKE_HERB_08");
    ta_stay(6, 0, 24, 0, "PATH_TAKE_HERB_08");
};

func void b_situp() {
    if (self.attribute[atr_hitpoints] /*0*/ < 20) {
        ai_playanibs(self, "T_GUARDSLEEP_2_GUARDSIT", bs_sit);
        ai_wait(self, 1.0);
    };
    if (npc_canseenpc(self, other)) {
        ai_startstate(self, zs_talk, 0, "");
    }
    else {
        b_sayoverlay(other, self, "$SC_HEYTURNAROUND");
        ai_startstate(self, zs_talk, 1, "");
    };
};

func void b_awakesit() {
    ai_playanibs(self, "T_GUARDSIT_2_STAND", bs_stand);
    ai_wait(self, 1.0);
    if (npc_getdisttonpc(other, self) < 120) {
        ai_dodge(self);
    };
    ai_startstate(self, zs_talk, 1, "");
};

func void zs_waitforrescue() {
    if (!knows_getulumulu) {
        self.attribute[atr_hitpoints] /*0*/ = 10;
    };
    npc_percenable(self, perc_assessmagic, b_assessmagic);
    npc_percenable(self, perc_assesstalk, b_situp);
    printdebugnpc(pd_zs_frame, "WaitForRescue");
    if (!c_bodystatecontains(self, bs_sit)) {
        printdebugnpc(pd_zs_frame, "ZS_WaitForRescue: sitzt nicht....");
        npc_clearaiqueue(self);
        ai_setwalkmode(self, npc_walk);
        ai_gotowp(self, self.wp);
        ai_aligntowp(self);
        ai_playanibs(self, "T_STAND_2_GUARDSIT", bs_sit);
    };
    if (self.attribute[atr_hitpoints] /*0*/ < 20) {
        ai_playanibs(self, "T_GUARDSIT_2_GUARDSLEEP", bs_sit);
    };
};

func void zs_waitforrescue_loop() {
    printdebugnpc(pd_zs_frame, "ZS_WaitForRescue_Loop");
};

func void zs_waitforrescue_end() {
    printdebugnpc(pd_zs_frame, "ZS_WaitForRescue_End");
    npc_clearaiqueue(self);
    ai_playanibs(self, "T_GUARDSIT_2_STAND", bs_stand);
};

instance freemineorc(c_npc) {
    name = "Ðàá îðêîâ";
    guild = gil_orcslave;
    level = 3;
    flags = npc_flag_immortal;
    voice = 17;
    id = 2101;
    attribute[atr_strength] /*4*/ = 90;
    attribute[atr_dexterity] /*5*/ = 20;
    attribute[atr_hitpoints_max] /*1*/ = 250;
    attribute[atr_hitpoints] /*0*/ = 10;
    protection[prot_edge] /*2*/ = 15;
    protection[prot_blunt] /*1*/ = 15;
    protection[prot_point] /*6*/ = 5;
    protection[prot_fire] /*3*/ = 7;
    protection[prot_magic] /*5*/ = 0;
    mdl_setvisual(freemineorc, "orc.mds");
    mdl_setvisualbody(freemineorc, "Orc_BodySlave", default, default, "Orc_HeadSlave", default, default, -1);
    fight_tactic = fai_orc;
    senses_range = 2000;
    daily_routine = rtn_fmstart_2101;
};

func void rtn_fmstart_2101() {
    ta_waitforrescue(23, 0, 12, 0, "FM_RESCUE");
    ta_waitforrescue(12, 0, 23, 0, "FM_RESCUE");
};

instance orc_priest_1(npc_default) {
    name = "Âàððàã-Õàøîð";
    npctype = npctype_main;
    guild = gil_orcshaman;
    level = 800;
    voice = 17;
    id = 2995;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 100;
    attribute[atr_mana] /*2*/ = 100;
    attribute[atr_hitpoints_max] /*1*/ = 1000;
    attribute[atr_hitpoints] /*0*/ = 1000;
    protection[prot_blunt] /*1*/ = 50;
    protection[prot_edge] /*2*/ = 50;
    protection[prot_point] /*6*/ = 25;
    protection[prot_fire] /*3*/ = 25;
    protection[prot_fly] /*4*/ = 50;
    protection[prot_magic] /*5*/ = 0;
    mdl_setvisual(orc_priest_1, "Orc.mds");
    mdl_setvisualbody(orc_priest_1, "UOS_Body", default, default, "", default, default, -1);
    b_scale(orc_priest_1);
    mdl_setmodelfatness(orc_priest_1, 0.0);
    aivar[40] = true;
    fight_tactic = fai_human_mage;
    senses = (sense_see | sense_hear) | sense_smell;
    npc_settalentskill(orc_priest_1, npc_talent_mage, 6);
    createinvitem(orc_priest_1, itrworcstaff);
    createinvitem(orc_priest_1, weltenspalter);
    createinvitem(orc_priest_1, itarrunepyrokinesis);
    daily_routine = rtn_prestart_2995;
};

func void rtn_prestart_2995() {
    ta_intercept(7, 0, 12, 0, "TPL_058");
    ta_intercept(12, 0, 7, 0, "TPL_058");
};

instance orc_priest_2(npc_default) {
    name = "Âàððàã-Êàñîðã";
    npctype = npctype_main;
    guild = gil_orcshaman;
    level = 800;
    voice = 17;
    id = 2996;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 100;
    attribute[atr_mana] /*2*/ = 100;
    attribute[atr_hitpoints_max] /*1*/ = 1000;
    attribute[atr_hitpoints] /*0*/ = 1000;
    protection[prot_blunt] /*1*/ = 50;
    protection[prot_edge] /*2*/ = 50;
    protection[prot_point] /*6*/ = 25;
    protection[prot_fire] /*3*/ = 25;
    protection[prot_fly] /*4*/ = 0;
    protection[prot_magic] /*5*/ = 1000;
    mdl_setvisual(orc_priest_2, "Orc.mds");
    mdl_setvisualbody(orc_priest_2, "UOS_Body", default, default, "", default, default, -1);
    b_scale(orc_priest_2);
    mdl_setmodelfatness(orc_priest_2, 0.0);
    aivar[40] = true;
    fight_tactic = fai_human_mage;
    senses = (sense_see | sense_hear) | sense_smell;
    npc_settalentskill(orc_priest_2, npc_talent_mage, 6);
    createinvitem(orc_priest_2, itrwudorcstaff);
    createinvitem(orc_priest_2, lichtbringer);
    createinvitem(orc_priest_2, itarrunethunderball);
    daily_routine = rtn_prestart_2996;
};

func void rtn_prestart_2996() {
    ta_intercept(7, 0, 12, 0, "TPL_096");
    ta_intercept(12, 0, 7, 0, "TPL_096");
};

instance orc_priest_3(npc_default) {
    name = "Âàððàã-Óíõèëüêò";
    npctype = npctype_main;
    guild = gil_orcshaman;
    level = 800;
    voice = 17;
    id = info_mine_grd_7_dielage /*2997*/;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 100;
    attribute[atr_mana] /*2*/ = 100;
    attribute[atr_hitpoints_max] /*1*/ = 1000;
    attribute[atr_hitpoints] /*0*/ = 1000;
    protection[prot_blunt] /*1*/ = 50;
    protection[prot_edge] /*2*/ = 50;
    protection[prot_point] /*6*/ = 25;
    protection[prot_fire] /*3*/ = 25;
    protection[prot_fly] /*4*/ = 0;
    protection[prot_magic] /*5*/ = 1000;
    mdl_setvisual(orc_priest_3, "Orc.mds");
    mdl_setvisualbody(orc_priest_3, "UOS_Body", default, default, "", default, default, -1);
    b_scale(orc_priest_3);
    mdl_setmodelfatness(orc_priest_3, 0.0);
    aivar[40] = true;
    fight_tactic = fai_human_mage;
    senses = (sense_see | sense_hear) | sense_smell;
    npc_settalentskill(orc_priest_3, npc_talent_mage, 6);
    createinvitem(orc_priest_3, itrwudorcstaff);
    createinvitem(orc_priest_3, zeitenklinge);
    createinvitem(orc_priest_3, itarrunechainlightning);
    daily_routine = rtn_prestart_2997;
};

func void rtn_prestart_2997() {
    ta_intercept(7, 0, 12, 0, "TPL_124");
    ta_intercept(12, 0, 7, 0, "TPL_124");
};

instance orc_priest_4(npc_default) {
    name = "Âàððàã-Ðóóøê";
    npctype = npctype_main;
    guild = gil_orcshaman;
    level = 800;
    voice = 17;
    id = 2998;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 100;
    attribute[atr_mana] /*2*/ = 100;
    attribute[atr_hitpoints_max] /*1*/ = 1000;
    attribute[atr_hitpoints] /*0*/ = 1000;
    protection[prot_blunt] /*1*/ = 50;
    protection[prot_edge] /*2*/ = 50;
    protection[prot_point] /*6*/ = 25;
    protection[prot_fire] /*3*/ = 1000;
    protection[prot_fly] /*4*/ = 0;
    protection[prot_magic] /*5*/ = 0;
    mdl_setvisual(orc_priest_4, "Orc.mds");
    mdl_setvisualbody(orc_priest_4, "UOS_Body", default, default, "", default, default, -1);
    b_scale(orc_priest_4);
    mdl_setmodelfatness(orc_priest_4, 0.0);
    aivar[40] = true;
    fight_tactic = fai_human_mage;
    senses = (sense_see | sense_hear) | sense_smell;
    senses_range = 1000;
    npc_settalentskill(orc_priest_4, npc_talent_mage, 6);
    createinvitem(orc_priest_4, itrwudorcstaff);
    createinvitem(orc_priest_4, daemonenstreich);
    createinvitem(orc_priest_4, itarrunefirestorm);
    daily_routine = rtn_prestart_2998;
};

func void rtn_prestart_2998() {
    ta_intercept(7, 0, 12, 0, "TPL_193");
    ta_intercept(12, 0, 7, 0, "TPL_193");
};

instance orc_priest_5(npc_default) {
    name = "Ãðàø-Âàððàã-Àðóøàò";
    npctype = npctype_friend;
    guild = gil_orcshaman;
    level = 1000;
    voice = 17;
    id = 2999;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 500;
    attribute[atr_mana] /*2*/ = 500;
    attribute[atr_hitpoints_max] /*1*/ = 300;
    attribute[atr_hitpoints] /*0*/ = 300;
    protection[prot_blunt] /*1*/ = 1000;
    protection[prot_edge] /*2*/ = 1000;
    protection[prot_point] /*6*/ = 1000;
    protection[prot_fire] /*3*/ = 1000;
    protection[prot_fly] /*4*/ = 1000;
    protection[prot_magic] /*5*/ = 100;
    mdl_setvisual(orc_priest_5, "Orc.mds");
    mdl_setvisualbody(orc_priest_5, "UOS_Body", default, default, "", default, default, -1);
    b_scale(orc_priest_5);
    mdl_setmodelfatness(orc_priest_5, 0.0);
    aivar[37] = true;
    aivar[40] = true;
    fight_tactic = fai_human_mage;
    senses = (sense_see | sense_hear) | sense_smell;
    npc_settalentskill(orc_priest_5, npc_talent_mage, 6);
    createinvitem(orc_priest_5, itrwudorcstaff);
    createinvitem(orc_priest_5, bannklinge);
    createinvitem(orc_priest_5, itarrunebreathofdeath);
    daily_routine = rtn_prestart_2999;
};

func void rtn_prestart_2999() {
    ta_intercept(7, 0, 12, 0, "TPL_300");
    ta_intercept(12, 0, 7, 0, "TPL_300");
};

instance orc_2200_shaman(mst_default_orcshaman) {
    npctype = npctype_friend;
    guild = gil_none;
    level = 25;
    flags = npc_flag_immortal;
    voice = 17;
    id = 2200;
    attribute[atr_strength] /*4*/ = 75;
    attribute[atr_dexterity] /*5*/ = 75;
    attribute[atr_mana_max] /*3*/ = 100;
    attribute[atr_mana] /*2*/ = 100;
    attribute[atr_hitpoints_max] /*1*/ = 400;
    attribute[atr_hitpoints] /*0*/ = 400;
    protection[prot_blunt] /*1*/ = 90;
    protection[prot_edge] /*2*/ = 90;
    protection[prot_point] /*6*/ = 90;
    protection[prot_fire] /*3*/ = 25;
    protection[prot_fly] /*4*/ = 90;
    protection[prot_magic] /*5*/ = 0;
    mdl_setvisual(orc_2200_shaman, "Orc.mds");
    mdl_setvisualbody(orc_2200_shaman, "Orc_BodyShaman", default, default, "Orc_HeadShaman", default, default, -1);
    b_scale(orc_2200_shaman);
    mdl_setmodelfatness(orc_2200_shaman, 0.0);
    fight_tactic = fai_human_mage;
    senses = (sense_see | sense_hear) | sense_smell;
    npc_settalentskill(orc_2200_shaman, npc_talent_mage, 6);
    createinvitem(orc_2200_shaman, itarrunefireball);
    equipitem(orc_2200_shaman, itrworcstaff /*4458*/);
    daily_routine = rtn_fmtaken_2200;
};

func void rtn_fmtaken_2200() {
    ta_stay(7, 0, 12, 0, "CASTLE_06");
    ta_stay(12, 0, 7, 0, "CASTLE_06");
};

func void rtn_leftfm_2200() {
    ta_stay(7, 0, 12, 0, "SPAWN_OW_WARAN_ORC_01");
    ta_stay(12, 0, 7, 0, "SPAWN_OW_WARAN_ORC_01");
};

instance orc_2001_sklave(npc_default) {
    name = "Ðàá îðêîâ";
    slot = "Orc Slave";
    guild = gil_orcslave;
    level = 3;
    flags = 0;
    voice = 17;
    id = 2001;
    attribute[atr_strength] /*4*/ = 90;
    attribute[atr_dexterity] /*5*/ = 20;
    attribute[atr_hitpoints_max] /*1*/ = 250;
    attribute[atr_hitpoints] /*0*/ = 250;
    protection[prot_edge] /*2*/ = 15;
    protection[prot_blunt] /*1*/ = 15;
    protection[prot_point] /*6*/ = 5;
    protection[prot_fire] /*3*/ = 7;
    protection[prot_magic] /*5*/ = 0;
    mdl_setvisual(orc_2001_sklave, "orc.mds");
    mdl_setvisualbody(orc_2001_sklave, "Orc_BodySlave", default, default, "Orc_HeadSlave", default, default, -1);
    fight_tactic = fai_orc;
    senses_range = 2000;
    daily_routine = rtn_nothing_2001;
};

func void rtn_nothing_2001() {
    ta_orc_sitonfloor(0, 0, 12, 0, "OM_CAVE3_15");
    ta_orc_sitonfloor(12, 0, 0, 0, "OM_CAVE3_15");
};

func void rtn_stomper_2001() {
    ta_orc_stomper(0, 0, 12, 0, "OM_CAVE3_15");
    ta_orc_stomper(12, 0, 0, 0, "OM_CAVE3_15");
};

instance orc_2002_sklave(npc_default) {
    name = "Ðàá îðêîâ";
    slot = "Orc Slave";
    guild = gil_orcslave;
    level = 3;
    flags = 0;
    voice = 17;
    id = 2002;
    attribute[atr_strength] /*4*/ = 85;
    attribute[atr_dexterity] /*5*/ = 20;
    attribute[atr_hitpoints_max] /*1*/ = 250;
    attribute[atr_hitpoints] /*0*/ = 250;
    protection[prot_edge] /*2*/ = 15;
    protection[prot_blunt] /*1*/ = 15;
    protection[prot_point] /*6*/ = 5;
    protection[prot_fire] /*3*/ = 7;
    protection[prot_magic] /*5*/ = 0;
    mdl_setvisual(orc_2002_sklave, "orc.mds");
    mdl_setvisualbody(orc_2002_sklave, "Orc_BodySlave", default, default, "Orc_HeadSlave", default, default, -1);
    fight_tactic = fai_orc;
    senses_range = 2000;
    daily_routine = rtn_stonemill_2002;
};

func void rtn_stonemill_2002() {
    ta_orc_stonemill(0, 0, 12, 0, "OM_CAVE1_BELLOWS");
    ta_orc_stonemill(12, 0, 0, 0, "OM_CAVE1_BELLOWS");
};

instance org_800_organisator(npc_default) {
    name = name_organisator;
    npctype = npctype_ambient;
    guild = gil_org;
    level = 15;
    voice = 13;
    id = 800;
    attribute[atr_strength] /*4*/ = 80;
    attribute[atr_dexterity] /*5*/ = 60;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 220;
    attribute[atr_hitpoints] /*0*/ = 220;
    mdl_setvisual(org_800_organisator, "HUMANS.MDS");
    mdl_applyoverlaymds(org_800_organisator, "Humans_Relaxed.mds");
    mdl_setvisualbody(org_800_organisator, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 35, 2, org_armor_h /*4134*/);
    b_scale(org_800_organisator);
    mdl_setmodelfatness(org_800_organisator, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_800_organisator, npc_talent_bow, 1);
    npc_settalentskill(org_800_organisator, npc_talent_1h, 2);
    createinvitem(org_800_organisator, itmi_stuff_plate_01);
    createinvitem(org_800_organisator, itmi_stuff_cup_01);
    createinvitem(org_800_organisator, itfomutton);
    createinvitem(org_800_organisator, itfoloaf);
    createinvitem(org_800_organisator, itat_claws_01);
    createinvitems(org_800_organisator, itkelockpick, 3);
    createinvitems(org_800_organisator, itminugget, 18);
    createinvitems(org_800_organisator, itforice, 8);
    createinvitems(org_800_organisator, itfobooze, 3);
    createinvitems(org_800_organisator, itlstorch, 2);
    createinvitems(org_800_organisator, itfo_potion_health_01, 2);
    createinvitems(org_800_organisator, itamarrow, 20);
    equipitem(org_800_organisator, itmw_1h_mace_war_02 /*4407*/);
    equipitem(org_800_organisator, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_800;
};

func void rtn_start_800() {
    ta_sleep(0, 30, 8, 0, "NC_HUT26_IN");
    ta_sitcampfire(8, 0, 0, 30, "NC_PATH17_MOVEMENT");
};

instance org_801_lares(npc_default) {
    name = "Ëàðñ";
    npctype = npctype_main;
    guild = gil_org;
    level = 15;
    voice = 11;
    id = 801;
    attribute[atr_strength] /*4*/ = 80;
    attribute[atr_dexterity] /*5*/ = 60;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 220;
    attribute[atr_hitpoints] /*0*/ = 220;
    mdl_setvisual(org_801_lares, "HUMANS.MDS");
    mdl_applyoverlaymds(org_801_lares, "Humans_Relaxed.mds");
    mdl_setvisualbody(org_801_lares, "hum_body_Naked0", 0, 1, "Hum_Head_Pony", 87, 4, org_armor_h /*4134*/);
    b_scale(org_801_lares);
    mdl_setmodelfatness(org_801_lares, 0.0);
    aivar[42] = true;
    fight_tactic = fai_human_master;
    npc_settalentskill(org_801_lares, npc_talent_bow, 1);
    npc_settalentskill(org_801_lares, npc_talent_1h, 2);
    createinvitem(org_801_lares, itmi_stuff_plate_01);
    createinvitem(org_801_lares, itmi_stuff_cup_01);
    createinvitem(org_801_lares, itfomutton);
    createinvitem(org_801_lares, itfoloaf);
    createinvitem(org_801_lares, itat_teeth_01);
    createinvitems(org_801_lares, itkelockpick, 3);
    createinvitems(org_801_lares, itminugget, 18);
    createinvitems(org_801_lares, itforice, 8);
    createinvitems(org_801_lares, itfobooze, 3);
    createinvitems(org_801_lares, itlstorch, 2);
    createinvitems(org_801_lares, itfo_potion_health_01, 3);
    createinvitems(org_801_lares, itamarrow, 20);
    equipitem(org_801_lares, lares_axt /*4985*/);
    equipitem(org_801_lares, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_801;
};

func void rtn_start_801() {
    ta_sleep(1, 0, 7, 0, "NC_HUT22_IN");
    ta_standaround(7, 0, 1, 0, "NC_HUT22_IN_MOVEMENT2");
};

instance org_804_organisator(npc_default) {
    name = name_organisator;
    npctype = npctype_main;
    guild = gil_org;
    level = 15;
    voice = 6;
    id = 804;
    attribute[atr_strength] /*4*/ = 80;
    attribute[atr_dexterity] /*5*/ = 60;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 220;
    attribute[atr_hitpoints] /*0*/ = 220;
    mdl_setvisual(org_804_organisator, "HUMANS.MDS");
    mdl_applyoverlaymds(org_804_organisator, "Humans_Relaxed.mds");
    mdl_setvisualbody(org_804_organisator, "hum_body_Naked0", 0, 0, "Hum_Head_FatBald", 10, 1, org_armor_h /*4134*/);
    b_scale(org_804_organisator);
    mdl_setmodelfatness(org_804_organisator, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_804_organisator, npc_talent_bow, 1);
    npc_settalentskill(org_804_organisator, npc_talent_1h, 2);
    createinvitem(org_804_organisator, itmi_stuff_cup_01);
    createinvitem(org_804_organisator, itfomutton);
    createinvitem(org_804_organisator, itfoloaf);
    createinvitem(org_804_organisator, itat_teeth_01);
    createinvitem(org_804_organisator, itfobooze);
    createinvitems(org_804_organisator, itkelockpick, 1);
    createinvitems(org_804_organisator, itminugget, 12);
    createinvitems(org_804_organisator, itforice, 8);
    createinvitems(org_804_organisator, itfobooze, 2);
    createinvitems(org_804_organisator, itlstorch, 1);
    createinvitems(org_804_organisator, itfo_potion_health_01, 1);
    createinvitems(org_804_organisator, itamarrow, 20);
    equipitem(org_804_organisator, itmw_1h_mace_war_02 /*4407*/);
    equipitem(org_804_organisator, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_804;
};

func void rtn_start_804() {
    ta_guardpassage(20, 0, 8, 0, "NC_HUT23_OUT_GUARD");
    ta_guardpassage(8, 0, 20, 0, "NC_HUT23_OUT_GUARD");
};

instance org_806_organisator(npc_default) {
    name = name_organisator;
    npctype = npctype_ambient;
    guild = gil_org;
    level = 8;
    voice = 7;
    id = 806;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 136;
    attribute[atr_hitpoints] /*0*/ = 136;
    mdl_setvisual(org_806_organisator, "HUMANS.MDS");
    mdl_setvisualbody(org_806_organisator, "hum_body_Naked0", 0, 3, "Hum_Head_FatBald", 6, 1, org_armor_l /*4132*/);
    b_scale(org_806_organisator);
    mdl_setmodelfatness(org_806_organisator, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_806_organisator, npc_talent_bow, 1);
    npc_settalentskill(org_806_organisator, npc_talent_1h, 1);
    createinvitem(org_806_organisator, itmi_stuff_cup_01);
    createinvitem(org_806_organisator, itfoloaf);
    createinvitem(org_806_organisator, itat_teeth_01);
    createinvitems(org_806_organisator, itkelockpick, 1);
    createinvitems(org_806_organisator, itminugget, 14);
    createinvitems(org_806_organisator, itforice, 7);
    createinvitems(org_806_organisator, itfobooze, 2);
    createinvitems(org_806_organisator, itlstorch, 1);
    createinvitems(org_806_organisator, itfo_potion_health_01, 1);
    createinvitems(org_806_organisator, itamarrow, 20);
    equipitem(org_806_organisator, itmw_1h_mace_03 /*4399*/);
    equipitem(org_806_organisator, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_806;
};

func void rtn_start_806() {
    ta_sleep(0, 0, 7, 30, "NC_HUT20_IN");
    ta_smalltalk(7, 30, 0, 0, "NC_PLACE06");
};

instance org_807_organisator(npc_default) {
    name = name_organisator;
    npctype = npctype_ambient;
    guild = gil_org;
    level = 11;
    voice = 7;
    id = 807;
    attribute[atr_strength] /*4*/ = 50;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 172;
    attribute[atr_hitpoints] /*0*/ = 172;
    mdl_setvisual(org_807_organisator, "HUMANS.MDS");
    mdl_applyoverlaymds(org_807_organisator, "Humans_Relaxed.mds");
    mdl_setvisualbody(org_807_organisator, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 37, 1, org_armor_m /*4133*/);
    b_scale(org_807_organisator);
    mdl_setmodelfatness(org_807_organisator, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_807_organisator, npc_talent_bow, 1);
    npc_settalentskill(org_807_organisator, npc_talent_2h, 1);
    npc_settalentskill(org_807_organisator, npc_talent_1h, 1);
    createinvitem(org_807_organisator, itmi_stuff_barbknife_01);
    createinvitem(org_807_organisator, itfoloaf);
    createinvitem(org_807_organisator, itat_teeth_01);
    createinvitems(org_807_organisator, itkelockpick, 1);
    createinvitems(org_807_organisator, itminugget, 16);
    createinvitems(org_807_organisator, itforice, 6);
    createinvitems(org_807_organisator, itfobooze, 4);
    createinvitems(org_807_organisator, itlstorch, 3);
    createinvitems(org_807_organisator, itfo_potion_health_01, 1);
    createinvitems(org_807_organisator, itamarrow, 20);
    equipitem(org_807_organisator, itmw_1h_mace_war_01 /*4406*/);
    equipitem(org_807_organisator, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_807;
};

func void rtn_start_807() {
    ta_sleep(0, 0, 8, 0, "NC_HUT14_IN");
    ta_sitcampfire(8, 0, 0, 0, "NC_PLACE05");
};

instance org_810_organisator(npc_default) {
    name = name_organisator;
    npctype = npctype_ambient;
    guild = gil_org;
    level = 15;
    voice = 13;
    id = 810;
    attribute[atr_strength] /*4*/ = 80;
    attribute[atr_dexterity] /*5*/ = 60;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 220;
    attribute[atr_hitpoints] /*0*/ = 220;
    mdl_setvisual(org_810_organisator, "HUMANS.MDS");
    mdl_applyoverlaymds(org_810_organisator, "Humans_Relaxed.mds");
    mdl_setvisualbody(org_810_organisator, "hum_body_Naked0", 0, 3, "Hum_Head_FatBald", 5, 1, org_armor_m /*4133*/);
    b_scale(org_810_organisator);
    mdl_setmodelfatness(org_810_organisator, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_810_organisator, npc_talent_bow, 2);
    npc_settalentskill(org_810_organisator, npc_talent_2h, 2);
    npc_settalentskill(org_810_organisator, npc_talent_1h, 1);
    createinvitem(org_810_organisator, itmi_stuff_barbknife_01);
    createinvitem(org_810_organisator, itfoloaf);
    createinvitem(org_810_organisator, itat_teeth_01);
    createinvitems(org_810_organisator, itkelockpick, 1);
    createinvitems(org_810_organisator, itminugget, 15);
    createinvitems(org_810_organisator, itforice, 8);
    createinvitems(org_810_organisator, itfobooze, 5);
    createinvitems(org_810_organisator, itlstorch, 1);
    createinvitems(org_810_organisator, itfo_potion_health_01, 1);
    createinvitems(org_810_organisator, itamarrow, 20);
    equipitem(org_810_organisator, itmw_1h_mace_war_02 /*4407*/);
    equipitem(org_810_organisator, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_810;
};

func void rtn_start_810() {
    ta_sleep(23, 30, 7, 30, "NC_HUT12_IN");
    ta_standaround(7, 30, 23, 30, "NC_PATH11");
};

instance org_811_organisator(npc_default) {
    name = name_organisator;
    npctype = npctype_ambient;
    guild = gil_org;
    level = 11;
    voice = 6;
    id = 811;
    attribute[atr_strength] /*4*/ = 50;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 172;
    attribute[atr_hitpoints] /*0*/ = 172;
    mdl_setvisual(org_811_organisator, "HUMANS.MDS");
    mdl_setvisualbody(org_811_organisator, "hum_body_Naked0", 0, 2, "Hum_Head_Pony", 8, 1, org_armor_m /*4133*/);
    b_scale(org_811_organisator);
    mdl_setmodelfatness(org_811_organisator, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_811_organisator, npc_talent_bow, 1);
    npc_settalentskill(org_811_organisator, npc_talent_2h, 1);
    npc_settalentskill(org_811_organisator, npc_talent_1h, 1);
    createinvitem(org_811_organisator, itmi_stuff_barbknife_01);
    createinvitem(org_811_organisator, itfomutton);
    createinvitem(org_811_organisator, itat_teeth_01);
    createinvitems(org_811_organisator, itkelockpick, 2);
    createinvitems(org_811_organisator, itminugget, 14);
    createinvitems(org_811_organisator, itforice, 7);
    createinvitems(org_811_organisator, itfobooze, 4);
    createinvitems(org_811_organisator, itlstorch, 3);
    createinvitems(org_811_organisator, itfo_potion_health_01, 1);
    createinvitems(org_811_organisator, itamarrow, 20);
    equipitem(org_811_organisator, itmw_1h_mace_war_01 /*4406*/);
    equipitem(org_811_organisator, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_811;
};

func void rtn_start_811() {
    ta_sleep(23, 55, 8, 5, "NC_HUT17_IN");
    ta_smalltalk(8, 5, 23, 55, "NC_HUT17_OUT");
};

instance org_815_organisator(npc_default) {
    name = name_organisator;
    npctype = npctype_ambient;
    guild = gil_org;
    level = 8;
    voice = 6;
    id = 815;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 136;
    attribute[atr_hitpoints] /*0*/ = 136;
    mdl_setvisual(org_815_organisator, "HUMANS.MDS");
    mdl_applyoverlaymds(org_815_organisator, "Humans_Relaxed.mds");
    mdl_setvisualbody(org_815_organisator, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 36, 2, org_armor_l /*4132*/);
    b_scale(org_815_organisator);
    mdl_setmodelfatness(org_815_organisator, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_815_organisator, npc_talent_bow, 1);
    npc_settalentskill(org_815_organisator, npc_talent_1h, 1);
    createinvitem(org_815_organisator, itmi_stuff_plate_01);
    createinvitem(org_815_organisator, itmi_stuff_cup_01);
    createinvitem(org_815_organisator, itfoloaf);
    createinvitem(org_815_organisator, itat_claws_01);
    createinvitems(org_815_organisator, itkelockpick, 2);
    createinvitems(org_815_organisator, itminugget, 15);
    createinvitems(org_815_organisator, itforice, 7);
    createinvitems(org_815_organisator, itfobooze, 4);
    createinvitems(org_815_organisator, itlstorch, 2);
    createinvitems(org_815_organisator, itfo_potion_health_01, 1);
    createinvitems(org_815_organisator, itamarrow, 20);
    equipitem(org_815_organisator, itmw_1h_mace_03 /*4399*/);
    equipitem(org_815_organisator, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_815;
};

func void rtn_start_815() {
    ta_sleep(0, 0, 8, 0, "NC_HUT29_IN");
    ta_smalltalk(8, 0, 0, 0, "NC_PATH18");
};

instance org_816_organisator(npc_default) {
    name = name_organisator;
    npctype = npctype_ambient;
    guild = gil_org;
    level = 8;
    voice = 13;
    id = 816;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 136;
    attribute[atr_hitpoints] /*0*/ = 136;
    mdl_setvisual(org_816_organisator, "HUMANS.MDS");
    mdl_applyoverlaymds(org_816_organisator, "Humans_Relaxed.mds");
    mdl_setvisualbody(org_816_organisator, "hum_body_Naked0", 0, 1, "Hum_Head_Bald", 38, 4, org_armor_l /*4132*/);
    b_scale(org_816_organisator);
    mdl_setmodelfatness(org_816_organisator, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_816_organisator, npc_talent_bow, 1);
    npc_settalentskill(org_816_organisator, npc_talent_1h, 1);
    createinvitem(org_816_organisator, itmi_stuff_plate_01);
    createinvitem(org_816_organisator, itmi_stuff_cup_01);
    createinvitem(org_816_organisator, itfoloaf);
    createinvitem(org_816_organisator, itat_claws_01);
    createinvitems(org_816_organisator, itkelockpick, 1);
    createinvitems(org_816_organisator, itminugget, 16);
    createinvitems(org_816_organisator, itforice, 6);
    createinvitems(org_816_organisator, itfobooze, 2);
    createinvitems(org_816_organisator, itlstorch, 2);
    createinvitems(org_816_organisator, itfo_potion_health_01, 3);
    createinvitems(org_816_organisator, itamarrow, 20);
    equipitem(org_816_organisator, itmw_1h_mace_03 /*4399*/);
    equipitem(org_816_organisator, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_816;
};

func void rtn_start_816() {
    ta_sleep(0, 5, 8, 5, "NC_HUT28_IN");
    ta_smalltalk(8, 5, 0, 5, "NC_HUT28_OUT");
};

instance org_817_organisator(npc_default) {
    name = name_organisator;
    npctype = npctype_ambient;
    guild = gil_org;
    level = 8;
    voice = 6;
    id = 817;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 136;
    attribute[atr_hitpoints] /*0*/ = 136;
    mdl_setvisual(org_817_organisator, "HUMANS.MDS");
    mdl_applyoverlaymds(org_817_organisator, "Humans_Relaxed.mds");
    mdl_setvisualbody(org_817_organisator, "hum_body_Naked0", 0, 1, "Hum_Head_Bald", 37, 2, org_armor_l /*4132*/);
    b_scale(org_817_organisator);
    mdl_setmodelfatness(org_817_organisator, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_817_organisator, npc_talent_bow, 1);
    npc_settalentskill(org_817_organisator, npc_talent_1h, 1);
    createinvitem(org_817_organisator, itmi_stuff_plate_01);
    createinvitem(org_817_organisator, itfomutton);
    createinvitem(org_817_organisator, itat_claws_01);
    createinvitems(org_817_organisator, itkelockpick, 2);
    createinvitems(org_817_organisator, itminugget, 18);
    createinvitems(org_817_organisator, itforice, 6);
    createinvitems(org_817_organisator, itfobooze, 2);
    createinvitems(org_817_organisator, itlstorch, 2);
    createinvitems(org_817_organisator, itfo_potion_health_01, 3);
    createinvitems(org_817_organisator, itamarrow, 20);
    equipitem(org_817_organisator, itmw_1h_mace_03 /*4399*/);
    equipitem(org_817_organisator, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_817;
};

func void rtn_start_817() {
    ta_sleep(23, 0, 8, 0, "NC_HUT13_IN");
    ta_cook(8, 0, 23, 0, "NC_HUT13_OUT");
};

instance org_818_ratford(npc_default) {
    name = "Ðýòôîðä";
    npctype = npctype_main;
    guild = gil_org;
    level = 8;
    voice = 7;
    id = 818;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 136;
    attribute[atr_hitpoints] /*0*/ = 136;
    mdl_setvisual(org_818_ratford, "HUMANS.MDS");
    mdl_applyoverlaymds(org_818_ratford, "Humans_Relaxed.mds");
    mdl_setvisualbody(org_818_ratford, "hum_body_Naked0", 0, 2, "Hum_Head_Fighter", 9, 3, org_armor_l /*4132*/);
    b_scale(org_818_ratford);
    mdl_setmodelfatness(org_818_ratford, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_818_ratford, npc_talent_bow, 1);
    npc_settalentskill(org_818_ratford, npc_talent_1h, 1);
    createinvitem(org_818_ratford, itmi_stuff_plate_01);
    createinvitem(org_818_ratford, itmi_stuff_cup_01);
    createinvitem(org_818_ratford, itfoloaf);
    createinvitem(org_818_ratford, itat_claws_01);
    createinvitems(org_818_ratford, itkelockpick, 2);
    createinvitems(org_818_ratford, itminugget, 17);
    createinvitems(org_818_ratford, itforice, 6);
    createinvitems(org_818_ratford, itfobooze, 2);
    createinvitems(org_818_ratford, itlstorch, 3);
    createinvitems(org_818_ratford, itfo_potion_health_01, 3);
    createinvitems(org_818_ratford, itamarrow, 20);
    equipitem(org_818_ratford, itmw_1h_mace_03 /*4399*/);
    equipitem(org_818_ratford, itrw_bow_small_04 /*4874*/);
    daily_routine = rtn_start_818;
};

func void rtn_start_818() {
    ta_smalltalk(0, 0, 23, 0, "OW_PATH_1_5_A");
    ta_smalltalk(23, 0, 0, 0, "OW_PATH_1_5_A");
};

instance org_819_drax(npc_default) {
    name = "Äðàêñ";
    npctype = npctype_main;
    guild = gil_org;
    level = 3;
    voice = 6;
    id = 819;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 136;
    attribute[atr_hitpoints] /*0*/ = 136;
    mdl_setvisual(org_819_drax, "HUMANS.MDS");
    mdl_setvisualbody(org_819_drax, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 39, 2, org_armor_l /*4132*/);
    b_scale(org_819_drax);
    mdl_setmodelfatness(org_819_drax, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_819_drax, npc_talent_bow, 1);
    npc_settalentskill(org_819_drax, npc_talent_1h, 1);
    createinvitem(org_819_drax, itmi_stuff_plate_01);
    createinvitem(org_819_drax, itmi_stuff_cup_01);
    createinvitem(org_819_drax, itfoloaf);
    createinvitem(org_819_drax, itat_claws_01);
    createinvitems(org_819_drax, itkelockpick, 2);
    createinvitems(org_819_drax, itminugget, 14);
    createinvitems(org_819_drax, itforice, 6);
    createinvitems(org_819_drax, itfobooze, 2);
    createinvitems(org_819_drax, itlstorch, 3);
    createinvitems(org_819_drax, itfo_potion_health_01, 3);
    createinvitems(org_819_drax, itamarrow, 20);
    equipitem(org_819_drax, itmw_1h_mace_03 /*4399*/);
    equipitem(org_819_drax, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_819;
};

func void rtn_start_819() {
    ta_smalltalk(0, 0, 23, 0, "OW_PATH_1_5_B");
    ta_smalltalk(23, 0, 0, 0, "OW_PATH_1_5_B");
};

instance org_820_organisator(npc_default) {
    name = name_organisator;
    npctype = npctype_ambient;
    guild = gil_org;
    level = 8;
    voice = 13;
    id = 820;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 136;
    attribute[atr_hitpoints] /*0*/ = 136;
    mdl_setvisual(org_820_organisator, "HUMANS.MDS");
    mdl_applyoverlaymds(org_820_organisator, "Humans_Relaxed.mds");
    mdl_setvisualbody(org_820_organisator, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 36, 2, org_armor_l /*4132*/);
    b_scale(org_820_organisator);
    mdl_setmodelfatness(org_820_organisator, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_820_organisator, npc_talent_bow, 1);
    npc_settalentskill(org_820_organisator, npc_talent_1h, 1);
    createinvitem(org_820_organisator, itmi_stuff_plate_01);
    createinvitem(org_820_organisator, itmi_stuff_cup_01);
    createinvitem(org_820_organisator, itfoloaf);
    createinvitem(org_820_organisator, itat_claws_01);
    createinvitems(org_820_organisator, itkelockpick, 2);
    createinvitems(org_820_organisator, itminugget, 15);
    createinvitems(org_820_organisator, itforice, 6);
    createinvitems(org_820_organisator, itfobooze, 2);
    createinvitems(org_820_organisator, itlstorch, 1);
    createinvitems(org_820_organisator, itfo_potion_health_01, 3);
    createinvitems(org_820_organisator, itamarrow, 20);
    equipitem(org_820_organisator, itmw_1h_mace_03 /*4399*/);
    equipitem(org_820_organisator, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_820;
};

func void rtn_start_820() {
    ta_sleep(0, 30, 8, 30, "NC_HUT12_IN");
    ta_standaround(8, 30, 0, 30, "NC_PATH11");
};

instance org_821_organisator(npc_default) {
    name = name_organisator;
    npctype = npctype_ambient;
    guild = gil_org;
    level = 8;
    voice = 7;
    id = 821;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 136;
    attribute[atr_hitpoints] /*0*/ = 136;
    mdl_setvisual(org_821_organisator, "HUMANS.MDS");
    mdl_applyoverlaymds(org_821_organisator, "Humans_Relaxed.mds");
    mdl_setvisualbody(org_821_organisator, "hum_body_Naked0", 0, 2, "Hum_Head_Fighter", 9, 3, org_armor_l /*4132*/);
    b_scale(org_821_organisator);
    mdl_setmodelfatness(org_821_organisator, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_821_organisator, npc_talent_bow, 1);
    npc_settalentskill(org_821_organisator, npc_talent_1h, 1);
    createinvitem(org_821_organisator, itmi_stuff_plate_01);
    createinvitem(org_821_organisator, itmi_stuff_cup_01);
    createinvitem(org_821_organisator, itfoloaf);
    createinvitem(org_821_organisator, itat_teeth_01);
    createinvitems(org_821_organisator, itkelockpick, 2);
    createinvitems(org_821_organisator, itminugget, 16);
    createinvitems(org_821_organisator, itforice, 7);
    createinvitems(org_821_organisator, itfobooze, 3);
    createinvitems(org_821_organisator, itlstorch, 3);
    createinvitems(org_821_organisator, itfo_potion_health_01, 1);
    createinvitems(org_821_organisator, itamarrow, 20);
    equipitem(org_821_organisator, itmw_1h_mace_03 /*4399*/);
    equipitem(org_821_organisator, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_821;
};

func void rtn_start_821() {
    ta_sleep(2, 0, 9, 0, "NC_HUT25_IN");
    ta_smalltalk(9, 0, 2, 0, "NC_TAVERN_TOP05");
};

instance org_822_organisator(npc_default) {
    name = name_organisator;
    npctype = npctype_ambient;
    guild = gil_org;
    level = 11;
    voice = 13;
    id = 822;
    attribute[atr_strength] /*4*/ = 50;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 172;
    attribute[atr_hitpoints] /*0*/ = 172;
    mdl_setvisual(org_822_organisator, "HUMANS.MDS");
    mdl_setvisualbody(org_822_organisator, "hum_body_Naked0", 0, 1, "Hum_Head_Fighter", 35, 2, org_armor_m /*4133*/);
    b_scale(org_822_organisator);
    mdl_setmodelfatness(org_822_organisator, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_822_organisator, npc_talent_bow, 1);
    npc_settalentskill(org_822_organisator, npc_talent_2h, 1);
    npc_settalentskill(org_822_organisator, npc_talent_1h, 1);
    createinvitem(org_822_organisator, itmi_stuff_plate_01);
    createinvitem(org_822_organisator, itmi_stuff_cup_01);
    createinvitem(org_822_organisator, itfomutton);
    createinvitem(org_822_organisator, itat_teeth_01);
    createinvitems(org_822_organisator, itkelockpick, 3);
    createinvitems(org_822_organisator, itminugget, 9);
    createinvitems(org_822_organisator, itforice, 8);
    createinvitems(org_822_organisator, itfobooze, 7);
    createinvitems(org_822_organisator, itlstorch, 2);
    createinvitems(org_822_organisator, itfo_potion_health_01, 1);
    createinvitems(org_822_organisator, itamarrow, 20);
    equipitem(org_822_organisator, itmw_1h_mace_war_01 /*4406*/);
    equipitem(org_822_organisator, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_822;
};

func void rtn_start_822() {
    ta_sleep(0, 5, 8, 5, "NC_HUT16_IN");
    ta_sitcampfire(8, 5, 0, 5, "NC_HUT16_OUT");
};

instance org_823_organisator(npc_default) {
    name = name_organisator;
    npctype = npctype_ambient;
    guild = gil_org;
    level = 8;
    voice = 7;
    id = 823;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 136;
    attribute[atr_hitpoints] /*0*/ = 136;
    mdl_setvisual(org_823_organisator, "HUMANS.MDS");
    mdl_applyoverlaymds(org_823_organisator, "Humans_Relaxed.mds");
    mdl_setvisualbody(org_823_organisator, "hum_body_Naked0", 0, 1, "Hum_Head_Bald", 37, 2, org_armor_l /*4132*/);
    b_scale(org_823_organisator);
    mdl_setmodelfatness(org_823_organisator, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_823_organisator, npc_talent_bow, 1);
    npc_settalentskill(org_823_organisator, npc_talent_1h, 1);
    createinvitem(org_823_organisator, itmi_stuff_barbknife_01);
    createinvitem(org_823_organisator, itfomutton);
    createinvitem(org_823_organisator, itat_claws_01);
    createinvitems(org_823_organisator, itkelockpick, 2);
    createinvitems(org_823_organisator, itminugget, 12);
    createinvitems(org_823_organisator, itforice, 7);
    createinvitems(org_823_organisator, itfobooze, 2);
    createinvitems(org_823_organisator, itlstorch, 1);
    createinvitems(org_823_organisator, itfo_potion_health_01, 3);
    createinvitems(org_823_organisator, itamarrow, 20);
    equipitem(org_823_organisator, itmw_1h_mace_03 /*4399*/);
    equipitem(org_823_organisator, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_823;
};

func void rtn_start_823() {
    ta_sleep(0, 0, 7, 30, "NC_HUT21_IN");
    ta_sitaround(7, 30, 10, 0, "NC_HUT21_OUT");
    ta_cook(10, 0, 10, 0, "NC_HUT21_OUT");
    ta_sitaround(20, 0, 0, 0, "NC_HUT21_OUT");
};

instance org_824_organisator(npc_default) {
    name = name_organisator;
    npctype = npctype_ambient;
    guild = gil_org;
    level = 8;
    voice = 13;
    id = 824;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 136;
    attribute[atr_hitpoints] /*0*/ = 136;
    mdl_setvisual(org_824_organisator, "HUMANS.MDS");
    mdl_setvisualbody(org_824_organisator, "hum_body_Naked0", 0, 1, "Hum_Head_Bald", 37, 2, org_armor_l /*4132*/);
    b_scale(org_824_organisator);
    mdl_setmodelfatness(org_824_organisator, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_824_organisator, npc_talent_bow, 1);
    npc_settalentskill(org_824_organisator, npc_talent_1h, 1);
    createinvitem(org_824_organisator, itmi_stuff_barbknife_01);
    createinvitem(org_824_organisator, itfoloaf);
    createinvitem(org_824_organisator, itat_claws_01);
    createinvitems(org_824_organisator, itkelockpick, 3);
    createinvitems(org_824_organisator, itminugget, 16);
    createinvitems(org_824_organisator, itforice, 9);
    createinvitems(org_824_organisator, itfobooze, 4);
    createinvitems(org_824_organisator, itlstorch, 2);
    createinvitems(org_824_organisator, itfo_potion_health_01, 1);
    createinvitems(org_824_organisator, itamarrow, 20);
    equipitem(org_824_organisator, itmw_1h_mace_03 /*4399*/);
    equipitem(org_824_organisator, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_824;
};

func void rtn_start_824() {
    ta_sleep(2, 5, 9, 5, "NC_HUT24_IN");
    ta_smalltalk(9, 5, 2, 5, "NC_TAVERN_TOP05");
};

instance org_825_organisator(npc_default) {
    name = name_organisator;
    npctype = npctype_main;
    guild = gil_org;
    level = 8;
    voice = 7;
    id = 825;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 136;
    attribute[atr_hitpoints] /*0*/ = 136;
    mdl_setvisual(org_825_organisator, "HUMANS.MDS");
    mdl_applyoverlaymds(org_825_organisator, "Humans_Relaxed.mds");
    mdl_setvisualbody(org_825_organisator, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 36, 2, org_armor_l /*4132*/);
    b_scale(org_825_organisator);
    mdl_setmodelfatness(org_825_organisator, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_825_organisator, npc_talent_bow, 1);
    npc_settalentskill(org_825_organisator, npc_talent_1h, 1);
    createinvitem(org_825_organisator, itmi_stuff_plate_01);
    createinvitem(org_825_organisator, itmi_stuff_cup_01);
    createinvitem(org_825_organisator, itfomutton);
    createinvitem(org_825_organisator, itat_teeth_01);
    createinvitems(org_825_organisator, itkelockpick, 1);
    createinvitems(org_825_organisator, itminugget, 10);
    createinvitems(org_825_organisator, itforice, 9);
    createinvitems(org_825_organisator, itfobooze, 1);
    createinvitems(org_825_organisator, itlstorch, 1);
    createinvitems(org_825_organisator, itfo_potion_health_01, 3);
    createinvitems(org_825_organisator, itamarrow, 20);
    equipitem(org_825_organisator, itmw_1h_mace_03 /*4399*/);
    equipitem(org_825_organisator, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_825;
};

func void rtn_start_825() {
    ta_guardpassage(20, 0, 8, 0, "NC_HUT23_OUT_GUARD2");
    ta_guardpassage(8, 0, 20, 0, "NC_HUT23_OUT_GUARD2");
};

instance org_826_mordrag(npc_default) {
    name = "Ìîðäðàã";
    npctype = npctype_main;
    guild = gil_org;
    level = 10;
    voice = 11;
    id = 826;
    attribute[atr_strength] /*4*/ = 36;
    attribute[atr_dexterity] /*5*/ = 36;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 180;
    attribute[atr_hitpoints] /*0*/ = 180;
    mdl_setvisual(org_826_mordrag, "HUMANS.MDS");
    mdl_applyoverlaymds(org_826_mordrag, "Humans_Relaxed.mds");
    mdl_setvisualbody(org_826_mordrag, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 36, 2, org_armor_l /*4132*/);
    b_scale(org_826_mordrag);
    mdl_setmodelfatness(org_826_mordrag, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(org_826_mordrag, itmi_stuff_plate_01);
    createinvitem(org_826_mordrag, itmi_stuff_cup_01);
    createinvitem(org_826_mordrag, itfoloaf);
    createinvitem(org_826_mordrag, itat_teeth_01);
    createinvitems(org_826_mordrag, itkelockpick, 2);
    createinvitems(org_826_mordrag, itminugget, 11);
    createinvitems(org_826_mordrag, itforice, 8);
    createinvitems(org_826_mordrag, itfobooze, 3);
    createinvitems(org_826_mordrag, itlstorch, 2);
    createinvitems(org_826_mordrag, itfo_potion_health_01, 3);
    createinvitems(org_826_mordrag, itamarrow, 10);
    equipitem(org_826_mordrag, itmw_1h_mace_02 /*4398*/);
    equipitem(org_826_mordrag, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_prestart_826;
};

func void rtn_prestart_826() {
    ta_smalltalk(10, 0, 22, 0, "OCR_OUTSIDE_HUT_44");
    ta_stand(22, 0, 10, 0, "OCR_OUTSIDE_HUT_44");
};

func void rtn_guide_826() {
    ta_guidepc(8, 0, 20, 0, "OW_PATH_07_21");
    ta_guidepc(20, 0, 8, 0, "OW_PATH_07_21");
};

func void rtn_start_826() {
    ta_stand(8, 0, 23, 0, "NC_TAVERN_BAR");
    ta_stand(23, 0, 8, 0, "NC_TAVERN_BAR");
};

instance org_828_bruce(npc_default) {
    name = "Áðþñ";
    npctype = npctype_ambient;
    guild = gil_org;
    level = 11;
    voice = 6;
    id = 828;
    attribute[atr_strength] /*4*/ = 50;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 172;
    attribute[atr_hitpoints] /*0*/ = 172;
    mdl_setvisual(org_828_bruce, "HUMANS.MDS");
    mdl_applyoverlaymds(org_828_bruce, "Humans_Relaxed.mds");
    mdl_setvisualbody(org_828_bruce, "hum_body_Naked0", 0, 1, "Hum_Head_Fighter", 35, 2, org_armor_m /*4133*/);
    b_scale(org_828_bruce);
    mdl_setmodelfatness(org_828_bruce, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_828_bruce, npc_talent_bow, 1);
    npc_settalentskill(org_828_bruce, npc_talent_2h, 1);
    npc_settalentskill(org_828_bruce, npc_talent_1h, 1);
    createinvitem(org_828_bruce, itmi_stuff_barbknife_01);
    createinvitem(org_828_bruce, itmi_stuff_cup_01);
    createinvitem(org_828_bruce, itat_teeth_01);
    createinvitems(org_828_bruce, itkelockpick, 1);
    createinvitems(org_828_bruce, itminugget, 10);
    createinvitems(org_828_bruce, itforice, 8);
    createinvitems(org_828_bruce, itfobooze, 4);
    createinvitems(org_828_bruce, itlstorch, 2);
    createinvitems(org_828_bruce, itfo_potion_health_01, 1);
    createinvitems(org_828_bruce, itamarrow, 20);
    equipitem(org_828_bruce, itmw_1h_mace_war_01 /*4406*/);
    equipitem(org_828_bruce, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_828;
};

func void rtn_start_828() {
    ta_sleep(7, 30, 1, 0, "NC_HUT27_IN");
    ta_sitcampfire(1, 0, 7, 30, "NC_PLACE07");
};

instance org_829_organisator(npc_default) {
    name = name_torwache;
    npctype = npctype_main;
    guild = gil_org;
    level = 4;
    voice = 6;
    id = 829;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 88;
    attribute[atr_hitpoints] /*0*/ = 88;
    mdl_setvisual(org_829_organisator, "HUMANS.MDS");
    mdl_setvisualbody(org_829_organisator, "hum_body_Naked0", 0, 0, "Hum_Head_FatBald", 13, 1, org_armor_l /*4132*/);
    b_scale(org_829_organisator);
    mdl_setmodelfatness(org_829_organisator, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_829_organisator, npc_talent_bow, 1);
    npc_settalentskill(org_829_organisator, npc_talent_1h, 1);
    npc_settalentskill(org_829_organisator, npc_talent_sneak, 1);
    createinvitem(org_829_organisator, itmi_stuff_cup_01);
    createinvitem(org_829_organisator, itat_teeth_01);
    createinvitems(org_829_organisator, itkelockpick, 1);
    createinvitems(org_829_organisator, itminugget, 9);
    createinvitems(org_829_organisator, itforice, 8);
    createinvitems(org_829_organisator, itfobooze, 2);
    createinvitems(org_829_organisator, itlstorch, 2);
    createinvitems(org_829_organisator, itfo_potion_health_01, 1);
    equipitem(org_829_organisator, itmw_1h_mace_01 /*4397*/);
    daily_routine = rtn_start_829;
};

func void rtn_start_829() {
    ta_guardpassage(8, 0, 20, 0, "OW_PATH_07_21_GUARD_RIGHT");
    ta_guardpassage(20, 0, 8, 0, "OW_PATH_07_21_GUARD_RIGHT");
};

instance org_830_organisator(npc_default) {
    name = name_torwache;
    npctype = npctype_main;
    guild = gil_org;
    level = 4;
    voice = 13;
    id = 830;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 88;
    attribute[atr_hitpoints] /*0*/ = 88;
    mdl_setvisual(org_830_organisator, "HUMANS.MDS");
    mdl_applyoverlaymds(org_830_organisator, "Humans_Relaxed.mds");
    mdl_setvisualbody(org_830_organisator, "hum_body_Naked0", 1, 0, "Hum_Head_FatBald", 12, 2, org_armor_l /*4132*/);
    b_scale(org_830_organisator);
    mdl_setmodelfatness(org_830_organisator, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_830_organisator, npc_talent_bow, 1);
    npc_settalentskill(org_830_organisator, npc_talent_1h, 1);
    npc_settalentskill(org_830_organisator, npc_talent_sneak, 1);
    createinvitem(org_830_organisator, itmi_stuff_plate_01);
    createinvitem(org_830_organisator, itfomutton);
    createinvitem(org_830_organisator, itat_teeth_01);
    createinvitems(org_830_organisator, itkelockpick, 1);
    createinvitems(org_830_organisator, itminugget, 10);
    createinvitems(org_830_organisator, itforice, 7);
    createinvitems(org_830_organisator, itfobooze, 1);
    createinvitems(org_830_organisator, itlstorch, 1);
    createinvitems(org_830_organisator, itfo_potion_health_01, 1);
    equipitem(org_830_organisator, itmw_1h_mace_01 /*4397*/);
    daily_routine = rtn_start_830;
};

func void rtn_start_830() {
    ta_smoke(8, 0, 20, 0, "OW_PATH_07_21_GUARD_LEFT");
    ta_smoke(20, 0, 8, 0, "OW_PATH_07_21_GUARD_LEFT");
};

instance org_831_organisator(npc_default) {
    name = name_organisator;
    npctype = npctype_ambient;
    guild = gil_org;
    level = 4;
    voice = 6;
    id = 831;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 88;
    attribute[atr_hitpoints] /*0*/ = 88;
    mdl_setvisual(org_831_organisator, "HUMANS.MDS");
    mdl_setvisualbody(org_831_organisator, "hum_body_Naked0", 0, 2, "Hum_Head_FatBald", 10, 1, org_armor_l /*4132*/);
    b_scale(org_831_organisator);
    mdl_setmodelfatness(org_831_organisator, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_831_organisator, npc_talent_bow, 1);
    npc_settalentskill(org_831_organisator, npc_talent_1h, 1);
    npc_settalentskill(org_831_organisator, npc_talent_sneak, 1);
    createinvitem(org_831_organisator, itmi_stuff_barbknife_01);
    createinvitem(org_831_organisator, itfomutton);
    createinvitem(org_831_organisator, itat_claws_01);
    createinvitems(org_831_organisator, itkelockpick, 2);
    createinvitems(org_831_organisator, itminugget, 11);
    createinvitems(org_831_organisator, itforice, 7);
    createinvitems(org_831_organisator, itfobooze, 1);
    createinvitems(org_831_organisator, itlstorch, 1);
    createinvitems(org_831_organisator, itfo_potion_health_01, 1);
    equipitem(org_831_organisator, itmw_1h_mace_01 /*4397*/);
    daily_routine = rtn_start_831;
};

func void rtn_start_831() {
    ta_smalltalk(20, 0, 8, 0, "OW_PATH_067");
    ta_smalltalk(8, 0, 20, 0, "OW_PATH_067");
};

instance org_832_organisator(npc_default) {
    name = name_organisator;
    npctype = npctype_ambient;
    guild = gil_org;
    level = 4;
    voice = 7;
    id = 832;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 88;
    attribute[atr_hitpoints] /*0*/ = 88;
    mdl_setvisual(org_832_organisator, "HUMANS.MDS");
    mdl_applyoverlaymds(org_832_organisator, "Humans_Relaxed.mds");
    mdl_setvisualbody(org_832_organisator, "hum_body_Naked0", 1, 2, "Hum_Head_FatBald", 11, 1, org_armor_l /*4132*/);
    b_scale(org_832_organisator);
    mdl_setmodelfatness(org_832_organisator, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_832_organisator, npc_talent_bow, 1);
    npc_settalentskill(org_832_organisator, npc_talent_1h, 1);
    npc_settalentskill(org_832_organisator, npc_talent_sneak, 1);
    createinvitem(org_832_organisator, itmi_stuff_plate_01);
    createinvitem(org_832_organisator, itfomutton);
    createinvitem(org_832_organisator, itat_teeth_01);
    createinvitems(org_832_organisator, itkelockpick, 1);
    createinvitems(org_832_organisator, itminugget, 12);
    createinvitems(org_832_organisator, itforice, 8);
    createinvitems(org_832_organisator, itfobooze, 4);
    createinvitems(org_832_organisator, itlstorch, 2);
    createinvitems(org_832_organisator, itfo_potion_health_01, 1);
    equipitem(org_832_organisator, itmw_1h_mace_01 /*4397*/);
    daily_routine = rtn_start_832;
};

func void rtn_start_832() {
    ta_smalltalk(20, 0, 8, 0, "OW_PATH_067");
    ta_smalltalk(8, 0, 20, 0, "OW_PATH_067");
};

instance org_833_buster(npc_default) {
    name = "Áàñòåð";
    npctype = npctype_main;
    guild = gil_org;
    level = 4;
    voice = 2;
    id = 833;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 88;
    attribute[atr_hitpoints] /*0*/ = 88;
    mdl_setvisual(org_833_buster, "HUMANS.MDS");
    mdl_applyoverlaymds(org_833_buster, "Humans_Relaxed.mds");
    mdl_setvisualbody(org_833_buster, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 39, 2, org_armor_h /*4134*/);
    b_scale(org_833_buster);
    mdl_setmodelfatness(org_833_buster, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_833_buster, npc_talent_bow, 1);
    npc_settalentskill(org_833_buster, npc_talent_1h, 1);
    createinvitem(org_833_buster, itmi_stuff_barbknife_01);
    createinvitem(org_833_buster, itfomutton);
    createinvitem(org_833_buster, itat_claws_01);
    createinvitems(org_833_buster, itkelockpick, 1);
    createinvitems(org_833_buster, itminugget, 13);
    createinvitems(org_833_buster, itforice, 7);
    createinvitems(org_833_buster, itfobooze, 4);
    createinvitems(org_833_buster, itlstorch, 2);
    createinvitems(org_833_buster, itfo_potion_health_01, 2);
    createinvitems(org_833_buster, itamarrow, 10);
    equipitem(org_833_buster, itmw_1h_mace_02 /*4398*/);
    equipitem(org_833_buster, itrw_bow_small_01 /*4871*/);
    daily_routine = rtn_start_833;
};

func void rtn_start_833() {
    ta_sleep(1, 0, 7, 30, "NC_HUT30_IN");
    ta_sitaround(7, 30, 1, 0, "NC_HUT30_OUT");
};

instance org_834_organisator(npc_default) {
    name = name_organisator;
    npctype = npctype_guard;
    guild = gil_org;
    level = 4;
    voice = 13;
    id = 834;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 88;
    attribute[atr_hitpoints] /*0*/ = 88;
    mdl_setvisual(org_834_organisator, "HUMANS.MDS");
    mdl_applyoverlaymds(org_834_organisator, "Humans_Relaxed.mds");
    mdl_setvisualbody(org_834_organisator, "hum_body_Naked0", 1, 0, "Hum_Head_FatBald", 12, 2, org_armor_l /*4132*/);
    b_scale(org_834_organisator);
    mdl_setmodelfatness(org_834_organisator, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_834_organisator, npc_talent_bow, 1);
    npc_settalentskill(org_834_organisator, npc_talent_1h, 1);
    npc_settalentskill(org_834_organisator, npc_talent_sneak, 1);
    createinvitem(org_834_organisator, itmi_stuff_barbknife_01);
    createinvitem(org_834_organisator, itfomutton);
    createinvitem(org_834_organisator, itat_claws_01);
    createinvitems(org_834_organisator, itkelockpick, 2);
    createinvitems(org_834_organisator, itminugget, 14);
    createinvitems(org_834_organisator, itforice, 8);
    createinvitems(org_834_organisator, itfobooze, 3);
    createinvitems(org_834_organisator, itlstorch, 3);
    createinvitems(org_834_organisator, itfo_potion_health_01, 2);
    equipitem(org_834_organisator, itmw_1h_mace_01 /*4397*/);
    daily_routine = rtn_start_834;
};

func void rtn_start_834() {
    ta_guardwheelopen(23, 30, 8, 0, "OW_PATH_067_WHEEL");
    ta_guardwheelopen(8, 0, 23, 30, "OW_PATH_067_WHEEL");
};

instance org_836_organisator(npc_default) {
    name = name_organisator;
    npctype = npctype_ambient;
    guild = gil_org;
    level = 4;
    voice = 13;
    id = 836;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 88;
    attribute[atr_hitpoints] /*0*/ = 88;
    mdl_setvisual(org_836_organisator, "HUMANS.MDS");
    mdl_setvisualbody(org_836_organisator, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 48, 1, org_armor_l /*4132*/);
    b_scale(org_836_organisator);
    mdl_setmodelfatness(org_836_organisator, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_836_organisator, npc_talent_bow, 1);
    npc_settalentskill(org_836_organisator, npc_talent_1h, 1);
    npc_settalentskill(org_836_organisator, npc_talent_sneak, 1);
    createinvitem(org_836_organisator, itmi_stuff_barbknife_01);
    createinvitem(org_836_organisator, itfomutton);
    createinvitem(org_836_organisator, itfoloaf);
    createinvitem(org_836_organisator, itat_teeth_01);
    createinvitems(org_836_organisator, itkelockpick, 1);
    createinvitems(org_836_organisator, itminugget, 12);
    createinvitems(org_836_organisator, itforice, 7);
    createinvitems(org_836_organisator, itfobooze, 2);
    createinvitems(org_836_organisator, itlstorch, 1);
    createinvitems(org_836_organisator, itfo_potion_health_01, 1);
    equipitem(org_836_organisator, itmw_1h_mace_01 /*4397*/);
    daily_routine = rtn_start_836;
};

func void rtn_start_836() {
    ta_sleep(0, 0, 7, 30, "NC_HUT26_IN");
    ta_sitcampfire(7, 30, 0, 0, "NC_PATH17_MOVEMENT2");
};

instance org_837_organisator(npc_default) {
    name = name_organisator;
    npctype = npctype_ambient;
    guild = gil_org;
    level = 4;
    voice = 6;
    id = 837;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 88;
    attribute[atr_hitpoints] /*0*/ = 88;
    mdl_setvisual(org_837_organisator, "HUMANS.MDS");
    mdl_applyoverlaymds(org_837_organisator, "Humans_Relaxed.mds");
    mdl_setvisualbody(org_837_organisator, "hum_body_Naked0", 0, 0, "Hum_Head_FatBald", 13, 1, org_armor_l /*4132*/);
    b_scale(org_837_organisator);
    mdl_setmodelfatness(org_837_organisator, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_837_organisator, npc_talent_bow, 1);
    npc_settalentskill(org_837_organisator, npc_talent_1h, 1);
    npc_settalentskill(org_837_organisator, npc_talent_sneak, 1);
    createinvitem(org_837_organisator, itmi_stuff_plate_01);
    createinvitem(org_837_organisator, itmi_stuff_cup_01);
    createinvitem(org_837_organisator, itat_teeth_01);
    createinvitems(org_837_organisator, itkelockpick, 1);
    createinvitems(org_837_organisator, itminugget, 10);
    createinvitems(org_837_organisator, itforice, 9);
    createinvitems(org_837_organisator, itfobooze, 4);
    createinvitems(org_837_organisator, itlstorch, 2);
    createinvitems(org_837_organisator, itfo_potion_health_01, 2);
    equipitem(org_837_organisator, itmw_1h_mace_01 /*4397*/);
    daily_routine = rtn_start_837;
};

func void rtn_start_837() {
    ta_sleep(2, 30, 8, 0, "NC_HUT31_IN");
    ta_smalltalk(8, 0, 18, 0, "NC_HUT31_OUT");
    ta_smalltalk(18, 0, 2, 30, "NC_TAVERN_TOP02");
};

instance org_838_organisator(npc_default) {
    name = name_organisator;
    npctype = npctype_ambient;
    guild = gil_org;
    level = 4;
    voice = 13;
    id = 838;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 88;
    attribute[atr_hitpoints] /*0*/ = 88;
    mdl_setvisual(org_838_organisator, "HUMANS.MDS");
    mdl_setvisualbody(org_838_organisator, "hum_body_Naked0", 1, 0, "Hum_Head_FatBald", 12, 2, org_armor_l /*4132*/);
    b_scale(org_838_organisator);
    mdl_setmodelfatness(org_838_organisator, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_838_organisator, npc_talent_bow, 1);
    npc_settalentskill(org_838_organisator, npc_talent_1h, 1);
    npc_settalentskill(org_838_organisator, npc_talent_sneak, 1);
    createinvitem(org_838_organisator, itmi_stuff_plate_01);
    createinvitem(org_838_organisator, itmi_stuff_cup_01);
    createinvitem(org_838_organisator, itfomutton);
    createinvitem(org_838_organisator, itat_claws_01);
    createinvitems(org_838_organisator, itkelockpick, 1);
    createinvitems(org_838_organisator, itminugget, 13);
    createinvitems(org_838_organisator, itforice, 7);
    createinvitems(org_838_organisator, itfobooze, 2);
    createinvitems(org_838_organisator, itlstorch, 2);
    createinvitems(org_838_organisator, itfo_potion_health_01, 2);
    equipitem(org_838_organisator, itmw_1h_mace_01 /*4397*/);
    daily_routine = rtn_start_838;
};

func void rtn_start_838() {
    ta_sleep(2, 35, 8, 5, "NC_HUT31_IN");
    ta_smalltalk(8, 5, 18, 5, "NC_HUT31_OUT");
    ta_smalltalk(18, 5, 2, 35, "NC_TAVERN_TOP02");
};

instance org_840_roscoe(npc_default) {
    name = "Ðîñêî";
    npctype = npctype_main;
    guild = gil_org;
    level = 11;
    voice = 10;
    id = 840;
    attribute[atr_strength] /*4*/ = 50;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 172;
    attribute[atr_hitpoints] /*0*/ = 172;
    mdl_setvisual(org_840_roscoe, "HUMANS.MDS");
    mdl_applyoverlaymds(org_840_roscoe, "Humans_Relaxed.mds");
    mdl_setvisualbody(org_840_roscoe, "hum_body_Naked0", 0, 2, "Hum_Head_Pony", 9, 1, org_armor_m /*4133*/);
    b_scale(org_840_roscoe);
    mdl_setmodelfatness(org_840_roscoe, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_840_roscoe, npc_talent_bow, 1);
    npc_settalentskill(org_840_roscoe, npc_talent_2h, 1);
    npc_settalentskill(org_840_roscoe, npc_talent_1h, 1);
    createinvitem(org_840_roscoe, itmi_stuff_barbknife_01);
    createinvitem(org_840_roscoe, itfoloaf);
    createinvitem(org_840_roscoe, itat_teeth_01);
    createinvitems(org_840_roscoe, itkelockpick, 1);
    createinvitems(org_840_roscoe, itminugget, 12);
    createinvitems(org_840_roscoe, itforice, 7);
    createinvitems(org_840_roscoe, itfobooze, 3);
    createinvitems(org_840_roscoe, itlstorch, 2);
    createinvitems(org_840_roscoe, itfo_potion_health_01, 2);
    createinvitems(org_840_roscoe, itamarrow, 20);
    equipitem(org_840_roscoe, itmw_1h_mace_war_01 /*4406*/);
    equipitem(org_840_roscoe, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_840;
};

func void rtn_start_840() {
    ta_guardpassage(23, 0, 7, 0, "NC_HUT22_OUT_MOVEMENT");
    ta_guardpassage(7, 0, 23, 0, "NC_HUT22_OUT_MOVEMENT");
};

instance org_841_silas(npc_default) {
    name = "Ñèëàñ";
    npctype = npctype_main;
    guild = gil_org;
    level = 15;
    voice = 6;
    id = 841;
    attribute[atr_strength] /*4*/ = 80;
    attribute[atr_dexterity] /*5*/ = 60;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 220;
    attribute[atr_hitpoints] /*0*/ = 220;
    mdl_setvisual(org_841_silas, "HUMANS.MDS");
    mdl_applyoverlaymds(org_841_silas, "Humans_Relaxed.mds");
    mdl_setvisualbody(org_841_silas, "hum_body_Naked0", 0, 3, "Hum_Head_FatBald", 5, 1, org_armor_h /*4134*/);
    b_scale(org_841_silas);
    mdl_setmodelfatness(org_841_silas, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_841_silas, npc_talent_bow, 1);
    npc_settalentskill(org_841_silas, npc_talent_1h, 2);
    createinvitem(org_841_silas, itmi_stuff_plate_01);
    createinvitem(org_841_silas, itmi_stuff_barbknife_01);
    createinvitem(org_841_silas, itmi_stuff_cup_01);
    createinvitem(org_841_silas, itfomutton);
    createinvitem(org_841_silas, itfoloaf);
    createinvitem(org_841_silas, itat_teeth_01);
    createinvitems(org_841_silas, itkelockpick, 3);
    createinvitems(org_841_silas, itminugget, 18);
    createinvitems(org_841_silas, itforice, 8);
    createinvitems(org_841_silas, itfobooze, 3);
    createinvitems(org_841_silas, itlstorch, 2);
    createinvitems(org_841_silas, itfo_potion_health_01, 3);
    createinvitems(org_841_silas, itamarrow, 100);
    equipitem(org_841_silas, silas_axt /*4987*/);
    equipitem(org_841_silas, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_841;
};

func void rtn_start_841() {
    ta_boss(10, 0, 3, 0, "NC_TAVERN_ROOM04");
    ta_sleep(3, 0, 10, 0, "NC_TAVERN_BACKROOM09");
};

instance org_842_shrike(npc_default) {
    name = "Øðàéê";
    npctype = npctype_main;
    guild = gil_org;
    level = 6;
    voice = 7;
    id = 842;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 136;
    attribute[atr_hitpoints] /*0*/ = 136;
    mdl_setvisual(org_842_shrike, "HUMANS.MDS");
    mdl_setvisualbody(org_842_shrike, "hum_body_Naked0", 0, 2, "Hum_Head_Thief", 9, 1, org_armor_l /*4132*/);
    b_scale(org_842_shrike);
    mdl_setmodelfatness(org_842_shrike, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_842_shrike, npc_talent_bow, 1);
    npc_settalentskill(org_842_shrike, npc_talent_1h, 1);
    createinvitem(org_842_shrike, itmi_stuff_barbknife_01);
    createinvitem(org_842_shrike, itmi_stuff_cup_01);
    createinvitem(org_842_shrike, itfomutton);
    createinvitem(org_842_shrike, itfoloaf);
    createinvitem(org_842_shrike, itat_teeth_01);
    createinvitems(org_842_shrike, itkelockpick, 2);
    createinvitems(org_842_shrike, itminugget, 15);
    createinvitems(org_842_shrike, itforice, 7);
    createinvitems(org_842_shrike, itfobooze, 3);
    createinvitems(org_842_shrike, itlstorch, 2);
    createinvitems(org_842_shrike, itfo_potion_health_01, 2);
    createinvitems(org_842_shrike, itamarrow, 20);
    equipitem(org_842_shrike, itmw_1h_mace_02 /*4398*/);
    equipitem(org_842_shrike, itrw_bow_small_02 /*4872*/);
    daily_routine = rtn_prestart_842;
};

func void rtn_prestart_842() {
    ta_sleep(23, 30, 8, 0, "NC_HUT01_IN");
    ta_repairhut(8, 0, 23, 30, "NC_HUT01_OUT");
};

func void rtn_start_842() {
    ta_sleep(23, 30, 8, 0, "NC_HUT18_IN");
    ta_smoke(8, 0, 23, 30, "NC_PATH09");
};

instance org_843_sharky(npc_default) {
    name = "Øàðêè";
    npctype = npctype_main;
    guild = gil_org;
    level = 8;
    voice = 10;
    id = 843;
    attribute[atr_strength] /*4*/ = 40;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 136;
    attribute[atr_hitpoints] /*0*/ = 136;
    mdl_setvisual(org_843_sharky, "HUMANS.MDS");
    mdl_applyoverlaymds(org_843_sharky, "Humans_Relaxed.mds");
    mdl_setvisualbody(org_843_sharky, "hum_body_Naked0", 0, 3, "Hum_Head_FatBald", 6, 1, org_armor_l /*4132*/);
    b_scale(org_843_sharky);
    mdl_setmodelfatness(org_843_sharky, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_843_sharky, npc_talent_bow, 1);
    npc_settalentskill(org_843_sharky, npc_talent_1h, 1);
    b_give_sharkychapter1weapons();
    createinvitems(org_843_sharky, itkelockpick, 15);
    createinvitems(org_843_sharky, itminugget, 50);
    createinvitems(org_843_sharky, itforice, 10);
    createinvitems(org_843_sharky, itfobooze, 5);
    createinvitems(org_843_sharky, itlstorch, 5);
    createinvitems(org_843_sharky, itfo_potion_health_01, 5);
    daily_routine = rtn_start_843;
};

func void rtn_start_843() {
    ta_sleep(3, 0, 8, 0, "NC_HUT25_IN");
    ta_sitaround(8, 0, 0, 0, "NC_HUT25_OUT");
    ta_standaround(0, 0, 3, 0, "NC_TAVERN_BAR");
};

instance org_844_lefty(npc_default) {
    name = "Ëåôòè";
    npctype = npctype_main;
    guild = gil_org;
    level = 8;
    voice = 7;
    id = 844;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 136;
    attribute[atr_hitpoints] /*0*/ = 136;
    mdl_setvisual(org_844_lefty, "HUMANS.MDS");
    mdl_applyoverlaymds(org_844_lefty, "Humans_Relaxed.mds");
    mdl_setvisualbody(org_844_lefty, "hum_body_Naked0", 0, 1, "Hum_Head_Bald", 37, 2, org_armor_l /*4132*/);
    b_scale(org_844_lefty);
    mdl_setmodelfatness(org_844_lefty, 0.0);
    fight_tactic = fai_human_strong;
    senses = (sense_see | sense_hear) | sense_smell;
    npc_settalentskill(org_844_lefty, npc_talent_bow, 1);
    npc_settalentskill(org_844_lefty, npc_talent_1h, 1);
    createinvitem(org_844_lefty, itmi_stuff_plate_01);
    createinvitem(org_844_lefty, itmi_stuff_cup_01);
    createinvitem(org_844_lefty, itfoloaf);
    createinvitem(org_844_lefty, itat_claws_01);
    createinvitems(org_844_lefty, itkelockpick, 3);
    createinvitems(org_844_lefty, itminugget, 13);
    createinvitems(org_844_lefty, itforice, 6);
    createinvitems(org_844_lefty, itfobooze, 3);
    createinvitems(org_844_lefty, itlstorch, 2);
    createinvitems(org_844_lefty, itfo_potion_health_01, 3);
    createinvitems(org_844_lefty, itamarrow, 20);
    equipitem(org_844_lefty, itmw_1h_mace_03 /*4399*/);
    equipitem(org_844_lefty, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_844;
};

func void rtn_start_844() {
    ta_sitcampfire(19, 0, 8, 0, "NC_PATH86_MOVEMENT");
    ta_smalltalk(8, 0, 19, 0, "NC_PATH53");
};

instance org_845_schlaeger(npc_default) {
    name = name_schlaeger;
    npctype = npctype_main;
    guild = gil_org;
    level = 4;
    voice = 13;
    id = 845;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 88;
    attribute[atr_hitpoints] /*0*/ = 88;
    mdl_setvisual(org_845_schlaeger, "HUMANS.MDS");
    mdl_applyoverlaymds(org_845_schlaeger, "Humans_Relaxed.mds");
    mdl_setvisualbody(org_845_schlaeger, "hum_body_Naked0", 0, 2, "Hum_Head_FatBald", 10, 1, org_armor_l /*4132*/);
    b_scale(org_845_schlaeger);
    mdl_setmodelfatness(org_845_schlaeger, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_845_schlaeger, npc_talent_bow, 1);
    npc_settalentskill(org_845_schlaeger, npc_talent_1h, 1);
    npc_settalentskill(org_845_schlaeger, npc_talent_sneak, 1);
    createinvitem(org_845_schlaeger, itmi_stuff_plate_01);
    createinvitem(org_845_schlaeger, itmi_stuff_cup_01);
    createinvitem(org_845_schlaeger, itat_claws_01);
    createinvitems(org_845_schlaeger, itkelockpick, 1);
    createinvitems(org_845_schlaeger, itminugget, 12);
    createinvitems(org_845_schlaeger, itforice, 10);
    createinvitems(org_845_schlaeger, itfobooze, 3);
    createinvitems(org_845_schlaeger, itlstorch, 1);
    createinvitems(org_845_schlaeger, itfo_potion_health_01, 1);
    equipitem(org_845_schlaeger, itmw_1h_mace_01 /*4397*/);
    daily_routine = rtn_start_845;
};

func void rtn_start_845() {
    ta_stand(8, 10, 20, 20, "NC_PATH69");
    ta_sitcampfire(20, 20, 8, 10, "NC_PATH53");
};

instance org_846_schlaeger(npc_default) {
    name = name_schlaeger;
    npctype = npctype_main;
    guild = gil_org;
    level = 4;
    voice = 7;
    id = 846;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 88;
    attribute[atr_hitpoints] /*0*/ = 88;
    mdl_setvisual(org_846_schlaeger, "HUMANS.MDS");
    mdl_applyoverlaymds(org_846_schlaeger, "Humans_Relaxed.mds");
    mdl_setvisualbody(org_846_schlaeger, "hum_body_Naked0", 1, 0, "Hum_Head_FatBald", 12, 2, org_armor_l /*4132*/);
    b_scale(org_846_schlaeger);
    mdl_setmodelfatness(org_846_schlaeger, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_846_schlaeger, npc_talent_bow, 1);
    npc_settalentskill(org_846_schlaeger, npc_talent_1h, 1);
    npc_settalentskill(org_846_schlaeger, npc_talent_sneak, 1);
    createinvitem(org_846_schlaeger, itmi_stuff_barbknife_01);
    createinvitem(org_846_schlaeger, itmi_stuff_cup_01);
    createinvitem(org_846_schlaeger, itfomutton);
    createinvitem(org_846_schlaeger, itat_teeth_01);
    createinvitems(org_846_schlaeger, itkelockpick, 1);
    createinvitems(org_846_schlaeger, itminugget, 9);
    createinvitems(org_846_schlaeger, itforice, 9);
    createinvitems(org_846_schlaeger, itfobooze, 3);
    createinvitems(org_846_schlaeger, itlstorch, 1);
    createinvitems(org_846_schlaeger, itfo_potion_health_01, 2);
    equipitem(org_846_schlaeger, itmw_1h_mace_01 /*4397*/);
    daily_routine = rtn_start_846;
};

func void rtn_start_846() {
    ta_sitcampfire(20, 15, 8, 15, "NC_PATH86_MOVEMENT");
    ta_smalltalk(8, 15, 20, 15, "NC_PATH53");
};

instance org_850_wedge(npc_default) {
    name = "Âåäæ";
    npctype = npctype_main;
    guild = gil_org;
    level = 11;
    voice = 5;
    id = 850;
    attribute[atr_strength] /*4*/ = 50;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 172;
    attribute[atr_hitpoints] /*0*/ = 172;
    mdl_setvisual(org_850_wedge, "HUMANS.MDS");
    mdl_applyoverlaymds(org_850_wedge, "Humans_Relaxed.mds");
    mdl_setvisualbody(org_850_wedge, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 37, 1, org_armor_m /*4133*/);
    b_scale(org_850_wedge);
    mdl_setmodelfatness(org_850_wedge, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_850_wedge, npc_talent_bow, 1);
    npc_settalentskill(org_850_wedge, npc_talent_2h, 1);
    npc_settalentskill(org_850_wedge, npc_talent_1h, 1);
    createinvitem(org_850_wedge, itmi_stuff_plate_01);
    createinvitem(org_850_wedge, itfomutton);
    createinvitem(org_850_wedge, itfoloaf);
    createinvitem(org_850_wedge, itat_claws_01);
    createinvitems(org_850_wedge, itkelockpick, 2);
    createinvitems(org_850_wedge, itminugget, 14);
    createinvitems(org_850_wedge, itforice, 8);
    createinvitems(org_850_wedge, itfobooze, 3);
    createinvitems(org_850_wedge, itlstorch, 2);
    createinvitems(org_850_wedge, itfo_potion_health_01, 2);
    createinvitems(org_850_wedge, itamarrow, 20);
    equipitem(org_850_wedge, itmw_1h_mace_war_01 /*4406*/);
    equipitem(org_850_wedge, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_850;
};

func void rtn_start_850() {
    ta_sleep(0, 0, 8, 0, "NC_HUT17_IN");
    ta_smalltalk(8, 0, 0, 0, "NC_PATH06");
};

instance org_851_butch(npc_default) {
    name = "Áóò÷";
    npctype = npctype_main;
    guild = gil_org;
    level = 15;
    voice = 13;
    id = 851;
    attribute[atr_strength] /*4*/ = 80;
    attribute[atr_dexterity] /*5*/ = 60;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 220;
    attribute[atr_hitpoints] /*0*/ = 220;
    mdl_setvisual(org_851_butch, "HUMANS.MDS");
    mdl_applyoverlaymds(org_851_butch, "Humans_Relaxed.mds");
    mdl_setvisualbody(org_851_butch, "hum_body_Naked0", 0, 1, "Hum_Head_Bald", 36, 1, org_armor_h /*4134*/);
    b_scale(org_851_butch);
    mdl_setmodelfatness(org_851_butch, 0.0);
    fight_tactic = fai_human_master;
    npc_settalentskill(org_851_butch, npc_talent_bow, 1);
    npc_settalentskill(org_851_butch, npc_talent_1h, 1);
    createinvitem(org_851_butch, itmi_stuff_plate_01);
    createinvitem(org_851_butch, itmi_stuff_cup_01);
    createinvitem(org_851_butch, itfomutton);
    createinvitem(org_851_butch, itat_claws_01);
    createinvitems(org_851_butch, itkelockpick, 1);
    createinvitems(org_851_butch, itminugget, 13);
    createinvitems(org_851_butch, itforice, 8);
    createinvitems(org_851_butch, itfobooze, 3);
    createinvitems(org_851_butch, itlstorch, 2);
    createinvitems(org_851_butch, itfo_potion_health_01, 1);
    createinvitems(org_851_butch, itamarrow, 20);
    equipitem(org_851_butch, itmw_1h_mace_war_02 /*4407*/);
    equipitem(org_851_butch, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_851;
};

func void rtn_start_851() {
    ta_sleep(1, 0, 7, 30, "NC_HUT15_IN");
    ta_standaround(7, 30, 1, 0, "NC_HUT16_OUT");
};

instance org_855_wolf(npc_default) {
    name = "Âîëê";
    npctype = npctype_main;
    guild = gil_org;
    level = 11;
    voice = 9;
    id = 855;
    attribute[atr_strength] /*4*/ = 50;
    attribute[atr_dexterity] /*5*/ = 90;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 172;
    attribute[atr_hitpoints] /*0*/ = 172;
    mdl_setvisual(org_855_wolf, "HUMANS.MDS");
    mdl_applyoverlaymds(org_855_wolf, "Humans_Relaxed.mds");
    mdl_setvisualbody(org_855_wolf, "hum_body_Naked0", 0, 1, "Hum_Head_Bald", 38, 1, org_armor_h /*4134*/);
    b_scale(org_855_wolf);
    mdl_setmodelfatness(org_855_wolf, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_855_wolf, npc_talent_bow, 1);
    npc_settalentskill(org_855_wolf, npc_talent_2h, 1);
    npc_settalentskill(org_855_wolf, npc_talent_1h, 1);
    b_give_wolfchapter1weapons();
    createinvitem(org_855_wolf, itmi_stuff_plate_01);
    createinvitem(org_855_wolf, itmi_stuff_barbknife_01);
    createinvitem(org_855_wolf, itfomutton);
    createinvitem(org_855_wolf, itat_claws_01);
    createinvitems(org_855_wolf, itkelockpick, 1);
    createinvitems(org_855_wolf, itminugget, 12);
    createinvitems(org_855_wolf, itforice, 8);
    createinvitems(org_855_wolf, itfobooze, 1);
    createinvitems(org_855_wolf, itlstorch, 1);
    createinvitems(org_855_wolf, itfo_potion_health_01, 3);
    createinvitems(org_855_wolf, itamarrow, 20);
    createinvitems(org_855_wolf, itfo_wineberrys_01, 5);
    equipitem(org_855_wolf, itmw_1h_mace_war_01 /*4406*/);
    daily_routine = rtn_start_855;
};

func void rtn_start_855() {
    ta_sleep(1, 0, 7, 30, "NC_HUT11_IN");
    ta_boss(7, 30, 10, 30, "NC_HUT11_OUT");
    ta_roastscavenger(10, 30, 20, 30, "NC_PLACE04");
    ta_sitaround(20, 30, 1, 0, "NC_PLACE04");
};

instance org_857_calash(npc_default) {
    name = "Êàëàø";
    npctype = npctype_main;
    guild = gil_org;
    level = 11;
    voice = 2;
    id = 857;
    attribute[atr_strength] /*4*/ = 50;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 172;
    attribute[atr_hitpoints] /*0*/ = 172;
    mdl_setvisual(org_857_calash, "HUMANS.MDS");
    mdl_applyoverlaymds(org_857_calash, "Humans_Relaxed.mds");
    mdl_setvisualbody(org_857_calash, "hum_body_Naked0", 0, 2, "Hum_Head_Pony", 8, 1, org_armor_m /*4133*/);
    b_scale(org_857_calash);
    mdl_setmodelfatness(org_857_calash, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_857_calash, npc_talent_bow, 1);
    npc_settalentskill(org_857_calash, npc_talent_2h, 1);
    npc_settalentskill(org_857_calash, npc_talent_1h, 1);
    createinvitem(org_857_calash, itforice);
    createinvitem(org_857_calash, itfoloaf);
    createinvitem(org_857_calash, itfobooze);
    createinvitem(org_857_calash, itkelockpick);
    createinvitems(org_857_calash, itminugget, 5);
    createinvitems(org_857_calash, itamarrow, 10);
    equipitem(org_857_calash, itmw_1h_mace_war_01 /*4406*/);
    equipitem(org_857_calash, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_prestart_857;
};

func void rtn_prestart_857() {
    ta_position(0, 0, 12, 0, "OM_085");
    ta_position(12, 0, 24, 0, "OM_085");
};

func void rtn_start_857() {
    ta_position(0, 0, 12, 0, "OM_085");
    ta_position(12, 0, 24, 0, "OM_085");
};

func void rtn_omfull_857() {
    ta_position(0, 0, 12, 0, "OM_085");
    ta_position(12, 0, 24, 0, "OM_085");
};

instance org_858_quentin(npc_default) {
    name = "Êâåíòèí";
    npctype = npctype_rogue;
    guild = gil_none;
    level = 12;
    voice = 7;
    id = 858;
    attribute[atr_strength] /*4*/ = 60;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 184;
    attribute[atr_hitpoints] /*0*/ = 184;
    mdl_setvisual(org_858_quentin, "HUMANS.MDS");
    mdl_applyoverlaymds(org_858_quentin, "Humans_Relaxed.mds");
    mdl_setvisualbody(org_858_quentin, "hum_body_Naked0", 0, 2, "Hum_Head_Pony", 8, 1, org_armor_m /*4133*/);
    b_scale(org_858_quentin);
    mdl_setmodelfatness(org_858_quentin, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_858_quentin, npc_talent_bow, 1);
    npc_settalentskill(org_858_quentin, npc_talent_2h, 1);
    npc_settalentskill(org_858_quentin, npc_talent_1h, 1);
    createinvitem(org_858_quentin, itmi_stuff_plate_01);
    createinvitem(org_858_quentin, itmi_stuff_barbknife_01);
    createinvitem(org_858_quentin, itfoloaf);
    createinvitem(org_858_quentin, itat_claws_01);
    createinvitems(org_858_quentin, itkelockpick, 1);
    createinvitems(org_858_quentin, itminugget, 15);
    createinvitems(org_858_quentin, itforice, 8);
    createinvitems(org_858_quentin, itfobooze, 3);
    createinvitems(org_858_quentin, itlstorch, 2);
    createinvitems(org_858_quentin, itfo_potion_health_01, 2);
    createinvitems(org_858_quentin, itamarrow, 20);
    equipitem(org_858_quentin, itmw_1h_mace_war_01 /*4406*/);
    equipitem(org_858_quentin, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_858;
};

func void rtn_start_858() {
    ta_standaround(13, 0, 14, 0, "LOCATION_11_13");
    ta_standaround(14, 0, 13, 0, "LOCATION_11_13");
};

func void rtn_omfull_858() {
    ta_standaround(13, 0, 14, 0, "LOCATION_11_13");
    ta_standaround(14, 0, 13, 0, "LOCATION_11_13");
};

instance org_859_aidan(npc_default) {
    name = "Ýéäàí";
    npctype = npctype_main;
    guild = gil_org;
    level = 15;
    voice = 13;
    id = 859;
    attribute[atr_strength] /*4*/ = 50;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 192;
    attribute[atr_hitpoints] /*0*/ = 192;
    mdl_setvisual(org_859_aidan, "HUMANS.MDS");
    mdl_applyoverlaymds(org_859_aidan, "Humans_Relaxed.mds");
    mdl_setvisualbody(org_859_aidan, "hum_body_Naked0", 0, 2, "Hum_Head_Thief", 9, 1, org_armor_m /*4133*/);
    b_scale(org_859_aidan);
    mdl_setmodelfatness(org_859_aidan, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_859_aidan, npc_talent_bow, 1);
    npc_settalentskill(org_859_aidan, npc_talent_1h, 1);
    createinvitem(org_859_aidan, itmi_stuff_barbknife_01);
    createinvitem(org_859_aidan, itmi_stuff_cup_01);
    createinvitem(org_859_aidan, itfomutton);
    createinvitem(org_859_aidan, itat_teeth_01);
    createinvitem(org_859_aidan, itfobooze);
    createinvitems(org_859_aidan, itkelockpick, 2);
    createinvitems(org_859_aidan, itminugget, 13);
    createinvitems(org_859_aidan, itforice, 7);
    createinvitems(org_859_aidan, itfobooze, 3);
    createinvitems(org_859_aidan, itlstorch, 2);
    createinvitems(org_859_aidan, itfo_potion_health_01, 1);
    createinvitems(org_859_aidan, itamarrow, 20);
    equipitem(org_859_aidan, itmw_1h_mace_03 /*4399*/);
    equipitem(org_859_aidan, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_859;
};

func void rtn_start_859() {
    ta_standaround(7, 0, 22, 0, "OW_WOODRUIN_WOLF_SPAWN");
    ta_sitcampfire(22, 0, 7, 0, "OW_WOODRUIN_WOLF_SPAWN");
};

instance org_860_renyu(npc_default) {
    name = "Êðóòèëüùèê áîëîòíèêà";
    npctype = npctype_main;
    guild = gil_org;
    level = 8;
    voice = 6;
    id = 860;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 136;
    attribute[atr_hitpoints] /*0*/ = 136;
    mdl_setvisual(org_860_renyu, "HUMANS.MDS");
    mdl_applyoverlaymds(org_860_renyu, "Humans_Relaxed.mds");
    mdl_setvisualbody(org_860_renyu, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 36, 2, org_armor_l /*4132*/);
    b_scale(org_860_renyu);
    mdl_setmodelfatness(org_860_renyu, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_860_renyu, npc_talent_bow, 1);
    npc_settalentskill(org_860_renyu, npc_talent_1h, 1);
    createinvitems(org_860_renyu, itminugget, 80);
    createinvitems(org_860_renyu, itfo_potion_health_01, 2);
    equipitem(org_860_renyu, itmw_1h_mace_03 /*4399*/);
    daily_routine = rtn_start_860;
};

func void rtn_start_860() {
    ta_smoke(0, 0, 8, 0, "LOCATION_23_CAVE_1_IN");
    ta_smoke(8, 0, 24, 0, "LOCATION_23_CAVE_1_IN");
};

func void rtn_arbeitslos_860() {
    ta_standaround(20, 0, 8, 0, "LOCATION_11_08");
    ta_standaround(8, 0, 20, 0, "LOCATION_11_08");
};

instance org_861_killian(npc_default) {
    name = "Êðóòèëüùèê áîëîòíèêà";
    npctype = npctype_main;
    guild = gil_org;
    level = 8;
    voice = 13;
    id = 861;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 136;
    attribute[atr_hitpoints] /*0*/ = 136;
    mdl_setvisual(org_861_killian, "HUMANS.MDS");
    mdl_applyoverlaymds(org_861_killian, "Humans_Relaxed.mds");
    mdl_setvisualbody(org_861_killian, "hum_body_Naked0", 0, 1, "Hum_Head_Bald", 38, 4, org_armor_l /*4132*/);
    b_scale(org_861_killian);
    mdl_setmodelfatness(org_861_killian, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_861_killian, npc_talent_bow, 1);
    npc_settalentskill(org_861_killian, npc_talent_1h, 1);
    createinvitems(org_861_killian, itkelockpick, 1);
    createinvitems(org_861_killian, itminugget, 30);
    createinvitems(org_861_killian, itforice, 5);
    createinvitems(org_861_killian, itfobooze, 4);
    createinvitems(org_861_killian, itlstorch, 2);
    createinvitems(org_861_killian, itfo_potion_health_01, 2);
    equipitem(org_861_killian, itmw_1h_mace_02 /*4398*/);
    daily_routine = rtn_start_861;
};

func void rtn_start_861() {
    ta_potionalchemy(0, 0, 8, 0, "LOCATION_23_CAVE_1_02");
    ta_potionalchemy(8, 0, 24, 0, "LOCATION_23_CAVE_1_02");
};

func void rtn_arbeitslos_861() {
    ta_standaround(20, 0, 8, 0, "LOCATION_11_08");
    ta_standaround(8, 0, 20, 0, "LOCATION_11_08");
};

instance org_862_jacko(npc_default) {
    name = "Äæàêî";
    npctype = npctype_main;
    guild = gil_org;
    level = 8;
    voice = 6;
    id = 862;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 136;
    attribute[atr_hitpoints] /*0*/ = 136;
    mdl_setvisual(org_862_jacko, "HUMANS.MDS");
    mdl_applyoverlaymds(org_862_jacko, "Humans_Relaxed.mds");
    mdl_setvisualbody(org_862_jacko, "hum_body_Naked0", 0, 1, "Hum_Head_Bald", 37, 2, org_armor_l /*4132*/);
    b_scale(org_862_jacko);
    mdl_setmodelfatness(org_862_jacko, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_862_jacko, npc_talent_bow, 1);
    npc_settalentskill(org_862_jacko, npc_talent_1h, 1);
    createinvitems(org_862_jacko, itkelockpick, 3);
    createinvitems(org_862_jacko, itminugget, 95);
    createinvitems(org_862_jacko, itlstorch, 1);
    createinvitems(org_862_jacko, itfo_potion_health_01, 1);
    createinvitems(org_862_jacko, itamarrow, 20);
    equipitem(org_862_jacko, itmw_1h_mace_03 /*4399*/);
    equipitem(org_862_jacko, itrw_bow_small_03 /*4873*/);
    daily_routine = rtn_start_862;
};

func void rtn_start_862() {
    ta_guard(20, 0, 8, 0, "LOCATION_23_CAVE_1_IN");
    ta_guard(8, 0, 20, 0, "LOCATION_23_CAVE_1_IN");
};

func void rtn_arbeitslos_862() {
    ta_standaround(20, 0, 8, 0, "LOCATION_11_08");
    ta_standaround(8, 0, 20, 0, "LOCATION_11_08");
};

instance org_863_raeuber(npc_default) {
    name = name_raeuber;
    npctype = npctype_rogue;
    guild = gil_none;
    level = 12;
    voice = 7;
    id = 863;
    attribute[atr_strength] /*4*/ = 60;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 184;
    attribute[atr_hitpoints] /*0*/ = 184;
    mdl_setvisual(org_863_raeuber, "HUMANS.MDS");
    mdl_applyoverlaymds(org_863_raeuber, "Humans_Relaxed.mds");
    mdl_setvisualbody(org_863_raeuber, "hum_body_Naked0", 0, 3, "Hum_Head_FatBald", 6, 1, org_armor_l /*4132*/);
    b_scale(org_863_raeuber);
    mdl_setmodelfatness(org_863_raeuber, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_863_raeuber, npc_talent_bow, 1);
    npc_settalentskill(org_863_raeuber, npc_talent_1h, 1);
    createinvitem(org_863_raeuber, itmi_stuff_barbknife_01);
    createinvitem(org_863_raeuber, itmi_stuff_cup_01);
    createinvitem(org_863_raeuber, itfoloaf);
    createinvitem(org_863_raeuber, itat_teeth_01);
    createinvitems(org_863_raeuber, itkelockpick, 1);
    createinvitems(org_863_raeuber, itminugget, 12);
    createinvitems(org_863_raeuber, itforice, 7);
    createinvitems(org_863_raeuber, itfobooze, 1);
    createinvitems(org_863_raeuber, itlstorch, 2);
    createinvitems(org_863_raeuber, itfo_potion_health_01, 3);
    createinvitems(org_863_raeuber, itamarrow, 20);
    equipitem(org_863_raeuber, itmw_1h_mace_03 /*4399*/);
    equipitem(org_863_raeuber, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_863;
};

func void rtn_start_863() {
    ta_roastscavenger(13, 0, 14, 0, "LOCATION_11_12");
    ta_roastscavenger(14, 0, 13, 0, "LOCATION_11_12");
};

func void rtn_omfull_863() {
    ta_roastscavenger(13, 0, 14, 0, "LOCATION_11_12");
    ta_roastscavenger(14, 0, 13, 0, "LOCATION_11_12");
};

func void rtn_fmtaken_863() {
    ta_roastscavenger(13, 0, 14, 0, "LOCATION_11_12");
    ta_roastscavenger(14, 0, 13, 0, "LOCATION_11_12");
};

func void rtn_orcassault_863() {
    ta_roastscavenger(13, 0, 14, 0, "LOCATION_11_12");
    ta_roastscavenger(14, 0, 13, 0, "LOCATION_11_12");
};

instance org_864_raeuber(npc_default) {
    name = name_raeuber;
    npctype = npctype_rogue;
    guild = gil_none;
    level = 12;
    voice = 13;
    id = 864;
    attribute[atr_strength] /*4*/ = 60;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 184;
    attribute[atr_hitpoints] /*0*/ = 184;
    mdl_setvisual(org_864_raeuber, "HUMANS.MDS");
    mdl_setvisualbody(org_864_raeuber, "hum_body_Naked0", 0, 2, "Hum_Head_Thief", 9, 1, org_armor_l /*4132*/);
    b_scale(org_864_raeuber);
    mdl_setmodelfatness(org_864_raeuber, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_864_raeuber, npc_talent_bow, 1);
    npc_settalentskill(org_864_raeuber, npc_talent_1h, 1);
    createinvitem(org_864_raeuber, itmi_stuff_barbknife_01);
    createinvitem(org_864_raeuber, itfoloaf);
    createinvitem(org_864_raeuber, itat_teeth_01);
    createinvitems(org_864_raeuber, itkelockpick, 1);
    createinvitems(org_864_raeuber, itminugget, 9);
    createinvitems(org_864_raeuber, itforice, 5);
    createinvitems(org_864_raeuber, itfobooze, 5);
    createinvitems(org_864_raeuber, itlstorch, 2);
    createinvitems(org_864_raeuber, itfo_potion_health_01, 1);
    createinvitems(org_864_raeuber, itamarrow, 20);
    equipitem(org_864_raeuber, itmw_1h_mace_03 /*4399*/);
    equipitem(org_864_raeuber, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_864;
};

func void rtn_start_864() {
    ta_standaround(13, 0, 14, 0, "LOCATION_11_14");
    ta_standaround(14, 0, 13, 0, "LOCATION_11_14");
};

func void rtn_omfull_864() {
    ta_standaround(13, 0, 14, 0, "LOCATION_11_14");
    ta_standaround(14, 0, 13, 0, "LOCATION_11_14");
};

func void rtn_fmtaken_864() {
    ta_standaround(13, 0, 14, 0, "LOCATION_11_14");
    ta_standaround(14, 0, 13, 0, "LOCATION_11_14");
};

func void rtn_orcassault_864() {
    ta_standaround(13, 0, 14, 0, "LOCATION_11_14");
    ta_standaround(14, 0, 13, 0, "LOCATION_11_14");
};

instance org_865_raeuber(npc_default) {
    name = name_raeuber;
    npctype = npctype_rogue;
    guild = gil_none;
    level = 12;
    voice = 13;
    id = 865;
    attribute[atr_strength] /*4*/ = 60;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 184;
    attribute[atr_hitpoints] /*0*/ = 184;
    mdl_setvisual(org_865_raeuber, "HUMANS.MDS");
    mdl_applyoverlaymds(org_865_raeuber, "Humans_Relaxed.mds");
    mdl_setvisualbody(org_865_raeuber, "hum_body_Naked0", 0, 1, "Hum_Head_Thief", 35, 2, org_armor_l /*4132*/);
    b_scale(org_865_raeuber);
    mdl_setmodelfatness(org_865_raeuber, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_865_raeuber, npc_talent_bow, 1);
    npc_settalentskill(org_865_raeuber, npc_talent_1h, 1);
    createinvitem(org_865_raeuber, itmi_stuff_barbknife_01);
    createinvitem(org_865_raeuber, itmi_stuff_cup_01);
    createinvitem(org_865_raeuber, itfoloaf);
    createinvitem(org_865_raeuber, itat_claws_01);
    createinvitems(org_865_raeuber, itkelockpick, 1);
    createinvitems(org_865_raeuber, itminugget, 15);
    createinvitems(org_865_raeuber, itforice, 5);
    createinvitems(org_865_raeuber, itfobooze, 2);
    createinvitems(org_865_raeuber, itlstorch, 2);
    createinvitems(org_865_raeuber, itfo_potion_health_01, 2);
    createinvitems(org_865_raeuber, itamarrow, 20);
    equipitem(org_865_raeuber, itmw_1h_mace_03 /*4399*/);
    equipitem(org_865_raeuber, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_865;
};

func void rtn_start_865() {
    ta_standaround(13, 0, 14, 0, "LOCATION_11_07");
    ta_standaround(14, 0, 13, 0, "LOCATION_11_07");
};

func void rtn_omfull_865() {
    ta_standaround(13, 0, 14, 0, "LOCATION_11_07");
    ta_standaround(14, 0, 13, 0, "LOCATION_11_07");
};

func void rtn_fmtaken_865() {
    ta_standaround(13, 0, 14, 0, "LOCATION_11_07");
    ta_standaround(14, 0, 13, 0, "LOCATION_11_07");
};

func void rtn_orcassault_865() {
    ta_standaround(13, 0, 14, 0, "LOCATION_11_07");
    ta_standaround(14, 0, 13, 0, "LOCATION_11_07");
};

instance org_866_raeuber(npc_default) {
    name = name_raeuber;
    npctype = npctype_rogue;
    guild = gil_none;
    level = 12;
    voice = 6;
    id = 866;
    attribute[atr_strength] /*4*/ = 60;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 184;
    attribute[atr_hitpoints] /*0*/ = 184;
    mdl_setvisual(org_866_raeuber, "HUMANS.MDS");
    mdl_setvisualbody(org_866_raeuber, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 36, 2, org_armor_l /*4132*/);
    b_scale(org_866_raeuber);
    mdl_setmodelfatness(org_866_raeuber, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_866_raeuber, npc_talent_bow, 1);
    npc_settalentskill(org_866_raeuber, npc_talent_1h, 1);
    createinvitem(org_866_raeuber, itfomutton);
    createinvitem(org_866_raeuber, itfoloaf);
    createinvitem(org_866_raeuber, itat_claws_01);
    createinvitems(org_866_raeuber, itkelockpick, 1);
    createinvitems(org_866_raeuber, itminugget, 13);
    createinvitems(org_866_raeuber, itforice, 6);
    createinvitems(org_866_raeuber, itfobooze, 2);
    createinvitems(org_866_raeuber, itlstorch, 2);
    createinvitems(org_866_raeuber, itfo_potion_health_01, 2);
    createinvitems(org_866_raeuber, itamarrow, 20);
    equipitem(org_866_raeuber, itmw_1h_mace_03 /*4399*/);
    equipitem(org_866_raeuber, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_866;
};

func void rtn_start_866() {
    ta_practicebow(13, 0, 14, 0, "LOCATION_11_14");
    ta_practicebow(14, 0, 13, 0, "LOCATION_11_14");
};

func void rtn_omfull_866() {
    ta_practicebow(13, 0, 14, 0, "LOCATION_11_14");
    ta_practicebow(14, 0, 13, 0, "LOCATION_11_14");
};

instance org_867_raeuber(npc_default) {
    name = name_raeuber;
    npctype = npctype_rogue;
    guild = gil_none;
    level = 12;
    voice = 13;
    id = 867;
    attribute[atr_strength] /*4*/ = 60;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 184;
    attribute[atr_hitpoints] /*0*/ = 184;
    mdl_setvisual(org_867_raeuber, "HUMANS.MDS");
    mdl_setvisualbody(org_867_raeuber, "hum_body_Naked0", 0, 1, "Hum_Head_Bald", 38, 4, org_armor_l /*4132*/);
    b_scale(org_867_raeuber);
    mdl_setmodelfatness(org_867_raeuber, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_867_raeuber, npc_talent_bow, 1);
    npc_settalentskill(org_867_raeuber, npc_talent_1h, 1);
    createinvitem(org_867_raeuber, itmi_stuff_plate_01);
    createinvitem(org_867_raeuber, itmi_stuff_cup_01);
    createinvitem(org_867_raeuber, itfoloaf);
    createinvitem(org_867_raeuber, itat_claws_01);
    createinvitems(org_867_raeuber, itkelockpick, 3);
    createinvitems(org_867_raeuber, itminugget, 14);
    createinvitems(org_867_raeuber, itforice, 8);
    createinvitems(org_867_raeuber, itfobooze, 3);
    createinvitems(org_867_raeuber, itlstorch, 2);
    createinvitems(org_867_raeuber, itfo_potion_health_01, 1);
    createinvitems(org_867_raeuber, itamarrow, 20);
    equipitem(org_867_raeuber, itmw_1h_mace_03 /*4399*/);
    equipitem(org_867_raeuber, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_867;
};

func void rtn_start_867() {
    ta_guard(13, 0, 14, 0, "LOCATION_11_02");
    ta_guard(14, 0, 13, 0, "LOCATION_11_02");
};

func void rtn_omfull_867() {
    ta_guard(13, 0, 14, 0, "LOCATION_11_02");
    ta_guard(14, 0, 13, 0, "LOCATION_11_02");
};

instance org_868_raeuber(npc_default) {
    name = name_raeuber;
    npctype = npctype_rogue;
    guild = gil_none;
    level = 12;
    voice = 6;
    id = 868;
    attribute[atr_strength] /*4*/ = 60;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 184;
    attribute[atr_hitpoints] /*0*/ = 184;
    mdl_setvisual(org_868_raeuber, "HUMANS.MDS");
    mdl_applyoverlaymds(org_868_raeuber, "Humans_Relaxed.mds");
    mdl_setvisualbody(org_868_raeuber, "hum_body_Naked0", 0, 1, "Hum_Head_Bald", 37, 2, org_armor_l /*4132*/);
    b_scale(org_868_raeuber);
    mdl_setmodelfatness(org_868_raeuber, 0.0);
    fight_tactic = fai_human_ranged;
    npc_settalentskill(org_868_raeuber, npc_talent_bow, 1);
    npc_settalentskill(org_868_raeuber, npc_talent_1h, 1);
    createinvitem(org_868_raeuber, itmi_stuff_barbknife_01);
    createinvitem(org_868_raeuber, itfomutton);
    createinvitem(org_868_raeuber, itfoloaf);
    createinvitem(org_868_raeuber, itat_claws_01);
    createinvitems(org_868_raeuber, itkelockpick, 1);
    createinvitems(org_868_raeuber, itminugget, 11);
    createinvitems(org_868_raeuber, itforice, 6);
    createinvitems(org_868_raeuber, itfobooze, 5);
    createinvitems(org_868_raeuber, itlstorch, 1);
    createinvitems(org_868_raeuber, itfo_potion_health_01, 1);
    createinvitems(org_868_raeuber, itamarrow, 20);
    equipitem(org_868_raeuber, itmw_1h_mace_03 /*4399*/);
    equipitem(org_868_raeuber, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_868;
};

func void rtn_start_868() {
    ta_guardpalisade(13, 0, 14, 0, "LOCATION_11_16");
    ta_guardpalisade(14, 0, 13, 0, "LOCATION_11_16");
};

func void rtn_omfull_868() {
    ta_guardpalisade(13, 0, 14, 0, "LOCATION_11_16");
    ta_guardpalisade(14, 0, 13, 0, "LOCATION_11_16");
};

func void rtn_fmtaken_868() {
    ta_guardpalisade(13, 0, 14, 0, "LOCATION_11_16");
    ta_guardpalisade(14, 0, 13, 0, "LOCATION_11_16");
};

func void rtn_orcassault_868() {
    ta_guardpalisade(13, 0, 14, 0, "LOCATION_11_16");
    ta_guardpalisade(14, 0, 13, 0, "LOCATION_11_16");
};

instance org_869_raeuber(npc_default) {
    name = name_raeuber;
    npctype = npctype_rogue;
    guild = gil_none;
    level = 12;
    voice = 13;
    id = 869;
    attribute[atr_strength] /*4*/ = 60;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 184;
    attribute[atr_hitpoints] /*0*/ = 184;
    mdl_setvisual(org_869_raeuber, "HUMANS.MDS");
    mdl_applyoverlaymds(org_869_raeuber, "Humans_Relaxed.mds");
    mdl_setvisualbody(org_869_raeuber, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 36, 2, org_armor_l /*4132*/);
    b_scale(org_869_raeuber);
    mdl_setmodelfatness(org_869_raeuber, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_869_raeuber, npc_talent_bow, 1);
    npc_settalentskill(org_869_raeuber, npc_talent_1h, 1);
    createinvitem(org_869_raeuber, itmi_stuff_plate_01);
    createinvitem(org_869_raeuber, itmi_stuff_cup_01);
    createinvitem(org_869_raeuber, itat_claws_01);
    createinvitems(org_869_raeuber, itkelockpick, 1);
    createinvitems(org_869_raeuber, itminugget, 11);
    createinvitems(org_869_raeuber, itforice, 5);
    createinvitems(org_869_raeuber, itfobooze, 3);
    createinvitems(org_869_raeuber, itlstorch, 3);
    createinvitems(org_869_raeuber, itfo_potion_health_01, 2);
    createinvitems(org_869_raeuber, itamarrow, 20);
    equipitem(org_869_raeuber, itmw_1h_mace_03 /*4399*/);
    equipitem(org_869_raeuber, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_869;
};

func void rtn_start_869() {
    ta_standaround(13, 0, 14, 0, "LOCATION_11_14");
    ta_standaround(14, 0, 13, 0, "LOCATION_11_14");
};

func void rtn_omfull_869() {
    ta_standaround(13, 0, 14, 0, "LOCATION_11_14");
    ta_standaround(14, 0, 13, 0, "LOCATION_11_14");
};

instance org_870_raeuber(npc_default) {
    name = name_raeuber;
    npctype = npctype_rogue;
    guild = gil_none;
    level = 12;
    voice = 7;
    id = 870;
    attribute[atr_strength] /*4*/ = 60;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 184;
    attribute[atr_hitpoints] /*0*/ = 184;
    mdl_setvisual(org_870_raeuber, "HUMANS.MDS");
    mdl_setvisualbody(org_870_raeuber, "hum_body_Naked0", 0, 2, "Hum_Head_Fighter", 9, 3, org_armor_l /*4132*/);
    b_scale(org_870_raeuber);
    mdl_setmodelfatness(org_870_raeuber, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_870_raeuber, npc_talent_bow, 1);
    npc_settalentskill(org_870_raeuber, npc_talent_1h, 1);
    createinvitem(org_870_raeuber, itmi_stuff_plate_01);
    createinvitem(org_870_raeuber, itmi_stuff_cup_01);
    createinvitem(org_870_raeuber, itfoloaf);
    createinvitem(org_870_raeuber, itat_claws_01);
    createinvitems(org_870_raeuber, itkelockpick, 1);
    createinvitems(org_870_raeuber, itminugget, 11);
    createinvitems(org_870_raeuber, itforice, 8);
    createinvitems(org_870_raeuber, itfobooze, 1);
    createinvitems(org_870_raeuber, itlstorch, 1);
    createinvitems(org_870_raeuber, itfo_potion_health_01, 2);
    createinvitems(org_870_raeuber, itamarrow, 20);
    equipitem(org_870_raeuber, itmw_1h_mace_03 /*4399*/);
    equipitem(org_870_raeuber, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_870;
};

func void rtn_start_870() {
    ta_sitaround(13, 0, 14, 0, "LOCATION_11_12");
    ta_sitaround(14, 0, 13, 0, "LOCATION_11_12");
};

func void rtn_omfull_870() {
    ta_sitaround(13, 0, 14, 0, "LOCATION_11_12");
    ta_sitaround(14, 0, 13, 0, "LOCATION_11_12");
};

func void rtn_fmtaken_870() {
    ta_sitaround(13, 0, 14, 0, "LOCATION_11_12");
    ta_sitaround(14, 0, 13, 0, "LOCATION_11_12");
};

func void rtn_orcassault_870() {
    ta_sitaround(13, 0, 14, 0, "LOCATION_11_12");
    ta_sitaround(14, 0, 13, 0, "LOCATION_11_12");
};

instance org_871_raeuber(npc_default) {
    name = name_raeuber;
    npctype = npctype_rogue;
    guild = gil_none;
    level = 12;
    voice = 7;
    id = 871;
    attribute[atr_strength] /*4*/ = 60;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 184;
    attribute[atr_hitpoints] /*0*/ = 184;
    mdl_setvisual(org_871_raeuber, "HUMANS.MDS");
    mdl_applyoverlaymds(org_871_raeuber, "Humans_Relaxed.mds");
    mdl_setvisualbody(org_871_raeuber, "hum_body_Naked0", 0, 1, "Hum_Head_Bald", 37, 2, org_armor_l /*4132*/);
    b_scale(org_871_raeuber);
    mdl_setmodelfatness(org_871_raeuber, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_871_raeuber, npc_talent_bow, 1);
    npc_settalentskill(org_871_raeuber, npc_talent_1h, 1);
    createinvitem(org_871_raeuber, itmi_stuff_plate_01);
    createinvitem(org_871_raeuber, itmi_stuff_cup_01);
    createinvitem(org_871_raeuber, itfoloaf);
    createinvitem(org_871_raeuber, itat_claws_01);
    createinvitems(org_871_raeuber, itkelockpick, 2);
    createinvitems(org_871_raeuber, itminugget, 11);
    createinvitems(org_871_raeuber, itforice, 6);
    createinvitems(org_871_raeuber, itfobooze, 1);
    createinvitems(org_871_raeuber, itlstorch, 2);
    createinvitems(org_871_raeuber, itfo_potion_health_01, 1);
    createinvitems(org_871_raeuber, itamarrow, 20);
    equipitem(org_871_raeuber, itmw_1h_mace_03 /*4399*/);
    equipitem(org_871_raeuber, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_871;
};

func void rtn_start_871() {
    ta_standaround(13, 0, 14, 0, "LOCATION_11_13");
    ta_standaround(14, 0, 13, 0, "LOCATION_11_13");
};

func void rtn_omfull_871() {
    ta_standaround(13, 0, 14, 0, "LOCATION_11_13");
    ta_standaround(14, 0, 13, 0, "LOCATION_11_13");
};

func void rtn_fmtaken_871() {
    ta_standaround(13, 0, 14, 0, "LOCATION_11_13");
    ta_standaround(14, 0, 13, 0, "LOCATION_11_13");
};

func void rtn_orcassault_871() {
    ta_standaround(13, 0, 14, 0, "LOCATION_11_13");
    ta_standaround(14, 0, 13, 0, "LOCATION_11_13");
};

instance org_873_cipher(npc_default) {
    name = "Ñàéôåð";
    npctype = npctype_main;
    guild = gil_org;
    level = 8;
    voice = 12;
    id = 873;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 136;
    attribute[atr_hitpoints] /*0*/ = 136;
    mdl_setvisual(org_873_cipher, "HUMANS.MDS");
    mdl_applyoverlaymds(org_873_cipher, "Humans_Relaxed.mds");
    mdl_setvisualbody(org_873_cipher, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 90, 2, org_armor_l /*4132*/);
    b_scale(org_873_cipher);
    mdl_setmodelfatness(org_873_cipher, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_873_cipher, npc_talent_bow, 1);
    npc_settalentskill(org_873_cipher, npc_talent_1h, 1);
    createinvitem(org_873_cipher, itmi_stuff_plate_01);
    createinvitem(org_873_cipher, itmi_stuff_barbknife_01);
    createinvitem(org_873_cipher, itmi_stuff_cup_01);
    createinvitem(org_873_cipher, itat_claws_01);
    createinvitems(org_873_cipher, itkelockpick, 3);
    createinvitems(org_873_cipher, itminugget, 500);
    createinvitems(org_873_cipher, itforice, 8);
    createinvitems(org_873_cipher, itfobooze, 3);
    createinvitems(org_873_cipher, itlstorch, 2);
    createinvitems(org_873_cipher, itfo_potion_health_01, 3);
    createinvitems(org_873_cipher, itamarrow, 20);
    equipitem(org_873_cipher, itmw_1h_mace_03 /*4399*/);
    equipitem(org_873_cipher, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_873;
};

func void rtn_start_873() {
    ta_sleep(3, 5, 8, 0, "NC_HUT24_IN");
    ta_standaround(8, 0, 3, 5, "NC_TAVERN_BAR");
};

instance org_874_raeuber(npc_default) {
    name = name_raeuber;
    npctype = npctype_rogue;
    guild = gil_none;
    level = 12;
    voice = 13;
    id = 874;
    attribute[atr_strength] /*4*/ = 60;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 184;
    attribute[atr_hitpoints] /*0*/ = 184;
    mdl_setvisual(org_874_raeuber, "HUMANS.MDS");
    mdl_applyoverlaymds(org_874_raeuber, "Humans_Relaxed.mds");
    mdl_setvisualbody(org_874_raeuber, "hum_body_Naked0", 0, 1, "Hum_Head_Bald", 38, 4, org_armor_l /*4132*/);
    b_scale(org_874_raeuber);
    mdl_setmodelfatness(org_874_raeuber, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_874_raeuber, npc_talent_bow, 1);
    npc_settalentskill(org_874_raeuber, npc_talent_1h, 1);
    createinvitem(org_874_raeuber, itmi_stuff_plate_01);
    createinvitem(org_874_raeuber, itmi_stuff_barbknife_01);
    createinvitem(org_874_raeuber, itfoloaf);
    createinvitem(org_874_raeuber, itat_claws_01);
    createinvitems(org_874_raeuber, itkelockpick, 1);
    createinvitems(org_874_raeuber, itminugget, 11);
    createinvitems(org_874_raeuber, itforice, 8);
    createinvitems(org_874_raeuber, itfobooze, 3);
    createinvitems(org_874_raeuber, itlstorch, 2);
    createinvitems(org_874_raeuber, itfo_potion_health_01, 1);
    createinvitems(org_874_raeuber, itamarrow, 20);
    equipitem(org_874_raeuber, itmw_1h_mace_03 /*4399*/);
    equipitem(org_874_raeuber, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_874;
};

func void rtn_start_874() {
    ta_standaround(13, 0, 14, 0, "LOCATION_11_07");
    ta_standaround(14, 0, 13, 0, "LOCATION_11_07");
};

func void rtn_omfull_874() {
    ta_standaround(13, 0, 14, 0, "LOCATION_11_07");
    ta_standaround(14, 0, 13, 0, "LOCATION_11_07");
};

instance org_875_tuersteher(npc_default) {
    name = name_tuersteher;
    npctype = npctype_main;
    guild = gil_org;
    level = 8;
    voice = 13;
    id = 875;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 136;
    attribute[atr_hitpoints] /*0*/ = 136;
    mdl_setvisual(org_875_tuersteher, "HUMANS.MDS");
    mdl_setvisualbody(org_875_tuersteher, "hum_body_Naked0", 0, 1, "Hum_Head_Bald", 102, 2, org_armor_l /*4132*/);
    b_scale(org_875_tuersteher);
    mdl_setmodelfatness(org_875_tuersteher, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_875_tuersteher, npc_talent_bow, 1);
    npc_settalentskill(org_875_tuersteher, npc_talent_1h, 1);
    createinvitem(org_875_tuersteher, itmi_stuff_plate_01);
    createinvitem(org_875_tuersteher, itmi_stuff_barbknife_01);
    createinvitem(org_875_tuersteher, itfomutton);
    createinvitem(org_875_tuersteher, itat_claws_01);
    createinvitems(org_875_tuersteher, itkelockpick, 2);
    createinvitems(org_875_tuersteher, itminugget, 15);
    createinvitems(org_875_tuersteher, itforice, 8);
    createinvitems(org_875_tuersteher, itfobooze, 3);
    createinvitems(org_875_tuersteher, itlstorch, 2);
    createinvitems(org_875_tuersteher, itfo_potion_health_01, 2);
    createinvitems(org_875_tuersteher, itamarrow, 20);
    equipitem(org_875_tuersteher, itmw_1h_mace_03 /*4399*/);
    equipitem(org_875_tuersteher, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_875;
};

func void rtn_start_875() {
    ta_guardpassage(23, 0, 8, 0, "NC_TAVERN_OUT_GUARD1");
    ta_guardpassage(8, 0, 23, 0, "NC_TAVERN_OUT_GUARD1");
};

instance org_876_tuersteher(npc_default) {
    name = name_tuersteher;
    npctype = npctype_main;
    guild = gil_org;
    level = 15;
    voice = 6;
    id = 876;
    attribute[atr_strength] /*4*/ = 80;
    attribute[atr_dexterity] /*5*/ = 60;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 220;
    attribute[atr_hitpoints] /*0*/ = 220;
    mdl_setvisual(org_876_tuersteher, "HUMANS.MDS");
    mdl_applyoverlaymds(org_876_tuersteher, "Humans_Relaxed.mds");
    mdl_setvisualbody(org_876_tuersteher, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 93, 2, org_armor_h /*4134*/);
    b_scale(org_876_tuersteher);
    mdl_setmodelfatness(org_876_tuersteher, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_876_tuersteher, npc_talent_bow, 1);
    npc_settalentskill(org_876_tuersteher, npc_talent_1h, 1);
    npc_settalentskill(org_876_tuersteher, npc_talent_2h, 1);
    createinvitem(org_876_tuersteher, itmi_stuff_plate_01);
    createinvitem(org_876_tuersteher, itmi_stuff_cup_01);
    createinvitem(org_876_tuersteher, itfomutton);
    createinvitem(org_876_tuersteher, itfoloaf);
    createinvitem(org_876_tuersteher, itat_claws_01);
    createinvitems(org_876_tuersteher, itkelockpick, 1);
    createinvitems(org_876_tuersteher, itminugget, 18);
    createinvitems(org_876_tuersteher, itforice, 8);
    createinvitems(org_876_tuersteher, itfobooze, 4);
    createinvitems(org_876_tuersteher, itlstorch, 2);
    createinvitems(org_876_tuersteher, itfo_potion_health_01, 2);
    createinvitems(org_876_tuersteher, itamarrow, 20);
    equipitem(org_876_tuersteher, itmw_1h_mace_02 /*4398*/);
    equipitem(org_876_tuersteher, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_876;
};

func void rtn_start_876() {
    ta_guardpassage(23, 0, 8, 0, "NC_TAVERN_OUT_GUARD2");
    ta_guardpassage(8, 0, 23, 0, "NC_TAVERN_OUT_GUARD2");
};

instance org_888_erpresser(npc_default) {
    name = "Øàíòàæèñò";
    npctype = npctype_main;
    guild = gil_org;
    level = 15;
    voice = 13;
    id = 888;
    attribute[atr_strength] /*4*/ = 80;
    attribute[atr_dexterity] /*5*/ = 60;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 220;
    attribute[atr_hitpoints] /*0*/ = 220;
    mdl_setvisual(org_888_erpresser, "HUMANS.MDS");
    mdl_applyoverlaymds(org_888_erpresser, "Humans_Relaxed.mds");
    mdl_setvisualbody(org_888_erpresser, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 35, 2, org_armor_h /*4134*/);
    b_scale(org_888_erpresser);
    mdl_setmodelfatness(org_888_erpresser, 0.0);
    fight_tactic = fai_human_master;
    npc_settalentskill(org_888_erpresser, npc_talent_bow, 1);
    npc_settalentskill(org_888_erpresser, npc_talent_1h, 2);
    createinvitem(org_888_erpresser, itmi_stuff_plate_01);
    createinvitem(org_888_erpresser, itmi_stuff_cup_01);
    createinvitem(org_888_erpresser, itfomutton);
    createinvitem(org_888_erpresser, itfoloaf);
    createinvitem(org_888_erpresser, itat_claws_01);
    createinvitems(org_888_erpresser, itkelockpick, 3);
    createinvitems(org_888_erpresser, itminugget, 20);
    createinvitems(org_888_erpresser, itforice, 8);
    createinvitems(org_888_erpresser, itfobooze, 3);
    createinvitems(org_888_erpresser, itlstorch, 2);
    createinvitems(org_888_erpresser, itfo_potion_health_01, 3);
    createinvitems(org_888_erpresser, itamarrow, 20);
    equipitem(org_888_erpresser, itmw_1h_mace_war_02 /*4407*/);
    equipitem(org_888_erpresser, itrw_bow_long_01 /*4876*/);
    start_aistate = zs_erpresser;
};

instance org_889_coerpresser(npc_default) {
    name = "Ïîìîùíèê øàíòàæèñòà";
    npctype = npctype_ambient;
    guild = gil_org;
    level = 11;
    voice = 7;
    id = 889;
    attribute[atr_strength] /*4*/ = 50;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 172;
    attribute[atr_hitpoints] /*0*/ = 172;
    mdl_setvisual(org_889_coerpresser, "HUMANS.MDS");
    mdl_applyoverlaymds(org_889_coerpresser, "Humans_Relaxed.mds");
    mdl_setvisualbody(org_889_coerpresser, "hum_body_Naked0", 0, 2, "Hum_Head_Pony", 8, 1, org_armor_m /*4133*/);
    b_scale(org_889_coerpresser);
    mdl_setmodelfatness(org_889_coerpresser, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_889_coerpresser, npc_talent_bow, 1);
    npc_settalentskill(org_889_coerpresser, npc_talent_2h, 1);
    npc_settalentskill(org_889_coerpresser, npc_talent_1h, 1);
    createinvitem(org_889_coerpresser, itmi_stuff_barbknife_01);
    createinvitem(org_889_coerpresser, itfoloaf);
    createinvitem(org_889_coerpresser, itat_teeth_01);
    createinvitems(org_889_coerpresser, itkelockpick, 1);
    createinvitems(org_889_coerpresser, itminugget, 12);
    createinvitems(org_889_coerpresser, itforice, 7);
    createinvitems(org_889_coerpresser, itfobooze, 5);
    createinvitems(org_889_coerpresser, itlstorch, 1);
    createinvitems(org_889_coerpresser, itfo_potion_health_01, 2);
    createinvitems(org_889_coerpresser, itamarrow, 20);
    equipitem(org_889_coerpresser, itmw_1h_mace_war_01 /*4406*/);
    equipitem(org_889_coerpresser, itrw_bow_long_01 /*4876*/);
    start_aistate = zs_erpresser;
};

instance org_890_organisator(npc_default) {
    name = name_organisator;
    npctype = npctype_mine_ambient;
    guild = gil_org;
    level = 8;
    voice = 7;
    id = 890;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 136;
    attribute[atr_hitpoints] /*0*/ = 136;
    mdl_setvisual(org_890_organisator, "HUMANS.MDS");
    mdl_setvisualbody(org_890_organisator, "hum_body_Naked0", 0, 1, "Hum_Head_Bald", 37, 2, org_armor_l /*4132*/);
    b_scale(org_890_organisator);
    mdl_setmodelfatness(org_890_organisator, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_890_organisator, npc_talent_bow, 1);
    npc_settalentskill(org_890_organisator, npc_talent_1h, 1);
    createinvitem(org_890_organisator, itmi_stuff_barbknife_01);
    createinvitem(org_890_organisator, itfomutton);
    createinvitem(org_890_organisator, itat_claws_01);
    createinvitems(org_890_organisator, itkelockpick, 2);
    createinvitems(org_890_organisator, itminugget, 12);
    createinvitems(org_890_organisator, itforice, 7);
    createinvitems(org_890_organisator, itfobooze, 2);
    createinvitems(org_890_organisator, itlstorch, 1);
    createinvitems(org_890_organisator, itfo_potion_health_01, 3);
    createinvitems(org_890_organisator, itamarrow, 20);
    equipitem(org_890_organisator, itmw_1h_mace_03 /*4399*/);
    equipitem(org_890_organisator, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_fmcstart_890;
};

func void rtn_fmcstart_890() {
    ta_sitaround(1, 0, 13, 0, "FMC_HUT06_OUT");
    ta_sitaround(13, 0, 1, 0, "FMC_HUT06_OUT");
};

instance org_891_organisator(npc_default) {
    name = name_organisator;
    npctype = npctype_mine_ambient;
    guild = gil_org;
    level = 8;
    voice = 13;
    id = 891;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 136;
    attribute[atr_hitpoints] /*0*/ = 136;
    mdl_setvisual(org_891_organisator, "HUMANS.MDS");
    mdl_applyoverlaymds(org_891_organisator, "Humans_Relaxed.mds");
    mdl_setvisualbody(org_891_organisator, "hum_body_Naked0", 0, 2, "Hum_Head_Fighter", 9, 3, org_armor_l /*4132*/);
    b_scale(org_891_organisator);
    mdl_setmodelfatness(org_891_organisator, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_891_organisator, npc_talent_bow, 1);
    npc_settalentskill(org_891_organisator, npc_talent_1h, 1);
    createinvitem(org_891_organisator, itmi_stuff_plate_01);
    createinvitem(org_891_organisator, itmi_stuff_cup_01);
    createinvitem(org_891_organisator, itfoloaf);
    createinvitem(org_891_organisator, itat_teeth_01);
    createinvitem(org_891_organisator, itmi_stuff_oldcoin_02);
    createinvitems(org_891_organisator, itkelockpick, 2);
    createinvitems(org_891_organisator, itminugget, 16);
    createinvitems(org_891_organisator, itforice, 7);
    createinvitems(org_891_organisator, itfobooze, 3);
    createinvitems(org_891_organisator, itlstorch, 3);
    createinvitems(org_891_organisator, itfo_potion_health_01, 1);
    createinvitems(org_891_organisator, itamarrow, 20);
    equipitem(org_891_organisator, itmw_1h_mace_03 /*4399*/);
    equipitem(org_891_organisator, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_fmcstart_891;
};

func void rtn_fmcstart_891() {
    ta_sitaround(1, 0, 13, 0, "FMC_HUT06_IN");
    ta_sitaround(13, 0, 1, 0, "FMC_HUT06_IN");
};

instance org_892_organisator(npc_default) {
    name = name_organisator;
    npctype = npctype_mine_ambient;
    guild = gil_org;
    level = 11;
    voice = 13;
    id = 892;
    attribute[atr_strength] /*4*/ = 50;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 172;
    attribute[atr_hitpoints] /*0*/ = 172;
    mdl_setvisual(org_892_organisator, "HUMANS.MDS");
    mdl_setvisualbody(org_892_organisator, "hum_body_Naked0", 0, 1, "Hum_Head_Fighter", 35, 2, org_armor_m /*4133*/);
    b_scale(org_892_organisator);
    mdl_setmodelfatness(org_892_organisator, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(org_892_organisator, npc_talent_bow, 1);
    npc_settalentskill(org_892_organisator, npc_talent_2h, 1);
    npc_settalentskill(org_892_organisator, npc_talent_1h, 1);
    createinvitem(org_892_organisator, itmi_stuff_plate_01);
    createinvitem(org_892_organisator, itmi_stuff_cup_01);
    createinvitem(org_892_organisator, itfomutton);
    createinvitem(org_892_organisator, itat_teeth_01);
    createinvitems(org_892_organisator, itkelockpick, 3);
    createinvitems(org_892_organisator, itminugget, 9);
    createinvitems(org_892_organisator, itforice, 8);
    createinvitems(org_892_organisator, itfobooze, 7);
    createinvitems(org_892_organisator, itlstorch, 2);
    createinvitems(org_892_organisator, itfo_potion_health_01, 1);
    createinvitems(org_892_organisator, itamarrow, 20);
    equipitem(org_892_organisator, itmw_1h_mace_war_01 /*4406*/);
    equipitem(org_892_organisator, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_fmcstart_892;
};

func void rtn_fmcstart_892() {
    ta_smoke(1, 0, 13, 0, "FMC_HUT11_OUT");
    ta_smoke(13, 0, 1, 0, "FMC_HUT11_OUT");
};

instance pc_fighter(npc_default) {
    name = "Ãîðí";
    npctype = npctype_friend;
    guild = gil_sld;
    level = 999;
    flags = npc_flag_immortal;
    voice = 9;
    id = 3;
    attribute[atr_strength] /*4*/ = 80;
    attribute[atr_dexterity] /*5*/ = 40;
    attribute[atr_mana_max] /*3*/ = 20;
    attribute[atr_mana] /*2*/ = 20;
    attribute[atr_hitpoints_max] /*1*/ = 220;
    attribute[atr_hitpoints] /*0*/ = 220;
    protection[prot_fire] /*3*/ = 1000;
    mdl_setvisual(pc_fighter, "HUMANS.MDS");
    mdl_applyoverlaymds(pc_fighter, "Humans_Relaxed.mds");
    mdl_setvisualbody(pc_fighter, "hum_body_Naked0", 0, 3, "Hum_Head_Fighter", 13, 0, sld_armor_m /*4136*/);
    aivar[22] = true;
    fight_tactic = fai_human_strong;
    npc_settalentskill(pc_fighter, npc_talent_pickpocket, 1);
    npc_settalentvalue(pc_fighter, npc_talent_pickpocket, 60);
    npc_settalentskill(pc_fighter, npc_talent_sneak, 1);
    npc_settalentskill(pc_fighter, npc_talent_picklock, 1);
    npc_settalentvalue(pc_fighter, npc_talent_picklock, 60);
    npc_settalentskill(pc_fighter, npc_talent_1h, 2);
    npc_settalentskill(pc_fighter, npc_talent_2h, 2);
    createinvitems(pc_fighter, itfowine, 5);
    createinvitems(pc_fighter, itfo_potion_health_03, 10);
    createinvitems(pc_fighter, itfo_potion_mana_01, 5);
    equipitem(pc_fighter, gorns_rache /*4984*/);
    daily_routine = rtn_start_3;
};

func void rtn_start_3() {
    ta_standaround(8, 0, 1, 0, "NC_PLACE03_MOVEMENT2");
    ta_sleep(1, 0, 8, 0, "NC_HUT06_IN");
};

func void rtn_ncwait_3() {
    ta_stay(0, 0, 23, 0, "NC_PATH52");
    ta_stay(23, 0, 24, 0, "NC_PATH52");
};

func void rtn_ruinwait_3() {
    ta_stay(0, 0, 23, 0, "OW_PATH_ABYSS_4");
    ta_stay(23, 0, 24, 0, "OW_PATH_ABYSS_4");
};

func void rtn_ruinabyss_3() {
    ta_guidepc(0, 0, 23, 0, "OW_ABYSS_TO_CAVE_MOVE6");
    ta_guidepc(23, 0, 24, 0, "OW_ABYSS_TO_CAVE_MOVE6");
};

func void rtn_ruinfollow_3() {
    ta_followpc(0, 0, 23, 0, "OW_PATH_175_GATE1");
    ta_followpc(23, 0, 24, 0, "OW_PATH_175_GATE1");
};

func void rtn_ruinwall_3() {
    ta_stay(0, 0, 23, 0, "OW_PATH_175_GATE1");
    ta_stay(23, 0, 24, 0, "OW_PATH_175_GATE1");
};

func void rtn_ruinfollowinside_3() {
    ta_followpc(0, 0, 23, 0, "OW_PATH_176");
    ta_followpc(23, 0, 24, 0, "OW_PATH_176");
};

func void rtn_ruinstay_3() {
    ta_stay(0, 0, 23, 0, "OW_PATH_176");
    ta_stay(23, 0, 24, 0, "OW_PATH_176");
};

func void rtn_ruinyard_3() {
    ta_followpc(0, 0, 23, 0, "OW_PATH_176");
    ta_followpc(23, 0, 24, 0, "OW_PATH_176");
};

func void rtn_ncreport_3() {
    ta_stay(0, 0, 23, 0, "NC_KDW_CAVE_CENTER");
    ta_stay(23, 0, 24, 0, "NC_KDW_CAVE_CENTER");
};

func void rtn_guardnc_3() {
    ta_stay(0, 0, 23, 0, "OW_PATH_075_GUARD4");
    ta_stay(23, 0, 24, 0, "OW_PATH_075_GUARD4");
};

func void rtn_followtofmc_3() {
    ta_followpc(0, 0, 23, 0, "FMC_ENTRANCE");
    ta_followpc(23, 0, 24, 0, "FMC_ENTRANCE");
};

func void rtn_waitfmc_3() {
    ta_stay(0, 0, 23, 0, "FMC_ENTRANCE");
    ta_stay(23, 0, 24, 0, "FMC_ENTRANCE");
};

func void rtn_waitfm_3() {
    ta_stay(0, 0, 23, 0, "FMC_FM_ENTRANCE");
    ta_stay(23, 0, 24, 0, "FMC_FM_ENTRANCE");
};

instance pc_fighterfm(npc_default) {
    name = "Ãîðí";
    npctype = npctype_friend;
    guild = gil_sld;
    level = 15;
    flags = npc_flag_immortal;
    voice = 9;
    id = 5;
    attribute[atr_strength] /*4*/ = 80;
    attribute[atr_dexterity] /*5*/ = 40;
    attribute[atr_mana_max] /*3*/ = 20;
    attribute[atr_mana] /*2*/ = 20;
    attribute[atr_hitpoints_max] /*1*/ = 220;
    attribute[atr_hitpoints] /*0*/ = 220;
    mdl_setvisual(pc_fighterfm, "HUMANS.MDS");
    mdl_applyoverlaymds(pc_fighterfm, "Humans_Relaxed.mds");
    mdl_setvisualbody(pc_fighterfm, "hum_body_Naked0", 0, 3, "Hum_Head_Fighter", 13, 0, sld_armor_m /*4136*/);
    aivar[22] = true;
    aivar[36] = true;
    fight_tactic = fai_human_strong;
    npc_settalentskill(pc_fighterfm, npc_talent_1h, 2);
    npc_settalentskill(pc_fighterfm, npc_talent_2h, 2);
    createinvitems(pc_fighterfm, itfowine, 5);
    createinvitems(pc_fighterfm, itfo_potion_health_03, 10);
    createinvitems(pc_fighterfm, itfo_potion_mana_01, 5);
    equipitem(pc_fighterfm, gorns_rache /*4984*/);
    daily_routine = rtn_follow_5;
};

func void rtn_follow_5() {
    ta_followpc(0, 0, 23, 0, "FM_02");
    ta_followpc(23, 0, 24, 0, "FM_02");
};

func void rtn_wait_5() {
    ta_stay(0, 0, 23, 0, "FM_02");
    ta_stay(23, 0, 24, 0, "FM_02");
};

instance pc_hero(npc_default) {
    name = "ß";
    npctype = npctype_main;
    guild = gil_none;
    level = 0;
    voice = 15;
    id = 0;
    exp = 0;
    exp_next = 500;
    lp = 0;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 5;
    attribute[atr_mana] /*2*/ = 5;
    attribute[atr_hitpoints_max] /*1*/ = 40;
    attribute[atr_hitpoints] /*0*/ = 40;
    mdl_setvisual(pc_hero, "HUMANS.MDS");
    mdl_setvisualbody(pc_hero, "hum_body_Naked0", 4, 1, "Hum_Head_Pony", 9, 0, -1);
    createinvitem(pc_hero, itwr_fire_letter_01);
};

instance pc_hero_l2(npc_default) {
    name = "ß";
    npctype = npctype_main;
    guild = gil_none;
    level = 2;
    voice = 15;
    id = 0;
    exp = 1500;
    exp_next = 3000;
    lp = 0;
    attribute[atr_strength] /*4*/ = 13;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 5;
    attribute[atr_mana] /*2*/ = 5;
    attribute[atr_hitpoints_max] /*1*/ = 64;
    attribute[atr_hitpoints] /*0*/ = 64;
    mdl_setvisual(pc_hero_l2, "HUMANS.MDS");
    mdl_setvisualbody(pc_hero_l2, "hum_body_Naked0", 4, 1, "Hum_Head_Pony", 9, 0, vlk_armor_l /*4121*/);
    createinvitems(pc_hero_l2, itamarrow, 50);
    equipitem(pc_hero_l2, herosword20 /*7974*/);
    equipitem(pc_hero_l2, herosword13 /*7973*/);
    equipitem(pc_hero_l2, herobow13 /*7976*/);
};

instance pc_hero_l5(npc_default) {
    name = "ß";
    npctype = npctype_main;
    guild = gil_none;
    level = 5;
    voice = 15;
    id = 0;
    exp = inextremo_thomastheforger /*7500*/;
    exp_next = nov_1320_novize_callsleeper /*10500*/;
    lp = 0;
    attribute[atr_strength] /*4*/ = 25;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 5;
    attribute[atr_mana] /*2*/ = 5;
    attribute[atr_hitpoints_max] /*1*/ = 100;
    attribute[atr_hitpoints] /*0*/ = 100;
    mdl_setvisual(pc_hero_l5, "HUMANS.MDS");
    mdl_setvisualbody(pc_hero_l5, "hum_body_Naked0", 4, 1, "Hum_Head_Pony", 9, 0, -1);
    createinvitems(pc_hero_l5, itamarrow, 50);
    equipitem(pc_hero_l5, herosword25 /*7975*/);
    equipitem(pc_hero_l5, herobow13 /*7976*/);
};

instance pc_hero_l7(npc_default) {
    name = "ß";
    npctype = npctype_main;
    guild = gil_org;
    level = 7;
    voice = 15;
    id = 0;
    exp = 14000;
    exp_next = 18000;
    lp = 0;
    attribute[atr_strength] /*4*/ = 45;
    attribute[atr_dexterity] /*5*/ = 35;
    attribute[atr_mana_max] /*3*/ = 20;
    attribute[atr_mana] /*2*/ = 20;
    attribute[atr_hitpoints_max] /*1*/ = 160;
    attribute[atr_hitpoints] /*0*/ = 160;
    mdl_setvisual(pc_hero_l7, "HUMANS.MDS");
    mdl_setvisualbody(pc_hero_l7, "hum_body_Naked0", 4, 1, "Hum_Head_Pony", 9, 0, org_armor_h /*4134*/);
    npc_settalentskill(pc_hero_l7, npc_talent_picklock, 1);
    npc_settalentvalue(pc_hero_l7, npc_talent_picklock, 60);
    npc_settalentskill(pc_hero_l7, npc_talent_1h, 1);
    createinvitem(pc_hero_l7, itwrworldmap);
    createinvitems(pc_hero_l7, itamarrow, 100);
    createinvitems(pc_hero_l7, itminugget, 50);
    createinvitems(pc_hero_l7, itkelockpick, 30);
    createinvitems(pc_hero_l7, itlstorch, 20);
    createinvitems(pc_hero_l7, itfo_potion_health_03, 20);
    createinvitems(pc_hero_l7, itfo_potion_mana_03, 20);
    equipitem(pc_hero_l7, itmw_1h_sword_05 /*4405*/);
    equipitem(pc_hero_l7, itrw_bow_small_04 /*4874*/);
};

instance pc_hero_l11(npc_default) {
    name = "ß";
    npctype = npctype_main;
    guild = gil_sld;
    level = 11;
    voice = 15;
    id = 0;
    exp = 33000;
    exp_next = 39000;
    lp = 0;
    attribute[atr_strength] /*4*/ = 60;
    attribute[atr_dexterity] /*5*/ = 45;
    attribute[atr_mana_max] /*3*/ = 50;
    attribute[atr_mana] /*2*/ = 50;
    attribute[atr_hitpoints_max] /*1*/ = 220;
    attribute[atr_hitpoints] /*0*/ = 220;
    mdl_setvisual(pc_hero_l11, "HUMANS.MDS");
    mdl_setvisualbody(pc_hero_l11, "hum_body_Naked0", 4, 1, "Hum_Head_Pony", 9, 0, sld_armor_h /*4137*/);
    npc_settalentskill(pc_hero_l11, npc_talent_picklock, 1);
    npc_settalentvalue(pc_hero_l11, npc_talent_picklock, 60);
    npc_settalentskill(pc_hero_l11, npc_talent_1h, 2);
    npc_settalentskill(pc_hero_l11, npc_talent_bow, 1);
    createinvitems(pc_hero_l11, itamarrow, 100);
    createinvitems(pc_hero_l11, itminugget, 400);
    createinvitems(pc_hero_l11, itkelockpick, 30);
    createinvitems(pc_hero_l11, itlstorch, 20);
    equipitem(pc_hero_l11, itmw_1h_sword_long_05 /*4414*/);
    equipitem(pc_hero_l11, itrw_bow_long_02 /*4877*/);
};

instance pc_hero_l13(npc_default) {
    name = "ß";
    npctype = npctype_main;
    guild = gil_sld;
    level = 13;
    voice = 15;
    id = 0;
    exp = 45500;
    exp_next = 52500;
    lp = 0;
    attribute[atr_strength] /*4*/ = 65;
    attribute[atr_dexterity] /*5*/ = 50;
    attribute[atr_mana_max] /*3*/ = 50;
    attribute[atr_mana] /*2*/ = 50;
    attribute[atr_hitpoints_max] /*1*/ = 250;
    attribute[atr_hitpoints] /*0*/ = 250;
    mdl_setvisual(pc_hero_l13, "HUMANS.MDS");
    mdl_setvisualbody(pc_hero_l13, "hum_body_Naked0", 4, 1, "Hum_Head_Pony", 9, 0, sld_armor_h /*4137*/);
    npc_settalentskill(pc_hero_l13, npc_talent_pickpocket, 1);
    npc_settalentvalue(pc_hero_l13, npc_talent_pickpocket, 60);
    npc_settalentskill(pc_hero_l13, npc_talent_sneak, 1);
    npc_settalentskill(pc_hero_l13, npc_talent_picklock, 1);
    npc_settalentvalue(pc_hero_l13, npc_talent_picklock, 60);
    npc_settalentskill(pc_hero_l13, npc_talent_1h, 2);
    npc_settalentskill(pc_hero_l13, npc_talent_bow, 1);
    createinvitems(pc_hero_l13, itamarrow, 100);
    createinvitems(pc_hero_l13, itminugget, 400);
    createinvitems(pc_hero_l13, itkelockpick, 50);
    createinvitems(pc_hero_l13, itlstorch, 20);
    equipitem(pc_hero_l13, itmw_1h_sword_broad_01 /*4421*/);
    equipitem(pc_hero_l13, itrw_bow_long_04 /*4879*/);
};

instance herosword13(c_item) {
    name = "Èçíîøåííûé ìå÷";
    mainflag = item_kat_nf;
    flags = item_swd;
    visual = "ItMw1hSwordold01.3DS";
    material = mat_metal;
    damage[dam_index_barrier] /*0*/ = 13;
    damagetype = dam_edge;
    range = 100;
    value = 27;
    description = "";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = "";
    count[5] = 0;
};

instance herosword20(c_item) {
    name = "Ìå÷";
    mainflag = item_kat_nf;
    flags = item_swd;
    visual = "ItMw1hSword01.3DS";
    material = mat_metal;
    damage[dam_index_barrier] /*0*/ = 20;
    damagetype = dam_edge;
    range = 100;
    value = 31;
    description = "";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = "";
    count[5] = 0;
};

instance herosword25(c_item) {
    name = "Ìå÷";
    mainflag = item_kat_nf;
    flags = item_swd;
    visual = "ItMw1hSword01.3DS";
    material = mat_metal;
    damage[dam_index_barrier] /*0*/ = 25;
    damagetype = dam_edge;
    range = 100;
    value = 31;
    description = "";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = "";
    count[5] = 0;
};

instance herobow13(c_item) {
    name = "Áîëüøîé ëóê";
    mainflag = item_kat_ff;
    flags = item_bow;
    munition = itamarrow /*4894*/;
    visual = "ItRwLongbow.mms";
    material = mat_wood;
    damage[dam_index_barrier] /*0*/ = 13;
    damagetype = dam_point;
    value = 35;
    description = "";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = "";
    count[5] = 0;
};

instance xp_map(c_item) {
    name = "Êàðòà";
    mainflag = item_kat_docs;
    flags = 0;
    visual = "ItWr_Map_01.3ds";
    material = mat_leather;
    scemename = "MAP";
    on_state = use_xp_map;
    value = 1000;
    description = "";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = "";
    count[5] = 0;
};

func void use_xp_map() {
    createinvitems(self, itminugget, 1000);
    hero.lp = hero.lp + 20;
    printscreen(print_xp_map, -1, 40, font_book_text, 10);
};

instance pc_mage(npc_default) {
    name = "Ìèëüòåí";
    npctype = npctype_friend;
    guild = gil_kdf;
    level = 999;
    flags = npc_flag_immortal;
    voice = 2;
    id = 2;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 150;
    attribute[atr_mana] /*2*/ = 150;
    attribute[atr_hitpoints_max] /*1*/ = 250;
    attribute[atr_hitpoints] /*0*/ = 250;
    protection[prot_fire] /*3*/ = 1000;
    mdl_setvisual(pc_mage, "HUMANS.MDS");
    mdl_applyoverlaymds(pc_mage, "Humans_Mage.mds");
    mdl_setvisualbody(pc_mage, "hum_body_Naked0", 0, 1, "Hum_Head_Bald", 76, 1, kdf_armor_l /*4146*/);
    aivar[22] = true;
    fight_tactic = fai_human_mage;
    senses = (sense_see | sense_hear) | sense_smell;
    npc_settalentskill(pc_mage, npc_talent_mage, 6);
    createinvitem(pc_mage, itarrunefireball);
    createinvitems(pc_mage, itfowine, 3);
    createinvitems(pc_mage, itfo_potion_health_02, 10);
    createinvitems(pc_mage, itfo_potion_mana_02, 10);
    daily_routine = rtn_start_2;
};

func void rtn_start_2() {
    ta_sleep(0, 0, 8, 0, "OCC_CHAPEL_LEFT_ROOM");
    ta_stand(8, 0, 0, 0, "OCC_CHAPEL_ENTRANCE");
};

func void rtn_shwait_2() {
    ta_stay(0, 0, 23, 0, "OW_PATH_274");
    ta_stay(23, 0, 24, 0, "OW_PATH_274");
};

func void rtn_shguide_2() {
    ta_guidepc(0, 0, 23, 0, "OW_PATH_3_STONES");
    ta_guidepc(23, 0, 24, 0, "OW_PATH_3_STONES");
};

func void rtn_shfollow_2() {
    ta_followpc(0, 0, 23, 0, "OW_PATH_3_STONES");
    ta_followpc(23, 0, 24, 0, "OW_PATH_3_STONES");
};

func void rtn_returntooc_2() {
    ta_sitaround(0, 0, 12, 0, "LOCATION_02_04");
    ta_sitaround(12, 0, 24, 0, "LOCATION_02_04");
};

func void rtn_ocwait_2() {
    ta_stay(0, 0, 12, 0, "PATH_OC_NC");
    ta_stay(12, 0, 24, 0, "PATH_OC_NC");
};

func void rtn_lswait_2() {
    ta_stay(0, 0, 12, 0, "NC_KDW_CAVE_STAIRS");
    ta_stay(12, 0, 24, 0, "NC_KDW_CAVE_STAIRS");
};

func void rtn_lsaway_2() {
    ta_guidepc(0, 0, 12, 0, "NC_KDW04_IN");
    ta_guidepc(12, 0, 24, 0, "NC_KDW04_IN");
};

func void rtn_lsoreheap_2() {
    ta_stay(0, 0, 12, 0, "NC_PATH41");
    ta_stay(12, 0, 24, 0, "NC_PATH41");
};

instance pc_psionic(npc_default) {
    name = "Ëåñòåð";
    npctype = npctype_friend;
    guild = gil_nov;
    level = 999;
    flags = npc_flag_immortal;
    voice = 5;
    id = 4;
    attribute[atr_strength] /*4*/ = 45;
    attribute[atr_dexterity] /*5*/ = 35;
    attribute[atr_mana_max] /*3*/ = 50;
    attribute[atr_mana] /*2*/ = 50;
    attribute[atr_hitpoints_max] /*1*/ = 220;
    attribute[atr_hitpoints] /*0*/ = 220;
    protection[prot_fire] /*3*/ = 1000;
    mdl_setvisual(pc_psionic, "HUMANS.MDS");
    mdl_applyoverlaymds(pc_psionic, "Humans_Mage.mds");
    mdl_setvisualbody(pc_psionic, "hum_body_Naked0", 1, 0, "Hum_Head_Bald", 17, 2, nov_armor_m /*4139*/);
    aivar[22] = true;
    fight_tactic = fai_human_strong;
    senses = (sense_hear | sense_see) | sense_smell;
    senses_range = 1500;
    npc_settalentskill(pc_psionic, npc_talent_1h, 2);
    createinvitem(pc_psionic, itfosoup);
    equipitem(pc_psionic, streitschlichter /*4975*/);
    daily_routine = rtn_start_4;
};

func void rtn_start_4() {
    ta_smalltalk(8, 0, 23, 0, "PSI_GUARD_TREE_EX");
    ta_smalltalk(23, 0, 8, 0, "PSI_GUARD_TREE_EX");
};

func void rtn_fortresswait_4() {
    ta_stay(0, 0, 23, 0, "LOCATION_19_01");
    ta_stay(23, 0, 24, 0, "LOCATION_19_01");
};

func void rtn_fortressfollow_4() {
    ta_followpc(0, 0, 23, 0, "LOCATION_19_01");
    ta_followpc(23, 0, 24, 0, "LOCATION_19_01");
};

func void rtn_balkon_4() {
    ta_stay(0, 0, 23, 0, "LOCATION_19_03_SECOND_ETAGE_BALCON");
    ta_stay(23, 0, 24, 0, "LOCATION_19_03_SECOND_ETAGE_BALCON");
};

func void rtn_waitatfocus_4() {
    ta_stay(0, 0, 23, 0, "LOCATION_19_03_PATH_RUIN7");
    ta_stay(23, 0, 24, 0, "LOCATION_19_03_PATH_RUIN7");
};

func void rtn_book_4() {
    ta_readbook(0, 0, 23, 0, "LOCATION_19_03_ROOM6_BARRELCHAMBER");
    ta_readbook(23, 0, 24, 0, "LOCATION_19_03_ROOM6_BARRELCHAMBER");
};

func void rtn_guidetosmith_4() {
    ta_guidepc(8, 0, 23, 0, "PSI_SMITH_IN");
    ta_guidepc(23, 0, 8, 0, "PSI_SMITH_IN");
};

func void rtn_guidetotempel_4() {
    ta_guidepc(8, 0, 23, 0, "PSI_TEMPLE_NOVIZE_PR");
    ta_guidepc(23, 0, 8, 0, "PSI_TEMPLE_NOVIZE_PR");
};

func void rtn_guidetotrain_4() {
    ta_guidepc(8, 0, 23, 0, "PSI_PATH_9_4");
    ta_guidepc(23, 0, 8, 0, "PSI_PATH_9_4");
};

func void rtn_guidetoherb_4() {
    ta_guidepc(8, 0, 23, 0, "PSI_WALK_06");
    ta_guidepc(23, 0, 8, 0, "PSI_WALK_06");
};

instance pc_rockefeller(npc_default) {
    name = "Ðîêôåëëåð";
    npctype = npctype_main;
    guild = gil_none;
    level = 30;
    voice = 15;
    id = 0;
    attribute[atr_strength] /*4*/ = 100;
    attribute[atr_dexterity] /*5*/ = 100;
    attribute[atr_mana_max] /*3*/ = 100;
    attribute[atr_mana] /*2*/ = 100;
    attribute[atr_hitpoints_max] /*1*/ = 400;
    attribute[atr_hitpoints] /*0*/ = 400;
    mdl_setvisual(pc_rockefeller, "HUMANS.MDS");
    mdl_setvisualbody(pc_rockefeller, "hum_body_Naked0", 4, 1, "Hum_Head_Pony", 9, 0, ebr_armor_h2 /*4130*/);
    npc_settalentskill(pc_rockefeller, npc_talent_pickpocket, 1);
    npc_settalentvalue(pc_rockefeller, npc_talent_pickpocket, 60);
    npc_settalentskill(pc_rockefeller, npc_talent_sneak, 1);
    npc_settalentskill(pc_rockefeller, npc_talent_picklock, 1);
    npc_settalentvalue(pc_rockefeller, npc_talent_picklock, 60);
    npc_settalentskill(pc_rockefeller, npc_talent_mage, 6);
    npc_settalentskill(pc_rockefeller, npc_talent_1h, 2);
    npc_settalentskill(pc_rockefeller, npc_talent_2h, 2);
    npc_settalentskill(pc_rockefeller, npc_talent_bow, 1);
    npc_settalentskill(pc_rockefeller, npc_talent_crossbow, 1);
    createinvitem(pc_rockefeller, bab_armor_bikini);
    createinvitem(pc_rockefeller, bab_armor_nude);
    createinvitem(pc_rockefeller, grd_armor_i);
    createinvitem(pc_rockefeller, law_armor);
    createinvitem(pc_rockefeller, ore_armor_h);
    createinvitem(pc_rockefeller, ore_armor_m);
    createinvitem(pc_rockefeller, crw_armor_h);
    createinvitem(pc_rockefeller, dmb_armor_m);
    createinvitem(pc_rockefeller, ebr_armor_m);
    createinvitem(pc_rockefeller, ebr_armor_h);
    createinvitem(pc_rockefeller, ebr_armor_h2);
    createinvitem(pc_rockefeller, grd_armor_l);
    createinvitem(pc_rockefeller, grd_armor_m);
    createinvitem(pc_rockefeller, grd_armor_h);
    createinvitem(pc_rockefeller, gur_armor_h);
    createinvitem(pc_rockefeller, gur_armor_m);
    createinvitem(pc_rockefeller, kdf_armor_l);
    createinvitem(pc_rockefeller, kdf_armor_h);
    createinvitem(pc_rockefeller, kdw_armor_l);
    createinvitem(pc_rockefeller, kdw_armor_h);
    createinvitem(pc_rockefeller, nov_armor_l);
    createinvitem(pc_rockefeller, nov_armor_m);
    createinvitem(pc_rockefeller, nov_armor_h);
    createinvitem(pc_rockefeller, org_armor_l);
    createinvitem(pc_rockefeller, org_armor_m);
    createinvitem(pc_rockefeller, org_armor_h);
    createinvitem(pc_rockefeller, sfb_armor_l);
    createinvitem(pc_rockefeller, sld_armor_l);
    createinvitem(pc_rockefeller, sld_armor_m);
    createinvitem(pc_rockefeller, sld_armor_h);
    createinvitem(pc_rockefeller, stt_armor_m);
    createinvitem(pc_rockefeller, stt_armor_h);
    createinvitem(pc_rockefeller, tpl_armor_l);
    createinvitem(pc_rockefeller, tpl_armor_m);
    createinvitem(pc_rockefeller, tpl_armor_h);
    createinvitem(pc_rockefeller, vlk_armor_m);
    createinvitem(pc_rockefeller, vlk_armor_l);
    createinvitem(pc_rockefeller, itarrobemithril);
    createinvitem(pc_rockefeller, itarrunelight);
    createinvitem(pc_rockefeller, itarrunefirebolt);
    createinvitem(pc_rockefeller, itarrunefireball);
    createinvitem(pc_rockefeller, itarrunefirestorm);
    createinvitem(pc_rockefeller, itarrunefirerain);
    createinvitem(pc_rockefeller, itarruneteleport1);
    createinvitem(pc_rockefeller, itarruneteleport2);
    createinvitem(pc_rockefeller, itarruneteleport3);
    createinvitems(pc_rockefeller, itarscrollteleport4, 20);
    createinvitem(pc_rockefeller, itarruneteleport5);
    createinvitem(pc_rockefeller, itarruneheal);
    createinvitem(pc_rockefeller, itarrunechainlightning);
    createinvitem(pc_rockefeller, itarrunethunderbolt);
    createinvitem(pc_rockefeller, itarrunethunderball);
    createinvitem(pc_rockefeller, itarruneicecube);
    createinvitem(pc_rockefeller, itarruneicewave);
    createinvitem(pc_rockefeller, itarrunedestroyundead);
    createinvitems(pc_rockefeller, itarscrolltrfbloodfly, 10);
    createinvitems(pc_rockefeller, itarscrolltrfcrawler, 10);
    createinvitems(pc_rockefeller, itarscrolltrflurker, 10);
    createinvitems(pc_rockefeller, itarscrolltrfmeatbug, 10);
    createinvitems(pc_rockefeller, itarscrolltrfmolerat, 10);
    createinvitems(pc_rockefeller, itarscrolltrforcdog, 10);
    createinvitems(pc_rockefeller, itarscrolltrfscavenger, 10);
    createinvitems(pc_rockefeller, itarscrolltrfshadowbeast, 10);
    createinvitems(pc_rockefeller, itarscrolltrfsnapper, 10);
    createinvitems(pc_rockefeller, itarscrolltrfwaran, 10);
    createinvitems(pc_rockefeller, itarscrolltrfwolf, 10);
    createinvitems(pc_rockefeller, itarscrollsummondemon, 10);
    createinvitems(pc_rockefeller, itarscrollsummonskeletons, 10);
    createinvitems(pc_rockefeller, itarscrollsummongolem, 10);
    createinvitems(pc_rockefeller, itarscrollarmyofdarkness, 10);
    createinvitem(pc_rockefeller, itarrunewindfist);
    createinvitem(pc_rockefeller, itarrunestormfist);
    createinvitem(pc_rockefeller, itarrunetelekinesis);
    createinvitem(pc_rockefeller, itarrunecharm);
    createinvitem(pc_rockefeller, itarrunesleep);
    createinvitem(pc_rockefeller, itarrunepyrokinesis);
    createinvitem(pc_rockefeller, itarrunecontrol);
    createinvitem(pc_rockefeller, itarrunebreathofdeath);
    createinvitems(pc_rockefeller, itarscrollfear, 10);
    createinvitems(pc_rockefeller, itarscrollberzerk, 10);
    createinvitems(pc_rockefeller, itarscrollshrink, 10);
    createinvitems(pc_rockefeller, itfo_mutton_01, 20);
    createinvitems(pc_rockefeller, itfoapple, 5);
    createinvitems(pc_rockefeller, itfoloaf, 5);
    createinvitems(pc_rockefeller, itfomutton, 10);
    createinvitems(pc_rockefeller, itfomuttonraw, 20);
    createinvitems(pc_rockefeller, itfocheese, 5);
    createinvitems(pc_rockefeller, itforice, 5);
    createinvitems(pc_rockefeller, itfosoup, 5);
    createinvitems(pc_rockefeller, itfomeatbugragout, 5);
    createinvitems(pc_rockefeller, itfocrawlersoup, 5);
    createinvitems(pc_rockefeller, itfobooze, 10);
    createinvitems(pc_rockefeller, itfowine, 5);
    createinvitems(pc_rockefeller, itfo_wineberrys_01, 5);
    createinvitems(pc_rockefeller, itfobeer, 5);
    createinvitems(pc_rockefeller, itfo_plants_trollberrys_01, 5);
    createinvitems(pc_rockefeller, itfo_plants_flameberry_01, 5);
    createinvitems(pc_rockefeller, itfo_plants_nightshadow_01, 5);
    createinvitems(pc_rockefeller, itfo_plants_nightshadow_02, 5);
    createinvitems(pc_rockefeller, itfo_plants_orcherb_01, 5);
    createinvitems(pc_rockefeller, itfo_plants_orcherb_02, 5);
    createinvitems(pc_rockefeller, itfo_plants_mushroom_01, 5);
    createinvitems(pc_rockefeller, itfo_plants_mushroom_02, 5);
    createinvitems(pc_rockefeller, itfo_plants_stoneroot_01, 5);
    createinvitems(pc_rockefeller, itfo_plants_stoneroot_02, 5);
    createinvitems(pc_rockefeller, itfo_plants_ravenherb_01, 5);
    createinvitems(pc_rockefeller, itfo_plants_ravenherb_02, 5);
    createinvitems(pc_rockefeller, itfo_plants_mountainmoos_01, 5);
    createinvitems(pc_rockefeller, itfo_plants_mountainmoos_02, 5);
    createinvitems(pc_rockefeller, itfo_plants_berrys_01, 5);
    createinvitems(pc_rockefeller, itfo_plants_bloodwood_01, 5);
    createinvitems(pc_rockefeller, itfo_plants_towerwood_01, 5);
    createinvitems(pc_rockefeller, itfo_plants_seraphis_01, 5);
    createinvitems(pc_rockefeller, itfo_plants_velayis_01, 5);
    createinvitems(pc_rockefeller, itfo_plants_herb_03, 5);
    createinvitems(pc_rockefeller, itfo_plants_herb_02, 5);
    createinvitems(pc_rockefeller, itfo_plants_herb_01, 5);
    createinvitems(pc_rockefeller, itmi_plants_swampherb_01, 5);
    createinvitem(pc_rockefeller, itkekey1);
    createinvitem(pc_rockefeller, itkekey2);
    createinvitem(pc_rockefeller, itkekey3);
    createinvitem(pc_rockefeller, itkekey4);
    createinvitems(pc_rockefeller, itkelockpick, 100);
    createinvitems(pc_rockefeller, itlstorch, 50);
    createinvitems(pc_rockefeller, itmihammer, 5);
    createinvitems(pc_rockefeller, itmiscoop, 5);
    createinvitems(pc_rockefeller, itminugget, 1000);
    createinvitem(pc_rockefeller, itmialarmhorn);
    createinvitems(pc_rockefeller, itmiswordraw, 5);
    createinvitem(pc_rockefeller, itmilute);
    createinvitems(pc_rockefeller, itmistomper, 5);
    createinvitems(pc_rockefeller, itmiflask, 5);
    createinvitem(pc_rockefeller, itmi_stuff_pipe_01);
    createinvitem(pc_rockefeller, itmi_stuff_barbknife_01);
    createinvitem(pc_rockefeller, itmi_stuff_oldcoin_01);
    createinvitem(pc_rockefeller, itmi_stuff_plate_01);
    createinvitem(pc_rockefeller, itmi_stuff_candel_01);
    createinvitem(pc_rockefeller, itmi_stuff_cup_01);
    createinvitem(pc_rockefeller, itmi_stuff_cup_02);
    createinvitem(pc_rockefeller, itmi_stuff_silverware_01);
    createinvitem(pc_rockefeller, itmi_stuff_pan_01);
    createinvitem(pc_rockefeller, itmi_stuff_mug_01);
    createinvitem(pc_rockefeller, itmi_stuff_amphore_01);
    createinvitem(pc_rockefeller, itmi_stuff_idol_sleeper_01);
    createinvitem(pc_rockefeller, itmi_stuff_idol_ogront_01);
    createinvitems(pc_rockefeller, itmijoint_1, 5);
    createinvitems(pc_rockefeller, itmijoint_2, 5);
    createinvitems(pc_rockefeller, itmijoint_3, 5);
    createinvitem(pc_rockefeller, itrw_bow_small_01);
    createinvitem(pc_rockefeller, itrw_bow_small_02);
    createinvitem(pc_rockefeller, itrw_bow_small_03);
    createinvitem(pc_rockefeller, itrw_bow_small_04);
    createinvitem(pc_rockefeller, itrw_bow_small_05);
    createinvitem(pc_rockefeller, itrw_bow_long_01);
    createinvitem(pc_rockefeller, itrw_bow_long_02);
    createinvitem(pc_rockefeller, itrw_bow_long_03);
    createinvitem(pc_rockefeller, itrw_bow_long_04);
    createinvitem(pc_rockefeller, itrw_bow_long_05);
    createinvitem(pc_rockefeller, itrw_bow_long_06);
    createinvitem(pc_rockefeller, itrw_bow_long_07);
    createinvitem(pc_rockefeller, itrw_bow_long_08);
    createinvitem(pc_rockefeller, itrw_bow_long_09);
    createinvitem(pc_rockefeller, itrw_bow_war_01);
    createinvitem(pc_rockefeller, itrw_bow_war_02);
    createinvitem(pc_rockefeller, itrw_bow_war_03);
    createinvitem(pc_rockefeller, itrw_bow_war_04);
    createinvitem(pc_rockefeller, itrw_bow_war_05);
    createinvitem(pc_rockefeller, itrw_crossbow_01);
    createinvitem(pc_rockefeller, itrw_crossbow_02);
    createinvitem(pc_rockefeller, itrw_crossbow_03);
    createinvitem(pc_rockefeller, itrw_crossbow_04);
    createinvitems(pc_rockefeller, itamarrow, 50);
    createinvitems(pc_rockefeller, itambolt, 50);
    createinvitem(pc_rockefeller, itwrworldmap);
    createinvitem(pc_rockefeller, itwrworldmap_orc);
    createinvitem(pc_rockefeller, itwrommap);
    createinvitem(pc_rockefeller, itwrfocusmappsi);
    createinvitem(pc_rockefeller, itwrfocimap);
    createinvitem(pc_rockefeller, itwrocmap);
    createinvitem(pc_rockefeller, itwrncmap);
    createinvitem(pc_rockefeller, itwrpsimap);
    createinvitem(pc_rockefeller, goettergabe);
    createinvitem(pc_rockefeller, geheimnisse_der_zauberei);
    createinvitem(pc_rockefeller, machtvolle_kunst);
    createinvitem(pc_rockefeller, elementare_arcanei);
    createinvitem(pc_rockefeller, wahre_macht);
    createinvitem(pc_rockefeller, das_magische_erz);
    createinvitem(pc_rockefeller, schlacht_um_varant1);
    createinvitem(pc_rockefeller, schlacht_um_varant2);
    createinvitem(pc_rockefeller, myrtanas_lyrik);
    createinvitem(pc_rockefeller, lehren_der_goetter1);
    createinvitem(pc_rockefeller, lehren_der_goetter2);
    createinvitem(pc_rockefeller, lehren_der_goetter3);
    createinvitem(pc_rockefeller, jagd_und_beute);
    createinvitem(pc_rockefeller, kampfkunst);
    createinvitem(pc_rockefeller, astronomie);
    createinvitem(pc_rockefeller, rezepturen);
    createinvitem(pc_rockefeller, rezepturen2);
    createinvitem(pc_rockefeller, itwr_book_circle_01);
    createinvitem(pc_rockefeller, itwr_book_circle_02);
    createinvitem(pc_rockefeller, itwr_book_circle_03);
    createinvitem(pc_rockefeller, itwr_book_circle_04);
    createinvitem(pc_rockefeller, itwr_book_circle_05);
    createinvitem(pc_rockefeller, itwr_book_circle_06);
    createinvitem(pc_rockefeller, itmw_1h_club_01);
    createinvitem(pc_rockefeller, itmw_1h_poker_01);
    createinvitem(pc_rockefeller, itmw_1h_sickle_01);
    createinvitem(pc_rockefeller, itmw_1h_mace_light_01);
    createinvitem(pc_rockefeller, itmw_1h_sledgehammer_01);
    equipitem(pc_rockefeller, itmw_1h_warhammer_01 /*4415*/);
    createinvitem(pc_rockefeller, itmw_1h_warhammer_02);
    createinvitem(pc_rockefeller, itmw_1h_warhammer_03);
    createinvitem(pc_rockefeller, itmw_1h_hatchet_01);
    createinvitem(pc_rockefeller, itmw_1h_sword_old_01);
    createinvitem(pc_rockefeller, itmw_1h_nailmace_01);
    createinvitem(pc_rockefeller, itmw_1h_sword_short_01);
    createinvitem(pc_rockefeller, itmw_1h_sword_short_02);
    createinvitem(pc_rockefeller, itmw_1h_sword_short_03);
    createinvitem(pc_rockefeller, itmw_1h_sword_short_04);
    createinvitem(pc_rockefeller, itmw_1h_sword_short_05);
    createinvitem(pc_rockefeller, itmw_1h_axe_old_01);
    createinvitem(pc_rockefeller, itmw_1h_scythe_01);
    createinvitem(pc_rockefeller, itmw_2h_staff_01);
    createinvitem(pc_rockefeller, itmw_2h_staff_02);
    createinvitem(pc_rockefeller, itmw_2h_staff_03);
    createinvitem(pc_rockefeller, itmw_1h_mace_01);
    createinvitem(pc_rockefeller, itmw_1h_mace_02);
    createinvitem(pc_rockefeller, itmw_1h_mace_03);
    createinvitem(pc_rockefeller, itmw_1h_mace_04);
    createinvitem(pc_rockefeller, itmw_1h_sword_01);
    createinvitem(pc_rockefeller, itmw_1h_sword_02);
    createinvitem(pc_rockefeller, itmw_1h_sword_03);
    createinvitem(pc_rockefeller, itmw_1h_sword_04);
    createinvitem(pc_rockefeller, itmw_1h_sword_05);
    createinvitem(pc_rockefeller, itmw_1h_sword_01);
    createinvitem(pc_rockefeller, itmw_1h_mace_war_01);
    createinvitem(pc_rockefeller, itmw_1h_mace_war_02);
    createinvitem(pc_rockefeller, itmw_1h_mace_war_03);
    createinvitem(pc_rockefeller, itmw_1h_mace_war_04);
    createinvitem(pc_rockefeller, itmw_1h_sword_long_01);
    createinvitem(pc_rockefeller, itmw_1h_sword_long_02);
    createinvitem(pc_rockefeller, itmw_1h_sword_long_03);
    createinvitem(pc_rockefeller, itmw_1h_sword_long_04);
    createinvitem(pc_rockefeller, itmw_1h_sword_long_05);
    createinvitem(pc_rockefeller, itmw_1h_axe_01);
    createinvitem(pc_rockefeller, itmw_1h_axe_02);
    createinvitem(pc_rockefeller, itmw_1h_axe_03);
    createinvitem(pc_rockefeller, itmw_1h_sword_broad_01);
    createinvitem(pc_rockefeller, itmw_1h_sword_broad_02);
    createinvitem(pc_rockefeller, itmw_1h_sword_broad_03);
    createinvitem(pc_rockefeller, itmw_1h_sword_broad_04);
    createinvitem(pc_rockefeller, itmw_2h_sword_old_01);
    createinvitem(pc_rockefeller, itmw_1h_sword_bastard_01);
    createinvitem(pc_rockefeller, itmw_1h_sword_bastard_02);
    createinvitem(pc_rockefeller, itmw_1h_sword_bastard_03);
    createinvitem(pc_rockefeller, itmw_1h_sword_bastard_04);
    createinvitem(pc_rockefeller, itmw_2h_axe_old_01);
    createinvitem(pc_rockefeller, itmw_2h_axe_old_02);
    createinvitem(pc_rockefeller, itmw_2h_axe_old_03);
    createinvitem(pc_rockefeller, itmw_2h_sword_light_01);
    createinvitem(pc_rockefeller, itmw_2h_sword_light_02);
    createinvitem(pc_rockefeller, itmw_2h_sword_light_03);
    createinvitem(pc_rockefeller, itmw_2h_sword_light_04);
    createinvitem(pc_rockefeller, itmw_2h_sword_light_05);
    createinvitem(pc_rockefeller, itmw_2h_axe_light_01);
    createinvitem(pc_rockefeller, itmw_2h_axe_light_02);
    createinvitem(pc_rockefeller, itmw_2h_axe_light_03);
    createinvitem(pc_rockefeller, itmw_2h_sword_01);
    createinvitem(pc_rockefeller, itmw_2h_sword_02);
    createinvitem(pc_rockefeller, itmw_2h_sword_03);
    createinvitem(pc_rockefeller, itmw_2h_sword_heavy_01);
    createinvitem(pc_rockefeller, itmw_2h_sword_heavy_02);
    createinvitem(pc_rockefeller, itmw_2h_sword_heavy_03);
    createinvitem(pc_rockefeller, itmw_2h_sword_heavy_04);
    createinvitem(pc_rockefeller, itmw_2h_axe_heavy_01);
    createinvitem(pc_rockefeller, itmw_2h_axe_heavy_02);
    createinvitem(pc_rockefeller, itmw_2h_axe_heavy_03);
    createinvitem(pc_rockefeller, itmw_2h_axe_heavy_04);
    createinvitem(pc_rockefeller, itmw2horcsword01);
    createinvitem(pc_rockefeller, itmw2horcaxe01);
    createinvitem(pc_rockefeller, itmw2horcaxe02);
    createinvitem(pc_rockefeller, itmw2horcaxe03);
    createinvitem(pc_rockefeller, itmw2horcaxe04);
    createinvitem(pc_rockefeller, itmw2horcmace01);
    createinvitem(pc_rockefeller, itmi_amulet_psi_01);
    createinvitem(pc_rockefeller, schutzamulett_waffen);
    createinvitem(pc_rockefeller, schutzamulett_feuer);
    createinvitem(pc_rockefeller, schutzamulett_geschosse);
    createinvitem(pc_rockefeller, schutzamulett_magie);
    createinvitem(pc_rockefeller, schutzamulett_magie_feuer);
    createinvitem(pc_rockefeller, schutzamulett_waffen_geschosse);
    createinvitem(pc_rockefeller, schutzamulett_total);
    createinvitem(pc_rockefeller, gewandtheitsamulett);
    createinvitem(pc_rockefeller, gewandtheitsamulett2);
    createinvitem(pc_rockefeller, staerkeamulett);
    createinvitem(pc_rockefeller, staerkeamulett2);
    createinvitem(pc_rockefeller, lebensamulett);
    createinvitem(pc_rockefeller, amulett_der_magie);
    createinvitem(pc_rockefeller, amulett_der_macht);
    createinvitem(pc_rockefeller, amulett_der_erleuchtung);
    createinvitem(pc_rockefeller, schutzring_feuer1);
    createinvitem(pc_rockefeller, schutzring_feuer2);
    createinvitem(pc_rockefeller, schutzring_geschosse1);
    createinvitem(pc_rockefeller, schutzring_geschosse2);
    createinvitem(pc_rockefeller, schutzring_waffen1);
    createinvitem(pc_rockefeller, schutzring_waffen2);
    createinvitem(pc_rockefeller, schutzring_magie1);
    createinvitem(pc_rockefeller, schutzring_magie2);
    createinvitem(pc_rockefeller, schutzring_magie1_fire1);
    createinvitem(pc_rockefeller, schutzring_magie2_fire2);
    createinvitem(pc_rockefeller, schutzring_geschosse1_waffen1);
    createinvitem(pc_rockefeller, schutzring_geschosse1_waffen1);
    createinvitem(pc_rockefeller, schutzring_geschosse2_waffen2);
    createinvitem(pc_rockefeller, schutzring_total1);
    createinvitem(pc_rockefeller, schutzring_total2);
    createinvitem(pc_rockefeller, ring_des_geschicks);
    createinvitem(pc_rockefeller, ring_des_geschicks2);
    createinvitem(pc_rockefeller, ring_des_lebens);
    createinvitem(pc_rockefeller, ring_des_lebens2);
    createinvitem(pc_rockefeller, staerkering);
    createinvitem(pc_rockefeller, staerkering2);
    createinvitem(pc_rockefeller, ring_der_magie);
    createinvitem(pc_rockefeller, ring_der_erleuchtung);
    createinvitem(pc_rockefeller, machtring);
    createinvitem(pc_rockefeller, itfo_potion_mana_01);
    createinvitem(pc_rockefeller, itfo_potion_mana_02);
    createinvitem(pc_rockefeller, itfo_potion_mana_03);
    createinvitem(pc_rockefeller, itfo_potion_health_01);
    createinvitem(pc_rockefeller, itfo_potion_health_02);
    createinvitem(pc_rockefeller, itfo_potion_health_03);
    createinvitem(pc_rockefeller, itfo_potion_elixier);
    createinvitem(pc_rockefeller, itfo_potion_elixier_egg);
    createinvitem(pc_rockefeller, itfo_potion_strength_01);
    createinvitem(pc_rockefeller, itfo_potion_strength_02);
    createinvitem(pc_rockefeller, itfo_potion_strength_03);
    createinvitem(pc_rockefeller, itfo_potion_dex_01);
    createinvitem(pc_rockefeller, itfo_potion_dex_02);
    createinvitem(pc_rockefeller, itfo_potion_dex_03);
    createinvitem(pc_rockefeller, itfo_potion_health_perma_01);
    createinvitem(pc_rockefeller, itfo_potion_health_perma_02);
    createinvitem(pc_rockefeller, itfo_potion_health_perma_03);
    createinvitem(pc_rockefeller, itfo_potion_mana_perma_01);
    createinvitem(pc_rockefeller, itfo_potion_mana_perma_02);
    createinvitem(pc_rockefeller, itfo_potion_mana_perma_03);
    createinvitem(pc_rockefeller, itfo_potion_master_01);
    createinvitem(pc_rockefeller, itfo_potion_master_02);
    createinvitem(pc_rockefeller, itfo_potion_water_01);
    createinvitem(pc_rockefeller, itfo_potion_haste_01);
    createinvitems(pc_rockefeller, itat_teeth_01, 5);
    createinvitems(pc_rockefeller, itat_wolf_01, 5);
    createinvitems(pc_rockefeller, itat_wolf_02, 5);
    createinvitems(pc_rockefeller, itat_waran_01, 5);
    createinvitems(pc_rockefeller, itat_claws_01, 5);
    createinvitems(pc_rockefeller, itat_crawler_02, 5);
    createinvitems(pc_rockefeller, itat_crawler_01, 5);
    createinvitems(pc_rockefeller, itat_shadow_01, 5);
    createinvitems(pc_rockefeller, itat_shadow_02, 5);
    createinvitems(pc_rockefeller, itat_lurker_01, 5);
    createinvitems(pc_rockefeller, itat_lurker_02, 5);
    createinvitems(pc_rockefeller, itat_troll_02, 5);
    createinvitems(pc_rockefeller, itat_troll_01, 5);
    createinvitems(pc_rockefeller, itat_swampshark_02, 5);
    createinvitems(pc_rockefeller, itat_swampshark_01, 5);
    createinvitems(pc_rockefeller, itat_bloodfly_02, 5);
    createinvitems(pc_rockefeller, itat_bloodfly_01, 5);
    createinvitems(pc_rockefeller, itat_meatbug_01, 5);
};

instance pc_thief(npc_default) {
    name = "Äèåãî";
    npctype = npctype_friend;
    guild = gil_stt;
    level = 999;
    flags = npc_flag_immortal;
    voice = 11;
    id = 1;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 90;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 340;
    attribute[atr_hitpoints] /*0*/ = 340;
    protection[prot_fire] /*3*/ = 1000;
    mdl_setvisual(pc_thief, "HUMANS.MDS");
    mdl_setvisualbody(pc_thief, "hum_body_Naked0", 0, 2, "Hum_Head_Thief", 15, 4, stt_armor_h /*4124*/);
    aivar[22] = true;
    fight_tactic = fai_human_master;
    senses = (sense_see | sense_hear) | sense_smell;
    npc_settalentskill(pc_thief, npc_talent_pickpocket, 1);
    npc_settalentvalue(pc_thief, npc_talent_pickpocket, 60);
    npc_settalentskill(pc_thief, npc_talent_sneak, 1);
    npc_settalentskill(pc_thief, npc_talent_picklock, 1);
    npc_settalentvalue(pc_thief, npc_talent_picklock, 60);
    npc_settalentskill(pc_thief, npc_talent_mage, 6);
    npc_settalentskill(pc_thief, npc_talent_1h, 1);
    npc_settalentskill(pc_thief, npc_talent_bow, 1);
    createinvitems(pc_thief, itamarrow, 100);
    equipitem(pc_thief, diegos_bogen /*4971*/);
    equipitem(pc_thief, itmw_1h_sword_04 /*4404*/);
    daily_routine = rtn_prestart_1;
};

func void rtn_prestart_1() {
    ta_position(0, 0, 12, 0, "WP_INTRO_FALL3");
    ta_position(12, 0, 0, 0, "WP_INTRO_FALL3");
};

func void rtn_start_1() {
    ta_sleep(23, 0, 3, 0, "OCR_HUT_1");
    ta_sitaround(3, 0, 5, 30, "OCR_HUT_Z5_SIT3");
    ta_sleep(5, 30, 7, 0, "OCR_CAULDRON_1");
    ta_sitaround(7, 0, 10, 0, "OCR_CAULDRON_1");
    ta_smalltalk(10, 0, 12, 0, "OCR_CAMPFIRE_A_MOVEMENT1");
    ta_sitaround(12, 0, 16, 0, "OCR_CAULDRON_1");
    ta_smalltalk(16, 0, 18, 0, "OCR_CAMPFIRE_A_MOVEMENT3");
    ta_sitcampfire(18, 0, 23, 0, "OCR_CAMPFIRE_A_MOVEMENT1");
};

func void rtn_ocwait_1() {
    ta_stay(0, 0, 12, 0, "OC_ROUND_13");
    ta_stay(12, 0, 0, 0, "OC_ROUND_13");
};

func void rtn_trollwait_1() {
    ta_stay(0, 0, 23, 0, "OW_PATH_190");
    ta_stay(23, 0, 0, 0, "OW_PATH_190");
};

func void rtn_guidetroll_1() {
    ta_guidepc(0, 0, 12, 0, "LOCATION_12_01");
    ta_guidepc(12, 0, 0, 0, "LOCATION_12_01");
};

func void rtn_waitatwheel_1() {
    ta_stay(0, 0, 12, 0, "LOCATION_12_14_WHEEL");
    ta_stay(12, 0, 24, 0, "LOCATION_12_14_WHEEL");
};

func void rtn_waitatfocus_1() {
    ta_guidepc(0, 0, 12, 0, "LOCATION_12_03");
    ta_guidepc(12, 0, 24, 0, "LOCATION_12_03");
};

func void rtn_omfull_1() {
};

func void rtn_fmtaken_1() {
};

func void rtn_orcassault_1() {
};

instance sfb_1000_senyan(npc_default) {
    name = "Øåíüÿí";
    npctype = npctype_main;
    guild = gil_sfb;
    level = 3;
    voice = 1;
    id = 1000;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(sfb_1000_senyan, "HUMANS.MDS");
    mdl_applyoverlaymds(sfb_1000_senyan, "Humans_Tired.mds");
    mdl_setvisualbody(sfb_1000_senyan, "hum_body_Naked0", 2, 1, "Hum_Head_Psionic", 42, 1, sfb_armor_l /*4131*/);
    b_scale(sfb_1000_senyan);
    mdl_setmodelfatness(sfb_1000_senyan, 0.0);
    fight_tactic = fai_human_coward;
    npc_settalentskill(sfb_1000_senyan, npc_talent_1h, 1);
    createinvitem(sfb_1000_senyan, itmi_stuff_plate_01);
    createinvitem(sfb_1000_senyan, itmw_1h_nailmace_01);
    createinvitems(sfb_1000_senyan, itforice, 4);
    createinvitems(sfb_1000_senyan, itminugget, 7);
    equipitem(sfb_1000_senyan, itmwpickaxe /*4380*/);
    daily_routine = rtn_start_1000;
};

func void rtn_start_1000() {
    ta_standaround(10, 5, 3, 5, "NC_TAVERN_ROOM06");
    ta_standaround(3, 5, 10, 5, "NC_TAVERN_ROOM06");
};

instance sfb_1001_schuerfer(npc_default) {
    name = name_schuerfer;
    npctype = npctype_main;
    guild = gil_sfb;
    level = 3;
    voice = 2;
    id = 1001;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(sfb_1001_schuerfer, "HUMANS.MDS");
    mdl_applyoverlaymds(sfb_1001_schuerfer, "Humans_Tired.mds");
    mdl_setvisualbody(sfb_1001_schuerfer, "hum_body_Naked0", 3, 1, "Hum_Head_Fighter", 95, 3, -1);
    b_scale(sfb_1001_schuerfer);
    mdl_setmodelfatness(sfb_1001_schuerfer, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(sfb_1001_schuerfer, itmi_stuff_cup_01);
    createinvitem(sfb_1001_schuerfer, itmi_stuff_plate_01);
    createinvitem(sfb_1001_schuerfer, itmw_1h_hatchet_01);
    createinvitems(sfb_1001_schuerfer, itforice, 6);
    createinvitems(sfb_1001_schuerfer, itminugget, 5);
    equipitem(sfb_1001_schuerfer, itmwpickaxe /*4380*/);
    daily_routine = rtn_start_1001;
};

func void rtn_start_1001() {
    ta_standaround(10, 0, 3, 0, "NC_TAVERN_ROOM06");
    ta_standaround(3, 0, 10, 0, "NC_TAVERN_ROOM06");
};

instance sfb_1030_schuerfer(npc_default) {
    name = name_schuerfer;
    npctype = npctype_ambient;
    guild = gil_sfb;
    level = 3;
    voice = 1;
    id = 1030;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(sfb_1030_schuerfer, "HUMANS.MDS");
    mdl_applyoverlaymds(sfb_1030_schuerfer, "Humans_Tired.mds");
    mdl_setvisualbody(sfb_1030_schuerfer, "hum_body_Naked0", 2, 1, "Hum_Head_Psionic", 42, 1, sfb_armor_l /*4131*/);
    b_scale(sfb_1030_schuerfer);
    mdl_setmodelfatness(sfb_1030_schuerfer, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(sfb_1030_schuerfer, itmi_stuff_plate_01);
    createinvitem(sfb_1030_schuerfer, itmw_1h_nailmace_01);
    createinvitem(sfb_1030_schuerfer, itmi_stuff_oldcoin_02);
    createinvitems(sfb_1030_schuerfer, itforice, 4);
    createinvitems(sfb_1030_schuerfer, itminugget, 7);
    equipitem(sfb_1030_schuerfer, itmwpickaxe /*4380*/);
    daily_routine = rtn_fmcstart_1030;
};

func void rtn_fmcstart_1030() {
    ta_pickore(1, 0, 13, 0, "FMC_ORE_02");
    ta_pickore(13, 0, 1, 0, "FMC_ORE_02");
};

instance sfb_1031_schuerfer(npc_default) {
    name = name_schuerfer;
    npctype = npctype_ambient;
    guild = gil_sfb;
    level = 3;
    voice = 2;
    id = 1031;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(sfb_1031_schuerfer, "HUMANS.MDS");
    mdl_applyoverlaymds(sfb_1031_schuerfer, "Humans_Tired.mds");
    mdl_setvisualbody(sfb_1031_schuerfer, "hum_body_Naked0", 3, 1, "Hum_Head_Fighter", 44, 3, -1);
    b_scale(sfb_1031_schuerfer);
    mdl_setmodelfatness(sfb_1031_schuerfer, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(sfb_1031_schuerfer, itmi_stuff_cup_01);
    createinvitem(sfb_1031_schuerfer, itmi_stuff_plate_01);
    createinvitem(sfb_1031_schuerfer, itmw_1h_hatchet_01);
    createinvitem(sfb_1031_schuerfer, itmi_stuff_oldcoin_02);
    createinvitems(sfb_1031_schuerfer, itforice, 6);
    createinvitems(sfb_1031_schuerfer, itminugget, 5);
    equipitem(sfb_1031_schuerfer, itmwpickaxe /*4380*/);
    daily_routine = rtn_fmcstart_1031;
};

func void rtn_fmcstart_1031() {
    ta_pickore(1, 0, 13, 0, "FMC_ORE_03");
    ta_pickore(13, 0, 1, 0, "FMC_ORE_03");
};

instance sfb_1032_schuerfer(npc_default) {
    name = name_schuerfer;
    npctype = npctype_ambient;
    guild = gil_sfb;
    level = 6;
    voice = 2;
    id = 1032;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 112;
    attribute[atr_hitpoints] /*0*/ = 112;
    mdl_setvisual(sfb_1032_schuerfer, "HUMANS.MDS");
    mdl_applyoverlaymds(sfb_1032_schuerfer, "Humans_Tired.mds");
    mdl_setvisualbody(sfb_1032_schuerfer, "hum_body_Naked0", 2, 1, "Hum_Head_Thief", 40, 1, sfb_armor_l /*4131*/);
    b_scale(sfb_1032_schuerfer);
    mdl_setmodelfatness(sfb_1032_schuerfer, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(sfb_1032_schuerfer, itmi_stuff_cup_01);
    createinvitem(sfb_1032_schuerfer, itfobooze);
    createinvitem(sfb_1032_schuerfer, itmw_1h_sword_short_01);
    createinvitem(sfb_1032_schuerfer, itmi_stuff_oldcoin_02);
    createinvitems(sfb_1032_schuerfer, itforice, 6);
    createinvitems(sfb_1032_schuerfer, itminugget, 7);
    equipitem(sfb_1032_schuerfer, itmwpickaxe /*4380*/);
    daily_routine = rtn_fmcstart_1032;
};

func void rtn_fmcstart_1032() {
    ta_pickore(1, 0, 13, 0, "FMC_ORE_04");
    ta_pickore(13, 0, 1, 0, "FMC_ORE_04");
};

instance sfb_1033_schuerfer(npc_default) {
    name = name_schuerfer;
    npctype = npctype_ambient;
    guild = gil_sfb;
    level = 6;
    flags = 0;
    voice = 1;
    id = 1033;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 112;
    attribute[atr_hitpoints] /*0*/ = 112;
    mdl_setvisual(sfb_1033_schuerfer, "HUMANS.MDS");
    mdl_applyoverlaymds(sfb_1033_schuerfer, "Humans_Tired.mds");
    mdl_setvisualbody(sfb_1033_schuerfer, "hum_body_Naked0", 3, 1, "Hum_Head_Psionic", 40, 1, sfb_armor_l /*4131*/);
    b_scale(sfb_1033_schuerfer);
    mdl_setmodelfatness(sfb_1033_schuerfer, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(sfb_1033_schuerfer, itmw_1h_nailmace_01);
    createinvitems(sfb_1033_schuerfer, itforice, 5);
    createinvitems(sfb_1033_schuerfer, itminugget, 8);
    equipitem(sfb_1033_schuerfer, itmwpickaxe /*4380*/);
    daily_routine = rtn_fmcstart_1033;
};

func void rtn_fmcstart_1033() {
    ta_pickore(1, 0, 13, 0, "FMC_ORE_05");
    ta_pickore(13, 0, 1, 0, "FMC_ORE_05");
};

instance sfb_1034_schuerfer(npc_default) {
    name = name_schuerfer;
    npctype = npctype_ambient;
    guild = gil_sfb;
    level = 6;
    flags = 0;
    voice = 2;
    id = 1034;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 112;
    attribute[atr_hitpoints] /*0*/ = 112;
    mdl_setvisual(sfb_1034_schuerfer, "HUMANS.MDS");
    mdl_applyoverlaymds(sfb_1034_schuerfer, "Humans_Tired.mds");
    mdl_setvisualbody(sfb_1034_schuerfer, "hum_body_Naked0", 2, 1, "Hum_Head_Pony", 94, 2, sfb_armor_l /*4131*/);
    b_scale(sfb_1034_schuerfer);
    mdl_setmodelfatness(sfb_1034_schuerfer, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(sfb_1034_schuerfer, itmi_stuff_cup_01);
    createinvitems(sfb_1034_schuerfer, itforice, 6);
    createinvitems(sfb_1034_schuerfer, itminugget, 8);
    equipitem(sfb_1034_schuerfer, itmwpickaxe /*4380*/);
    daily_routine = rtn_fmcstart_1034;
};

func void rtn_fmcstart_1034() {
    ta_pickore(1, 0, 13, 0, "FMC_ORE_06");
    ta_pickore(13, 0, 1, 0, "FMC_ORE_06");
};

instance sfb_1035_schuerfer(npc_default) {
    name = name_schuerfer;
    npctype = npctype_ambient;
    guild = gil_sfb;
    level = 6;
    flags = 0;
    voice = 5;
    id = 1035;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 112;
    attribute[atr_hitpoints] /*0*/ = 112;
    mdl_setvisual(sfb_1035_schuerfer, "HUMANS.MDS");
    mdl_applyoverlaymds(sfb_1035_schuerfer, "Humans_Tired.mds");
    mdl_setvisualbody(sfb_1035_schuerfer, "hum_body_Naked0", 3, 0, "Hum_Head_FatBald", 11, 1, sfb_armor_l /*4131*/);
    b_scale(sfb_1035_schuerfer);
    mdl_setmodelfatness(sfb_1035_schuerfer, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(sfb_1035_schuerfer, itmi_stuff_cup_01);
    createinvitem(sfb_1035_schuerfer, itmw_1h_hatchet_01);
    createinvitems(sfb_1035_schuerfer, itforice, 3);
    createinvitems(sfb_1035_schuerfer, itminugget, 9);
    equipitem(sfb_1035_schuerfer, itmwpickaxe /*4380*/);
    daily_routine = rtn_fmcstart_1035;
};

func void rtn_fmcstart_1035() {
    ta_pickore(1, 0, 13, 0, "FMC_ORE_07");
    ta_pickore(13, 0, 1, 0, "FMC_ORE_07");
};

instance sfb_1036_schuerfer(npc_default) {
    name = name_schuerfer;
    npctype = npctype_ambient;
    guild = gil_sfb;
    level = 6;
    flags = 0;
    voice = 1;
    id = 1036;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 112;
    attribute[atr_hitpoints] /*0*/ = 112;
    mdl_setvisual(sfb_1036_schuerfer, "HUMANS.MDS");
    mdl_applyoverlaymds(sfb_1036_schuerfer, "Humans_Tired.mds");
    mdl_setvisualbody(sfb_1036_schuerfer, "hum_body_Naked0", 2, 3, "Hum_Head_FatBald", 7, 1, sfb_armor_l /*4131*/);
    b_scale(sfb_1036_schuerfer);
    mdl_setmodelfatness(sfb_1036_schuerfer, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(sfb_1036_schuerfer, itmi_stuff_cup_01);
    createinvitems(sfb_1036_schuerfer, itforice, 3);
    createinvitems(sfb_1036_schuerfer, itminugget, 5);
    equipitem(sfb_1036_schuerfer, itmwpickaxe /*4380*/);
    daily_routine = rtn_fmcstart_1036;
};

func void rtn_fmcstart_1036() {
    ta_pickore(1, 0, 13, 0, "FMC_ORE_01");
    ta_pickore(13, 0, 1, 0, "FMC_ORE_01");
};

instance sfb_1037_swiney(npc_default) {
    name = "Ñóèíè";
    npctype = npctype_main;
    guild = gil_sfb;
    level = 6;
    flags = 0;
    voice = 9;
    id = 1037;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 112;
    attribute[atr_hitpoints] /*0*/ = 112;
    mdl_setvisual(sfb_1037_swiney, "HUMANS.MDS");
    mdl_applyoverlaymds(sfb_1037_swiney, "Humans_Tired.mds");
    mdl_setvisualbody(sfb_1037_swiney, "hum_body_Naked0", 3, 1, "Hum_Head_Psionic", 41, 2, sfb_armor_l /*4131*/);
    b_scale(sfb_1037_swiney);
    mdl_setmodelfatness(sfb_1037_swiney, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(sfb_1037_swiney, itmi_stuff_cup_01);
    createinvitem(sfb_1037_swiney, itfobooze);
    createinvitem(sfb_1037_swiney, itmw_1h_hatchet_01);
    createinvitems(sfb_1037_swiney, itforice, 6);
    createinvitems(sfb_1037_swiney, itminugget, 10);
    equipitem(sfb_1037_swiney, itmwpickaxe /*4380*/);
    daily_routine = rtn_fmcstart_1037;
};

func void rtn_fmcstart_1037() {
    ta_smoke(1, 0, 13, 0, "FMC_HUT11_OUT");
    ta_smoke(13, 0, 1, 0, "FMC_HUT11_OUT");
};

instance sfb_1038_schuerfer(npc_default) {
    name = name_schuerfer;
    npctype = npctype_ambient;
    guild = gil_sfb;
    level = 6;
    flags = 0;
    voice = 5;
    id = 1038;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 112;
    attribute[atr_hitpoints] /*0*/ = 112;
    mdl_setvisual(sfb_1038_schuerfer, "HUMANS.MDS");
    mdl_applyoverlaymds(sfb_1038_schuerfer, "Humans_Tired.mds");
    mdl_setvisualbody(sfb_1038_schuerfer, "hum_body_Naked0", 2, 1, "Hum_Head_Thief", 42, 1, sfb_armor_l /*4131*/);
    b_scale(sfb_1038_schuerfer);
    mdl_setmodelfatness(sfb_1038_schuerfer, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(sfb_1038_schuerfer, itmi_stuff_plate_01);
    createinvitem(sfb_1038_schuerfer, itmw_1h_nailmace_01);
    createinvitems(sfb_1038_schuerfer, itforice, 2);
    createinvitems(sfb_1038_schuerfer, itminugget, 11);
    equipitem(sfb_1038_schuerfer, itmwpickaxe /*4380*/);
    daily_routine = rtn_fmcstart_1038;
};

func void rtn_fmcstart_1038() {
    ta_pickore(1, 0, 13, 0, "FMC_ORE_08");
    ta_pickore(13, 0, 1, 0, "FMC_ORE_08");
};

instance sfb_1039_schuerfer(npc_default) {
    name = name_schuerfer;
    npctype = npctype_ambient;
    guild = gil_sfb;
    level = 6;
    flags = 0;
    voice = 1;
    id = 1039;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 112;
    attribute[atr_hitpoints] /*0*/ = 112;
    mdl_setvisual(sfb_1039_schuerfer, "HUMANS.MDS");
    mdl_applyoverlaymds(sfb_1039_schuerfer, "Humans_Tired.mds");
    mdl_setvisualbody(sfb_1039_schuerfer, "hum_body_Naked0", 3, 3, "Hum_Head_Pony", 7, 1, sfb_armor_l /*4131*/);
    b_scale(sfb_1039_schuerfer);
    mdl_setmodelfatness(sfb_1039_schuerfer, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(sfb_1039_schuerfer, itmi_stuff_cup_01);
    createinvitems(sfb_1039_schuerfer, itforice, 6);
    createinvitems(sfb_1039_schuerfer, itminugget, 5);
    equipitem(sfb_1039_schuerfer, itmwpickaxe /*4380*/);
    daily_routine = rtn_fmcstart_1039;
};

func void rtn_fmcstart_1039() {
    ta_pickore(1, 0, 13, 0, "FMC_ORE_10");
    ta_pickore(13, 0, 1, 0, "FMC_ORE_10");
};

instance sfb_1040_schuerfer(npc_default) {
    name = name_schuerfer;
    npctype = npctype_ambient;
    guild = gil_sfb;
    level = 6;
    flags = 0;
    voice = 2;
    id = 1040;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 112;
    attribute[atr_hitpoints] /*0*/ = 112;
    mdl_setvisual(sfb_1040_schuerfer, "HUMANS.MDS");
    mdl_applyoverlaymds(sfb_1040_schuerfer, "Humans_Tired.mds");
    mdl_setvisualbody(sfb_1040_schuerfer, "hum_body_Naked0", 2, 1, "Hum_Head_Pony", 43, 3, sfb_armor_l /*4131*/);
    b_scale(sfb_1040_schuerfer);
    mdl_setmodelfatness(sfb_1040_schuerfer, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(sfb_1040_schuerfer, itmi_stuff_plate_01);
    createinvitem(sfb_1040_schuerfer, itmw_1h_sword_short_01);
    createinvitems(sfb_1040_schuerfer, itforice, 2);
    createinvitems(sfb_1040_schuerfer, itminugget, 6);
    equipitem(sfb_1040_schuerfer, itmwpickaxe /*4380*/);
    daily_routine = rtn_fmcstart_1040;
};

func void rtn_fmcstart_1040() {
    ta_sitaround(1, 0, 13, 0, "FMC_HUT01_OUT");
    ta_sitaround(13, 0, 1, 0, "FMC_HUT01_OUT");
};

instance sfb_1041_schuerfer(npc_default) {
    name = name_schuerfer;
    npctype = npctype_ambient;
    guild = gil_sfb;
    level = 6;
    flags = 0;
    voice = 5;
    id = 1041;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 112;
    attribute[atr_hitpoints] /*0*/ = 112;
    mdl_setvisual(sfb_1041_schuerfer, "HUMANS.MDS");
    mdl_applyoverlaymds(sfb_1041_schuerfer, "Humans_Tired.mds");
    mdl_setvisualbody(sfb_1041_schuerfer, "hum_body_Naked0", 3, 1, "Hum_Head_Fighter", 43, 2, sfb_armor_l /*4131*/);
    b_scale(sfb_1041_schuerfer);
    mdl_setmodelfatness(sfb_1041_schuerfer, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(sfb_1041_schuerfer, itmi_stuff_cup_01);
    createinvitem(sfb_1041_schuerfer, itmw_1h_nailmace_01);
    createinvitems(sfb_1041_schuerfer, itforice, 6);
    createinvitems(sfb_1041_schuerfer, itminugget, 10);
    equipitem(sfb_1041_schuerfer, itmwpickaxe /*4380*/);
    daily_routine = rtn_fmcstart_1041;
};

func void rtn_fmcstart_1041() {
    ta_sitaround(1, 0, 13, 0, "FMC_HUT01_OUT");
    ta_sitaround(13, 0, 1, 0, "FMC_HUT01_OUT");
};

instance sfb_1042_schuerfer(npc_default) {
    name = name_schuerfer;
    npctype = npctype_ambient;
    guild = gil_sfb;
    level = 6;
    flags = 0;
    voice = 1;
    id = 1042;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 112;
    attribute[atr_hitpoints] /*0*/ = 112;
    mdl_setvisual(sfb_1042_schuerfer, "HUMANS.MDS");
    mdl_applyoverlaymds(sfb_1042_schuerfer, "Humans_Tired.mds");
    mdl_setvisualbody(sfb_1042_schuerfer, "hum_body_Naked0", 2, 1, "Hum_Head_Bald", 43, 1, sfb_armor_l /*4131*/);
    b_scale(sfb_1042_schuerfer);
    mdl_setmodelfatness(sfb_1042_schuerfer, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(sfb_1042_schuerfer, itmi_stuff_cup_01);
    createinvitems(sfb_1042_schuerfer, itforice, 6);
    createinvitems(sfb_1042_schuerfer, itminugget, 10);
    equipitem(sfb_1042_schuerfer, itmwpickaxe /*4380*/);
    daily_routine = rtn_fmcstart_1042;
};

func void rtn_fmcstart_1042() {
    ta_smoke(1, 0, 13, 0, "FMC_HUT04_OUT");
    ta_smoke(1, 0, 13, 0, "FMC_HUT04_OUT");
};

instance sfb_1043_schuerfer(npc_default) {
    name = name_schuerfer;
    npctype = npctype_ambient;
    guild = gil_sfb;
    level = 6;
    flags = 0;
    voice = 2;
    id = 1043;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 112;
    attribute[atr_hitpoints] /*0*/ = 112;
    mdl_setvisual(sfb_1043_schuerfer, "HUMANS.MDS");
    mdl_applyoverlaymds(sfb_1043_schuerfer, "Humans_Tired.mds");
    mdl_setvisualbody(sfb_1043_schuerfer, "hum_body_Naked0", 3, 1, "Hum_Head_Psionic", 43, 4, sfb_armor_l /*4131*/);
    b_scale(sfb_1043_schuerfer);
    mdl_setmodelfatness(sfb_1043_schuerfer, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(sfb_1043_schuerfer, itmi_stuff_plate_01);
    createinvitem(sfb_1043_schuerfer, itmw_1h_sword_short_01);
    createinvitems(sfb_1043_schuerfer, itforice, 6);
    createinvitems(sfb_1043_schuerfer, itminugget, 6);
    equipitem(sfb_1043_schuerfer, itmwpickaxe /*4380*/);
    daily_routine = rtn_fmcstart_1043;
};

func void rtn_fmcstart_1043() {
    ta_smoke(1, 0, 13, 0, "FMC_HUT04_OUT");
    ta_smoke(1, 0, 13, 0, "FMC_HUT04_OUT");
};

instance sfb_1044_schuerfer(npc_default) {
    name = name_schuerfer;
    npctype = npctype_ambient;
    guild = gil_sfb;
    level = 6;
    flags = 0;
    voice = 5;
    id = 1044;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 112;
    attribute[atr_hitpoints] /*0*/ = 112;
    mdl_setvisual(sfb_1044_schuerfer, "HUMANS.MDS");
    mdl_applyoverlaymds(sfb_1044_schuerfer, "Humans_Tired.mds");
    mdl_setvisualbody(sfb_1044_schuerfer, "hum_body_Naked0", 2, 1, "Hum_Head_Fighter", 42, 1, sfb_armor_l /*4131*/);
    b_scale(sfb_1044_schuerfer);
    mdl_setmodelfatness(sfb_1044_schuerfer, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(sfb_1044_schuerfer, itmi_stuff_plate_01);
    createinvitems(sfb_1044_schuerfer, itforice, 6);
    createinvitems(sfb_1044_schuerfer, itminugget, 10);
    equipitem(sfb_1044_schuerfer, itmwpickaxe /*4380*/);
    daily_routine = rtn_fmcstart_1044;
};

func void rtn_fmcstart_1044() {
    ta_pickore(1, 0, 13, 0, "FMC_ORE_09");
    ta_pickore(13, 0, 1, 0, "FMC_ORE_09");
};

instance sld_700_lee(npc_default) {
    name = "Ëè";
    npctype = npctype_main;
    guild = gil_sld;
    level = 19;
    voice = 8;
    id = 700;
    attribute[atr_strength] /*4*/ = 100;
    attribute[atr_dexterity] /*5*/ = 75;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 268;
    attribute[atr_hitpoints] /*0*/ = 268;
    mdl_setvisual(sld_700_lee, "HUMANS.MDS");
    mdl_applyoverlaymds(sld_700_lee, "Humans_Militia.mds");
    mdl_setvisualbody(sld_700_lee, "hum_body_Naked0", 1, 1, "Hum_Head_Pony", 88, 0, sld_armor_h /*4137*/);
    b_scale(sld_700_lee);
    mdl_setmodelfatness(sld_700_lee, 0.0);
    fight_tactic = fai_human_master;
    senses = (sense_see | sense_hear) | sense_smell;
    npc_settalentskill(sld_700_lee, npc_talent_1h, 2);
    npc_settalentskill(sld_700_lee, npc_talent_2h, 2);
    npc_settalentskill(sld_700_lee, npc_talent_bow, 1);
    createinvitems(sld_700_lee, itamarrow, 20);
    createinvitems(sld_700_lee, itforice, 8);
    createinvitems(sld_700_lee, itfoloaf, 5);
    createinvitems(sld_700_lee, itfomutton, 4);
    createinvitems(sld_700_lee, itminugget, 25);
    createinvitems(sld_700_lee, itfobooze, 5);
    createinvitems(sld_700_lee, itlstorch, 5);
    createinvitems(sld_700_lee, itfo_potion_health_02, 10);
    equipitem(sld_700_lee, lees_axt /*4980*/);
    equipitem(sld_700_lee, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_700;
};

func void rtn_start_700() {
    ta_sleep(1, 0, 7, 0, "NC_SMALL_CAVE_CENTER");
    ta_smalltalk(7, 0, 19, 0, "NC_SMALL_CAVE_CENTER");
    ta_readbook(19, 0, 1, 0, "NC_SMALL_CAVE_READBOOK");
};

func void rtn_damnpast_700() {
    ta_boss(23, 0, 6, 0, "NC_DAM2");
    ta_boss(6, 0, 23, 0, "NC_DAM2");
};

func void rtn_pcsld_700() {
    ta_guidepc(23, 0, 6, 0, "NC_DAM");
    ta_guidepc(6, 0, 23, 0, "NC_DAM");
};

instance sld_701_orik(npc_default) {
    name = "Îðèê";
    npctype = npctype_ambient;
    guild = gil_sld;
    level = 18;
    voice = 8;
    id = 701;
    attribute[atr_strength] /*4*/ = 90;
    attribute[atr_dexterity] /*5*/ = 70;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 256;
    attribute[atr_hitpoints] /*0*/ = 256;
    mdl_setvisual(sld_701_orik, "HUMANS.MDS");
    mdl_applyoverlaymds(sld_701_orik, "Humans_Militia.mds");
    mdl_setvisualbody(sld_701_orik, "hum_body_Naked0", 0, 3, "Hum_Head_FatBald", 8, 0, sld_armor_h /*4137*/);
    b_scale(sld_701_orik);
    mdl_setmodelfatness(sld_701_orik, 0.0);
    fight_tactic = fai_human_master;
    npc_settalentskill(sld_701_orik, npc_talent_1h, 1);
    npc_settalentskill(sld_701_orik, npc_talent_2h, 1);
    createinvitem(sld_701_orik, itmi_stuff_barbknife_01);
    createinvitem(sld_701_orik, itmi_stuff_amphore_01);
    createinvitems(sld_701_orik, itamarrow, 20);
    createinvitems(sld_701_orik, itforice, 7);
    createinvitems(sld_701_orik, itfoloaf, 5);
    createinvitems(sld_701_orik, itfomutton, 4);
    createinvitems(sld_701_orik, itminugget, 19);
    createinvitems(sld_701_orik, itfobooze, 5);
    createinvitems(sld_701_orik, itlstorch, 5);
    createinvitems(sld_701_orik, itfo_potion_health_02, 9);
    equipitem(sld_701_orik, oriks_axt /*4981*/);
    equipitem(sld_701_orik, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_701;
};

func void rtn_start_701() {
    ta_smalltalk(7, 0, 19, 0, "NC_SMALL_CAVE_CENTER");
    ta_boss(19, 0, 0, 0, "NC_HUT05_OUT");
    ta_sleep(0, 0, 7, 0, "NC_HUT05_IN");
};

instance sld_702_soeldner(npc_default) {
    name = name_soeldner;
    npctype = npctype_main;
    guild = gil_sld;
    level = 18;
    voice = 4;
    id = 702;
    attribute[atr_strength] /*4*/ = 90;
    attribute[atr_dexterity] /*5*/ = 70;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 256;
    attribute[atr_hitpoints] /*0*/ = 256;
    mdl_setvisual(sld_702_soeldner, "HUMANS.MDS");
    mdl_applyoverlaymds(sld_702_soeldner, "Humans_Militia.mds");
    mdl_setvisualbody(sld_702_soeldner, "hum_body_Naked0", 1, 1, "Hum_Head_Fighter", 46, 2, sld_armor_h /*4137*/);
    b_scale(sld_702_soeldner);
    mdl_setmodelfatness(sld_702_soeldner, 0.0);
    fight_tactic = fai_human_master;
    npc_settalentskill(sld_702_soeldner, npc_talent_1h, 1);
    npc_settalentskill(sld_702_soeldner, npc_talent_2h, 1);
    npc_settalentskill(sld_702_soeldner, npc_talent_bow, 1);
    createinvitem(sld_702_soeldner, itmi_stuff_barbknife_01);
    createinvitem(sld_702_soeldner, itmi_stuff_mug_01);
    createinvitems(sld_702_soeldner, itamarrow, 20);
    createinvitems(sld_702_soeldner, itforice, 7);
    createinvitems(sld_702_soeldner, itfoloaf, 5);
    createinvitems(sld_702_soeldner, itfomutton, 4);
    createinvitems(sld_702_soeldner, itminugget, 24);
    createinvitems(sld_702_soeldner, itfobooze, 5);
    createinvitems(sld_702_soeldner, itlstorch, 5);
    createinvitems(sld_702_soeldner, itfo_potion_health_02, 8);
    equipitem(sld_702_soeldner, itmw_1h_mace_war_03 /*4408*/);
    equipitem(sld_702_soeldner, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_702;
};

func void rtn_start_702() {
    ta_guard(6, 0, 23, 0, "NC_SMALL_CAVE_ENTRANCE_GUARD");
    ta_guard(23, 0, 6, 0, "NC_SMALL_CAVE_ENTRANCE_GUARD");
};

instance sld_703_soeldner(npc_default) {
    name = name_soeldner;
    npctype = npctype_guard;
    guild = gil_sld;
    level = 18;
    voice = 11;
    id = 703;
    attribute[atr_strength] /*4*/ = 90;
    attribute[atr_dexterity] /*5*/ = 70;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 256;
    attribute[atr_hitpoints] /*0*/ = 256;
    mdl_setvisual(sld_703_soeldner, "HUMANS.MDS");
    mdl_applyoverlaymds(sld_703_soeldner, "Humans_Militia.mds");
    mdl_setvisualbody(sld_703_soeldner, "hum_body_Naked0", 0, 1, "Hum_Head_Pony", 53, 1, sld_armor_h /*4137*/);
    b_scale(sld_703_soeldner);
    mdl_setmodelfatness(sld_703_soeldner, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(sld_703_soeldner, npc_talent_1h, 2);
    npc_settalentskill(sld_703_soeldner, npc_talent_2h, 1);
    npc_settalentskill(sld_703_soeldner, npc_talent_bow, 1);
    createinvitem(sld_703_soeldner, itmi_stuff_barbknife_01);
    createinvitem(sld_703_soeldner, itmi_stuff_amphore_01);
    createinvitems(sld_703_soeldner, itamarrow, 20);
    createinvitems(sld_703_soeldner, itforice, 7);
    createinvitems(sld_703_soeldner, itfoloaf, 5);
    createinvitems(sld_703_soeldner, itfomutton, 4);
    createinvitems(sld_703_soeldner, itminugget, 23);
    createinvitems(sld_703_soeldner, itfobooze, 5);
    createinvitems(sld_703_soeldner, itlstorch, 5);
    createinvitems(sld_703_soeldner, itfo_potion_health_02, 8);
    equipitem(sld_703_soeldner, itmw_1h_mace_war_03 /*4408*/);
    equipitem(sld_703_soeldner, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_703;
};

func void rtn_start_703() {
    ta_sitaround(7, 45, 23, 45, "NC_PLACE01");
    ta_sleep(23, 45, 7, 45, "NC_HUT02_IN");
};

instance sld_704_blade(npc_default) {
    name = "Áëåéä";
    npctype = npctype_ambient;
    guild = gil_sld;
    level = 18;
    voice = 11;
    id = 704;
    attribute[atr_strength] /*4*/ = 90;
    attribute[atr_dexterity] /*5*/ = 70;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 256;
    attribute[atr_hitpoints] /*0*/ = 256;
    mdl_setvisual(sld_704_blade, "HUMANS.MDS");
    mdl_applyoverlaymds(sld_704_blade, "Humans_Militia.mds");
    mdl_setvisualbody(sld_704_blade, "hum_body_Naked0", 1, 1, "Hum_Head_Pony", 47, 2, sld_armor_h /*4137*/);
    b_scale(sld_704_blade);
    mdl_setmodelfatness(sld_704_blade, 0.0);
    fight_tactic = fai_human_master;
    npc_settalentskill(sld_704_blade, npc_talent_1h, 1);
    npc_settalentskill(sld_704_blade, npc_talent_2h, 1);
    npc_settalentskill(sld_704_blade, npc_talent_bow, 1);
    createinvitem(sld_704_blade, itmi_stuff_barbknife_01);
    createinvitem(sld_704_blade, itmi_stuff_mug_01);
    createinvitem(sld_704_blade, itmi_stuff_amphore_01);
    createinvitems(sld_704_blade, itamarrow, 22);
    createinvitems(sld_704_blade, itforice, 9);
    createinvitems(sld_704_blade, itfoloaf, 5);
    createinvitems(sld_704_blade, itfomutton, 4);
    createinvitems(sld_704_blade, itminugget, 18);
    createinvitems(sld_704_blade, itfobooze, 7);
    createinvitems(sld_704_blade, itlstorch, 5);
    createinvitems(sld_704_blade, itfo_potion_health_02, 11);
    equipitem(sld_704_blade, itmw_1h_mace_war_03 /*4408*/);
    equipitem(sld_704_blade, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_704;
};

func void rtn_start_704() {
    ta_sleep(23, 0, 7, 30, "NC_HUT10_IN");
    ta_smalltalk(7, 30, 23, 0, "NC_HUT09_OUT");
};

instance sld_705_soeldner(npc_default) {
    name = name_soeldner;
    npctype = npctype_guard;
    guild = gil_sld;
    level = 16;
    voice = 8;
    id = 705;
    attribute[atr_strength] /*4*/ = 75;
    attribute[atr_dexterity] /*5*/ = 55;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 232;
    attribute[atr_hitpoints] /*0*/ = 232;
    mdl_setvisual(sld_705_soeldner, "HUMANS.MDS");
    mdl_applyoverlaymds(sld_705_soeldner, "Humans_Militia.mds");
    mdl_setvisualbody(sld_705_soeldner, "hum_body_Naked0", 0, 1, "Hum_Head_Pony", 50, 2, sld_armor_m /*4136*/);
    b_scale(sld_705_soeldner);
    mdl_setmodelfatness(sld_705_soeldner, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(sld_705_soeldner, npc_talent_1h, 1);
    npc_settalentskill(sld_705_soeldner, npc_talent_2h, 1);
    npc_settalentskill(sld_705_soeldner, npc_talent_bow, 1);
    createinvitem(sld_705_soeldner, itmi_stuff_barbknife_01);
    createinvitem(sld_705_soeldner, itmi_stuff_amphore_01);
    createinvitems(sld_705_soeldner, itamarrow, 20);
    createinvitems(sld_705_soeldner, itforice, 8);
    createinvitems(sld_705_soeldner, itfoloaf, 5);
    createinvitems(sld_705_soeldner, itfomutton, 4);
    createinvitems(sld_705_soeldner, itminugget, 12);
    createinvitems(sld_705_soeldner, itfobooze, 5);
    createinvitems(sld_705_soeldner, itlstorch, 5);
    createinvitems(sld_705_soeldner, itfo_potion_health_02, 8);
    equipitem(sld_705_soeldner, itmw_1h_mace_war_03 /*4408*/);
    equipitem(sld_705_soeldner, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_705;
};

func void rtn_start_705() {
    ta_smith_sharp(8, 0, 0, 0, "NC_HUT03_OUT_MOVEMENT");
    ta_sleep(0, 0, 8, 0, "NC_HUT03_IN");
};

instance sld_706_soeldner(npc_default) {
    name = name_soeldner;
    npctype = npctype_guard;
    guild = gil_sld;
    level = 18;
    voice = 11;
    id = 706;
    attribute[atr_strength] /*4*/ = 90;
    attribute[atr_dexterity] /*5*/ = 70;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 256;
    attribute[atr_hitpoints] /*0*/ = 256;
    mdl_setvisual(sld_706_soeldner, "HUMANS.MDS");
    mdl_applyoverlaymds(sld_706_soeldner, "Humans_Militia.mds");
    mdl_setvisualbody(sld_706_soeldner, "hum_body_Naked0", 1, 1, "Hum_Head_Pony", 49, 1, sld_armor_h /*4137*/);
    b_scale(sld_706_soeldner);
    mdl_setmodelfatness(sld_706_soeldner, 0.0);
    fight_tactic = fai_human_ranged;
    npc_settalentskill(sld_706_soeldner, npc_talent_1h, 1);
    npc_settalentskill(sld_706_soeldner, npc_talent_2h, 1);
    npc_settalentskill(sld_706_soeldner, npc_talent_bow, 1);
    createinvitem(sld_706_soeldner, itmi_stuff_barbknife_01);
    createinvitem(sld_706_soeldner, itmi_stuff_amphore_01);
    createinvitems(sld_706_soeldner, itamarrow, 20);
    createinvitems(sld_706_soeldner, itforice, 7);
    createinvitems(sld_706_soeldner, itfoloaf, 6);
    createinvitems(sld_706_soeldner, itfomutton, 4);
    createinvitems(sld_706_soeldner, itminugget, 18);
    createinvitems(sld_706_soeldner, itfobooze, 4);
    createinvitems(sld_706_soeldner, itlstorch, 5);
    createinvitems(sld_706_soeldner, itfo_potion_health_02, 9);
    equipitem(sld_706_soeldner, itmw_1h_mace_war_03 /*4408*/);
    equipitem(sld_706_soeldner, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_706;
};

func void rtn_start_706() {
    ta_standaround(7, 30, 0, 0, "NC_HUT02_OUT");
    ta_sleep(0, 0, 7, 30, "NC_HUT02_IN");
};

instance sld_707_soeldner(npc_default) {
    name = name_soeldner;
    npctype = npctype_guard;
    guild = gil_sld;
    level = 16;
    voice = 8;
    id = 707;
    attribute[atr_strength] /*4*/ = 75;
    attribute[atr_dexterity] /*5*/ = 55;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 232;
    attribute[atr_hitpoints] /*0*/ = 232;
    mdl_setvisual(sld_707_soeldner, "HUMANS.MDS");
    mdl_applyoverlaymds(sld_707_soeldner, "Humans_Militia.mds");
    mdl_setvisualbody(sld_707_soeldner, "hum_body_Naked0", 0, 1, "Hum_Head_Fighter", 51, 2, sld_armor_m /*4136*/);
    b_scale(sld_707_soeldner);
    mdl_setmodelfatness(sld_707_soeldner, 0.0);
    fight_tactic = fai_human_ranged;
    npc_settalentskill(sld_707_soeldner, npc_talent_1h, 2);
    npc_settalentskill(sld_707_soeldner, npc_talent_bow, 1);
    createinvitem(sld_707_soeldner, itmi_stuff_barbknife_01);
    createinvitem(sld_707_soeldner, itmi_stuff_amphore_01);
    createinvitems(sld_707_soeldner, itamarrow, 20);
    createinvitems(sld_707_soeldner, itforice, 8);
    createinvitems(sld_707_soeldner, itfoloaf, 8);
    createinvitems(sld_707_soeldner, itfomutton, 6);
    createinvitems(sld_707_soeldner, itminugget, 15);
    createinvitems(sld_707_soeldner, itfobooze, 6);
    createinvitems(sld_707_soeldner, itlstorch, 5);
    createinvitems(sld_707_soeldner, itfo_potion_health_02, 7);
    equipitem(sld_707_soeldner, itmw_1h_mace_war_03 /*4408*/);
    equipitem(sld_707_soeldner, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_707;
};

func void rtn_start_707() {
    ta_guardpalisade(6, 30, 22, 15, "NC_LO_05");
    ta_guardpalisade(22, 15, 6, 30, "NC_LO_05");
};

instance sld_708_soeldner(npc_default) {
    name = name_soeldner;
    npctype = npctype_ambient;
    guild = gil_sld;
    level = 8;
    voice = 11;
    id = 708;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 20;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 136;
    attribute[atr_hitpoints] /*0*/ = 136;
    mdl_setvisual(sld_708_soeldner, "HUMANS.MDS");
    mdl_applyoverlaymds(sld_708_soeldner, "Humans_Relaxed.mds");
    mdl_setvisualbody(sld_708_soeldner, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 36, 2, sld_armor_m /*4136*/);
    b_scale(sld_708_soeldner);
    mdl_setmodelfatness(sld_708_soeldner, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(sld_708_soeldner, npc_talent_bow, 1);
    npc_settalentskill(sld_708_soeldner, npc_talent_1h, 1);
    createinvitem(sld_708_soeldner, itmi_stuff_plate_01);
    createinvitem(sld_708_soeldner, itmi_stuff_cup_01);
    createinvitem(sld_708_soeldner, itfomutton);
    createinvitem(sld_708_soeldner, itfoloaf);
    createinvitem(sld_708_soeldner, itat_teeth_01);
    createinvitems(sld_708_soeldner, itkelockpick, 3);
    createinvitems(sld_708_soeldner, itminugget, 15);
    createinvitems(sld_708_soeldner, itforice, 9);
    createinvitems(sld_708_soeldner, itfobooze, 7);
    createinvitems(sld_708_soeldner, itlstorch, 3);
    createinvitems(sld_708_soeldner, itfo_potion_health_01, 3);
    createinvitems(sld_708_soeldner, itamarrow, 20);
    equipitem(sld_708_soeldner, itmw_1h_mace_03 /*4399*/);
    equipitem(sld_708_soeldner, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_708;
};

func void rtn_start_708() {
    ta_sleep(0, 0, 8, 0, "NC_HUT07_IN");
    ta_sitaround(8, 0, 0, 0, "NC_PLACE03");
};

instance sld_709_cord(npc_default) {
    name = "Êîðä";
    npctype = npctype_main;
    guild = gil_sld;
    level = 18;
    voice = 14;
    id = 709;
    attribute[atr_strength] /*4*/ = 90;
    attribute[atr_dexterity] /*5*/ = 35;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 256;
    attribute[atr_hitpoints] /*0*/ = 256;
    mdl_setvisual(sld_709_cord, "HUMANS.MDS");
    mdl_applyoverlaymds(sld_709_cord, "Humans_Militia.mds");
    mdl_setvisualbody(sld_709_cord, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 104, 1, sld_armor_h /*4137*/);
    b_scale(sld_709_cord);
    mdl_setmodelfatness(sld_709_cord, 0.0);
    fight_tactic = fai_human_master;
    npc_settalentskill(sld_709_cord, npc_talent_1h, 2);
    npc_settalentskill(sld_709_cord, npc_talent_2h, 1);
    npc_settalentskill(sld_709_cord, npc_talent_bow, 1);
    createinvitem(sld_709_cord, itmi_stuff_barbknife_01);
    createinvitem(sld_709_cord, itmi_stuff_amphore_01);
    createinvitems(sld_709_cord, itamarrow, 23);
    createinvitems(sld_709_cord, itforice, 7);
    createinvitems(sld_709_cord, itfoloaf, 7);
    createinvitems(sld_709_cord, itfomutton, 4);
    createinvitems(sld_709_cord, itminugget, 15);
    createinvitems(sld_709_cord, itfobooze, 5);
    createinvitems(sld_709_cord, itlstorch, 5);
    createinvitems(sld_709_cord, itfo_potion_health_02, 8);
    equipitem(sld_709_cord, cords_spalter /*4983*/);
    equipitem(sld_709_cord, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_709;
};

func void rtn_start_709() {
    ta_sleep(21, 0, 7, 0, "NC_HUT09_IN");
    ta_boss(7, 0, 21, 0, "NC_WATERFALL_TOP01_MOVEMENT");
};

func void rtn_fmtaken_709() {
    ta_stay(0, 0, 23, 0, "OW_PATH_075");
    ta_stay(23, 0, 24, 0, "OW_PATH_075");
};

instance sld_710_soeldner(npc_default) {
    name = name_soeldner;
    npctype = npctype_guard;
    guild = gil_sld;
    level = 16;
    voice = 8;
    id = 710;
    attribute[atr_strength] /*4*/ = 75;
    attribute[atr_dexterity] /*5*/ = 55;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 232;
    attribute[atr_hitpoints] /*0*/ = 232;
    mdl_setvisual(sld_710_soeldner, "HUMANS.MDS");
    mdl_applyoverlaymds(sld_710_soeldner, "Humans_Militia.mds");
    mdl_setvisualbody(sld_710_soeldner, "hum_body_Naked0", 1, 3, "Hum_Head_FatBald", 9, 2, sld_armor_m /*4136*/);
    b_scale(sld_710_soeldner);
    mdl_setmodelfatness(sld_710_soeldner, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(sld_710_soeldner, npc_talent_1h, 2);
    npc_settalentskill(sld_710_soeldner, npc_talent_2h, 1);
    createinvitem(sld_710_soeldner, itmi_stuff_barbknife_01);
    createinvitem(sld_710_soeldner, itmi_stuff_amphore_01);
    createinvitems(sld_710_soeldner, itamarrow, 20);
    createinvitems(sld_710_soeldner, itforice, 7);
    createinvitems(sld_710_soeldner, itfoloaf, 5);
    createinvitems(sld_710_soeldner, itfomutton, 4);
    createinvitems(sld_710_soeldner, itminugget, 18);
    createinvitems(sld_710_soeldner, itfobooze, 6);
    createinvitems(sld_710_soeldner, itlstorch, 6);
    createinvitems(sld_710_soeldner, itfo_potion_health_02, 8);
    equipitem(sld_710_soeldner, itmw_1h_mace_war_03 /*4408*/);
    equipitem(sld_710_soeldner, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_710;
};

func void rtn_start_710() {
    ta_sleep(22, 55, 7, 35, "NC_HUT10_IN");
    ta_smalltalk(7, 35, 22, 55, "NC_HUT10_OUT");
};

instance sld_720_soeldner(npc_default) {
    name = name_soeldner;
    npctype = npctype_guard;
    guild = gil_sld;
    level = 16;
    voice = 8;
    id = 720;
    attribute[atr_strength] /*4*/ = 75;
    attribute[atr_dexterity] /*5*/ = 55;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 232;
    attribute[atr_hitpoints] /*0*/ = 232;
    mdl_setvisual(sld_720_soeldner, "HUMANS.MDS");
    mdl_applyoverlaymds(sld_720_soeldner, "Humans_Militia.mds");
    mdl_setvisualbody(sld_720_soeldner, "hum_body_Naked0", 1, 1, "Hum_Head_Pony", 47, 2, sld_armor_m /*4136*/);
    b_scale(sld_720_soeldner);
    mdl_setmodelfatness(sld_720_soeldner, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(sld_720_soeldner, npc_talent_1h, 2);
    npc_settalentskill(sld_720_soeldner, npc_talent_2h, 1);
    createinvitem(sld_720_soeldner, itmi_stuff_barbknife_01);
    createinvitem(sld_720_soeldner, itmi_stuff_mug_01);
    createinvitems(sld_720_soeldner, itamarrow, 20);
    createinvitems(sld_720_soeldner, itforice, 6);
    createinvitems(sld_720_soeldner, itfoloaf, 6);
    createinvitems(sld_720_soeldner, itfomutton, 6);
    createinvitems(sld_720_soeldner, itminugget, 16);
    createinvitems(sld_720_soeldner, itfobooze, 6);
    createinvitems(sld_720_soeldner, itlstorch, 6);
    createinvitems(sld_720_soeldner, itfo_potion_health_02, 6);
    equipitem(sld_720_soeldner, itmw_1h_mace_war_03 /*4408*/);
    equipitem(sld_720_soeldner, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_720;
};

func void rtn_start_720() {
    ta_sleep(0, 30, 8, 0, "NC_HUT07_IN");
    ta_roastscavenger(8, 0, 22, 0, "NC_PLACE03_MOVEMENT");
    ta_sitaround(22, 0, 0, 30, "NC_PLACE03_MOVEMENT");
};

instance sld_723_soeldner(npc_default) {
    name = name_soeldner;
    npctype = npctype_guard;
    guild = gil_sld;
    level = 18;
    voice = 11;
    id = 723;
    attribute[atr_strength] /*4*/ = 90;
    attribute[atr_dexterity] /*5*/ = 70;
    attribute[atr_mana_max] /*3*/ = 10;
    attribute[atr_mana] /*2*/ = 10;
    attribute[atr_hitpoints_max] /*1*/ = 256;
    attribute[atr_hitpoints] /*0*/ = 256;
    mdl_setvisual(sld_723_soeldner, "HUMANS.MDS");
    mdl_applyoverlaymds(sld_723_soeldner, "Humans_Militia.mds");
    mdl_setvisualbody(sld_723_soeldner, "hum_body_Naked0", 1, 1, "Hum_Head_Pony", 48, 1, sld_armor_h /*4137*/);
    b_scale(sld_723_soeldner);
    mdl_setmodelfatness(sld_723_soeldner, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(sld_723_soeldner, npc_talent_1h, 2);
    npc_settalentskill(sld_723_soeldner, npc_talent_2h, 1);
    npc_settalentskill(sld_723_soeldner, npc_talent_bow, 1);
    createinvitem(sld_723_soeldner, itmi_stuff_barbknife_01);
    createinvitem(sld_723_soeldner, itmi_stuff_amphore_01);
    createinvitems(sld_723_soeldner, itamarrow, 20);
    createinvitems(sld_723_soeldner, itforice, 7);
    createinvitems(sld_723_soeldner, itfoloaf, 6);
    createinvitems(sld_723_soeldner, itfomutton, 4);
    createinvitems(sld_723_soeldner, itminugget, 22);
    createinvitems(sld_723_soeldner, itfobooze, 5);
    createinvitems(sld_723_soeldner, itlstorch, 5);
    createinvitems(sld_723_soeldner, itfo_potion_health_02, 7);
    equipitem(sld_723_soeldner, itmw_1h_mace_war_03 /*4408*/);
    equipitem(sld_723_soeldner, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_723;
};

func void rtn_start_723() {
    ta_guardpassage(8, 0, 22, 0, "NC_GUARD_MAGES_LEFT");
    ta_guardpassage(22, 0, 8, 0, "NC_GUARD_MAGES_LEFT");
};

instance sld_725_soeldner(npc_default) {
    name = name_soeldner;
    npctype = npctype_guard;
    guild = gil_sld;
    level = 16;
    voice = 8;
    id = 725;
    attribute[atr_strength] /*4*/ = 75;
    attribute[atr_dexterity] /*5*/ = 55;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 232;
    attribute[atr_hitpoints] /*0*/ = 232;
    mdl_setvisual(sld_725_soeldner, "HUMANS.MDS");
    mdl_applyoverlaymds(sld_725_soeldner, "Humans_Militia.mds");
    mdl_setvisualbody(sld_725_soeldner, "hum_body_Naked0", 1, 1, "Hum_Head_Pony", 47, 2, sld_armor_m /*4136*/);
    b_scale(sld_725_soeldner);
    mdl_setmodelfatness(sld_725_soeldner, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(sld_725_soeldner, npc_talent_1h, 2);
    npc_settalentskill(sld_725_soeldner, npc_talent_2h, 1);
    createinvitem(sld_725_soeldner, itmi_stuff_barbknife_01);
    createinvitem(sld_725_soeldner, itmi_stuff_amphore_01);
    createinvitems(sld_725_soeldner, itamarrow, 20);
    createinvitems(sld_725_soeldner, itforice, 9);
    createinvitems(sld_725_soeldner, itfoloaf, 5);
    createinvitems(sld_725_soeldner, itfomutton, 5);
    createinvitems(sld_725_soeldner, itminugget, 20);
    createinvitems(sld_725_soeldner, itfobooze, 5);
    createinvitems(sld_725_soeldner, itlstorch, 7);
    createinvitems(sld_725_soeldner, itfo_potion_health_02, 7);
    equipitem(sld_725_soeldner, itmw_1h_mace_war_03 /*4408*/);
    equipitem(sld_725_soeldner, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_725;
};

func void rtn_start_725() {
    ta_guardpassage(23, 0, 7, 0, "NC_PATH40_GUARD");
    ta_guardpassage(7, 0, 23, 0, "NC_PATH40_GUARD");
};

func void rtn_loadsword_725() {
    ta_smalltalk(23, 0, 7, 0, "NC_PLACE02");
    ta_smalltalk(7, 0, 23, 0, "NC_PLACE02");
};

instance sld_726_soeldner(npc_default) {
    name = name_soeldner;
    npctype = npctype_guard;
    guild = gil_sld;
    level = 18;
    voice = 11;
    id = 726;
    attribute[atr_strength] /*4*/ = 90;
    attribute[atr_dexterity] /*5*/ = 70;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 256;
    attribute[atr_hitpoints] /*0*/ = 256;
    mdl_setvisual(sld_726_soeldner, "HUMANS.MDS");
    mdl_applyoverlaymds(sld_726_soeldner, "Humans_Militia.mds");
    mdl_setvisualbody(sld_726_soeldner, "hum_body_Naked0", 0, 1, "Hum_Head_Pony", 53, 1, sld_armor_h /*4137*/);
    b_scale(sld_726_soeldner);
    mdl_setmodelfatness(sld_726_soeldner, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(sld_726_soeldner, npc_talent_1h, 1);
    npc_settalentskill(sld_726_soeldner, npc_talent_2h, 1);
    npc_settalentskill(sld_726_soeldner, npc_talent_bow, 1);
    createinvitem(sld_726_soeldner, itmi_stuff_barbknife_01);
    createinvitem(sld_726_soeldner, itmi_stuff_mug_01);
    createinvitems(sld_726_soeldner, itamarrow, 20);
    createinvitems(sld_726_soeldner, itforice, 9);
    createinvitems(sld_726_soeldner, itfoloaf, 5);
    createinvitems(sld_726_soeldner, itfomutton, 1);
    createinvitems(sld_726_soeldner, itminugget, 25);
    createinvitems(sld_726_soeldner, itfobooze, 3);
    createinvitems(sld_726_soeldner, itlstorch, 5);
    createinvitems(sld_726_soeldner, itfo_potion_health_02, 10);
    equipitem(sld_726_soeldner, itmw_1h_mace_war_03 /*4408*/);
    equipitem(sld_726_soeldner, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_726;
};

func void rtn_start_726() {
    ta_guardpassage(23, 0, 7, 0, "NC_PATH40_GUARD2");
    ta_guardpassage(7, 0, 23, 0, "NC_PATH40_GUARD2");
};

func void rtn_loadsword_726() {
    ta_smalltalk(23, 0, 7, 0, "NC_PLACE02");
    ta_smalltalk(7, 0, 23, 0, "NC_PLACE02");
};

instance sld_727_soeldner(npc_default) {
    name = name_soeldner;
    npctype = npctype_guard;
    guild = gil_sld;
    level = 16;
    voice = 8;
    id = 727;
    attribute[atr_strength] /*4*/ = 75;
    attribute[atr_dexterity] /*5*/ = 55;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 232;
    attribute[atr_hitpoints] /*0*/ = 232;
    mdl_setvisual(sld_727_soeldner, "HUMANS.MDS");
    mdl_applyoverlaymds(sld_727_soeldner, "Humans_Militia.mds");
    mdl_setvisualbody(sld_727_soeldner, "hum_body_Naked0", 0, 1, "Hum_Head_Fighter", 51, 2, sld_armor_m /*4136*/);
    b_scale(sld_727_soeldner);
    mdl_setmodelfatness(sld_727_soeldner, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(sld_727_soeldner, npc_talent_1h, 2);
    npc_settalentskill(sld_727_soeldner, npc_talent_2h, 1);
    createinvitem(sld_727_soeldner, itmi_stuff_barbknife_01);
    createinvitem(sld_727_soeldner, itmi_stuff_mug_01);
    createinvitems(sld_727_soeldner, itamarrow, 20);
    createinvitems(sld_727_soeldner, itforice, 8);
    createinvitems(sld_727_soeldner, itfoloaf, 3);
    createinvitems(sld_727_soeldner, itfomutton, 4);
    createinvitems(sld_727_soeldner, itminugget, 17);
    createinvitems(sld_727_soeldner, itfobooze, 5);
    createinvitems(sld_727_soeldner, itlstorch, 5);
    createinvitems(sld_727_soeldner, itfo_potion_health_02, 10);
    equipitem(sld_727_soeldner, itmw_1h_mace_war_03 /*4408*/);
    equipitem(sld_727_soeldner, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_727;
};

func void rtn_start_727() {
    ta_guard(8, 0, 20, 0, "NC_PATH_JARVIS");
    ta_guard(20, 0, 8, 0, "NC_PATH_JARVIS");
};

instance sld_728_jarvis(npc_default) {
    name = "ßðâèñ";
    npctype = npctype_main;
    guild = gil_sld;
    level = 16;
    flags = npc_flag_immortal;
    voice = 8;
    id = 728;
    attribute[atr_strength] /*4*/ = 75;
    attribute[atr_dexterity] /*5*/ = 55;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 232;
    attribute[atr_hitpoints] /*0*/ = 232;
    mdl_setvisual(sld_728_jarvis, "HUMANS.MDS");
    mdl_applyoverlaymds(sld_728_jarvis, "Humans_Militia.mds");
    mdl_setvisualbody(sld_728_jarvis, "hum_body_Naked0", 0, 1, "Hum_Head_Pony", 53, 1, sld_armor_m /*4136*/);
    b_scale(sld_728_jarvis);
    mdl_setmodelfatness(sld_728_jarvis, 0.0);
    fight_tactic = fai_human_master;
    npc_settalentskill(sld_728_jarvis, npc_talent_1h, 2);
    npc_settalentskill(sld_728_jarvis, npc_talent_2h, 1);
    createinvitem(sld_728_jarvis, itmi_stuff_barbknife_01);
    createinvitem(sld_728_jarvis, itmi_stuff_mug_01);
    createinvitems(sld_728_jarvis, itamarrow, 20);
    createinvitems(sld_728_jarvis, itforice, 7);
    createinvitems(sld_728_jarvis, itfoloaf, 5);
    createinvitems(sld_728_jarvis, itfomutton, 4);
    createinvitems(sld_728_jarvis, itminugget, 15);
    createinvitems(sld_728_jarvis, itfobooze, 5);
    createinvitems(sld_728_jarvis, itlstorch, 5);
    createinvitems(sld_728_jarvis, itfo_potion_health_02, 6);
    equipitem(sld_728_jarvis, itmw_1h_mace_war_03 /*4408*/);
    equipitem(sld_728_jarvis, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_728;
};

func void rtn_start_728() {
    ta_guard(8, 0, 20, 0, "NC_PATH_JARVIS");
    ta_guard(20, 0, 8, 0, "NC_PATH_JARVIS");
};

instance sld_729_kharim(npc_default) {
    name = "Õàðèì";
    npctype = npctype_main;
    guild = gil_none;
    level = 11;
    voice = 9;
    id = 729;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 20;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 172;
    attribute[atr_hitpoints] /*0*/ = 172;
    mdl_setvisual(sld_729_kharim, "HUMANS.MDS");
    mdl_applyoverlaymds(sld_729_kharim, "Humans_Militia.mds");
    mdl_setvisualbody(sld_729_kharim, "hum_body_Naked0", 0, 3, "Hum_Head_FatBald", 9, 1, sld_armor_m /*4136*/);
    b_scale(sld_729_kharim);
    mdl_setmodelfatness(sld_729_kharim, 0.0);
    fight_tactic = fai_human_master;
    npc_settalentskill(sld_729_kharim, npc_talent_2h, 1);
    npc_settalentskill(sld_729_kharim, npc_talent_1h, 2);
    createinvitem(sld_729_kharim, itmi_stuff_barbknife_01);
    createinvitem(sld_729_kharim, itmi_stuff_amphore_01);
    createinvitem(sld_729_kharim, itmi_stuff_oldcoin_02);
    createinvitems(sld_729_kharim, itforice, 7);
    createinvitems(sld_729_kharim, itfoloaf, 5);
    createinvitems(sld_729_kharim, itfomutton, 4);
    createinvitems(sld_729_kharim, itminugget, 19);
    createinvitems(sld_729_kharim, itfobooze, 5);
    createinvitems(sld_729_kharim, itlstorch, 5);
    createinvitems(sld_729_kharim, itfo_potion_health_01, 7);
    equipitem(sld_729_kharim, itmw_1h_mace_02 /*4398*/);
    daily_routine = rtn_start_729;
};

func void rtn_start_729() {
    ta_sleep(0, 0, 7, 30, "OCR_HUT_31");
    ta_standaround(7, 30, 11, 0, "OCR_CAMPFIRE_I_2");
    ta_smith_sharp(11, 0, 14, 0, "OCR_ARENABATTLE_OUTSIDE");
    ta_practicesword(14, 0, 15, 0, "OCR_ARENABATTLE");
    ta_standaround(15, 0, 17, 0, "OCR_ARENABATTLE_OUTSIDE");
    ta_sitcampfire(17, 0, 0, 0, "OCR_CAMPFIRE_I_2");
};

func void rtn_guide_729() {
    ta_guidepc(8, 0, 20, 0, "OCR_ARENABATTLE_TRAIN");
    ta_guidepc(20, 0, 8, 0, "OCR_ARENABATTLE_TRAIN");
};

instance sld_730_soeldner(npc_default) {
    name = name_soeldner;
    npctype = npctype_guard;
    guild = gil_sld;
    level = 18;
    voice = 11;
    id = 730;
    attribute[atr_strength] /*4*/ = 90;
    attribute[atr_dexterity] /*5*/ = 70;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 256;
    attribute[atr_hitpoints] /*0*/ = 256;
    mdl_setvisual(sld_730_soeldner, "HUMANS.MDS");
    mdl_applyoverlaymds(sld_730_soeldner, "Humans_Militia.mds");
    mdl_setvisualbody(sld_730_soeldner, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 36, 2, sld_armor_m /*4136*/);
    b_scale(sld_730_soeldner);
    mdl_setmodelfatness(sld_730_soeldner, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(sld_730_soeldner, npc_talent_1h, 1);
    npc_settalentskill(sld_730_soeldner, npc_talent_2h, 1);
    npc_settalentskill(sld_730_soeldner, npc_talent_bow, 1);
    createinvitem(sld_730_soeldner, itmi_stuff_barbknife_01);
    createinvitem(sld_730_soeldner, itmi_stuff_amphore_01);
    createinvitems(sld_730_soeldner, itamarrow, 20);
    createinvitems(sld_730_soeldner, itforice, 7);
    createinvitems(sld_730_soeldner, itfoloaf, 5);
    createinvitems(sld_730_soeldner, itfomutton, 4);
    createinvitems(sld_730_soeldner, itminugget, 18);
    createinvitems(sld_730_soeldner, itfobooze, 5);
    createinvitems(sld_730_soeldner, itlstorch, 5);
    createinvitems(sld_730_soeldner, itfo_potion_health_02, 7);
    equipitem(sld_730_soeldner, itmw_1h_mace_war_03 /*4408*/);
    equipitem(sld_730_soeldner, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_730;
};

func void rtn_start_730() {
    ta_sleep(23, 0, 8, 0, "NC_HUT10_IN");
    ta_smalltalk(8, 0, 23, 0, "NC_HUT04_OUT");
};

instance sld_731_soeldner(npc_default) {
    name = name_soeldner;
    npctype = npctype_guard;
    guild = gil_sld;
    level = 16;
    voice = 11;
    id = 731;
    attribute[atr_strength] /*4*/ = 75;
    attribute[atr_dexterity] /*5*/ = 55;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 232;
    attribute[atr_hitpoints] /*0*/ = 232;
    mdl_setvisual(sld_731_soeldner, "HUMANS.MDS");
    mdl_applyoverlaymds(sld_731_soeldner, "Humans_Militia.mds");
    mdl_setvisualbody(sld_731_soeldner, "hum_body_Naked0", 0, 3, "Hum_Head_FatBald", 8, 0, sld_armor_m /*4136*/);
    b_scale(sld_731_soeldner);
    mdl_setmodelfatness(sld_731_soeldner, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(sld_731_soeldner, npc_talent_1h, 2);
    npc_settalentskill(sld_731_soeldner, npc_talent_2h, 1);
    createinvitem(sld_731_soeldner, itmi_stuff_barbknife_01);
    createinvitem(sld_731_soeldner, itmi_stuff_amphore_01);
    createinvitems(sld_731_soeldner, itamarrow, 20);
    createinvitems(sld_731_soeldner, itforice, 7);
    createinvitems(sld_731_soeldner, itfoloaf, 5);
    createinvitems(sld_731_soeldner, itfomutton, 4);
    createinvitems(sld_731_soeldner, itminugget, 20);
    createinvitems(sld_731_soeldner, itfobooze, 5);
    createinvitems(sld_731_soeldner, itlstorch, 5);
    createinvitems(sld_731_soeldner, itfo_potion_health_02, 8);
    equipitem(sld_731_soeldner, itmw_1h_mace_war_03 /*4408*/);
    equipitem(sld_731_soeldner, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_731;
};

func void rtn_start_731() {
    ta_guard(6, 0, 23, 0, "NC_SMALL_CAVE_ENTRANCE_GUARD2");
    ta_guard(23, 0, 6, 0, "NC_SMALL_CAVE_ENTRANCE_GUARD2");
};

instance sld_732_soeldner(npc_default) {
    name = name_soeldner;
    npctype = npctype_guard;
    guild = gil_sld;
    level = 18;
    voice = 8;
    id = 732;
    attribute[atr_strength] /*4*/ = 90;
    attribute[atr_dexterity] /*5*/ = 70;
    attribute[atr_mana_max] /*3*/ = 10;
    attribute[atr_mana] /*2*/ = 10;
    attribute[atr_hitpoints_max] /*1*/ = 256;
    attribute[atr_hitpoints] /*0*/ = 256;
    mdl_setvisual(sld_732_soeldner, "HUMANS.MDS");
    mdl_applyoverlaymds(sld_732_soeldner, "Humans_Militia.mds");
    mdl_setvisualbody(sld_732_soeldner, "hum_body_Naked0", 1, 1, "Hum_Head_Pony", 47, 2, sld_armor_m /*4136*/);
    b_scale(sld_732_soeldner);
    mdl_setmodelfatness(sld_732_soeldner, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(sld_732_soeldner, npc_talent_1h, 2);
    npc_settalentskill(sld_732_soeldner, npc_talent_2h, 1);
    npc_settalentskill(sld_732_soeldner, npc_talent_bow, 1);
    createinvitem(sld_732_soeldner, itmi_stuff_barbknife_01);
    createinvitem(sld_732_soeldner, itmi_stuff_mug_01);
    createinvitems(sld_732_soeldner, itamarrow, 20);
    createinvitems(sld_732_soeldner, itforice, 7);
    createinvitems(sld_732_soeldner, itfoloaf, 5);
    createinvitems(sld_732_soeldner, itfomutton, 4);
    createinvitems(sld_732_soeldner, itminugget, 15);
    createinvitems(sld_732_soeldner, itfobooze, 5);
    createinvitems(sld_732_soeldner, itlstorch, 5);
    createinvitems(sld_732_soeldner, itfo_potion_health_02, 7);
    equipitem(sld_732_soeldner, itmw_1h_mace_war_03 /*4408*/);
    equipitem(sld_732_soeldner, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_732;
};

func void rtn_start_732() {
    ta_guardpassage(8, 0, 22, 0, "NC_GUARD_MAGES_RIGHT");
    ta_guardpassage(22, 0, 8, 0, "NC_GUARD_MAGES_RIGHT");
};

instance sld_733_soeldner(npc_default) {
    name = name_soeldner;
    npctype = npctype_guard;
    guild = gil_sld;
    level = 16;
    voice = 11;
    id = 733;
    attribute[atr_strength] /*4*/ = 75;
    attribute[atr_dexterity] /*5*/ = 55;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 232;
    attribute[atr_hitpoints] /*0*/ = 232;
    mdl_setvisual(sld_733_soeldner, "HUMANS.MDS");
    mdl_applyoverlaymds(sld_733_soeldner, "Humans_Militia.mds");
    mdl_setvisualbody(sld_733_soeldner, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 49, 1, sld_armor_m /*4136*/);
    b_scale(sld_733_soeldner);
    mdl_setmodelfatness(sld_733_soeldner, 0.0);
    fight_tactic = fai_human_ranged;
    npc_settalentskill(sld_733_soeldner, npc_talent_1h, 1);
    npc_settalentskill(sld_733_soeldner, npc_talent_2h, 1);
    npc_settalentskill(sld_733_soeldner, npc_talent_bow, 1);
    createinvitem(sld_733_soeldner, itmi_stuff_barbknife_01);
    createinvitem(sld_733_soeldner, itmi_stuff_amphore_01);
    createinvitems(sld_733_soeldner, itamarrow, 20);
    createinvitems(sld_733_soeldner, itforice, 6);
    createinvitems(sld_733_soeldner, itfoloaf, 5);
    createinvitems(sld_733_soeldner, itfomutton, 4);
    createinvitems(sld_733_soeldner, itminugget, 20);
    createinvitems(sld_733_soeldner, itfobooze, 5);
    createinvitems(sld_733_soeldner, itlstorch, 5);
    createinvitems(sld_733_soeldner, itfo_potion_health_02, 8);
    equipitem(sld_733_soeldner, itmw_1h_mace_war_03 /*4408*/);
    equipitem(sld_733_soeldner, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_733;
};

func void rtn_start_733() {
    ta_boss(6, 30, 22, 15, "NC_LO_11");
    ta_boss(22, 15, 6, 30, "NC_LO_11");
};

instance sld_735_soeldner(npc_default) {
    name = name_soeldner;
    npctype = npctype_guard;
    guild = gil_sld;
    level = 11;
    voice = 11;
    id = 735;
    attribute[atr_strength] /*4*/ = 45;
    attribute[atr_dexterity] /*5*/ = 35;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 172;
    attribute[atr_hitpoints] /*0*/ = 172;
    mdl_setvisual(sld_735_soeldner, "HUMANS.MDS");
    mdl_applyoverlaymds(sld_735_soeldner, "Humans_Militia.mds");
    mdl_setvisualbody(sld_735_soeldner, "hum_body_Naked0", 0, 0, "Hum_Head_FatBald", 13, 1, sld_armor_m /*4136*/);
    b_scale(sld_735_soeldner);
    mdl_setmodelfatness(sld_735_soeldner, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(sld_735_soeldner, npc_talent_2h, 1);
    npc_settalentskill(sld_735_soeldner, npc_talent_1h, 1);
    createinvitem(sld_735_soeldner, itmi_stuff_amphore_01);
    createinvitems(sld_735_soeldner, itamarrow, 20);
    createinvitems(sld_735_soeldner, itforice, 7);
    createinvitems(sld_735_soeldner, itfoloaf, 5);
    createinvitems(sld_735_soeldner, itfomutton, 4);
    createinvitems(sld_735_soeldner, itminugget, 20);
    createinvitems(sld_735_soeldner, itfobooze, 7);
    createinvitems(sld_735_soeldner, itlstorch, 3);
    createinvitems(sld_735_soeldner, itfo_potion_health_02, 6);
    equipitem(sld_735_soeldner, itmw_1h_mace_war_02 /*4407*/);
    equipitem(sld_735_soeldner, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_735;
};

func void rtn_start_735() {
    ta_sleep(20, 55, 7, 5, "NC_HUT08_IN");
    ta_practicesword(7, 5, 20, 55, "NC_WATERFALL_TOP01");
};

func void rtn_fmtaken_735() {
    ta_stay(0, 0, 23, 0, "OW_PATH_075_GUARD2");
    ta_stay(23, 0, 24, 0, "OW_PATH_075_GUARD2");
};

instance sld_736_soeldner(npc_default) {
    name = name_soeldner;
    npctype = npctype_guard;
    guild = gil_sld;
    level = 11;
    voice = 11;
    id = 736;
    attribute[atr_strength] /*4*/ = 40;
    attribute[atr_dexterity] /*5*/ = 35;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 172;
    attribute[atr_hitpoints] /*0*/ = 172;
    mdl_setvisual(sld_736_soeldner, "HUMANS.MDS");
    mdl_applyoverlaymds(sld_736_soeldner, "Humans_Militia.mds");
    mdl_setvisualbody(sld_736_soeldner, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 48, 1, sld_armor_m /*4136*/);
    b_scale(sld_736_soeldner);
    mdl_setmodelfatness(sld_736_soeldner, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(sld_736_soeldner, npc_talent_2h, 1);
    npc_settalentskill(sld_736_soeldner, npc_talent_1h, 1);
    createinvitem(sld_736_soeldner, itmi_stuff_barbknife_01);
    createinvitem(sld_736_soeldner, itmi_stuff_mug_01);
    createinvitems(sld_736_soeldner, itamarrow, 20);
    createinvitems(sld_736_soeldner, itforice, 8);
    createinvitems(sld_736_soeldner, itfoloaf, 5);
    createinvitems(sld_736_soeldner, itfomutton, 6);
    createinvitems(sld_736_soeldner, itminugget, 10);
    createinvitems(sld_736_soeldner, itfobooze, 5);
    createinvitems(sld_736_soeldner, itlstorch, 5);
    createinvitems(sld_736_soeldner, itfo_potion_health_02, 9);
    equipitem(sld_736_soeldner, itmw_1h_mace_war_02 /*4407*/);
    equipitem(sld_736_soeldner, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_736;
};

func void rtn_start_736() {
    ta_sleep(20, 50, 7, 10, "NC_HUT08_IN");
    ta_practicesword(7, 10, 20, 50, "NC_WATERFALL_TOP02");
};

func void rtn_fmtaken_736() {
    ta_stay(0, 0, 23, 0, "OW_PATH_075_GUARD");
    ta_stay(23, 0, 24, 0, "OW_PATH_075_GUARD");
};

instance sld_737_torlof(npc_default) {
    name = "Òîðëîô";
    npctype = npctype_main;
    guild = gil_sld;
    level = 19;
    voice = 4;
    id = 737;
    attribute[atr_strength] /*4*/ = 95;
    attribute[atr_dexterity] /*5*/ = 75;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 268;
    attribute[atr_hitpoints] /*0*/ = 268;
    mdl_setvisual(sld_737_torlof, "HUMANS.MDS");
    mdl_applyoverlaymds(sld_737_torlof, "Humans_Militia.mds");
    mdl_setvisualbody(sld_737_torlof, "hum_body_Naked0", 0, 1, "Hum_Head_Pony", 53, 1, sld_armor_h /*4137*/);
    b_scale(sld_737_torlof);
    mdl_setmodelfatness(sld_737_torlof, 0.0);
    fight_tactic = fai_human_master;
    npc_settalentskill(sld_737_torlof, npc_talent_1h, 2);
    npc_settalentskill(sld_737_torlof, npc_talent_2h, 1);
    npc_settalentskill(sld_737_torlof, npc_talent_bow, 1);
    createinvitem(sld_737_torlof, itmi_stuff_barbknife_01);
    createinvitem(sld_737_torlof, itmi_stuff_mug_01);
    createinvitems(sld_737_torlof, itamarrow, 20);
    createinvitems(sld_737_torlof, itforice, 8);
    createinvitems(sld_737_torlof, itfoloaf, 5);
    createinvitems(sld_737_torlof, itfomutton, 4);
    createinvitems(sld_737_torlof, itminugget, 15);
    createinvitems(sld_737_torlof, itfobooze, 5);
    createinvitems(sld_737_torlof, itlstorch, 5);
    createinvitems(sld_737_torlof, itfo_potion_health_02, 7);
    equipitem(sld_737_torlof, torlofs_axt /*4982*/);
    equipitem(sld_737_torlof, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_start_737;
};

func void rtn_start_737() {
    ta_smalltalk(8, 0, 23, 0, "NC_HUT04_OUT");
    ta_boss(23, 0, 1, 15, "NC_HUT04_OUT");
    ta_sleep(1, 15, 8, 0, "NC_HUT04_IN");
};

instance sld_738_soeldner(npc_default) {
    name = name_soeldner;
    npctype = npctype_guard;
    guild = gil_sld;
    level = 16;
    voice = 8;
    id = 738;
    attribute[atr_strength] /*4*/ = 75;
    attribute[atr_dexterity] /*5*/ = 55;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 232;
    attribute[atr_hitpoints] /*0*/ = 232;
    mdl_setvisual(sld_738_soeldner, "HUMANS.MDS");
    mdl_applyoverlaymds(sld_738_soeldner, "Humans_Militia.mds");
    mdl_setvisualbody(sld_738_soeldner, "hum_body_Naked0", 0, 1, "Hum_Head_Pony", 53, 1, sld_armor_m /*4136*/);
    b_scale(sld_738_soeldner);
    mdl_setmodelfatness(sld_738_soeldner, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(sld_738_soeldner, npc_talent_1h, 2);
    npc_settalentskill(sld_738_soeldner, npc_talent_2h, 1);
    createinvitem(sld_738_soeldner, itforice);
    createinvitem(sld_738_soeldner, itfobooze);
    createinvitem(sld_738_soeldner, itmi_stuff_barbknife_01);
    createinvitems(sld_738_soeldner, itminugget, 15);
    equipitem(sld_738_soeldner, itmw_1h_mace_war_03 /*4408*/);
    daily_routine = rtn_start_738;
};

func void rtn_start_738() {
    ta_guardwheelopen(7, 55, 19, 55, "NC_MAINGATE_VWHEEL");
    ta_guardwheelopen(19, 55, 7, 55, "NC_MAINGATE_VWHEEL");
};

instance sld_750_soeldner(npc_default) {
    name = name_soeldner;
    npctype = npctype_mine_guard;
    guild = gil_sld;
    level = 16;
    voice = 11;
    id = 750;
    attribute[atr_strength] /*4*/ = 75;
    attribute[atr_dexterity] /*5*/ = 55;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 232;
    attribute[atr_hitpoints] /*0*/ = 232;
    mdl_setvisual(sld_750_soeldner, "HUMANS.MDS");
    mdl_applyoverlaymds(sld_750_soeldner, "Humans_Militia.mds");
    mdl_setvisualbody(sld_750_soeldner, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 49, 1, sld_armor_m /*4136*/);
    b_scale(sld_750_soeldner);
    mdl_setmodelfatness(sld_750_soeldner, 0.0);
    fight_tactic = fai_human_ranged;
    npc_settalentskill(sld_750_soeldner, npc_talent_1h, 1);
    npc_settalentskill(sld_750_soeldner, npc_talent_2h, 1);
    createinvitem(sld_750_soeldner, itmi_stuff_barbknife_01);
    createinvitem(sld_750_soeldner, itmi_stuff_amphore_01);
    createinvitems(sld_750_soeldner, itamarrow, 20);
    createinvitems(sld_750_soeldner, itforice, 6);
    createinvitems(sld_750_soeldner, itfoloaf, 5);
    createinvitems(sld_750_soeldner, itfomutton, 4);
    createinvitems(sld_750_soeldner, itminugget, 20);
    createinvitems(sld_750_soeldner, itfobooze, 5);
    createinvitems(sld_750_soeldner, itlstorch, 5);
    createinvitems(sld_750_soeldner, itfo_potion_health_02, 8);
    equipitem(sld_750_soeldner, itmw_1h_mace_war_03 /*4408*/);
    equipitem(sld_750_soeldner, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_fmcstart_750;
};

func void rtn_fmcstart_750() {
    ta_guardpalisade(1, 0, 13, 0, "FMC_PATH19");
    ta_guardpalisade(13, 0, 1, 0, "FMC_PATH19");
};

instance sld_751_soeldner(npc_default) {
    name = name_soeldner;
    npctype = npctype_mine_guard;
    guild = gil_sld;
    level = 16;
    voice = 1;
    id = 751;
    attribute[atr_strength] /*4*/ = 75;
    attribute[atr_dexterity] /*5*/ = 55;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 232;
    attribute[atr_hitpoints] /*0*/ = 232;
    mdl_setvisual(sld_751_soeldner, "HUMANS.MDS");
    mdl_applyoverlaymds(sld_751_soeldner, "Humans_Militia.mds");
    mdl_setvisualbody(sld_751_soeldner, "hum_body_Naked0", 0, 1, "Hum_Head_Pony", 50, 2, sld_armor_h /*4137*/);
    b_scale(sld_751_soeldner);
    mdl_setmodelfatness(sld_751_soeldner, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(sld_751_soeldner, npc_talent_1h, 1);
    npc_settalentskill(sld_751_soeldner, npc_talent_2h, 1);
    createinvitem(sld_751_soeldner, itmi_stuff_barbknife_01);
    createinvitem(sld_751_soeldner, itmi_stuff_amphore_01);
    createinvitems(sld_751_soeldner, itamarrow, 20);
    createinvitems(sld_751_soeldner, itforice, 8);
    createinvitems(sld_751_soeldner, itfoloaf, 5);
    createinvitems(sld_751_soeldner, itfomutton, 4);
    createinvitems(sld_751_soeldner, itminugget, 12);
    createinvitems(sld_751_soeldner, itfobooze, 5);
    createinvitems(sld_751_soeldner, itlstorch, 5);
    createinvitems(sld_751_soeldner, itfo_potion_health_02, 8);
    equipitem(sld_751_soeldner, itmw_1h_mace_war_03 /*4408*/);
    equipitem(sld_751_soeldner, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_fmcstart_751;
};

func void rtn_fmcstart_751() {
    ta_guard(1, 0, 13, 0, "FMC_ENTRANCE");
    ta_guard(13, 0, 1, 0, "FMC_ENTRANCE");
};

instance sld_752_okyl(npc_default) {
    name = "Îêèë";
    npctype = npctype_main;
    guild = gil_sld;
    level = 18;
    voice = 11;
    id = 752;
    attribute[atr_strength] /*4*/ = 90;
    attribute[atr_dexterity] /*5*/ = 70;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 256;
    attribute[atr_hitpoints] /*0*/ = 256;
    mdl_setvisual(sld_752_okyl, "HUMANS.MDS");
    mdl_applyoverlaymds(sld_752_okyl, "Humans_Militia.mds");
    mdl_setvisualbody(sld_752_okyl, "hum_body_Naked0", 1, 1, "Hum_Head_Pony", 45, 1, sld_armor_h /*4137*/);
    b_scale(sld_752_okyl);
    mdl_setmodelfatness(sld_752_okyl, 0.0);
    fight_tactic = fai_human_ranged;
    npc_settalentskill(sld_752_okyl, npc_talent_1h, 1);
    npc_settalentskill(sld_752_okyl, npc_talent_2h, 1);
    npc_settalentskill(sld_752_okyl, npc_talent_bow, 1);
    createinvitem(sld_752_okyl, itmi_stuff_barbknife_01);
    createinvitem(sld_752_okyl, itmi_stuff_amphore_01);
    createinvitem(sld_752_okyl, itmi_stuff_oldcoin_02);
    createinvitems(sld_752_okyl, itamarrow, 20);
    createinvitems(sld_752_okyl, itforice, 7);
    createinvitems(sld_752_okyl, itfoloaf, 6);
    createinvitems(sld_752_okyl, itfomutton, 4);
    createinvitems(sld_752_okyl, itminugget, 18);
    createinvitems(sld_752_okyl, itfobooze, 4);
    createinvitems(sld_752_okyl, itlstorch, 5);
    createinvitems(sld_752_okyl, itfo_potion_health_02, 9);
    equipitem(sld_752_okyl, itmw_2h_axe_heavy_02 /*4449*/);
    equipitem(sld_752_okyl, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_fmcstart_752;
};

func void rtn_fmcstart_752() {
    ta_guardpalisade(1, 0, 13, 0, "FMC_PATH07");
    ta_guardpalisade(13, 0, 1, 0, "FMC_PATH07");
};

instance sld_753_baloro(npc_default) {
    name = "Áàëîðî";
    npctype = npctype_main;
    guild = gil_sld;
    level = 16;
    voice = 8;
    id = 753;
    attribute[atr_strength] /*4*/ = 75;
    attribute[atr_dexterity] /*5*/ = 55;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 232;
    attribute[atr_hitpoints] /*0*/ = 232;
    mdl_setvisual(sld_753_baloro, "HUMANS.MDS");
    mdl_applyoverlaymds(sld_753_baloro, "Humans_Militia.mds");
    mdl_setvisualbody(sld_753_baloro, "hum_body_Naked0", 0, 1, "Hum_Head_Fighter", 51, 2, sld_armor_m /*4136*/);
    b_scale(sld_753_baloro);
    mdl_setmodelfatness(sld_753_baloro, 0.0);
    fight_tactic = fai_human_master;
    npc_settalentskill(sld_753_baloro, npc_talent_1h, 2);
    npc_settalentskill(sld_753_baloro, npc_talent_2h, 1);
    createinvitem(sld_753_baloro, itmi_stuff_barbknife_01);
    createinvitem(sld_753_baloro, itmi_stuff_amphore_01);
    createinvitem(sld_753_baloro, itmi_stuff_oldcoin_02);
    createinvitems(sld_753_baloro, itforice, 8);
    createinvitems(sld_753_baloro, itfoloaf, 8);
    createinvitems(sld_753_baloro, itfomutton, 6);
    createinvitems(sld_753_baloro, itminugget, 15);
    createinvitems(sld_753_baloro, itfobooze, 6);
    createinvitems(sld_753_baloro, itlstorch, 5);
    createinvitems(sld_753_baloro, itfo_potion_health_02, 7);
    equipitem(sld_753_baloro, itmw_1h_mace_war_03 /*4408*/);
    daily_routine = rtn_fmcstart_753;
};

func void rtn_fmcstart_753() {
    ta_guardpalisade(1, 0, 13, 0, "FMC_HUT07_OUT");
    ta_guardpalisade(13, 0, 1, 0, "FMC_HUT07_OUT");
};

instance sld_755_soeldner(npc_default) {
    name = name_soeldner;
    npctype = npctype_mine_guard;
    guild = gil_sld;
    level = 16;
    voice = 8;
    id = 755;
    attribute[atr_strength] /*4*/ = 75;
    attribute[atr_dexterity] /*5*/ = 55;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 232;
    attribute[atr_hitpoints] /*0*/ = 232;
    mdl_setvisual(sld_755_soeldner, "HUMANS.MDS");
    mdl_applyoverlaymds(sld_755_soeldner, "Humans_Militia.mds");
    mdl_setvisualbody(sld_755_soeldner, "hum_body_Naked0", 1, 3, "Hum_Head_FatBald", 9, 2, sld_armor_m /*4136*/);
    b_scale(sld_755_soeldner);
    mdl_setmodelfatness(sld_755_soeldner, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(sld_755_soeldner, npc_talent_1h, 2);
    npc_settalentskill(sld_755_soeldner, npc_talent_2h, 1);
    createinvitem(sld_755_soeldner, itmi_stuff_barbknife_01);
    createinvitem(sld_755_soeldner, itmi_stuff_amphore_01);
    createinvitem(sld_755_soeldner, itmi_stuff_oldcoin_02);
    createinvitems(sld_755_soeldner, itamarrow, 20);
    createinvitems(sld_755_soeldner, itforice, 7);
    createinvitems(sld_755_soeldner, itfoloaf, 5);
    createinvitems(sld_755_soeldner, itfomutton, 4);
    createinvitems(sld_755_soeldner, itminugget, 18);
    createinvitems(sld_755_soeldner, itfobooze, 6);
    createinvitems(sld_755_soeldner, itlstorch, 6);
    createinvitems(sld_755_soeldner, itfo_potion_health_02, 8);
    equipitem(sld_755_soeldner, itmw_1h_mace_war_03 /*4408*/);
    equipitem(sld_755_soeldner, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_fmcstart_755;
};

func void rtn_fmcstart_755() {
    ta_guardpalisade(1, 0, 13, 0, "FMC_HUT12_OUT");
    ta_guardpalisade(13, 0, 1, 0, "FMC_HUT12_OUT");
};

instance sld_756_soeldner(npc_default) {
    name = name_soeldner;
    npctype = npctype_mine_guard;
    guild = gil_sld;
    level = 16;
    voice = 8;
    id = 756;
    attribute[atr_strength] /*4*/ = 75;
    attribute[atr_dexterity] /*5*/ = 55;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 232;
    attribute[atr_hitpoints] /*0*/ = 232;
    mdl_setvisual(sld_756_soeldner, "HUMANS.MDS");
    mdl_applyoverlaymds(sld_756_soeldner, "Humans_Militia.mds");
    mdl_setvisualbody(sld_756_soeldner, "hum_body_Naked0", 1, 1, "Hum_Head_Pony", 47, 2, sld_armor_m /*4136*/);
    b_scale(sld_756_soeldner);
    mdl_setmodelfatness(sld_756_soeldner, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(sld_756_soeldner, npc_talent_1h, 2);
    npc_settalentskill(sld_756_soeldner, npc_talent_2h, 1);
    createinvitem(sld_756_soeldner, itmi_stuff_barbknife_01);
    createinvitem(sld_756_soeldner, itmi_stuff_mug_01);
    createinvitems(sld_756_soeldner, itamarrow, 20);
    createinvitems(sld_756_soeldner, itforice, 6);
    createinvitems(sld_756_soeldner, itfoloaf, 6);
    createinvitems(sld_756_soeldner, itfomutton, 6);
    createinvitems(sld_756_soeldner, itminugget, 16);
    createinvitems(sld_756_soeldner, itfobooze, 6);
    createinvitems(sld_756_soeldner, itlstorch, 6);
    createinvitems(sld_756_soeldner, itfo_potion_health_02, 6);
    equipitem(sld_756_soeldner, itmw_1h_mace_war_03 /*4408*/);
    equipitem(sld_756_soeldner, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_fmcstart_756;
};

func void rtn_fmcstart_756() {
    ta_guard(1, 0, 13, 0, "FMC_PATH02");
    ta_guard(13, 0, 1, 0, "FMC_PATH02");
};

instance sld_757_soeldner(npc_default) {
    name = name_soeldner;
    npctype = npctype_mine_guard;
    guild = gil_sld;
    level = 18;
    voice = 11;
    id = 757;
    attribute[atr_strength] /*4*/ = 90;
    attribute[atr_dexterity] /*5*/ = 70;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 256;
    attribute[atr_hitpoints] /*0*/ = 256;
    mdl_setvisual(sld_757_soeldner, "HUMANS.MDS");
    mdl_applyoverlaymds(sld_757_soeldner, "Humans_Militia.mds");
    mdl_setvisualbody(sld_757_soeldner, "hum_body_Naked0", 1, 1, "Hum_Head_Pony", 47, 1, sld_armor_h /*4137*/);
    b_scale(sld_757_soeldner);
    mdl_setmodelfatness(sld_757_soeldner, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(sld_757_soeldner, npc_talent_1h, 2);
    npc_settalentskill(sld_757_soeldner, npc_talent_2h, 1);
    npc_settalentskill(sld_757_soeldner, npc_talent_bow, 1);
    createinvitem(sld_757_soeldner, itmi_stuff_barbknife_01);
    createinvitem(sld_757_soeldner, itmi_stuff_amphore_01);
    createinvitems(sld_757_soeldner, itamarrow, 20);
    createinvitems(sld_757_soeldner, itforice, 7);
    createinvitems(sld_757_soeldner, itfoloaf, 5);
    createinvitems(sld_757_soeldner, itfomutton, 4);
    createinvitems(sld_757_soeldner, itminugget, 23);
    createinvitems(sld_757_soeldner, itfobooze, 5);
    createinvitems(sld_757_soeldner, itlstorch, 5);
    createinvitems(sld_757_soeldner, itfo_potion_health_02, 10);
    equipitem(sld_757_soeldner, itmw_1h_mace_war_03 /*4408*/);
    equipitem(sld_757_soeldner, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_fmcstart_757;
};

func void rtn_fmcstart_757() {
    ta_guardpalisade(1, 0, 13, 0, "FMC_PATH12");
    ta_guardpalisade(13, 0, 1, 0, "FMC_PATH12");
};

instance sld_758_soeldner(npc_default) {
    name = name_soeldner;
    npctype = npctype_mine_guard;
    guild = gil_sld;
    level = 12;
    voice = 11;
    id = 758;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 70;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 256;
    attribute[atr_hitpoints] /*0*/ = 256;
    mdl_setvisual(sld_758_soeldner, "HUMANS.MDS");
    mdl_applyoverlaymds(sld_758_soeldner, "Humans_Militia.mds");
    mdl_setvisualbody(sld_758_soeldner, "hum_body_Naked0", 1, 1, "Hum_Head_Pony", 53, 1, sld_armor_m /*4136*/);
    b_scale(sld_758_soeldner);
    mdl_setmodelfatness(sld_758_soeldner, 0.0);
    fight_tactic = fai_human_ranged;
    npc_settalentskill(sld_758_soeldner, npc_talent_1h, 2);
    npc_settalentskill(sld_758_soeldner, npc_talent_2h, 1);
    npc_settalentskill(sld_758_soeldner, npc_talent_bow, 1);
    createinvitem(sld_758_soeldner, itmi_stuff_barbknife_01);
    createinvitem(sld_758_soeldner, itmi_stuff_amphore_01);
    createinvitems(sld_758_soeldner, itamarrow, 20);
    createinvitems(sld_758_soeldner, itforice, 7);
    createinvitems(sld_758_soeldner, itfoloaf, 6);
    createinvitems(sld_758_soeldner, itfomutton, 4);
    createinvitems(sld_758_soeldner, itminugget, 22);
    createinvitems(sld_758_soeldner, itfobooze, 5);
    createinvitems(sld_758_soeldner, itlstorch, 5);
    createinvitems(sld_758_soeldner, itfo_potion_health_02, 7);
    equipitem(sld_758_soeldner, itmw_1h_mace_war_03 /*4408*/);
    equipitem(sld_758_soeldner, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_fmcstart_758;
};

func void rtn_fmcstart_758() {
    ta_guardpalisade(1, 0, 13, 0, "FMC_PATH06");
    ta_guardpalisade(13, 0, 1, 0, "FMC_PATH06");
};

instance sld_759_soeldner(npc_default) {
    name = name_soeldner;
    npctype = npctype_mine_guard;
    guild = gil_sld;
    level = 16;
    voice = 8;
    id = 759;
    attribute[atr_strength] /*4*/ = 75;
    attribute[atr_dexterity] /*5*/ = 55;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 232;
    attribute[atr_hitpoints] /*0*/ = 232;
    mdl_setvisual(sld_759_soeldner, "HUMANS.MDS");
    mdl_applyoverlaymds(sld_759_soeldner, "Humans_Militia.mds");
    mdl_setvisualbody(sld_759_soeldner, "hum_body_Naked0", 1, 1, "Hum_Head_Pony", 47, 2, sld_armor_m /*4136*/);
    b_scale(sld_759_soeldner);
    mdl_setmodelfatness(sld_759_soeldner, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(sld_759_soeldner, npc_talent_1h, 2);
    npc_settalentskill(sld_759_soeldner, npc_talent_2h, 1);
    createinvitem(sld_759_soeldner, itmi_stuff_barbknife_01);
    createinvitem(sld_759_soeldner, itmi_stuff_amphore_01);
    createinvitems(sld_759_soeldner, itamarrow, 20);
    createinvitems(sld_759_soeldner, itforice, 9);
    createinvitems(sld_759_soeldner, itfoloaf, 5);
    createinvitems(sld_759_soeldner, itfomutton, 5);
    createinvitems(sld_759_soeldner, itminugget, 20);
    createinvitems(sld_759_soeldner, itfobooze, 5);
    createinvitems(sld_759_soeldner, itlstorch, 7);
    createinvitems(sld_759_soeldner, itfo_potion_health_02, 7);
    equipitem(sld_759_soeldner, itmw_1h_mace_war_03 /*4408*/);
    equipitem(sld_759_soeldner, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_fmcstart_759;
};

func void rtn_fmcstart_759() {
    ta_guardpassage(1, 0, 13, 0, "FMC_PATH26");
    ta_guardpassage(13, 0, 1, 0, "FMC_PATH26");
};

instance sld_760_soeldner(npc_default) {
    name = name_soeldner;
    npctype = npctype_mine_guard;
    guild = gil_sld;
    level = 18;
    voice = 13;
    id = 760;
    attribute[atr_strength] /*4*/ = 90;
    attribute[atr_dexterity] /*5*/ = 70;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 256;
    attribute[atr_hitpoints] /*0*/ = 256;
    mdl_setvisual(sld_760_soeldner, "HUMANS.MDS");
    mdl_applyoverlaymds(sld_760_soeldner, "Humans_Militia.mds");
    mdl_setvisualbody(sld_760_soeldner, "hum_body_Naked0", 0, 1, "Hum_Head_Pony", 104, 1, sld_armor_m /*4136*/);
    b_scale(sld_760_soeldner);
    mdl_setmodelfatness(sld_760_soeldner, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(sld_760_soeldner, npc_talent_1h, 1);
    npc_settalentskill(sld_760_soeldner, npc_talent_2h, 1);
    npc_settalentskill(sld_760_soeldner, npc_talent_bow, 1);
    createinvitem(sld_760_soeldner, itmi_stuff_barbknife_01);
    createinvitem(sld_760_soeldner, itmi_stuff_amphore_01);
    createinvitems(sld_760_soeldner, itamarrow, 20);
    createinvitems(sld_760_soeldner, itforice, 7);
    createinvitems(sld_760_soeldner, itfoloaf, 5);
    createinvitems(sld_760_soeldner, itfomutton, 4);
    createinvitems(sld_760_soeldner, itminugget, 23);
    createinvitems(sld_760_soeldner, itfobooze, 5);
    createinvitems(sld_760_soeldner, itlstorch, 5);
    createinvitems(sld_760_soeldner, itfo_potion_health_02, 8);
    equipitem(sld_760_soeldner, itmw_1h_mace_war_03 /*4408*/);
    equipitem(sld_760_soeldner, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_fmcstart_760;
};

func void rtn_fmcstart_760() {
    ta_guardpassage(1, 0, 13, 0, "FMC_PATH25");
    ta_guardpassage(13, 0, 1, 0, "FMC_PATH25");
};

instance sld_761_soeldner(npc_default) {
    name = name_soeldner;
    npctype = npctype_mine_guard;
    guild = gil_sld;
    level = 18;
    voice = 3;
    id = 761;
    attribute[atr_strength] /*4*/ = 90;
    attribute[atr_dexterity] /*5*/ = 70;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 256;
    attribute[atr_hitpoints] /*0*/ = 256;
    mdl_setvisual(sld_761_soeldner, "HUMANS.MDS");
    mdl_applyoverlaymds(sld_761_soeldner, "Humans_Militia.mds");
    mdl_setvisualbody(sld_761_soeldner, "hum_body_Naked0", 0, 1, "Hum_Head_Pony", 53, 1, sld_armor_h /*4137*/);
    b_scale(sld_761_soeldner);
    mdl_setmodelfatness(sld_761_soeldner, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(sld_761_soeldner, npc_talent_1h, 1);
    npc_settalentskill(sld_761_soeldner, npc_talent_2h, 1);
    npc_settalentskill(sld_761_soeldner, npc_talent_bow, 1);
    createinvitem(sld_761_soeldner, itmi_stuff_barbknife_01);
    createinvitem(sld_761_soeldner, itmi_stuff_mug_01);
    createinvitems(sld_761_soeldner, itamarrow, 20);
    createinvitems(sld_761_soeldner, itforice, 9);
    createinvitems(sld_761_soeldner, itfoloaf, 5);
    createinvitems(sld_761_soeldner, itfomutton, 1);
    createinvitems(sld_761_soeldner, itminugget, 25);
    createinvitems(sld_761_soeldner, itfobooze, 3);
    createinvitems(sld_761_soeldner, itlstorch, 5);
    createinvitems(sld_761_soeldner, itfo_potion_health_02, 10);
    equipitem(sld_761_soeldner, itmw_1h_mace_war_03 /*4408*/);
    equipitem(sld_761_soeldner, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_fmcstart_761;
};

func void rtn_fmcstart_761() {
    ta_guardpassage(1, 0, 13, 0, "FMC_PATH27");
    ta_guardpassage(13, 0, 1, 0, "FMC_PATH27");
};

instance sld_762_soeldner(npc_default) {
    name = name_soeldner;
    npctype = npctype_mine_guard;
    guild = gil_sld;
    level = 18;
    voice = 11;
    id = 762;
    attribute[atr_strength] /*4*/ = 90;
    attribute[atr_dexterity] /*5*/ = 70;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 256;
    attribute[atr_hitpoints] /*0*/ = 256;
    mdl_setvisual(sld_762_soeldner, "HUMANS.MDS");
    mdl_applyoverlaymds(sld_762_soeldner, "Humans_Militia.mds");
    mdl_setvisualbody(sld_762_soeldner, "hum_body_Naked0", 0, 1, "Hum_Head_Pony", 53, 1, sld_armor_m /*4136*/);
    b_scale(sld_762_soeldner);
    mdl_setmodelfatness(sld_762_soeldner, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(sld_762_soeldner, npc_talent_1h, 1);
    npc_settalentskill(sld_762_soeldner, npc_talent_2h, 1);
    npc_settalentskill(sld_762_soeldner, npc_talent_bow, 1);
    createinvitem(sld_762_soeldner, itmi_stuff_barbknife_01);
    createinvitem(sld_762_soeldner, itmi_stuff_amphore_01);
    createinvitems(sld_762_soeldner, itamarrow, 20);
    createinvitems(sld_762_soeldner, itforice, 7);
    createinvitems(sld_762_soeldner, itfoloaf, 5);
    createinvitems(sld_762_soeldner, itfomutton, 4);
    createinvitems(sld_762_soeldner, itminugget, 18);
    createinvitems(sld_762_soeldner, itfobooze, 5);
    createinvitems(sld_762_soeldner, itlstorch, 5);
    createinvitems(sld_762_soeldner, itfo_potion_health_02, 7);
    equipitem(sld_762_soeldner, itmw_1h_mace_war_03 /*4408*/);
    equipitem(sld_762_soeldner, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_fmcstart_762;
};

func void rtn_fmcstart_762() {
    ta_guardpassage(1, 0, 13, 0, "FMC_PATH28");
    ta_guardpassage(13, 0, 1, 0, "FMC_PATH28");
};

instance sld_763_soeldner(npc_default) {
    name = name_soeldner;
    npctype = npctype_mine_guard;
    guild = gil_sld;
    level = 16;
    voice = 8;
    id = 763;
    attribute[atr_strength] /*4*/ = 75;
    attribute[atr_dexterity] /*5*/ = 55;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 232;
    attribute[atr_hitpoints] /*0*/ = 232;
    mdl_setvisual(sld_763_soeldner, "HUMANS.MDS");
    mdl_applyoverlaymds(sld_763_soeldner, "Humans_Militia.mds");
    mdl_setvisualbody(sld_763_soeldner, "hum_body_Naked0", 0, 3, "Hum_Head_FatBald", 8, 0, sld_armor_m /*4136*/);
    b_scale(sld_763_soeldner);
    mdl_setmodelfatness(sld_763_soeldner, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(sld_763_soeldner, npc_talent_1h, 1);
    npc_settalentskill(sld_763_soeldner, npc_talent_2h, 1);
    createinvitem(sld_763_soeldner, itmi_stuff_barbknife_01);
    createinvitem(sld_763_soeldner, itmi_stuff_amphore_01);
    createinvitems(sld_763_soeldner, itamarrow, 20);
    createinvitems(sld_763_soeldner, itforice, 7);
    createinvitems(sld_763_soeldner, itfoloaf, 5);
    createinvitems(sld_763_soeldner, itfomutton, 4);
    createinvitems(sld_763_soeldner, itminugget, 20);
    createinvitems(sld_763_soeldner, itfobooze, 5);
    createinvitems(sld_763_soeldner, itlstorch, 5);
    createinvitems(sld_763_soeldner, itfo_potion_health_02, 8);
    equipitem(sld_763_soeldner, itmw_1h_mace_war_03 /*4408*/);
    equipitem(sld_763_soeldner, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_fmcstart_763;
};

func void rtn_fmcstart_763() {
    ta_guard(1, 0, 13, 0, "FMC_PATH05");
    ta_guard(13, 0, 1, 0, "FMC_PATH05");
};

instance sld_764_soeldner(npc_default) {
    name = name_soeldner;
    npctype = npctype_mine_guard;
    guild = gil_sld;
    level = 16;
    voice = 11;
    id = 764;
    attribute[atr_strength] /*4*/ = 75;
    attribute[atr_dexterity] /*5*/ = 55;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 232;
    attribute[atr_hitpoints] /*0*/ = 232;
    mdl_setvisual(sld_764_soeldner, "HUMANS.MDS");
    mdl_applyoverlaymds(sld_764_soeldner, "Humans_Militia.mds");
    mdl_setvisualbody(sld_764_soeldner, "hum_body_Naked0", 1, 1, "Hum_Head_Pony", 47, 2, sld_armor_m /*4136*/);
    b_scale(sld_764_soeldner);
    mdl_setmodelfatness(sld_764_soeldner, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(sld_764_soeldner, npc_talent_1h, 1);
    npc_settalentskill(sld_764_soeldner, npc_talent_2h, 1);
    createinvitem(sld_764_soeldner, itmi_stuff_barbknife_01);
    createinvitem(sld_764_soeldner, itmi_stuff_mug_01);
    createinvitems(sld_764_soeldner, itamarrow, 20);
    createinvitems(sld_764_soeldner, itforice, 7);
    createinvitems(sld_764_soeldner, itfoloaf, 5);
    createinvitems(sld_764_soeldner, itfomutton, 4);
    createinvitems(sld_764_soeldner, itminugget, 15);
    createinvitems(sld_764_soeldner, itfobooze, 5);
    createinvitems(sld_764_soeldner, itlstorch, 5);
    createinvitems(sld_764_soeldner, itfo_potion_health_02, 7);
    equipitem(sld_764_soeldner, itmw_1h_mace_war_03 /*4408*/);
    equipitem(sld_764_soeldner, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_fmcstart_764;
};

func void rtn_fmcstart_764() {
    ta_guard(1, 0, 13, 0, "FMC_PATH23");
    ta_guard(13, 0, 1, 0, "FMC_PATH23");
};

instance sld_765_soeldner(npc_default) {
    name = name_soeldner;
    npctype = npctype_mine_guard;
    guild = gil_sld;
    level = 16;
    voice = 11;
    id = 765;
    attribute[atr_strength] /*4*/ = 75;
    attribute[atr_dexterity] /*5*/ = 55;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 232;
    attribute[atr_hitpoints] /*0*/ = 232;
    mdl_setvisual(sld_765_soeldner, "HUMANS.MDS");
    mdl_applyoverlaymds(sld_765_soeldner, "Humans_Militia.mds");
    mdl_setvisualbody(sld_765_soeldner, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 49, 1, sld_armor_m /*4136*/);
    b_scale(sld_765_soeldner);
    mdl_setmodelfatness(sld_765_soeldner, 0.0);
    fight_tactic = fai_human_ranged;
    npc_settalentskill(sld_765_soeldner, npc_talent_1h, 1);
    npc_settalentskill(sld_765_soeldner, npc_talent_2h, 1);
    createinvitem(sld_765_soeldner, itmi_stuff_barbknife_01);
    createinvitem(sld_765_soeldner, itmi_stuff_amphore_01);
    createinvitems(sld_765_soeldner, itamarrow, 20);
    createinvitems(sld_765_soeldner, itforice, 6);
    createinvitems(sld_765_soeldner, itfoloaf, 5);
    createinvitems(sld_765_soeldner, itfomutton, 4);
    createinvitems(sld_765_soeldner, itminugget, 20);
    createinvitems(sld_765_soeldner, itfobooze, 5);
    createinvitems(sld_765_soeldner, itlstorch, 5);
    createinvitems(sld_765_soeldner, itfo_potion_health_02, 8);
    equipitem(sld_765_soeldner, itmw_1h_mace_war_03 /*4408*/);
    equipitem(sld_765_soeldner, itrw_bow_long_01 /*4876*/);
    daily_routine = rtn_fmcstart_765;
};

func void rtn_fmcstart_765() {
    ta_guardpalisade(1, 0, 13, 0, "FMC_HUT10_OUT");
    ta_guardpalisade(13, 0, 1, 0, "FMC_HUT10_OUT");
};

instance stt_300_alberto(npc_default) {
    name = "Àëüáåðòî";
    npctype = npctype_main;
    guild = gil_stt;
    level = 13;
    voice = 12;
    id = 300;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 40;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 196;
    attribute[atr_hitpoints] /*0*/ = 196;
    mdl_setvisual(stt_300_alberto, "HUMANS.MDS");
    mdl_applyoverlaymds(stt_300_alberto, "Humans_Relaxed.mds");
    mdl_setvisualbody(stt_300_alberto, "hum_body_Naked0", 0, 1, "Hum_Head_Pony", 55, 1, stt_armor_m /*4123*/);
    b_scale(stt_300_alberto);
    mdl_setmodelfatness(stt_300_alberto, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_strong;
    npc_settalentskill(stt_300_alberto, npc_talent_1h, 2);
    npc_settalentskill(stt_300_alberto, npc_talent_sneak, 1);
    npc_settalentskill(stt_300_alberto, npc_talent_pickpocket, 1);
    npc_settalentvalue(stt_300_alberto, npc_talent_pickpocket, 60);
    npc_settalentskill(stt_300_alberto, npc_talent_picklock, 1);
    npc_settalentvalue(stt_300_alberto, npc_talent_picklock, 60);
    npc_settalentskill(stt_300_alberto, npc_talent_bow, 1);
    createinvitem(stt_300_alberto, itmw_1h_sword_01);
    createinvitem(stt_300_alberto, itrw_bow_small_04);
    createinvitems(stt_300_alberto, itfoapple, 5);
    createinvitems(stt_300_alberto, itfobeer, 3);
    createinvitems(stt_300_alberto, itfo_potion_health_01, 5);
    createinvitems(stt_300_alberto, itminugget, 50);
    createinvitems(stt_300_alberto, itamarrow, 100);
    daily_routine = rtn_start_300;
};

func void rtn_start_300() {
    ta_stay(0, 0, 18, 0, "OM_203");
    ta_stay(18, 3, 0, 0, "OM_203");
};

instance stt_301_ian(npc_default) {
    name = "ßí";
    npctype = npctype_main;
    guild = gil_stt;
    level = 13;
    flags = npc_flag_immortal;
    voice = 13;
    id = 301;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 40;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 196;
    attribute[atr_hitpoints] /*0*/ = 196;
    mdl_setvisual(stt_301_ian, "HUMANS.MDS");
    mdl_applyoverlaymds(stt_301_ian, "Humans_Relaxed.mds");
    mdl_setvisualbody(stt_301_ian, "hum_body_Naked0", 0, 2, "Hum_Head_Pony", 14, 1, stt_armor_m /*4123*/);
    b_scale(stt_301_ian);
    mdl_setmodelfatness(stt_301_ian, -1.0);
    aivar[22] = true;
    fight_tactic = fai_human_strong;
    npc_settalentskill(stt_301_ian, npc_talent_bow, 2);
    npc_settalentskill(stt_301_ian, npc_talent_1h, 2);
    npc_settalentskill(stt_301_ian, npc_talent_sneak, 1);
    npc_settalentskill(stt_301_ian, npc_talent_pickpocket, 1);
    npc_settalentvalue(stt_301_ian, npc_talent_pickpocket, 60);
    npc_settalentskill(stt_301_ian, npc_talent_picklock, 1);
    npc_settalentvalue(stt_301_ian, npc_talent_picklock, 60);
    createinvitems(stt_301_ian, itamarrow, 25);
    equipitem(stt_301_ian, itmw_1h_sword_04 /*4404*/);
    equipitem(stt_301_ian, itrw_bow_small_04 /*4874*/);
    daily_routine = rtn_start_301;
};

func void rtn_start_301() {
    ta_standaround(8, 0, 18, 0, "OM_CAVE1_47_IAN");
    ta_standaround(18, 0, 8, 0, "OM_CAVE1_47_IAN");
};

func void rtn_kapitel2_301() {
    ta_standaround(8, 0, 18, 0, "OM_CAVE3_19");
    ta_standaround(18, 0, 8, 0, "OM_CAVE3_19");
};

instance stt_302_viper(npc_default) {
    name = "Âàéïåð";
    npctype = npctype_main;
    guild = gil_stt;
    level = 7;
    voice = 11;
    id = 302;
    attribute[atr_strength] /*4*/ = 40;
    attribute[atr_dexterity] /*5*/ = 18;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 124;
    attribute[atr_hitpoints] /*0*/ = 124;
    mdl_setvisual(stt_302_viper, "HUMANS.MDS");
    mdl_applyoverlaymds(stt_302_viper, "Humans_Relaxed.mds");
    mdl_setvisualbody(stt_302_viper, "Hum_Body_CookSmith", 1, 1, "Hum_Head_Pony", 58, 1, -1);
    b_scale(stt_302_viper);
    mdl_setmodelfatness(stt_302_viper, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_strong;
    npc_settalentskill(stt_302_viper, npc_talent_1h, 2);
    npc_settalentskill(stt_302_viper, npc_talent_bow, 2);
    npc_settalentskill(stt_302_viper, npc_talent_sneak, 1);
    npc_settalentskill(stt_302_viper, npc_talent_pickpocket, 1);
    npc_settalentvalue(stt_302_viper, npc_talent_pickpocket, 60);
    npc_settalentskill(stt_302_viper, npc_talent_picklock, 1);
    npc_settalentvalue(stt_302_viper, npc_talent_picklock, 60);
    createinvitem(stt_302_viper, itmw_1h_sword_short_04);
    createinvitems(stt_302_viper, itminugget, 750);
    daily_routine = rtn_start_302;
};

func void rtn_start_302() {
    ta_minebellows(8, 0, 18, 0, "OM_CAVE1_82");
    ta_minebellows(18, 0, 8, 0, "OM_CAVE1_82");
};

instance stt_304_schatten(npc_default) {
    name = name_schatten;
    npctype = npctype_ambient;
    guild = gil_stt;
    level = 5;
    voice = 10;
    id = 304;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 100;
    attribute[atr_hitpoints] /*0*/ = 100;
    mdl_setvisual(stt_304_schatten, "HUMANS.MDS");
    mdl_applyoverlaymds(stt_304_schatten, "Humans_Relaxed.mds");
    mdl_setvisualbody(stt_304_schatten, "hum_body_Naked0", 0, 0, "Hum_Head_Bald", 14, 2, stt_armor_m /*4123*/);
    b_scale(stt_304_schatten);
    mdl_setmodelfatness(stt_304_schatten, -1.0);
    fight_tactic = fai_human_coward;
    npc_settalentskill(stt_304_schatten, npc_talent_1h, 1);
    createinvitem(stt_304_schatten, itfo_potion_water_01);
    createinvitem(stt_304_schatten, itfoapple);
    createinvitems(stt_304_schatten, itamarrow, 14);
    createinvitems(stt_304_schatten, itkelockpick, 2);
    equipitem(stt_304_schatten, itmw_1h_sword_short_02 /*4387*/);
    equipitem(stt_304_schatten, itrw_bow_small_01 /*4871*/);
    daily_routine = rtn_start_304;
};

func void rtn_start_304() {
    ta_sleep(0, 0, 8, 0, "OCR_HUT_6");
    ta_smalltalk(8, 0, 24, 0, "OCR_TO_HUT_6");
};

instance stt_306_schatten(npc_default) {
    name = name_schatten;
    npctype = npctype_ambient;
    guild = gil_stt;
    level = 7;
    voice = 12;
    id = 306;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 18;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 124;
    attribute[atr_hitpoints] /*0*/ = 124;
    mdl_setvisual(stt_306_schatten, "HUMANS.MDS");
    mdl_applyoverlaymds(stt_306_schatten, "Humans_Relaxed.mds");
    mdl_setvisualbody(stt_306_schatten, "hum_body_Naked0", 0, 2, "Hum_Head_Bald", 12, 1, stt_armor_m /*4123*/);
    b_scale(stt_306_schatten);
    mdl_setmodelfatness(stt_306_schatten, 0.0);
    fight_tactic = fai_human_coward;
    npc_settalentskill(stt_306_schatten, npc_talent_1h, 1);
    createinvitem(stt_306_schatten, itfo_potion_water_01);
    createinvitem(stt_306_schatten, itfoapple);
    createinvitem(stt_306_schatten, itkelockpick);
    createinvitems(stt_306_schatten, itamarrow, 10);
    equipitem(stt_306_schatten, itmw_1h_sword_short_04 /*4389*/);
    equipitem(stt_306_schatten, itrw_bow_small_02 /*4872*/);
    daily_routine = rtn_start_306;
};

func void rtn_start_306() {
    ta_sleep(23, 0, 8, 5, "OCR_HUT_27");
    ta_smalltalk(8, 5, 17, 0, "OCR_OUTSIDE_HUT_27_MOVEMENT");
    ta_sitaround(17, 0, 19, 5, "OCR_OUTSIDE_ARENA_HANGAROUND");
    ta_arenaspectator(19, 5, 23, 0, "OCR_ARENA_07");
};

instance stt_309_whistler(npc_default) {
    name = "Óèñòëåð";
    npctype = npctype_main;
    guild = gil_stt;
    level = 5;
    voice = 11;
    id = 309;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 100;
    attribute[atr_hitpoints] /*0*/ = 100;
    mdl_setvisual(stt_309_whistler, "HUMANS.MDS");
    mdl_applyoverlaymds(stt_309_whistler, "Humans_Relaxed.mds");
    mdl_setvisualbody(stt_309_whistler, "hum_body_Naked0", 0, 1, "Hum_Head_Psionic", 97, 1, stt_armor_m /*4123*/);
    b_scale(stt_309_whistler);
    mdl_setmodelfatness(stt_309_whistler, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_strong;
    npc_settalentskill(stt_309_whistler, npc_talent_bow, 2);
    npc_settalentskill(stt_309_whistler, npc_talent_1h, 1);
    createinvitems(stt_309_whistler, itamarrow, 10);
    createinvitems(stt_309_whistler, itkelockpick, 2);
    equipitem(stt_309_whistler, itmw_1h_sword_short_02 /*4387*/);
    equipitem(stt_309_whistler, itrw_bow_small_02 /*4872*/);
    daily_routine = rtn_start_309;
};

func void rtn_start_309() {
    ta_sleep(23, 30, 8, 0, "OCR_HUT_65");
    ta_sitaround(8, 0, 11, 30, "OCR_OUTSIDE_HUT_65");
    ta_repairhut(11, 30, 13, 0, "OCR_OUTSIDE_HUT_65");
    ta_sitaround(13, 0, 23, 30, "OCR_OUTSIDE_HUT_65");
};

instance stt_310_schatten(npc_default) {
    name = name_schatten;
    npctype = npctype_ambient;
    guild = gil_stt;
    level = 5;
    voice = 12;
    id = 310;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 20;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 100;
    attribute[atr_hitpoints] /*0*/ = 100;
    mdl_setvisual(stt_310_schatten, "HUMANS.MDS");
    mdl_applyoverlaymds(stt_310_schatten, "Humans_Relaxed.mds");
    mdl_setvisualbody(stt_310_schatten, "hum_body_Naked0", 0, 3, "Hum_Head_Psionic", 10, 2, stt_armor_m /*4123*/);
    b_scale(stt_310_schatten);
    mdl_setmodelfatness(stt_310_schatten, -1.0);
    fight_tactic = fai_human_coward;
    npc_settalentskill(stt_310_schatten, npc_talent_1h, 1);
    createinvitem(stt_310_schatten, itfo_potion_water_01);
    createinvitem(stt_310_schatten, itfoapple);
    createinvitem(stt_310_schatten, itkelockpick);
    createinvitems(stt_310_schatten, itamarrow, 10);
    equipitem(stt_310_schatten, itmw_1h_sword_short_02 /*4387*/);
    equipitem(stt_310_schatten, itrw_bow_small_03 /*4873*/);
    daily_routine = rtn_start_310;
};

func void rtn_start_310() {
    ta_sleep(22, 0, 7, 0, "OCR_HUT_8");
    ta_smalltalk(7, 0, 11, 0, "OCR_OUTSIDE_HUT_7");
    ta_standaround(11, 0, 20, 5, "OCR_COOK_AT_HUT_10");
    ta_smalltalk(20, 5, 22, 0, "OCR_OUTSIDE_HUT_7");
};

instance stt_311_fisk(npc_default) {
    name = "Ôèñê";
    npctype = npctype_main;
    guild = gil_stt;
    level = 7;
    voice = 12;
    id = 311;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 18;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 124;
    attribute[atr_hitpoints] /*0*/ = 124;
    mdl_setvisual(stt_311_fisk, "HUMANS.MDS");
    mdl_applyoverlaymds(stt_311_fisk, "Humans_Relaxed.mds");
    mdl_setvisualbody(stt_311_fisk, "hum_body_Naked0", 0, 3, "Hum_Head_Bald", 10, 2, stt_armor_m /*4123*/);
    b_scale(stt_311_fisk);
    mdl_setmodelfatness(stt_311_fisk, -1.0);
    aivar[22] = true;
    fight_tactic = fai_human_strong;
    npc_settalentskill(stt_311_fisk, npc_talent_1h, 2);
    b_give_fiskchapter1weapons();
    createinvitems(stt_311_fisk, itkelockpick, 10);
    daily_routine = rtn_start_311;
};

func void rtn_start_311() {
    ta_sleep(22, 30, 7, 30, "OCR_HUT_49");
    ta_sitaround(7, 30, 22, 30, "OCR_OUTSIDE_HUT_49");
};

instance stt_313_schatten(npc_default) {
    name = name_schatten;
    npctype = npctype_ambient;
    guild = gil_stt;
    level = 5;
    voice = 12;
    id = 313;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 18;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 100;
    attribute[atr_hitpoints] /*0*/ = 100;
    mdl_setvisual(stt_313_schatten, "HUMANS.MDS");
    mdl_applyoverlaymds(stt_313_schatten, "Humans_Relaxed.mds");
    mdl_setvisualbody(stt_313_schatten, "hum_body_Naked0", 0, 1, "Hum_Head_Psionic", 58, 3, stt_armor_m /*4123*/);
    b_scale(stt_313_schatten);
    mdl_setmodelfatness(stt_313_schatten, -1.0);
    fight_tactic = fai_human_coward;
    npc_settalentskill(stt_313_schatten, npc_talent_1h, 1);
    createinvitem(stt_313_schatten, itfo_potion_water_01);
    createinvitem(stt_313_schatten, itfoapple);
    createinvitem(stt_313_schatten, itkelockpick);
    createinvitems(stt_313_schatten, itamarrow, 12);
    equipitem(stt_313_schatten, itmw_1h_sword_short_03 /*4388*/);
    equipitem(stt_313_schatten, itrw_bow_small_03 /*4873*/);
    daily_routine = rtn_start_313;
};

func void rtn_start_313() {
    ta_sleep(23, 0, 7, 30, "OCR_HUT_36");
    ta_sitaround(7, 30, 11, 0, "OCR_OUTSIDE_HUT_36");
    ta_repairhut(11, 0, 17, 0, "OCR_OUTSIDE_HUT_36");
    ta_sitaround(17, 0, 23, 0, "OCR_OUTSIDE_HUT_36");
};

instance stt_314_schatten(npc_default) {
    name = name_schatten;
    npctype = npctype_ambient;
    guild = gil_stt;
    level = 5;
    voice = 10;
    id = 314;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 100;
    attribute[atr_hitpoints] /*0*/ = 100;
    mdl_setvisual(stt_314_schatten, "HUMANS.MDS");
    mdl_applyoverlaymds(stt_314_schatten, "Humans_Relaxed.mds");
    mdl_setvisualbody(stt_314_schatten, "hum_body_Naked0", 0, 1, "Hum_Head_Psionic", 54, 3, stt_armor_m /*4123*/);
    b_scale(stt_314_schatten);
    mdl_setmodelfatness(stt_314_schatten, 0.0);
    fight_tactic = fai_human_coward;
    npc_settalentskill(stt_314_schatten, npc_talent_1h, 1);
    createinvitems(stt_314_schatten, itamarrow, 15);
    equipitem(stt_314_schatten, itmw_1h_sword_short_04 /*4389*/);
    equipitem(stt_314_schatten, itrw_bow_small_02 /*4872*/);
    daily_routine = rtn_start_314;
};

func void rtn_start_314() {
    ta_sleep(22, 45, 7, 45, "OCR_HUT_38");
    ta_standaround(7, 45, 15, 30, "OCR_OUTSIDE_HUT_39");
    ta_sitaround(15, 30, 17, 0, "OCR_HUT_38");
    ta_sitcampfire(17, 0, 22, 45, "OCR_OUTSIDE_HUT_39");
};

instance stt_315_sly(npc_default) {
    name = "Ñëàé";
    npctype = npctype_main;
    guild = gil_stt;
    level = 5;
    voice = 10;
    id = 315;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 20;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 100;
    attribute[atr_hitpoints] /*0*/ = 100;
    mdl_setvisual(stt_315_sly, "HUMANS.MDS");
    mdl_applyoverlaymds(stt_315_sly, "Humans_Relaxed.mds");
    mdl_setvisualbody(stt_315_sly, "hum_body_Naked0", 0, 1, "Hum_Head_Fighter", 55, 2, stt_armor_m /*4123*/);
    b_scale(stt_315_sly);
    mdl_setmodelfatness(stt_315_sly, -1.0);
    aivar[22] = true;
    fight_tactic = fai_human_strong;
    npc_settalentskill(stt_315_sly, npc_talent_bow, 2);
    npc_settalentskill(stt_315_sly, npc_talent_1h, 1);
    createinvitems(stt_315_sly, itamarrow, 16);
    createinvitems(stt_315_sly, itkelockpick, 2);
    equipitem(stt_315_sly, itmw_1h_sword_short_02 /*4387*/);
    equipitem(stt_315_sly, itrw_bow_small_04 /*4874*/);
    daily_routine = rtn_start_315;
};

func void rtn_start_315() {
    ta_sleep(0, 0, 7, 0, "OCR_HUT_73");
    ta_boss(7, 0, 7, 30, "OCR_OUTSIDE_HUT_73");
    ta_smalltalk(7, 30, 12, 0, "OCR_OUTSIDE_HUT_73");
    ta_sitaround(12, 0, 0, 0, "OCR_OUTSIDE_HUT_73");
};

instance stt_316_schatten(npc_default) {
    name = name_schatten;
    npctype = npctype_ambient;
    guild = gil_stt;
    level = 5;
    voice = 10;
    id = 316;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 18;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 100;
    attribute[atr_hitpoints] /*0*/ = 100;
    mdl_setvisual(stt_316_schatten, "HUMANS.MDS");
    mdl_applyoverlaymds(stt_316_schatten, "Humans_Relaxed.mds");
    mdl_setvisualbody(stt_316_schatten, "hum_body_Naked0", 0, 1, "Hum_Head_Pony", 56, 1, stt_armor_m /*4123*/);
    b_scale(stt_316_schatten);
    mdl_setmodelfatness(stt_316_schatten, -1.0);
    fight_tactic = fai_human_coward;
    npc_settalentskill(stt_316_schatten, npc_talent_bow, 1);
    npc_settalentskill(stt_316_schatten, npc_talent_1h, 1);
    createinvitem(stt_316_schatten, itfo_potion_water_01);
    createinvitems(stt_316_schatten, itamarrow, 15);
    createinvitems(stt_316_schatten, itfobeer, 2);
    equipitem(stt_316_schatten, itmw_1h_sword_short_01 /*4386*/);
    equipitem(stt_316_schatten, itrw_bow_small_05 /*4875*/);
    daily_routine = rtn_start_316;
};

func void rtn_start_316() {
    ta_sleep(23, 0, 8, 0, "OCR_HUT_18");
    ta_smalltalk(8, 0, 19, 0, "OCR_OUTSIDE_HUT_18");
    ta_arenaspectator(19, 0, 23, 0, "OCR_ARENA_09");
};

instance stt_318_schatten(npc_default) {
    name = name_schatten;
    npctype = npctype_ambient;
    guild = gil_stt;
    level = 7;
    voice = 12;
    id = 318;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 18;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 124;
    attribute[atr_hitpoints] /*0*/ = 124;
    mdl_setvisual(stt_318_schatten, "HUMANS.MDS");
    mdl_applyoverlaymds(stt_318_schatten, "Humans_Relaxed.mds");
    mdl_setvisualbody(stt_318_schatten, "hum_body_Naked0", 0, 1, "Hum_Head_Psionic", 108, 1, stt_armor_m /*4123*/);
    b_scale(stt_318_schatten);
    mdl_setmodelfatness(stt_318_schatten, 0.0);
    fight_tactic = fai_human_coward;
    npc_settalentskill(stt_318_schatten, npc_talent_1h, 1);
    createinvitem(stt_318_schatten, itkelockpick);
    createinvitem(stt_318_schatten, itfo_potion_water_01);
    createinvitems(stt_318_schatten, itamarrow, 20);
    equipitem(stt_318_schatten, itmw_1h_sword_short_04 /*4389*/);
    equipitem(stt_318_schatten, itrw_bow_small_01 /*4871*/);
    daily_routine = rtn_start_318;
};

func void rtn_start_318() {
    ta_sleep(23, 0, 7, 0, "OCR_HUT_60");
    ta_boss(7, 0, 7, 30, "OCR_OUTSIDE_HUT_60");
    ta_standaround(7, 30, 15, 0, "OCR_CAMPFIRE_F_1");
    ta_repairhut(15, 0, 17, 0, "OCR_OUTSIDE_HUT_60");
    ta_standaround(17, 25, 23, 0, "OCR_CAMPFIRE_F_2");
};

instance stt_319_schatten(npc_default) {
    name = name_schatten;
    npctype = npctype_ambient;
    guild = gil_stt;
    level = 5;
    voice = 10;
    id = 319;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 18;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 100;
    attribute[atr_hitpoints] /*0*/ = 100;
    mdl_setvisual(stt_319_schatten, "HUMANS.MDS");
    mdl_applyoverlaymds(stt_319_schatten, "Humans_Relaxed.mds");
    mdl_setvisualbody(stt_319_schatten, "hum_body_Naked0", 0, 1, "Hum_Head_Thief", 57, 2, stt_armor_m /*4123*/);
    b_scale(stt_319_schatten);
    mdl_setmodelfatness(stt_319_schatten, 0.0);
    fight_tactic = fai_human_coward;
    npc_settalentskill(stt_319_schatten, npc_talent_1h, 1);
    createinvitems(stt_319_schatten, itamarrow, 14);
    equipitem(stt_319_schatten, itmw_1h_sword_short_03 /*4388*/);
    equipitem(stt_319_schatten, itrw_bow_small_04 /*4874*/);
    daily_routine = rtn_start_319;
};

func void rtn_start_319() {
    ta_sleep(22, 30, 6, 30, "OCR_HUT_9");
    ta_sitaround(6, 30, 10, 30, "OCR_OUTSIDE_HUT_9");
    ta_standaround(10, 30, 22, 30, "OCR_OUTSIDE_HUT_9");
};

instance stt_322_schatten(npc_default) {
    name = name_schatten;
    npctype = npctype_ambient;
    guild = gil_stt;
    level = 7;
    voice = 12;
    id = 322;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 18;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 124;
    attribute[atr_hitpoints] /*0*/ = 124;
    mdl_setvisual(stt_322_schatten, "HUMANS.MDS");
    mdl_applyoverlaymds(stt_322_schatten, "Humans_Relaxed.mds");
    mdl_setvisualbody(stt_322_schatten, "hum_body_Naked0", 0, 1, "Hum_Head_Psionic", 57, 1, stt_armor_m /*4123*/);
    b_scale(stt_322_schatten);
    mdl_setmodelfatness(stt_322_schatten, 0.0);
    fight_tactic = fai_human_coward;
    npc_settalentskill(stt_322_schatten, npc_talent_bow, 1);
    npc_settalentskill(stt_322_schatten, npc_talent_1h, 1);
    createinvitems(stt_322_schatten, itamarrow, 15);
    equipitem(stt_322_schatten, itmw_1h_sword_short_04 /*4389*/);
    equipitem(stt_322_schatten, itrw_bow_small_02 /*4872*/);
    daily_routine = rtn_start_322;
};

func void rtn_start_322() {
    ta_sleep(23, 2, 6, 45, "OCR_HUT_3");
    ta_standaround(6, 45, 10, 0, "OCR_CAMPFIRE_A_MOVEMENT3");
    ta_washself(10, 0, 10, 30, "OCR_LAKE_1");
    ta_standaround(10, 30, 12, 30, "OCR_CAMPFIRE_A_MOVEMENT2");
    ta_smalltalk(12, 30, 15, 30, "OCR_CAMPFIRE_A_MOVEMENT3");
    ta_sitaround(15, 30, 16, 0, "OCR_HUT_3");
    ta_smalltalk(16, 0, 18, 1, "OCR_CAMPFIRE_A_MOVEMENT3");
    ta_sitcampfire(18, 1, 23, 2, "OCR_CAMPFIRE_A_MOVEMENT3");
};

func void rtn_omfull_322() {
    ta_sleep(23, 0, 7, 0, "OCR_HUT_3");
    ta_standaround(7, 0, 23, 0, "OCR_TO_MAINGATE");
};

func void rtn_fmtaken_322() {
    ta_pickore(8, 0, 13, 0, "FMC_FM_ENTRANCE");
    ta_washself(14, 0, 15, 0, "OCR_WASH_2");
    ta_smoke(18, 0, 23, 0, "OCR_OUTSIDE_HUT_54");
    ta_sleep(23, 0, 8, 0, "OCR_HUT_3");
};

func void rtn_orcassault_322() {
};

instance stt_324_balam(npc_default) {
    name = "Áàëàì";
    npctype = npctype_ambient;
    guild = gil_vlk;
    level = 3;
    voice = 4;
    id = 324;
    attribute[atr_strength] /*4*/ = 35;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 100;
    attribute[atr_hitpoints] /*0*/ = 100;
    mdl_setvisual(stt_324_balam, "HUMANS.MDS");
    mdl_applyoverlaymds(stt_324_balam, "Humans_Relaxed.mds");
    mdl_setvisualbody(stt_324_balam, "Hum_Body_CookSmith", 0, 1, "Hum_Head_Fighter", 15, 1, -1);
    b_scale(stt_324_balam);
    mdl_setmodelfatness(stt_324_balam, 2.0);
    aivar[22] = true;
    fight_tactic = fai_human_coward;
    npc_settalentskill(stt_324_balam, npc_talent_1h, 1);
    createinvitem(stt_324_balam, itfoapple);
    createinvitem(stt_324_balam, itkelockpick);
    equipitem(stt_324_balam, itmw_1h_sword_short_02 /*4387*/);
    daily_routine = rtn_start_324;
};

func void rtn_start_324() {
    ta_cook(8, 0, 18, 0, "OCC_BARONS_RIGHT_ROOM_FRONT");
    ta_cook(18, 0, 8, 0, "OCC_KITCHEN");
};

instance stt_325_omid(npc_default) {
    name = "Îìèä";
    npctype = npctype_ambient;
    guild = gil_vlk;
    level = 3;
    voice = 2;
    id = 325;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 100;
    attribute[atr_hitpoints] /*0*/ = 100;
    mdl_setvisual(stt_325_omid, "HUMANS.MDS");
    mdl_setvisualbody(stt_325_omid, "Hum_Body_CookSmith", 0, 1, "Hum_Head_Psionic", 16, 1, -1);
    b_scale(stt_325_omid);
    mdl_setmodelfatness(stt_325_omid, -1.0);
    aivar[22] = true;
    fight_tactic = fai_human_coward;
    npc_settalentskill(stt_325_omid, npc_talent_1h, 1);
    createinvitem(stt_325_omid, itfoapple);
    daily_routine = rtn_start_325;
};

func void rtn_start_325() {
    ta_cook(8, 5, 18, 5, "OCC_BARONS_RIGHT_ROOM_FRONT");
    ta_cook(18, 5, 8, 5, "OCC_KITCHEN");
};

instance stt_328_schatten(npc_default) {
    name = name_schatten;
    npctype = npctype_ambient;
    guild = gil_stt;
    level = 5;
    voice = 12;
    id = 328;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 100;
    attribute[atr_hitpoints] /*0*/ = 100;
    mdl_setvisual(stt_328_schatten, "HUMANS.MDS");
    mdl_applyoverlaymds(stt_328_schatten, "Humans_Relaxed.mds");
    mdl_setvisualbody(stt_328_schatten, "hum_body_Naked0", 0, 0, "Hum_Head_Bald", 14, 2, stt_armor_m /*4123*/);
    b_scale(stt_328_schatten);
    mdl_setmodelfatness(stt_328_schatten, -1.0);
    fight_tactic = fai_human_coward;
    npc_settalentskill(stt_328_schatten, npc_talent_1h, 1);
    createinvitems(stt_328_schatten, itamarrow, 20);
    equipitem(stt_328_schatten, itmw_1h_sword_short_02 /*4387*/);
    equipitem(stt_328_schatten, itrw_bow_small_01 /*4871*/);
    daily_routine = rtn_start_328;
};

func void rtn_start_328() {
    ta_sleep(23, 5, 7, 0, "OCR_HUT_22");
    ta_sitaround(7, 0, 11, 0, "OCR_OUTSIDE_ARENA_HANGAROUND");
    ta_roastscavenger(11, 0, 17, 30, "OCR_OUTSIDE_ARENA_01");
    ta_sitaround(17, 30, 19, 0, "OCR_OUTSIDE_ARENA_HANGAROUND");
    ta_arenaspectator(19, 0, 23, 5, "OCR_ARENA_05");
};

instance stt_329_dexter(npc_default) {
    name = "Äåêñòåð";
    npctype = npctype_main;
    guild = gil_stt;
    level = 7;
    voice = 10;
    id = 329;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 18;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 124;
    attribute[atr_hitpoints] /*0*/ = 124;
    mdl_setvisual(stt_329_dexter, "HUMANS.MDS");
    mdl_applyoverlaymds(stt_329_dexter, "Humans_Relaxed.mds");
    mdl_setvisualbody(stt_329_dexter, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 58, 1, stt_armor_m /*4123*/);
    b_scale(stt_329_dexter);
    mdl_setmodelfatness(stt_329_dexter, -1.0);
    aivar[22] = true;
    fight_tactic = fai_human_strong;
    npc_settalentskill(stt_329_dexter, npc_talent_bow, 1);
    npc_settalentskill(stt_329_dexter, npc_talent_1h, 1);
    createinvitem(stt_329_dexter, itwrworldmap);
    createinvitems(stt_329_dexter, itamarrow, 15);
    createinvitems(stt_329_dexter, itkelockpick, 20);
    createinvitems(stt_329_dexter, itminugget, 200);
    createinvitems(stt_329_dexter, itmijoint_1, 23);
    createinvitems(stt_329_dexter, itmijoint_2, 15);
    createinvitems(stt_329_dexter, itmijoint_3, 8);
    createinvitems(stt_329_dexter, itfo_potion_health_01, 10);
    createinvitems(stt_329_dexter, itfo_potion_health_02, 5);
    createinvitems(stt_329_dexter, itfo_potion_mana_01, 8);
    equipitem(stt_329_dexter, itmw_1h_sword_short_04 /*4389*/);
    equipitem(stt_329_dexter, itrw_bow_small_03 /*4873*/);
    daily_routine = rtn_start_329;
};

func void rtn_start_329() {
    ta_sleep(23, 30, 7, 30, "OCR_HUT_55");
    ta_boss(7, 30, 8, 0, "OCR_OUTSIDE_HUT_55");
    ta_washself(8, 0, 8, 15, "OCR_WASH_8");
    ta_sitaround(8, 15, 11, 0, "OCR_OUTSIDE_HUT_55");
    ta_smalltalk(11, 0, 17, 0, "OCR_OUTSIDE_HUT_47_SMALT1");
    ta_standaround(17, 0, 23, 30, "OCR_MARKETPLACE_SCAVENGER");
};

instance stt_330_schatten(npc_default) {
    name = name_schatten;
    npctype = npctype_ambient;
    guild = gil_stt;
    level = 7;
    voice = 10;
    id = 330;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 18;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 124;
    attribute[atr_hitpoints] /*0*/ = 124;
    mdl_setvisual(stt_330_schatten, "HUMANS.MDS");
    mdl_applyoverlaymds(stt_330_schatten, "Humans_Relaxed.mds");
    mdl_setvisualbody(stt_330_schatten, "hum_body_Naked0", 0, 0, "Hum_Head_FatBald", 2, 1, stt_armor_m /*4123*/);
    b_scale(stt_330_schatten);
    mdl_setmodelfatness(stt_330_schatten, 0.0);
    fight_tactic = fai_human_coward;
    npc_settalentskill(stt_330_schatten, npc_talent_1h, 1);
    createinvitem(stt_330_schatten, itkelockpick);
    createinvitems(stt_330_schatten, itamarrow, 10);
    createinvitems(stt_330_schatten, itfobeer, 2);
    equipitem(stt_330_schatten, itmw_1h_sword_short_04 /*4389*/);
    equipitem(stt_330_schatten, itrw_bow_small_02 /*4872*/);
    daily_routine = rtn_prestart_330;
};

func void rtn_prestart_330() {
    ta_smalltalk(8, 0, 20, 0, "OCR_OUTSIDE_HUT_44");
    ta_smalltalk(20, 0, 8, 0, "OCR_OUTSIDE_HUT_44");
};

func void rtn_start_330() {
    ta_sleep(23, 0, 7, 30, "OCR_HUT_44");
    ta_sitaround(7, 30, 10, 0, "OCR_OUTSIDE_HUT_44");
    ta_cookforme(10, 0, 17, 0, "OCR_OUTSIDE_HUT_44");
    ta_sitaround(17, 0, 23, 0, "OCR_OUTSIDE_HUT_44");
};

instance stt_331_fingers(npc_default) {
    name = "Ôèíãåðñ";
    npctype = npctype_main;
    guild = gil_stt;
    level = 7;
    voice = 5;
    id = 331;
    attribute[atr_strength] /*4*/ = 25;
    attribute[atr_dexterity] /*5*/ = 28;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 124;
    attribute[atr_hitpoints] /*0*/ = 124;
    mdl_setvisual(stt_331_fingers, "HUMANS.MDS");
    mdl_applyoverlaymds(stt_331_fingers, "Humans_Relaxed.mds");
    mdl_setvisualbody(stt_331_fingers, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 56, 1, stt_armor_m /*4123*/);
    b_scale(stt_331_fingers);
    mdl_setmodelfatness(stt_331_fingers, -1.0);
    aivar[22] = true;
    fight_tactic = fai_human_strong;
    npc_settalentskill(stt_331_fingers, npc_talent_bow, 1);
    npc_settalentskill(stt_331_fingers, npc_talent_1h, 1);
    createinvitems(stt_331_fingers, itamarrow, 18);
    createinvitems(stt_331_fingers, itkelockpick, 3);
    createinvitems(stt_331_fingers, itfobeer, 2);
    equipitem(stt_331_fingers, itmw_1h_sword_short_04 /*4389*/);
    equipitem(stt_331_fingers, itrw_bow_small_02 /*4872*/);
    daily_routine = rtn_start_331;
};

func void rtn_start_331() {
    ta_sleep(23, 0, 7, 0, "OCR_HUT_20");
    ta_boss(7, 0, 23, 0, "OCR_OUTSIDE_HUT_20");
};

instance stt_335_santino(npc_default) {
    name = "Ñàíòèíî";
    npctype = npctype_main;
    guild = gil_stt;
    level = 7;
    voice = 7;
    id = 335;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 18;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 124;
    attribute[atr_hitpoints] /*0*/ = 124;
    mdl_setvisual(stt_335_santino, "HUMANS.MDS");
    mdl_applyoverlaymds(stt_335_santino, "Humans_Relaxed.mds");
    mdl_setvisualbody(stt_335_santino, "hum_body_Naked0", 0, 2, "Hum_Head_Bald", 12, 1, stt_armor_m /*4123*/);
    b_scale(stt_335_santino);
    mdl_setmodelfatness(stt_335_santino, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(stt_335_santino, npc_talent_1h, 1);
    createinvitems(stt_335_santino, itfo_potion_water_01, 5);
    createinvitems(stt_335_santino, itkelockpick, 5);
    createinvitems(stt_335_santino, itminugget, 50);
    createinvitems(stt_335_santino, itlstorch, 10);
    createinvitems(stt_335_santino, itfobeer, 7);
    createinvitems(stt_335_santino, itfo_potion_mana_01, 5);
    createinvitems(stt_335_santino, itfo_potion_health_01, 5);
    createinvitems(stt_335_santino, itamarrow, 100);
    createinvitems(stt_335_santino, itambolt, 100);
    daily_routine = rtn_start_335;
};

func void rtn_start_335() {
    ta_stay(0, 0, 12, 0, "OM_202");
    ta_stay(12, 0, 24, 0, "OM_202");
};

instance stt_336_cavalorn(npc_default) {
    name = "Êàâàëîðí";
    npctype = npctype_main;
    guild = gil_stt;
    level = 5;
    voice = 12;
    id = 336;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 100;
    attribute[atr_hitpoints] /*0*/ = 100;
    mdl_setvisual(stt_336_cavalorn, "HUMANS.MDS");
    mdl_applyoverlaymds(stt_336_cavalorn, "Humans_Relaxed.mds");
    mdl_setvisualbody(stt_336_cavalorn, "hum_body_Naked0", 0, 3, "Hum_Head_Psionic", 10, 2, stt_armor_m /*4123*/);
    b_scale(stt_336_cavalorn);
    mdl_setmodelfatness(stt_336_cavalorn, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(stt_336_cavalorn, npc_talent_bow, 1);
    npc_settalentskill(stt_336_cavalorn, npc_talent_1h, 1);
    npc_settalentskill(stt_336_cavalorn, npc_talent_sneak, 1);
    b_give_cavalornchapter1weapons();
    createinvitem(stt_336_cavalorn, itfo_potion_water_01);
    createinvitem(stt_336_cavalorn, itfoapple);
    createinvitem(stt_336_cavalorn, itkelockpick);
    createinvitems(stt_336_cavalorn, itamarrow, 16);
    equipitem(stt_336_cavalorn, itmw_1h_sword_short_02 /*4387*/);
    equipitem(stt_336_cavalorn, itrw_bow_small_02 /*4872*/);
    daily_routine = rtn_start_336;
};

func void rtn_start_336() {
    ta_sleep(23, 0, 6, 30, "OW_SAWHUT_SLEEP_01");
    ta_standaround(6, 30, 23, 0, "OW_CAVALORN_01");
};

instance stt_336_schatten(npc_default) {
    name = name_schatten;
    npctype = npctype_ambient;
    guild = gil_stt;
    level = 5;
    voice = 10;
    id = 336;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 20;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 100;
    attribute[atr_hitpoints] /*0*/ = 100;
    mdl_setvisual(stt_336_schatten, "HUMANS.MDS");
    mdl_applyoverlaymds(stt_336_schatten, "Humans_Relaxed.mds");
    mdl_setvisualbody(stt_336_schatten, "hum_body_Naked0", 0, 1, "Hum_Head_Pony", 56, 1, stt_armor_m /*4123*/);
    b_scale(stt_336_schatten);
    mdl_setmodelfatness(stt_336_schatten, -1.0);
    fight_tactic = fai_human_coward;
    npc_settalentskill(stt_336_schatten, npc_talent_1h, 1);
    createinvitem(stt_336_schatten, itfo_potion_water_01);
    createinvitems(stt_336_schatten, itamarrow, 15);
    createinvitems(stt_336_schatten, itfobeer, 2);
    equipitem(stt_336_schatten, itmw_1h_sword_short_01 /*4386*/);
    equipitem(stt_336_schatten, itrw_bow_small_05 /*4875*/);
    daily_routine = rtn_fmstart_336;
};

func void rtn_fmstart_336() {
    ta_sitaround(0, 0, 13, 0, "FM_162");
    ta_sitaround(13, 0, 0, 0, "FM_162");
};

instance stt_337_schatten(npc_default) {
    name = name_schatten;
    npctype = npctype_ambient;
    guild = gil_stt;
    level = 5;
    voice = 12;
    id = 337;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 20;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 100;
    attribute[atr_hitpoints] /*0*/ = 100;
    mdl_setvisual(stt_337_schatten, "HUMANS.MDS");
    mdl_applyoverlaymds(stt_337_schatten, "Humans_Relaxed.mds");
    mdl_setvisualbody(stt_337_schatten, "hum_body_Naked0", 0, 1, "Hum_Head_Psionic", 58, 3, stt_armor_m /*4123*/);
    b_scale(stt_337_schatten);
    mdl_setmodelfatness(stt_337_schatten, -1.0);
    fight_tactic = fai_human_coward;
    npc_settalentskill(stt_337_schatten, npc_talent_1h, 1);
    createinvitem(stt_337_schatten, itfo_potion_water_01);
    createinvitem(stt_337_schatten, itfoapple);
    createinvitem(stt_337_schatten, itkelockpick);
    createinvitems(stt_337_schatten, itamarrow, 12);
    equipitem(stt_337_schatten, itmw_1h_sword_short_03 /*4388*/);
    equipitem(stt_337_schatten, itrw_bow_small_03 /*4873*/);
    daily_routine = rtn_fmstart_337;
};

func void rtn_fmstart_337() {
    ta_roastscavenger(0, 0, 13, 0, "FM_157");
    ta_roastscavenger(13, 0, 0, 0, "FM_157");
};

instance stt_338_schatten(npc_default) {
    name = name_schatten;
    npctype = npctype_ambient;
    guild = gil_stt;
    level = 7;
    voice = 12;
    id = 338;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 18;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 124;
    attribute[atr_hitpoints] /*0*/ = 124;
    mdl_setvisual(stt_338_schatten, "HUMANS.MDS");
    mdl_applyoverlaymds(stt_338_schatten, "Humans_Relaxed.mds");
    mdl_setvisualbody(stt_338_schatten, "hum_body_Naked0", 1, 1, "Hum_Head_Psionic", 94, 1, stt_armor_m /*4123*/);
    b_scale(stt_338_schatten);
    mdl_setmodelfatness(stt_338_schatten, 0.0);
    fight_tactic = fai_human_coward;
    npc_settalentskill(stt_338_schatten, npc_talent_1h, 1);
    createinvitem(stt_338_schatten, itkelockpick);
    createinvitem(stt_338_schatten, itfo_potion_water_01);
    createinvitems(stt_338_schatten, itamarrow, 20);
    equipitem(stt_338_schatten, itmw_1h_sword_short_04 /*4389*/);
    equipitem(stt_338_schatten, itrw_bow_small_01 /*4871*/);
    daily_routine = rtn_fmstart_338;
};

func void rtn_fmstart_338() {
    ta_sitaround(0, 0, 13, 0, "FM_162");
    ta_sitaround(13, 0, 0, 0, "FM_162");
};

instance tpl_1400_gornabar(npc_default) {
    name = "Ãîð Íà Áàð";
    npctype = npctype_main;
    guild = gil_tpl;
    level = 17;
    flags = npc_flag_immortal;
    voice = 9;
    id = 1400;
    attribute[atr_strength] /*4*/ = 85;
    attribute[atr_dexterity] /*5*/ = 65;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 244;
    attribute[atr_hitpoints] /*0*/ = 244;
    mdl_setvisual(tpl_1400_gornabar, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1400_gornabar, "Humans_Mage.mds");
    mdl_setvisualbody(tpl_1400_gornabar, "hum_body_Naked0", 1, 2, "Hum_Head_FatBald", 16, 1, tpl_armor_l /*4141*/);
    b_scale(tpl_1400_gornabar);
    mdl_setmodelfatness(tpl_1400_gornabar, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1400_gornabar, npc_talent_2h, 1);
    createinvitem(tpl_1400_gornabar, itmi_amulet_psi_01);
    createinvitem(tpl_1400_gornabar, itfosoup);
    createinvitem(tpl_1400_gornabar, itmijoint_3);
    createinvitem(tpl_1400_gornabar, itlstorch);
    equipitem(tpl_1400_gornabar, itmw_2h_sword_light_03 /*4435*/);
    daily_routine = rtn_start_1400;
};

func void rtn_start_1400() {
    ta_smalltalk(0, 0, 12, 0, "OM_CAVE1_56");
    ta_smalltalk(12, 0, 24, 0, "OM_CAVE1_56");
};

func void rtn_gate_1400() {
    ta_guard(0, 0, 12, 0, "OM_CAVE3_26");
    ta_guard(12, 0, 24, 0, "OM_CAVE3_26");
};

instance tpl_1401_gornakosh(npc_default) {
    name = "Ãîð Íà Êîø";
    npctype = npctype_main;
    guild = gil_tpl;
    level = 17;
    flags = npc_flag_immortal;
    voice = 13;
    id = 1401;
    attribute[atr_strength] /*4*/ = 85;
    attribute[atr_dexterity] /*5*/ = 65;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 244;
    attribute[atr_hitpoints] /*0*/ = 244;
    mdl_setvisual(tpl_1401_gornakosh, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1401_gornakosh, "Humans_Mage.mds");
    mdl_setvisualbody(tpl_1401_gornakosh, "hum_body_Naked0", 0, 0, "Hum_Head_FatBald", 15, 2, tpl_armor_l /*4141*/);
    b_scale(tpl_1401_gornakosh);
    mdl_setmodelfatness(tpl_1401_gornakosh, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1401_gornakosh, npc_talent_2h, 1);
    createinvitem(tpl_1401_gornakosh, itfosoup);
    createinvitem(tpl_1401_gornakosh, itmijoint_1);
    equipitem(tpl_1401_gornakosh, itmw_2h_sword_light_02 /*4434*/);
    daily_routine = rtn_start_1401;
};

func void rtn_start_1401() {
    ta_sitaround(0, 0, 12, 0, "OM_207");
    ta_sitaround(12, 0, 24, 0, "OM_207");
};

func void rtn_gate_1401() {
    ta_guard(0, 0, 12, 0, "OM_CAVE3_19");
    ta_guard(12, 0, 24, 0, "OM_CAVE3_19");
};

instance tpl_1402_gornatoth(npc_default) {
    name = "Ãîð Íà Òîô";
    npctype = npctype_main;
    guild = gil_tpl;
    level = 21;
    voice = 11;
    id = 1402;
    attribute[atr_strength] /*4*/ = 100;
    attribute[atr_dexterity] /*5*/ = 80;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 292;
    attribute[atr_hitpoints] /*0*/ = 292;
    mdl_setvisual(tpl_1402_gornatoth, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1402_gornatoth, "Humans_Mage.mds");
    mdl_setvisualbody(tpl_1402_gornatoth, "hum_body_Naked0", 0, 1, "Hum_Head_Psionic", 86, 1, tpl_armor_h /*4143*/);
    b_scale(tpl_1402_gornatoth);
    mdl_setmodelfatness(tpl_1402_gornatoth, 0.0);
    fight_tactic = fai_human_master;
    npc_settalentskill(tpl_1402_gornatoth, npc_talent_2h, 2);
    createinvitem(tpl_1402_gornatoth, itmw_2h_sword_old_01);
    createinvitem(tpl_1402_gornatoth, itmw_2h_sword_light_01);
    createinvitem(tpl_1402_gornatoth, itmw_2h_sword_light_02);
    daily_routine = rtn_start_1402;
};

func void rtn_start_1402() {
    ta_sleep(1, 0, 5, 0, "PSI_33_HUT_IN");
    ta_boss(5, 0, 1, 0, "PSI_MEETING_BRIDGE_MOVEMENT");
};

instance tpl_1403_templer(npc_default) {
    name = name_templer;
    npctype = npctype_guard;
    guild = gil_tpl;
    level = 17;
    flags = 0;
    voice = 8;
    id = 1403;
    attribute[atr_strength] /*4*/ = 85;
    attribute[atr_dexterity] /*5*/ = 65;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 244;
    attribute[atr_hitpoints] /*0*/ = 244;
    mdl_setvisual(tpl_1403_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1403_templer, "Humans_Mage.mds");
    mdl_setvisualbody(tpl_1403_templer, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 60, 1, tpl_armor_l /*4141*/);
    b_scale(tpl_1403_templer);
    mdl_setmodelfatness(tpl_1403_templer, -1.0);
    fight_tactic = fai_human_ranged;
    npc_settalentskill(tpl_1403_templer, npc_talent_2h, 1);
    createinvitem(tpl_1403_templer, itfosoup);
    createinvitem(tpl_1403_templer, itmijoint_1);
    createinvitems(tpl_1403_templer, itambolt, 30);
    equipitem(tpl_1403_templer, itmw_2h_sword_light_01 /*4433*/);
    equipitem(tpl_1403_templer, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_start_1403;
};

func void rtn_start_1403() {
    ta_guardpalisade(0, 0, 22, 0, "PSI_GUARD2");
    ta_guardpalisade(22, 0, 24, 0, "PSI_GUARD2");
};

func void rtn_prepareritual_1403() {
    ta_guardpalisade(0, 0, 22, 0, "PSI_GUARD2");
    ta_guardpalisade(22, 0, 24, 0, "PSI_GUARD2");
};

func void rtn_omfull_1403() {
    ta_guardpalisade(0, 0, 22, 0, "PSI_GUARD2");
    ta_guardpalisade(22, 0, 24, 0, "PSI_GUARD2");
};

func void rtn_fmtaken_1403() {
    ta_guardpalisade(0, 0, 22, 0, "PSI_GUARD2");
    ta_guardpalisade(22, 0, 24, 0, "PSI_GUARD2");
};

func void rtn_orcassault_1403() {
    ta_guardpalisade(0, 0, 22, 0, "PSI_GUARD2");
    ta_guardpalisade(22, 0, 24, 0, "PSI_GUARD2");
};

instance tpl_1404_templer(npc_default) {
    name = name_templer;
    npctype = npctype_guard;
    guild = gil_tpl;
    level = 17;
    voice = 13;
    id = 1404;
    attribute[atr_strength] /*4*/ = 85;
    attribute[atr_dexterity] /*5*/ = 65;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 244;
    attribute[atr_hitpoints] /*0*/ = 244;
    mdl_setvisual(tpl_1404_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1404_templer, "Humans_Mage.mds");
    mdl_setvisualbody(tpl_1404_templer, "hum_body_Naked0", 1, 2, "Hum_Head_Bald", 13, 1, tpl_armor_l /*4141*/);
    b_scale(tpl_1404_templer);
    mdl_setmodelfatness(tpl_1404_templer, -1.0);
    fight_tactic = fai_human_ranged;
    npc_settalentskill(tpl_1404_templer, npc_talent_2h, 1);
    createinvitem(tpl_1404_templer, itfosoup);
    createinvitem(tpl_1404_templer, itmijoint_1);
    createinvitems(tpl_1404_templer, itambolt, 30);
    equipitem(tpl_1404_templer, itmw_2h_sword_light_01 /*4433*/);
    equipitem(tpl_1404_templer, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_start_1404;
};

func void rtn_start_1404() {
    ta_guardpalisade(0, 0, 22, 0, "PSI_PATH_2_2_GUARD");
    ta_guardpalisade(22, 0, 24, 0, "PSI_PATH_2_2_GUARD");
};

instance tpl_1405_gornaran(npc_default) {
    name = "Ãîð Íà Ðàí";
    npctype = npctype_main;
    guild = gil_tpl;
    level = 17;
    flags = 0;
    voice = 13;
    id = 1405;
    attribute[atr_strength] /*4*/ = 85;
    attribute[atr_dexterity] /*5*/ = 65;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 244;
    attribute[atr_hitpoints] /*0*/ = 244;
    mdl_setvisual(tpl_1405_gornaran, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1405_gornaran, "Humans_Mage.mds");
    mdl_setvisualbody(tpl_1405_gornaran, "hum_body_Naked0", 0, 3, "Hum_Head_FatBald", 0, 1, tpl_armor_h /*4143*/);
    b_scale(tpl_1405_gornaran);
    mdl_setmodelfatness(tpl_1405_gornaran, -1.0);
    fight_tactic = fai_human_master;
    npc_settalentskill(tpl_1405_gornaran, npc_talent_2h, 1);
    createinvitem(tpl_1405_gornaran, itfosoup);
    createinvitem(tpl_1405_gornaran, itmijoint_1);
    createinvitems(tpl_1405_gornaran, itambolt, 30);
    equipitem(tpl_1405_gornaran, itmw_2h_sword_light_02 /*4434*/);
    equipitem(tpl_1405_gornaran, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_start_1405;
};

func void rtn_start_1405() {
    ta_guardpalisade(0, 0, 12, 0, "PSI_GUARD3");
    ta_guardpalisade(12, 0, 24, 0, "PSI_GUARD3");
};

func void rtn_prepareritual_1405() {
    ta_guardpalisade(0, 0, 12, 0, "PSI_GUARD3");
    ta_guardpalisade(12, 0, 24, 0, "PSI_GUARD3");
};

func void rtn_omfull_1405() {
    ta_guardpalisade(0, 0, 12, 0, "PSI_GUARD3");
    ta_guardpalisade(12, 0, 24, 0, "PSI_GUARD3");
};

func void rtn_fmtaken_1405() {
    ta_guardpalisade(0, 0, 12, 0, "PSI_GUARD3");
    ta_guardpalisade(12, 0, 24, 0, "PSI_GUARD3");
};

func void rtn_orcassault_1405() {
    ta_guardpalisade(0, 0, 12, 0, "PSI_GUARD3");
    ta_guardpalisade(12, 0, 24, 0, "PSI_GUARD3");
};

instance tpl_1406_templer(npc_default) {
    name = "Òåëîõðàíèòåëü Ãàëîìà";
    npctype = npctype_main;
    guild = gil_tpl;
    level = 25;
    voice = 13;
    id = 1406;
    attribute[atr_strength] /*4*/ = 100;
    attribute[atr_dexterity] /*5*/ = 80;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 292;
    attribute[atr_hitpoints] /*0*/ = 292;
    mdl_setvisual(tpl_1406_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1406_templer, "Humans_Mage.mds");
    mdl_setvisualbody(tpl_1406_templer, "hum_body_Naked0", 1, 1, "Hum_Head_Bald", 63, 2, tpl_armor_l /*4141*/);
    b_scale(tpl_1406_templer);
    mdl_setmodelfatness(tpl_1406_templer, 0.0);
    fight_tactic = fai_human_master;
    npc_settalentskill(tpl_1406_templer, npc_talent_2h, 2);
    createinvitem(tpl_1406_templer, itfosoup);
    createinvitem(tpl_1406_templer, itmijoint_1);
    equipitem(tpl_1406_templer, itmw_2h_sword_light_02 /*4434*/);
    daily_routine = rtn_start_1406;
};

func void rtn_start_1406() {
    ta_guardpassage(9, 0, 21, 0, "PSI_LABOR_GUARD_1");
    ta_guardpassage(21, 0, 9, 0, "PSI_LABOR_GUARD_1");
};

func void rtn_flee_1406() {
    ta_stay(0, 0, 12, 0, "");
    ta_stay(12, 0, 24, 0, "");
};

instance tpl_1407_templer(npc_default) {
    name = name_templer;
    npctype = npctype_guard;
    guild = gil_tpl;
    level = 17;
    flags = 0;
    voice = 13;
    id = 1407;
    attribute[atr_strength] /*4*/ = 85;
    attribute[atr_dexterity] /*5*/ = 65;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 244;
    attribute[atr_hitpoints] /*0*/ = 244;
    mdl_setvisual(tpl_1407_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1407_templer, "Humans_Mage.mds");
    mdl_setvisualbody(tpl_1407_templer, "hum_body_Naked0", 1, 1, "Hum_Head_Psionic", 64, 1, tpl_armor_l /*4141*/);
    b_scale(tpl_1407_templer);
    mdl_setmodelfatness(tpl_1407_templer, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1407_templer, npc_talent_2h, 1);
    createinvitem(tpl_1407_templer, itfosoup);
    createinvitem(tpl_1407_templer, itmijoint_1);
    equipitem(tpl_1407_templer, itmw_2h_sword_light_01 /*4433*/);
    daily_routine = rtn_start_1407;
};

func void rtn_start_1407() {
    ta_smalltalk(6, 0, 7, 0, "PSI_SWAMP_6");
    ta_guard(7, 0, 8, 0, "PSI_PATH_9_12");
    ta_smalltalk(8, 0, 9, 0, "PSI_SWAMP_6");
    ta_guard(9, 0, 10, 0, "PSI_PATH_9_12");
    ta_smalltalk(10, 0, 11, 0, "PSI_SWAMP_6");
    ta_guard(11, 0, 12, 0, "PSI_PATH_9_12");
    ta_smalltalk(12, 0, 13, 0, "PSI_SWAMP_6");
    ta_guard(13, 0, 14, 0, "PSI_PATH_9_12");
    ta_smalltalk(14, 0, 15, 0, "PSI_SWAMP_6");
    ta_guard(15, 0, 16, 0, "PSI_PATH_9_12");
    ta_smalltalk(16, 0, 17, 0, "PSI_SWAMP_6");
    ta_guard(17, 0, 18, 0, "PSI_PATH_9_12");
    ta_smalltalk(18, 0, 19, 0, "PSI_SWAMP_6");
    ta_guard(19, 0, 20, 0, "PSI_PATH_9_12");
    ta_smalltalk(20, 0, 21, 0, "PSI_SWAMP_6");
    ta_guard(21, 0, 22, 0, "PSI_PATH_9_12");
    ta_smalltalk(22, 0, 23, 0, "PSI_SWAMP_6");
    ta_guard(23, 0, 0, 0, "PSI_PATH_9_12");
    ta_smalltalk(0, 0, 1, 0, "PSI_SWAMP_6");
    ta_guard(1, 0, 2, 0, "PSI_PATH_9_12");
    ta_smalltalk(2, 0, 3, 0, "PSI_SWAMP_6");
    ta_guard(3, 0, 4, 0, "PSI_PATH_9_12");
    ta_smalltalk(4, 0, 5, 0, "PSI_SWAMP_6");
    ta_guard(5, 0, 6, 0, "PSI_PATH_9_12");
};

instance tpl_1408_templer(npc_default) {
    name = name_templer;
    npctype = npctype_guard;
    guild = gil_tpl;
    level = 17;
    flags = 0;
    voice = 8;
    id = 1408;
    attribute[atr_strength] /*4*/ = 85;
    attribute[atr_dexterity] /*5*/ = 65;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 244;
    attribute[atr_hitpoints] /*0*/ = 244;
    mdl_setvisual(tpl_1408_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1408_templer, "Humans_Mage.mds");
    mdl_setvisualbody(tpl_1408_templer, "hum_body_Naked0", 1, 1, "Hum_Head_Psionic", 65, 0, tpl_armor_m /*4142*/);
    b_scale(tpl_1408_templer);
    mdl_setmodelfatness(tpl_1408_templer, -1.0);
    fight_tactic = fai_human_ranged;
    npc_settalentskill(tpl_1408_templer, npc_talent_2h, 1);
    createinvitem(tpl_1408_templer, itfosoup);
    createinvitem(tpl_1408_templer, itmijoint_1);
    createinvitems(tpl_1408_templer, itambolt, 30);
    equipitem(tpl_1408_templer, itmw_2h_sword_light_01 /*4433*/);
    equipitem(tpl_1408_templer, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_start_1408;
};

func void rtn_start_1408() {
    ta_guardpalisade(8, 0, 22, 0, "PSI_GUARD_TEMPLE_5_2");
    ta_guardpalisade(22, 0, 8, 0, "PSI_GUARD_TEMPLE_5_2");
};

instance tpl_1409_templer(npc_default) {
    name = name_templer;
    npctype = npctype_guard;
    guild = gil_tpl;
    level = 17;
    flags = 0;
    voice = 13;
    id = 1409;
    attribute[atr_strength] /*4*/ = 85;
    attribute[atr_dexterity] /*5*/ = 65;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 244;
    attribute[atr_hitpoints] /*0*/ = 244;
    mdl_setvisual(tpl_1409_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1409_templer, "Humans_Mage.mds");
    mdl_setvisualbody(tpl_1409_templer, "hum_body_Naked0", 1, 1, "Hum_Head_Bald", 65, 1, tpl_armor_l /*4141*/);
    b_scale(tpl_1409_templer);
    mdl_setmodelfatness(tpl_1409_templer, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1409_templer, npc_talent_2h, 1);
    createinvitem(tpl_1409_templer, itfosoup);
    createinvitem(tpl_1409_templer, itmijoint_1);
    equipitem(tpl_1409_templer, itmw_2h_sword_light_01 /*4433*/);
    daily_routine = rtn_start_1409;
};

func void rtn_start_1409() {
    ta_smalltalk(0, 0, 8, 0, "PSI_SMITH_TALK");
    ta_smalltalk(8, 0, 24, 0, "PSI_SMITH_TALK");
};

instance tpl_1410_templer(npc_default) {
    name = name_templer;
    npctype = npctype_guard;
    guild = gil_tpl;
    level = 17;
    flags = 0;
    voice = 13;
    id = 1410;
    attribute[atr_strength] /*4*/ = 85;
    attribute[atr_dexterity] /*5*/ = 65;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 244;
    attribute[atr_hitpoints] /*0*/ = 244;
    mdl_setvisual(tpl_1410_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1410_templer, "Humans_Mage.mds");
    mdl_setvisualbody(tpl_1410_templer, "hum_body_Naked0", 1, 1, "Hum_Head_Bald", 64, 4, tpl_armor_l /*4141*/);
    b_scale(tpl_1410_templer);
    mdl_setmodelfatness(tpl_1410_templer, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1410_templer, npc_talent_2h, 1);
    createinvitem(tpl_1410_templer, itfosoup);
    createinvitem(tpl_1410_templer, itmijoint_1);
    equipitem(tpl_1410_templer, itmw_2h_sword_light_01 /*4433*/);
    daily_routine = rtn_start_1410;
};

func void rtn_start_1410() {
    ta_smalltalk(0, 0, 8, 0, "PSI_SMITH_TALK");
    ta_smalltalk(8, 0, 24, 0, "PSI_SMITH_TALK");
};

instance tpl_1411_templer(npc_default) {
    name = name_templer;
    npctype = npctype_guard;
    guild = gil_tpl;
    level = 12;
    voice = 8;
    id = 1411;
    attribute[atr_strength] /*4*/ = 45;
    attribute[atr_dexterity] /*5*/ = 25;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 184;
    attribute[atr_hitpoints] /*0*/ = 184;
    mdl_setvisual(tpl_1411_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1411_templer, "Humans_Militia.mds");
    mdl_setvisualbody(tpl_1411_templer, "hum_body_Naked0", 1, 1, "Hum_Head_Psionic", 66, 1, tpl_armor_l /*4141*/);
    b_scale(tpl_1411_templer);
    mdl_setmodelfatness(tpl_1411_templer, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1411_templer, npc_talent_2h, 1);
    createinvitem(tpl_1411_templer, itfosoup);
    createinvitem(tpl_1411_templer, itmijoint_1);
    equipitem(tpl_1411_templer, itmw_2h_sword_light_01 /*4433*/);
    daily_routine = rtn_start_1411;
};

func void rtn_start_1411() {
    ta_sleep(0, 0, 6, 0, "PSI_16_HUT_IN");
    ta_practicesword(6, 0, 0, 0, "PSI_PATH_6_8");
};

instance tpl_1412_templer(npc_default) {
    name = name_templer;
    npctype = npctype_guard;
    guild = gil_tpl;
    level = 12;
    voice = 13;
    id = 1412;
    attribute[atr_strength] /*4*/ = 45;
    attribute[atr_dexterity] /*5*/ = 25;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 184;
    attribute[atr_hitpoints] /*0*/ = 184;
    mdl_setvisual(tpl_1412_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1412_templer, "Humans_Militia.mds");
    mdl_setvisualbody(tpl_1412_templer, "hum_body_Naked0", 0, 1, "Hum_Head_Bald", 62, 2, tpl_armor_l /*4141*/);
    b_scale(tpl_1412_templer);
    mdl_setmodelfatness(tpl_1412_templer, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1412_templer, npc_talent_2h, 1);
    createinvitem(tpl_1412_templer, itfosoup);
    createinvitem(tpl_1412_templer, itmijoint_1);
    equipitem(tpl_1412_templer, itmw_2h_sword_light_01 /*4433*/);
    daily_routine = rtn_start_1412;
};

func void rtn_start_1412() {
    ta_sleep(0, 5, 6, 5, "PSI_15_HUT_IN");
    ta_practicesword(16, 5, 0, 5, "PSI_TRAINING_1");
};

instance tpl_1413_templer(npc_default) {
    name = name_templer;
    npctype = npctype_guard;
    guild = gil_tpl;
    level = 12;
    voice = 8;
    id = 1413;
    attribute[atr_strength] /*4*/ = 45;
    attribute[atr_dexterity] /*5*/ = 25;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 184;
    attribute[atr_hitpoints] /*0*/ = 184;
    mdl_setvisual(tpl_1413_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1413_templer, "Humans_Militia.mds");
    mdl_setvisualbody(tpl_1413_templer, "hum_body_Naked0", 1, 1, "Hum_Head_Psionic", 61, 1, tpl_armor_l /*4141*/);
    b_scale(tpl_1413_templer);
    mdl_setmodelfatness(tpl_1413_templer, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1413_templer, npc_talent_2h, 1);
    createinvitem(tpl_1413_templer, itfosoup);
    createinvitem(tpl_1413_templer, itmijoint_1);
    equipitem(tpl_1413_templer, itmw_2h_sword_light_01 /*4433*/);
    daily_routine = rtn_start_1413;
};

func void rtn_start_1413() {
    ta_guardpassage(8, 0, 21, 0, "PSI_TEMPLE_GUARD_01");
    ta_guardpassage(21, 0, 8, 0, "PSI_TEMPLE_GUARD_01");
};

instance tpl_1414_templer(npc_default) {
    name = name_templer;
    npctype = npctype_guard;
    guild = gil_tpl;
    level = 12;
    voice = 13;
    id = 1414;
    attribute[atr_strength] /*4*/ = 45;
    attribute[atr_dexterity] /*5*/ = 25;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 184;
    attribute[atr_hitpoints] /*0*/ = 184;
    mdl_setvisual(tpl_1414_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1414_templer, "Humans_Militia.mds");
    mdl_setvisualbody(tpl_1414_templer, "hum_body_Naked0", 1, 0, "Hum_Head_Bald", 15, 1, tpl_armor_l /*4141*/);
    b_scale(tpl_1414_templer);
    mdl_setmodelfatness(tpl_1414_templer, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1414_templer, npc_talent_2h, 1);
    createinvitem(tpl_1414_templer, itfosoup);
    createinvitem(tpl_1414_templer, itmijoint_1);
    equipitem(tpl_1414_templer, itmw_2h_sword_light_01 /*4433*/);
    daily_routine = rtn_start_1414;
};

func void rtn_start_1414() {
    ta_sleep(23, 55, 5, 55, "PSI_18_HUT_IN");
    ta_practicesword(5, 55, 23, 55, "PSI_TRAINING_3");
};

instance tpl_1415_templer(npc_default) {
    name = name_templer;
    npctype = npctype_main;
    guild = gil_tpl;
    level = 17;
    voice = 13;
    id = 1415;
    attribute[atr_strength] /*4*/ = 85;
    attribute[atr_dexterity] /*5*/ = 65;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 244;
    attribute[atr_hitpoints] /*0*/ = 244;
    mdl_setvisual(tpl_1415_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1415_templer, "Humans_Militia.mds");
    mdl_setvisualbody(tpl_1415_templer, "hum_body_Naked0", 0, 1, "Hum_Head_Bald", 59, 1, tpl_armor_l /*4141*/);
    b_scale(tpl_1415_templer);
    mdl_setmodelfatness(tpl_1415_templer, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1415_templer, npc_talent_2h, 1);
    createinvitem(tpl_1415_templer, itfosoup);
    createinvitem(tpl_1415_templer, itmijoint_1);
    equipitem(tpl_1415_templer, itmw_2h_sword_light_02 /*4434*/);
    daily_routine = rtn_start_1415;
};

func void rtn_start_1415() {
    ta_guard(8, 0, 20, 0, "PSI_GATE_GUARD_1");
    ta_guard(20, 0, 8, 0, "PSI_GATE_GUARD_1");
};

instance tpl_1416_templer(npc_default) {
    name = name_templer;
    npctype = npctype_main;
    guild = gil_tpl;
    level = 17;
    voice = 8;
    id = 1416;
    attribute[atr_strength] /*4*/ = 85;
    attribute[atr_dexterity] /*5*/ = 65;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 244;
    attribute[atr_hitpoints] /*0*/ = 244;
    mdl_setvisual(tpl_1416_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1416_templer, "Humans_Militia.mds");
    mdl_setvisualbody(tpl_1416_templer, "hum_body_Naked0", 1, 1, "Hum_Head_Psionic", 59, 2, tpl_armor_l /*4141*/);
    b_scale(tpl_1416_templer);
    mdl_setmodelfatness(tpl_1416_templer, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1416_templer, npc_talent_2h, 1);
    createinvitem(tpl_1416_templer, itfosoup);
    createinvitem(tpl_1416_templer, itmijoint_1);
    equipitem(tpl_1416_templer, itmw_2h_sword_light_02 /*4434*/);
    daily_routine = rtn_start_1416;
};

func void rtn_start_1416() {
    ta_guard(8, 0, 20, 0, "PSI_GATE_GUARD_2");
    ta_guard(20, 0, 8, 0, "PSI_GATE_GUARD_2");
};

instance tpl_1417_templer(npc_default) {
    name = name_templer;
    npctype = npctype_guard;
    guild = gil_tpl;
    level = 17;
    voice = 8;
    id = 1417;
    attribute[atr_strength] /*4*/ = 85;
    attribute[atr_dexterity] /*5*/ = 65;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 244;
    attribute[atr_hitpoints] /*0*/ = 244;
    mdl_setvisual(tpl_1417_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1417_templer, "Humans_Militia.mds");
    mdl_setvisualbody(tpl_1417_templer, "hum_body_Naked0", 0, 1, "Hum_Head_Psionic", 60, 3, tpl_armor_m /*4142*/);
    b_scale(tpl_1417_templer);
    mdl_setmodelfatness(tpl_1417_templer, -1.0);
    fight_tactic = fai_human_ranged;
    npc_settalentskill(tpl_1417_templer, npc_talent_2h, 1);
    createinvitem(tpl_1417_templer, itfosoup);
    createinvitem(tpl_1417_templer, itmijoint_1);
    createinvitems(tpl_1417_templer, itambolt, 30);
    equipitem(tpl_1417_templer, itmw_2h_sword_light_02 /*4434*/);
    equipitem(tpl_1417_templer, itrw_crossbow_01 /*4890*/);
    daily_routine = rtn_start_1417;
};

func void rtn_start_1417() {
    ta_guardpassage(8, 0, 20, 0, "PSI_PATH_5_1_GUARD");
    ta_guardpassage(20, 0, 8, 0, "PSI_PATH_5_1_GUARD");
};

instance tpl_1418_templer(npc_default) {
    name = name_templer;
    npctype = npctype_guard;
    guild = gil_tpl;
    level = 12;
    voice = 13;
    id = 1418;
    attribute[atr_strength] /*4*/ = 45;
    attribute[atr_dexterity] /*5*/ = 25;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 184;
    attribute[atr_hitpoints] /*0*/ = 184;
    mdl_setvisual(tpl_1418_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1418_templer, "Humans_Militia.mds");
    mdl_setvisualbody(tpl_1418_templer, "hum_body_Naked0", 1, 1, "Hum_Head_FatBald", 61, 0, tpl_armor_l /*4141*/);
    b_scale(tpl_1418_templer);
    mdl_setmodelfatness(tpl_1418_templer, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1418_templer, npc_talent_2h, 1);
    createinvitem(tpl_1418_templer, itfosoup);
    createinvitem(tpl_1418_templer, itmijoint_1);
    equipitem(tpl_1418_templer, itmw_2h_sword_light_01 /*4433*/);
    daily_routine = rtn_start_1418;
};

func void rtn_start_1418() {
    ta_sleep(23, 10, 6, 0, "PSI_33_HUT_IN");
    ta_sleep(6, 0, 23, 10, "PSI_33_HUT_IN");
};

instance tpl_1419_templer(npc_default) {
    name = name_templer;
    npctype = npctype_guard;
    guild = gil_tpl;
    level = 12;
    voice = 8;
    id = 1419;
    attribute[atr_strength] /*4*/ = 45;
    attribute[atr_dexterity] /*5*/ = 25;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 184;
    attribute[atr_hitpoints] /*0*/ = 184;
    mdl_setvisual(tpl_1419_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1419_templer, "Humans_Militia.mds");
    mdl_setvisualbody(tpl_1419_templer, "hum_body_Naked0", 1, 1, "Hum_Head_Bald", 66, 1, tpl_armor_l /*4141*/);
    b_scale(tpl_1419_templer);
    mdl_setmodelfatness(tpl_1419_templer, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1419_templer, npc_talent_2h, 1);
    createinvitem(tpl_1419_templer, itfosoup);
    createinvitem(tpl_1419_templer, itmijoint_1);
    equipitem(tpl_1419_templer, itmw_2h_sword_light_01 /*4433*/);
    daily_routine = rtn_start_1419;
};

func void rtn_start_1419() {
    ta_sleep(23, 0, 6, 10, "PSI_34_HUT_IN");
    ta_practicesword(6, 10, 23, 0, "PSI_TRAINING_8");
};

instance tpl_1420_templer(npc_default) {
    name = name_templer;
    npctype = npctype_guard;
    guild = gil_tpl;
    level = 12;
    voice = 8;
    id = 1420;
    attribute[atr_strength] /*4*/ = 45;
    attribute[atr_dexterity] /*5*/ = 25;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 184;
    attribute[atr_hitpoints] /*0*/ = 184;
    mdl_setvisual(tpl_1420_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1420_templer, "Humans_Militia.mds");
    mdl_setvisualbody(tpl_1420_templer, "hum_body_Naked0", 0, 1, "Hum_Head_Psionic", 62, 1, tpl_armor_l /*4141*/);
    b_scale(tpl_1420_templer);
    mdl_setmodelfatness(tpl_1420_templer, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1420_templer, npc_talent_2h, 1);
    createinvitem(tpl_1420_templer, itfosoup);
    createinvitem(tpl_1420_templer, itmijoint_1);
    equipitem(tpl_1420_templer, itmw_2h_sword_light_01 /*4433*/);
    daily_routine = rtn_start_1420;
};

func void rtn_start_1420() {
    ta_guardpassage(8, 0, 20, 0, "PSI_PATH_5_1_GUARD2");
    ta_guardpassage(20, 0, 8, 0, "PSI_PATH_5_1_GUARD2");
};

instance tpl_1422_gorhanis(npc_default) {
    name = "Ãîð Õàíèñ";
    npctype = npctype_main;
    guild = gil_none;
    level = 12;
    voice = 8;
    id = 1422;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 25;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 184;
    attribute[atr_hitpoints] /*0*/ = 184;
    mdl_setvisual(tpl_1422_gorhanis, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1422_gorhanis, "Humans_Militia.mds");
    mdl_setvisualbody(tpl_1422_gorhanis, "hum_body_Naked0", 1, 1, "Hum_Head_Bald", 66, 1, tpl_armor_l /*4141*/);
    b_scale(tpl_1422_gorhanis);
    mdl_setmodelfatness(tpl_1422_gorhanis, -1.0);
    fight_tactic = fai_human_master;
    npc_settalentskill(tpl_1422_gorhanis, npc_talent_1h, 2);
    createinvitem(tpl_1422_gorhanis, itfosoup);
    createinvitem(tpl_1422_gorhanis, itmijoint_1);
    createinvitem(tpl_1422_gorhanis, itmi_stuff_oldcoin_02);
    equipitem(tpl_1422_gorhanis, itmw_1h_sword_01 /*4401*/);
    daily_routine = rtn_start_1422;
};

func void rtn_start_1422() {
    ta_sleep(23, 45, 7, 45, "OCR_HUT_32");
    ta_standaround(7, 45, 10, 5, "OCR_CAMPFIRE_I_1");
    ta_smalltalk(10, 5, 16, 0, "OCR_SMALLTALK_A_OC_ARENA");
    ta_practicesword(16, 0, 17, 15, "OCR_ARENABATTLE");
    ta_sitcampfire(17, 15, 23, 45, "OCR_CAMPFIRE_I_1");
};

instance tpl_1423_templer(npc_default) {
    name = name_templer;
    npctype = npctype_guard;
    guild = gil_tpl;
    level = 17;
    voice = 13;
    id = 1423;
    attribute[atr_strength] /*4*/ = 85;
    attribute[atr_dexterity] /*5*/ = 65;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 244;
    attribute[atr_hitpoints] /*0*/ = 244;
    mdl_setvisual(tpl_1423_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1423_templer, "Humans_Mage.mds");
    mdl_setvisualbody(tpl_1423_templer, "hum_body_Naked0", 1, 1, "Hum_Head_Psionic", 64, 1, tpl_armor_l /*4141*/);
    b_scale(tpl_1423_templer);
    mdl_setmodelfatness(tpl_1423_templer, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1423_templer, npc_talent_2h, 1);
    createinvitem(tpl_1423_templer, itfosoup);
    createinvitem(tpl_1423_templer, itmijoint_1);
    equipitem(tpl_1423_templer, itmw_2h_sword_light_02 /*4434*/);
    daily_routine = rtn_start_1423;
};

func void rtn_start_1423() {
    ta_guard(6, 0, 7, 0, "PSI_GUARD3_MOVEMENT2");
    ta_smalltalk(7, 0, 8, 0, "PSI_SWAMP_1");
    ta_guard(8, 0, 9, 0, "PSI_GUARD3_MOVEMENT2");
    ta_smalltalk(9, 0, 10, 0, "PSI_SWAMP_1");
    ta_guard(10, 0, 11, 0, "PSI_GUARD3_MOVEMENT2");
    ta_smalltalk(11, 0, 12, 0, "PSI_SWAMP_1");
    ta_guard(12, 0, 13, 0, "PSI_GUARD3_MOVEMENT2");
    ta_smalltalk(13, 0, 14, 0, "PSI_SWAMP_1");
    ta_guard(14, 0, 15, 0, "PSI_GUARD3_MOVEMENT2");
    ta_smalltalk(15, 0, 16, 0, "PSI_SWAMP_1");
    ta_guard(16, 0, 17, 0, "PSI_GUARD3_MOVEMENT2");
    ta_smalltalk(17, 0, 18, 0, "PSI_SWAMP_1");
    ta_guard(18, 0, 19, 0, "PSI_GUARD3_MOVEMENT2");
    ta_smalltalk(19, 0, 20, 0, "PSI_SWAMP_1");
    ta_guard(20, 0, 21, 0, "PSI_GUARD3_MOVEMENT2");
    ta_smalltalk(21, 0, 22, 0, "PSI_SWAMP_1");
    ta_guard(22, 0, 23, 0, "PSI_GUARD3_MOVEMENT2");
    ta_smalltalk(23, 0, 0, 0, "PSI_SWAMP_1");
    ta_guard(0, 0, 1, 0, "PSI_GUARD3_MOVEMENT2");
    ta_smalltalk(1, 0, 2, 0, "PSI_SWAMP_1");
    ta_guard(2, 0, 3, 0, "PSI_GUARD3_MOVEMENT2");
    ta_smalltalk(3, 0, 4, 0, "PSI_SWAMP_1");
    ta_guard(4, 0, 5, 0, "PSI_GUARD3_MOVEMENT2");
    ta_smalltalk(5, 0, 6, 0, "PSI_SWAMP_1");
};

instance tpl_1424_templer(npc_default) {
    name = name_templer;
    npctype = npctype_guard;
    guild = gil_tpl;
    level = 17;
    voice = 8;
    id = 1424;
    attribute[atr_strength] /*4*/ = 85;
    attribute[atr_dexterity] /*5*/ = 65;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 244;
    attribute[atr_hitpoints] /*0*/ = 244;
    mdl_setvisual(tpl_1424_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1424_templer, "Humans_Mage.mds");
    mdl_setvisualbody(tpl_1424_templer, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 60, 1, tpl_armor_l /*4141*/);
    b_scale(tpl_1424_templer);
    mdl_setmodelfatness(tpl_1424_templer, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1424_templer, npc_talent_2h, 1);
    createinvitem(tpl_1424_templer, itfosoup);
    createinvitem(tpl_1424_templer, itmijoint_1);
    equipitem(tpl_1424_templer, itmw_2h_sword_light_02 /*4434*/);
    daily_routine = rtn_start_1424;
};

func void rtn_start_1424() {
    ta_guard(6, 0, 7, 0, "PSI_PATH_TEMPLE_3");
    ta_smalltalk(7, 0, 8, 0, "PSI_SWAMP_1");
    ta_guard(8, 0, 9, 0, "PSI_PATH_TEMPLE_3");
    ta_smalltalk(9, 0, 10, 0, "PSI_SWAMP_1");
    ta_guard(10, 0, 11, 0, "PSI_PATH_TEMPLE_3");
    ta_smalltalk(11, 0, 12, 0, "PSI_SWAMP_1");
    ta_guard(12, 0, 13, 0, "PSI_PATH_TEMPLE_3");
    ta_smalltalk(13, 0, 14, 0, "PSI_SWAMP_1");
    ta_guard(14, 0, 15, 0, "PSI_PATH_TEMPLE_3");
    ta_smalltalk(15, 0, 16, 0, "PSI_SWAMP_1");
    ta_guard(16, 0, 17, 0, "PSI_PATH_TEMPLE_3");
    ta_smalltalk(17, 0, 18, 0, "PSI_SWAMP_1");
    ta_guard(18, 0, 19, 0, "PSI_PATH_TEMPLE_3");
    ta_smalltalk(19, 0, 20, 0, "PSI_SWAMP_1");
    ta_guard(20, 0, 21, 0, "PSI_PATH_TEMPLE_3");
    ta_smalltalk(21, 0, 22, 0, "PSI_SWAMP_1");
    ta_guard(22, 0, 23, 0, "PSI_PATH_TEMPLE_3");
    ta_smalltalk(23, 0, 0, 0, "PSI_SWAMP_1");
    ta_guard(0, 0, 1, 0, "PSI_PATH_TEMPLE_3");
    ta_smalltalk(1, 0, 2, 0, "PSI_SWAMP_1");
    ta_guard(2, 0, 3, 0, "PSI_PATH_TEMPLE_3");
    ta_smalltalk(3, 0, 4, 0, "PSI_SWAMP_1");
    ta_guard(4, 0, 5, 0, "PSI_PATH_TEMPLE_3");
    ta_smalltalk(5, 0, 6, 0, "PSI_SWAMP_1");
};

instance tpl_1425_templer(npc_default) {
    name = name_templer;
    npctype = npctype_guard;
    guild = gil_tpl;
    level = 17;
    voice = 13;
    id = 1425;
    attribute[atr_strength] /*4*/ = 85;
    attribute[atr_dexterity] /*5*/ = 65;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 244;
    attribute[atr_hitpoints] /*0*/ = 244;
    mdl_setvisual(tpl_1425_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1425_templer, "Humans_Mage.mds");
    mdl_setvisualbody(tpl_1425_templer, "hum_body_Naked0", 1, 1, "Hum_Head_Bald", 65, 1, tpl_armor_l /*4141*/);
    b_scale(tpl_1425_templer);
    mdl_setmodelfatness(tpl_1425_templer, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1425_templer, npc_talent_2h, 1);
    createinvitem(tpl_1425_templer, itfosoup);
    createinvitem(tpl_1425_templer, itmijoint_1);
    equipitem(tpl_1425_templer, itmw_2h_sword_light_02 /*4434*/);
    daily_routine = rtn_start_1425;
};

func void rtn_start_1425() {
    ta_smalltalk(6, 0, 7, 0, "PSI_SWAMP_6");
    ta_guard(7, 0, 8, 0, "PSI_PATH_TEMPLE_8");
    ta_smalltalk(8, 0, 9, 0, "PSI_SWAMP_6");
    ta_guard(9, 0, 10, 0, "PSI_PATH_TEMPLE_8");
    ta_smalltalk(10, 0, 11, 0, "PSI_SWAMP_6");
    ta_guard(11, 0, 12, 0, "PSI_PATH_TEMPLE_8");
    ta_smalltalk(12, 0, 13, 0, "PSI_SWAMP_6");
    ta_guard(13, 0, 14, 0, "PSI_PATH_TEMPLE_8");
    ta_smalltalk(14, 0, 15, 0, "PSI_SWAMP_6");
    ta_guard(15, 0, 16, 0, "PSI_PATH_TEMPLE_8");
    ta_smalltalk(16, 0, 17, 0, "PSI_SWAMP_6");
    ta_guard(17, 0, 18, 0, "PSI_PATH_TEMPLE_8");
    ta_smalltalk(18, 0, 19, 0, "PSI_SWAMP_6");
    ta_guard(19, 0, 20, 0, "PSI_PATH_TEMPLE_8");
    ta_smalltalk(20, 0, 21, 0, "PSI_SWAMP_6");
    ta_guard(21, 0, 22, 0, "PSI_PATH_TEMPLE_8");
    ta_smalltalk(22, 0, 23, 0, "PSI_SWAMP_6");
    ta_guard(23, 0, 0, 0, "PSI_PATH_TEMPLE_8");
    ta_smalltalk(0, 0, 1, 0, "PSI_SWAMP_6");
    ta_guard(1, 0, 2, 0, "PSI_PATH_TEMPLE_8");
    ta_smalltalk(2, 0, 3, 0, "PSI_SWAMP_6");
    ta_guard(3, 0, 4, 0, "PSI_PATH_TEMPLE_8");
    ta_smalltalk(4, 0, 5, 0, "PSI_SWAMP_6");
    ta_guard(5, 0, 6, 0, "PSI_PATH_TEMPLE_8");
};

instance tpl_1430_templer(npc_default) {
    name = name_templer;
    npctype = npctype_guard;
    guild = gil_tpl;
    level = 17;
    voice = 8;
    id = 1430;
    attribute[atr_strength] /*4*/ = 85;
    attribute[atr_dexterity] /*5*/ = 65;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 244;
    attribute[atr_hitpoints] /*0*/ = 244;
    mdl_setvisual(tpl_1430_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1430_templer, "Humans_Militia.mds");
    mdl_setvisualbody(tpl_1430_templer, "hum_body_Naked0", 0, 1, "Hum_Head_Bald", 59, 1, tpl_armor_h /*4143*/);
    b_scale(tpl_1430_templer);
    mdl_setmodelfatness(tpl_1430_templer, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1430_templer, npc_talent_2h, 1);
    createinvitem(tpl_1430_templer, itfosoup);
    createinvitem(tpl_1430_templer, itmijoint_1);
    equipitem(tpl_1430_templer, itmw_2h_sword_light_02 /*4434*/);
    daily_routine = rtn_start_1430;
};

func void rtn_start_1430() {
    ta_guardpassage(21, 0, 8, 0, "PSI_TEMPLE_GUARD_02");
    ta_guardpassage(8, 0, 21, 0, "PSI_TEMPLE_GUARD_02");
};

instance tpl_1431_templer(npc_default) {
    name = name_templer;
    npctype = npctype_guard;
    guild = gil_tpl;
    level = 12;
    voice = 13;
    id = 1431;
    attribute[atr_strength] /*4*/ = 45;
    attribute[atr_dexterity] /*5*/ = 25;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 184;
    attribute[atr_hitpoints] /*0*/ = 184;
    mdl_setvisual(tpl_1431_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1431_templer, "Humans_Militia.mds");
    mdl_setvisualbody(tpl_1431_templer, "hum_body_Naked0", 1, 0, "Hum_Head_Bald", 15, 1, tpl_armor_h /*4143*/);
    b_scale(tpl_1431_templer);
    mdl_setmodelfatness(tpl_1431_templer, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1431_templer, npc_talent_2h, 1);
    createinvitem(tpl_1431_templer, itfosoup);
    createinvitem(tpl_1431_templer, itmijoint_1);
    equipitem(tpl_1431_templer, itmw_2h_sword_light_02 /*4434*/);
    daily_routine = rtn_start_1431;
};

func void rtn_start_1431() {
    ta_guardpassage(21, 0, 8, 0, "PSI_TEMPLE_GUARD_03");
    ta_guardpassage(8, 0, 21, 0, "PSI_TEMPLE_GUARD_03");
};

instance tpl_1432_templer(npc_default) {
    name = name_templer;
    npctype = npctype_guard;
    guild = gil_tpl;
    level = 17;
    voice = 8;
    id = 1432;
    attribute[atr_strength] /*4*/ = 85;
    attribute[atr_dexterity] /*5*/ = 65;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 244;
    attribute[atr_hitpoints] /*0*/ = 244;
    mdl_setvisual(tpl_1432_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1432_templer, "Humans_Militia.mds");
    mdl_setvisualbody(tpl_1432_templer, "hum_body_Naked0", 1, 1, "Hum_Head_Psionic", 59, 2, tpl_armor_l /*4141*/);
    b_scale(tpl_1432_templer);
    mdl_setmodelfatness(tpl_1432_templer, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1432_templer, npc_talent_2h, 1);
    createinvitem(tpl_1432_templer, itfosoup);
    createinvitem(tpl_1432_templer, itmijoint_1);
    equipitem(tpl_1432_templer, itmw_2h_sword_light_02 /*4434*/);
    daily_routine = rtn_start_1432;
};

func void rtn_start_1432() {
    ta_guardpassage(21, 0, 8, 0, "PSI_TEMPLE_GUARD_04");
    ta_guardpassage(8, 0, 21, 0, "PSI_TEMPLE_GUARD_04");
};

func void rtn_prepareritual_1432() {
    ta_guardpassage(21, 0, 8, 0, "PSI_TEMPLE_GUARD_04");
    ta_guardpassage(8, 0, 21, 0, "PSI_TEMPLE_GUARD_04");
};

func void rtn_omfull_1432() {
    ta_guardpassage(21, 0, 8, 0, "PSI_TEMPLE_GUARD_04");
    ta_guardpassage(8, 0, 21, 0, "PSI_TEMPLE_GUARD_04");
};

func void rtn_fmtaken_1432() {
    ta_guardpassage(21, 0, 8, 0, "PSI_TEMPLE_GUARD_04");
    ta_guardpassage(8, 0, 21, 0, "PSI_TEMPLE_GUARD_04");
};

func void rtn_orcassault_1432() {
    ta_guardpassage(21, 0, 8, 0, "PSI_TEMPLE_GUARD_04");
    ta_guardpassage(8, 0, 21, 0, "PSI_TEMPLE_GUARD_04");
};

instance tpl_1433_gornavid(npc_default) {
    name = "Ãîð Íà Âèä";
    npctype = npctype_main;
    guild = gil_tpl;
    level = 17;
    flags = npc_flag_immortal;
    voice = 13;
    id = 1433;
    attribute[atr_strength] /*4*/ = 85;
    attribute[atr_dexterity] /*5*/ = 65;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 244;
    attribute[atr_hitpoints] /*0*/ = 244;
    mdl_setvisual(tpl_1433_gornavid, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1433_gornavid, "Humans_Mage.mds");
    mdl_setvisualbody(tpl_1433_gornavid, "hum_body_Naked0", 1, 1, "Hum_Head_Psionic", 20, 1, tpl_armor_l /*4141*/);
    b_scale(tpl_1433_gornavid);
    mdl_setmodelfatness(tpl_1433_gornavid, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1433_gornavid, npc_talent_2h, 1);
    createinvitem(tpl_1433_gornavid, itfosoup);
    createinvitem(tpl_1433_gornavid, itmijoint_1);
    equipitem(tpl_1433_gornavid, itmw_2h_sword_light_01 /*4433*/);
    daily_routine = rtn_start_1433;
};

func void rtn_start_1433() {
    ta_sitaround(0, 0, 12, 0, "OM_CAVE1_81");
    ta_sitaround(12, 0, 24, 0, "OM_CAVE1_81");
};

func void rtn_gate_1433() {
    ta_guard(0, 0, 12, 0, "OM_CAVE3_21");
    ta_guard(12, 0, 24, 0, "OM_CAVE3_21");
};

instance tpl_1434_templer(npc_default) {
    name = name_templer;
    npctype = npctype_guard;
    guild = gil_tpl;
    level = 17;
    voice = 8;
    id = 1434;
    attribute[atr_strength] /*4*/ = 85;
    attribute[atr_dexterity] /*5*/ = 65;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 244;
    attribute[atr_hitpoints] /*0*/ = 244;
    mdl_setvisual(tpl_1434_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1434_templer, "Humans_Mage.mds");
    mdl_setvisualbody(tpl_1434_templer, "hum_body_Naked0", 1, 1, "Hum_Head_Bald", 65, 1, tpl_armor_l /*4141*/);
    b_scale(tpl_1434_templer);
    mdl_setmodelfatness(tpl_1434_templer, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1434_templer, npc_talent_2h, 1);
    createinvitem(tpl_1434_templer, itfosoup);
    createinvitem(tpl_1434_templer, itmijoint_1);
    equipitem(tpl_1434_templer, itmw_2h_sword_light_01 /*4433*/);
    daily_routine = rtn_start_1434;
};

func void rtn_start_1434() {
    ta_standaround(0, 0, 12, 0, "OM_CAVE1_85");
    ta_standaround(12, 0, 24, 0, "OM_CAVE1_85");
};

func void rtn_prepareritual_1434() {
    ta_standaround(0, 0, 12, 0, "OM_CAVE1_85");
    ta_standaround(12, 0, 24, 0, "OM_CAVE1_85");
};

instance tpl_1435_templer(npc_default) {
    name = name_templer;
    npctype = npctype_guard;
    level = 17;
    voice = 13;
    id = 1435;
    attribute[atr_strength] /*4*/ = 85;
    attribute[atr_dexterity] /*5*/ = 65;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 244;
    attribute[atr_hitpoints] /*0*/ = 244;
    mdl_setvisual(tpl_1435_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1435_templer, "Humans_Mage.mds");
    mdl_setvisualbody(tpl_1435_templer, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 60, 1, tpl_armor_l /*4141*/);
    b_scale(tpl_1435_templer);
    mdl_setmodelfatness(tpl_1435_templer, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1435_templer, npc_talent_2h, 1);
    createinvitem(tpl_1435_templer, itfosoup);
    createinvitem(tpl_1435_templer, itmijoint_1);
    equipitem(tpl_1435_templer, itmw_2h_sword_light_01 /*4433*/);
    daily_routine = rtn_start_1435;
};

func void rtn_start_1435() {
    ta_mchunting(0, 0, 12, 0, "OM_031");
    ta_mchunting(12, 0, 24, 0, "OM_031");
};

func void rtn_prepareritual_1435() {
    ta_mchunting(0, 0, 12, 0, "OM_031");
    ta_mchunting(12, 0, 24, 0, "OM_031");
};

instance tpl_1436_templer(npc_default) {
    name = "Ñòðàæ";
    npctype = npctype_main;
    guild = gil_tpl;
    level = 17;
    flags = 0;
    voice = 13;
    id = 1436;
    attribute[atr_strength] /*4*/ = 85;
    attribute[atr_dexterity] /*5*/ = 65;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 244;
    attribute[atr_hitpoints] /*0*/ = 244;
    mdl_setvisual(tpl_1436_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1436_templer, "Humans_Mage.mds");
    mdl_setvisualbody(tpl_1436_templer, "hum_body_Naked0", 1, 1, "Hum_Head_Psionic", 65, 0, tpl_armor_m /*4142*/);
    b_scale(tpl_1436_templer);
    mdl_setmodelfatness(tpl_1436_templer, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1436_templer, npc_talent_2h, 1);
    createinvitem(tpl_1436_templer, itfosoup);
    createinvitem(tpl_1436_templer, itmijoint_1);
    equipitem(tpl_1436_templer, itmw_2h_sword_light_02 /*4434*/);
    daily_routine = rtn_start_1436;
};

func void rtn_start_1436() {
    ta_smalltalk(0, 0, 12, 0, "OM_CAVE1_56");
    ta_smalltalk(12, 0, 24, 0, "OM_CAVE1_56");
};

instance tpl_1437_templer(npc_default) {
    name = "Ñòðàæ";
    npctype = npctype_main;
    guild = gil_tpl;
    level = 17;
    flags = 0;
    voice = 13;
    id = 1437;
    attribute[atr_strength] /*4*/ = 85;
    attribute[atr_dexterity] /*5*/ = 65;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 244;
    attribute[atr_hitpoints] /*0*/ = 244;
    mdl_setvisual(tpl_1437_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1437_templer, "Humans_Mage.mds");
    mdl_setvisualbody(tpl_1437_templer, "hum_body_Naked0", 1, 1, "Hum_Head_Bald", 65, 1, tpl_armor_l /*4141*/);
    b_scale(tpl_1437_templer);
    mdl_setmodelfatness(tpl_1437_templer, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1437_templer, npc_talent_2h, 1);
    createinvitem(tpl_1437_templer, itfosoup);
    createinvitem(tpl_1437_templer, itmijoint_1);
    equipitem(tpl_1437_templer, itmw_2h_sword_light_01 /*4433*/);
    daily_routine = rtn_start_1437;
};

func void rtn_start_1437() {
    ta_sitaround(0, 0, 12, 0, "OM_207");
    ta_sitaround(12, 0, 24, 0, "OM_207");
};

instance tpl_1438_templer(npc_default) {
    name = "Ñòðàæ";
    npctype = npctype_main;
    guild = gil_tpl;
    level = 17;
    flags = 0;
    voice = 13;
    id = 1438;
    attribute[atr_strength] /*4*/ = 85;
    attribute[atr_dexterity] /*5*/ = 65;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 244;
    attribute[atr_hitpoints] /*0*/ = 244;
    mdl_setvisual(tpl_1438_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1438_templer, "Humans_Mage.mds");
    mdl_setvisualbody(tpl_1438_templer, "hum_body_Naked0", 1, 1, "Hum_Head_Bald", 64, 4, tpl_armor_m /*4142*/);
    b_scale(tpl_1438_templer);
    mdl_setmodelfatness(tpl_1438_templer, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1438_templer, npc_talent_2h, 1);
    createinvitem(tpl_1438_templer, itfosoup);
    createinvitem(tpl_1438_templer, itmijoint_1);
    equipitem(tpl_1438_templer, itmw_2h_sword_light_01 /*4433*/);
    daily_routine = rtn_start_1438;
};

func void rtn_start_1438() {
    ta_standaround(0, 0, 12, 0, "OM_CAVE1_02");
    ta_standaround(12, 0, 24, 0, "OM_CAVE1_02");
};

instance tpl_1439_gornadrak(npc_default) {
    name = "Ãîð Íà Äðàê";
    npctype = npctype_main;
    guild = gil_tpl;
    level = 21;
    voice = 9;
    id = 1439;
    attribute[atr_strength] /*4*/ = 100;
    attribute[atr_dexterity] /*5*/ = 80;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 292;
    attribute[atr_hitpoints] /*0*/ = 292;
    mdl_setvisual(tpl_1439_gornadrak, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1439_gornadrak, "Humans_Mage.mds");
    mdl_setvisualbody(tpl_1439_gornadrak, "hum_body_Naked0", 1, 1, "Hum_Head_Bald", 63, 2, tpl_armor_l /*4141*/);
    b_scale(tpl_1439_gornadrak);
    mdl_setmodelfatness(tpl_1439_gornadrak, 0.0);
    fight_tactic = fai_human_master;
    npc_settalentskill(tpl_1439_gornadrak, npc_talent_2h, 2);
    createinvitem(tpl_1439_gornadrak, itfosoup);
    createinvitem(tpl_1439_gornadrak, itmijoint_1);
    equipitem(tpl_1439_gornadrak, itmw_2h_sword_light_04 /*4436*/);
    daily_routine = rtn_start_1439;
};

func void rtn_start_1439() {
    ta_smalltalk(6, 0, 14, 0, "PSI_WALK_05");
    ta_smalltalk(14, 0, 6, 0, "OW_OM_ENTRANCE02");
};

func void rtn_fmtaken_1439() {
    ta_smalltalk(6, 0, 14, 0, "PSI_WALK_05");
    ta_smalltalk(14, 0, 6, 0, "PSI_WALK_05");
};

instance tpl_1440_templer(npc_default) {
    name = name_templer;
    npctype = npctype_guard;
    guild = gil_tpl;
    level = 17;
    flags = 0;
    voice = 13;
    id = 1440;
    attribute[atr_strength] /*4*/ = 85;
    attribute[atr_dexterity] /*5*/ = 65;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 244;
    attribute[atr_hitpoints] /*0*/ = 244;
    mdl_setvisual(tpl_1440_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1440_templer, "Humans_Mage.mds");
    mdl_setvisualbody(tpl_1440_templer, "hum_body_Naked0", 1, 1, "Hum_Head_Psionic", 64, 1, tpl_armor_l /*4141*/);
    b_scale(tpl_1440_templer);
    mdl_setmodelfatness(tpl_1440_templer, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1440_templer, npc_talent_2h, 1);
    createinvitem(tpl_1440_templer, itfosoup);
    createinvitem(tpl_1440_templer, itmijoint_1);
    equipitem(tpl_1440_templer, itmw_2h_sword_light_01 /*4433*/);
    daily_routine = rtn_start_1440;
};

func void rtn_start_1440() {
    ta_smalltalk(6, 0, 14, 0, "PSI_SWAMP_MOVEMENT");
    ta_smalltalk(14, 0, 6, 0, "OW_OM_ENTRANCE02");
};

func void rtn_fmtaken_1440() {
    ta_smalltalk(6, 0, 14, 0, "PSI_SWAMP_MOVEMENT");
    ta_smalltalk(14, 0, 6, 0, "PSI_SWAMP_MOVEMENT");
};

instance tpl_1441_templer(npc_default) {
    name = name_templer;
    npctype = npctype_guard;
    guild = gil_tpl;
    level = 17;
    flags = 0;
    voice = 13;
    id = 1441;
    attribute[atr_strength] /*4*/ = 85;
    attribute[atr_dexterity] /*5*/ = 65;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 244;
    attribute[atr_hitpoints] /*0*/ = 244;
    mdl_setvisual(tpl_1441_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1441_templer, "Humans_Mage.mds");
    mdl_setvisualbody(tpl_1441_templer, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 60, 1, tpl_armor_l /*4141*/);
    b_scale(tpl_1441_templer);
    mdl_setmodelfatness(tpl_1441_templer, -1.0);
    fight_tactic = fai_human_strong;
    senses = (sense_see | sense_hear) | sense_smell;
    npc_settalentskill(tpl_1441_templer, npc_talent_2h, 1);
    createinvitem(tpl_1441_templer, itfosoup);
    createinvitem(tpl_1441_templer, itmijoint_1);
    equipitem(tpl_1441_templer, itmw_2h_sword_light_02 /*4434*/);
    daily_routine = rtn_start_1441;
};

func void rtn_start_1441() {
    ta_guardpassage(6, 0, 18, 0, "PSI_TEMPLE_LEFT_GUARD");
    ta_guardpassage(18, 0, 6, 0, "PSI_TEMPLE_LEFT_GUARD");
};

instance tpl_1442_templer(npc_default) {
    name = name_templer;
    npctype = npctype_guard;
    guild = gil_tpl;
    level = 17;
    voice = 13;
    id = 1442;
    attribute[atr_strength] /*4*/ = 85;
    attribute[atr_dexterity] /*5*/ = 65;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 244;
    attribute[atr_hitpoints] /*0*/ = 244;
    mdl_setvisual(tpl_1442_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1442_templer, "Humans_Mage.mds");
    mdl_setvisualbody(tpl_1442_templer, "hum_body_Naked0", 1, 2, "Hum_Head_Bald", 13, 1, tpl_armor_l /*4141*/);
    b_scale(tpl_1442_templer);
    mdl_setmodelfatness(tpl_1442_templer, -1.0);
    fight_tactic = fai_human_strong;
    senses = (sense_see | sense_hear) | sense_smell;
    npc_settalentskill(tpl_1442_templer, npc_talent_2h, 1);
    createinvitem(tpl_1442_templer, itfosoup);
    createinvitem(tpl_1442_templer, itmijoint_1);
    equipitem(tpl_1442_templer, itmw_2h_sword_light_01 /*4433*/);
    daily_routine = rtn_start_1442;
};

func void rtn_start_1442() {
    ta_guardpassage(6, 0, 18, 0, "PSI_TEMPLE_RIGHT_GUARD");
    ta_guardpassage(18, 0, 6, 0, "PSI_TEMPLE_RIGHT_GUARD");
};

instance tpl_1443_templer(npc_default) {
    name = name_templer;
    npctype = npctype_guard;
    guild = gil_tpl;
    level = 17;
    flags = 0;
    voice = 13;
    id = 1443;
    attribute[atr_strength] /*4*/ = 55;
    attribute[atr_dexterity] /*5*/ = 55;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 5;
    attribute[atr_hitpoints] /*0*/ = 5;
    mdl_setvisual(tpl_1443_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1443_templer, "Humans_Mage.mds");
    mdl_setvisualbody(tpl_1443_templer, "hum_body_Naked0", 1, 1, "Hum_Head_Bald", 64, 4, tpl_armor_l /*4141*/);
    b_scale(tpl_1443_templer);
    mdl_setmodelfatness(tpl_1443_templer, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1443_templer, npc_talent_2h, 1);
    createinvitem(tpl_1443_templer, itfosoup);
    createinvitem(tpl_1443_templer, itmijoint_1);
    createinvitem(tpl_1443_templer, itmi_stuff_oldcoin_02);
    equipitem(tpl_1443_templer, itmw_1h_sword_02 /*4402*/);
    daily_routine = rtn_start_1443;
};

func void rtn_start_1443() {
    ta_sittingduck(0, 0, 12, 0, "GRYD_025");
    ta_sittingduck(12, 0, 24, 0, "GRYD_025");
};

instance tpl_1444_templer(npc_default) {
    name = name_templer;
    npctype = npctype_guard;
    guild = gil_tpl;
    level = 17;
    flags = 0;
    voice = 13;
    id = 1444;
    attribute[atr_strength] /*4*/ = 55;
    attribute[atr_dexterity] /*5*/ = 55;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 5;
    attribute[atr_hitpoints] /*0*/ = 5;
    mdl_setvisual(tpl_1444_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1444_templer, "Humans_Mage.mds");
    mdl_setvisualbody(tpl_1444_templer, "hum_body_Naked0", 1, 1, "Hum_Head_Bald", 64, 4, tpl_armor_l /*4141*/);
    b_scale(tpl_1444_templer);
    mdl_setmodelfatness(tpl_1444_templer, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1444_templer, npc_talent_2h, 1);
    createinvitem(tpl_1444_templer, itfosoup);
    createinvitem(tpl_1444_templer, itmijoint_1);
    createinvitem(tpl_1444_templer, itmi_stuff_oldcoin_02);
    equipitem(tpl_1444_templer, itmw_1h_sword_04 /*4404*/);
    daily_routine = rtn_start_1444;
};

func void rtn_start_1444() {
    ta_sittingduck(0, 0, 12, 0, "GRYD_025");
    ta_sittingduck(12, 0, 24, 0, "GRYD_025");
};

instance tpl_1445_templer(npc_default) {
    name = name_templer;
    npctype = npctype_guard;
    guild = gil_tpl;
    level = 17;
    flags = 0;
    voice = 13;
    id = 1445;
    attribute[atr_strength] /*4*/ = 55;
    attribute[atr_dexterity] /*5*/ = 55;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 5;
    attribute[atr_hitpoints] /*0*/ = 5;
    mdl_setvisual(tpl_1445_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1445_templer, "Humans_Mage.mds");
    mdl_setvisualbody(tpl_1445_templer, "hum_body_Naked0", 1, 1, "Hum_Head_Bald", 64, 4, tpl_armor_l /*4141*/);
    b_scale(tpl_1445_templer);
    mdl_setmodelfatness(tpl_1445_templer, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1445_templer, npc_talent_2h, 1);
    createinvitem(tpl_1445_templer, itfosoup);
    createinvitem(tpl_1445_templer, itmijoint_1);
    createinvitem(tpl_1445_templer, itmi_stuff_oldcoin_02);
    equipitem(tpl_1445_templer, itmw_1h_sword_04 /*4404*/);
    daily_routine = rtn_start_1445;
};

func void rtn_start_1445() {
    ta_sittingduck(0, 0, 12, 0, "GRYD_016");
    ta_sittingduck(12, 0, 24, 0, "GRYD_016");
};

instance tpl_1446_templer(npc_default) {
    name = name_templer;
    npctype = npctype_guard;
    guild = gil_tpl;
    level = 17;
    flags = 0;
    voice = 13;
    id = 1446;
    attribute[atr_strength] /*4*/ = 55;
    attribute[atr_dexterity] /*5*/ = 55;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 5;
    attribute[atr_hitpoints] /*0*/ = 5;
    mdl_setvisual(tpl_1446_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1446_templer, "Humans_Mage.mds");
    mdl_setvisualbody(tpl_1446_templer, "hum_body_Naked0", 1, 1, "Hum_Head_Bald", 64, 4, tpl_armor_l /*4141*/);
    b_scale(tpl_1446_templer);
    mdl_setmodelfatness(tpl_1446_templer, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1446_templer, npc_talent_2h, 1);
    createinvitem(tpl_1446_templer, itfosoup);
    createinvitem(tpl_1446_templer, itmijoint_1);
    createinvitem(tpl_1446_templer, itmi_stuff_oldcoin_02);
    equipitem(tpl_1446_templer, itmw_1h_sword_05 /*4405*/);
    daily_routine = rtn_start_1446;
};

func void rtn_start_1446() {
    ta_sittingduck(0, 0, 12, 0, "GRYD_020");
    ta_sittingduck(12, 0, 24, 0, "GRYD_020");
};

instance tpl_1447_templer(npc_default) {
    name = name_madtemplar;
    npctype = npctype_guard;
    guild = gil_gur;
    level = 50;
    voice = 8;
    id = 1447;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 65;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 250;
    attribute[atr_hitpoints] /*0*/ = 250;
    protection[prot_blunt] /*1*/ = 90;
    protection[prot_edge] /*2*/ = 90;
    protection[prot_point] /*6*/ = 140;
    protection[prot_fire] /*3*/ = 50;
    protection[prot_fly] /*4*/ = 80;
    protection[prot_magic] /*5*/ = 75;
    mdl_setvisual(tpl_1447_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1447_templer, "Humans_Mage.mds");
    mdl_setvisualbody(tpl_1447_templer, "hum_body_Naked0", 1, 1, "Hum_Head_Bald", 117, 2, tpl_armor_l /*4141*/);
    b_scale(tpl_1447_templer);
    mdl_setmodelfatness(tpl_1447_templer, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1447_templer, npc_talent_2h, 1);
    createinvitem(tpl_1447_templer, itmw_2h_sword_light_01);
    createinvitem(tpl_1447_templer, itfosoup);
    createinvitem(tpl_1447_templer, itmijoint_1);
    createinvitem(tpl_1447_templer, itfo_potion_health_02);
    daily_routine = rtn_ot_1447;
};

func void rtn_start_1447() {
    ta_hostileguard(0, 0, 21, 0, "TPL_408");
    ta_hostileguard(21, 0, 24, 0, "TPL_408");
};

func void rtn_ot_1447() {
    ta_hostileguard(0, 0, 21, 0, "TPL_139");
    ta_hostileguard(21, 0, 24, 0, "TPL_139");
};

instance tpl_1448_templer(npc_default) {
    name = name_madtemplar;
    npctype = npctype_guard;
    guild = gil_gur;
    level = 50;
    voice = 8;
    id = 1448;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 65;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 250;
    attribute[atr_hitpoints] /*0*/ = 250;
    protection[prot_blunt] /*1*/ = 90;
    protection[prot_edge] /*2*/ = 90;
    protection[prot_point] /*6*/ = 140;
    protection[prot_fire] /*3*/ = 50;
    protection[prot_fly] /*4*/ = 80;
    protection[prot_magic] /*5*/ = 75;
    mdl_setvisual(tpl_1448_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1448_templer, "Humans_Mage.mds");
    mdl_setvisualbody(tpl_1448_templer, "hum_body_Naked0", 1, 1, "Hum_Head_Bald", 117, 2, tpl_armor_l /*4141*/);
    b_scale(tpl_1448_templer);
    mdl_setmodelfatness(tpl_1448_templer, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1448_templer, npc_talent_2h, 1);
    createinvitem(tpl_1448_templer, itmw_2h_sword_light_02);
    createinvitem(tpl_1448_templer, itfosoup);
    createinvitem(tpl_1448_templer, itmijoint_1);
    createinvitem(tpl_1448_templer, itfo_potion_health_02);
    daily_routine = rtn_ot_1448;
};

func void rtn_start_1448() {
    ta_hostileguard(0, 0, 8, 0, "TPL_408");
    ta_hostileguard(8, 0, 24, 0, "TPL_408");
};

func void rtn_ot_1448() {
    ta_hostileguard(0, 0, 8, 0, "TPL_152");
    ta_hostileguard(8, 0, 24, 0, "TPL_152");
};

instance tpl_1449_templer(npc_default) {
    name = name_madtemplar2;
    npctype = npctype_guard;
    guild = gil_gur;
    level = 100;
    voice = 8;
    id = 1449;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 65;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 250;
    attribute[atr_hitpoints] /*0*/ = 250;
    protection[prot_blunt] /*1*/ = 1000;
    protection[prot_edge] /*2*/ = 1000;
    protection[prot_point] /*6*/ = 1000;
    protection[prot_fire] /*3*/ = 80;
    protection[prot_fly] /*4*/ = 80;
    protection[prot_magic] /*5*/ = 70;
    mdl_setvisual(tpl_1449_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1449_templer, "Humans_Mage.mds");
    mdl_setvisualbody(tpl_1449_templer, "hum_body_Naked0", 1, 1, "Hum_Head_Bald", 117, 2, tpl_armor_l /*4141*/);
    b_scale(tpl_1449_templer);
    mdl_setmodelfatness(tpl_1449_templer, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1449_templer, npc_talent_2h, 1);
    createinvitem(tpl_1449_templer, itmw_2h_sword_light_02);
    createinvitem(tpl_1449_templer, itfosoup);
    createinvitem(tpl_1449_templer, itmijoint_1);
    createinvitem(tpl_1449_templer, itfo_potion_health_02);
    daily_routine = rtn_ot_1449;
};

func void rtn_start_1449() {
    ta_hostileguard(0, 0, 12, 0, "TPL_408");
    ta_hostileguard(12, 0, 24, 0, "TPL_408");
};

func void rtn_ot_1449() {
    ta_hostileguard(0, 0, 12, 0, "TPL_310");
    ta_hostileguard(12, 0, 24, 0, "TPL_310");
};

instance tpl_1450_templer(npc_default) {
    name = name_madtemplar2;
    npctype = npctype_guard;
    guild = gil_gur;
    level = 100;
    voice = 8;
    id = 1450;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 65;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 250;
    attribute[atr_hitpoints] /*0*/ = 250;
    protection[prot_blunt] /*1*/ = 1000;
    protection[prot_edge] /*2*/ = 1000;
    protection[prot_point] /*6*/ = 1000;
    protection[prot_fire] /*3*/ = 80;
    protection[prot_fly] /*4*/ = 80;
    protection[prot_magic] /*5*/ = 70;
    mdl_setvisual(tpl_1450_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1450_templer, "Humans_Mage.mds");
    mdl_setvisualbody(tpl_1450_templer, "hum_body_Naked0", 1, 1, "Hum_Head_Bald", 117, 2, tpl_armor_l /*4141*/);
    b_scale(tpl_1450_templer);
    mdl_setmodelfatness(tpl_1450_templer, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1450_templer, npc_talent_2h, 1);
    createinvitem(tpl_1450_templer, itmw_2h_sword_light_02);
    createinvitem(tpl_1450_templer, itfosoup);
    createinvitem(tpl_1450_templer, itmijoint_1);
    createinvitem(tpl_1450_templer, itfo_potion_health_02);
    daily_routine = rtn_ot_1450;
};

func void rtn_start_1450() {
    ta_hostileguard(0, 0, 8, 0, "TPL_408");
    ta_hostileguard(8, 0, 24, 0, "TPL_408");
};

func void rtn_ot_1450() {
    ta_hostileguard(0, 0, 8, 0, "TPL_348");
    ta_hostileguard(8, 0, 24, 0, "TPL_348");
};

instance tpl_1451_templer(npc_default) {
    name = name_madtemplar2;
    npctype = npctype_guard;
    guild = gil_gur;
    level = 100;
    voice = 8;
    id = 1451;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 65;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 250;
    attribute[atr_hitpoints] /*0*/ = 250;
    protection[prot_blunt] /*1*/ = 1000;
    protection[prot_edge] /*2*/ = 1000;
    protection[prot_point] /*6*/ = 1000;
    protection[prot_fire] /*3*/ = 80;
    protection[prot_fly] /*4*/ = 80;
    protection[prot_magic] /*5*/ = 70;
    mdl_setvisual(tpl_1451_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1451_templer, "Humans_Mage.mds");
    mdl_setvisualbody(tpl_1451_templer, "hum_body_Naked0", 1, 1, "Hum_Head_Bald", 117, 2, tpl_armor_l /*4141*/);
    b_scale(tpl_1451_templer);
    mdl_setmodelfatness(tpl_1451_templer, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1451_templer, npc_talent_2h, 1);
    createinvitem(tpl_1451_templer, itmw_2h_sword_light_02);
    createinvitem(tpl_1451_templer, itfosoup);
    createinvitem(tpl_1451_templer, itmijoint_1);
    createinvitem(tpl_1451_templer, itfo_potion_health_02);
    daily_routine = rtn_ot_1451;
};

func void rtn_start_1451() {
    ta_hostileguard(0, 0, 21, 0, "TPL_408");
    ta_hostileguard(21, 0, 24, 0, "TPL_408");
};

func void rtn_ot_1451() {
    ta_hostileguard(0, 0, 21, 0, "TPL_382");
    ta_hostileguard(21, 0, 24, 0, "TPL_382");
};

instance tpl_1452_templer(npc_default) {
    name = name_madtemplar2;
    npctype = npctype_guard;
    guild = gil_gur;
    level = 100;
    voice = 8;
    id = 1452;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 65;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 250;
    attribute[atr_hitpoints] /*0*/ = 250;
    protection[prot_blunt] /*1*/ = 1000;
    protection[prot_edge] /*2*/ = 1000;
    protection[prot_point] /*6*/ = 1000;
    protection[prot_fire] /*3*/ = 80;
    protection[prot_fly] /*4*/ = 80;
    protection[prot_magic] /*5*/ = 70;
    mdl_setvisual(tpl_1452_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1452_templer, "Humans_Mage.mds");
    mdl_setvisualbody(tpl_1452_templer, "hum_body_Naked0", 1, 1, "Hum_Head_Bald", 117, 2, tpl_armor_l /*4141*/);
    b_scale(tpl_1452_templer);
    mdl_setmodelfatness(tpl_1452_templer, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1452_templer, npc_talent_2h, 1);
    createinvitem(tpl_1452_templer, itmw_2h_sword_light_02);
    createinvitem(tpl_1452_templer, itfosoup);
    createinvitem(tpl_1452_templer, itmijoint_1);
    createinvitem(tpl_1452_templer, itfo_potion_health_02);
    daily_routine = rtn_ot_1452;
};

func void rtn_start_1452() {
    ta_hostileguard(8, 0, 22, 0, "TPL_408");
    ta_hostileguard(22, 0, 8, 0, "TPL_408");
};

func void rtn_ot_1452() {
    ta_hostileguard(8, 0, 22, 0, "TPL_379");
    ta_hostileguard(22, 0, 8, 0, "TPL_379");
};

instance tpl_1453_templer(npc_default) {
    name = name_madtemplar2;
    npctype = npctype_guard;
    guild = gil_gur;
    level = 100;
    voice = 8;
    id = 1453;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 65;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 250;
    attribute[atr_hitpoints] /*0*/ = 250;
    protection[prot_blunt] /*1*/ = 1000;
    protection[prot_edge] /*2*/ = 1000;
    protection[prot_point] /*6*/ = 1000;
    protection[prot_fire] /*3*/ = 80;
    protection[prot_fly] /*4*/ = 80;
    protection[prot_magic] /*5*/ = 70;
    mdl_setvisual(tpl_1453_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1453_templer, "Humans_Mage.mds");
    mdl_setvisualbody(tpl_1453_templer, "hum_body_Naked0", 1, 1, "Hum_Head_Bald", 117, 2, tpl_armor_l /*4141*/);
    b_scale(tpl_1453_templer);
    mdl_setmodelfatness(tpl_1453_templer, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1453_templer, npc_talent_2h, 1);
    createinvitem(tpl_1453_templer, itmw_2h_sword_light_02);
    createinvitem(tpl_1453_templer, itfosoup);
    createinvitem(tpl_1453_templer, itmijoint_1);
    createinvitem(tpl_1453_templer, itfo_potion_health_02);
    daily_routine = rtn_ot_1453;
};

func void rtn_start_1453() {
    ta_hostileguard(9, 0, 21, 0, "TPL_408");
    ta_hostileguard(21, 0, 9, 0, "TPL_408");
};

func void rtn_ot_1453() {
    ta_hostileguard(9, 0, 21, 0, "TPL_355");
    ta_hostileguard(21, 0, 9, 0, "TPL_355");
};

instance tpl_1454_templer(npc_default) {
    name = name_madtemplar2;
    npctype = npctype_guard;
    guild = gil_gur;
    level = 100;
    voice = 8;
    id = 1454;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 65;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 250;
    attribute[atr_hitpoints] /*0*/ = 250;
    protection[prot_blunt] /*1*/ = 1000;
    protection[prot_edge] /*2*/ = 1000;
    protection[prot_point] /*6*/ = 1000;
    protection[prot_fire] /*3*/ = 80;
    protection[prot_fly] /*4*/ = 80;
    protection[prot_magic] /*5*/ = 70;
    mdl_setvisual(tpl_1454_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1454_templer, "Humans_Mage.mds");
    mdl_setvisualbody(tpl_1454_templer, "hum_body_Naked0", 1, 1, "Hum_Head_Bald", 117, 2, tpl_armor_l /*4141*/);
    b_scale(tpl_1454_templer);
    mdl_setmodelfatness(tpl_1454_templer, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1454_templer, npc_talent_2h, 1);
    createinvitem(tpl_1454_templer, itmw_2h_sword_light_02);
    createinvitem(tpl_1454_templer, itfosoup);
    createinvitem(tpl_1454_templer, itmijoint_1);
    createinvitem(tpl_1454_templer, itfo_potion_health_02);
    daily_routine = rtn_ot_1454;
};

func void rtn_start_1454() {
    ta_hostileguard(9, 0, 21, 0, "TPL_408");
    ta_hostileguard(21, 0, 9, 0, "TPL_408");
};

func void rtn_ot_1454() {
    ta_hostileguard(9, 0, 21, 0, "TPL_327");
    ta_hostileguard(21, 0, 9, 0, "TPL_327");
};

instance tpl_1455_gorboba(npc_default) {
    name = "Ãîð Áîáà";
    npctype = npctype_main;
    guild = gil_gur;
    level = 50;
    voice = 8;
    id = 1455;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 65;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 250;
    attribute[atr_hitpoints] /*0*/ = 250;
    protection[prot_blunt] /*1*/ = 90;
    protection[prot_edge] /*2*/ = 90;
    protection[prot_point] /*6*/ = 140;
    protection[prot_fire] /*3*/ = 50;
    protection[prot_fly] /*4*/ = 80;
    protection[prot_magic] /*5*/ = 75;
    mdl_setvisual(tpl_1455_gorboba, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1455_gorboba, "Humans_Mage.mds");
    mdl_setvisualbody(tpl_1455_gorboba, "hum_body_Naked0", 1, 1, "Hum_Head_Bald", 117, 2, tpl_armor_l /*4141*/);
    b_scale(tpl_1455_gorboba);
    mdl_setmodelfatness(tpl_1455_gorboba, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1455_gorboba, npc_talent_2h, 1);
    createinvitem(tpl_1455_gorboba, itmw_2h_sword_light_02);
    createinvitem(tpl_1455_gorboba, itfosoup);
    createinvitem(tpl_1455_gorboba, itmijoint_1);
    createinvitem(tpl_1455_gorboba, itfo_potion_health_02);
    daily_routine = rtn_ot_1455;
};

func void rtn_start_1455() {
    ta_guard(9, 0, 21, 0, "TPL_408");
    ta_guard(21, 0, 9, 0, "TPL_408");
};

func void rtn_ot_1455() {
    ta_alignguard(9, 0, 21, 0, "TPL_110");
    ta_alignguard(21, 0, 9, 0, "TPL_110");
};

instance tpl_1455_gorbobaow(npc_default) {
    name = "Gor Boba";
    npctype = npctype_main;
    guild = gil_tpl;
    level = 50;
    flags = npc_flag_immortal;
    voice = 8;
    id = 14550;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 65;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 250;
    attribute[atr_hitpoints] /*0*/ = 250;
    protection[prot_blunt] /*1*/ = 90;
    protection[prot_edge] /*2*/ = 90;
    protection[prot_point] /*6*/ = 140;
    protection[prot_fire] /*3*/ = 50;
    protection[prot_fly] /*4*/ = 80;
    protection[prot_magic] /*5*/ = 75;
    mdl_setvisual(tpl_1455_gorbobaow, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1455_gorbobaow, "Humans_Mage.mds");
    mdl_setvisualbody(tpl_1455_gorbobaow, "hum_body_Naked0", 1, 1, "Hum_Head_Bald", 27, 2, tpl_armor_l /*4141*/);
    b_scale(tpl_1455_gorbobaow);
    mdl_setmodelfatness(tpl_1455_gorbobaow, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1455_gorbobaow, npc_talent_2h, 1);
    createinvitem(tpl_1455_gorbobaow, itmw_2h_sword_light_02);
    createinvitem(tpl_1455_gorbobaow, itfosoup);
    createinvitem(tpl_1455_gorbobaow, itmijoint_1);
    createinvitem(tpl_1455_gorbobaow, itfo_potion_health_02);
    daily_routine = rtn_start_14550;
};

func void rtn_start_14550() {
    ta_sleep(21, 10, 6, 0, "PSI_20_HUT_IN");
    ta_sitaround(6, 0, 21, 10, "PSI_20_HUT_IN");
};

func void rtn_flee_14550() {
    ta_stay(0, 0, 12, 0, "");
    ta_stay(12, 0, 24, 0, "");
};

instance tpl_1456_templer(npc_default) {
    name = name_madtemplar;
    npctype = npctype_guard;
    guild = gil_gur;
    level = 50;
    voice = 8;
    id = 1456;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 65;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 250;
    attribute[atr_hitpoints] /*0*/ = 250;
    protection[prot_blunt] /*1*/ = 90;
    protection[prot_edge] /*2*/ = 90;
    protection[prot_point] /*6*/ = 140;
    protection[prot_fire] /*3*/ = 50;
    protection[prot_fly] /*4*/ = 80;
    protection[prot_magic] /*5*/ = 75;
    mdl_setvisual(tpl_1456_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1456_templer, "Humans_Mage.mds");
    mdl_setvisualbody(tpl_1456_templer, "hum_body_Naked0", 1, 1, "Hum_Head_Bald", 117, 2, tpl_armor_l /*4141*/);
    b_scale(tpl_1456_templer);
    mdl_setmodelfatness(tpl_1456_templer, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1456_templer, npc_talent_2h, 1);
    createinvitem(tpl_1456_templer, itmw_2h_sword_light_02);
    createinvitem(tpl_1456_templer, itfosoup);
    createinvitem(tpl_1456_templer, itmijoint_1);
    createinvitem(tpl_1456_templer, itfo_potion_health_02);
    daily_routine = rtn_ot_1456;
};

func void rtn_start_1456() {
    ta_hostileguard(9, 0, 21, 0, "TPL_408");
    ta_hostileguard(21, 0, 9, 0, "TPL_408");
};

func void rtn_ot_1456() {
    ta_hostileguard(9, 0, 21, 0, "TPL_292");
    ta_hostileguard(21, 0, 9, 0, "TPL_292");
};

instance tpl_1457_templer(npc_default) {
    name = name_madtemplar;
    npctype = npctype_guard;
    guild = gil_gur;
    level = 50;
    voice = 8;
    id = 1457;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 65;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 250;
    attribute[atr_hitpoints] /*0*/ = 250;
    protection[prot_blunt] /*1*/ = 90;
    protection[prot_edge] /*2*/ = 90;
    protection[prot_point] /*6*/ = 140;
    protection[prot_fire] /*3*/ = 50;
    protection[prot_fly] /*4*/ = 80;
    protection[prot_magic] /*5*/ = 75;
    mdl_setvisual(tpl_1457_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1457_templer, "Humans_Mage.mds");
    mdl_setvisualbody(tpl_1457_templer, "hum_body_Naked0", 1, 1, "Hum_Head_Bald", 117, 2, tpl_armor_l /*4141*/);
    b_scale(tpl_1457_templer);
    mdl_setmodelfatness(tpl_1457_templer, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1457_templer, npc_talent_2h, 1);
    createinvitem(tpl_1457_templer, itmw_2h_sword_light_02);
    createinvitem(tpl_1457_templer, itfosoup);
    createinvitem(tpl_1457_templer, itmijoint_1);
    createinvitem(tpl_1457_templer, itfo_potion_health_02);
    daily_routine = rtn_ot_1457;
};

func void rtn_start_1457() {
    ta_hostileguard(9, 0, 21, 0, "TPL_408");
    ta_hostileguard(21, 0, 9, 0, "TPL_408");
};

func void rtn_ot_1457() {
    ta_hostileguard(9, 0, 21, 0, "TPL_266");
    ta_hostileguard(21, 0, 9, 0, "TPL_266");
};

instance tpl_1458_templer(npc_default) {
    name = name_madtemplar;
    npctype = npctype_guard;
    guild = gil_gur;
    level = 50;
    voice = 8;
    id = 1458;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 65;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 250;
    attribute[atr_hitpoints] /*0*/ = 250;
    protection[prot_blunt] /*1*/ = 90;
    protection[prot_edge] /*2*/ = 90;
    protection[prot_point] /*6*/ = 140;
    protection[prot_fire] /*3*/ = 50;
    protection[prot_fly] /*4*/ = 80;
    protection[prot_magic] /*5*/ = 75;
    mdl_setvisual(tpl_1458_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1458_templer, "Humans_Mage.mds");
    mdl_setvisualbody(tpl_1458_templer, "hum_body_Naked0", 1, 1, "Hum_Head_Bald", 117, 2, tpl_armor_l /*4141*/);
    b_scale(tpl_1458_templer);
    mdl_setmodelfatness(tpl_1458_templer, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1458_templer, npc_talent_2h, 1);
    createinvitem(tpl_1458_templer, itmw_2h_sword_light_02);
    createinvitem(tpl_1458_templer, itfosoup);
    createinvitem(tpl_1458_templer, itmijoint_1);
    createinvitem(tpl_1458_templer, itfo_potion_health_02);
    daily_routine = rtn_ot_1458;
};

func void rtn_start_1458() {
    ta_hostileguard(9, 0, 21, 0, "TPL_408");
    ta_hostileguard(21, 0, 9, 0, "TPL_408");
};

func void rtn_ot_1458() {
    ta_hostileguard(9, 0, 21, 0, "TPL_263");
    ta_hostileguard(21, 0, 9, 0, "TPL_263");
};

instance tpl_1459_templer(npc_default) {
    name = name_madtemplar;
    npctype = npctype_guard;
    guild = gil_gur;
    level = 50;
    voice = 8;
    id = 1459;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 65;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 250;
    attribute[atr_hitpoints] /*0*/ = 250;
    protection[prot_blunt] /*1*/ = 90;
    protection[prot_edge] /*2*/ = 90;
    protection[prot_point] /*6*/ = 140;
    protection[prot_fire] /*3*/ = 50;
    protection[prot_fly] /*4*/ = 80;
    protection[prot_magic] /*5*/ = 75;
    mdl_setvisual(tpl_1459_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1459_templer, "Humans_Mage.mds");
    mdl_setvisualbody(tpl_1459_templer, "hum_body_Naked0", 1, 1, "Hum_Head_Bald", 117, 2, tpl_armor_l /*4141*/);
    b_scale(tpl_1459_templer);
    mdl_setmodelfatness(tpl_1459_templer, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1459_templer, npc_talent_2h, 1);
    createinvitem(tpl_1459_templer, itmw_2h_sword_light_02);
    createinvitem(tpl_1459_templer, itfosoup);
    createinvitem(tpl_1459_templer, itmijoint_1);
    createinvitem(tpl_1459_templer, itfo_potion_health_02);
    daily_routine = rtn_ot_1459;
};

func void rtn_start_1459() {
    ta_hostileguard(9, 0, 21, 0, "TPL_408");
    ta_hostileguard(21, 0, 9, 0, "TPL_408");
};

func void rtn_ot_1459() {
    ta_hostileguard(9, 0, 21, 0, "TPL_259");
    ta_hostileguard(21, 0, 9, 0, "TPL_259");
};

instance tpl_1460_templer(npc_default) {
    name = name_madtemplar;
    npctype = npctype_guard;
    guild = gil_gur;
    level = 50;
    voice = 8;
    id = 1460;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 65;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 250;
    attribute[atr_hitpoints] /*0*/ = 250;
    protection[prot_blunt] /*1*/ = 90;
    protection[prot_edge] /*2*/ = 90;
    protection[prot_point] /*6*/ = 140;
    protection[prot_fire] /*3*/ = 50;
    protection[prot_fly] /*4*/ = 80;
    protection[prot_magic] /*5*/ = 75;
    mdl_setvisual(tpl_1460_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1460_templer, "Humans_Mage.mds");
    mdl_setvisualbody(tpl_1460_templer, "hum_body_Naked0", 1, 1, "Hum_Head_Bald", 117, 2, tpl_armor_l /*4141*/);
    b_scale(tpl_1460_templer);
    mdl_setmodelfatness(tpl_1460_templer, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1460_templer, npc_talent_2h, 1);
    createinvitem(tpl_1460_templer, itmw_2h_sword_light_02);
    createinvitem(tpl_1460_templer, itfosoup);
    createinvitem(tpl_1460_templer, itmijoint_1);
    createinvitem(tpl_1460_templer, itfo_potion_health_02);
    daily_routine = rtn_ot_1460;
};

func void rtn_start_1460() {
    ta_hostileguard(9, 0, 21, 0, "TPL_408");
    ta_hostileguard(21, 0, 9, 0, "TPL_408");
};

func void rtn_ot_1460() {
    ta_hostileguard(9, 0, 21, 0, "TPL_256");
    ta_hostileguard(21, 0, 9, 0, "TPL_256");
};

instance tpl_1461_templer(npc_default) {
    name = name_madtemplar2;
    npctype = npctype_guard;
    guild = gil_gur;
    level = 100;
    voice = 8;
    id = 1461;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 65;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 250;
    attribute[atr_hitpoints] /*0*/ = 250;
    protection[prot_blunt] /*1*/ = 1000;
    protection[prot_edge] /*2*/ = 1000;
    protection[prot_point] /*6*/ = 1000;
    protection[prot_fire] /*3*/ = 80;
    protection[prot_fly] /*4*/ = 80;
    protection[prot_magic] /*5*/ = 80;
    mdl_setvisual(tpl_1461_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1461_templer, "Humans_Mage.mds");
    mdl_setvisualbody(tpl_1461_templer, "hum_body_Naked0", 1, 1, "Hum_Head_Bald", 117, 2, tpl_armor_l /*4141*/);
    b_scale(tpl_1461_templer);
    mdl_setmodelfatness(tpl_1461_templer, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1461_templer, npc_talent_2h, 1);
    createinvitem(tpl_1461_templer, itmw_2h_sword_light_02);
    createinvitem(tpl_1461_templer, itfosoup);
    createinvitem(tpl_1461_templer, itmijoint_1);
    createinvitem(tpl_1461_templer, itfo_potion_health_02);
    daily_routine = rtn_ot_1461;
};

func void rtn_start_1461() {
    ta_hostileguard(9, 0, 21, 0, "TPL_408");
    ta_hostileguard(21, 0, 9, 0, "TPL_408");
};

func void rtn_ot_1461() {
    ta_hostileguard(9, 0, 21, 0, "TPL_149");
    ta_hostileguard(21, 0, 9, 0, "TPL_149");
};

instance tpl_1462_templer(npc_default) {
    name = name_madtemplar2;
    npctype = npctype_guard;
    guild = gil_gur;
    level = 100;
    voice = 8;
    id = 1462;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 65;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 250;
    attribute[atr_hitpoints] /*0*/ = 250;
    protection[prot_blunt] /*1*/ = 1000;
    protection[prot_edge] /*2*/ = 1000;
    protection[prot_point] /*6*/ = 1000;
    protection[prot_fire] /*3*/ = 80;
    protection[prot_fly] /*4*/ = 80;
    protection[prot_magic] /*5*/ = 80;
    mdl_setvisual(tpl_1462_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1462_templer, "Humans_Mage.mds");
    mdl_setvisualbody(tpl_1462_templer, "hum_body_Naked0", 1, 1, "Hum_Head_Bald", 117, 2, tpl_armor_l /*4141*/);
    b_scale(tpl_1462_templer);
    mdl_setmodelfatness(tpl_1462_templer, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1462_templer, npc_talent_2h, 1);
    createinvitem(tpl_1462_templer, itmw_2h_sword_light_02);
    createinvitem(tpl_1462_templer, itfosoup);
    createinvitem(tpl_1462_templer, itmijoint_1);
    createinvitem(tpl_1462_templer, itfo_potion_health_02);
    daily_routine = rtn_ot_1462;
};

func void rtn_start_1462() {
    ta_hostileguard(9, 0, 21, 0, "TPL_408");
    ta_hostileguard(21, 0, 9, 0, "TPL_408");
};

func void rtn_ot_1462() {
    ta_hostileguard(9, 0, 21, 0, "TPL_278");
    ta_hostileguard(21, 0, 9, 0, "TPL_278");
};

instance tpl_1463_templer(npc_default) {
    name = name_templer;
    npctype = npctype_guard;
    guild = gil_tpl;
    level = 17;
    flags = 0;
    voice = 13;
    id = 1463;
    attribute[atr_strength] /*4*/ = 55;
    attribute[atr_dexterity] /*5*/ = 55;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 5;
    attribute[atr_hitpoints] /*0*/ = 5;
    mdl_setvisual(tpl_1463_templer, "HUMANS.MDS");
    mdl_applyoverlaymds(tpl_1463_templer, "Humans_Mage.mds");
    mdl_setvisualbody(tpl_1463_templer, "hum_body_Naked0", 1, 1, "Hum_Head_Bald", 64, 4, tpl_armor_l /*4141*/);
    b_scale(tpl_1463_templer);
    mdl_setmodelfatness(tpl_1463_templer, -1.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(tpl_1463_templer, npc_talent_2h, 1);
    createinvitem(tpl_1463_templer, itfosoup);
    createinvitem(tpl_1463_templer, itmijoint_1);
    equipitem(tpl_1463_templer, itmw_1h_sword_02 /*4402*/);
    daily_routine = rtn_start_1463;
};

func void rtn_start_1463() {
    ta_sittingduck(0, 0, 12, 0, "OW_PATH_198_ORCGRAVEYARD8");
    ta_sittingduck(12, 0, 24, 0, "OW_PATH_198_ORCGRAVEYARD8");
};

instance vlk_5001_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_mine_ambient;
    guild = gil_vlk;
    level = 3;
    voice = 1;
    id = 5001;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(vlk_5001_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_5001_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_5001_buddler, "hum_body_Naked0", 3, 1, "Hum_Head_Bald", 70, 1, -1);
    b_scale(vlk_5001_buddler);
    mdl_setmodelfatness(vlk_5001_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_5001_buddler, itfoapple);
    equipitem(vlk_5001_buddler, itmw_1h_club_01 /*4377*/);
    daily_routine = rtn_fmstart_5001;
};

func void rtn_fmstart_5001() {
    ta_pickore(0, 0, 23, 0, "FM_89");
    ta_pickore(23, 0, 24, 0, "FM_89");
};

instance vlk_5002_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_mine_ambient;
    guild = gil_vlk;
    level = 3;
    voice = 3;
    id = 5002;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(vlk_5002_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_5002_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_5002_buddler, "hum_body_Naked0", 2, 1, "Hum_Head_Bald", 69, 3, -1);
    b_scale(vlk_5002_buddler);
    mdl_setmodelfatness(vlk_5002_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_5002_buddler, itfoapple);
    equipitem(vlk_5002_buddler, itmw_1h_club_01 /*4377*/);
    daily_routine = rtn_fmstart_5002;
};

func void rtn_fmstart_5002() {
    ta_pickore(0, 0, 23, 0, "FM_105");
    ta_pickore(23, 0, 24, 0, "FM_105");
};

instance vlk_5003_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_mine_ambient;
    guild = gil_vlk;
    level = 3;
    voice = 1;
    id = itwr_book_circle_02 /*5003*/;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(vlk_5003_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_5003_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_5003_buddler, "hum_body_Naked0", 3, 1, "Hum_Head_Fighter", 67, 1, -1);
    b_scale(vlk_5003_buddler);
    mdl_setmodelfatness(vlk_5003_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_5003_buddler, itfoapple);
    equipitem(vlk_5003_buddler, itmw_1h_club_01 /*4377*/);
    daily_routine = rtn_fmstart_5003;
};

func void rtn_fmstart_5003() {
    ta_pickore(0, 0, 23, 0, "FM_103");
    ta_pickore(23, 0, 24, 0, "FM_103");
};

instance vlk_5004_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_mine_ambient;
    guild = gil_vlk;
    level = 3;
    voice = 3;
    id = 5004;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(vlk_5004_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_5004_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_5004_buddler, "hum_body_Naked0", 2, 1, "Hum_Head_Bald", 68, 1, vlk_armor_l /*4121*/);
    b_scale(vlk_5004_buddler);
    mdl_setmodelfatness(vlk_5004_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_5004_buddler, itmwpickaxe);
    createinvitem(vlk_5004_buddler, itfoloaf);
    createinvitem(vlk_5004_buddler, itfobeer);
    createinvitem(vlk_5004_buddler, itlstorch);
    equipitem(vlk_5004_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_fmstart_5004;
};

func void rtn_fmstart_5004() {
    ta_pickore(0, 0, 23, 0, "FM_102");
    ta_pickore(23, 0, 24, 0, "FM_102");
};

instance vlk_5005_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_mine_ambient;
    guild = gil_vlk;
    level = 3;
    voice = 1;
    id = 5005;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(vlk_5005_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_5005_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_5005_buddler, "hum_body_Naked0", 3, 1, "Hum_Head_Bald", 67, 1, vlk_armor_l /*4121*/);
    b_scale(vlk_5005_buddler);
    mdl_setmodelfatness(vlk_5005_buddler, 0.0);
    fight_tactic = fai_human_coward;
    npc_settalentskill(vlk_5005_buddler, npc_talent_1h, 1);
    createinvitem(vlk_5005_buddler, itmwpickaxe);
    createinvitem(vlk_5005_buddler, itfoloaf);
    createinvitem(vlk_5005_buddler, itfobeer);
    createinvitem(vlk_5005_buddler, itlstorch);
    equipitem(vlk_5005_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_fmstart_5005;
};

func void rtn_fmstart_5005() {
    ta_minebellows(0, 0, 23, 0, "FM_159");
    ta_minebellows(23, 0, 24, 0, "FM_159");
};

instance vlk_5006_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_mine_ambient;
    guild = gil_vlk;
    level = 3;
    voice = 2;
    id = 5006;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(vlk_5006_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_5006_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_5006_buddler, "hum_body_Naked0", 2, 1, "Hum_Head_FatBald", 74, 1, vlk_armor_l /*4121*/);
    b_scale(vlk_5006_buddler);
    mdl_setmodelfatness(vlk_5006_buddler, 0.0);
    fight_tactic = fai_human_coward;
    npc_settalentskill(vlk_5006_buddler, npc_talent_1h, 1);
    createinvitem(vlk_5006_buddler, itmwpickaxe);
    createinvitem(vlk_5006_buddler, itfoloaf);
    createinvitem(vlk_5006_buddler, itfobeer);
    createinvitem(vlk_5006_buddler, itlstorch);
    equipitem(vlk_5006_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_fmstart_5006;
};

func void rtn_fmstart_5006() {
    ta_pickore(0, 0, 23, 0, "FM_136");
    ta_pickore(23, 0, 24, 0, "FM_136");
};

instance vlk_5007_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_mine_ambient;
    guild = gil_vlk;
    level = 3;
    voice = 3;
    id = 5007;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(vlk_5007_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_5007_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_5007_buddler, "hum_body_Naked0", 3, 1, "Hum_Head_Fighter", 70, 3, vlk_armor_l /*4121*/);
    b_scale(vlk_5007_buddler);
    mdl_setmodelfatness(vlk_5007_buddler, 0.0);
    fight_tactic = fai_human_coward;
    npc_settalentskill(vlk_5007_buddler, npc_talent_1h, 1);
    createinvitem(vlk_5007_buddler, itmwpickaxe);
    createinvitem(vlk_5007_buddler, itfoloaf);
    createinvitem(vlk_5007_buddler, itfobeer);
    createinvitem(vlk_5007_buddler, itlstorch);
    equipitem(vlk_5007_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_fmstart_5007;
};

func void rtn_fmstart_5007() {
    ta_pickore(0, 0, 23, 0, "FM_88");
    ta_pickore(23, 0, 24, 0, "FM_88");
};

instance vlk_501_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_ambient;
    guild = gil_vlk;
    level = 2;
    voice = 1;
    id = 501;
    attribute[atr_strength] /*4*/ = 13;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 64;
    attribute[atr_hitpoints] /*0*/ = 64;
    mdl_setvisual(vlk_501_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_501_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_501_buddler, "hum_body_Naked0", 3, 1, "Hum_Head_FatBald", 67, 1, vlk_armor_m /*4122*/);
    b_scale(vlk_501_buddler);
    mdl_setmodelfatness(vlk_501_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_501_buddler, itfobeer);
    createinvitem(vlk_501_buddler, itlstorch);
    equipitem(vlk_501_buddler, itmwpickaxe /*4380*/);
    daily_routine = rtn_start_501;
};

func void rtn_start_501() {
    ta_sleep(22, 0, 8, 0, "OCR_HUT_79");
    ta_smalltalk(8, 0, 22, 0, "OCR_OUTSIDE_HUT_79");
};

instance vlk_502_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_ambient;
    guild = gil_vlk;
    level = 2;
    voice = 4;
    id = 502;
    attribute[atr_strength] /*4*/ = 13;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 64;
    attribute[atr_hitpoints] /*0*/ = 64;
    mdl_setvisual(vlk_502_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_502_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_502_buddler, "hum_body_Naked0", 3, 1, "Hum_Head_Pony", 68, 4, vlk_armor_l /*4121*/);
    b_scale(vlk_502_buddler);
    mdl_setmodelfatness(vlk_502_buddler, -1.0);
    aivar[22] = true;
    fight_tactic = fai_human_coward;
    createinvitem(vlk_502_buddler, itmilute);
    createinvitem(vlk_502_buddler, itfo_potion_water_01);
    equipitem(vlk_502_buddler, itmw_1h_club_01 /*4377*/);
    daily_routine = rtn_start_502;
};

func void rtn_start_502() {
    ta_sleep(22, 0, 7, 0, "OCR_HUT_10");
    ta_cook(7, 0, 17, 0, "OCR_COOK_AT_HUT_10");
    ta_playtune(17, 0, 22, 0, "OCR_OUTSIDE_HUT_10");
};

instance vlk_503_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_ambient;
    guild = gil_vlk;
    level = 2;
    voice = 2;
    id = 503;
    attribute[atr_strength] /*4*/ = 13;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 64;
    attribute[atr_hitpoints] /*0*/ = 64;
    mdl_setvisual(vlk_503_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_503_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_503_buddler, "hum_body_Naked0", 2, 2, "Hum_Head_Bald", 0, 4, vlk_armor_m /*4122*/);
    b_scale(vlk_503_buddler);
    mdl_setmodelfatness(vlk_503_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_503_buddler, itfobeer);
    createinvitem(vlk_503_buddler, itlstorch);
    equipitem(vlk_503_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_503;
};

func void rtn_start_503() {
    ta_sleep(22, 45, 7, 0, "OCR_HUT_53");
    ta_sitaround(7, 0, 8, 0, "OCR_OUTSIDE_HUT_53");
    ta_standaround(8, 0, 11, 0, "OCR_OUTSIDE_HUT_53");
    ta_smalltalk(11, 0, 17, 0, "OCR_OUTSIDE_HUT_53");
    ta_standaround(17, 0, 22, 45, "OCR_OUTSIDE_HUT_53");
};

instance vlk_504_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_ambient;
    guild = gil_vlk;
    level = 2;
    voice = 2;
    id = 504;
    attribute[atr_strength] /*4*/ = 13;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 64;
    attribute[atr_hitpoints] /*0*/ = 64;
    mdl_setvisual(vlk_504_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_504_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_504_buddler, "hum_body_Naked0", 3, 1, "Hum_Head_Thief", 74, 1, vlk_armor_l /*4121*/);
    b_scale(vlk_504_buddler);
    mdl_setmodelfatness(vlk_504_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_504_buddler, itmwpickaxe);
    createinvitem(vlk_504_buddler, itfo_potion_water_01);
    createinvitem(vlk_504_buddler, itlstorch);
    equipitem(vlk_504_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_504;
};

func void rtn_start_504() {
    ta_sleep(22, 0, 6, 30, "OCR_HUT_12");
    ta_sitaround(6, 30, 10, 30, "OCR_HUT_12");
    ta_repairhut(10, 30, 17, 30, "OCR_OUTSIDE_HUT_12");
    ta_sitaround(17, 30, 22, 0, "OCR_HUT_12");
};

instance vlk_505_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_ambient;
    guild = gil_vlk;
    level = 2;
    voice = 2;
    id = 505;
    attribute[atr_strength] /*4*/ = 13;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 64;
    attribute[atr_hitpoints] /*0*/ = 64;
    mdl_setvisual(vlk_505_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_505_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_505_buddler, "hum_body_Naked0", 2, 2, "Hum_Head_FatBald", 0, 2, vlk_armor_l /*4121*/);
    b_scale(vlk_505_buddler);
    mdl_setmodelfatness(vlk_505_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_505_buddler, itmwpickaxe);
    createinvitem(vlk_505_buddler, itfoloaf);
    createinvitem(vlk_505_buddler, itlstorch);
    equipitem(vlk_505_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_505;
};

func void rtn_start_505() {
    ta_sleep(22, 0, 7, 0, "OCR_HUT_7");
    ta_smalltalk(7, 0, 11, 0, "OCR_OUTSIDE_HUT_7");
    ta_roastscavenger(11, 0, 20, 0, "OCR_COOK_AT_HUT_10");
    ta_smalltalk(20, 0, 22, 0, "OCR_OUTSIDE_HUT_7");
};

instance vlk_506_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_ambient;
    guild = gil_vlk;
    level = 2;
    voice = 3;
    id = 506;
    attribute[atr_strength] /*4*/ = 13;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 64;
    attribute[atr_hitpoints] /*0*/ = 64;
    mdl_setvisual(vlk_506_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_506_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_506_buddler, "hum_body_Naked0", 3, 1, "Hum_Head_Pony", 69, 1, vlk_armor_l /*4121*/);
    b_scale(vlk_506_buddler);
    mdl_setmodelfatness(vlk_506_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_506_buddler, itmwpickaxe);
    createinvitem(vlk_506_buddler, itfoloaf);
    createinvitem(vlk_506_buddler, itfobeer);
    equipitem(vlk_506_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_506;
};

func void rtn_start_506() {
    ta_sleep(23, 0, 6, 30, "OCR_HUT_15");
    ta_standaround(6, 30, 11, 0, "OCR_OUTSIDE_HUT_15");
    ta_repairhut(11, 0, 17, 0, "OCR_HUT_15");
    ta_sitcampfire(17, 0, 23, 0, "OCR_OUTSIDE_HUT_15");
};

instance vlk_507_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_ambient;
    guild = gil_vlk;
    level = 2;
    voice = 3;
    id = 507;
    attribute[atr_strength] /*4*/ = 13;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 64;
    attribute[atr_hitpoints] /*0*/ = 64;
    mdl_setvisual(vlk_507_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_507_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_507_buddler, "hum_body_Naked0", 2, 0, "Hum_Head_Thief", 16, 1, vlk_armor_l /*4121*/);
    b_scale(vlk_507_buddler);
    mdl_setmodelfatness(vlk_507_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_507_buddler, itmwpickaxe);
    createinvitem(vlk_507_buddler, itfoloaf);
    createinvitem(vlk_507_buddler, itfobeer);
    createinvitem(vlk_507_buddler, itlstorch);
    equipitem(vlk_507_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_507;
};

func void rtn_start_507() {
    ta_sleep(22, 30, 7, 15, "OCR_HUT_54");
    ta_standaround(7, 15, 11, 0, "OCR_OUTSIDE_HUT_54");
    ta_smalltalk(11, 0, 17, 0, "OCR_OUTSIDE_HUT_53");
    ta_standaround(17, 0, 22, 30, "OCR_OUTSIDE_HUT_54");
};

instance vlk_508_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_ambient;
    guild = gil_vlk;
    level = 2;
    voice = 1;
    id = 508;
    attribute[atr_strength] /*4*/ = 13;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 64;
    attribute[atr_hitpoints] /*0*/ = 64;
    mdl_setvisual(vlk_508_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_508_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_508_buddler, "hum_body_Naked0", 3, 0, "Hum_Head_FatBald", 0, 1, vlk_armor_l /*4121*/);
    b_scale(vlk_508_buddler);
    mdl_setmodelfatness(vlk_508_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_508_buddler, itmwpickaxe);
    createinvitem(vlk_508_buddler, itfoloaf);
    createinvitem(vlk_508_buddler, itfobeer);
    createinvitem(vlk_508_buddler, itlstorch);
    equipitem(vlk_508_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_508;
};

func void rtn_start_508() {
    ta_sleep(22, 30, 8, 0, "OCR_HUT_37");
    ta_standaround(8, 0, 15, 0, "OCR_TO_LADDER_TOP_01");
    ta_sleep(15, 0, 17, 0, "OCR_HUT_37");
    ta_sitcampfire(17, 0, 22, 30, "OCR_TO_LADDER_TOP_01");
};

instance vlk_509_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_ambient;
    guild = gil_vlk;
    level = 2;
    voice = 2;
    id = 509;
    attribute[atr_strength] /*4*/ = 13;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 64;
    attribute[atr_hitpoints] /*0*/ = 64;
    mdl_setvisual(vlk_509_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_509_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_509_buddler, "hum_body_Naked0", 2, 1, "Hum_Head_Thief", 73, 4, vlk_armor_m /*4122*/);
    b_scale(vlk_509_buddler);
    mdl_setmodelfatness(vlk_509_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_509_buddler, itmwpickaxe);
    createinvitem(vlk_509_buddler, itfobeer);
    createinvitem(vlk_509_buddler, itlstorch);
    equipitem(vlk_509_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_509;
};

func void rtn_start_509() {
    ta_sleep(23, 0, 8, 0, "OCR_HUT_56");
    ta_sitaround(8, 0, 23, 0, "OCR_OUTSIDE_HUT_56");
};

instance vlk_510_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_ambient;
    guild = gil_vlk;
    level = 2;
    voice = 3;
    id = 510;
    attribute[atr_strength] /*4*/ = 13;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 64;
    attribute[atr_hitpoints] /*0*/ = 64;
    mdl_setvisual(vlk_510_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_510_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_510_buddler, "hum_body_Naked0", 3, 2, "Hum_Head_Psionic", 0, 1, vlk_armor_l /*4121*/);
    b_scale(vlk_510_buddler);
    mdl_setmodelfatness(vlk_510_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_510_buddler, itmwpickaxe);
    createinvitem(vlk_510_buddler, itlstorch);
    equipitem(vlk_510_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_510;
};

func void rtn_start_510() {
    ta_sleep(22, 30, 8, 15, "OCR_HUT_28");
    ta_smalltalk(8, 15, 22, 30, "OCR_OUTSIDE_HUT_29");
};

instance vlk_511_herek(npc_default) {
    name = "Õåðåê";
    npctype = npctype_main;
    guild = gil_none;
    level = 2;
    voice = 1;
    id = 511;
    attribute[atr_strength] /*4*/ = 13;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 64;
    attribute[atr_hitpoints] /*0*/ = 64;
    mdl_setvisual(vlk_511_herek, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_511_herek, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_511_herek, "hum_body_Naked0", 2, 1, "Hum_Head_Pony", 105, 3, vlk_armor_l /*4121*/);
    b_scale(vlk_511_herek);
    mdl_setmodelfatness(vlk_511_herek, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_coward;
    createinvitem(vlk_511_herek, itmwpickaxe);
    createinvitem(vlk_511_herek, itmi_stuff_barbknife_01);
    createinvitem(vlk_511_herek, itlstorch);
    createinvitems(vlk_511_herek, itminugget, 4);
    equipitem(vlk_511_herek, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_511;
};

func void rtn_start_511() {
    ta_sleep(22, 0, 7, 0, "OCR_HUT_62");
    ta_boss(7, 0, 8, 0, "OCR_OUTSIDE_HUT_62");
    ta_smalltalk(8, 0, 12, 0, "OCR_OUTSIDE_HUT_63_SMALLTALK");
    ta_smith_sharp(12, 0, 17, 0, "OCR_OUTSIDE_HUT_63_SMALLTALK");
    ta_sitaround(17, 0, 22, 0, "OCR_OUTSIDE_HUT_62");
};

instance vlk_512_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_ambient;
    guild = gil_vlk;
    level = 2;
    voice = 1;
    id = 512;
    attribute[atr_strength] /*4*/ = 13;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 64;
    attribute[atr_hitpoints] /*0*/ = 64;
    mdl_setvisual(vlk_512_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_512_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_512_buddler, "hum_body_Naked0", 3, 0, "Hum_Head_Psionic", 16, 3, vlk_armor_l /*4121*/);
    b_scale(vlk_512_buddler);
    mdl_setmodelfatness(vlk_512_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_512_buddler, itmwpickaxe);
    createinvitem(vlk_512_buddler, itfoloaf);
    createinvitem(vlk_512_buddler, itlstorch);
    equipitem(vlk_512_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_512;
};

func void rtn_start_512() {
    ta_sleep(23, 0, 8, 0, "OCR_HUT_64");
    ta_smalltalk(8, 0, 12, 0, "OCR_OUTSIDE_HUT_63_SMALLTALK");
    ta_sitaround(12, 0, 16, 0, "OCR_OUTSIDE_HUT_63");
    ta_sitaround(16, 0, 23, 0, "OCR_OUTSIDE_HUT_64");
};

instance vlk_513_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_ambient;
    guild = gil_vlk;
    level = 2;
    voice = 3;
    id = 513;
    attribute[atr_strength] /*4*/ = 13;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 64;
    attribute[atr_hitpoints] /*0*/ = 64;
    mdl_setvisual(vlk_513_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_513_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_513_buddler, "hum_body_Naked0", 2, 1, "Hum_Head_Thief", 72, 2, vlk_armor_m /*4122*/);
    b_scale(vlk_513_buddler);
    mdl_setmodelfatness(vlk_513_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_513_buddler, itmwpickaxe);
    createinvitem(vlk_513_buddler, itfobeer);
    createinvitem(vlk_513_buddler, itlstorch);
    equipitem(vlk_513_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_513;
};

func void rtn_start_513() {
    ta_sleep(23, 0, 8, 0, "OCR_HUT_24");
    ta_smalltalk(8, 0, 17, 0, "OCR_OUTSIDE_HUT_24");
    ta_sitaround(17, 0, 19, 0, "OCR_OUTSIDE_ARENA_BENCH1");
    ta_arenaspectator(19, 0, 23, 0, "OCR_ARENA_05");
};

instance vlk_514_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_ambient;
    guild = gil_vlk;
    level = 2;
    voice = 3;
    id = 514;
    attribute[atr_strength] /*4*/ = 13;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 64;
    attribute[atr_hitpoints] /*0*/ = 64;
    mdl_setvisual(vlk_514_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_514_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_514_buddler, "hum_body_Naked0", 3, 1, "Hum_Head_Pony", 0, 2, vlk_armor_l /*4121*/);
    b_scale(vlk_514_buddler);
    mdl_setmodelfatness(vlk_514_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_514_buddler, itmwpickaxe);
    createinvitem(vlk_514_buddler, itfoloaf);
    createinvitem(vlk_514_buddler, itfobeer);
    createinvitem(vlk_514_buddler, itlstorch);
    equipitem(vlk_514_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_514;
};

func void rtn_start_514() {
    ta_sleep(23, 0, 8, 0, "OCR_HUT_17");
    ta_smalltalk(8, 0, 19, 0, "OCR_OUTSIDE_HUT_17");
    ta_arenaspectator(19, 0, 23, 0, "OCR_ARENA_09");
};

instance vlk_515_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_ambient;
    guild = gil_vlk;
    level = 2;
    voice = 2;
    id = 515;
    attribute[atr_strength] /*4*/ = 13;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 64;
    attribute[atr_hitpoints] /*0*/ = 64;
    mdl_setvisual(vlk_515_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_515_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_515_buddler, "hum_body_Naked0", 2, 2, "Hum_Head_FatBald", 0, 0, vlk_armor_l /*4121*/);
    b_scale(vlk_515_buddler);
    mdl_setmodelfatness(vlk_515_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_515_buddler, itmwpickaxe);
    createinvitem(vlk_515_buddler, itfoloaf);
    createinvitem(vlk_515_buddler, itfobeer);
    createinvitem(vlk_515_buddler, itlstorch);
    equipitem(vlk_515_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_515;
};

func void rtn_start_515() {
    ta_sleep(23, 0, 6, 15, "OCR_HUT_23");
    ta_smalltalk(8, 0, 17, 0, "OCR_OUTSIDE_HUT_24");
    ta_sitaround(17, 0, 19, 0, "OCR_HUT_23");
    ta_arenaspectator(19, 0, 23, 0, "OCR_ARENA_06");
};

instance vlk_516_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_ambient;
    guild = gil_vlk;
    level = 2;
    voice = 1;
    id = 516;
    attribute[atr_strength] /*4*/ = 13;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 64;
    attribute[atr_hitpoints] /*0*/ = 64;
    mdl_setvisual(vlk_516_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_516_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_516_buddler, "hum_body_Naked0", 3, 1, "Hum_Head_Thief", 71, 0, vlk_armor_m /*4122*/);
    b_scale(vlk_516_buddler);
    mdl_setmodelfatness(vlk_516_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_516_buddler, itmwpickaxe);
    createinvitem(vlk_516_buddler, itfobeer);
    createinvitem(vlk_516_buddler, itlstorch);
    equipitem(vlk_516_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_516;
};

func void rtn_start_516() {
    ta_sleep(22, 30, 8, 0, "OCR_HUT_48");
    ta_standaround(8, 0, 11, 0, "OCR_OUTSIDE_HUT_48");
    ta_smalltalk(11, 0, 17, 0, "OCR_OUTSIDE_HUT_47_SMALT1");
    ta_standaround(17, 0, 22, 30, "OCR_OUTSIDE_HUT_48");
};

instance vlk_517_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_ambient;
    guild = gil_vlk;
    level = 2;
    voice = 1;
    id = 517;
    attribute[atr_strength] /*4*/ = 13;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 64;
    attribute[atr_hitpoints] /*0*/ = 64;
    mdl_setvisual(vlk_517_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_517_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_517_buddler, "hum_body_Naked0", 2, 1, "Hum_Head_Pony", 0, 1, -1);
    b_scale(vlk_517_buddler);
    mdl_setmodelfatness(vlk_517_buddler, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_coward;
    npc_settalentskill(vlk_517_buddler, npc_talent_1h, 1);
    createinvitem(vlk_517_buddler, itfo_potion_water_01);
    createinvitem(vlk_517_buddler, itmi_stuff_barbknife_01);
    equipitem(vlk_517_buddler, itmw_1h_club_01 /*4377*/);
    daily_routine = rtn_start_517;
};

func void rtn_start_517() {
    ta_sleep(23, 30, 7, 0, "OCR_HUT_46");
    ta_smalltalk(7, 0, 11, 0, "OCR_OUTSIDE_HUT_47_SMALT2");
    ta_sitaround(11, 0, 13, 0, "OCR_OUTSIDE_MCAMP_01");
    ta_smalltalk(13, 0, 16, 0, "OCR_OUTSIDE_HUT_47_SMALT2");
    ta_sitaround(16, 0, 23, 30, "OCR_OUTSIDE_MCAMP_01");
};

instance vlk_518_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_mine_ambient;
    guild = gil_vlk;
    level = 2;
    voice = 3;
    id = 518;
    attribute[atr_strength] /*4*/ = 13;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 64;
    attribute[atr_hitpoints] /*0*/ = 64;
    mdl_setvisual(vlk_518_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_518_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_518_buddler, "hum_body_Naked0", 3, 1, "Hum_Head_Thief", 70, 2, -1);
    b_scale(vlk_518_buddler);
    mdl_setmodelfatness(vlk_518_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_518_buddler, itminugget);
    daily_routine = rtn_start_518;
};

func void rtn_start_518() {
    ta_pickore(0, 0, 12, 0, "OM_PICKORE_13");
    ta_pickore(12, 0, 24, 0, "OM_PICKORE_13");
};

instance vlk_519_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_ambient;
    guild = gil_vlk;
    level = 2;
    voice = 2;
    id = 519;
    attribute[atr_strength] /*4*/ = 13;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 64;
    attribute[atr_hitpoints] /*0*/ = 64;
    mdl_setvisual(vlk_519_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_519_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_519_buddler, "hum_body_Naked0", 2, 1, "Hum_Head_Thief", 69, 2, -1);
    b_scale(vlk_519_buddler);
    mdl_setmodelfatness(vlk_519_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_519_buddler, itfoapple);
    equipitem(vlk_519_buddler, itmw_1h_club_01 /*4377*/);
    daily_routine = rtn_start_519;
};

func void rtn_start_519() {
    ta_sleep(22, 0, 8, 0, "OCR_HUT_43");
    ta_sitaround(8, 0, 22, 0, "OCR_HUT_43");
};

instance vlk_520_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_main;
    guild = gil_vlk;
    level = 2;
    voice = 1;
    id = 520;
    attribute[atr_strength] /*4*/ = 13;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 64;
    attribute[atr_hitpoints] /*0*/ = 64;
    mdl_setvisual(vlk_520_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_520_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_520_buddler, "hum_body_Naked0", 3, 1, "Hum_Head_Thief", 68, 2, -1);
    b_scale(vlk_520_buddler);
    mdl_setmodelfatness(vlk_520_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_520_buddler, itfoapple);
    createinvitem(vlk_520_buddler, itmilute);
    equipitem(vlk_520_buddler, itmw_1h_club_01 /*4377*/);
    daily_routine = rtn_start_520;
};

func void rtn_start_520() {
    ta_sitcampfire(10, 0, 22, 0, "OC_ROUND_22_CF_1");
    ta_sitcampfire(10, 0, 22, 0, "OC_ROUND_22_CF_1");
};

instance vlk_521_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_ambient;
    guild = gil_vlk;
    level = 2;
    voice = 2;
    id = 521;
    attribute[atr_strength] /*4*/ = 13;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 64;
    attribute[atr_hitpoints] /*0*/ = 64;
    mdl_setvisual(vlk_521_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_521_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_521_buddler, "hum_body_Naked0", 2, 1, "Hum_Head_Thief", 67, 1, -1);
    b_scale(vlk_521_buddler);
    mdl_setmodelfatness(vlk_521_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_521_buddler, itfoapple);
    equipitem(vlk_521_buddler, itmw_1h_club_01 /*4377*/);
    daily_routine = rtn_start_521;
};

func void rtn_start_521() {
    ta_sleep(22, 30, 7, 0, "OCR_HUT_45");
    ta_smalltalk(7, 0, 11, 0, "OCR_OUTSIDE_HUT_47_SMALT2");
    ta_repairhut(11, 0, 13, 0, "OCR_OUTSIDE_HUT_45");
    ta_smalltalk(13, 0, 16, 0, "OCR_OUTSIDE_HUT_47_SMALT2");
    ta_playtune(16, 0, 22, 30, "OCR_OUTSIDE_HUT_48");
};

instance vlk_522_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_ambient;
    guild = gil_vlk;
    level = 2;
    voice = 3;
    id = 522;
    attribute[atr_strength] /*4*/ = 13;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 64;
    attribute[atr_hitpoints] /*0*/ = 64;
    mdl_setvisual(vlk_522_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_522_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_522_buddler, "hum_body_Naked0", 3, 1, "Hum_Head_Psionic", 67, 2, -1);
    b_scale(vlk_522_buddler);
    mdl_setmodelfatness(vlk_522_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_522_buddler, itfoapple);
    equipitem(vlk_522_buddler, itmw_1h_club_01 /*4377*/);
    daily_routine = rtn_start_522;
};

func void rtn_start_522() {
    ta_sleep(23, 0, 8, 0, "OCR_HUT_47");
    ta_sitaround(8, 0, 11, 0, "OCR_MARKETPLACE_HANGAROUND");
    ta_roastscavenger(11, 0, 17, 0, "OCR_OUTSIDE_HUT_55");
    ta_sitaround(17, 0, 23, 0, "OCR_MARKETPLACE_HANGAROUND");
};

instance vlk_523_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_ambient;
    guild = gil_vlk;
    level = 2;
    voice = 3;
    id = 523;
    attribute[atr_strength] /*4*/ = 13;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 64;
    attribute[atr_hitpoints] /*0*/ = 64;
    mdl_setvisual(vlk_523_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_523_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_523_buddler, "hum_body_Naked0", 3, 1, "Hum_Head_Pony", 0, 1, -1);
    b_scale(vlk_523_buddler);
    mdl_setmodelfatness(vlk_523_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_523_buddler, itfoapple);
    equipitem(vlk_523_buddler, itmw_1h_club_01 /*4377*/);
    daily_routine = rtn_start_523;
};

func void rtn_start_523() {
    ta_sleep(23, 0, 8, 0, "OCR_HUT_57");
    ta_stand(8, 0, 23, 0, "OCR_OUTSIDE_HUT_57");
};

instance vlk_524_dusty(npc_default) {
    name = "Äàñòè";
    npctype = npctype_friend;
    guild = gil_vlk;
    level = 10;
    voice = 3;
    id = 524;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 64;
    attribute[atr_hitpoints] /*0*/ = 64;
    mdl_setvisual(vlk_524_dusty, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_524_dusty, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_524_dusty, "hum_body_Naked0", 2, 1, "Hum_Head_Psionic", 68, 0, -1);
    b_scale(vlk_524_dusty);
    mdl_setmodelfatness(vlk_524_dusty, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_coward;
    createinvitem(vlk_524_dusty, itfo_potion_water_01);
    equipitem(vlk_524_dusty, itmw_1h_club_01 /*4377*/);
    daily_routine = rtn_start_524;
};

func void rtn_start_524() {
    ta_sleep(22, 0, 7, 0, "OCR_HUT_58");
    ta_sitaround(7, 0, 22, 0, "OCR_OUTSIDE_HUT_58");
};

func void rtn_follow_524() {
    ta_followpc(23, 0, 16, 0, "OCR_OUTSIDE_HUT_58");
    ta_followpc(16, 0, 23, 0, "OCR_OUTSIDE_HUT_58");
};

func void rtn_prepareritual_524() {
    ta_sleep(23, 0, 7, 45, "PSI_25_HUT_IN");
    ta_listen(7, 45, 23, 0, "PSI_PLATFORM_1");
};

instance vlk_525_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_mine_ambient;
    guild = gil_vlk;
    level = 2;
    voice = 2;
    id = 525;
    attribute[atr_strength] /*4*/ = 13;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 64;
    attribute[atr_hitpoints] /*0*/ = 64;
    mdl_setvisual(vlk_525_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_525_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_525_buddler, "hum_body_Naked0", 3, 1, "Hum_Head_Psionic", 69, 3, -1);
    b_scale(vlk_525_buddler);
    mdl_setmodelfatness(vlk_525_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_525_buddler, itfoapple);
    daily_routine = rtn_start_525;
};

func void rtn_start_525() {
    ta_pickore(0, 0, 12, 0, "OM_PICKORE_13");
    ta_pickore(12, 0, 24, 0, "OM_PICKORE_13");
};

instance vlk_526_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_ambient;
    guild = gil_vlk;
    level = 2;
    voice = 3;
    id = 526;
    attribute[atr_strength] /*4*/ = 13;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 64;
    attribute[atr_hitpoints] /*0*/ = 64;
    mdl_setvisual(vlk_526_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_526_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_526_buddler, "hum_body_Naked0", 2, 1, "Hum_Head_Pony", 74, 1, -1);
    b_scale(vlk_526_buddler);
    mdl_setmodelfatness(vlk_526_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_526_buddler, itfoapple);
    equipitem(vlk_526_buddler, itmw_1h_nailmace_01 /*4385*/);
    equipitem(vlk_526_buddler, itmw_1h_club_01 /*4377*/);
    daily_routine = rtn_start_526;
};

func void rtn_start_526() {
    ta_sleep(23, 30, 6, 30, "OCR_HUT_67");
    ta_boss(6, 30, 7, 30, "OCR_OUTSIDE_HUT_67");
    ta_standaround(7, 30, 17, 0, "OCR_CAMPFIRE_E_1_MOVEMENT");
    ta_sitaround(17, 0, 18, 0, "OCR_HUT_67");
    ta_sitcampfire(18, 0, 23, 30, "OCR_CAMPFIRE_E_1_MOVEMENT");
};

instance vlk_527_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_ambient;
    guild = gil_vlk;
    level = 2;
    voice = 3;
    id = 527;
    attribute[atr_strength] /*4*/ = 13;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 64;
    attribute[atr_hitpoints] /*0*/ = 64;
    mdl_setvisual(vlk_527_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_527_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_527_buddler, "hum_body_Naked0", 3, 1, "Hum_Head_Bald", 72, 4, vlk_armor_l /*4121*/);
    b_scale(vlk_527_buddler);
    mdl_setmodelfatness(vlk_527_buddler, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_coward;
    createinvitem(vlk_527_buddler, itmwpickaxe);
    createinvitem(vlk_527_buddler, itfoloaf);
    createinvitem(vlk_527_buddler, itfobeer);
    createinvitem(vlk_527_buddler, itlstorch);
    equipitem(vlk_527_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_527;
};

func void rtn_start_527() {
    ta_sleep(23, 15, 7, 0, "OCR_HUT_77");
    ta_boss(7, 0, 7, 30, "OCR_OUTSIDE_HUT_77");
    ta_washself(7, 30, 8, 30, "OCR_LAKE_1");
    ta_standaround(8, 30, 18, 0, "OCR_OUTSIDE_HUT_77");
    ta_sitcampfire(18, 0, 23, 0, "OCR_OUTSIDE_HUT_77");
};

instance vlk_528_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_ambient;
    guild = gil_vlk;
    level = 2;
    voice = 1;
    id = 528;
    attribute[atr_strength] /*4*/ = 13;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 64;
    attribute[atr_hitpoints] /*0*/ = 64;
    mdl_setvisual(vlk_528_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_528_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_528_buddler, "hum_body_Naked0", 2, 1, "Hum_Head_Bald", 68, 3, vlk_armor_l /*4121*/);
    b_scale(vlk_528_buddler);
    mdl_setmodelfatness(vlk_528_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_528_buddler, itmwpickaxe);
    createinvitem(vlk_528_buddler, itfoloaf);
    createinvitem(vlk_528_buddler, itfobeer);
    createinvitem(vlk_528_buddler, itlstorch);
    equipitem(vlk_528_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_528;
};

func void rtn_start_528() {
    ta_sleep(21, 0, 6, 0, "OCR_HUT_74");
    ta_smalltalk(7, 30, 12, 0, "OCR_OUTSIDE_HUT_74");
    ta_sitaround(12, 0, 21, 0, "OCR_OUTSIDE_HUT_74");
};

instance vlk_529_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_ambient;
    guild = gil_vlk;
    level = 2;
    voice = 2;
    id = 529;
    attribute[atr_strength] /*4*/ = 13;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 64;
    attribute[atr_hitpoints] /*0*/ = 64;
    mdl_setvisual(vlk_529_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_529_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_529_buddler, "hum_body_Naked0", 3, 1, "Hum_Head_Psionic", 71, 1, vlk_armor_l /*4121*/);
    b_scale(vlk_529_buddler);
    mdl_setmodelfatness(vlk_529_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_529_buddler, itmwpickaxe);
    equipitem(vlk_529_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_529;
};

func void rtn_start_529() {
    ta_sleep(22, 0, 6, 0, "OCR_HUT_69");
    ta_boss(6, 0, 6, 30, "OCR_OUTSIDE_HUT_69");
    ta_smalltalk(6, 30, 12, 0, "OCR_OUTSIDE_HUT_69");
    ta_stand(12, 0, 13, 0, "OCR_OUTSIDE_HUT_69");
    ta_smalltalk(13, 0, 16, 0, "OCR_OUTSIDE_HUT_69");
    ta_standaround(16, 0, 22, 0, "OCR_OUTSIDE_HUT_69");
};

instance vlk_530_guy(npc_default) {
    name = "Ãàé";
    npctype = npctype_main;
    guild = gil_vlk;
    level = 2;
    voice = 3;
    id = 530;
    attribute[atr_strength] /*4*/ = 13;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 64;
    attribute[atr_hitpoints] /*0*/ = 64;
    mdl_setvisual(vlk_530_guy, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_530_guy, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_530_guy, "hum_body_Naked0", 2, 1, "Hum_Head_Psionic", 72, 1, -1);
    b_scale(vlk_530_guy);
    mdl_setmodelfatness(vlk_530_guy, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_coward;
    createinvitem(vlk_530_guy, itfo_potion_water_01);
    createinvitems(vlk_530_guy, itminugget, 2);
    equipitem(vlk_530_guy, itmwpickaxe /*4380*/);
    daily_routine = rtn_start_530;
};

func void rtn_start_530() {
    ta_sleep(23, 0, 7, 0, "OCR_HUT_25");
    ta_sitaround(7, 0, 8, 0, "OCR_OUTSIDE_HUT_25");
    ta_smalltalk(8, 0, 17, 0, "OCR_OUTSIDE_HUT_27");
    ta_sitaround(17, 0, 19, 5, "OCR_OUTSIDE_ARENA_BENCH2");
    ta_arenaspectator(19, 5, 23, 0, "OCR_ARENA_07");
};

instance vlk_531_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_ambient;
    guild = gil_vlk;
    level = 3;
    voice = 3;
    id = 531;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(vlk_531_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_531_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_531_buddler, "hum_body_Naked0", 3, 1, "Hum_Head_Psionic", 73, 2, vlk_armor_l /*4121*/);
    b_scale(vlk_531_buddler);
    mdl_setmodelfatness(vlk_531_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_531_buddler, itmwpickaxe);
    createinvitem(vlk_531_buddler, itfoloaf);
    createinvitem(vlk_531_buddler, itfobeer);
    createinvitem(vlk_531_buddler, itlstorch);
    equipitem(vlk_531_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_531;
};

func void rtn_start_531() {
    ta_sleep(23, 0, 8, 0, "OCR_HUT_42");
    ta_smalltalk(8, 0, 22, 0, "OCR_TO_HUT_51_SMALLTALK");
};

instance vlk_532_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_ambient;
    guild = gil_vlk;
    level = 3;
    voice = 4;
    id = 532;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(vlk_532_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_532_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_532_buddler, "hum_body_Naked0", 2, 1, "Hum_Head_Psionic", 74, 3, vlk_armor_l /*4121*/);
    b_scale(vlk_532_buddler);
    mdl_setmodelfatness(vlk_532_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_532_buddler, itmwpickaxe);
    createinvitem(vlk_532_buddler, itfoloaf);
    createinvitem(vlk_532_buddler, itfobeer);
    createinvitem(vlk_532_buddler, itlstorch);
    equipitem(vlk_532_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_532;
};

func void rtn_start_532() {
    ta_sleep(23, 0, 7, 30, "OCR_HUT_39");
    ta_standaround(7, 30, 16, 0, "OCR_CAMPFIRE_H_2");
    ta_sitaround(16, 0, 17, 0, "OCR_HUT_39");
    ta_sitcampfire(17, 0, 23, 0, "OCR_CAMPFIRE_H_2");
};

instance vlk_533_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_ambient;
    guild = gil_vlk;
    level = 3;
    voice = 1;
    id = 533;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(vlk_533_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_533_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_533_buddler, "hum_body_Naked0", 3, 1, "Hum_Head_Fighter", 73, 1, vlk_armor_l /*4121*/);
    b_scale(vlk_533_buddler);
    mdl_setmodelfatness(vlk_533_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_533_buddler, itmwpickaxe);
    createinvitem(vlk_533_buddler, itfoloaf);
    createinvitem(vlk_533_buddler, itfobeer);
    equipitem(vlk_533_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_533;
};

func void rtn_start_533() {
    ta_sleep(22, 45, 6, 30, "OCR_HUT_61");
    ta_standaround(6, 30, 11, 0, "OCR_OUTSIDE_HUT_61");
    ta_cook(11, 0, 17, 0, "OCR_OUTSIDE_HUT_61");
    ta_sitcampfire(17, 0, 22, 45, "OCR_OUTSIDE_HUT_61");
};

instance vlk_534_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_main;
    guild = gil_vlk;
    level = 3;
    voice = 2;
    id = 534;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(vlk_534_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_534_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_534_buddler, "hum_body_Naked0", 2, 1, "Hum_Head_Bald", 74, 1, vlk_armor_l /*4121*/);
    b_scale(vlk_534_buddler);
    mdl_setmodelfatness(vlk_534_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_534_buddler, itmw_1h_nailmace_01);
    createinvitem(vlk_534_buddler, itmwpickaxe);
    createinvitem(vlk_534_buddler, itfoloaf);
    createinvitem(vlk_534_buddler, itfobeer);
    createinvitem(vlk_534_buddler, itlstorch);
    daily_routine = rtn_start_534;
};

func void rtn_start_534() {
    ta_sitcampfire(10, 0, 22, 0, "OC_ROUND_22_CF_2");
    ta_sitcampfire(10, 0, 22, 0, "OC_ROUND_22_CF_2");
};

instance vlk_535_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_ambient;
    guild = gil_vlk;
    level = 3;
    voice = 3;
    id = 535;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(vlk_535_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_535_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_535_buddler, "hum_body_Naked0", 3, 1, "Hum_Head_Bald", 73, 2, vlk_armor_l /*4121*/);
    b_scale(vlk_535_buddler);
    mdl_setmodelfatness(vlk_535_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_535_buddler, itmwpickaxe);
    createinvitem(vlk_535_buddler, itfoloaf);
    createinvitem(vlk_535_buddler, itfobeer);
    createinvitem(vlk_535_buddler, itlstorch);
    equipitem(vlk_535_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_535;
};

func void rtn_start_535() {
    ta_sleep(22, 30, 6, 45, "OCR_HUT_71");
    ta_sitaround(6, 45, 8, 0, "OCR_OUTSIDE_HUT_71");
    ta_standaround(8, 0, 11, 0, "OCR_OUTSIDE_HUT_71");
    ta_washself(11, 0, 11, 30, "OCR_WASH_2");
    ta_sitaround(11, 30, 16, 30, "OCR_OUTSIDE_HUT_71");
    ta_sitcampfire(16, 30, 22, 30, "OCR_OUTSIDE_HUT_71");
};

instance vlk_536_kyle(npc_default) {
    name = "Êàéëè";
    npctype = npctype_main;
    guild = gil_vlk;
    level = 3;
    voice = 10;
    id = 536;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(vlk_536_kyle, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_536_kyle, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_536_kyle, "hum_body_Naked0", 2, 1, "Hum_Head_Bald", 72, 1, vlk_armor_l /*4121*/);
    b_scale(vlk_536_kyle);
    mdl_setmodelfatness(vlk_536_kyle, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_coward;
    npc_settalentskill(vlk_536_kyle, npc_talent_1h, 1);
    createinvitem(vlk_536_kyle, itmi_stuff_plate_01);
    createinvitem(vlk_536_kyle, itlstorch);
    createinvitem(vlk_536_kyle, itfo_potion_water_01);
    equipitem(vlk_536_kyle, itmwpickaxe /*4380*/);
    daily_routine = rtn_start_536;
};

func void rtn_start_536() {
    ta_sleep(22, 0, 8, 0, "OCR_HUT_68");
    ta_stand(8, 0, 22, 0, "OCR_HUT_68_BACK");
};

instance vlk_538_huno(npc_default) {
    name = "Õóíî";
    npctype = npctype_main;
    guild = gil_vlk;
    level = 12;
    voice = 9;
    id = 538;
    attribute[atr_strength] /*4*/ = 55;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 184;
    attribute[atr_hitpoints] /*0*/ = 184;
    mdl_setvisual(vlk_538_huno, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_538_huno, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_538_huno, "hum_body_Naked0", 2, 1, "Hum_Head_Bald", 71, 4, vlk_armor_l /*4121*/);
    b_scale(vlk_538_huno);
    mdl_setmodelfatness(vlk_538_huno, 1.0);
    aivar[22] = true;
    fight_tactic = fai_human_coward;
    npc_settalentskill(vlk_538_huno, npc_talent_1h, 1);
    createinvitems(vlk_538_huno, itmiswordraw, 10);
    createinvitems(vlk_538_huno, itmiswordrawhot, 10);
    createinvitems(vlk_538_huno, itmiswordbladehot, 10);
    createinvitems(vlk_538_huno, itmiswordblade, 10);
    equipitem(vlk_538_huno, itmw_1h_sledgehammer_01 /*4381*/);
    daily_routine = rtn_start_538;
};

func void rtn_start_538() {
    ta_sleep(22, 0, 8, 0, "OCR_HUT_35");
    ta_smith_fire(8, 0, 8, 10, "OCR_HUT_34");
    ta_smith_anvil(8, 10, 8, 20, "OCR_HUT_34");
    ta_smith_fire(8, 20, 8, 30, "OCR_HUT_34");
    ta_smith_anvil(8, 30, 8, 40, "OCR_HUT_34");
    ta_smith_cool(8, 40, 8, 50, "OCR_HUT_34");
    ta_smith_anvil(8, 50, 9, 0, "OCR_HUT_34");
    ta_smith_fire(9, 0, 9, 10, "OCR_HUT_34");
    ta_smith_anvil(9, 10, 9, 20, "OCR_HUT_34");
    ta_smith_fire(9, 20, 9, 30, "OCR_HUT_34");
    ta_smith_anvil(9, 30, 9, 40, "OCR_HUT_34");
    ta_smith_cool(9, 40, 9, 50, "OCR_HUT_34");
    ta_smith_anvil(9, 50, 10, 0, "OCR_HUT_34");
    ta_smith_fire(10, 0, 10, 10, "OCR_HUT_34");
    ta_smith_anvil(10, 10, 10, 20, "OCR_HUT_34");
    ta_smith_fire(10, 20, 10, 30, "OCR_HUT_34");
    ta_smith_anvil(10, 30, 10, 40, "OCR_HUT_34");
    ta_smith_cool(10, 40, 10, 50, "OCR_HUT_34");
    ta_smith_anvil(10, 50, 11, 0, "OCR_HUT_34");
    ta_smith_fire(11, 0, 11, 10, "OCR_HUT_34");
    ta_smith_anvil(11, 10, 11, 20, "OCR_HUT_34");
    ta_smith_fire(11, 20, 11, 30, "OCR_HUT_34");
    ta_smith_anvil(11, 30, 11, 40, "OCR_HUT_34");
    ta_smith_cool(11, 40, 11, 50, "OCR_HUT_34");
    ta_smith_anvil(11, 50, 12, 0, "OCR_HUT_34");
    ta_smith_fire(12, 0, 12, 10, "OCR_HUT_34");
    ta_smith_anvil(12, 10, 12, 20, "OCR_HUT_34");
    ta_smith_fire(12, 20, 12, 30, "OCR_HUT_34");
    ta_smith_anvil(12, 30, 12, 40, "OCR_HUT_34");
    ta_smith_cool(12, 40, 12, 50, "OCR_HUT_34");
    ta_smith_anvil(12, 50, 13, 0, "OCR_HUT_34");
    ta_smith_fire(13, 0, 13, 10, "OCR_HUT_34");
    ta_smith_anvil(13, 10, 13, 20, "OCR_HUT_34");
    ta_smith_fire(13, 20, 13, 30, "OCR_HUT_34");
    ta_smith_anvil(13, 30, 13, 40, "OCR_HUT_34");
    ta_smith_cool(13, 40, 13, 50, "OCR_HUT_34");
    ta_smith_anvil(13, 50, 14, 0, "OCR_HUT_34");
    ta_smith_fire(14, 0, 14, 10, "OCR_HUT_34");
    ta_smith_anvil(14, 10, 14, 20, "OCR_HUT_34");
    ta_smith_fire(14, 20, 14, 30, "OCR_HUT_34");
    ta_smith_anvil(14, 30, 14, 40, "OCR_HUT_34");
    ta_smith_cool(14, 40, 14, 50, "OCR_HUT_34");
    ta_smith_anvil(14, 50, 15, 0, "OCR_HUT_34");
    ta_smith_fire(15, 0, 15, 10, "OCR_HUT_34");
    ta_smith_anvil(15, 10, 15, 20, "OCR_HUT_34");
    ta_smith_fire(15, 20, 15, 30, "OCR_HUT_34");
    ta_smith_anvil(15, 30, 15, 40, "OCR_HUT_34");
    ta_smith_cool(15, 40, 15, 50, "OCR_HUT_34");
    ta_smith_anvil(15, 50, 16, 0, "OCR_HUT_34");
    ta_smith_fire(16, 0, 16, 10, "OCR_HUT_34");
    ta_smith_anvil(16, 10, 16, 20, "OCR_HUT_34");
    ta_smith_fire(16, 20, 16, 30, "OCR_HUT_34");
    ta_smith_anvil(16, 30, 16, 40, "OCR_HUT_34");
    ta_smith_cool(16, 40, 16, 50, "OCR_HUT_34");
    ta_smith_anvil(16, 50, 17, 0, "OCR_HUT_34");
    ta_smith_fire(17, 0, 17, 10, "OCR_HUT_34");
    ta_smith_anvil(17, 10, 17, 20, "OCR_HUT_34");
    ta_smith_fire(17, 20, 17, 30, "OCR_HUT_34");
    ta_smith_anvil(17, 30, 17, 40, "OCR_HUT_34");
    ta_smith_cool(17, 40, 17, 50, "OCR_HUT_34");
    ta_smith_anvil(17, 50, 18, 0, "OCR_HUT_34");
    ta_smith_fire(18, 0, 18, 10, "OCR_HUT_34");
    ta_smith_anvil(18, 10, 18, 20, "OCR_HUT_34");
    ta_smith_fire(18, 20, 18, 30, "OCR_HUT_34");
    ta_smith_anvil(18, 30, 18, 40, "OCR_HUT_34");
    ta_smith_cool(18, 40, 18, 50, "OCR_HUT_34");
    ta_smith_anvil(18, 50, 19, 0, "OCR_HUT_34");
    ta_smith_fire(19, 0, 19, 10, "OCR_HUT_34");
    ta_smith_anvil(19, 10, 19, 20, "OCR_HUT_34");
    ta_smith_fire(19, 20, 19, 30, "OCR_HUT_34");
    ta_smith_anvil(19, 30, 19, 40, "OCR_HUT_34");
    ta_smith_cool(19, 40, 19, 50, "OCR_HUT_34");
    ta_smith_anvil(19, 50, 20, 0, "OCR_HUT_34");
    ta_smith_fire(20, 0, 20, 10, "OCR_HUT_34");
    ta_smith_anvil(20, 10, 20, 20, "OCR_HUT_34");
    ta_smith_fire(20, 20, 20, 30, "OCR_HUT_34");
    ta_smith_anvil(20, 30, 20, 40, "OCR_HUT_34");
    ta_smith_cool(20, 40, 20, 50, "OCR_HUT_34");
    ta_smith_anvil(20, 50, 21, 0, "OCR_HUT_34");
    ta_smith_fire(21, 0, 21, 10, "OCR_HUT_34");
    ta_smith_anvil(21, 10, 21, 20, "OCR_HUT_34");
    ta_smith_fire(21, 20, 21, 30, "OCR_HUT_34");
    ta_smith_anvil(21, 30, 21, 40, "OCR_HUT_34");
    ta_smith_cool(21, 40, 21, 50, "OCR_HUT_34");
    ta_smith_anvil(21, 50, 22, 0, "OCR_HUT_34");
};

instance vlk_539_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_mine_ambient;
    guild = gil_vlk;
    level = 3;
    voice = 1;
    id = 539;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(vlk_539_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_539_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_539_buddler, "hum_body_Naked0", 3, 1, "Hum_Head_Bald", 91, 1, -1);
    b_scale(vlk_539_buddler);
    mdl_setmodelfatness(vlk_539_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_539_buddler, itfoapple);
    equipitem(vlk_539_buddler, itmw_1h_club_01 /*4377*/);
    daily_routine = rtn_start_539;
};

func void rtn_start_539() {
    ta_pickore(0, 0, 23, 0, "OM_PICKORE_12");
    ta_pickore(23, 0, 24, 0, "OM_PICKORE_12");
};

instance vlk_540_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_mine_ambient;
    guild = gil_vlk;
    level = 3;
    voice = 3;
    id = 540;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(vlk_540_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_540_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_540_buddler, "hum_body_Naked0", 2, 1, "Hum_Head_Bald", 112, 3, -1);
    b_scale(vlk_540_buddler);
    mdl_setmodelfatness(vlk_540_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_540_buddler, itfoapple);
    equipitem(vlk_540_buddler, itmw_1h_club_01 /*4377*/);
    daily_routine = rtn_start_540;
};

func void rtn_start_540() {
    ta_pickore(8, 0, 18, 0, "OM_PICKORE_11");
    ta_pickore(18, 0, 8, 0, "OM_PICKORE_11");
};

instance vlk_541_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_mine_ambient;
    guild = gil_vlk;
    level = 3;
    voice = 1;
    id = 541;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(vlk_541_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_541_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_541_buddler, "hum_body_Naked0", 3, 1, "Hum_Head_Fighter", 107, 1, -1);
    b_scale(vlk_541_buddler);
    mdl_setmodelfatness(vlk_541_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_541_buddler, itfoapple);
    equipitem(vlk_541_buddler, itmw_1h_club_01 /*4377*/);
    daily_routine = rtn_start_541;
};

func void rtn_start_541() {
    ta_pickore(0, 0, 23, 0, "OM_020");
    ta_pickore(23, 0, 24, 0, "OM_020");
};

instance vlk_542_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_mine_ambient;
    guild = gil_vlk;
    level = 3;
    voice = 3;
    id = 542;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(vlk_542_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_542_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_542_buddler, "hum_body_Naked0", 2, 1, "Hum_Head_Bald", 106, 1, vlk_armor_l /*4121*/);
    b_scale(vlk_542_buddler);
    mdl_setmodelfatness(vlk_542_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_542_buddler, itmwpickaxe);
    createinvitem(vlk_542_buddler, itfoloaf);
    createinvitem(vlk_542_buddler, itfobeer);
    createinvitem(vlk_542_buddler, itlstorch);
    equipitem(vlk_542_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_542;
};

func void rtn_start_542() {
    ta_pickore(0, 0, 23, 0, "OM_021");
    ta_pickore(23, 0, 24, 0, "OM_021");
};

instance vlk_543_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_mine_ambient;
    guild = gil_vlk;
    level = 3;
    voice = 1;
    id = 543;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(vlk_543_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_543_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_543_buddler, "hum_body_Naked0", 3, 1, "Hum_Head_Bald", 67, 1, vlk_armor_l /*4121*/);
    b_scale(vlk_543_buddler);
    mdl_setmodelfatness(vlk_543_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_543_buddler, itmwpickaxe);
    createinvitem(vlk_543_buddler, itfoloaf);
    createinvitem(vlk_543_buddler, itfobeer);
    createinvitem(vlk_543_buddler, itlstorch);
    equipitem(vlk_543_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_543;
};

func void rtn_start_543() {
    ta_pickore(0, 0, 23, 0, "OM_CAVE3_14");
    ta_pickore(23, 0, 24, 0, "OM_CAVE3_14");
};

instance vlk_544_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_mine_ambient;
    guild = gil_vlk;
    level = 3;
    voice = 2;
    id = 544;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(vlk_544_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_544_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_544_buddler, "hum_body_Naked0", 2, 1, "Hum_Head_FatBald", 98, 1, vlk_armor_l /*4121*/);
    b_scale(vlk_544_buddler);
    mdl_setmodelfatness(vlk_544_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_544_buddler, itmwpickaxe);
    createinvitem(vlk_544_buddler, itfoloaf);
    createinvitem(vlk_544_buddler, itfobeer);
    createinvitem(vlk_544_buddler, itlstorch);
    equipitem(vlk_544_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_544;
};

func void rtn_start_544() {
    ta_pickore(0, 0, 23, 0, "OM_CAVE3_31");
    ta_pickore(23, 0, 24, 0, "OM_CAVE3_31");
};

instance vlk_545_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_mine_ambient;
    guild = gil_vlk;
    level = 3;
    voice = 3;
    id = 545;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(vlk_545_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_545_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_545_buddler, "hum_body_Naked0", 3, 1, "Hum_Head_Fighter", 70, 3, vlk_armor_l /*4121*/);
    b_scale(vlk_545_buddler);
    mdl_setmodelfatness(vlk_545_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_545_buddler, itmwpickaxe);
    createinvitem(vlk_545_buddler, itfoloaf);
    createinvitem(vlk_545_buddler, itfobeer);
    createinvitem(vlk_545_buddler, itlstorch);
    equipitem(vlk_545_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_545;
};

func void rtn_start_545() {
    ta_pickore(0, 0, 23, 0, "OM_023");
    ta_pickore(23, 0, 24, 0, "OM_023");
};

instance vlk_546_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_mine_ambient;
    guild = gil_vlk;
    level = 3;
    voice = 2;
    id = 546;
    attribute[atr_strength] /*4*/ = 6;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(vlk_546_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_546_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_546_buddler, "hum_body_Naked0", 2, 1, "Hum_Head_FatBald", 73, 1, vlk_armor_l /*4121*/);
    b_scale(vlk_546_buddler);
    mdl_setmodelfatness(vlk_546_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_546_buddler, itmwpickaxe);
    createinvitem(vlk_546_buddler, itfoloaf);
    createinvitem(vlk_546_buddler, itfobeer);
    createinvitem(vlk_546_buddler, itlstorch);
    equipitem(vlk_546_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_546;
};

func void rtn_start_546() {
    ta_pickore(0, 0, 23, 0, "OM_057B");
    ta_pickore(23, 0, 24, 0, "OM_057B");
};

instance vlk_547_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_mine_ambient;
    guild = gil_vlk;
    level = 3;
    voice = 1;
    id = 547;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(vlk_547_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_547_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_547_buddler, "hum_body_Naked0", 2, 1, "Hum_Head_Fighter", 74, 3, vlk_armor_l /*4121*/);
    b_scale(vlk_547_buddler);
    mdl_setmodelfatness(vlk_547_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_547_buddler, itmwpickaxe);
    createinvitem(vlk_547_buddler, itfoloaf);
    createinvitem(vlk_547_buddler, itfobeer);
    createinvitem(vlk_547_buddler, itlstorch);
    equipitem(vlk_547_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_547;
};

func void rtn_start_547() {
    ta_pickore(0, 0, 23, 0, "OM_PICKORE_07");
    ta_pickore(23, 0, 24, 0, "OM_PICKORE_07");
};

instance vlk_548_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_mine_ambient;
    guild = gil_vlk;
    level = 3;
    voice = 2;
    id = 548;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(vlk_548_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_548_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_548_buddler, "hum_body_Naked0", 3, 1, "Hum_Head_FatBald", 72, 1, vlk_armor_l /*4121*/);
    b_scale(vlk_548_buddler);
    mdl_setmodelfatness(vlk_548_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_548_buddler, itmwpickaxe);
    createinvitem(vlk_548_buddler, itfoloaf);
    createinvitem(vlk_548_buddler, itfobeer);
    createinvitem(vlk_548_buddler, itlstorch);
    equipitem(vlk_548_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_548;
};

func void rtn_start_548() {
    ta_pickore(0, 0, 23, 0, "OM_PICKORE_06");
    ta_pickore(23, 0, 24, 0, "OM_PICKORE_06");
};

instance vlk_549_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_mine_ambient;
    guild = gil_vlk;
    level = 3;
    voice = 3;
    id = 549;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(vlk_549_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_549_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_549_buddler, "hum_body_Naked0", 2, 1, "Hum_Head_FatBald", 71, 1, vlk_armor_l /*4121*/);
    b_scale(vlk_549_buddler);
    mdl_setmodelfatness(vlk_549_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_549_buddler, itmwpickaxe);
    createinvitem(vlk_549_buddler, itfoloaf);
    createinvitem(vlk_549_buddler, itfobeer);
    createinvitem(vlk_549_buddler, itlstorch);
    equipitem(vlk_549_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_549;
};

func void rtn_start_549() {
    ta_pickore(0, 0, 23, 0, "OM_PICKORE_05B");
    ta_pickore(23, 0, 24, 0, "OM_PICKORE_05B");
};

instance vlk_550_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_mine_ambient;
    guild = gil_vlk;
    level = 3;
    voice = 1;
    id = 550;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(vlk_550_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_550_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_550_buddler, "hum_body_Naked0", 3, 1, "Hum_Head_FatBald", 70, 1, vlk_armor_l /*4121*/);
    b_scale(vlk_550_buddler);
    mdl_setmodelfatness(vlk_550_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_550_buddler, itmwpickaxe);
    createinvitem(vlk_550_buddler, itfoloaf);
    createinvitem(vlk_550_buddler, itfobeer);
    createinvitem(vlk_550_buddler, itlstorch);
    equipitem(vlk_550_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_550;
};

func void rtn_start_550() {
    ta_pickore(0, 0, 23, 0, "OM_PICKORE_08");
    ta_pickore(23, 0, 24, 0, "OM_PICKORE_08");
};

instance vlk_551_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_mine_ambient;
    guild = gil_vlk;
    level = 3;
    voice = 2;
    id = 551;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(vlk_551_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_551_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_551_buddler, "hum_body_Naked0", 2, 1, "Hum_Head_FatBald", 69, 2, vlk_armor_l /*4121*/);
    b_scale(vlk_551_buddler);
    mdl_setmodelfatness(vlk_551_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_551_buddler, itmwpickaxe);
    createinvitem(vlk_551_buddler, itfoloaf);
    createinvitem(vlk_551_buddler, itfobeer);
    createinvitem(vlk_551_buddler, itlstorch);
    equipitem(vlk_551_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_551;
};

func void rtn_start_551() {
    ta_pickore(0, 0, 23, 0, "OM_PICKORE_12");
    ta_pickore(23, 0, 24, 0, "OM_PICKORE_12");
};

instance vlk_553_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_ambient;
    guild = gil_vlk;
    level = 3;
    voice = 1;
    id = 553;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(vlk_553_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_553_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_553_buddler, "hum_body_Naked0", 2, 1, "Hum_Head_FatBald", 67, 4, vlk_armor_l /*4121*/);
    b_scale(vlk_553_buddler);
    mdl_setmodelfatness(vlk_553_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_553_buddler, itmwpickaxe);
    createinvitem(vlk_553_buddler, itlstorch);
    equipitem(vlk_553_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_553;
};

func void rtn_start_553() {
    ta_sleep(22, 0, 8, 0, "OCR_HUT_51");
    ta_smalltalk(8, 0, 22, 0, "OCR_TO_HUT_51_SMALLTALK");
};

instance vlk_554_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_ambient;
    guild = gil_vlk;
    level = 3;
    voice = 2;
    id = 554;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(vlk_554_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_554_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_554_buddler, "hum_body_Naked0", 3, 1, "Hum_Head_Pony", 0, 2, vlk_armor_l /*4121*/);
    b_scale(vlk_554_buddler);
    mdl_setmodelfatness(vlk_554_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_554_buddler, itmwpickaxe);
    createinvitem(vlk_554_buddler, itfoloaf);
    createinvitem(vlk_554_buddler, itfobeer);
    createinvitem(vlk_554_buddler, itlstorch);
    equipitem(vlk_554_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_554;
};

func void rtn_start_554() {
    ta_sleep(22, 15, 6, 15, "OCR_HUT_72");
    ta_boss(6, 15, 7, 15, "OCR_OUTSIDE_HUT_72");
    ta_washself(7, 15, 7, 45, "OCR_WASH_2");
    ta_standaround(7, 45, 11, 0, "OCR_OUTSIDE_HUT_72");
    ta_repairhut(11, 0, 13, 0, "OCR_OUTSIDE_HUT_72");
    ta_smalltalk(13, 0, 16, 0, "OCR_OUTSIDE_HUT_68_BENCH");
    ta_sitcampfire(16, 0, 22, 15, "OCR_OUTSIDE_HUT_72");
};

instance vlk_555_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_ambient;
    guild = gil_vlk;
    level = 3;
    voice = 3;
    id = 555;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(vlk_555_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_555_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_555_buddler, "hum_body_Naked0", 3, 2, "Hum_Head_Psionic", 0, 1, vlk_armor_l /*4121*/);
    b_scale(vlk_555_buddler);
    mdl_setmodelfatness(vlk_555_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_555_buddler, itmwpickaxe);
    createinvitem(vlk_555_buddler, itfoloaf);
    createinvitem(vlk_555_buddler, itlstorch);
    equipitem(vlk_555_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_555;
};

func void rtn_start_555() {
    ta_sleep(22, 45, 7, 30, "OCR_HUT_29");
    ta_sitaround(7, 30, 11, 0, "OCR_OUTSIDE_HUT_29");
    ta_repairhut(11, 0, 17, 0, "OCR_OUTSIDE_HUT_29");
    ta_sitaround(17, 0, 22, 45, "OCR_OUTSIDE_HUT_29");
};

instance vlk_556_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_ambient;
    guild = gil_vlk;
    level = 3;
    voice = 1;
    id = 556;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(vlk_556_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_556_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_556_buddler, "hum_body_Naked0", 3, 0, "Hum_Head_Psionic", 16, 3, vlk_armor_l /*4121*/);
    b_scale(vlk_556_buddler);
    mdl_setmodelfatness(vlk_556_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_556_buddler, itmwpickaxe);
    createinvitem(vlk_556_buddler, itfoloaf);
    createinvitem(vlk_556_buddler, itfobeer);
    createinvitem(vlk_556_buddler, itlstorch);
    equipitem(vlk_556_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_556;
};

func void rtn_start_556() {
    ta_sleep(22, 0, 8, 0, "OCR_HUT_78");
    ta_smalltalk(8, 0, 22, 0, "OCR_OUTSIDE_HUT_79");
};

instance vlk_557_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_ambient;
    guild = gil_vlk;
    level = 3;
    voice = 1;
    id = 557;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(vlk_557_buddler, "HUMANS.MDS");
    mdl_setvisualbody(vlk_557_buddler, "hum_body_Naked0", 2, 1, "Hum_Head_FatBald", 71, 1, vlk_armor_l /*4121*/);
    b_scale(vlk_557_buddler);
    mdl_setmodelfatness(vlk_557_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_557_buddler, itmwpickaxe);
    createinvitem(vlk_557_buddler, itfobeer);
    createinvitem(vlk_557_buddler, itlstorch);
    equipitem(vlk_557_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_557;
};

func void rtn_start_557() {
    ta_sleep(23, 15, 6, 30, "OCR_HUT_75");
    ta_washself(6, 30, 7, 6, "OCR_LAKE_4");
    ta_standaround(7, 6, 12, 0, "OCR_OUTSIDE_HUT_77_MOVEMENT2");
    ta_sitaround(12, 0, 13, 0, "OCR_OUTSIDE_HUT_75");
    ta_cook(13, 0, 14, 0, "OCR_OUTSIDE_HUT_75");
    ta_standaround(14, 0, 16, 0, "OCR_OUTSIDE_HUT_77_MOVEMENT2");
    ta_sitaround(16, 0, 17, 55, "OCR_OUTSIDE_HUT_75");
    ta_sitcampfire(17, 55, 23, 15, "OCR_OUTSIDE_HUT_77_MOVEMENT2");
};

instance vlk_558_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_mine_ambient;
    guild = gil_vlk;
    level = 3;
    voice = 2;
    id = 558;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(vlk_558_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_558_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_558_buddler, "hum_body_Naked0", 2, 1, "Hum_Head_Thief", 73, 4, vlk_armor_m /*4122*/);
    b_scale(vlk_558_buddler);
    mdl_setmodelfatness(vlk_558_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_558_buddler, itmwpickaxe);
    createinvitem(vlk_558_buddler, itfobeer);
    equipitem(vlk_558_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_558;
};

func void rtn_start_558() {
    ta_pickore(0, 0, 12, 0, "OM_PICKORE_02");
    ta_pickore(12, 0, 24, 0, "OM_PICKORE_02");
};

instance vlk_559_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_mine_ambient;
    guild = gil_vlk;
    level = 3;
    voice = 3;
    id = 559;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(vlk_559_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_559_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_559_buddler, "hum_body_Naked0", 2, 1, "Hum_Head_Psionic", 68, 0, -1);
    b_scale(vlk_559_buddler);
    mdl_setmodelfatness(vlk_559_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_559_buddler, itfoapple);
    equipitem(vlk_559_buddler, itmw_1h_club_01 /*4377*/);
    daily_routine = rtn_start_559;
};

func void rtn_start_559() {
    ta_pickore(21, 0, 7, 0, "OM_CAVE3_01");
    ta_pickore(7, 0, 21, 0, "OM_CAVE3_01");
};

instance vlk_560_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_ambient;
    guild = gil_vlk;
    level = 3;
    voice = 2;
    id = 560;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 76;
    attribute[atr_hitpoints] /*0*/ = 76;
    mdl_setvisual(vlk_560_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_560_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_560_buddler, "hum_body_Naked0", 3, 1, "Hum_Head_Psionic", 67, 2, -1);
    b_scale(vlk_560_buddler);
    mdl_setmodelfatness(vlk_560_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_560_buddler, itfoapple);
    equipitem(vlk_560_buddler, itmw_1h_club_01 /*4377*/);
    daily_routine = rtn_start_560;
};

func void rtn_start_560() {
    ta_sleep(23, 0, 6, 30, "OCR_HUT_16");
    ta_standaround(6, 30, 11, 0, "OCR_OUTSIDE_HUT_16");
    ta_washself(11, 0, 11, 20, "OCR_TO_HUT_17");
    ta_sitcampfire(11, 20, 23, 0, "OCR_OUTSIDE_HUT_16");
};

instance vlk_561_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_ambient;
    guild = gil_vlk;
    level = 4;
    voice = 1;
    id = 561;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 88;
    attribute[atr_hitpoints] /*0*/ = 88;
    mdl_setvisual(vlk_561_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_561_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_561_buddler, "hum_body_Naked0", 3, 1, "Hum_Head_Pony", 0, 1, -1);
    b_scale(vlk_561_buddler);
    mdl_setmodelfatness(vlk_561_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_561_buddler, itfo_potion_water_01);
    equipitem(vlk_561_buddler, itmw_1h_club_01 /*4377*/);
    daily_routine = rtn_start_561;
};

func void rtn_start_561() {
    ta_sleep(22, 30, 8, 15, "OCR_HUT_33");
    ta_smalltalk(8, 15, 22, 30, "OCR_OUTSIDE_HUT_29");
};

instance vlk_562_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_mine_ambient;
    guild = gil_vlk;
    level = 4;
    voice = 2;
    id = 562;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 88;
    attribute[atr_hitpoints] /*0*/ = 88;
    mdl_setvisual(vlk_562_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_562_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_562_buddler, "hum_body_Naked0", 2, 1, "Hum_Head_Thief", 67, 1, -1);
    b_scale(vlk_562_buddler);
    mdl_setmodelfatness(vlk_562_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_562_buddler, itfoapple);
    equipitem(vlk_562_buddler, itmw_1h_club_01 /*4377*/);
    daily_routine = rtn_start_562;
};

func void rtn_start_562() {
    ta_pickore(23, 0, 5, 0, "OM_CAVE1_74B");
    ta_pickore(5, 0, 23, 0, "OM_CAVE1_74B");
};

instance vlk_563_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_mine_ambient;
    guild = gil_vlk;
    level = 4;
    voice = 3;
    id = 563;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 88;
    attribute[atr_hitpoints] /*0*/ = 88;
    mdl_setvisual(vlk_563_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_563_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_563_buddler, "hum_body_Naked0", 3, 1, "Hum_Head_Fighter", 73, 1, vlk_armor_l /*4121*/);
    b_scale(vlk_563_buddler);
    mdl_setmodelfatness(vlk_563_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_563_buddler, itmwpickaxe);
    createinvitem(vlk_563_buddler, itfoloaf);
    createinvitem(vlk_563_buddler, itfobeer);
    createinvitem(vlk_563_buddler, itlstorch);
    equipitem(vlk_563_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_563;
};

func void rtn_start_563() {
    ta_pickore(21, 0, 4, 0, "OM_PICKORE_11B");
    ta_pickore(4, 0, 21, 0, "OM_PICKORE_11B");
};

instance vlk_564_jesse(npc_default) {
    name = "Äæåññ";
    npctype = npctype_main;
    guild = gil_vlk;
    level = 4;
    voice = 3;
    id = 564;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 88;
    attribute[atr_hitpoints] /*0*/ = 88;
    mdl_setvisual(vlk_564_jesse, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_564_jesse, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_564_jesse, "hum_body_Naked0", 2, 1, "Hum_Head_FatBald", 71, 1, vlk_armor_l /*4121*/);
    b_scale(vlk_564_jesse);
    mdl_setmodelfatness(vlk_564_jesse, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_coward;
    createinvitem(vlk_564_jesse, itmwpickaxe);
    createinvitem(vlk_564_jesse, itfo_potion_water_01);
    equipitem(vlk_564_jesse, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_564;
};

func void rtn_start_564() {
    ta_sleep(23, 0, 6, 45, "OCR_HUT_63");
    ta_cookforme(6, 45, 12, 0, "OCR_OUTSIDE_HUT_63_COOK");
    ta_smalltalk(12, 0, 17, 0, "OCR_OUTSIDE_HUT_63_COOK");
    ta_sitcampfire(17, 0, 23, 0, "OCR_CAMPFIRE_E_2_MOVEMENT");
};

instance vlk_565_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_ambient;
    guild = gil_vlk;
    level = 4;
    voice = 1;
    id = 565;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 88;
    attribute[atr_hitpoints] /*0*/ = 88;
    mdl_setvisual(vlk_565_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_565_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_565_buddler, "hum_body_Naked0", 3, 1, "Hum_Head_Psionic", 69, 3, -1);
    b_scale(vlk_565_buddler);
    mdl_setmodelfatness(vlk_565_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_565_buddler, itfoapple);
    equipitem(vlk_565_buddler, itmw_1h_club_01 /*4377*/);
    daily_routine = rtn_start_565;
};

func void rtn_start_565() {
    ta_sleep(23, 0, 7, 30, "OCR_HUT_52");
    ta_standaround(7, 30, 23, 0, "OCR_OUTSIDE_HUT_52");
};

instance vlk_566_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_mine_ambient;
    guild = gil_vlk;
    level = 4;
    voice = 3;
    id = 566;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 88;
    attribute[atr_hitpoints] /*0*/ = 88;
    mdl_setvisual(vlk_566_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_566_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_566_buddler, "hum_body_Naked0", 3, 2, "Hum_Head_Psionic", 0, 1, vlk_armor_l /*4121*/);
    b_scale(vlk_566_buddler);
    mdl_setmodelfatness(vlk_566_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_566_buddler, itfobeer);
    createinvitem(vlk_566_buddler, itlstorch);
    equipitem(vlk_566_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_566;
};

func void rtn_start_566() {
    ta_pickore(23, 0, 6, 0, "OM_CAVE3_04B");
    ta_pickore(6, 0, 23, 0, "OM_CAVE3_04B");
};

instance vlk_567_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_mine_ambient;
    guild = gil_vlk;
    level = 4;
    voice = 2;
    id = 567;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 88;
    attribute[atr_hitpoints] /*0*/ = 88;
    mdl_setvisual(vlk_567_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_567_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_567_buddler, "hum_body_Naked0", 2, 1, "Hum_Head_FatBald", 68, 3, vlk_armor_l /*4121*/);
    b_scale(vlk_567_buddler);
    mdl_setmodelfatness(vlk_567_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_567_buddler, itmwpickaxe);
    createinvitem(vlk_567_buddler, itfoloaf);
    createinvitem(vlk_567_buddler, itfobeer);
    createinvitem(vlk_567_buddler, itlstorch);
    equipitem(vlk_567_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_567;
};

func void rtn_start_567() {
    ta_pickore(0, 0, 23, 0, "OM_CAVE3_04A");
    ta_pickore(23, 0, 24, 0, "OM_CAVE3_04A");
};

instance vlk_571_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_mine_ambient;
    guild = gil_vlk;
    level = 4;
    voice = 3;
    id = 571;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 88;
    attribute[atr_hitpoints] /*0*/ = 88;
    mdl_setvisual(vlk_571_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_571_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_571_buddler, "hum_body_Naked0", 2, 1, "Hum_Head_Bald", 74, 1, vlk_armor_l /*4121*/);
    b_scale(vlk_571_buddler);
    mdl_setmodelfatness(vlk_571_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_571_buddler, itmwpickaxe);
    createinvitem(vlk_571_buddler, itfoloaf);
    createinvitem(vlk_571_buddler, itfobeer);
    createinvitem(vlk_571_buddler, itlstorch);
    equipitem(vlk_571_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_571;
};

func void rtn_start_571() {
    ta_standaround(5, 0, 21, 0, "OM_023A");
    ta_standaround(21, 0, 5, 0, "OM_023A");
};

instance vlk_572_gravo(npc_default) {
    name = "Ãðàâî";
    npctype = npctype_main;
    guild = gil_vlk;
    level = 4;
    voice = 4;
    id = 572;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 88;
    attribute[atr_hitpoints] /*0*/ = 88;
    mdl_setvisual(vlk_572_gravo, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_572_gravo, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_572_gravo, "hum_body_Naked0", 3, 0, "Hum_Head_Psionic", 0, 1, -1);
    b_scale(vlk_572_gravo);
    mdl_setmodelfatness(vlk_572_gravo, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_coward;
    createinvitem(vlk_572_gravo, itfo_potion_water_01);
    createinvitems(vlk_572_gravo, itminugget, 5);
    equipitem(vlk_572_gravo, itmw_1h_hatchet_01 /*4383*/);
    daily_routine = rtn_start_572;
};

func void rtn_start_572() {
    ta_sleep(22, 30, 6, 0, "OCR_HUT_4");
    ta_sitaround(6, 0, 11, 0, "OCR_AUDIENCE_01");
    ta_cookforme(11, 0, 15, 0, "OCR_OUTSIDE_HUT_4_INSERT");
    ta_standaround(15, 0, 17, 0, "OCR_OUTSIDE_HUT_4_INSERT");
    ta_sitaround(17, 0, 22, 30, "OCR_AUDIENCE_01");
};

instance vlk_573_graham(npc_default) {
    name = "Ãðåõýì";
    npctype = npctype_main;
    guild = gil_vlk;
    level = 4;
    voice = 2;
    id = 573;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 88;
    attribute[atr_hitpoints] /*0*/ = 88;
    mdl_setvisual(vlk_573_graham, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_573_graham, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_573_graham, "hum_body_Naked0", 3, 1, "Hum_Head_Fighter", 67, 1, -1);
    b_scale(vlk_573_graham);
    mdl_setmodelfatness(vlk_573_graham, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_coward;
    npc_settalentskill(vlk_573_graham, npc_talent_1h, 1);
    createinvitem(vlk_573_graham, itfo_potion_water_01);
    createinvitem(vlk_573_graham, itwrommap);
    createinvitem(vlk_573_graham, itwrworldmap);
    createinvitem(vlk_573_graham, itwrocmap);
    createinvitem(vlk_573_graham, itwrpinup);
    equipitem(vlk_573_graham, itmw_1h_mace_light_01 /*4382*/);
    daily_routine = rtn_start_573;
};

func void rtn_start_573() {
    ta_sleep(22, 30, 6, 0, "OCR_HUT_76");
    ta_sitaround(6, 0, 7, 0, "OCR_OUTSIDE_HUT_76");
    ta_standaround(7, 0, 11, 0, "OCR_OUTSIDE_HUT_77_INSERT");
    ta_washself(11, 0, 11, 30, "OCR_LAKE_4");
    ta_repairhut(11, 30, 12, 0, "OCR_OUTSIDE_HUT_76");
    ta_boss(12, 0, 18, 0, "OCR_HUT_76");
    ta_sitcampfire(18, 0, 22, 30, "OCR_OUTSIDE_HUT_77_INSERT");
};

instance vlk_574_mud(npc_default) {
    name = "Ìàä";
    npctype = npctype_main;
    guild = gil_none;
    level = 0;
    voice = 7;
    id = 574;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 88;
    attribute[atr_hitpoints] /*0*/ = 88;
    mdl_setvisual(vlk_574_mud, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_574_mud, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_574_mud, "hum_body_Naked0", 3, 1, "Hum_Head_Pony", 109, 1, vlk_armor_l /*4121*/);
    b_scale(vlk_574_mud);
    mdl_setmodelfatness(vlk_574_mud, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_coward;
    senses = (sense_see | sense_hear) | sense_smell;
    createinvitem(vlk_574_mud, itfo_potion_water_01);
    createinvitems(vlk_574_mud, itminugget, 5);
    equipitem(vlk_574_mud, itmw_1h_club_01 /*4377*/);
    daily_routine = rtn_start_574;
};

func void rtn_start_574() {
    ta_sleep(23, 0, 6, 0, "OCR_HUT_13");
    ta_sitaround(23, 0, 6, 0, "OCR_OUTSIDE_HUT_13");
};

func void rtn_follow_574() {
    ta_followpc(23, 0, 16, 0, "OCR_HUT_13");
    ta_followpc(16, 0, 23, 0, "OCR_HUT_13");
};

instance vlk_575_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_ambient;
    guild = gil_vlk;
    level = 4;
    voice = 1;
    id = 575;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 88;
    attribute[atr_hitpoints] /*0*/ = 88;
    mdl_setvisual(vlk_575_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_575_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_575_buddler, "hum_body_Naked0", 3, 1, "Hum_Head_Bald", 70, 1, -1);
    b_scale(vlk_575_buddler);
    mdl_setmodelfatness(vlk_575_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_575_buddler, itfoapple);
    equipitem(vlk_575_buddler, itmw_1h_club_01 /*4377*/);
    daily_routine = rtn_start_575;
};

func void rtn_start_575() {
    ta_sleep(22, 45, 6, 30, "OCR_HUT_66");
    ta_standaround(7, 0, 12, 0, "OCR_OUTSIDE_HUT_66");
    ta_smalltalk(12, 0, 17, 0, "OCR_OUTSIDE_HUT_66");
    ta_sitcampfire(17, 0, 22, 45, "OCR_OUTSIDE_HUT_66");
};

instance vlk_576_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_ambient;
    guild = gil_vlk;
    level = 4;
    voice = 2;
    id = 576;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 88;
    attribute[atr_hitpoints] /*0*/ = 88;
    mdl_setvisual(vlk_576_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_576_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_576_buddler, "hum_body_Naked0", 2, 1, "Hum_Head_FatBald", 69, 2, vlk_armor_l /*4121*/);
    b_scale(vlk_576_buddler);
    mdl_setmodelfatness(vlk_576_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_576_buddler, itmwpickaxe);
    createinvitem(vlk_576_buddler, itfoloaf);
    createinvitem(vlk_576_buddler, itfobeer);
    createinvitem(vlk_576_buddler, itlstorch);
    equipitem(vlk_576_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_576;
};

func void rtn_start_576() {
    ta_sleep(22, 0, 8, 30, "OCR_HUT_30");
    ta_smith_sharp(8, 30, 22, 5, "OCR_HUT_34");
};

instance vlk_577_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_ambient;
    guild = gil_vlk;
    level = 4;
    voice = 2;
    id = 577;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 88;
    attribute[atr_hitpoints] /*0*/ = 88;
    mdl_setvisual(vlk_577_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_577_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_577_buddler, "hum_body_Naked0", 2, 1, "Hum_Head_Thief", 67, 1, -1);
    b_scale(vlk_577_buddler);
    mdl_setmodelfatness(vlk_577_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_577_buddler, itfoapple);
    equipitem(vlk_577_buddler, itmw_1h_club_01 /*4377*/);
    daily_routine = rtn_start_577;
};

func void rtn_start_577() {
    ta_sleep(23, 0, 8, 0, "OCR_HUT_11");
    ta_standaround(8, 0, 23, 0, "OCR_OUTSIDE_HUT_11");
};

instance vlk_578_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_ambient;
    guild = gil_vlk;
    level = 4;
    voice = 2;
    id = 578;
    attribute[atr_strength] /*4*/ = 20;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 88;
    attribute[atr_hitpoints] /*0*/ = 88;
    mdl_setvisual(vlk_578_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_578_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_578_buddler, "hum_body_Naked0", 2, 1, "Hum_Head_Thief", 67, 1, -1);
    b_scale(vlk_578_buddler);
    mdl_setmodelfatness(vlk_578_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_578_buddler, itfoapple);
    equipitem(vlk_578_buddler, itmw_1h_club_01 /*4377*/);
    daily_routine = rtn_start_578;
};

func void rtn_start_578() {
    ta_sleep(23, 0, 6, 30, "OCR_HUT_70");
    ta_smalltalk(6, 30, 12, 0, "OCR_OUTSIDE_HUT_68_BENCH");
    ta_cook(12, 0, 17, 30, "OCR_OUTSIDE_HUT_68");
    ta_sitcampfire(17, 30, 23, 0, "OCR_OUTSIDE_CAMPFIRE_D_3");
};

instance vlk_579_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_mine_ambient;
    guild = gil_vlk;
    level = 5;
    voice = 3;
    id = 579;
    attribute[atr_strength] /*4*/ = 25;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 100;
    attribute[atr_hitpoints] /*0*/ = 100;
    mdl_setvisual(vlk_579_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_579_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_579_buddler, "hum_body_Naked0", 3, 1, "Hum_Head_Fighter", 73, 1, vlk_armor_l /*4121*/);
    b_scale(vlk_579_buddler);
    mdl_setmodelfatness(vlk_579_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_579_buddler, itmwpickaxe);
    createinvitem(vlk_579_buddler, itfoloaf);
    createinvitem(vlk_579_buddler, itfobeer);
    createinvitem(vlk_579_buddler, itlstorch);
    equipitem(vlk_579_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_579;
};

func void rtn_start_579() {
    ta_pickore(21, 0, 4, 0, "OM_PICKORE_01B");
    ta_pickore(4, 0, 21, 0, "OM_PICKORE_01B");
};

instance vlk_580_grim(npc_default) {
    name = "Ãðèì";
    npctype = npctype_main;
    guild = gil_vlk;
    level = 5;
    voice = 6;
    id = 580;
    attribute[atr_strength] /*4*/ = 25;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 100;
    attribute[atr_hitpoints] /*0*/ = 100;
    mdl_setvisual(vlk_580_grim, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_580_grim, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_580_grim, "hum_body_Naked0", 2, 1, "Hum_Head_Thief", 72, 2, vlk_armor_m /*4122*/);
    b_scale(vlk_580_grim);
    mdl_setmodelfatness(vlk_580_grim, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_coward;
    npc_settalentskill(vlk_580_grim, npc_talent_1h, 1);
    createinvitem(vlk_580_grim, itfo_potion_water_01);
    createinvitem(vlk_580_grim, itlstorch);
    equipitem(vlk_580_grim, itmw_1h_club_01 /*4377*/);
    daily_routine = rtn_start_580;
};

func void rtn_start_580() {
    ta_sleep(23, 1, 6, 30, "OCR_HUT_2");
    ta_washself(6, 30, 7, 0, "OCR_LAKE_1");
    ta_standaround(7, 0, 10, 0, "OCR_CAMPFIRE_A_MOVEMENT2");
    ta_smalltalk(10, 0, 12, 0, "OCR_CAMPFIRE_A_MOVEMENT1");
    ta_cook(12, 0, 12, 30, "OCR_AT_HUT_2");
    ta_smalltalk(12, 30, 15, 30, "OCR_CAMPFIRE_A_MOVEMENT3");
    ta_cook(15, 30, 18, 5, "OCR_AT_HUT_2");
    ta_sitcampfire(18, 5, 23, 1, "OCR_CAMPFIRE_A_MOVEMENT2");
};

func void rtn_guide_580() {
    ta_guidepc(10, 0, 22, 0, "OC_ROUND_22_CF_2_MOVEMENT");
    ta_guidepc(22, 0, 10, 0, "OC_ROUND_22_CF_2_MOVEMENT");
};

func void rtn_inextremo_580() {
    ta_watchinextremo(10, 0, 22, 0, "OCR_AUDIENCE_01");
    ta_watchinextremo(22, 0, 10, 0, "OCR_AUDIENCE_01");
};

instance vlk_581_snaf(npc_default) {
    name = "Ñíàô";
    npctype = npctype_main;
    guild = gil_vlk;
    level = 5;
    voice = 1;
    id = 581;
    attribute[atr_strength] /*4*/ = 25;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 100;
    attribute[atr_hitpoints] /*0*/ = 100;
    mdl_setvisual(vlk_581_snaf, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_581_snaf, "Humans_Relaxed.mds");
    mdl_setvisualbody(vlk_581_snaf, "Hum_Body_CookSmith", 0, 1, "Hum_Head_Fighter", 81, 1, -1);
    b_scale(vlk_581_snaf);
    mdl_setmodelfatness(vlk_581_snaf, 2.0);
    aivar[22] = true;
    fight_tactic = fai_human_coward;
    npc_settalentskill(vlk_581_snaf, npc_talent_1h, 1);
    npc_settalentskill(vlk_581_snaf, npc_talent_sneak, 1);
    createinvitem(vlk_581_snaf, itmi_stuff_cup_01);
    equipitem(vlk_581_snaf, itmw_1h_mace_light_01 /*4382*/);
    daily_routine = rtn_start_581;
};

func void rtn_start_581() {
    ta_cook(8, 0, 22, 0, "OCR_CAULDRON_2");
    ta_sleep(22, 0, 8, 0, "OCR_HUT_14");
};

instance vlk_582_melvin(npc_default) {
    name = "Ìåëâèí";
    npctype = npctype_main;
    guild = gil_nov;
    level = 5;
    voice = 3;
    id = 582;
    attribute[atr_strength] /*4*/ = 25;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 100;
    attribute[atr_hitpoints] /*0*/ = 100;
    mdl_setvisual(vlk_582_melvin, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_582_melvin, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_582_melvin, "hum_body_Naked0", 2, 1, "Hum_Head_Fighter", 74, 3, -1);
    b_scale(vlk_582_melvin);
    mdl_setmodelfatness(vlk_582_melvin, 0.0);
    fight_tactic = fai_human_coward;
    npc_settalentskill(vlk_582_melvin, npc_talent_1h, 1);
    createinvitem(vlk_582_melvin, itfoapple);
    equipitem(vlk_582_melvin, itmw_1h_club_01 /*4377*/);
    daily_routine = rtn_start_582;
};

func void rtn_start_582() {
    ta_sleep(0, 0, 8, 0, "PSI_12_HUT_IN_BED");
    ta_listen(8, 0, 0, 0, "PSI_12_HUT_EX_TEACH");
};

instance vlk_583_glen(npc_default) {
    name = "Ãëåí";
    npctype = npctype_main;
    guild = gil_vlk;
    level = 5;
    voice = 2;
    id = 583;
    attribute[atr_strength] /*4*/ = 25;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 100;
    attribute[atr_hitpoints] /*0*/ = 100;
    mdl_setvisual(vlk_583_glen, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_583_glen, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_583_glen, "hum_body_Naked0", 2, 1, "Hum_Head_Thief", 73, 4, vlk_armor_m /*4122*/);
    b_scale(vlk_583_glen);
    mdl_setmodelfatness(vlk_583_glen, 0.0);
    fight_tactic = fai_human_coward;
    npc_settalentskill(vlk_583_glen, npc_talent_1h, 1);
    createinvitems(vlk_583_glen, itkelockpick, 20);
    daily_routine = rtn_start_583;
};

func void rtn_start_583() {
    ta_pickore(0, 0, 12, 0, "OM_PICKORE_01A");
    ta_pickore(12, 0, 24, 0, "OM_PICKORE_01A");
};

instance vlk_584_snipes(npc_default) {
    name = "Ñíàéïñ";
    npctype = npctype_main;
    guild = gil_vlk;
    level = 5;
    voice = 7;
    id = 584;
    attribute[atr_strength] /*4*/ = 25;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 100;
    attribute[atr_hitpoints] /*0*/ = 100;
    mdl_setvisual(vlk_584_snipes, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_584_snipes, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_584_snipes, "hum_body_Naked0", 2, 1, "Hum_Head_Thief", 72, 2, vlk_armor_m /*4122*/);
    b_scale(vlk_584_snipes);
    mdl_setmodelfatness(vlk_584_snipes, 0.0);
    fight_tactic = fai_human_coward;
    npc_settalentskill(vlk_584_snipes, npc_talent_1h, 1);
    createinvitem(vlk_584_snipes, itmwpickaxe);
    createinvitem(vlk_584_snipes, itfobeer);
    createinvitem(vlk_584_snipes, itlstorch);
    equipitem(vlk_584_snipes, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_584;
};

func void rtn_start_584() {
    ta_standaround(0, 0, 12, 0, "OM_CAVE1_37");
    ta_sitaround(12, 0, 24, 0, "OM_CAVE1_37");
};

instance vlk_585_aleph(npc_default) {
    name = "Àëåô";
    npctype = npctype_main;
    guild = gil_vlk;
    level = 5;
    voice = 5;
    id = 585;
    attribute[atr_strength] /*4*/ = 25;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 100;
    attribute[atr_hitpoints] /*0*/ = 100;
    mdl_setvisual(vlk_585_aleph, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_585_aleph, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_585_aleph, "hum_body_Naked0", 3, 1, "Hum_Head_Thief", 71, 0, vlk_armor_m /*4122*/);
    b_scale(vlk_585_aleph);
    mdl_setmodelfatness(vlk_585_aleph, 0.0);
    fight_tactic = fai_human_coward;
    npc_settalentskill(vlk_585_aleph, npc_talent_1h, 1);
    createinvitem(vlk_585_aleph, itmwpickaxe);
    createinvitem(vlk_585_aleph, itfobeer);
    createinvitem(vlk_585_aleph, itlstorch);
    createinvitems(vlk_585_aleph, itke_om_03, 1);
    equipitem(vlk_585_aleph, itmw_1h_nailmace_01 /*4385*/);
    equipitem(vlk_585_aleph, staerkering /*4950*/);
    daily_routine = rtn_start_585;
};

func void rtn_start_585() {
    ta_sitaround(4, 0, 16, 0, "OM_PICKORE_05");
    ta_sitaround(16, 0, 4, 0, "OM_PICKORE_05");
};

func void rtn_busy_585() {
    ta_pickore(16, 0, 4, 0, "OM_PICKORE_05");
    ta_pickore(4, 0, 16, 0, "OM_PICKORE_05");
};

instance vlk_586_grimes(npc_default) {
    name = "Ãðàéìñ";
    npctype = npctype_main;
    guild = gil_vlk;
    level = 5;
    voice = 4;
    id = 586;
    attribute[atr_strength] /*4*/ = 25;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 100;
    attribute[atr_hitpoints] /*0*/ = 100;
    mdl_setvisual(vlk_586_grimes, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_586_grimes, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_586_grimes, "hum_body_Naked0", 3, 1, "Hum_Head_Thief", 110, 2, -1);
    b_scale(vlk_586_grimes);
    mdl_setmodelfatness(vlk_586_grimes, 0.0);
    fight_tactic = fai_human_coward;
    npc_settalentskill(vlk_586_grimes, npc_talent_1h, 1);
    createinvitem(vlk_586_grimes, itfo_potion_water_01);
    equipitem(vlk_586_grimes, itmwpickaxe /*4380*/);
    daily_routine = rtn_start_586;
};

func void rtn_start_586() {
    ta_pickore(8, 0, 18, 0, "OM_PICKORE_02");
    ta_roastscavenger(18, 0, 23, 0, "OM_CAVE1_48");
    ta_sitaround(23, 0, 8, 0, "OM_CAVE1_48");
};

instance vlk_587_garp(npc_default) {
    name = "Ãàðï";
    npctype = npctype_main;
    guild = gil_vlk;
    level = 5;
    voice = 1;
    id = 587;
    attribute[atr_strength] /*4*/ = 25;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 100;
    attribute[atr_hitpoints] /*0*/ = 100;
    mdl_setvisual(vlk_587_garp, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_587_garp, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_587_garp, "hum_body_Naked0", 3, 1, "Hum_Head_Bald", 72, 4, vlk_armor_l /*4121*/);
    b_scale(vlk_587_garp);
    mdl_setmodelfatness(vlk_587_garp, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_coward;
    npc_settalentskill(vlk_587_garp, npc_talent_1h, 1);
    createinvitem(vlk_587_garp, itmwpickaxe);
    createinvitem(vlk_587_garp, itfoloaf);
    createinvitem(vlk_587_garp, itfobeer);
    createinvitem(vlk_587_garp, itlstorch);
    equipitem(vlk_587_garp, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_587;
};

func void rtn_start_587() {
    ta_pickore(8, 0, 18, 0, "OM_PICKORE_11");
    ta_pickore(18, 0, 8, 0, "OM_PICKORE_11");
};

instance vlk_588_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_mine_ambient;
    guild = gil_vlk;
    level = 5;
    voice = 2;
    id = 588;
    attribute[atr_strength] /*4*/ = 25;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 100;
    attribute[atr_hitpoints] /*0*/ = 100;
    mdl_setvisual(vlk_588_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_588_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_588_buddler, "hum_body_Naked0", 2, 1, "Hum_Head_Thief", 67, 1, -1);
    b_scale(vlk_588_buddler);
    mdl_setmodelfatness(vlk_588_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_588_buddler, itfoapple);
    equipitem(vlk_588_buddler, itmw_1h_club_01 /*4377*/);
    daily_routine = rtn_start_588;
};

func void rtn_start_588() {
    ta_pickore(0, 0, 12, 0, "OM_PICKORE_03");
    ta_pickore(12, 0, 24, 0, "OM_PICKORE_03");
};

instance vlk_589_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_mine_ambient;
    guild = gil_vlk;
    level = 5;
    voice = 2;
    id = 589;
    attribute[atr_strength] /*4*/ = 25;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 100;
    attribute[atr_hitpoints] /*0*/ = 100;
    mdl_setvisual(vlk_589_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_589_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_589_buddler, "hum_body_Naked0", 3, 1, "Hum_Head_Psionic", 67, 2, -1);
    b_scale(vlk_589_buddler);
    mdl_setmodelfatness(vlk_589_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_589_buddler, itfoapple);
    equipitem(vlk_589_buddler, itmw_1h_club_01 /*4377*/);
    daily_routine = rtn_start_589;
};

func void rtn_start_589() {
    ta_pickore(21, 0, 4, 0, "OM_CAVE3_25B");
    ta_pickore(4, 0, 21, 0, "OM_CAVE3_25B");
};

instance vlk_590_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_mine_ambient;
    guild = gil_vlk;
    level = 5;
    voice = 3;
    id = 590;
    attribute[atr_strength] /*4*/ = 25;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 100;
    attribute[atr_hitpoints] /*0*/ = 100;
    mdl_setvisual(vlk_590_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_590_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_590_buddler, "hum_body_Naked0", 3, 1, "Hum_Head_Fighter", 73, 1, vlk_armor_l /*4121*/);
    b_scale(vlk_590_buddler);
    mdl_setmodelfatness(vlk_590_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_590_buddler, itmwpickaxe);
    createinvitem(vlk_590_buddler, itfoloaf);
    createinvitem(vlk_590_buddler, itfobeer);
    createinvitem(vlk_590_buddler, itlstorch);
    equipitem(vlk_590_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_590;
};

func void rtn_start_590() {
    ta_pickore(21, 0, 4, 0, "OM_CAVE3_25A");
    ta_pickore(4, 0, 21, 0, "OM_CAVE3_25A");
};

instance vlk_591_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_mine_ambient;
    guild = gil_vlk;
    level = 5;
    voice = 3;
    id = 591;
    attribute[atr_strength] /*4*/ = 25;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 100;
    attribute[atr_hitpoints] /*0*/ = 100;
    mdl_setvisual(vlk_591_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_591_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_591_buddler, "hum_body_Naked0", 2, 1, "Hum_Head_FatBald", 71, 1, vlk_armor_l /*4121*/);
    b_scale(vlk_591_buddler);
    mdl_setmodelfatness(vlk_591_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_591_buddler, itmwpickaxe);
    createinvitem(vlk_591_buddler, itfoloaf);
    createinvitem(vlk_591_buddler, itfobeer);
    createinvitem(vlk_591_buddler, itlstorch);
    equipitem(vlk_591_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_591;
};

func void rtn_start_591() {
    ta_pickore(21, 0, 4, 0, "OM_CAVE3_25");
    ta_pickore(4, 0, 21, 0, "OM_CAVE3_25");
};

instance vlk_592_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_mine_ambient;
    guild = gil_vlk;
    level = 5;
    voice = 1;
    id = 592;
    attribute[atr_strength] /*4*/ = 25;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 100;
    attribute[atr_hitpoints] /*0*/ = 100;
    mdl_setvisual(vlk_592_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_592_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_592_buddler, "hum_body_Naked0", 3, 0, "Hum_Head_Psionic", 16, 3, vlk_armor_l /*4121*/);
    b_scale(vlk_592_buddler);
    mdl_setmodelfatness(vlk_592_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_592_buddler, itmwpickaxe);
    createinvitem(vlk_592_buddler, itfoloaf);
    createinvitem(vlk_592_buddler, itfobeer);
    createinvitem(vlk_592_buddler, itlstorch);
    equipitem(vlk_592_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_592;
};

func void rtn_start_592() {
    ta_pickore(21, 0, 4, 0, "OM_CAVE3_34");
    ta_pickore(4, 0, 21, 0, "OM_CAVE3_34");
};

instance vlk_593_buddler(npc_default) {
    name = name_buddler;
    npctype = npctype_mine_ambient;
    guild = gil_vlk;
    level = 5;
    voice = 2;
    id = 593;
    attribute[atr_strength] /*4*/ = 25;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 100;
    attribute[atr_hitpoints] /*0*/ = 100;
    mdl_setvisual(vlk_593_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_593_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_593_buddler, "hum_body_Naked0", 2, 1, "Hum_Head_FatBald", 74, 1, vlk_armor_l /*4121*/);
    b_scale(vlk_593_buddler);
    mdl_setmodelfatness(vlk_593_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_593_buddler, itmwpickaxe);
    createinvitem(vlk_593_buddler, itfoloaf);
    createinvitem(vlk_593_buddler, itfobeer);
    createinvitem(vlk_593_buddler, itlstorch);
    equipitem(vlk_593_buddler, itmw_1h_nailmace_01 /*4385*/);
    daily_routine = rtn_start_593;
};

func void rtn_start_593() {
    ta_pickore(21, 0, 4, 0, "OM_CAVE3_14");
    ta_pickore(4, 0, 21, 0, "OM_CAVE3_14");
};

instance dia_ricelord_exit(c_info) {
    npc = bau_900_ricelord /*7102*/;
    nr = 999;
    condition = dia_ricelord_exit_condition;
    information = dia_ricelord_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_ricelord_exit_condition() {
    return 1;
};

func void dia_ricelord_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_ricelord_hello(c_info) {
    npc = bau_900_ricelord /*7102*/;
    nr = 1;
    condition = dia_ricelord_hello_condition;
    information = dia_ricelord_hello_info;
    description = "Òû çàíèìàåøüñÿ ðèñîâûìè ïîëÿìè, òàê?";
};

func int dia_ricelord_hello_condition() {
    return 1;
};

func void dia_ricelord_hello_info() {
    ai_output(other, self, "DIA_Ricelord_Hello_15_00"); //Òû çàíèìàåøüñÿ ðèñîâûìè ïîëÿìè, òàê?
    ai_output(self, other, "DIA_Ricelord_Hello_12_01"); //Íó è ÷òî? Èùåøü ðàáîòó?
};

instance dia_ricelord_arbeit(c_info) {
    npc = bau_900_ricelord /*7102*/;
    nr = 1;
    condition = dia_ricelord_arbeit_condition;
    information = dia_ricelord_arbeit_info;
    description = "À äëÿ ìåíÿ íå íàéäåòñÿ ðàáîòû?";
};

func int dia_ricelord_arbeit_condition() {
    if ((npc_knowsinfo(hero, dia_ricelord_hello /*8549*/) && (!npc_knowsinfo(hero, dia_lefty_first /*11128*/))) && (leftydead == false)) {
        return 1;
    };
};

func void dia_ricelord_arbeit_info() {
    ai_output(other, self, "DIA_Ricelord_Arbeit_15_00"); //À ó òåáÿ åñòü äëÿ ìåíÿ ðàáîòà?
    ai_output(self, other, "DIA_Ricelord_Arbeit_12_01"); //Ïîéäè ïîãîâîðè ñ Ëåôòè. Ñêîðåå âñåãî òû íàéäåøü åãî ñïðàâà îò ñàðàÿ.
};

instance dia_ricelord_trade(c_info) {
    npc = bau_900_ricelord /*7102*/;
    nr = 800;
    condition = dia_ricelord_trade_condition;
    information = dia_ricelord_trade_info;
    permanent = true;
    trade = true;
    description = "Ìû ìîãëè áû çàêëþ÷èòü ñäåëêó...";
};

func int dia_ricelord_trade_condition() {
    if (npc_knowsinfo(hero, dia_ricelord_hello /*8549*/)) {
        return 1;
    };
};

func void dia_ricelord_trade_info() {
    ai_output(other, self, "DIA_Ricelord_TRADE_15_00"); //Ìû ìîãëè áû çàêëþ÷èòü ñäåëêó...
    ai_output(self, other, "DIA_Ricelord_TRADE_12_01"); //À ÷òî òû ìîæåøü ïðåäëîæèòü?
};

instance dia_ricelord_leftysentme(c_info) {
    npc = bau_900_ricelord /*7102*/;
    nr = 1;
    condition = dia_ricelord_leftysentme_condition;
    information = dia_ricelord_leftysentme_info;
    description = "Ìåíÿ ïîñëàë Ëåôòè.";
};

func int dia_ricelord_leftysentme_condition() {
    if (((npc_knowsinfo(hero, dia_ricelord_hello /*8549*/) && (lefty_mission == log_running)) && (ricelord_askedforwater == false)) && (leftydead == false)) {
        return 1;
    };
};

func void dia_ricelord_leftysentme_info() {
    ai_output(other, self, "DIA_Ricelord_LeftySentMe_15_00"); //Ìåíÿ ïîñëàë Ëåôòè.
    ai_output(self, other, "DIA_Ricelord_LeftySentMe_12_01"); //Äà, è ÷òî îí ñêàçàë?
};

instance dia_ricelord_getwater(c_info) {
    npc = bau_900_ricelord /*7102*/;
    nr = 1;
    condition = dia_ricelord_getwater_condition;
    information = dia_ricelord_getwater_info;
    permanent = true;
    description = "ß äîëæåí îòíåñòè êðåñòüÿíàì âîäó.";
};

func int dia_ricelord_getwater_condition() {
    if (((npc_knowsinfo(hero, dia_ricelord_leftysentme /*8558*/) && (lefty_mission == log_running)) && (ricelord_askedforwater == false)) && (leftydead == false)) {
        return 1;
    };
};

func void dia_ricelord_getwater_info() {
    ai_output(other, self, "DIA_Ricelord_GetWater_15_00"); //ß äîëæåí îòíåñòè êðåñòüÿíàì âîäó.
    if (lefty_workday >= wld_getday()) {
        ai_output(self, other, "DIA_Ricelord_GetWater_12_01"); //Õîðîøî. Âîò òåáå äþæèíà áóòûëîê.
        ai_output(self, other, "DIA_Ricelord_GetWater_12_02"); //Êðåñòüÿí òàì ïî÷òè âäâîå áîëüøå, òàê ÷òî ïðîñëåäè, ÷òîáû âñåì äîñòàëîñü ïîðîâíó.
        createinvitems(self, itfo_potion_water_01, 12);
        b_giveinvitems(self, other, itfo_potion_water_01 /*4324*/, 12);
        ricelord_askedforwater = true;
        if (!carriedwaterforlefty) {
            b_logentry(ch1_carrywater, ch1_carrywater_2);
        };
        ai_stopprocessinfos(self);
    }
    else if (lefty_workday == (wld_getday() - 1)) {
        ai_output(self, other, "DIA_Ricelord_GetWater_TooLate_12_00"); //Ýòî áûëî â÷åðà, ïàðåíü! Ëó÷øå ñõîäè ê íåìó, îí õî÷åò òåáå ÷òî-òî ñêàçàòü.
        ai_stopprocessinfos(self);
    }
    else {
        ai_output(self, other, "DIA_Ricelord_GetWater_TooLate_12_01"); //Ýòî áûëî íåñêîëüêî äíåé íàçàä, ïàðåíü! Ëó÷øå ñõîäè ê íåìó, îí õî÷åò òåáå êîå-÷òî ñêàçàòü.
        ai_stopprocessinfos(self);
    };
};

instance dia_horatio_exit(c_info) {
    npc = bau_901_horatio /*7104*/;
    nr = 999;
    condition = dia_horatio_exit_condition;
    information = dia_horatio_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_horatio_exit_condition() {
    return 1;
};

func void dia_horatio_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_horatio_wasser(c_info) {
    npc = bau_901_horatio /*7104*/;
    nr = 800;
    condition = info_horatio_wasser_condition;
    information = info_horatio_wasser_info;
    permanent = true;
    description = "Ìåíÿ ïîñëàë Ëåôòè. ß ïðèíåñ òåáå âîäû.";
};

func int info_horatio_wasser_condition() {
    if (((lefty_mission == log_running) || ((lefty_mission == log_success) && npc_hasitems(other, itfo_potion_water_01))) && (self.aivar[41] <= wld_getday())) {
        return 1;
    };
};

func void info_horatio_wasser_info() {
    ai_output(other, self, "Info_Horatio_Wasser_15_00"); //Ìåíÿ ïîñëàë Ëåôòè. ß ïðèíåñ òåáå âîäû.
    if (npc_hasitems(other, itfo_potion_water_01) >= 1) {
        ai_output(self, other, "Info_Horatio_Wasser_09_01"); //Ñïàñèáî, ïàðåíü! Åùå íåìíîãî, è ÿ áû íà÷àë ïèòü èç ëóæè.
        b_giveinvitems(other, self, itfo_potion_water_01 /*4324*/, 1);
        if (c_bodystatecontains(self, bs_sit)) {
            ai_standup(self);
            ai_turntonpc(self, hero);
        };
        ai_useitem(self, itfo_potion_water_01 /*4324*/);
        an_bauern_verteilt = an_bauern_verteilt + 1;
        if (an_bauern_verteilt >= durstigebauern) {
            lefty_mission = log_success;
        };
        self.aivar[41] = wld_getday() + 1;
    }
    else {
        ai_output(self, other, "Info_Horatio_Wasser_NOWATER_09_00"); //Ó òåáÿ óæå íè÷åãî íå îñòàëîñü. ß ïîïðîøó ó îñòàëüíûõ.
    };
};

var int horatio_trouble;

instance dia_horatio_hello(c_info) {
    npc = bau_901_horatio /*7104*/;
    nr = 1;
    condition = dia_horatio_hello_condition;
    information = dia_horatio_hello_info;
    important = true;
};

func int dia_horatio_hello_condition() {
    return 1;
};

func void dia_horatio_hello_info() {
    ai_gotonpc(self, hero);
    ai_output(self, other, "DIA_Horatio_Hello_09_00"); //×òî òû çäåñü äåëàåøü? Èùåøü íåïðèÿòíîñòåé?
    info_clearchoices(dia_horatio_hello /*8571*/);
    info_addchoice(dia_horatio_hello /*8571*/, "Ïðîáëåìû? Ñ êåì? Ñ êðåñòüÿíèíîì?", dia_horatio_hello_pissoff);
    info_addchoice(dia_horatio_hello /*8571*/, "Ýé, ðàññëàáüñÿ! ß íîâåíüêèé.", dia_horatio_hello_becool);
};

func void dia_horatio_hello_becool() {
    ai_output(other, self, "DIA_Horatio_Hello_BeCool_15_00"); //Ýé, ðàññëàáüñÿ! ß íîâåíüêèé.
    ai_output(self, other, "DIA_Horatio_Hello_BeCool_09_01"); //À-à. Òîãäà ëàäíî. Òðóäíî óãàäàòü çàðàíåå. Êàæäûé äåíü çäåñü ïðîõîäèò òîëïà íàðîäà, è êàæäûé äóìàåò, ÷òî ìèð âðàùåòñÿ èìåííî âîêðóã íåãî.
    info_clearchoices(dia_horatio_hello /*8571*/);
};

func void dia_horatio_hello_pissoff() {
    ai_output(other, self, "DIA_Horatio_Hello_PissOff_15_00"); //Ïðîáëåìû? Ñ êåì? Ñ êðåñòüÿíèíîì?
    ai_output(self, other, "DIA_Horatio_Hello_PissOff_09_01"); //Äàæå åñëè ÿ ðàáîòàþ â ïîëå, ýòî åùå íå çíà÷èò, ÷òî ÿ íå ìîãó ïîñòîÿòü çà ñåáÿ.
    ai_output(self, other, "DIA_Horatio_Hello_PissOff_09_02"); //Åñëè õî÷åøü íåïðèÿòíîñòåé - äàâàé, ïîäõîäè!
    horatio_trouble = true;
    info_clearchoices(dia_horatio_hello /*8571*/);
    ai_stopprocessinfos(self);
};

instance dia_horatio_sorry(c_info) {
    npc = bau_901_horatio /*7104*/;
    nr = 1;
    condition = dia_horatio_sorry_condition;
    information = dia_horatio_sorry_info;
    permanent = true;
    description = "Èçâèíè, ÿ íå õîòåë òåáÿ îáèäåòü.";
};

func int dia_horatio_sorry_condition() {
    if (horatio_trouble == true) {
        return 1;
    };
};

func void dia_horatio_sorry_info() {
    ai_output(other, self, "DIA_Horatio_SORRY_15_00"); //Èçâèíè, ÿ íå õîòåë òåáÿ îáèäåòü.
    ai_output(self, other, "DIA_Horatio_SORRY_09_01"); //Ðàíüøå íóæíî áûëî äóìàòü, ïàðåíü!
};

instance dia_horatio_story(c_info) {
    npc = bau_901_horatio /*7104*/;
    nr = 1;
    condition = dia_horatio_story_condition;
    information = dia_horatio_story_info;
    description = "×òî òû âîîáùå äåëàåøü ñðåäè êðåñòüÿí?";
};

func int dia_horatio_story_condition() {
    if ((horatio_trouble == false) && npc_knowsinfo(hero, dia_horatio_hello /*8571*/)) {
        return 1;
    };
};

func void dia_horatio_story_info() {
    ai_output(other, self, "DIA_Horatio_Story_15_00"); //×òî òû âîîáùå äåëàåøü ñðåäè êðåñòüÿí?
    ai_output(self, other, "DIA_Horatio_Story_09_01"); //Îá ýòîì ìåíÿ ïîïðîñèë Ëè. ß áîëüøå íå äåðóñü. Ðàçâå òîëüêî ÷òîáû çàùèòèòü ñåáÿ.
    ai_output(self, other, "DIA_Horatio_Story_09_02"); //ß óáèë îäíîãî ïàðíÿ, è ýòî áûë óæå ïåðåáîð. Â ðåçóëüòàòå ìåíÿ âûøâûðíóëè â  Áîãîì ïðîêëÿòóþ êîëîíèþ - ñïðàâåäëèâî, â îáùåì.
    ai_output(other, self, "DIA_Horatio_Story_15_03"); //Êàê ýòî ñëó÷èëîñü?
    ai_output(self, other, "DIA_Horatio_Story_09_04"); //Îáû÷íàÿ êàáàöêàÿ äðàêà. ß íå õîòåë åãî óáèâàòü - íàâåðíîå, ïðîñòî óäàðèë ñëèøêî ñèëüíî.
    ai_output(self, other, "DIA_Horatio_Story_09_05"); //Òîãäà ÿ áûë êóçíåöîì - ñàì íå çíàë ñâîåé ñèëû.
};

instance dia_horatio_whyhere(c_info) {
    npc = bau_901_horatio /*7104*/;
    nr = 1;
    condition = dia_horatio_whyhere_condition;
    information = dia_horatio_whyhere_info;
    description = "Ïî÷åìó òû ïðèñîåäèíèëñÿ ê ÝÒÎÌÓ Ëàãåðþ?";
};

func int dia_horatio_whyhere_condition() {
    if (npc_knowsinfo(hero, dia_horatio_story /*8579*/)) {
        return 1;
    };
};

func void dia_horatio_whyhere_info() {
    ai_output(other, self, "DIA_Horatio_WhyHere_15_00"); //Ïî÷åìó òû ïðèñîåäèíèëñÿ ê ÝÒÎÌÓ Ëàãåðþ?
    ai_output(self, other, "DIA_Horatio_WhyHere_09_01"); //Âîò ÷òî ÿ ñêàæó òåáå: ó ìåíÿ íå áûëî òîãäà äðóãîãî âûáîðà, íî ÿ è íå ñîáèðàþñü ïîçâîëÿòü ýòèì Ãóðó ïðîìûâàòü ìíå ìîçãè.
    ai_output(self, other, "DIA_Horatio_WhyHere_09_02"); //Â Ñòàðîì Ëàãåðå ÿ íåìíîãî íå ïîëàäèë ñî ñòðàæíèêàìè, õîòÿ è âîðû, è íàåìíèêè ïðîÿâëÿëè óâàæåíèå.
    ai_output(other, self, "DIA_Horatio_WhyHere_15_03"); //Îíè áîÿëèñü òåáÿ...
    ai_output(self, other, "DIA_Horatio_WhyHere_09_04"); //Ìîæåò áûòü. Â ëþáîì ñëó÷àå, òåïåðü ÿ çäåñü è ñîâåòóþ òåáå ïîïðîáîâàòü òî æå ñàìîå.
};

var int horatio_strfree;

instance dia_horatio_pleaseteachstr(c_info) {
    npc = bau_901_horatio /*7104*/;
    nr = 2;
    condition = dia_horatio_pleaseteachstr_condition;
    information = dia_horatio_pleaseteachstr_info;
    description = "Êàê ìíå ñòàòü òàêèì æå ñèëüíûì, êàê òû? Òû ìîæåøü íàó÷èòü ìåíÿ? ";
};

func int dia_horatio_pleaseteachstr_condition() {
    if (npc_knowsinfo(hero, dia_horatio_story /*8579*/)) {
        return 1;
    };
};

func void dia_horatio_pleaseteachstr_info() {
    var c_npc ricelord;

    ai_output(other, self, "DIA_Horatio_PleaseTeachSTR_15_00"); //Êàê ìíå ñòàòü òàêèì æå ñèëüíûì, êàê òû? Òû ìîæåøü íàó÷èòü ìåíÿ?
    ai_output(self, other, "DIA_Horatio_PleaseTeachSTR_09_01"); //Äàæå åñëè è ìîãó - ÄËß ×ÅÃÎ òåáå íóæíà ñèëà?
    info_clearchoices(dia_horatio_pleaseteachstr /*8586*/);
    ricelord = hlp_getnpc(bau_900_ricelord);
    if (npc_knowsinfo(hero, dia_jeremiah_horatio /*8653*/)) {
        info_addchoice(dia_horatio_pleaseteachstr /*8586*/, "×òîáû èçáàâèòüñÿ îò Ëîðäà è åãî ãîëîâîðåçîâ!", dia_horatio_pleaseteachstr_ricelord);
    }
    else {
        info_addchoice(dia_horatio_pleaseteachstr /*8586*/, "Õîðîøèé âîïðîñ. ß ïîäóìàþ îá ýòîì...", dia_horatio_pleaseteachstr_back);
    };
    info_addchoice(dia_horatio_pleaseteachstr /*8586*/, "Äëÿ òîãî ÷òîáû çàùèùàòü ñåáÿ!", dia_horatio_pleaseteachstr_defend);
    info_addchoice(dia_horatio_pleaseteachstr /*8586*/, "Äëÿ òîãî ÷òîáû íàó÷èòü ýòèõ óáëþäêîâ õîðîøèì ìàíåðàì!", dia_horatio_pleaseteachstr_attack);
    log_createtopic(ch1_horatiosteachings, log_mission);
    log_settopicstatus(ch1_horatiosteachings, log_running);
    b_logentry(ch1_horatiosteachings, ch1_horatiosteachings_1);
};

func void dia_horatio_pleaseteachstr_attack() {
    ai_output(other, self, "DIA_Horatio_PleaseTeachSTR_Attack_15_00"); //Äëÿ òîãî ÷òîáû íàó÷èòü ýòèõ óáëþäêîâ õîðîøèì ìàíåðàì!
    ai_output(self, other, "DIA_Horatio_PleaseTeachSTR_Attack_09_01"); //Ïðåæäå ÷åì ýòî ñëó÷èòñÿ, òû ñàì ñòàíåøü îäíèì èç ýòèõ óáëþäêîâ... Íåò, ÿ íå áóäó ó÷èòü òåáÿ ðàäè ýòîãî.
    info_clearchoices(dia_horatio_pleaseteachstr /*8586*/);
};

func void dia_horatio_pleaseteachstr_defend() {
    ai_output(other, self, "DIA_Horatio_PleaseTeachSTR_Defend_15_00"); //Äëÿ òîãî ÷òîáû çàùèùàòü ñåáÿ!
    ai_output(self, other, "DIA_Horatio_PleaseTeachSTR_Defend_09_01"); //Äëÿ ýòîãî íóæíà íå ñèëà - ñêîðîñòü. Íåóæåëè òû äóìàåøü, ÷òî ñâîðà÷èâàòü ÷åëþñòè ëó÷øå, ÷åì æèòü â ìèðå?
};

func void dia_horatio_pleaseteachstr_back() {
    ai_output(other, self, "DIA_Horatio_PleaseTeachSTR_BACK_15_00"); //Õîðîøèé âîïðîñ. ß ïîäóìàþ îá ýòîì...
    info_clearchoices(dia_horatio_pleaseteachstr /*8586*/);
};

func void dia_horatio_pleaseteachstr_ricelord() {
    ai_output(other, self, "DIA_Horatio_PleaseTeachSTR_Ricelord_15_00"); //×òîáû èçáàâèòüñÿ îò Ëîðäà è åãî ãîëîâîðåçîâ!
    ai_output(self, other, "DIA_Horatio_PleaseTeachSTR_Ricelord_09_01"); //Õ-ìì... Òû áóäåøü äàëåêî íå ïåðâûì èç òåõ, êòî ïûòàëñÿ ñäåëàòü ýòî.
    horatio_strfree = true;
    info_clearchoices(dia_horatio_pleaseteachstr /*8586*/);
};

instance dia_horatio_thoughtstr(c_info) {
    npc = bau_901_horatio /*7104*/;
    nr = 2;
    condition = dia_horatio_thoughtstr_condition;
    information = dia_horatio_thoughtstr_info;
    permanent = true;
    description = "ß ïîäóìàë îá ýòîì...";
};

func int dia_horatio_thoughtstr_condition() {
    if (npc_knowsinfo(hero, dia_horatio_pleaseteachstr /*8586*/) && (horatio_strfree == false)) {
        return 1;
    };
};

func void dia_horatio_thoughtstr_info() {
    var c_npc ricelord;

    ai_output(other, self, "DIA_Horatio_ThoughtSTR_15_00"); //ß äóìàë îá ýòîì...
    ai_output(self, other, "DIA_Horatio_ThoughtSTR_09_01"); //È ÷òî æå? Ïðèäóìàë ÷òî-íèáóäü ïîëó÷øå?
    info_clearchoices(dia_horatio_thoughtstr /*8594*/);
    info_addchoice(dia_horatio_thoughtstr /*8594*/, "Íåò.", dia_horatio_thoughtstr_noidea);
    ricelord = hlp_getnpc(bau_900_ricelord);
    if (npc_knowsinfo(hero, dia_jeremiah_horatio /*8653*/)) {
        info_addchoice(dia_horatio_thoughtstr /*8594*/, "Äà. ß õî÷ó èçáàâèòüñÿ îò Ëîðäà è åãî ãîëîâîðåçîâ!", dia_horatio_thoughtstr_ricelord);
    };
};

func void dia_horatio_thoughtstr_noidea() {
    ai_output(other, self, "DIA_Horatio_ThoughtSTR_NoIdea_15_00"); //Íåò.
    ai_output(self, other, "DIA_Horatio_ThoughtSTR_NoIdea_09_01"); //ß òàê è çíàë.
    info_clearchoices(dia_horatio_thoughtstr /*8594*/);
};

func void dia_horatio_thoughtstr_ricelord() {
    ai_output(other, self, "DIA_Horatio_ThoughtSTR_Ricelord_15_00"); //Äà. ß õî÷ó èçáàâèòüñÿ îò Ëîðäà è åãî ãîëîâîðåçîâ!
    ai_output(self, other, "DIA_Horatio_ThoughtSTR_Ricelord_09_01"); //Õ-ìì... Òû áóäåøü äàëåêî íå ïåðâûì èç òåõ, êòî ïûòàëñÿ ñäåëàòü ýòî.
    horatio_strfree = true;
    info_clearchoices(dia_horatio_thoughtstr /*8594*/);
};

func void dia_horatio_helpstr_learn_now() {
    if (other.attribute[atr_strength] /*4*/ >= 100) {
        printscreen(print_max_100, -1, -1, font_old_20, 2);
        b_say(self, other, "$NOLEARNOVERMAX");
        return;
    };
    if (other.attribute[atr_strength] /*4*/ <= (100 - 5)) {
        other.attribute[atr_strength] /*4*/ = other.attribute[atr_strength] /*4*/ + 5;
        printscreen(print_horatio_strength_5, -1, -1, font_old_20, 2);
    }
    else {
        other.attribute[atr_strength] /*4*/ = 100;
        printscreen(print_horatio_strength_100, -1, -1, font_old_20, 2);
    };
    ai_output(self, other, "DIA_Horatio_HelpSTR_LEARN_NOW_09_00"); //Åñëè òû õî÷åøü èìåòü ñèëüíûé óäàð, òû äîëæåí çíàòü, êàê ýòî äåëàåòñÿ. Ýòî ïåðâîå, ÷åìó ó÷àò êóçíåöà.
    ai_output(self, other, "DIA_Horatio_HelpSTR_LEARN_NOW_09_01"); //Ó÷èñü âêëàäûâàòü â óäàð âñþ ðóêó, îò ïëå÷à äî çàïÿñòüÿ.
    ai_output(self, other, "DIA_Horatio_HelpSTR_LEARN_NOW_09_02"); //×åì ëó÷øå ó òåáÿ ýòî ïîëó÷àåòñÿ, òåì ñèëüíåå óäàð. ß äóìàþ, òû îñâîèøü ýòî äîâîëüíî áûñòðî.
};

instance dia_horatio_helpstr(c_info) {
    npc = bau_901_horatio /*7104*/;
    nr = 2;
    condition = dia_horatio_helpstr_condition;
    information = dia_horatio_helpstr_info;
    description = "ß ÈÇÁÀÂËÞÑÜ îò Ëîðäà è åãî ãîëîâîðåçîâ.";
};

func int dia_horatio_helpstr_condition() {
    if (horatio_strfree == true) {
        return 1;
    };
};

func void dia_horatio_helpstr_info() {
    ai_output(other, self, "DIA_Horatio_HelpSTR_15_00"); //ß ÈÇÁÀÂËÞÑÜ îò Ëîðäà è åãî ãîëîâîðåçîâ - êîíå÷íî, åñëè òû ïîìîæåøü ìíå.
    ai_output(self, other, "DIA_Horatio_HelpSTR_09_01"); //Õîðîøî! ß ïîêëÿëñÿ, ÷òî íèêîãäà áîëüøå íå íàïàäó íà ÷åëîâåêà, íî ÿ íèêîìó íå îáåùàë íå ó÷èòü äðóãèõ, êàê ïðàâèëüíî äåëàòü ýòî.
    ai_output(other, self, "DIA_Horatio_HelpSTR_15_02"); //ß âåñü âíèìàíèå!
    dia_horatio_helpstr_learn_now();
    log_settopicstatus(ch1_horatiosteachings, log_success);
    b_logentry(ch1_horatiosteachings, ch1_horatiosteachings_2);
};

instance dia_horatio_thanks(c_info) {
    npc = bau_901_horatio /*7104*/;
    nr = 2;
    condition = dia_horatio_thanks_condition;
    information = dia_horatio_thanks_info;
    permanent = true;
    description = "Ñïàñèáî òåáå çà ïîìîùü!";
};

func int dia_horatio_thanks_condition() {
    if (npc_knowsinfo(hero, dia_horatio_helpstr /*8601*/)) {
        return 1;
    };
};

func void dia_horatio_thanks_info() {
    ai_output(other, self, "DIA_Horatio_Thanks_15_00"); //Ñïàñèáî çà ïîìîùü!
    ai_output(self, other, "DIA_Horatio_Thanks_09_01"); //Èñïîëüçóé ýòî çíàíèå òîëüêî ïî íåîáõîäèìîñòè è ÍÈÊÀÊ ÁÎËÜØÅ.
};

var int pock_forgetall;

instance dia_pock_exit(c_info) {
    npc = bau_902_pock /*7106*/;
    nr = 999;
    condition = dia_pock_exit_condition;
    information = dia_pock_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_pock_exit_condition() {
    return 1;
};

func void dia_pock_exit_info() {
    pock_forgetall = true;
    ai_stopprocessinfos(self);
};

instance info_pock_wasser(c_info) {
    npc = bau_902_pock /*7106*/;
    nr = 800;
    condition = info_pock_wasser_condition;
    information = info_pock_wasser_info;
    permanent = true;
    description = "Ìåíÿ ïîñëàë Ëåôòè. ß ïðèíåñ òåáå âîäû.";
};

func int info_pock_wasser_condition() {
    if (((lefty_mission == log_running) || ((lefty_mission == log_success) && npc_hasitems(other, itfo_potion_water_01))) && (self.aivar[41] <= wld_getday())) {
        return 1;
    };
};

func void info_pock_wasser_info() {
    ai_output(other, self, "Info_Pock_Wasser_15_00"); //Ìåíÿ ïîñëàë Ëåôòè. ß ïðèíåñ òåáå âîäû.
    if (npc_hasitems(other, itfo_potion_water_01) >= 1) {
        b_giveinvitems(other, self, itfo_potion_water_01 /*4324*/, 1);
        if (c_bodystatecontains(self, bs_sit)) {
            ai_standup(self);
            ai_turntonpc(self, hero);
        };
        ai_useitem(self, itfo_potion_water_01 /*4324*/);
        ai_output(self, other, "Info_Pock_Wasser_04_01"); //Ñïàñèáî, ïàðåíü! Ýòî êàê ðàç òî, ÷òî íóæíî!
        an_bauern_verteilt = an_bauern_verteilt + 1;
        if (an_bauern_verteilt >= durstigebauern) {
            lefty_mission = log_success;
        };
        self.aivar[41] = wld_getday() + 1;
    }
    else {
        ai_output(self, other, "Info_Pock_Wasser_NOWATER_04_00"); //Íî ó òåáÿ ñîâñåì íè÷åãî íå îñòàëîñü. Íè÷åãî ñòðàøíîãî - ÿ ïîïðîøó ó îñòàëüíûõ.
    };
};

instance dia_pock_hello(c_info) {
    npc = bau_902_pock /*7106*/;
    nr = 1;
    condition = dia_pock_hello_condition;
    information = dia_pock_hello_info;
    description = "Ïðèâåò! ß çäåñü íîâåíüêèé.";
};

func int dia_pock_hello_condition() {
    if (pock_forgetall == false) {
        return 1;
    };
};

func void dia_pock_hello_info() {
    ai_output(other, self, "DIA_Pock_Hello_15_00"); //Ïðèâåò! ß íîâåíüêèé!
    ai_output(self, other, "DIA_Pock_Hello_04_01"); //Ïðèÿòíî âèäåòü íîâûå ëèöà.
    ai_output(other, self, "DIA_Pock_Hello_15_02"); //Òû, äîëæíî áûòü, óæå î÷åíü äàâíî çäåñü?
    ai_output(self, other, "DIA_Pock_Hello_04_03"); //Òû ÷åðòîâñêè ïðàâ, ïðèÿòåëü. ß áûë îäíèì èç ïåðâûõ.
};

instance dia_pock_knowmuch(c_info) {
    npc = bau_902_pock /*7106*/;
    nr = 1;
    condition = dia_pock_knowmuch_condition;
    information = dia_pock_knowmuch_info;
    description = "Çíà÷èò, òû äîëæåí çíàòü âñå îá ýòîì ìåñòå?";
};

func int dia_pock_knowmuch_condition() {
    if ((pock_forgetall == false) && npc_knowsinfo(hero, dia_pock_hello /*8614*/)) {
        return 1;
    };
};

func void dia_pock_knowmuch_info() {
    ai_output(other, self, "DIA_Pock_KnowMuch_15_00"); //Çíà÷èò, òû äîëæåí çíàòü âñå îá ýòîì ìåñòå?
    ai_output(self, other, "DIA_Pock_KnowMuch_04_01"); //Äà êàê ñêàçàòü... Áîëüøóþ ÷àñòü âðåìåíè ÿ ïðîâîæó çäåñü, ñîáèðàÿ ðèñ.
    ai_output(self, other, "DIA_Pock_KnowMuch_04_02"); //Âîò ïî÷åìó ÿ ïðîòÿíóë òàê äîëãî. Ìû ïîëó÷àåì ðèñ è øíàïñ - íåìíîãî, íî âîëíå äîñòàòî÷íî.
};

instance dia_pock_whyjail(c_info) {
    npc = bau_902_pock /*7106*/;
    nr = 2;
    condition = dia_pock_whyjail_condition;
    information = dia_pock_whyjail_info;
    description = "Ïî÷åìó òû çäåñü?";
};

func int dia_pock_whyjail_condition() {
    if ((pock_forgetall == false) && npc_knowsinfo(hero, dia_pock_hello /*8614*/)) {
        return 1;
    };
};

func void dia_pock_whyjail_info() {
    ai_output(other, self, "DIA_Pock_WhyJail_15_00"); //Ïî÷åìó òû çäåñü?
    ai_output(self, other, "DIA_Pock_WhyJail_04_01"); //Íàëîãè, ïàðåíü, íàëîãè. Â êîøåëüêå ó ìåíÿ áûëî òàê æå ïóñòî, êàê è â æåëóäêå, è ÿ ïðîñòî íå ñìîã çàïëàòèòü.
    ai_output(self, other, "DIA_Pock_WhyJail_04_02"); //Â îäèí ïðåêðàñíûé äåíü ïðèøëè ñîäàòû è ïðèòàùèëè ìåíÿ ñþäà. Âïðî÷åì, çäåñü íå õóæå, ÷åì íà âîëå. Ïî êðàéíåé ìåðå, ÿ íå ïðîòÿíó íîãè ñ ãîëîäà.
    ai_output(self, other, "DIA_Pock_WhyJail_04_03"); //ß âñåãäà âîâðåìÿ ïëàòèë íàëîãè - âñþ ñâîþ æèçíü. Íî ýòîìó êîðîíîâàííîìó ñóêèíîìó ñûíó ýòîãî îêàçàëîñü ìàëî!
};

instance dia_pock_forgotall(c_info) {
    npc = bau_902_pock /*7106*/;
    nr = 1;
    condition = dia_pock_forgotall_condition;
    information = dia_pock_forgotall_info;
    permanent = true;
    description = "Âñå â ïîðÿäêå?";
};

func int dia_pock_forgotall_condition() {
    if (pock_forgetall == true) {
        return 1;
    };
};

func void dia_pock_forgotall_info() {
    ai_output(other, self, "DIA_Pock_ForgotAll_15_00"); //Ñ òîáîé âñå â ïîðÿäêå?
    ai_output(self, other, "DIA_Pock_ForgotAll_04_01"); //Ïðèÿòíî âèäåòü íîâûå ëèöà.
    ai_output(other, self, "DIA_Pock_ForgotAll_15_02"); //Ýé, ìû æå óæå ñ òîáîé ðàçãîâàðèâàëè!
    ai_output(self, other, "DIA_Pock_ForgotAll_04_03"); //Íåò! Ýòîãî íå ìîæåò áûòü! ß òåáÿ íèêîãäà ðàíüøå íå âèäåë.
    ai_output(other, self, "DIA_Pock_ForgotAll_15_04"); //Êîíå÷íî...
};

instance dia_rufus_exit(c_info) {
    npc = bau_903_rufus /*7108*/;
    nr = 999;
    condition = dia_rufus_exit_condition;
    information = dia_rufus_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_rufus_exit_condition() {
    return 1;
};

func void dia_rufus_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_rufus_wasser(c_info) {
    npc = bau_903_rufus /*7108*/;
    nr = 800;
    condition = info_rufus_wasser_condition;
    information = info_rufus_wasser_info;
    permanent = true;
    description = "Ìåíÿ ïîñëàë Ëåôòè. ß ïðèíåñ òåáå âîäû.";
};

func int info_rufus_wasser_condition() {
    if (((lefty_mission == log_running) || ((lefty_mission == log_success) && npc_hasitems(other, itfo_potion_water_01))) && (self.aivar[41] <= wld_getday())) {
        return 1;
    };
};

func void info_rufus_wasser_info() {
    ai_output(other, self, "Info_Rufus_Wasser_15_00"); //Ìåíÿ ïîñëàë Ëåôòè. ß ïðèíåñ òåáå âîäû.
    if (npc_hasitems(other, itfo_potion_water_01) >= 1) {
        ai_output(self, other, "Info_Rufus_Wasser_02_01"); //Ñïàñèáî, ïðèÿòåëü! Â ãëîòêå ó ìåíÿ ñóõî, êàê â ïóñòûíå!
        b_giveinvitems(other, self, itfo_potion_water_01 /*4324*/, 1);
        if (c_bodystatecontains(self, bs_sit)) {
            ai_standup(self);
            ai_turntonpc(self, hero);
        };
        ai_useitem(self, itfo_potion_water_01 /*4324*/);
        an_bauern_verteilt = an_bauern_verteilt + 1;
        if (an_bauern_verteilt >= durstigebauern) {
            lefty_mission = log_success;
        };
        self.aivar[41] = wld_getday() + 1;
    }
    else {
        ai_output(self, other, "Info_Rufus_Wasser_NOWATER_02_00"); //Âîäà! Ýé, ïàðåíü! Äà ó òåáÿ æå ñîâñåì íè÷åãî íå îñòàëîñü! Òîëüêî íå ãîâîðè ìíå, ÷òî òû íàïîèë âñåõ, êðîìå ìåíÿ!
    };
};

instance dia_rufus_hello(c_info) {
    npc = bau_903_rufus /*7108*/;
    nr = 1;
    condition = dia_rufus_hello_condition;
    information = dia_rufus_hello_info;
    description = "Ïðèâåò! ß çäåñü íîâåíüêèé.";
};

func int dia_rufus_hello_condition() {
    return 1;
};

func void dia_rufus_hello_info() {
    ai_output(other, self, "DIA_Rufus_Hello_15_00"); //Ïðèâåò! ß çäåñü íîâåíüêèé. Ïðîñòî õîòåë óçíàòü, ÷òî ïðîèñõîäèò âîêðóã.
    ai_output(self, other, "DIA_Rufus_Hello_02_01"); //Ñïðîñè êîãî-íèáóäü åùå, à? ß ïðîñòî ðàáîòàþ â ïîëå è íè÷åãî íå çíàþ.
    ai_output(self, other, "DIA_Rufus_Hello_02_02"); //Ýõ, ïàðåíü, ÿ áû ñ óäîâîëüñòâèåì ïðåäëîæèë íàøåìó Ëîðäó ñàìîìó çàíèìàòüñÿ ýòîé ÷åðòîâîé ðàáîòîé!
};

instance dia_rufus_why(c_info) {
    npc = bau_903_rufus /*7108*/;
    nr = 1;
    condition = dia_rufus_why_condition;
    information = dia_rufus_why_info;
    description = "Åñëè òåáå íå íðàâèòñÿ ýòà ðàáîòà, ïî÷åìó òû çäåñü?";
};

func int dia_rufus_why_condition() {
    if (npc_knowsinfo(hero, dia_rufus_hello /*8632*/)) {
        return 1;
    };
};

func void dia_rufus_why_info() {
    var c_npc ricelord;

    ai_output(other, self, "DIA_Rufus_Why_15_00"); //Åñëè òåáå íå íðàâèòñÿ ýòà ðàáîòà, ïî÷åìó òû çäåñü?
    ai_output(self, other, "DIA_Rufus_Why_02_01"); //Ýòî ñëó÷èëîñü â ïåðâûé æå äåíü, ïîñëå òîãî êàê ÿ ïîïàë ñþäà. Ëåôòè, îäèí èç ãîëîâîðåçîâ Ëîðäà, ïðèøåë êî ìíå è ïðåäëîæèë ïîðàáîòàòü íà ïîëÿõ.
    ai_output(self, other, "DIA_Rufus_Why_02_02"); //Êîíå÷íî, ñêàçàë ÿ. ß áûë íîâè÷êîì è õîòåë ñòàòü õîòü â ÷åì-òî ïîëåçíûì.
    ai_output(self, other, "DIA_Rufus_Why_02_03"); //Íà ñëåäóþùèé äåíü, êîãäà ÿ îñòàíîâèëñÿ íåìíîãî ïåðåäîõíóòü, ýòîò òèï ïîÿâèëñÿ ñíîâà.
    ai_output(self, other, "DIA_Rufus_Why_02_04"); //Òû æå íå õî÷åøü, ÷òîáû òâîè òîâàðèùè äåëàëè âñþ ðàáîòó çà òåáÿ, òàê?' - ñïðîñèë îí.
    ai_output(self, other, "DIA_Rufus_Why_02_05"); //ß ñêàçàë åìó, ÷òî îêîí÷àòåëüíî âûìîòàëñÿ â ïåðâûé æå äåíü, ÷òî ìíå íóæåí îòäûõ è âñå òàêîå... Íî îí äàæå íå ñëóøàë.
    ai_output(self, other, "DIA_Rufus_Why_02_06"); //Ïðîñòî óõâàòèë ìåíÿ çà âîðîòíèê è ïîòàùèë îáðàòíî íà ïîëå.
    ai_output(self, other, "DIA_Rufus_Why_02_07"); //Ñ òîãî ñëó÷àÿ îí êàæäûé äåíü ïîäæèäàë ìåíÿ âîçëå äâåðè - äî òåõ ïîð, ïîêà ÿ ñàì íå ñòàë õîäèòü íà ðàáîòó. Íå õî÷ó ññîðèòüñÿ ñ ýòèìè òèïàìè.
    ai_output(self, other, "DIA_Rufus_Why_02_08"); //Ýòî íàñòîÿùèå ãîëîâîðåçû, è ëó÷øå äåðæàòüñÿ îò íèõ ïîäàëüøå.
    ricelord = hlp_getnpc(bau_900_ricelord);
    ricelord.aivar[7] = true;
};

instance dia_rufus_ricelord(c_info) {
    npc = bau_903_rufus /*7108*/;
    nr = 2;
    condition = dia_rufus_ricelord_condition;
    information = dia_rufus_ricelord_info;
    permanent = true;
    description = "Êòî òàêîé Ëîðä?";
};

func int dia_rufus_ricelord_condition() {
    if (npc_knowsinfo(hero, dia_rufus_hello /*8632*/)) {
        return 1;
    };
};

func void dia_rufus_ricelord_info() {
    var c_npc ricelord;

    ai_output(other, self, "DIA_Rufus_Ricelord_15_00"); //Êòî òàêîé Ëîðä?
    ai_output(self, other, "DIA_Rufus_Ricelord_02_01"); //Îí ïîÿâèëñÿ çäåñü îäíèì èç ïåðâûõ, ïîìîã îñíîâàòü Ëàãåðü è çàëîæèòü ðèñîâûå ïîëÿ.
    ai_output(self, other, "DIA_Rufus_Ricelord_02_02"); //Ñåé÷àñ îí ïðîñòî ñèäèò ó ñåáÿ â àìáàðå è ïî÷åñûâàåò æèâîò, ñâèíüÿ æèðíàÿ!
    ricelord = hlp_getnpc(bau_900_ricelord);
    ricelord.aivar[7] = true;
};

instance dia_jeremiah_exit(c_info) {
    npc = bau_912_jeremiah /*7118*/;
    nr = 999;
    condition = dia_jeremiah_exit_condition;
    information = dia_jeremiah_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_jeremiah_exit_condition() {
    return 1;
};

func void dia_jeremiah_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_jeremiah_hallo(c_info) {
    npc = bau_912_jeremiah /*7118*/;
    nr = 1;
    condition = dia_jeremiah_hallo_condition;
    information = dia_jeremiah_hallo_info;
    description = "×åì òû çàíèìàåøüñÿ?";
};

func int dia_jeremiah_hallo_condition() {
    return 1;
};

func void dia_jeremiah_hallo_info() {
    ai_output(other, self, "DIA_Jeremiah_Hallo_15_00"); //×òî òû äåëàåøü?
    ai_output(self, other, "DIA_Jeremiah_Hallo_04_01"); //Ãîòîâëþ ðèñîâûé øíàïñ, ïàðåíü.
    ai_output(self, other, "DIA_Jeremiah_Hallo_04_02"); //Âîò, âîçüìè áóòûêó. Òîëüêî íå ãîâîðè Ñèëàñó.
    createinvitems(self, itfobooze, 1);
    b_giveinvitems(self, other, itfobooze /*4330*/, 1);
};

var int jeremiah_bauer;

instance dia_jeremiah_perm(c_info) {
    npc = bau_912_jeremiah /*7118*/;
    nr = 1;
    condition = dia_jeremiah_perm_condition;
    information = dia_jeremiah_perm_info;
    permanent = true;
    description = "Êàê èäóò äåëà?";
};

func int dia_jeremiah_perm_condition() {
    return 1;
};

func void dia_jeremiah_perm_info() {
    ai_output(other, self, "DIA_Jeremiah_PERM_15_00"); //Êàê èäóò äåëà?
    ai_output(self, other, "DIA_Jeremiah_PERM_04_01"); //ß åäâà ïîñïåâàþ ñ ýòèìè òèïàìè. Áîæå, ñêîëüêî æå îíè ïüþò!
    ai_output(self, other, "DIA_Jeremiah_PERM_04_02"); //Íî ýòî ê ëó÷øåìó. Ïîêà ÿ çàíÿò äåëîì, øàêàëû íàøåãî Ëîðäà ñòàðàþòñÿ ìíå íå ìåøàòü.
    jeremiah_bauer = true;
};

instance dia_jeremiah_horatio(c_info) {
    npc = bau_912_jeremiah /*7118*/;
    nr = 2;
    condition = dia_jeremiah_horatio_condition;
    information = dia_jeremiah_horatio_info;
    description = "Ðàññêàæè ìíå î Ëîðäå.";
};

func int dia_jeremiah_horatio_condition() {
    if (jeremiah_bauer == true) {
        return 1;
    };
};

func void dia_jeremiah_horatio_info() {
    ai_output(other, self, "DIA_Jeremiah_Horatio_15_00"); //Ðàññêàæè ìíå î Ëîðäå.
    ai_output(self, other, "DIA_Jeremiah_Horatio_04_01"); //Ïðîêëÿòàÿ ñâèíüÿ! Åãî ãîëîâîðåçû âûáèðàþò òåõ, êòî ïîñëàáåå, è çàñòàâëÿþò èõ ðàáîòàòü íà ïîëÿõ.
    ai_output(self, other, "DIA_Jeremiah_Horatio_04_02"); //Åäèíñòâåííûé, êòî ìîã áû ïðîòèâîñòîÿòü åìó, - ýòî Ãîðàöèî.
    ai_output(self, other, "DIA_Jeremiah_Horatio_04_03"); //ß ñëûøàë îäíàæäû, êàê îí ãîâîðèë, ÷òî ñ óäîâîëüñòâèåì âáèë áû òóïóþ ãîëîâó íàøåãî Ëîðäà â ïëå÷è ïî ñàìûå óøè... Íî îí íèêîãäà ýòîãî íå ñäåëàåò.
    ai_output(self, other, "DIA_Jeremiah_Horatio_04_04"); //Ýòî ïðîòèâ åãî óáåæäåíèé.
};

instance dia_homer_exit(c_info) {
    npc = bau_935_homer /*7152*/;
    nr = 999;
    condition = dia_homer_exit_condition;
    information = dia_homer_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_homer_exit_condition() {
    return 1;
};

func void dia_homer_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_homer_hello(c_info) {
    npc = bau_935_homer /*7152*/;
    nr = 1;
    condition = dia_homer_hello_condition;
    information = dia_homer_hello_info;
    description = "×òî-íèáóäü èùåøü?";
};

func int dia_homer_hello_condition() {
    return 1;
};

func void dia_homer_hello_info() {
    ai_output(other, self, "DIA_Homer_Hello_15_00"); //×òî-íèáóäü èùåøü?
    ai_output(self, other, "DIA_Homer_Hello_02_01"); //ß èùó òå÷ü â ïëîòèíå. Ïîõîæå, íàä îñíîâàíèåì ïîðàáîòàë øíûã.
    ai_output(self, other, "DIA_Homer_Hello_02_02"); //Ýòà òâàðü ñâîèìè çóáàìè è êîãòÿìè ïîäòà÷èâàåò êàìíè è äåðåâÿííûå áàëêè ïîä âîäîé.
    ai_output(self, other, "DIA_Homer_Hello_02_03"); //Åñëè òàê áóäåò ïðîäîëæàòüñÿ, ïëîòèíà âñêîðå ðàçðóøèòñÿ.
};

instance dia_homer_builtdam(c_info) {
    npc = bau_935_homer /*7152*/;
    nr = 2;
    condition = dia_homer_builtdam_condition;
    information = dia_homer_builtdam_info;
    description = "Ýòî ÒÛ ïîñòðîèë ïëîòèíó?";
};

func int dia_homer_builtdam_condition() {
    if (npc_knowsinfo(hero, dia_homer_hello /*8659*/)) {
        return 1;
    };
};

func void dia_homer_builtdam_info() {
    ai_output(other, self, "DIA_Homer_BuiltDam_15_00"); //Ýòî ÒÛ ïîñòðîèë ïëîòèíó?
    ai_output(self, other, "DIA_Homer_BuiltDam_02_01"); //Äà. ß ïîñòðîèë ýòó ïëîòèíó, êîãäà ìû îñíîâàëè Íîâûé Ëàãåðü.
    ai_output(self, other, "DIA_Homer_BuiltDam_02_02"); //Êîíå÷íî, âñå ïîìîãàëè, íî ÿ áûë ãëàâíûì ñòðîèòåëåì.
};

var int homer_damlurker;

instance dia_homer_wannahelp(c_info) {
    npc = bau_935_homer /*7152*/;
    nr = 1;
    condition = dia_homer_wannahelp_condition;
    information = dia_homer_wannahelp_info;
    description = "Ìîãó ëè ÿ ÷åì-òî ïîìî÷ü? ";
};

func int dia_homer_wannahelp_condition() {
    if (npc_knowsinfo(hero, dia_homer_hello /*8659*/)) {
        return 1;
    };
};

func void dia_homer_wannahelp_info() {
    ai_output(other, self, "DIA_Homer_WannaHelp_15_00"); //Ìîãó ëè ÿ ÷åì-òî ïîìî÷ü?
    ai_output(self, other, "DIA_Homer_WannaHelp_02_01"); //Êîíå÷íî. Ïðîñòî óáåäè ýòó òâàðü íå ïîäòà÷èâàòü ìîþ ïëîòèíó.
    homer_damlurker = log_running;
    log_createtopic(ch1_damlurker, log_mission);
    log_settopicstatus(ch1_damlurker, log_running);
    b_logentry(ch1_damlurker, ch1_damlurker_1);
};

instance dia_homer_running(c_info) {
    npc = bau_935_homer /*7152*/;
    nr = 1;
    condition = dia_homer_running_condition;
    information = dia_homer_running_info;
    description = "Ãäå ÿ ìîãó íàéòè ýòîãî øíûãà?";
};

func int dia_homer_running_condition() {
    if (homer_damlurker == log_running) {
        return 1;
    };
};

func void dia_homer_running_info() {
    ai_output(other, self, "DIA_Homer_Running_15_00"); //Ãäå ÿ ìîãó íàéòè ýòîãî øíûãà?
    ai_output(self, other, "DIA_Homer_Running_02_01"); //ß áû ïîèñêàë íà äðóãîé ñòîðîíå îçåðà. Òóäà íèêòî íå õîäèò. Ñêîðåå âñåãî, èìåííî òàì íàõîäèòñÿ ëîãîâî øíûãà.
    homer_damlurker = log_running;
    b_logentry(ch1_damlurker, ch1_damlurker_2);
};

instance dia_homer_success(c_info) {
    npc = bau_935_homer /*7152*/;
    nr = 2;
    condition = dia_homer_success_condition;
    information = dia_homer_success_info;
    description = "ß óáèë øíûãà!";
};

func int dia_homer_success_condition() {
    var c_npc lurker;

    lurker = hlp_getnpc(damlurker);
    printdebugstring(pd_mission, "name: ", lurker.name);
    printdebugint(pd_mission, "hp: ", lurker.attribute[atr_hitpoints] /*0*/);
    if ((homer_damlurker == log_running) && (npc_isdead(lurker) || npc_hasitems(hero, itat_damlurker_01))) {
        return 1;
    };
};

func void dia_homer_success_info() {
    ai_output(other, self, "DIA_Homer_Success_15_00"); //ß óáèë øíûãà!
    ai_output(self, other, "DIA_Homer_Success_02_01"); //Ìîëîäåö! Ëîðä ïðèñëàë ìíå â ïîìîùü íåñêîëüêî ëþäåé, ÷òîáû ïî÷èíèòü ïëîòèíó.
    ai_output(self, other, "DIA_Homer_Success_02_02"); //Òåïåðü, íàêîíåö-òî, ÿ ñìîãó íåìíîãî ïîñïàòü.
    homer_damlurker = log_success;
    log_settopicstatus(ch1_damlurker, log_success);
    b_logentry(ch1_damlurker, ch1_damlurker_3);
    b_givexp(xp_reportdeaddamlurker);
    ai_stopprocessinfos(self);
    npc_exchangeroutine(self, "START");
};

instance dia_homer_perm(c_info) {
    npc = bau_935_homer /*7152*/;
    nr = 2;
    condition = dia_homer_perm_condition;
    information = dia_homer_perm_info;
    permanent = true;
    description = "Âñå â ïîðÿäêå ñ ïëîòèíîé?";
};

func int dia_homer_perm_condition() {
    if (homer_damlurker == log_success) {
        return 1;
    };
};

func void dia_homer_perm_info() {
    ai_output(other, self, "DIA_Homer_PERM_15_00"); //Âñå â ïîðÿäêå ñ ïëîòèíîé?
    ai_output(self, other, "DIA_Homer_PERM_02_01"); //Îíà íàäåæíà, êàê êðåïîñòü, êîòîðóþ íèêòî íå ìîæåò ðàçðóøèòü.
};

instance dia_gomez_exit(c_info) {
    npc = ebr_100_gomez /*7172*/;
    nr = 999;
    condition = dia_gomez_exit_condition;
    information = dia_gomez_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_gomez_exit_condition() {
    return 1;
};

func void dia_gomez_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_gomez_fault(c_info) {
    npc = ebr_100_gomez /*7172*/;
    nr = 1;
    condition = dia_gomez_fault_condition;
    information = dia_gomez_fault_info;
    description = "ß ïðèøåë, ÷òîáû ïðåäëîæèòü ñâîè óñëóãè.";
};

func int dia_gomez_fault_condition() {
    if (!npc_knowsinfo(hero, dia_raven_there /*8752*/)) {
        return 1;
    };
};

func void dia_gomez_fault_info() {
    ai_output(other, self, "DIA_Gomez_Fault_15_00"); //ß ïðèøåë, ÷òîáû ïðåäëîæèòü ñâîè óñëóãè.
    ai_output(self, other, "DIA_Gomez_Fault_11_01"); //Òû âîðâàëñÿ ñþäà è íàäååøüñÿ, ÷òî ÿ áóäó ñëóøàòü òåáÿ, ÷åðâÿê?! ÑÒÐÀÆÀ!
    ai_stopprocessinfos(self);
    npc_setpermattitude(self, att_hostile);
    npc_settarget(self, other);
    ai_startstate(self, zs_attack, 1, "");
};

var int gomez_kontakte;

instance dia_gomez_hello(c_info) {
    npc = ebr_100_gomez /*7172*/;
    nr = 1;
    condition = dia_gomez_hello_condition;
    information = dia_gomez_hello_info;
    permanent = true;
    description = "ß ïðèøåë, ÷òîáû ïðåäëîæèòü ñâîè óñëóãè.";
};

func int dia_gomez_hello_condition() {
    if ((npc_knowsinfo(hero, dia_raven_there /*8752*/) && (gomez_kontakte < 4)) && (npc_gettrueguild(hero) == gil_none)) {
        return 1;
    };
};

func void dia_gomez_hello_info() {
    ai_output(other, self, "DIA_Gomez_Hello_15_00"); //ß ïðèøåë, ÷òîáû ïðåäëîæèòü ñâîè óñëóãè.
    ai_output(self, other, "DIA_Gomez_Hello_11_01"); //À ïî÷åìó òû äóìàåøü, ÷òî òâîè óñëóãè íóæíû ìíå?
    info_clearchoices(dia_gomez_hello /*8686*/);
    info_addchoice(dia_gomez_hello /*8686*/, "Íàäåþñü, ìíå íå ïîíàäîáèòñÿ îòðûâàòü òåáå ãîëîâó.", dia_gomez_hello_kopfab);
    info_addchoice(dia_gomez_hello /*8686*/, "Êðóãîì îäíè áîëâàíû.", dia_gomez_hello_spinner);
    info_addchoice(dia_gomez_hello /*8686*/, "Ó ìåíÿ åñòü ñâÿçè âî âñåõ Ëàãåðÿõ.", dia_gomez_hello_kontakte);
    info_addchoice(dia_gomez_hello /*8686*/, "ß ïðîøåë èñïûòàíèå.", dia_gomez_hello_thorussays);
};

func void dia_gomez_hello_thorussays() {
    ai_output(other, self, "DIA_Gomez_Hello_ThorusSays_15_00"); //ß ïðîøåë èñïûòàíèå íà ïðåäàííîñòü, è Òîðóñ ñêàçàë, ÷òî ÿ äîñòîèí ýòîãî.
    ai_output(self, other, "DIA_Gomez_Hello_ThorusSays_11_01"); //Åñëè áû ýòî áûëî íå òàê, òû íå ïðîøåë áû ñþäà æèâûì. Íî õî÷åòñÿ âåðèòü, ÷òî òû ñïîñîáåí íà áîëüøåå.
};

func void dia_gomez_hello_kontakte() {
    gomez_kontakte = 0;
    ai_output(other, self, "DIA_Gomez_Hello_Kontakte_15_00"); //ß ìíîãî ïóòåøåñòâîâàë ïî êîëîíèè, è ó ìåíÿ åñòü ñâÿçè âî âñåõ Ëàãåðÿõ.
    ai_output(self, other, "DIA_Gomez_Hello_Kontakte_11_01"); //Ýòî ìîæåò îêàçàòüñÿ ïîëåçíûì. Ñ êåì, ãîâîðèøü, òû çíàêîì?
    info_clearchoices(dia_gomez_hello /*8686*/);
    info_addchoice(dia_gomez_hello /*8686*/, "Ýòî áûëè ñàìûå âëèÿòåëüíûå ëþäè.", dia_gomez_hello_kontakte_thatsall);
    info_addchoice(dia_gomez_hello /*8686*/, "Íåñêîëüêî ôåõòîâàëüùèêîâ â Íîâîì Ëàãåðå.", dia_gomez_hello_kontakte_nlhehler);
    info_addchoice(dia_gomez_hello /*8686*/, "Ê Ëàðñó.", dia_gomez_hello_kontakte_lares);
    info_addchoice(dia_gomez_hello /*8686*/, "Íåñêîëüêî Èäîëîâ â Ëàãåðå Áðàòñòâà.", dia_gomez_hello_kontakte_baals);
    info_addchoice(dia_gomez_hello /*8686*/, "Êîð Ãàëîì.", dia_gomez_hello_kontakte_kalom);
    if (gomez_kontakte < 3) {
        info_addchoice(dia_gomez_hello /*8686*/, "Þ`Áåðèîí.", dia_gomez_hello_kontakte_yberion);
    };
};

func void dia_gomez_hello_spinner() {
    ai_output(other, self, "DIA_Gomez_Hello_Spinner_15_00"); //Êðóãîì îäíè áîëâàíû, êîòîðûå òîëüêî è äåëàþò, ÷òî ïûòàþòñÿ ïåðåëîæèòü ñâîþ ðàáîòó íà ïëå÷è íîâè÷êîâ, âìåñòî òîãî ÷òîáû âûïîëíÿòü åå ñàìèì.
    ai_output(self, other, "DIA_Gomez_Hello_Spinner_11_01"); //Çà íåáîëüøèì èñêëþ÷åíèåì, ýòî äåéñòâèòåëüíî òàê. Íî ÿ âñå ðàâíî íå âèæó ïðè÷èíû íàíèìàòü åùå îäíîãî áîëâàíà.
};

func void dia_gomez_hello_kopfab() {
    ai_output(other, self, "DIA_Gomez_Hello_KopfAb_15_00"); //Íàäåþñü, ìíå íå ïðèäåòñÿ îòðóáàòü âàì ãîëîâó, ÷òîáû äîêàçàòü, ÷òî ÿ õîðîøî âëàäåþ îðóæèåì.
    ai_output(self, other, "DIA_Gomez_Hello_KopfAb_11_01"); //Ôðàçà, äîñòîéíàÿ õðàáðåöà... èëè áåçóìöà.
    ai_stopprocessinfos(self);
    npc_setpermattitude(self, att_hostile);
    npc_settarget(self, other);
    ai_startstate(self, zs_attack, 1, "");
};

func void dia_gomez_hello_kontakte_yberion() {
    ai_output(other, self, "DIA_Gomez_Hello_Kontakte_YBerion_15_00"); //Þ`Áåðèîí.
    ai_output(self, other, "DIA_Gomez_Hello_Kontakte_YBerion_11_01"); //Þ`Áåðèîí íå ñòàíåò òðàòèòü âðåìÿ íà òèïîâ âðîäå òåáÿ.
    ai_output(self, other, "DIA_Gomez_Hello_Kontakte_YBerion_11_02"); //Òû ñîëãàë ìíå. Ïîõîæå, òû äóìàåøü, ÷òî ÿ èäèîò.
    ai_output(self, other, "DIA_Gomez_Hello_Kontakte_YBerion_11_03"); //ß î÷åíü îãîð÷åí òåì, ÷òî òû ñ÷èòàåøü ìåíÿ ãëóïöîì.
    ai_output(self, other, "DIA_Gomez_Hello_Kontakte_YBerion_11_04"); //È çíàåøü ÷òî? ß íåíàâèæó îãîð÷àòüñÿ.
    ai_stopprocessinfos(self);
    npc_setpermattitude(self, att_hostile);
    npc_settarget(self, other);
    ai_startstate(self, zs_attack, 1, "");
};

func void dia_gomez_hello_kontakte_kalom() {
    ai_output(other, self, "DIA_Gomez_Hello_Kontakte_Kalom_15_00"); //Êîð Ãàëîì.
    ai_output(self, other, "DIA_Gomez_Hello_Kontakte_Kalom_11_01"); //È?
    gomez_kontakte = gomez_kontakte + 1;
};

func void dia_gomez_hello_kontakte_baals() {
    ai_output(other, self, "DIA_Gomez_Hello_Kontakte_Baals_15_00"); //Íåñêîëüêî Èäîëîâ â Ëàãåðå Áðàòñòâà.
    ai_output(self, other, "DIA_Gomez_Hello_Kontakte_Baals_11_01"); //È?
    gomez_kontakte = gomez_kontakte + 1;
};

func void dia_gomez_hello_kontakte_lares() {
    ai_output(other, self, "DIA_Gomez_Hello_Kontakte_Lares_15_00"); //Ëàðñ.
    ai_output(self, other, "DIA_Gomez_Hello_Kontakte_Lares_11_01"); //È åùå?
    gomez_kontakte = gomez_kontakte + 1;
};

func void dia_gomez_hello_kontakte_nlhehler() {
    ai_output(other, self, "DIA_Gomez_Hello_Kontakte_NLHehler_15_00"); //Íåñêîëüêî ôåõòîâàëüùèêîâ â Íîâîì Ëàãåðå.
    ai_output(self, other, "DIA_Gomez_Hello_Kontakte_NLHehler_11_01"); //Åùå.
    gomez_kontakte = gomez_kontakte + 1;
};

func void dia_gomez_hello_kontakte_thatsall() {
    ai_output(other, self, "DIA_Gomez_Hello_Kontakte_ThatsAll_15_00"); //Ýòî áûëè ñàìûå âëèÿòåëüíûå ëþäè.
    if (gomez_kontakte >= 4) {
        ai_output(self, other, "DIA_Gomez_Hello_Kontakte_ThatsAll_11_01"); //Íå òàê óæ ïëîõî äëÿ íîâè÷êà...
        ai_output(self, other, "DIA_Gomez_Hello_Kontakte_ThatsAll_11_02"); //Ó òåáÿ áóäåò øàíñ.
        info_clearchoices(dia_gomez_hello /*8686*/);
    }
    else {
        ai_output(self, other, "DIA_Gomez_Hello_Kontakte_ThatsAll_INSUFF_11_00"); //Òû íàäååøüñÿ óäèâèòü ìåíÿ ÝÒÈÌ? Ó íàñ åñòü ÐÓÄÎÊÎÏÛ ñ ëó÷øèìè ñâÿçÿìè!
        info_clearchoices(dia_gomez_hello /*8686*/);
    };
};

instance dia_gomez_dabei(c_info) {
    npc = ebr_100_gomez /*7172*/;
    nr = 1;
    condition = dia_gomez_dabei_condition;
    information = dia_gomez_dabei_info;
    description = "Òàê ÷òî æå - ÿ â äåëå?";
};

func int dia_gomez_dabei_condition() {
    if ((gomez_kontakte >= 3) && (npc_gettrueguild(hero) == gil_none)) {
        return 1;
    };
};

func void dia_gomez_dabei_info() {
    var c_npc lester;

    ai_output(other, self, "DIA_Gomez_Dabei_15_00"); //Òàê ÷òî æå - ÿ â äåëå?
    ai_output(self, other, "DIA_Gomez_Dabei_11_01"); //Òî÷íî òàê. Òåïåðü òû îäèí èç íàñ, ìàëûø.
    ai_output(self, other, "DIA_Gomez_Dabei_11_02"); //Ðàâåí ââåäåò òåáÿ â êóðñ äåëà.
    npc_settrueguild(hero, gil_stt);
    hero.guild = gil_stt;
    b_givexp(xp_becomeshadow);
    b_logentry(ch1_joinoc, ch1_joinoc_1);
    log_settopicstatus(ch1_joinoc, log_success);
    log_createtopic(ch1_joinnc, log_mission);
    log_settopicstatus(ch1_joinnc, log_failed);
    b_logentry(ch1_joinnc, ch1_joinnc_1);
    log_createtopic(ch1_joinpsi, log_mission);
    log_settopicstatus(ch1_joinpsi, log_failed);
    b_logentry(ch1_joinpsi, ch1_joinpsi_1);
    lester = hlp_getnpc(pc_psionic);
    npc_exchangeroutine(lester, "START");
    lesterguide = 0;
    ai_continueroutine(lester);
    ai_stopprocessinfos(self);
};

instance dia_gomez_nurso(c_info) {
    npc = ebr_100_gomez /*7172*/;
    nr = 1;
    condition = dia_gomez_nurso_condition;
    information = dia_gomez_nurso_info;
    permanent = true;
    description = "ß ïîäóìàë, ìíå ñòîèò äîëîæèòü î ïðèáûòèè. ";
};

func int dia_gomez_nurso_condition() {
    if (raven_spysect == log_running) {
        return 1;
    };
};

func void dia_gomez_nurso_info() {
    ai_output(other, self, "DIA_Gomez_NurSo_15_00"); //ß õîòåë äîëîæèòü î ïðèáûòèè.
    ai_output(self, other, "DIA_Gomez_NurSo_11_00"); //Äîëîæè Ðàâåíó. Íèêîãäà íå îáðàùàéñÿ êî ìíå áåç ðàçðåøåíèÿ!
};

instance dia_ebr_100_gomez_wait4sc(c_info) {
    npc = ebr_100_gomez /*7172*/;
    condition = dia_ebr_100_gomez_wait4sc_condition;
    information = dia_ebr_100_gomez_wait4sc_info;
    important = true;
};

func int dia_ebr_100_gomez_wait4sc_condition() {
    if (exploresunkentower) {
        return true;
    };
};

func void dia_ebr_100_gomez_wait4sc_info() {
    ai_output(self, other, "DIA_EBR_100_Gomez_Wait4SC_11_01"); //Êàê òû ñþäà ïîïàë?
    ai_output(self, other, "DIA_EBR_100_Gomez_Wait4SC_11_02"); //Ïîäîæäè-êà! Óæ íå òû ëè ñðàæàëñÿ ñ ìîèìè ëþäüìè â Ñâîáîäíîé Øàõòå?
    ai_output(other, self, "DIA_EBR_100_Gomez_Wait4SC_15_03"); //Òâîèì ëþäÿì íå ñòîèëî âòîðãàòüñÿ òóäà. ß ïðîñòî èçëå÷èë èõ îò ìàíèè âåëè÷èÿ.
    ai_output(self, other, "DIA_EBR_100_Gomez_Wait4SC_11_04"); //Ðàçãîâàðèâàòü òàêèì òîíîì ñî ìíîé, ÃÎÌÅÇÎÌ, - ýòî ñìåëûé ïîñòóïîê. Íî ñ òâîåé ñòîðîíû âñå ðàâíî áûëî áîëüøîé ãëóïîñòüþ ïîÿâëÿòüñÿ çäåñü.
    ai_output(self, other, "DIA_EBR_100_Gomez_Wait4SC_11_05"); //ß ëè÷íî ïîçàáî÷óñü î òîì, ÷òîáû áîëüøå íàøè ïóòè íå ïåðåñåêàëèñü.
    ai_stopprocessinfos(self);
    self.guild = gil_ebr;
    npc_settrueguild(self, gil_ebr);
    npc_setattitude(self, att_hostile);
    npc_settempattitude(self, att_hostile);
    npc_settarget(self, other);
    ai_startstate(self, zs_attack, 1, "");
};

instance dia_scar_exit(c_info) {
    npc = ebr_101_scar /*7176*/;
    nr = 999;
    condition = dia_scar_exit_condition;
    information = dia_scar_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_scar_exit_condition() {
    return 1;
};

func void dia_scar_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_scar_hello(c_info) {
    npc = ebr_101_scar /*7176*/;
    nr = 3;
    condition = dia_scar_hello_condition;
    information = dia_scar_hello_info;
    description = "Êàê òåáÿ çîâóò?";
};

func int dia_scar_hello_condition() {
    return 1;
};

func void dia_scar_hello_info() {
    ai_output(other, self, "DIA_SCAR_Hello_15_00"); //Êòî òû?
    ai_output(self, other, "DIA_SCAR_Hello_08_01"); //Ìåíÿ íàçûâàþò Øðàì.
};

instance dia_scar_what(c_info) {
    npc = ebr_101_scar /*7176*/;
    nr = 3;
    condition = dia_scar_what_condition;
    information = dia_scar_what_info;
    description = "×åì òû çàíèìàåøüñÿ?";
};

func int dia_scar_what_condition() {
    if (npc_knowsinfo(hero, dia_scar_hello /*8712*/)) {
        return 1;
    };
};

func void dia_scar_what_info() {
    ai_output(other, self, "DIA_SCAR_What_15_00"); //×åì òû çàíèìàåøüñÿ?
    ai_output(self, other, "DIA_SCAR_What_08_01"); //Ìû ñ Àðòî ñëåäèì çà òåì, ÷òîáû íèêòî íå çàõîäèë ê Ãîìåçó áåç ïðèãëàøåíèÿ.
    ai_output(self, other, "DIA_SCAR_What_08_02"); //È åùå ÿ ñëåæó çà òåì, ÷òîáû íèêòî íå áåñïîêîèë æåíùèí.
};

instance dia_scar_frau(c_info) {
    npc = ebr_101_scar /*7176*/;
    nr = 3;
    condition = dia_scar_frau_condition;
    information = dia_scar_frau_info;
    description = "Êîãäà ìåíÿ çàøâûðíóëè ñþäà, ÿ âèäåë æåíùèíó...";
};

func int dia_scar_frau_condition() {
    if (npc_knowsinfo(hero, dia_scar_what /*8715*/)) {
        return 1;
    };
};

func void dia_scar_frau_info() {
    ai_output(other, self, "DIA_SCAR_Frau_15_00"); //Êîãäà ìåíÿ çàøâûðíóëè ñþäà, ÿ âèäåë æåíùèíó, êîòîðóþ îòïðàâëÿëè íà ïëàòôîðìå ñ òîâàðàìè.
    ai_output(self, other, "DIA_SCAR_Frau_08_01"); //È ÷òî?
    ai_output(other, self, "DIA_SCAR_Frau_15_02"); //Îíà çäåñü?
    ai_output(self, other, "DIA_SCAR_Frau_08_03"); //Ïîñëóøàé, íà òîò ñëó÷àé, åñëè îíà çàèíòåðåñîâàëà òåáÿ, ïîçâîëü äàòü íåáîëüøîé ñîâåò: çàáóäü î íåé.
    ai_output(self, other, "DIA_SCAR_Frau_08_04"); //Êàê òîëüêî ýòà æåíùèíà ïîÿâèëàñü çäåñü, Ãîìåç çàïåð åå â ñâîåé êîìíàòå.
    ai_output(self, other, "DIA_SCAR_Frau_08_05"); //Êîãäà îíà åìó íàäîåñò, Ãîìåç ìîæåò ïðîñòî îòïðàâèòü åå âíèç. Íî ïîêà îíà ïðèíàäëåæèò ÅÌÓ, òàê ÷òî íå çàáèâàé ñåáå ãîëîâó âñÿêîé åðóíäîé, ïîíÿë?
};

instance dia_scar_perm(c_info) {
    npc = ebr_101_scar /*7176*/;
    nr = 3;
    condition = dia_scar_perm_condition;
    information = dia_scar_perm_info;
    permanent = true;
    description = "×òî òû ìîæåøü ñêàçàòü î Ãîìåçå?";
};

func int dia_scar_perm_condition() {
    if (npc_knowsinfo(hero, dia_scar_frau /*8718*/)) {
        return 1;
    };
};

func void dia_scar_perm_info() {
    ai_output(other, self, "DIA_SCAR_PERM_15_00"); //×òî òû ìîæåøü ñêàçàòü î Ãîìåçå?
    ai_output(self, other, "DIA_SCAR_PERM_08_01"); //Ãëàâíîå, ÷òî òåáå íóæíî çíàòü: îí ñàìûé âëèÿòåëüíûé ÷åëîâåê â êîëîíèè.
    ai_output(self, other, "DIA_SCAR_PERM_08_02"); //Îí ïîëó÷àåò âñå, ÷åãî õî÷åò, à áîëüøå âñåãî îí õî÷åò âëàñòè.
};

instance dia_arto_exit(c_info) {
    npc = ebr_102_arto /*7179*/;
    nr = 999;
    condition = dia_arto_exit_condition;
    information = dia_arto_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_arto_exit_condition() {
    return 1;
};

func void dia_arto_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_arto_hello(c_info) {
    npc = ebr_102_arto /*7179*/;
    nr = 3;
    condition = dia_arto_hello_condition;
    information = dia_arto_hello_info;
    description = "Êàê òåáÿ çîâóò?";
};

func int dia_arto_hello_condition() {
    return 1;
};

func void dia_arto_hello_info() {
    ai_output(other, self, "DIA_ARTO_Hello_15_00"); //Êòî òû?
    ai_output(self, other, "DIA_ARTO_Hello_13_01"); //ß Àðòî.
};

instance dia_arto_what(c_info) {
    npc = ebr_102_arto /*7179*/;
    nr = 3;
    condition = dia_arto_what_condition;
    information = dia_arto_what_info;
    description = "×òî òû çäåñü äåëàåøü?";
};

func int dia_arto_what_condition() {
    if (npc_knowsinfo(hero, dia_arto_hello /*8727*/)) {
        return 1;
    };
};

func void dia_arto_what_info() {
    ai_output(other, self, "DIA_ARTO_What_15_00"); //×òî òû çäåñü äåëàåøü?
    ai_output(self, other, "DIA_ARTO_What_13_01"); //ß òåëîõðàíèòåëü Ãîìåçà.
};

instance dia_arto_perm(c_info) {
    npc = ebr_102_arto /*7179*/;
    nr = 3;
    condition = dia_arto_perm_condition;
    information = dia_arto_perm_info;
    permanent = true;
    description = "À òû íå èç áîëòëèâûõ, äà? ";
};

func int dia_arto_perm_condition() {
    if (npc_knowsinfo(hero, dia_arto_what /*8730*/)) {
        return 1;
    };
};

func void dia_arto_perm_info() {
    ai_output(other, self, "DIA_ARTO_PERM_15_00"); //À òû íå èç áîëòëèâûõ, äà?
    ai_output(self, other, "DIA_ARTO_PERM_13_01"); //Äà.
};

instance dia_raven_exit(c_info) {
    npc = ebr_105_raven /*7182*/;
    nr = 999;
    condition = dia_raven_exit_condition;
    information = dia_raven_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_raven_exit_condition() {
    return 1;
};

func void dia_raven_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_raven_firstin(c_info) {
    npc = ebr_105_raven /*7182*/;
    nr = 1;
    condition = dia_raven_firstin_condition;
    information = dia_raven_firstin_info;
    important = true;
};

func int dia_raven_firstin_condition() {
    var c_npc wache218;

    wache218 = hlp_getnpc(grd_218_gardist);
    if (wache218.aivar[29] == true) {
        return 1;
    };
};

func void dia_raven_firstin_info() {
    ai_output(self, other, "DIA_Raven_FirstIn_10_00"); //Òåáå ÷òî-íèáóäü íóæíî?
};

instance dia_raven_who(c_info) {
    npc = ebr_105_raven /*7182*/;
    nr = 1;
    condition = dia_raven_who_condition;
    information = dia_raven_who_info;
    description = "Êàê òåáÿ çîâóò?";
};

func int dia_raven_who_condition() {
    return 1;
};

func void dia_raven_who_info() {
    ai_output(other, self, "DIA_Raven_Who_15_00"); //Òû êòî?
    ai_output(self, other, "DIA_Raven_Who_10_01"); //ß Ðàâåí, ïðàâàÿ ðóêà Ãîìåçà. Ïðåæäå ÷åì óâèäåòü Ãîìåçà, òû äîëæåí ïîãîâîðèòü ñî ìíîé. Ýòî êàñàåòñÿ âñåõ.
};

instance dia_raven_krautbote(c_info) {
    npc = ebr_105_raven /*7182*/;
    nr = 1;
    condition = dia_raven_krautbote_condition;
    information = dia_raven_krautbote_info;
    description = "Êîð Ãàëîì ïðèñëàë Ãîìåçó áîëîòíèê.";
};

func int dia_raven_krautbote_condition() {
    if (kalom_krautbote == log_running) {
        return 1;
    };
};

func void dia_raven_krautbote_info() {
    ai_output(other, self, "DIA_Raven_Krautbote_15_00"); //Êîð Ãàëîì ïðèñëàë Ãîìåçó áîëîòíèê.
    ai_output(self, other, "DIA_Raven_Krautbote_10_01"); //Ýòèì ó íàñ çàíèìàåòñÿ Áàðòîëî. Ãîìåçà íå îáùàåòñÿ ñ ìàëü÷èêàìè íà ïîáåãóøêàõ.
    ai_output(self, other, "DIA_Raven_Krautbote_10_02"); //Òû íàéäåøü åãî â êîìíàòå ñïðàâà îò âõîäà èëè íà êóõíå â áîëüøîé áàøíå.
    ai_output(self, other, "DIA_Raven_Krautbote_10_03"); //Íî÷üþ îí, ïîíÿòíîå äåëî, ñïèò è íà òâîåì ìåñòå ÿ áû íå ñòàë åãî áåñïîêîèòü.
    b_logentry(ch1_krautbote, ch1_krautbote_2);
};

instance dia_raven_aufnahme(c_info) {
    npc = ebr_105_raven /*7182*/;
    nr = 1;
    condition = dia_raven_aufnahme_condition;
    information = dia_raven_aufnahme_info;
    description = "ß õî÷ó óâèäåòü Ãîìåçà.";
};

func int dia_raven_aufnahme_condition() {
    if (npc_knowsinfo(hero, info_thorus_readyforgomez /*8848*/) && (npc_gettrueguild(other) == gil_none)) {
        return 1;
    };
};

func void dia_raven_aufnahme_info() {
    ai_output(other, self, "DIA_Raven_Aufnahme_15_00"); //ß õî÷ó óâèäåòü Ãîìåçà. Òîðóñ ñêàçàë, ÷òî ìåíÿ äîëæíû çà÷èñëèòü â Ïðèçðàêè.
    ai_output(self, other, "DIA_Raven_Aufnahme_10_01"); //Õîðîøèå ëþäè íóæíû âåçäå. Òû íå ïîõîæ íà ïðèäóðêà. Äóìàþ, âñå ó òåáÿ áóäåò â ïîðÿäêå.
    ai_output(self, other, "DIA_Raven_Aufnahme_10_02"); //Èäè çà ìíîé - ÿ îòâåäó òåáÿ ê Ãîìåçó. È íè÷åãî íå òðîãàé!
    ai_stopprocessinfos(self);
    npc_exchangeroutine(self, "GUIDE");
};

instance dia_raven_there(c_info) {
    npc = ebr_105_raven /*7182*/;
    nr = 1;
    condition = dia_raven_there_condition;
    information = dia_raven_there_info;
    important = true;
};

func int dia_raven_there_condition() {
    if (npc_knowsinfo(hero, dia_raven_aufnahme /*8749*/) && hlp_strcmp(npc_getnearestwp(self), "OCC_BARONS_GREATHALL_CENTER_MOVEMENT")) {
        return 1;
    };
};

func void dia_raven_there_info() {
    ai_output(self, other, "DIA_Raven_There_10_01"); //Ãîìåç ñèäèò òàì. Åñëè íå áóäåøü ïðîÿâëÿòü ê íåìó óâàæåíèå, îí ëè÷íî íà÷íåò ó÷èòü òåáÿ õîðîøèì ìàíåðàì, óñåê?
    ai_stopprocessinfos(self);
    npc_exchangeroutine(self, "START");
};

instance dia_raven_perm(c_info) {
    npc = ebr_105_raven /*7182*/;
    nr = 8;
    condition = dia_raven_perm_condition;
    information = dia_raven_perm_info;
    permanent = true;
    description = "Êàê èäåò îáìåí?";
};

func int dia_raven_perm_condition() {
    if (npc_knowsinfo(hero, info_thorus_readyforgomez /*8848*/)) {
        return 1;
    };
};

func void dia_raven_perm_info() {
    ai_output(other, self, "DIA_Raven_PERM_15_00"); //Êàê èäåò îáìåí?
    ai_output(self, other, "DIA_Raven_PERM_10_01"); //Íà Ñòàðîé Øàõòå õîðîøî ïîòðóäèëèñü. Ïîñëåäíèé ãðóç èç âíåøíåãî ìèðà áûë î÷åíü áîëüøèì.
};

instance dia_raven_bindabei(c_info) {
    npc = ebr_105_raven /*7182*/;
    nr = 8;
    condition = dia_raven_bindabei_condition;
    information = dia_raven_bindabei_info;
    description = "Ãîìåç ñêàçàë, ÿ òåïåðü ñ âàìè.";
};

func int dia_raven_bindabei_condition() {
    if (npc_knowsinfo(hero, dia_gomez_dabei /*8699*/)) {
        return 1;
    };
};

func void dia_raven_bindabei_info() {
    createinvitem(hero, stt_armor_m);
    createinvitem(self, itamarrow);
    b_giveinvitems(self, hero, itamarrow /*4894*/, 1);
    npc_removeinvitem(hero, itamarrow /*4894*/);
    ai_output(other, self, "DIA_Raven_BinDabei_15_00"); //Ãîìåç ñêàçàë, ÿ òåïåðü ñ âàìè.
    ai_output(self, other, "DIA_Raven_BinDabei_10_01"); //Çäîðîâî! Íó, ðàç òàê, òû ìîæåøü äîêàçàòü ñâîþ ïðåäàííîñòü, âûïîëíèâ ýòî çàäàíèå.
    ai_output(self, other, "DIA_Raven_BinDabei_10_02"); //Äëÿ òåáÿ ýòî äîëæíî áûòü íå ñëèøêîì ñëîæíî, îñîáåííî åñëè òû íå âðåøü ïî ïîâîäó ñâîèõ ñâÿçåé.
    ai_equipbestarmor(hero);
};

var int raven_spysect;

var int raven_reportedmcqballs;

instance dia_raven_spysect(c_info) {
    npc = ebr_105_raven /*7182*/;
    nr = 1;
    condition = dia_raven_spysect_condition;
    information = dia_raven_spysect_info;
    description = "×òî ÿ äîëæåí ñäåëàòü?";
};

func int dia_raven_spysect_condition() {
    if (npc_knowsinfo(hero, dia_raven_bindabei /*8758*/)) {
        return 1;
    };
};

func void dia_raven_spysect_info() {
    ai_output(other, self, "DIA_Raven_SpySect_15_00"); //×òî ÿ äîëæåí ñäåëàòü?
    ai_output(self, other, "DIA_Raven_SpySect_10_01"); //Ìû âåäåì áîëüøîé îáìåí ñ Áðàòñòâîì. Íî ýòî ñîâñåì íå çíà÷èò, ÷òî ìû èì äîâåðÿåì.
    ai_output(self, other, "DIA_Raven_SpySect_10_02"); //Îòïðàâëÿéñÿ íà áîëîòî.
    ai_output(self, other, "DIA_Raven_SpySect_10_03"); //Êîãäà äîáåðåøüñÿ äî Ëàãåðÿ, ñìîòðè â îáà. Âñå, ÷òî òû íàéäåøü, ìîæåò îêàçàòüñÿ ïîëåçíûì äëÿ íàñ.
    ai_output(self, other, "DIA_Raven_SpySect_10_04"); //×åì áîëüøå òû ïðèíåñåøü, òåì ëó÷øå. Äåéñòâóé ñ óìîì... åñëè òû, êîíå÷íî, ïîíèìàåøü, î ÷åì ÿ ãîâîðþ.
    ai_output(other, self, "DIA_Raven_SpySect_15_05"); //Ðàññëàáüñÿ, ÿ íå ñîáèðàþñü èõ çëèòü.
    ai_output(self, other, "DIA_Raven_SpySect_10_06"); //ß çíàë, ÷òî òû ïîéìåøü.
    raven_spysect = log_running;
    log_createtopic(ch1_gotopsi, log_mission);
    log_settopicstatus(ch1_gotopsi, log_running);
    b_logentry(ch1_gotopsi, ch1_gotopsi_2);
};

instance dia_raven_equipment(c_info) {
    npc = ebr_105_raven /*7182*/;
    nr = 1;
    condition = dia_raven_equipment_condition;
    information = dia_raven_equipment_info;
    description = "Ãäå ìîæíî íàéòè õîðîøåå îðóæèå?";
};

func int dia_raven_equipment_condition() {
    if (raven_spysect == log_running) {
        return 1;
    };
};

func void dia_raven_equipment_info() {
    ai_output(other, self, "DIA_Raven_Equipment_15_00"); //Ãäå ìíå íàéòè ñíàðÿæåíèå ïîëó÷øå?
    ai_output(self, other, "DIA_Raven_Equipment_10_01"); //Ïîãîâîðè ñ Äèåãî - îí ïîäáåðåò òåáå êàêèå-íèáóäü äîñïåõè. Òàê ó òåáÿ áóäåò áîëüøå øàíñîâ óöåëåòü, äà è çà îïîçíàâàòåëüíûé çíàê îí âïîëíå ñîéäåò.
    ai_output(self, other, "DIA_Raven_Equipment_10_02"); //Ýòè äîñïåõè ïîçâîëÿò òåáå áåñïðåïÿòñòâåííî õîäèòü ïîâñþäó.
    ai_output(self, other, "DIA_Raven_Equipment_10_03"); //Åñëè òåáå íóæíî îðóæèå, ïîãîâîðè ñî Ñêèïîì. Òû íàéäåøü åãî â äàëüíåé ÷àñòè áîëüøîãî ñàðàÿ, ÷òî íàõîäèòñÿ ñëåâà âî âíóòðåííåì äâîðå çàìêà.
    log_createtopic(ge_traderoc, log_note);
    b_logentry(ge_traderoc, ge_traderoc_1);
    if (!npc_knowsinfo(hero, dia_skip_first /*9032*/)) {
        b_logentry(ge_traderoc, ge_traderoc_2);
    };
};

instance dia_raven_spybericht(c_info) {
    npc = ebr_105_raven /*7182*/;
    nr = 1;
    condition = dia_raven_spybericht_condition;
    information = dia_raven_spybericht_info;
    permanent = true;
    description = "ß ïîäóìàë, ìíå ñòîèò äîëîæèòü î ïðèáûòèè. ";
};

func int dia_raven_spybericht_condition() {
    if (raven_spysect == log_running) {
        return 1;
    };
};

func void dia_raven_spybericht_info() {
    ai_output(other, self, "DIA_Raven_SpyBericht_15_00"); //ß ïîäóìàë, ìíå ñòîèò äîëîæèòü î ïðèáûòèè.
    ai_output(self, other, "DIA_Raven_SpyBericht_10_01"); //Õîðîøî. ß õî÷ó áûòü â êóðñå âñåãî ïðîèñõîäÿùåãî.
    if (((corangar_sendtonc == false) && (((corkalom_bringmcqballs == log_running) || (corkalom_bringmcqballs == log_success)) || (npc_hasitems(other, itat_crawlerqueen) >= 1))) && (raven_reportedmcqballs == false)) {
        if (npc_hasitems(other, itat_crawlerqueen) >= 1) {
            ai_output(other, self, "DIA_Raven_SpyBericht_15_02"); //Òåïåðü èì íóæíû ÿéöà, êîòîðûå îòêëàäûâàåò êîðîëåâà ïîëçóíîâ, ÷òîáû ñâàðèòü ýëèêñèð è âñòóïèòü â êîíòàêò ñî Ñïÿùèì. Ýòè ÿéöà ó ìåíÿ ñ ñîáîé.
        }
        else {
            ai_output(other, self, "Org_826_Mordrag_RUNNING_15_06"); //Îíè ïîïûòàëèñü óêðåïèòü ñâîé äóõ è ïðèçâàòü Ñïÿùåãî ñ ïîìîùüþ ýëèêñèðà, ïîëó÷åííîãî èç ÿèö ïîëçóíîâ.
        };
        if (corkalom_bringmcqballs != log_success) {
            ai_output(self, other, "DIA_Raven_SpyBericht_10_03"); //Î÷åíü èíòåðåñíî. Âîò òîëüêî ñðàáîòàåò ëè. Îòíåñè ÿéöà â õðàì.
        }
        else {
            ai_output(self, other, "GUR_1201_CorKalom_SACHE_JA_10_02"); //Î÷åíü õîðîøî!
            ai_output(self, other, "DIA_Raven_SpyBericht_10_04"); //Òû õîðîøî ïîðàáîòàë.
        };
        b_givexp(xp_reporttoraven);
        raven_reportedmcqballs = true;
    }
    else if (corangar_sendtonc == true) {
        ai_output(other, self, "Info_Cronos_YBERION_15_03"); //Áðàòñòâî ïðîâîäèëî ìàãè÷åñêèé ðèòóàë, ïðèçûâàÿ ñâîåãî áîãà.
        ai_output(other, self, "Info_Cronos_YBERION_15_01"); //Þ`Áåðèîí, ãëàâà Ëàãåðÿ Ñåêòàíòîâ, ìåðòâ!
        ai_output(self, other, "GUR_1201_CorKalom_JoinPSI_10_06"); //È?
        ai_output(other, self, "Info_Cronos_SLEEPER_15_01"); //Ãóðó âûÿñíèëè, ÷òî âñå ýòî âðåìÿ îíè ìîëèëèñü çëîìó äåìîíó!
        ai_output(other, self, "Info_Cronos_KALOM_15_01"); //Êîð Ãàëîì ïîêèíóë Áðàòñòâî âìåñòå ñ íåñêîëüêèìè ôàíàòèêàìè-Ñòðàæàìè!
        ai_output(other, self, "Info_Cronos_KALOM_15_02"); //Îí õî÷åò ñàì íàéòè Ñïÿùåãî è ïðîáóäèòü åãî âî ÷òî áû òî íè ñòàëî.
        ai_output(self, other, "Mis_1_Psi_Kalom_DrugMonopol_10_05"); //Äåòàëè ìåíÿ íå èíòåðåñóþò!
        ai_output(self, other, "Mis_1_Psi_Kalom_KrautboteBACK_10_01"); //Õîðîøî. Íàéäè ñåáå äðóãîå çàäàíèå.
        raven_spysect = log_success;
        b_givexp(xp_reporttoraven);
        log_settopicstatus(ch1_gotopsi, log_success);
        b_logentry(ch1_gotopsi, ch1_gotopsi_raven);
    }
    else {
        ai_output(other, self, "DIA_Raven_SpyBericht_15_05"); //ß ïîêà åùå íå çíàþ, ÷òî îíè ñîáèðàþòñÿ äåëàòü.
        ai_output(self, other, "DIA_Raven_SpyBericht_10_06"); //Òîãäà çà÷åì òû ìåíÿ îòðûâàåøü îò äåë?
    };
};

instance dia_bartholo_exit(c_info) {
    npc = ebr_106_bartholo /*7187*/;
    nr = 999;
    condition = dia_bartholo_exit_condition;
    information = dia_bartholo_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_bartholo_exit_condition() {
    return 1;
};

func void dia_bartholo_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_bartholo_hallo(c_info) {
    npc = ebr_106_bartholo /*7187*/;
    nr = 4;
    condition = info_bartholo_hallo_condition;
    information = info_bartholo_hallo_info;
    description = "Êàê òåáÿ çîâóò?";
};

func int info_bartholo_hallo_condition() {
    return 1;
};

func void info_bartholo_hallo_info() {
    ai_output(other, self, "Info_Bartholo_HAllo_15_00"); //Êòî òû?
    ai_output(self, other, "Info_Bartholo_HAllo_12_01"); //Çîâóò ìåíÿ Áàðòîëî. Ìîÿ ðàáîòà - ñëåäèòü çà òåì, ÷òîáû Áàðîíû âîâðåìÿ ïîëó÷àëè ïðèïàñû.
    ai_output(self, other, "Info_Bartholo_HAllo_12_02"); //ß îòâå÷àþ çà ïîñòàâêè åäû è áîëîòíèêà, çà ïðîäîâîëüñòâèå äëÿ æåíùèí...
    ai_output(self, other, "Info_Bartholo_HAllo_12_03"); //Òàêæå ïðèõîäèòñÿ ñëåäèòü çà ýòèìè èäèîòàìè-ïîâàðàìè.
    ai_output(self, other, "Info_Bartholo_HAllo_12_04"); //Îíè åùå äîëæíû áûòü ìíå áëàãîäàðíû. Ãîìåç íå ïðîùàåò îøèáîê - ïîñëåäíèõ äâóõ ïîâàðîâ îí ñêîðìèë ðå÷íûì øíûãàì.
};

instance info_bartholo_perm(c_info) {
    npc = ebr_106_bartholo /*7187*/;
    nr = 4;
    condition = info_bartholo_perm_condition;
    information = info_bartholo_perm_info;
    permanent = true;
    trade = true;
    description = "ß õî÷ó çàêëþ÷èòü ñ òîáîé ñäåëêó.";
};

func int info_bartholo_perm_condition() {
    if (npc_knowsinfo(hero, info_bartholo_hallo /*8775*/)) {
        return 1;
    };
};

func void info_bartholo_perm_info() {
    ai_output(other, self, "Info_Bartholo_PERM_15_00"); //ß õî÷ó çàêëþ÷èòü ñ òîáîé ñäåëêó.
    ai_output(self, other, "Info_Bartholo_PERM_12_01"); //ß ìíîãîå ìîãó ïðåäëîæèòü - åñëè ó òåáÿ åñòü ðóäà, êîíå÷íî.
};

instance info_bartholo_krautbote(c_info) {
    npc = ebr_106_bartholo /*7187*/;
    nr = 4;
    condition = info_bartholo_krautbote_condition;
    information = info_bartholo_krautbote_info;
    permanent = true;
    description = "Çäåñü ó ìåíÿ áîëîòíèê äëÿ Ãîìåçà. Åãî ïîñëàë Êîð Ãàëîì.";
};

func int info_bartholo_krautbote_condition() {
    if (((kalom_krautbote == log_running) && (kalom_deliveredweed == false)) && npc_knowsinfo(hero, info_bartholo_hallo /*8775*/)) {
        return 1;
    };
};

func void info_bartholo_krautbote_info() {
    ai_output(other, self, "Info_Bartholo_Krautbote_15_00"); //Çäåñü ó ìåíÿ áîëîòíèê äëÿ Ãîìåçà. Åãî ïîñëàë Êîð Ãàëîì.
    ai_output(self, other, "Info_Bartholo_Krautbote_12_01"); //Ïîêàæè!
    if (npc_hasitems(other, itmijoint_3) >= 30) {
        ai_output(self, other, "Info_Bartholo_Krautbote_12_02"); //Ì-ììììììììì...
        ai_output(self, other, "Info_Bartholo_Krautbote_12_03"); //Õîðîøî! Ãîìåç êàê ðàç íà÷àë òåðÿòü òåðïåíèå. Ýòî ïðîñòî óäà÷à, ÷òî òû îáúÿâèëñÿ ñåãîäíÿ.
        ai_output(other, self, "Info_Bartholo_Krautbote_15_04"); //Êàê íàñ÷åò ïëàòû?
        ai_output(self, other, "Info_Bartholo_Krautbote_12_05"); //Íå òîðîïèñü... Âîò, âîçüìè. Ñîéäåìñÿ íà ïÿòè ñîòíÿõ.
        b_giveinvitems(other, self, itmijoint_3 /*4515*/, 30);
        createinvitems(self, itminugget, 500);
        b_giveinvitems(self, other, itminugget /*4517*/, 500);
        kalom_deliveredweed = true;
        b_logentry(ch1_krautbote, ch1_krautbote_1);
        b_givexp(xp_weedshipmentdelivered);
    }
    else {
        ai_output(self, other, "Info_Bartholo_Krautbote_NoKraut_12_00"); //Äëÿ ïîñûëüíîãî ó òåáÿ ñëèøêîì ìàëî áîëîòíèêà! Íàäåþñü, ÷òî òû íå ïðîäàë ÷àñòü íà ñòîðîíó. Âîçâðàùàéñÿ ñ íîðìàëüíûì çàïàñîì!
    };
};

instance dia_ebr_106_bartholo_wait4sc(c_info) {
    npc = ebr_106_bartholo /*7187*/;
    condition = dia_ebr_106_bartholo_wait4sc_condition;
    information = dia_ebr_106_bartholo_wait4sc_info;
    important = true;
};

func int dia_ebr_106_bartholo_wait4sc_condition() {
    if (exploresunkentower) {
        return true;
    };
};

func void dia_ebr_106_bartholo_wait4sc_info() {
    var c_npc grd_220;
    var c_npc grd_221;

    ai_setwalkmode(self, npc_walk);
    ai_gotonpc(self, other);
    ai_output(self, other, "Info_Bartholo_12_01"); //ß çíàë, ÷òî êòî-íèáóäü ïîïûòàåòñÿ äîáðàòüñÿ äî íàñ ÷åðåç ïåíòàãðàììó!
    ai_output(self, other, "Info_Bartholo_12_02"); //Íî â îòëè÷èå îò ýòîãî ïðåäàòåëÿ-êóçíåöà Ñòîóíà, òû íàì áîëüøå íå íóæåí!
    ai_output(other, self, "Info_Bartholo_15_03"); //Ãäå Ñòîóí?
    ai_output(self, other, "Info_Bartholo_12_04"); //Çà ðåøåòêîé! À òû ÷åðåç ìèíóòó îêàæåøüñÿ íà ïîëìåòðà íèæå.
    ai_output(self, other, "Info_Bartholo_12_05"); //Âçÿòü åãî, ïàðíè! Ïîðóáèòü íà êóñêè!
    ai_stopprocessinfos(self);
    self.guild = gil_ebr;
    npc_settrueguild(self, gil_ebr);
    npc_setattitude(self, att_hostile);
    npc_settempattitude(self, att_hostile);
    npc_settarget(self, other);
    ai_startstate(self, zs_attack, 1, "");
    grd_220 = hlp_getnpc(grd_220_gardist);
    grd_220.guild = gil_grd;
    npc_settrueguild(grd_220, gil_grd);
    npc_setattitude(grd_220, att_hostile);
    npc_settempattitude(grd_220, att_hostile);
    grd_221 = hlp_getnpc(grd_221_gardist);
    grd_221.guild = gil_grd;
    npc_settrueguild(grd_221, gil_grd);
    npc_setattitude(grd_221, att_hostile);
    npc_settempattitude(grd_221, att_hostile);
};

func void dia_extro_avi() {
    playvideo("Extro.bik");
    playvideo("PlayerOut.bik");
    playvideo("Credits.bik");
    exitgame();
};

instance info_thorus_exit(c_info) {
    npc = grd_200_thorus /*7196*/;
    nr = 999;
    condition = info_thorus_exit_condition;
    information = info_thorus_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_thorus_exit_condition() {
    return 1;
};

func void info_thorus_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_thorus_entercastle(c_info) {
    npc = grd_200_thorus /*7196*/;
    nr = 3;
    condition = info_thorus_entercastle_condition;
    information = info_thorus_entercastle_info;
    description = "Ïîõîæå, òû íå ïðîïóñòèøü â çàìîê íèêîãî ïîñòîðîííåãî...";
};

func int info_thorus_entercastle_condition() {
    if ((!c_npcbelongstooldcamp(other)) && (diego_gomezaudience == false)) {
        return 1;
    };
};

func void info_thorus_entercastle_info() {
    ai_output(other, self, "Info_EnterCastle_15_00"); //Ïîõîæå, òû íå ïðîïóñòèøü â çàìîê íèêîãî ïîñòîðîííåãî...
    ai_output(self, other, "Info_EnterCastle_09_01"); //Â çàìîê ìîãóò çàõîäèòü òîëüêî ëþäè Ãîìåçà.
};

instance info_thorus_workforgomez(c_info) {
    npc = grd_200_thorus /*7196*/;
    nr = 3;
    condition = info_thorus_workforgomez_condition;
    information = info_thorus_workforgomez_info;
    description = "ß õî÷ó ðàáîòàòü íà Ãîìåçà. ";
};

func int info_thorus_workforgomez_condition() {
    if ((npc_knowsinfo(hero, info_diego_joinoldcamp /*11817*/) || npc_knowsinfo(hero, info_thorus_entercastle /*8793*/)) && (npc_gettrueguild(hero) == gil_none)) {
        return 1;
    };
};

func void info_thorus_workforgomez_info() {
    ai_output(other, self, "Info_WorkForGomez_15_00"); //ß õî÷ó ðàáîòàòü íà Ãîìåçà.
    ai_output(self, other, "Info_WorkForGomez_09_01"); //Â ñàìîì äåëå? À ïî÷åìó òû äóìàåøü, ÷òî Ãîìåç çàèíòåðåñóåòñÿ òîáîé?
};

instance info_thorus_diegosentme(c_info) {
    npc = grd_200_thorus /*7196*/;
    nr = 1;
    condition = info_thorus_diegosentme_condition;
    information = info_thorus_diegosentme_info;
    description = "Äèåãî ñêàçàë, ÷òî ðåøàòü ýòî áóäåøü òû.";
};

func int info_thorus_diegosentme_condition() {
    if (npc_knowsinfo(hero, info_thorus_workforgomez /*8796*/) && npc_knowsinfo(hero, info_diego_joinoldcamp /*11817*/)) {
        return 1;
    };
};

func void info_thorus_diegosentme_info() {
    ai_output(other, self, "Info_Thorus_DiegoSentMe_15_00"); //Äèåãî ñêàçàë, ÷òî ðåøàòü ýòî áóäåøü òû.
    ai_output(self, other, "Info_Thorus_DiegoSentMe_09_01"); //Õ-ìì... Åñëè Äèåãî ñ÷èòàåò, ÷òî òû íàì ïîäõîäèøü, ïî÷åìó îí ÑÀÌ íå çàíèìàåòñÿ òîáîé?
    ai_output(self, other, "Info_Thorus_DiegoSentMe_09_02"); //Ïîçâîëü îáúÿñíèòü: Äèåãî äîëæåí èñïûòàòü òåáÿ. Åñëè ÎÍ ðåøèò, ÷òî òû íàì ïîäõîäèøü, ÿ ïîçâîëþ òåáå âîéòè â çàìîê è âñòðåòèòüñÿ ñ Ãîìåçîì.
    ai_output(self, other, "Info_Thorus_DiegoSentMe_09_03"); //Íó à âñå îñòàëüíîå óæå çàâèñèò îò òåáÿ, ïîíÿë?
    ai_output(other, self, "Info_Thorus_DiegoSentMe_15_04"); //ß ïîãîâîðþ ñ Äèåãî.
    b_logentry(ch1_joinoc, ch1_joinoc_7);
};

instance info_thorus_tryme(c_info) {
    npc = grd_200_thorus /*7196*/;
    nr = 1;
    condition = info_thorus_tryme_condition;
    information = info_thorus_tryme_info;
    description = "Ïî÷åìó áû òåáå ñàìîìó íå èñïûòàòü ìåíÿ?";
};

func int info_thorus_tryme_condition() {
    if (npc_knowsinfo(hero, info_thorus_workforgomez /*8796*/)) {
        return 1;
    };
};

func void info_thorus_tryme_info() {
    ai_output(other, self, "Info_Thorus_TryMe_15_00"); //Ïî÷åìó áû òåáå ñàìîìó íå èñïûòàòü ìåíÿ?
    ai_output(self, other, "Info_Thorus_TryMe_09_01"); //Âñå íå òàê ïðîñòî, ìàëûø! Êàæäîìó íîâè÷êó, êîòîðûé õî÷åò ÷åãî-òî äîáèòüñÿ çäåñü, íóæåí ïîêðîâèòåëü.
    ai_output(self, other, "Info_Thorus_TryMe_09_02"); //Ýòîò ïîêðîâèòåëü äîëæåí áûòü èç ëþäåé Ãîìåçà. Îí ñàì èñïûòàåò òåáÿ.
    ai_output(self, other, "Info_Thorus_TryMe_09_03"); //Ïîêðîâèòåëü áóäåò â îòâåòå, åñëè òû ïðîâàëèøü äåëî. Òàêîâ çàêîí.
};

instance info_thorus_trymeagain(c_info) {
    npc = grd_200_thorus /*7196*/;
    nr = 1;
    condition = info_thorus_trymeagain_condition;
    information = info_thorus_trymeagain_info;
    description = "Âîçìîæíî, ÿ ñìîãó áûòü ÷åì-òî ïîëåçåí òåáå.";
};

func int info_thorus_trymeagain_condition() {
    if (npc_knowsinfo(hero, info_thorus_tryme /*8802*/)) {
        return 1;
    };
};

func void info_thorus_trymeagain_info() {
    ai_output(other, self, "Info_Thorus_TryMeAgain_15_00"); //Âîçìîæíî, ÿ ñìîãó áûòü ÷åì-òî ïîëåçåí òåáå.
    ai_output(self, other, "Info_Thorus_TryMeAgain_09_01"); //Íåò. Òî, ÷åì çàíèìàåìñÿ ìû, ñòðàæíèêè, òåáå íåìíîãî íå ïî ïëå÷ó, ìàëûø.
    ai_output(self, other, "Info_Thorus_TryMeAgain_09_02"); //Òû ëó÷øå âûïîëíÿé çàäàíèÿ ñâîåãî ïîêðîâèòåëÿ.
};

instance info_thorus_trymeicandoit(c_info) {
    npc = grd_200_thorus /*7196*/;
    nr = 1;
    condition = info_thorus_trymeicandoit_condition;
    information = info_thorus_trymeicandoit_info;
    description = "ß âïîëíå ìîãó äåëàòü è òî, ÷òî òû ìíå ïðèêàæåøü.";
};

func int info_thorus_trymeicandoit_condition() {
    if (npc_knowsinfo(hero, info_thorus_trymeagain /*8805*/)) {
        return 1;
    };
};

func void info_thorus_trymeicandoit_info() {
    ai_output(other, self, "Info_Thorus_TryMeICanDoIt_15_00"); //ß âïîëíå ìîãó äåëàòü è òî, ÷òî òû ìíå ïðèêàæåøü.
    ai_output(self, other, "Info_Thorus_TryMeICanDoIt_09_01"); //Äà íó? Âèæó, íå òåðïèòñÿ ñòàòü ãåðîåì, äà? Åñòü îäíà çàäà÷êà - êàê ðàç äëÿ òîãî, êòî íå ðàáîòàåò íà Ãîìåçà.
    ai_output(self, other, "Info_Thorus_TryMeICanDoIt_09_02"); //Íî ïðåäóïðåæäàþ òåáÿ - åñëè ïðîâàëèøü äåëî, òî çàðàáîòàåøü ÷åðòîâó óéìó íåïðèÿòíîñòåé.
};

var int thorus_mordragko;

instance info_thorus_mordragko_offer(c_info) {
    npc = grd_200_thorus /*7196*/;
    nr = 1;
    condition = info_thorus_mordragko_offer_condition;
    information = info_thorus_mordragko_offer_info;
    description = "ß ãîòîâ âûïîëíèòü òâîå çàäàíèå.";
};

func int info_thorus_mordragko_offer_condition() {
    if (npc_knowsinfo(hero, info_thorus_trymeicandoit /*8808*/)) {
        return 1;
    };
};

func void info_thorus_mordragko_offer_info() {
    var c_npc mordrag;

    ai_output(other, self, "Info_Thorus_MordragKo_Offer_15_00"); //ß ãîòîâ âûïîëíèòü òâîå çàäàíèå.
    ai_output(self, other, "Info_Thorus_MordragKo_Offer_09_01"); //Òî, ÷òî ÿ òåáå ñåé÷àñ ñêàæó, äîëæíî îñòàòüñÿ ìåæäó íàìè, íèêòî äðóãîé íå äîëæåí çíàòü îá ýòîì. Ïîíÿë?
    ai_output(other, self, "Info_Thorus_MordragKo_Offer_15_02"); //Êîíå÷íî.
    ai_output(self, other, "Info_Thorus_MordragKo_Offer_09_03"); //Ó íàñ âîçíèêëà ïðîáëåìà ñ îäíèì òèïîì èç Íîâîãî Ëàãåðÿ. Åãî çîâóò Ìîðäðàã. Îí êðàäåò ó Áàðîíîâ.
    ai_output(self, other, "Info_Thorus_MordragKo_Offer_09_04"); //Ðàçóìååòñÿ, òî æå ìîæíî ñêàçàòü è î áîëüøèíñòâå âîðîâ èç Íîâîãî Ëàãåðÿ, íî ó ýòîãî òèïà õâàòàåò íàãëîñòè ïðèõîäèòü ê ÍÀÌ è ïðîäàâàòü ÍÀØÈ æå âåùè ÍÀØÈÌ æå ëþäÿì!
    ai_output(self, other, "Info_Thorus_MordragKo_Offer_09_05"); //Ýòî çàøëî ñëèøêîì äàëåêî. Íî îí çíàåò, ÷òî ÿ íå ìîãó íè÷åãî ñäåëàòü.
    ai_output(other, self, "Info_Thorus_MordragKo_Offer_15_06"); //Ïî÷åìó?
    ai_output(self, other, "Info_Thorus_MordragKo_Offer_09_07"); //Åãî çàùèùàþò ñàìè ìàãè.
    info_clearchoices(info_thorus_mordragko_offer /*8812*/);
    info_addchoice(info_thorus_mordragko_offer /*8812*/, "ß ïîçàáî÷óñü îá ýòîì.", info_thorus_mordragko_offer_back);
    info_addchoice(info_thorus_mordragko_offer /*8812*/, "Òû õî÷åøü, ÷òîáû ÿ ïðèêîí÷èë ýòîãî òèïà?", info_thorus_mordragko_killhim);
    info_addchoice(info_thorus_mordragko_offer /*8812*/, "Ãäå ÿ ìîãó íàéòè Ìîðäðàãà?", info_thorus_mordragko_where);
    info_addchoice(info_thorus_mordragko_offer /*8812*/, "Ïî÷åìó ìàãè çàùèùàþò ýòîãî Ìîðäðàãà?", info_thorus_mordragko_magesprotect);
    info_addchoice(info_thorus_mordragko_offer /*8812*/, "Ïîõîæå íà òî, ÷òî ãëàâíîé ïðîáëåìîé äëÿ òåáÿ ÿâëÿþòñÿ ìàãè...", info_thorus_mordragko_mageproblem);
    thorus_mordragko = log_running;
    log_createtopic(ch1_mordragko, log_mission);
    b_logentry(ch1_mordragko, ch1_mordragko_1);
    log_settopicstatus(ch1_mordragko, log_running);
    mordrag = hlp_getnpc(org_826_mordrag);
};

func void info_thorus_mordragko_offer_back() {
    ai_output(other, self, "Info_Thorus_MordragKo_OFFER_BACK_15_00"); //ß ïîçàáî÷óñü îá ýòîì.
    info_clearchoices(info_thorus_mordragko_offer /*8812*/);
};

func void info_thorus_mordragko_killhim() {
    ai_output(other, self, "Info_Thorus_MordragKo_KillHim_15_00"); //Òû õî÷åøü, ÷òîáû ÿ ïðèêîí÷èë ýòîãî òèïà?
    ai_output(self, other, "Info_Thorus_MordragKo_KillHim_09_01"); //ß ïðîñòî íå õî÷ó áîëüøå âèäåòü çäåñü åãî ðîæó. Êàê òû ýòîãî äîáüåøüñÿ - ìíå âñå ðàâíî.
};

func void info_thorus_mordragko_where() {
    ai_output(other, self, "Info_Thorus_MordragKo_Where_15_00"); //Ãäå ÿ ìîãó íàéòè Ìîðäðàãà?
    ai_output(self, other, "Info_Thorus_MordragKo_Where_09_01"); //Òû íàéäåøü åãî âîçëå þæíûõ âîðîò íà äðóãîé ñòîðîíå çàìêà. Ýòîò óáëþäîê íå ñìååò çàõîäèòü äàëüøå â Ëàãåðü.
    b_logentry(ch1_mordragko, ch1_mordragko_2);
};

func void info_thorus_mordragko_magesprotect() {
    ai_output(other, self, "Info_Thorus_MordragKo_MagesProtect_15_00"); //Ïî÷åìó ìàãè çàùèùàþò ýòîãî Ìîðäðàãà?
    ai_output(self, other, "Info_Thorus_MordragKo_MagesProtect_09_01"); //Îíè èñïîëüçóþò åãî â ðîëè ïîñûëüíîãî. Íàøè ìàãè ïîääåðæèâàþò ñâÿçü ñ ìàãàìè èç Íîâîãî Ëàãåðÿ è ÷àñòî îòïðàâëÿþò äðóã äðóãó ãîíöîâ.
    ai_output(self, other, "Info_Thorus_MordragKo_MagesProtect_09_02"); //Ñêîðåå âñåãî, èì Î×ÅÍÜ íå ïîíðàâèòñÿ, åñëè ÿ âûøâûðíó îäíîãî èç ãîíöîâ çà âîðîòà Ëàãåðÿ èëè óáüþ åãî.
    ai_output(other, self, "Info_Thorus_MordragKo_MagesProtect_15_03"); //À ÷òî íàñ÷åò ÌÅÍß? ×òî ìàãè ñäåëàþò ñî ÌÍÎÉ?
    ai_output(self, other, "Info_Thorus_MordragKo_MagesProtect_09_04"); //Òû çäåñü íîâåíüêèé. Âñå áóäåò íîðìàëüíî. Íî ÿ îòâå÷àþ çà ñâîèõ ëþäåé. Âîò ïî÷åìó î÷åíü âàæíî, ÷òîáû òû äåðæàë ñâîé ðîò íà çàìêå.
    thorus_mordragmagemessenger = true;
};

func void info_thorus_mordragko_mageproblem() {
    ai_output(other, self, "Info_Thorus_MordragKo_MageProblem_15_00"); //Ïîõîæå íà òî, ÷òî ãëàâíîé ïðîáëåìîé äëÿ òåáÿ ÿâëÿþòñÿ ìàãè...
    ai_output(self, other, "Info_Thorus_MordragKo_MageProblem_09_01"); //Äà, è ýòó ïðîáëåìó íå òàê-òî ëåãêî ðåøèòü. Íåñêîëüêî ëåò íàçàä îäèí èç Ïðèçðàêîâ ïîïûòàëñÿ ïðèðåçàòü Âåðõîâíîãî Ìàãà Êðóãà Îãíÿ, ïîêà òîò ñïàë.
    ai_output(self, other, "Info_Thorus_MordragKo_MageProblem_09_02"); //Ýòîãî áåäîëàãó ïîòîì íàøëè âî Âíåøíåì Êîëüöå... Òî÷íåå, òî, ÷òî îò íåãî îñòàëîñü, áûëî ðàçáðîñàíî ïî âñåìó Âíåøíåìó Êîëüöó...
};

instance info_thorus_mordragko_analyze(c_info) {
    npc = grd_200_thorus /*7196*/;
    nr = 1;
    condition = info_thorus_mordragko_analyze_condition;
    information = info_thorus_mordragko_analyze_info;
    permanent = true;
    description = "Ïî ïîâîäó Ìîðäðàãà...";
};

func int info_thorus_mordragko_analyze_condition() {
    if ((thorus_mordragko == log_running) && (mordragko_playerchosethorus != true)) {
        return 1;
    };
};

func void info_thorus_mordragko_analyze_info() {
    var c_npc mordrag;

    info_clearchoices(info_thorus_mordragko_analyze /*8821*/);
    info_addchoice(info_thorus_mordragko_analyze /*8821*/, "ß ïîçàáî÷óñü îá ýòîì.", info_thorus_mordragko_analyze_back);
    info_addchoice(info_thorus_mordragko_analyze /*8821*/, "Ãäå ÿ ìîãó íàéòè Ìîðäðàãà?", info_thorus_mordragko_where);
    mordrag = hlp_getnpc(org_826_mordrag);
    if (npc_isdead(mordrag)) {
        info_addchoice(info_thorus_mordragko_analyze /*8821*/, "Ñ÷èòàé, ÷òî Ìîðäðàã ñîâåðøèë ñâîþ ïîñëåäíþþ êðàæó!", info_thorus_mordragko_mordragdead);
    }
    else {
        if ((mordragko_hauab == true) || (mordragko_stayatnc == true)) {
            info_addchoice(info_thorus_mordragko_analyze /*8821*/, "Áîëüøå îí íå îñìåëèòñÿ ïîÿâèòüñÿ çäåñü!", info_thorus_mordragko_mordraggone);
        };
    };
};

func void info_thorus_mordragko_analyze_back() {
    ai_output(other, self, "Info_Thorus_MordragKo_ANALYZE_BACK_15_00"); //ß ïîçàáî÷óñü îá ýòîì.
    info_clearchoices(info_thorus_mordragko_analyze /*8821*/);
};

func void info_thorus_mordragko_mordragdead() {
    ai_output(other, self, "Info_Thorus_MordragKo_MordragDead_15_00"); //Ñ÷èòàé, ÷òî Ìîðäðàã ñîâåðøèë ñâîþ ïîñëåäíþþ êðàæó!
    ai_output(self, other, "Info_Thorus_MordragKo_MordragDead_09_01"); //Õî÷åøü ñêàçàòü, òû ïîáåäèë åãî? Íåïëîõî, ìàëûø!
    thorus_mordragko = log_success;
    log_settopicstatus(ch1_mordragko, log_success);
    b_logentry(ch1_mordragko, ch1_mordragko_3);
    b_givexp(xp_thorusmordragdead);
    info_clearchoices(info_thorus_mordragko_analyze /*8821*/);
};

func void info_thorus_mordragko_mordraggone() {
    ai_output(other, self, "Info_Thorus_MordragKo_MordragGone_15_00"); //Áîëüøå îí íå îñìåëèòñÿ ïîÿâèòüñÿ çäåñü!
    ai_output(self, other, "Info_Thorus_MordragKo_MordragGone_09_01"); //Áûëî áû ëó÷øå, åñëè áû òû óáèë åãî.
    thorus_mordragko = log_success;
    log_settopicstatus(ch1_mordragko, log_success);
    b_logentry(ch1_mordragko, ch1_mordragko_4);
    b_givexp(xp_thorusmordragko);
    info_clearchoices(info_thorus_mordragko_analyze /*8821*/);
};

instance info_thorus_mordragfailed(c_info) {
    npc = grd_200_thorus /*7196*/;
    nr = 1;
    condition = info_thorus_mordragfailed_condition;
    information = info_thorus_mordragfailed_info;
    important = true;
};

func int info_thorus_mordragfailed_condition() {
    if (mordragko_playerchosethorus == true) {
        return 1;
    };
};

func void info_thorus_mordragfailed_info() {
    ai_output(self, other, "Info_Thorus_MordragFailed_09_00"); //Òû ïðîâàëèë âñå äåëî! ß ãîâîðèë òåáå ÍÅ ÍÀÇÛÂÀÒÜ ÌÎÅÃÎ ÈÌÅÍÈ!!!
    ai_output(self, other, "Info_Thorus_MordragFailed_09_01"); //Òû ïðîâàëèë çàäàíèå! Çàáóäü îáî âñåì, ÷òî ÿ òåáå ãîâîðèë! Áîëüøå íå ñìåé ñîâàòü íîñ â ýòî äåëî!
    thorus_mordragko = log_failed;
    log_settopicstatus(ch1_mordragko, log_failed);
    b_logentry(ch1_mordragko, ch1_mordragko_5);
    ai_stopprocessinfos(self);
};

instance info_thorus_bribeguard(c_info) {
    npc = grd_200_thorus /*7196*/;
    nr = 1;
    condition = info_thorus_bribeguard_condition;
    information = info_thorus_bribeguard_info;
    description = "Åñëè ÿ ïîäåëþñü ðóäîé, òû ïîçâîëèøü âîéòè â çàìîê?";
};

func int info_thorus_bribeguard_condition() {
    var c_npc wache212;
    var c_npc wache213;

    wache212 = hlp_getnpc(grd_212_torwache);
    wache213 = hlp_getnpc(grd_213_torwache);
    if ((((npc_knowsinfo(hero, info_thorus_entercastle /*8793*/) && (npc_gettrueguild(other) != gil_stt)) && (npc_gettrueguild(other) != gil_grd)) && (wache212.aivar[29] == false)) && (wache213.aivar[29] == false)) {
        return 1;
    };
};

func void info_thorus_bribeguard_info() {
    ai_output(other, self, "Info_Thorus_BribeGuard_15_00"); //Åñëè áû ÿ ïîäåëèëñÿ ñ òîáîé ñâîèì çàïàñîì ðóäû, òû áû ïîçâîëèë ìíå âîéòè â çàìîê?
    ai_output(self, other, "Info_Thorus_BribeGuard_09_01"); //Ñâîèì çàïàñîì...
    ai_output(other, self, "Info_Thorus_BribeGuard_15_02"); //Ñêîëüêî?
    ai_output(self, other, "Info_Thorus_BribeGuard_09_02"); //Íó... Ïåðåñ÷åò ýòîé ðóäû äîëæåí çàíÿòü ìíîãî âðåìåíè. Ìû ñ ðåáÿòàìè äîëæíû ñ÷èòàòü äîñòàòî÷íî äîëãî, ÷òîáû òû óñïåë ïðîñêî÷èòü íåçàìå÷åííûì.
    ai_output(other, self, "Info_Thorus_BribeGuard_15_03"); //À ïîêîíêðåòíåé?
    ai_output(self, other, "Info_Thorus_BribeGuard_09_03"); //Òûñÿ÷è êóñêîâ äîëæíî áûòü äîñòàòî÷íî.
    ai_output(other, self, "Info_Thorus_BribeGuard_15_04"); //Òûñÿ÷à êóñêîâ?!
    ai_output(self, other, "Info_Thorus_BribeGuard_09_04"); //Íó, òû ìîæåøü ñòàòü îäíèì èç ëþäåé Ãîìåçà è ïðîéòè â çàìîê çàäàðîì.
};

instance info_thorus_give1000ore(c_info) {
    npc = grd_200_thorus /*7196*/;
    nr = 1;
    condition = info_thorus_give1000ore_condition;
    information = info_thorus_give1000ore_info;
    permanent = true;
    description = "Ó ìåíÿ åñòü òûñÿ÷à êóñêîâ ðóäû. Ïðîïóñòè ìåíÿ!";
};

func int info_thorus_give1000ore_condition() {
    var c_npc wache212;
    var c_npc wache213;

    wache212 = hlp_getnpc(grd_212_torwache);
    wache213 = hlp_getnpc(grd_213_torwache);
    if ((npc_knowsinfo(hero, info_thorus_bribeguard /*8831*/) && (wache212.aivar[29] == false)) && (wache213.aivar[29] == false)) {
        return 1;
    };
};

func void info_thorus_give1000ore_info() {
    var c_npc wache212;
    var c_npc wache213;

    ai_output(other, self, "Info_Thorus_Give1000Ore_15_00"); //Ó ìåíÿ åñòü òûñÿ÷à êóñêîâ ðóäû. Ïðîïóñòè ìåíÿ!
    if (npc_hasitems(other, itminugget) >= 1000) {
        b_giveinvitems(other, self, itminugget /*4517*/, 1000);
        ai_output(self, other, "Info_Thorus_Give1000Ore_09_01"); //Õîðîøî, ïðîõîäè. Ïîêà òû â çàìêå, ïîñòàðàéñÿ íå äåëàòü íèêàêèõ ãëóïîñòåé, ëàäíî?
        wache212 = hlp_getnpc(grd_212_torwache);
        wache213 = hlp_getnpc(grd_213_torwache);
        wache212.aivar[29] = true;
        wache213.aivar[29] = true;
    }
    else {
        ai_output(self, other, "Info_Thorus_Give1000Ore_09_02"); //Íå ïûòàéñÿ íàäóòü ìåíÿ, ìàëûø! Ó òåáÿ íåò òûñÿ÷è êóñêîâ!
    };
};

instance info_thorus_letterformages(c_info) {
    npc = grd_200_thorus /*7196*/;
    nr = 1;
    condition = info_thorus_letterformages_condition;
    information = info_thorus_letterformages_info;
    permanent = true;
    description = "Ìíå íóæíî ïîïàñòü â çàìîê. Ó ìåíÿ åñòü ïèñüìî.";
};

func int info_thorus_letterformages_condition() {
    var c_npc wache212;
    var c_npc wache213;

    wache212 = hlp_getnpc(grd_212_torwache);
    wache213 = hlp_getnpc(grd_213_torwache);
    if (((npc_knowsinfo(hero, info_thorus_entercastle /*8793*/) && (npc_hasitems(hero, itwr_fire_letter_01) || npc_hasitems(hero, itwr_fire_letter_02))) && (wache212.aivar[29] == false)) && (wache213.aivar[29] == false)) {
        return 1;
    };
};

func void info_thorus_letterformages_info() {
    ai_output(other, self, "Info_Thorus_LetterForMages_15_00"); //Ìíå íóæíî ïîïàñòü â çàìîê. Ó ìåíÿ åñòü ïèñüìî äëÿ Âåðõîâíîãî Ìàãà Êðóãà Îãíÿ.
    ai_output(self, other, "Info_Thorus_LetterForMages_09_01"); //È òû íàäååøüñÿ, ÷òî ÿ ïðîñòî ïðîïóùó òåáÿ â çàìîê, ÷òîáû òû ìîã ïîëó÷èòü ñâîþ íàãðàäó?
    ai_output(other, self, "Info_Thorus_LetterForMages_15_02"); //Äà.
    ai_output(self, other, "Info_Thorus_LetterForMages_09_03"); //Ëàäíî, ïîêàæè ìíå ïèñüìî.
    ai_output(other, self, "Info_Thorus_LetterForMages_15_04"); //Çàáóäü îá ýòîì - ÿ íå ïîçâîëþ ÒÅÁÅ ïðèêàðìàíèòü åãî!
    ai_output(self, other, "Info_Thorus_LetterForMages_09_05"); //Ëàäíî, óæå çàáûë.
};

instance info_thorus_readyforgomez(c_info) {
    npc = grd_200_thorus /*7196*/;
    nr = 1;
    condition = info_thorus_readyforgomez_condition;
    information = info_thorus_readyforgomez_info;
    description = "Äèåãî ñêàçàë, ÷òî ÿ ìîãó óâèäåòü Ãîìåçà!";
};

func int info_thorus_readyforgomez_condition() {
    if (diego_gomezaudience == true) {
        return 1;
    };
};

func void info_thorus_readyforgomez_info() {
    var c_npc wache212;
    var c_npc wache213;
    var c_npc wache218;

    ai_output(other, self, "Info_Thorus_ReadyForGomez_15_00"); //Äèåãî ñêàçàë, ÷òî ÿ ìîãó óâèäåòü Ãîìåçà!
    ai_output(self, other, "Info_Thorus_ReadyForGomez_09_01"); //Ýòî áóäó ðåøàòü ÿ!
    ai_output(other, self, "Info_Thorus_ReadyForGomez_15_02"); //È ÷òî òû ðåøèë?
    ai_output(self, other, "Info_Thorus_ReadyForGomez_09_03"); //Õ-ììì...
    ai_output(self, other, "Info_Thorus_ReadyForGomez_09_04"); //Äîëæåí ïðèçíàòü, ÷òî äî ñèõ ïîð òû ñïðàâëÿëñÿ íåïëîõî.
    ai_output(self, other, "Info_Thorus_ReadyForGomez_09_05"); //Õîðîøî! ß ïîçâîëþ òåáå âñòðåòèòüñÿ ñ Ãîìåçîì. Ñìîæåøü òû ñòàòü îäíèì èç íàñ èëè íåò - ðåøàòü åìó.
    ai_output(self, other, "Info_Thorus_ReadyForGomez_09_06"); //Ñ ýòîé ìèíóòû, ïàðåíü, âñå çàâèñèò òîëüêî îò òåáÿ.
    wache212 = hlp_getnpc(grd_212_torwache);
    wache213 = hlp_getnpc(grd_213_torwache);
    wache218 = hlp_getnpc(grd_218_gardist);
    wache212.aivar[29] = true;
    wache213.aivar[29] = true;
    wache218.aivar[29] = true;
};

instance info_thorus_krautbote(c_info) {
    npc = grd_200_thorus /*7196*/;
    nr = 4;
    condition = info_thorus_krautbote_condition;
    information = info_thorus_krautbote_info;
    permanent = true;
    description = "ß äîëæåí äîñòàâèòü ãðóç áîëîòíèêà Ãîìåçó îò Êîð Ãàëîìà.";
};

func int info_thorus_krautbote_condition() {
    var c_npc wache212;
    var c_npc wache213;
    var c_npc wache218;

    wache212 = hlp_getnpc(grd_212_torwache);
    wache213 = hlp_getnpc(grd_213_torwache);
    wache218 = hlp_getnpc(grd_218_gardist);
    if ((kalom_krautbote == log_running) && (((wache212.aivar[29] == false) || (wache213.aivar[29] == false)) || (wache218.aivar[29] == false))) {
        return 1;
    };
};

func void info_thorus_krautbote_info() {
    var c_npc wache212;
    var c_npc wache213;
    var c_npc wache218;

    ai_output(other, self, "Info_Thorus_Krautbote_15_00"); //ß äîëæåí äîñòàâèòü ãðóç áîëîòíèêà Ãîìåçó îò Êîð Ãàëîìà.
    ai_output(self, other, "Info_Thorus_Krautbote_09_01"); //Ïîêàæè!
    if (npc_hasitems(other, itmijoint_3) >= 30) {
        ai_output(self, other, "Info_Thorus_Krautbote_09_02"); //Õ-ììììììì...
        ai_output(self, other, "Info_Thorus_Krautbote_09_03"); //Õîðîøî! Òû ìîæåøü ïðîéòè. Îòïðàâëÿéñÿ ê äîìó Áàðîíîâ - òàì òåáÿ âñòðåòèò Áàðòîëî.
        wache212 = hlp_getnpc(grd_212_torwache);
        wache213 = hlp_getnpc(grd_213_torwache);
        wache218 = hlp_getnpc(grd_218_gardist);
        wache212.aivar[29] = true;
        wache213.aivar[29] = true;
        wache218.aivar[29] = true;
    }
    else {
        ai_output(self, other, "Info_Thorus_Krautbote_09_04"); //Äëÿ ïîñûëüíîãî ó òåáÿ ñëèøêîì ìàëî áîëîòíèêà! Íàäåþñü, ÷òî òû íå ïðîäàë åãî íà ñòîðîíó. Âîçâðàùàéñÿ ñ íîðìàëüíûì çàïàñîì!
    };
};

var int thorus_amulettgezeigt;

instance info_thorus_kdwsiegel(c_info) {
    npc = grd_200_thorus /*7196*/;
    nr = 4;
    condition = info_thorus_kdwsiegel_condition;
    information = info_thorus_kdwsiegel_info;
    permanent = true;
    description = "ß ïî ïîðó÷åíèþ ìàãîâ Âîäû. Ìíå íóæíî ïîïàñòü â çàìîê!";
};

func int info_thorus_kdwsiegel_condition() {
    if ((npc_knowsinfo(hero, org_826_mordrag_courier /*10984*/) || (npc_hasitems(other, kdw_amulett) >= 1)) && (thorus_amulettgezeigt == false)) {
        return 1;
    };
};

func void info_thorus_kdwsiegel_info() {
    var c_npc wache212;
    var c_npc wache213;

    ai_output(other, self, "Info_Thorus_KdWSiegel_15_00"); //ß ïî ïîðó÷åíèþ ìàãîâ Âîäû. Ìíå íóæíî ïîïàñòü â çàìîê!
    if (npc_hasitems(other, kdw_amulett) >= 1) {
        ai_output(self, other, "Info_Thorus_KdWSiegel_09_01"); //Ó òåáÿ åñòü àìóëåò ãîíöà. Ñ íèì òû ìîæåøü ïðîéòè ìèìî ñòðàæè.
        ai_output(self, other, "Info_Thorus_KdWSiegel_09_02"); //ß íå õî÷ó èìåòü äåëà ñ ìàãàìè, òàê ÷òî ïåðåñòàíü äîñòàâàòü ìåíÿ, ïîíÿë?
        wache212 = hlp_getnpc(grd_212_torwache);
        wache213 = hlp_getnpc(grd_213_torwache);
        wache212.aivar[29] = true;
        wache213.aivar[29] = true;
        thorus_amulettgezeigt = true;
    }
    else {
        ai_output(self, other, "Info_Thorus_KdWSiegel_09_03"); //Ïîðó÷åíèå, êàê æå! À àìóëåò ñâîé òû ãäå-òî çàáûë, òàê?
    };
};

instance info_thorus_sttgeschafft(c_info) {
    npc = grd_200_thorus /*7196*/;
    nr = 1;
    condition = info_thorus_sttgeschafft_condition;
    information = info_thorus_sttgeschafft_info;
    description = "ß ñäåëàë ýòî! Òåïåðü ÿ ïðèíàäëåæó ê ýòîìó Ëàãåðþ!";
};

func int info_thorus_sttgeschafft_condition() {
    if (npc_gettrueguild(other) == gil_stt) {
        return 1;
    };
};

func void info_thorus_sttgeschafft_info() {
    ai_output(other, self, "Info_Thorus_SttGeschafft_15_00"); //ß ñäåëàë ýòî! Òåïåðü ÿ ïðèíàäëåæó ê ýòîìó Ëàãåðþ!
    ai_output(self, other, "Info_Thorus_SttGeschafft_09_01"); //Ïîçäðàâëÿþ, ïàðåíü! Ñ ýòîãî ìîìåíòà ñòàðàéñÿ äåðæàòüñÿ ïîáëèæå ê Äèåãî.
    ai_output(self, other, "Info_Thorus_SttGeschafft_09_02"); //Ãîìåçà è Ðàâåíà ìîæíî áåñïîêîèòü òîëüêî ïî Î×ÅÍÜ âàæíîìó ïîâîäó.
};

instance info_thorus_perm2(c_info) {
    npc = grd_200_thorus /*7196*/;
    nr = 1;
    condition = info_thorus_perm2_condition;
    information = info_thorus_perm2_info;
    permanent = true;
    description = "Êàê èäóò äåëà?";
};

func int info_thorus_perm2_condition() {
    if ((npc_gettrueguild(other) == gil_stt) && (kapitel < 4)) {
        return 1;
    };
};

func void info_thorus_perm2_info() {
    ai_output(other, self, "Info_Thorus_PERM2_15_00"); //Êàê èäóò äåëà?
    ai_output(self, other, "Info_Thorus_PERM2_09_01"); //Ó íàñ íå òàê ìíîãî ïðîáëåì ñ Íîâûì Ëàãåðåì. Êóäà áîëüøå ìåíÿ áåñïîêîÿò ýòè áîëîòíûå ïðèäóðêè.
};

instance grd_200_thorus_gardist(c_info) {
    npc = grd_200_thorus /*7196*/;
    nr = 0;
    condition = grd_200_thorus_gardist_condition;
    information = grd_200_thorus_gardist_info;
    description = "Òû õîòåë ìíå ÷òî-òî ñêàçàòü?";
};

func int grd_200_thorus_gardist_condition() {
    if (((((corkalom_bringmcqballs == log_success) || npc_knowsinfo(hero, grd_214_torwache_seethorus /*9101*/)) || npc_knowsinfo(hero, grd_216_torwache_seethorus /*9141*/)) && (npc_gettrueguild(hero) == gil_stt)) && (!npc_knowsinfo(hero, grd_200_thorus_wannabemage /*8886*/))) {
        return true;
    };
};

func void grd_200_thorus_gardist_info() {
    var c_npc kdfwache;

    kdfwache = hlp_getnpc(grd_245_gardist);
    kdfwache.aivar[29] = true;
    ai_output(other, self, "GRD_200_Thorus_GARDIST_Info_15_01"); //Òû õîòåë ìíå ÷òî-òî ñêàçàòü?
    ai_output(self, other, "GRD_200_Thorus_GARDIST_Info_09_02"); //Äà. Òî, ÷òî òû ñäåëàë â øàõòå, äîêàçûâàåò íå òîëüêî òâîþ ñìåëîñòü. Òû ñèëåí è óìååøü õîðîøî äðàòüñÿ.
    ai_output(self, other, "GRD_200_Thorus_GARDIST_Info_09_03"); //ß ãîòîâ ïðèíÿòü òåáÿ â ðÿäû ñòðàæíèêîâ.
    if (hero.level < 10) {
        ai_output(self, other, "GRD_200_Thorus_GARDIST_Info_09_04"); //Íî òû ïîêà åùå íå ñîâñåì ãîòîâ ñòàòü èì. Ïðåæäå òåáå íóæíî íàáðàòüñÿ îïûòà.
        ai_stopprocessinfos(self);
        b_printguildcondition(10);
    }
    else {
        if (hero.level >= 10) {
            ai_output(self, other, "GRD_200_Thorus_GARDIST_Info_09_05"); //ß äàþ òåáå øàíñ. ×òî ñêàæåøü?
        };
    };
};

instance grd_200_thorus_aufnahme(c_info) {
    npc = grd_200_thorus /*7196*/;
    nr = 0;
    condition = grd_200_thorus_aufnahme_condition;
    information = grd_200_thorus_aufnahme_info;
    description = "ß õî÷ó ñòàòü ñòðàæíèêîì.";
};

func int grd_200_thorus_aufnahme_condition() {
    if (((npc_knowsinfo(hero, grd_200_thorus_gardist /*8875*/) && (hero.level >= 10)) && (npc_gettrueguild(hero) == gil_stt)) && (corristo_kdfaufnahme == 0)) {
        return true;
    };
};

func void grd_200_thorus_aufnahme_info() {
    var c_npc kdfwache;

    ai_output(other, self, "GRD_200_Thorus_AUFNAHME_Info_15_01"); //ß õî÷ó ñòàòü ñòðàæíèêîì.
    ai_output(self, other, "GRD_200_Thorus_AUFNAHME_Info_09_02"); //Ðàä ñëûøàòü ýòî. Íî ïðåæäå ÿ äîëæåí ñêàçàòü òåáå òî, ÷òî âñåãäà ãîâîðþ íîâè÷êàì. Ñëóøàé âíèìàòåëüíî, ïîâòîðÿòü ÿ íå áóäó.
    ai_output(self, other, "GRD_200_Thorus_AUFNAHME_Info_09_03"); //Áûëî âðåìÿ, êîãäà òû áûë ñàì ïî ñåáå. Òåïåðü ýòî â ïðîøëîì. Ìîè ëþäè äåðæàòñÿ äðóã äðóãà. Ìû, ñòðàæíèêè, îõðàíÿåì ïîêîé Áàðîíîâ, ðóäó, øàõòó è Ëàãåðü.
    ai_output(self, other, "GRD_200_Thorus_AUFNAHME_Info_09_04"); //Ðóäîêîïû äîáûâàþò ðóäó, íî ýòî ìû ñëåäèì çà òåì, ÷òîáû èõ íå ñîæðàëè ïîëçóíû. Ïåðåãîâîðû ñ êîðîëåì âåäóò Áàðîíû, íî ýòî ìû çàùèùàåì èõ.
    ai_output(self, other, "GRD_200_Thorus_AUFNAHME_Info_09_05"); //Äíåì è íî÷üþ ìû íàõîäèìñÿ â øàõòå. Äíåì è íî÷üþ ìû ñòîèì íà ñòðàæå ó âîðîò Ëàãåðÿ è ñëåäèì çà òåì, ÷òîáû åãî îáèòàòåëè ìîãëè ñïàòü ñïîêîéíî.
    ai_output(self, other, "GRD_200_Thorus_AUFNAHME_Info_09_06"); //Ìû íà÷èíàëè êàê äèêàÿ øàéêà, íî ñåé÷àñ ìû - ñèëà, ñ êîòîðîé íåëüçÿ íå ñ÷èòàòüñÿ. È ìû ìíîãî ðàáîòàåì, äëÿ òîãî ÷òîáû ñäåëàòü íàøó æèçíü òàêîé, êàêàÿ îíà åñòü.
    ai_output(self, other, "GRD_200_Thorus_AUFNAHME_Info_09_07"); //Îò ñâîèõ ëþäåé ÿ æäó òîëüêî îäíîãî: ÷òîáû îíè âñåãäà äåðæàëèñü âìåñòå. Òîëüêî âìåñòå ìû ñìîæåì ñïðàâèòüñÿ ñ ëþáûìè ïðîáëåìàìè.
    ai_output(self, other, "GRD_200_Thorus_AUFNAHME_Info_09_08"); //È âûæèòü.
    ai_output(self, other, "GRD_200_Thorus_AUFNAHME_Info_09_09"); //Òû íàó÷èøüñÿ âñåìó ïî õîäó äåëà. Áóäü ãîòîâ îêàçàòü ïîìîùü òîìó, êîìó îíà íóæíà, è äåëàòü òî, ÷òî îò òåáÿ ïîòðåáóåòñÿ.
    ai_output(self, other, "GRD_200_Thorus_AUFNAHME_Info_09_10"); //Èäè è ïîïðîñè Ñòîóíà äàòü òåáå äîñïåõè è ìå÷.
    ai_output(self, other, "GRD_200_Thorus_AUFNAHME_Info_09_11"); //Òû íàéäåøü åãî â îðóæåéíîé ëàâêå âî Âíóòðåííåì Êîëüöå.
    kdfwache = hlp_getnpc(grd_245_gardist);
    kdfwache.aivar[29] = false;
    npc_settrueguild(hero, gil_grd);
    hero.guild = gil_grd;
};

instance grd_200_thorus_nochwas(c_info) {
    npc = grd_200_thorus /*7196*/;
    condition = grd_200_thorus_nochwas_condition;
    information = grd_200_thorus_nochwas_info;
    important = true;
};

func int grd_200_thorus_nochwas_condition() {
    if (npc_knowsinfo(hero, grd_200_thorus_aufnahme /*8879*/) && (npc_gettrueguild(hero) == gil_grd)) {
        return true;
    };
};

func void grd_200_thorus_nochwas_info() {
    ai_output(self, other, "GRD_200_Thorus_NOCHWAS_Info_09_01"); //Äà, è âîò åùå ÷òî...
    ai_output(self, other, "GRD_200_Thorus_NOCHWAS_Info_09_02"); //Äîáðî ïîæàëîâàòü â Ñòðàæó!
    ai_stopprocessinfos(self);
    log_createtopic(ge_becomeguard, log_note);
    b_logentry(ge_becomeguard, ge_becomeguard_3);
};

instance grd_200_thorus_wannabemage(c_info) {
    npc = grd_200_thorus /*7196*/;
    nr = 0;
    condition = grd_200_thorus_wannabemage_condition;
    information = grd_200_thorus_wannabemage_info;
    description = "Ìåíÿ áîëüøå óâëåêàåò ïóòü ìàãèè.";
};

func int grd_200_thorus_wannabemage_condition() {
    if (npc_knowsinfo(hero, grd_200_thorus_gardist /*8875*/) && (!npc_knowsinfo(hero, grd_200_thorus_aufnahme /*8879*/))) {
        return true;
    };
};

func void grd_200_thorus_wannabemage_info() {
    var c_npc corristo;

    ai_output(other, self, "GRD_200_Thorus_WANNABEMAGE_Info_15_01"); //Ìåíÿ áîëüøå óâëåêàåò ïóòü ìàãèè.
    ai_output(self, other, "GRD_200_Thorus_WANNABEMAGE_Info_09_02"); //Òîãäà, íàâåðíîå, òåáå ñòîèò ïîãîâîðèòü ñ Êîððèñòî. Îí ó÷èë Ìèëüòåíà. Óâåðåí, òåáÿ íè÷òî íå îñòàíîâèò.
    corristo = hlp_getnpc(kdf_402_corristo);
    npc_exchangeroutine(corristo, "WAITFORSC");
    ai_continueroutine(corristo);
};

instance grd_200_thorus_teach(c_info) {
    npc = grd_200_thorus /*7196*/;
    nr = 10;
    condition = grd_200_thorus_teach_condition;
    information = grd_200_thorus_teach_info;
    permanent = true;
    description = "Òû ìîæåøü ÷åìó-íèáóäü íàó÷èòü ìåíÿ?";
};

func int grd_200_thorus_teach_condition() {
    if (npc_gettrueguild(hero) == gil_grd) {
        return true;
    };
};

func void grd_200_thorus_teach_info() {
    ai_output(other, self, "GRD_200_Thorus_Teach_15_00"); //Òû áóäåøü ó÷èòü ìåíÿ?
    ai_output(self, other, "GRD_200_Thorus_Teach_09_01"); //ß ìîãó ïîêàçàòü òåáå, êàê óëó÷øèòü ñâîè íàâûêè è ñòàòü ñèëüíåå.
    if (log_thorustrain == false) {
        log_createtopic(ge_teacheroc, log_note);
        b_logentry(ge_teacheroc, ge_teacheroc_thorus1);
        log_thorustrain = true;
    };
    info_clearchoices(grd_200_thorus_teach /*8890*/);
    info_addchoice(grd_200_thorus_teach /*8890*/, dialog_back, grd_200_thorus_teach_back);
    info_addchoice(grd_200_thorus_teach /*8890*/, b_buildlearnstring(name_learnstrength_5, 5 * lpcost_attribute_strength, 0), grd_200_thorus_teach_str_5);
    info_addchoice(grd_200_thorus_teach /*8890*/, b_buildlearnstring(name_learnstrength_1, lpcost_attribute_strength, 0), grd_200_thorus_teach_str_1);
    info_addchoice(grd_200_thorus_teach /*8890*/, b_buildlearnstring(name_learndexterity_5, 5 * lpcost_attribute_dexterity, 0), grd_200_thorus_teach_dex_5);
    info_addchoice(grd_200_thorus_teach /*8890*/, b_buildlearnstring(name_learndexterity_1, lpcost_attribute_dexterity, 0), grd_200_thorus_teach_dex_1);
};

func void grd_200_thorus_teach_back() {
    info_clearchoices(grd_200_thorus_teach /*8890*/);
};

func void grd_200_thorus_teach_str_1() {
    b_buyattributepoints(other, atr_strength, lpcost_attribute_strength);
    info_clearchoices(grd_200_thorus_teach /*8890*/);
    info_addchoice(grd_200_thorus_teach /*8890*/, dialog_back, grd_200_thorus_teach_back);
    info_addchoice(grd_200_thorus_teach /*8890*/, b_buildlearnstring(name_learnstrength_5, 5 * lpcost_attribute_strength, 0), grd_200_thorus_teach_str_5);
    info_addchoice(grd_200_thorus_teach /*8890*/, b_buildlearnstring(name_learnstrength_1, lpcost_attribute_strength, 0), grd_200_thorus_teach_str_1);
    info_addchoice(grd_200_thorus_teach /*8890*/, b_buildlearnstring(name_learndexterity_5, 5 * lpcost_attribute_dexterity, 0), grd_200_thorus_teach_dex_5);
    info_addchoice(grd_200_thorus_teach /*8890*/, b_buildlearnstring(name_learndexterity_1, lpcost_attribute_dexterity, 0), grd_200_thorus_teach_dex_1);
};

func void grd_200_thorus_teach_str_5() {
    b_buyattributepoints(other, atr_strength, 5 * lpcost_attribute_strength);
    info_clearchoices(grd_200_thorus_teach /*8890*/);
    info_addchoice(grd_200_thorus_teach /*8890*/, dialog_back, grd_200_thorus_teach_back);
    info_addchoice(grd_200_thorus_teach /*8890*/, b_buildlearnstring(name_learnstrength_5, 5 * lpcost_attribute_strength, 0), grd_200_thorus_teach_str_5);
    info_addchoice(grd_200_thorus_teach /*8890*/, b_buildlearnstring(name_learnstrength_1, lpcost_attribute_strength, 0), grd_200_thorus_teach_str_1);
    info_addchoice(grd_200_thorus_teach /*8890*/, b_buildlearnstring(name_learndexterity_5, 5 * lpcost_attribute_dexterity, 0), grd_200_thorus_teach_dex_5);
    info_addchoice(grd_200_thorus_teach /*8890*/, b_buildlearnstring(name_learndexterity_1, lpcost_attribute_dexterity, 0), grd_200_thorus_teach_dex_1);
};

func void grd_200_thorus_teach_dex_1() {
    b_buyattributepoints(other, atr_dexterity, lpcost_attribute_dexterity);
    info_clearchoices(grd_200_thorus_teach /*8890*/);
    info_addchoice(grd_200_thorus_teach /*8890*/, dialog_back, grd_200_thorus_teach_back);
    info_addchoice(grd_200_thorus_teach /*8890*/, b_buildlearnstring(name_learnstrength_5, 5 * lpcost_attribute_strength, 0), grd_200_thorus_teach_str_5);
    info_addchoice(grd_200_thorus_teach /*8890*/, b_buildlearnstring(name_learnstrength_1, lpcost_attribute_strength, 0), grd_200_thorus_teach_str_1);
    info_addchoice(grd_200_thorus_teach /*8890*/, b_buildlearnstring(name_learndexterity_5, 5 * lpcost_attribute_dexterity, 0), grd_200_thorus_teach_dex_5);
    info_addchoice(grd_200_thorus_teach /*8890*/, b_buildlearnstring(name_learndexterity_1, lpcost_attribute_dexterity, 0), grd_200_thorus_teach_dex_1);
};

func void grd_200_thorus_teach_dex_5() {
    b_buyattributepoints(other, atr_dexterity, 5 * lpcost_attribute_dexterity);
    info_clearchoices(grd_200_thorus_teach /*8890*/);
    info_addchoice(grd_200_thorus_teach /*8890*/, dialog_back, grd_200_thorus_teach_back);
    info_addchoice(grd_200_thorus_teach /*8890*/, b_buildlearnstring(name_learnstrength_5, 5 * lpcost_attribute_strength, 0), grd_200_thorus_teach_str_5);
    info_addchoice(grd_200_thorus_teach /*8890*/, b_buildlearnstring(name_learnstrength_1, lpcost_attribute_strength, 0), grd_200_thorus_teach_str_1);
    info_addchoice(grd_200_thorus_teach /*8890*/, b_buildlearnstring(name_learndexterity_5, 5 * lpcost_attribute_dexterity, 0), grd_200_thorus_teach_dex_5);
    info_addchoice(grd_200_thorus_teach /*8890*/, b_buildlearnstring(name_learndexterity_1, lpcost_attribute_dexterity, 0), grd_200_thorus_teach_dex_1);
};

instance grd_200_thorus_zweihand1(c_info) {
    npc = grd_200_thorus /*7196*/;
    nr = 0;
    condition = grd_200_thorus_zweihand1_condition;
    information = grd_200_thorus_zweihand1_info;
    permanent = true;
    description = b_buildlearnstring(name_learn2h_1, lpcost_talent_2h_1, 0);
};

func int grd_200_thorus_zweihand1_condition() {
    if (((npc_gettalentskill(hero, npc_talent_1h) == 2) && (npc_gettalentskill(hero, npc_talent_2h) < 1)) && (npc_gettrueguild(hero) == gil_grd)) {
        return true;
    };
};

func void grd_200_thorus_zweihand1_info() {
    if (log_thorusfight == false) {
        log_createtopic(ge_teacheroc, log_note);
        b_logentry(ge_teacheroc, ge_teacheroc_thorus2);
        log_thorusfight = true;
    };
    ai_output(other, self, "GRD_200_Thorus_ZWEIHAND1_Info_15_01"); //ß õî÷ó íàó÷èòüñÿ âëàäåòü äâóðó÷íûì ìå÷îì.
    if (b_giveskill(other, npc_talent_2h, 1, lpcost_talent_2h_1)) {
        ai_output(self, other, "GRD_200_Thorus_ZWEIHAND1_Info_09_02"); //Ëàäíî, íà÷íåì ñ ñàìîãî ïðîñòîãî.
        ai_output(self, other, "GRD_200_Thorus_ZWEIHAND1_Info_09_03"); //Äåðæè ìå÷ ãîðèçîíòàëüíî. Òåáå ïîíàäîáèòñÿ áîëüøîé çàìàõ, ÷òîáû àòàêîâàòü ïðîòèâíèêà òÿæåëûì îðóæèåì.
        ai_output(self, other, "GRD_200_Thorus_ZWEIHAND1_Info_09_04"); //Ïîäíèìè ðóêó è áåé âåðòèêàëüíî âíèç. Îáû÷íîãî ýòîãî äîñòàòî÷íî, ÷òîáû èçáàâèòüñÿ îò ëþáîãî âðàãà.
        ai_output(self, other, "GRD_200_Thorus_ZWEIHAND1_Info_09_05"); //Èñïîëüçóé èíåðöèþ äâèæåíèÿ ÷òîáû âåðíóòüñÿ â èñõîäíóþ ïîçèöèþ.
        ai_output(self, other, "GRD_200_Thorus_ZWEIHAND1_Info_09_06"); //Äâóðó÷íûé ìå÷ ïðîñòî èäåàëåí äëÿ áîêîâûõ óäàðîâ, ÷òîáû äåðæàòü ïðîòèâíèêà íà ðàññòîÿíèè.
        ai_output(self, other, "GRD_200_Thorus_ZWEIHAND1_Info_09_07"); //Ïîæàëóé, íà÷íåì ñ ýòîãî. Òðåíèðóéñÿ.
    };
};

instance grd_200_thorus_zweihand2(c_info) {
    npc = grd_200_thorus /*7196*/;
    nr = 0;
    condition = grd_200_thorus_zweihand2_condition;
    information = grd_200_thorus_zweihand2_info;
    permanent = true;
    description = b_buildlearnstring(name_learn2h_2, lpcost_talent_2h_2, 0);
};

func int grd_200_thorus_zweihand2_condition() {
    if ((npc_gettalentskill(hero, npc_talent_2h) == 1) && (npc_gettrueguild(hero) == gil_grd)) {
        return true;
    };
};

func void grd_200_thorus_zweihand2_info() {
    ai_output(other, self, "GRD_200_Thorus_ZWEIHAND2_Info_15_01"); //ß õî÷ó áîëüøå óçíàòü î äâóðó÷íîì ìå÷å.
    if (b_giveskill(other, npc_talent_2h, 2, lpcost_talent_2h_2)) {
        ai_output(self, other, "GRD_200_Thorus_ZWEIHAND2_Info_09_02"); //Ïðåæäå âñåãî, ñìåíè èñõîäíóþ ñòîéêó. Äåðæè ìå÷ âåðòèêàëüíî, âîçüìèñü çà ðóêîÿòü îáåèìè ðóêàìè è îòâåäè åãî â ñòîðîíó.
        ai_output(self, other, "GRD_200_Thorus_ZWEIHAND2_Info_09_03"); //Òåïåðü áûñòðî âåäè åãî âíèç, çàìàõ îò ïëå÷à. À òåïåðü - ðóáÿùèé óäàð âïðàâî!
        ai_output(self, other, "GRD_200_Thorus_ZWEIHAND2_Info_09_04"); //Ó ïðîòèâíèêà íå áóäåò íè åäèíîãî øàíñà ê òåáå ïîäîáðàòüñÿ.
        ai_output(self, other, "GRD_200_Thorus_ZWEIHAND2_Info_09_05"); //Èç ýòîãî æå ïîëîæåíèÿ ìîæíî íàíåñòè ðåçêèé êîëþùèé óäàð âïåðåä, ÷òîáû îòîãíàòü âðàãà.
        ai_output(self, other, "GRD_200_Thorus_ZWEIHAND2_Info_09_06"); //Ðàçâåðíèñü, ÷òîáû ïðèäàòü ìå÷ó äîëæíûé ðàçãîí, - è åùå îäèí ðóáÿùèé óäàð!
        ai_output(self, other, "GRD_200_Thorus_ZWEIHAND2_Info_09_07"); //Åñëè ýòîãî îêàæåòñÿ íåäîñòàòî÷íî, ìå÷ ïî èíåðöèè ëåãêî âåðíåòñÿ â èñõîäíîå ïîëîæåíèå.
        ai_output(self, other, "GRD_200_Thorus_ZWEIHAND2_Info_09_08"); //Çàêîí÷èâ ñåðèþ, çàùèùàéñÿ è æäè ìîìåíòà, ÷òîáû àòàêîâàòü ñíîâà.
        ai_output(self, other, "GRD_200_Thorus_ZWEIHAND2_Info_09_09"); //Ñåêðåò óñïåõà êðîåòñÿ â ÷åðåäîâàíèè óäàðîâ è áîåâûõ ñòîåê.
    };
};

instance info_jackal_exit(c_info) {
    npc = grd_201_jackal /*7198*/;
    nr = 999;
    condition = info_jackal_exit_condition;
    information = info_jackal_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_jackal_exit_condition() {
    return 1;
};

func void info_jackal_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_jackal_hello(c_info) {
    npc = grd_201_jackal /*7198*/;
    nr = 3;
    condition = info_jackal_hello_condition;
    information = info_jackal_hello_info;
    important = true;
};

func int info_jackal_hello_condition() {
    if ((kapitel <= 2) && (npc_gettrueguild(hero) == gil_none)) {
        return 1;
    };
};

func void info_jackal_hello_info() {
    ai_output(self, other, "Info_Jackal_Hello_07_00"); //À! Êòî-òî íîâåíüêèé!
    ai_output(other, self, "Info_Jackal_Hello_15_01"); //×òî òåáå íóæíî?
    ai_output(self, other, "Info_Jackal_Hello_07_02"); //ß õî÷ó ïðåäëîæèòü òåáå ïîìîùü. Òû çäåñü íîâåíüêèé, à íîâè÷êè âñåãäà ïîïàäàþò â íåïðèÿòíîñòè... Òû ìîæåøü èçáåæàòü èõ ïî î÷åíü äîñòóïíîé öåíå.
    ai_output(self, other, "Info_Jackal_Hello_07_03"); //Âñåãî äåñÿòü êóñêîâ ðóäû, ïàðåíü! Çäåñü äàæå ãîâîðèòü íå î ÷åì.
    info_clearchoices(info_jackal_hello /*8907*/);
    info_addchoice(info_jackal_hello /*8907*/, "À ÷òî åñëè ÿ îòêàæóñü ïëàòèòü?", info_jackal_hello_whatif);
    info_addchoice(info_jackal_hello /*8907*/, "È ÷òî ÿ ïîëó÷ó çà íåå?", info_jackal_hello_whatdoiget);
    info_addchoice(info_jackal_hello /*8907*/, "Âîò äåñÿòü êóñêîâ. È òû äîëæåí áóäåøü ïîìî÷ü ìíå.", info_jackal_hello_pay);
};

func void info_jackal_hello_pay() {
    ai_output(other, self, "Info_Jackal_Hello_Pay_15_00"); //Âîò äåñÿòü êóñêîâ. È òû äîëæåí áóäåøü ïîìî÷ü ìíå, åñëè ó ìåíÿ âîçíèêíóò ïðîáëåìû.
    if (npc_hasitems(other, itminugget) >= 10) {
        ai_output(self, other, "Info_Jackal_Hello_Pay_07_01"); //Åñëè ÿ áóäó ïîáëèçîñòè, ìîæåøü íà ìåíÿ ðàññ÷èòûâàòü. Ìåíÿ âñåãäà ìîæíî íàéòè ìåæäó ðûíêîì è þæíûìè âîðîòàìè.
        ai_output(self, other, "Info_Jackal_Hello_Pay_07_02"); //Äðóãèå ìåñòà îõðàíÿþò Ôëåò÷åð è Áëàäâèí.
        b_giveinvitems(other, self, itminugget /*4517*/, 10);
        jackal_protectionpaid = true;
        npc_setpermattitude(self, att_friendly);
        jackal_payday = b_setdaytolerance();
    }
    else {
        ai_output(self, other, "Info_Jackal_Schutz_NoOre_07_00"); //Ýé, êîãî òû ïûòàåøüñÿ îáìàíóòü?! Âîçâðàùàéñÿ, êîãäà ó òåáÿ áóäåò ðóäà!
    };
    info_clearchoices(info_jackal_hello /*8907*/);
};

func void info_jackal_hello_whatdoiget() {
    ai_output(other, self, "Info_Jackal_Hello_WhatDoIGet_15_00"); //È ÷òî ÿ ïîëó÷ó çà íåå?
    ai_output(self, other, "Info_Jackal_Hello_WhatDoIGet_07_01"); //Ïîêà òû íàõîäèøüñÿ íà ìîåé òåððèòîðèè, ÿ áóäó çàùèùàòü òåáÿ.
    ai_output(self, other, "Info_Jackal_Hello_WhatDoIGet_07_02"); //Åñëè ó òåáÿ âîçíèêíóò ïðîáëåìû ñ êåì-íèáóäü èç Íîâîãî Ëàãåðÿ èëè áîëîòíûå ïðèäóðêè íà÷íóò äåéñòâîâàòü òåáå íà íåðâû, ìîæåøü íà ìåíÿ ðàññ÷èòûâàòü.
    ai_output(self, other, "Info_Jackal_Hello_WhatDoIGet_07_03"); //Åñëè ïîññîðèøüñÿ ñ êåì-íèáóäü èç ðóäîêîïîâ, ìû âñòàíåì íà ñòîðîíó òîãî, êòî çàïëàòèò - âèäèøü, êàê âñå ïðîñòî.
    ai_output(other, self, "Info_Jackal_Hello_WhatDoIGet_15_04"); //À åñëè ìû îáà çàïëàòèì?
    ai_output(self, other, "Info_Jackal_Hello_WhatDoIGet_07_05"); //Òîãäà ìû ïðîñòî áóäåì ñèäåòü è ñìîòðåòü. Íî òàêîå ðåäêî ñëó÷àåòñÿ.
};

func void info_jackal_hello_whatif() {
    ai_output(other, self, "Info_Jackal_Hello_WhatIf_15_00"); //À ÷òî åñëè ÿ îòêàæóñü ïëàòèòü?
    ai_output(self, other, "Info_Jackal_Hello_WhatIf_07_01"); //Ýé, ïàðåíü, íå íàïðÿãàéñÿ òàê! Òû çäåñü åùå íîâè÷îê, òåáå ìíîãîå ïðåäñòîèò óçíàòü. ß íå õî÷ó íà òåáÿ äàâèòü - ïîäêîïè ðóäû, çàïëàòèøü, êîãäà áóäåøü ãîòîâ.
    ai_output(self, other, "Info_Jackal_Hello_WhatIf_07_02"); //Òû ìîæåøü ñäåëàòü ýòî êîãäà óãîäíî, íî ïîéìè è ìåíÿ - íå ñòîèò ðàññ÷èòûâàòü íà ìîþ ïîìîùü äî òåõ ïîð, ïîêà òû íå ïîìîæåøü ìíå ñïðàâèòüñÿ ñ òåêóùèìè ðàñõîäàìè.
    info_addchoice(info_jackal_hello /*8907*/, "Åùå óâèäèìñÿ.", info_jackal_hello_later);
};

func void info_jackal_hello_later() {
    ai_output(other, self, "Info_Jackal_Hello_Later_15_00"); //Åùå óâèäèìñÿ.
    ai_output(self, other, "Info_Jackal_Hello_Later_07_01"); //Òû òîëüêî áåðåãè ñåáÿ!
    jackal_protectionpaid = false;
    npc_setpermattitude(self, att_neutral);
    jackal_payday = b_setdaytolerance();
    info_clearchoices(info_jackal_hello /*8907*/);
};

instance info_jackal_schutz(c_info) {
    npc = grd_201_jackal /*7198*/;
    nr = 3;
    condition = info_jackal_schutz_condition;
    information = info_jackal_schutz_info;
    permanent = true;
    description = "ß òóò ïîäóìàë î òâîåì ïðåäëîæåíèè - âîò äåñÿòü êóñêîâ ðóäû.";
};

func int info_jackal_schutz_condition() {
    if (npc_knowsinfo(hero, info_jackal_hello /*8907*/) && (jackal_protectionpaid == false)) {
        return 1;
    };
};

func void info_jackal_schutz_info() {
    ai_output(other, self, "Info_Jackal_Schutz_15_00"); //ß òóò ïîäóìàë î òâîåì ïðåäëîæåíèè - âîò äåñÿòü êóñêîâ ðóäû.
    if (npc_hasitems(other, itminugget) >= 10) {
        ai_output(self, other, "Info_Jackal_Schutz_07_01"); //Òû ñäåëàë ïðàâèëüíûé âûáîð, ïàðåíü! Ñ ýòîãî ìîìåíòà ÿ áóäó òåáÿ çàùèùàòü!
        b_giveinvitems(other, self, itminugget /*4517*/, 10);
        jackal_protectionpaid = true;
        npc_setpermattitude(self, att_friendly);
        jackal_payday = b_setdaytolerance();
    }
    else {
        ai_output(self, other, "Info_Jackal_Schutz_07_02"); //ß ÷òî-òî íå âèæó ðóäû, ïàðåíü. Âîçâðàùàéñÿ, êîãäà ó òåáÿ áóäåò ÷åì çàïëàòèòü.
    };
};

instance info_jackal_permpaid(c_info) {
    npc = grd_201_jackal /*7198*/;
    nr = 3;
    condition = info_jackal_permpaid_condition;
    information = info_jackal_permpaid_info;
    permanent = true;
    description = "Êàê äåëà?";
};

func int info_jackal_permpaid_condition() {
    if (jackal_protectionpaid == true) {
        return 1;
    };
};

func void info_jackal_permpaid_info() {
    ai_output(other, self, "Info_Jackal_PermPaid_15_00"); //Íó è êàê èäóò äåëà?
    ai_output(self, other, "Info_Jackal_PermPaid_07_01"); //Òû âñåãäà ìîæåøü ðàññ÷èòûâàòü íà ìåíÿ, ìàëûø!
};

instance grd_201_jackal_welcome(c_info) {
    npc = grd_201_jackal /*7198*/;
    condition = grd_201_jackal_welcome_condition;
    information = grd_201_jackal_welcome_info;
    important = true;
};

func int grd_201_jackal_welcome_condition() {
    if (npc_gettrueguild(hero) == gil_grd) {
        return true;
    };
};

func void grd_201_jackal_welcome_info() {
    ai_output(self, other, "GRD_201_Jackal_WELCOME_Info_07_01"); //ß ãëÿæó, òû áûñòðî îñâîèëñÿ çäåñü! Òàê äåðæàòü, ïàðåíü!
};

instance info_jackal_payday(c_info) {
    npc = grd_201_jackal /*7198*/;
    condition = info_jackal_payday_condition;
    information = info_jackal_payday_info;
    important = true;
};

func int info_jackal_payday_condition() {
    if (fmtaken) {
        return true;
    };
};

func void info_jackal_payday_info() {
    if (c_npcbelongstonewcamp(hero)) {
        if (((oldheroguild == gil_grd) || (oldheroguild == gil_kdf)) || (oldheroguild == gil_stt)) {
            ai_output(self, other, "Info_Jackal_PAYDAY_07_01"); //Ýé, òû òîëüêî ïîñìîòðè! Ýòî îäèí èç òåõ ïðåäàòåëåé, ÷òî ïåðåøëè â äðóãîé Ëàãåðü!
            ai_output(self, other, "Info_Jackal_PAYDAY_07_02"); //Òåáå íå ñòîèëî ñâÿçûâàòüñÿ ñ ýòèìè íåóäà÷íèêàìè - òîãäà áû òû äî ñèõ ïîð ìîã áûòü îäíèì èç íàñ!
        }
        else {
            ai_output(self, other, "Info_Jackal_PAYDAY_07_03"); //Ýé, òû òîëüêî ïîñìîòðè! Ýòî òîò ñàìûé òèï èç Íîâîãî Ëàãåðÿ, èç-çà êîòîðîãî è ðàçãîðåëñÿ âåñü ñûð-áîð!
            ai_output(self, other, "Info_Jackal_PAYDAY_07_04"); //Åñëè áû òîãäà òû õîòü íåìíîãî ïîøåâåëèë ìîçãàìè, ñåé÷àñ áû òû áûë íà íàøåé ñòîðîíå - íà ñòîðîíå ïîáåäèòåëåé!
        };
    }
    else {
        ai_output(self, other, "Info_Jackal_PAYDAY_07_05"); //Íåò, òû òîëüêî ïîãëÿäè íà ýòî. Ýòî ïàðåíü èç Áîëîòíîãî Ëàãåðÿ.
        ai_output(self, other, "Info_Jackal_PAYDAY_07_06"); //Òû îáùàëñÿ ñ ýòèìè ïðèäóðêàìè òàê äîëãî, ÷òî è ó òåáÿ ÿâíî ñúåõàëà êðûøà!
    };
    if (jackal_protectionpaid) {
        ai_output(self, other, "Info_Jackal_PAYDAY_07_07"); //Äàæå òà ðóäà, êîòîðóþ òû çàïëàòèë ìíå çà çàùèòó, òåïåðü òåáå íå ïîìîæåò.
    }
    else {
        ai_output(self, other, "Info_Jackal_PAYDAY_07_08"); //Òåáå ñòîèëî çàïëàòèòü ìíå, ïîêà ó òåáÿ åùå áûëà òàêàÿ âîçìîæíîñòü.
    };
    ai_output(other, self, "Info_Jackal_PAYDAY_15_09"); //Òû çàðâàëñÿ! Òåáå íå ñòîèëî íàïàäàòü íà ìåíÿ!
    ai_output(self, other, "Info_Jackal_PAYDAY_07_10"); //È òåì íå ìåíåå, âñå ïîëó÷èëîñü êàê íåëüçÿ ëó÷øå. Ýòîãî òåáå óæå íå èçìåíèòü, ïîâåðü!
    ai_output(self, other, "Info_Jackal_PAYDAY_07_11"); //ÝÉ, ÏÀÐÍÈ! ÂÇßÒÜ ÅÃÎ!!!
    ai_stopprocessinfos(self);
    b_story_jackalfight();
};

instance dia_bullit_exit(c_info) {
    npc = grd_203_bullit /*7202*/;
    nr = 999;
    condition = dia_bullit_exit_condition;
    information = dia_bullit_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_bullit_exit_condition() {
    return 1;
};

func void dia_bullit_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_bullit_first(c_info) {
    npc = grd_203_bullit /*7202*/;
    nr = 1;
    condition = dia_bullit_first_condition;
    information = dia_bullit_first_info;
    important = true;
};

func int dia_bullit_first_condition() {
    return 1;
};

func void dia_bullit_first_info() {
    ai_output(self, other, "DIA_Bullit_First_06_00"); //Òàê, êòî ó íàñ çäåñü? Óæ íå òåáÿ ëè ÿ îêðåñòèë äàâå÷à? ×òî òåáå íóæíî? Õî÷åøü åùå?
};

instance dia_bullit_aufsmaul(c_info) {
    npc = grd_203_bullit /*7202*/;
    nr = 1;
    condition = dia_bullit_aufsmaul_condition;
    information = dia_bullit_aufsmaul_info;
    description = "ß ïðèøåë çàòêíóòü òâîþ ïîãàíóþ ïàñòü!";
};

func int dia_bullit_aufsmaul_condition() {
    if (!exploresunkentower) {
        return 1;
    };
};

func void dia_bullit_aufsmaul_info() {
    ai_output(other, self, "DIA_Bullit_AufsMAul_15_00"); //ß ïðèøåë çàòêíóòü òâîþ ïîãàíóþ ïàñòü!
    ai_output(self, other, "DIA_Bullit_AufsMAul_06_01"); //Õà, ïîäîéäè è ïîïðîáóé, ñûíîê!
    npc_setattitude(self, att_hostile);
    npc_settempattitude(self, att_hostile);
    ai_stopprocessinfos(self);
    npc_settarget(self, other);
    ai_startstate(self, zs_attack, 1, "");
};

instance dia_grd_203_bullit_wait4sc(c_info) {
    npc = grd_203_bullit /*7202*/;
    condition = dia_grd_203_bullit_wait4sc_condition;
    information = dia_grd_203_bullit_wait4sc_info;
    important = true;
};

func int dia_grd_203_bullit_wait4sc_condition() {
    if (exploresunkentower) {
        return 1;
    };
};

func void dia_grd_203_bullit_wait4sc_info() {
    ai_output(self, other, "DIA_GRD_203_Bullit_Wait4SC_06_01"); //Ñíîâà òû?! Ñòîèëî óòîïèòü òåáÿ, êàê òîëüêî ÿ òåáÿ óâèäåë!
    ai_output(other, self, "DIA_GRD_203_Bullit_Wait4SC_15_02"); //Äà, âòîðîãî øàíñà ó òåáÿ óæå íå áóäåò - òåïåðü ìû ïîìåíÿëèñü ìåñòàìè.
    ai_output(self, other, "DIA_GRD_203_Bullit_Wait4SC_06_03"); //×åðâÿê! ß íàäåþñü, äëÿ ìåíÿ ýòî áóäåò õîòÿ áû ñëîæíåå, ÷åì â ïðîøëûé ðàç.
    ai_stopprocessinfos(self);
    self.guild = gil_grd;
    npc_settrueguild(self, gil_grd);
    npc_setattitude(self, att_hostile);
    npc_settempattitude(self, att_hostile);
    npc_settarget(self, other);
    ai_startstate(self, zs_attack, 1, "");
};

instance dia_scorpio_exit(c_info) {
    npc = grd_205_scorpio /*7207*/;
    nr = 999;
    condition = dia_scorpio_exit_condition;
    information = dia_scorpio_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_scorpio_exit_condition() {
    return 1;
};

func void dia_scorpio_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_scorpio_hello(c_info) {
    npc = grd_205_scorpio /*7207*/;
    nr = 1;
    condition = dia_scorpio_hello_condition;
    information = dia_scorpio_hello_info;
    important = true;
};

func int dia_scorpio_hello_condition() {
    if ((!c_npcbelongstooldcamp(other)) && (kapitel < 4)) {
        return 1;
    };
};

func void dia_scorpio_hello_info() {
    ai_output(self, other, "DIA_Scorpio_Hello_13_00"); //Êòî âïóñòèë ÒÅÁß?
    ai_output(other, self, "DIA_Scorpio_Hello_15_01"); //Òîðóñ.
    ai_output(self, other, "DIA_Scorpio_Hello_13_02"); //È êàêîãî ÷åðòà òû çäåñü äåëàåøü?
    info_clearchoices(dia_scorpio_hello /*8941*/);
    info_addchoice(dia_scorpio_hello /*8941*/, "Ïðîñòî çàøåë ïîñìîòðåòü.", dia_scorpio_hello_justlooking);
    info_addchoice(dia_scorpio_hello /*8941*/, "Ó ìåíÿ åñòü ïîñëàíèå äëÿ ìàãîâ.", dia_scorpio_hello_mages);
    if (kalom_krautbote == log_running) {
        info_addchoice(dia_scorpio_hello /*8941*/, "ß ïðèíåñ áîëîòíèê äëÿ Ãîìåçà.", dia_scorpio_hello_kraut);
    };
    if (npc_knowsinfo(hero, info_thorus_readyforgomez /*8848*/)) {
        info_addchoice(dia_scorpio_hello /*8941*/, "ß ñîáèðàþñü âñòðåòèòüñÿ ñ Ãîìåçîì. Õî÷ó ïðèñîåäèíèòüñÿ ê âàì.", dia_scorpio_hello_join);
    };
};

func void dia_scorpio_hello_justlooking() {
    ai_output(other, self, "DIA_Scorpio_Hello_JustLooking_15_00"); //Ïðîñòî çàøåë ïîñìîòðåòü.
    ai_output(self, other, "DIA_Scorpio_Hello_JustLooking_13_01"); //Î÷åíü ñìåøíî.
    info_clearchoices(dia_scorpio_hello /*8941*/);
};

func void dia_scorpio_hello_mages() {
    ai_output(other, self, "DIA_Scorpio_Hello_Mages_15_00"); //Ó ìåíÿ åñòü ïîñëàíèå äëÿ ìàãîâ.
    ai_output(self, other, "DIA_Scorpio_Hello_Mages_13_01"); //Òû ðàáîòàåøü íà ìàãîâ? ß íå õî÷ó ñ íèìè ñâÿçûâàòüñÿ...
    info_clearchoices(dia_scorpio_hello /*8941*/);
};

func void dia_scorpio_hello_kraut() {
    ai_output(other, self, "DIA_Scorpio_Hello_Kraut_15_00"); //ß ïðèíåñ áîëîòíèê äëÿ Ãîìåçà.
    ai_output(self, other, "DIA_Scorpio_Hello_Kraut_13_01"); //Îòíåñè åãî â äîì, êîòîðûé îõðàíÿþò äâîå ñòðàæíèêîâ.
    info_clearchoices(dia_scorpio_hello /*8941*/);
};

func void dia_scorpio_hello_join() {
    ai_output(other, self, "DIA_Scorpio_Hello_Join_15_00"); //ß ñîáèðàþñü âñòðåòèòüñÿ ñ Ãîìåçîì. Õî÷ó ïðèñîåäèíèòüñÿ ê âàì.
    ai_output(self, other, "DIA_Scorpio_Hello_Join_13_01"); //Òû? È ÷òî òàêîãî òû äëÿ íàñ ñäåëàë?
    ai_output(other, self, "DIA_Scorpio_Hello_Join_15_02"); //Ïðèçðàêè áûëè ìíîþ äîâîëüíû...
    ai_output(self, other, "DIA_Scorpio_Hello_Join_13_03"); //Íèêòî çäåñü íå æåëàåò ñëûøàòü î Ïðèçðàêàõ. Çäåñü ÌÛ ðåøàåì.
    info_clearchoices(dia_scorpio_hello /*8941*/);
};

instance dia_scorpio_refusetrain(c_info) {
    npc = grd_205_scorpio /*7207*/;
    nr = 1;
    condition = dia_scorpio_refusetrain_condition;
    information = dia_scorpio_refusetrain_info;
    permanent = true;
    description = "Òû ìîæåøü íàó÷èòü ìåíÿ äðàòüñÿ?";
};

func int dia_scorpio_refusetrain_condition() {
    if ((npc_knowsinfo(hero, dia_scorpio_hello /*8941*/) && (npc_gettrueguild(hero) != gil_grd)) && (kapitel < 4)) {
        return 1;
    };
};

func void dia_scorpio_refusetrain_info() {
    ai_output(other, self, "DIA_Scorpio_REFUSETRAIN_15_00"); //Òû ìîæåøü íàó÷èòü ìåíÿ äðàòüñÿ?
    ai_output(self, other, "DIA_Scorpio_REFUSETRAIN_13_01"); //ß òðåíèðóþ òîëüêî ñòðàæíèêîâ. Ïîêà Òîðóñ íå íàçíà÷èò òåáÿ îäíèì èç íèõ, èùè êîãî-íèáóäü äðóãîãî.
};

instance grd_205_scorpio_welcome(c_info) {
    npc = grd_205_scorpio /*7207*/;
    condition = grd_205_scorpio_welcome_condition;
    information = grd_205_scorpio_welcome_info;
    important = true;
};

func int grd_205_scorpio_welcome_condition() {
    if (npc_gettrueguild(hero) == gil_grd) {
        return true;
    };
};

func void grd_205_scorpio_welcome_info() {
    ai_output(self, other, "GRD_205_Scorpio_WELCOME_Info_13_01"); //Ýòî ëó÷øèé âûáîð, êîòîðûé òû òîëüêî ìîã ñäåëàòü!
    ai_stopprocessinfos(self);
};

instance grd_205_scorpio_crossbow(c_info) {
    npc = grd_205_scorpio /*7207*/;
    nr = 0;
    condition = grd_205_scorpio_crossbow_condition;
    information = grd_205_scorpio_crossbow_info;
    permanent = true;
    description = "Òû ìîæåøü ÷åìó-íèáóäü íàó÷èòü ìåíÿ?";
};

func int grd_205_scorpio_crossbow_condition() {
    if ((npc_gettalentskill(hero, npc_talent_crossbow) < 1) && ((kapitel >= 4) || (npc_gettrueguild(hero) == gil_grd))) {
        return true;
    };
};

func void grd_205_scorpio_crossbow_info() {
    ai_output(other, self, "GRD_205_Scorpio_CROSSBOW_Info_15_01"); //Òû áóäåøü ó÷èòü ìåíÿ?
    ai_output(self, other, "GRD_205_Scorpio_CROSSBOW_Info_13_02"); //Åñëè ó òåáÿ åñòü ðóäà, ÿ íàó÷è òåáÿ ïîëüçîâàòüñÿ àðáàëåòîì. Íî ñíà÷àëà çàïëàòè äâå ñîòíè.
    if ((log_scorpiocrossbow == false) && (kapitel <= 4)) {
        log_createtopic(ge_teacheroc, log_note);
        b_logentry(ge_teacheroc, ge_teacheroc_scorpio);
        log_scorpiocrossbow = true;
    }
    else {
        if ((log_scorpiocrossbow == false) && (kapitel > 4)) {
            log_createtopic(ge_teacherow, log_note);
            b_logentry(ge_teacherow, ge_teacheroc_scorpio);
            log_scorpiocrossbow = true;
        };
    };
    info_clearchoices(grd_205_scorpio_crossbow /*8954*/);
    info_addchoice(grd_205_scorpio_crossbow /*8954*/, dialog_back, grd_205_scorpio_crossbow_back);
    info_addchoice(grd_205_scorpio_crossbow /*8954*/, b_buildlearnstring(name_learncrossbow_1, lpcost_talent_crossbow_1, 200), grd_205_scorpio_crossbow_ok);
};

func void grd_205_scorpio_crossbow_back() {
    info_clearchoices(grd_205_scorpio_crossbow /*8954*/);
};

func void grd_205_scorpio_crossbow_ok() {
    ai_output(other, self, "GRD_205_Scorpio_CROSSBOW_OK_15_01"); //Ïî ðóêàì. Ïîêàæè, êàê íóæíî ñ íèì îáðàùàòüñÿ.
    if (npc_hasitems(hero, itminugget) >= 200) {
        if (b_giveskill(other, npc_talent_crossbow, 1, lpcost_talent_crossbow_1)) {
            b_giveinvitems(hero, self, itminugget /*4517*/, 200);
            ai_output(self, other, "GRD_205_Scorpio_CROSSBOW_OK_13_02"); //Ëàäíî, íà÷íåì.
            ai_output(self, other, "GRD_205_Scorpio_CROSSBOW_OK_13_03"); //Òû áåðåøüñÿ çà ðóêîÿòêó è óïèðàåøü åå â ïëå÷î. Ýòî ïîìîæåò òåáå ëó÷øå ïðèöåëèòüñÿ.
            ai_output(self, other, "GRD_205_Scorpio_CROSSBOW_OK_13_04"); //Ïåðâûå íåñêîëüêî äíåé òåáå áóäåò êàçàòüñÿ, ÷òî ïëå÷î âîò-âîò îòâàëèòñÿ.
            ai_output(self, other, "GRD_205_Scorpio_CROSSBOW_OK_13_05"); //Íî ÷åðåç íåäåëþ îíî áóäåò êàê êàìåíü!
            ai_output(self, other, "GRD_205_Scorpio_CROSSBOW_OK_13_06"); //Íàâîäè òî÷íî íà öåëü è îòòÿãèâàé ñòðåëó íàçàä. Îíà ïîëåòèò êóäà ñèëüíåå, ÷åì èç ëóêà, à çíà÷èò, íàíåñåò áîëüøèé óðîí!
        };
    }
    else {
        ai_output(self, other, "GRD_205_Scorpio_CROSSBOW_OK_13_07"); //ß ñêàçàë - ÄÂÅ ÑÎÒÍÈ ÊÓÑÊÎÂ ÐÓÄÛ, çäåñü, ó ìåíÿ â ðóêàõ. Âîçâðàùàéñÿ, êîãäà ó òåáÿ áóäåò ÷åì çàïëàòèòü!
    };
};

instance grd_205_scorpio_crossbow2(c_info) {
    npc = grd_205_scorpio /*7207*/;
    nr = 0;
    condition = grd_205_scorpio_crossbow2_condition;
    information = grd_205_scorpio_crossbow2_info;
    permanent = true;
    description = "Ðàññêàæè ìíå åùå ÷òî-íèáóäü îá àðáàëåòå.";
};

func int grd_205_scorpio_crossbow2_condition() {
    if ((npc_gettalentskill(hero, npc_talent_crossbow) == 1) && ((kapitel >= 4) || (npc_gettrueguild(hero) == gil_grd))) {
        return true;
    };
};

func void grd_205_scorpio_crossbow2_info() {
    ai_output(other, self, "GRD_205_Scorpio_CROSSBOW2_Info_15_01"); //Ðàññêàæè ìíå åùå ÷òî-íèáóäü îá àðáàëåòå.
    ai_output(self, other, "GRD_205_Scorpio_CROSSBOW2_Info_13_02"); //Ýòî îáîéäåòñÿ òåáå â òðè ñîòíè êóñêîâ ðóäû.
    info_clearchoices(grd_205_scorpio_crossbow2 /*8959*/);
    info_addchoice(grd_205_scorpio_crossbow2 /*8959*/, dialog_back, grd_205_scorpio_crossbow2_back);
    info_addchoice(grd_205_scorpio_crossbow2 /*8959*/, b_buildlearnstring(name_learncrossbow_2, lpcost_talent_crossbow_2, 300), grd_205_scorpio_crossbow2_ok);
};

func void grd_205_scorpio_crossbow2_back() {
    info_clearchoices(grd_205_scorpio_crossbow2 /*8959*/);
};

func void grd_205_scorpio_crossbow2_ok() {
    ai_output(other, self, "GRD_205_Scorpio_CROSSBOW2_OK_15_01"); //Íà÷íåì ïðÿìî ñåé÷àñ.
    if (npc_hasitems(hero, itminugget) >= 300) {
        if (b_giveskill(other, npc_talent_crossbow, 2, lpcost_talent_crossbow_2)) {
            b_giveinvitems(hero, self, itminugget /*4517*/, 300);
            ai_output(self, other, "GRD_205_Scorpio_CROSSBOW2_OK_13_02"); //Ëàäíî. Âûñòðåëû áóäóò áîëåå òî÷íûìè, åñëè ïåðåä ñòðåëüáîé òû íåìíîãî ïðèñÿäåøü.
            ai_output(self, other, "GRD_205_Scorpio_CROSSBOW2_OK_13_03"); //Òåáå ïðåäñòîèò íàó÷èòüñÿ ðàññ÷èòûâàòü ñêîðîñòü, ñ êîòîðîé äâèæåòñÿ öåëü.
            ai_output(self, other, "GRD_205_Scorpio_CROSSBOW2_OK_13_04"); //Âûïóñêàé ñòðåëó ñ äîëæíûì óïðåæäåíèåì ïî ïóòè äâèæóùåéñÿ öåëè, ÷òîáû çàìåäëèòü èëè îñòàíîâèòü åå.
            ai_output(self, other, "GRD_205_Scorpio_CROSSBOW2_OK_13_05"); //Åñëè öåëåé íåñêîëüêî, íå òðàòü çðÿ âðåìåíè - ñíèìàé èõ îäíó çà äðóãîé íåïðåðûâíîé ñåðèåé âûñòðåëîâ.
            ai_output(self, other, "GRD_205_Scorpio_CROSSBOW2_OK_13_06"); //Òåïåðü ÿ íàó÷èë òåáÿ âñåìó, ÷òî çíàë ñàì.
        };
    }
    else {
        ai_output(self, other, "GRD_205_Scorpio_CROSSBOW2_OK_13_07"); //Ïðåæäå íàéäè ãäå-íèáóäü ÒÐÈ ÑÎÒÍÈ êóñêîâ ðóäû.
    };
};

instance grd_205_scorpio_heypc(c_info) {
    npc = grd_205_scorpio /*7207*/;
    condition = grd_205_scorpio_heypc_condition;
    information = grd_205_scorpio_heypc_info;
    important = true;
};

func int grd_205_scorpio_heypc_condition() {
    if ((kapitel >= 4) && (npc_getdisttonpc(hero, self) < 1000)) {
        return true;
    };
};

func void grd_205_scorpio_heypc_info() {
    ai_output(self, other, "GRD_205_Scorpio_HeyPC_Info_13_01"); //Ýé, íå áîéñÿ, ïàðåíü. Èäè ñþäà!
};

instance grd_205_scorpio_banished(c_info) {
    npc = grd_205_scorpio /*7207*/;
    nr = 0;
    condition = grd_205_scorpio_banished_condition;
    information = grd_205_scorpio_banished_info;
    description = "Âñå â ïîðÿäêå?";
};

func int grd_205_scorpio_banished_condition() {
    if (npc_knowsinfo(hero, grd_205_scorpio_heypc /*8964*/)) {
        return true;
    };
};

func void grd_205_scorpio_banished_info() {
    ai_output(other, self, "GRD_205_Scorpio_BANISHED_Info_15_01"); //Ñ òîáîé âñå â ïîðÿäêå?
    ai_output(self, other, "GRD_205_Scorpio_BANISHED_Info_13_02"); //ß çäåñü ïðÿ÷óñü. Ìåíÿ íå âîëíóåò áàðàõëî, êîòîðîå ðàñòàñêèâàþò ýòè ñòðàæíèêè.
    ai_output(self, other, "GRD_205_Scorpio_BANISHED_Info_13_03"); //Íî ÿ ïðèõâàòèë íåñêîëüêî îòëè÷íûõ âåùè÷åê èç àðñåíàëà. Åñëè òåáå ïîíàäîáèòñÿ îðóæèå, îáðàùàéñÿ êî ìíå.
    if (scorpio_exile == false) {
        log_createtopic(ge_traderow, log_note);
        b_logentry(ge_traderow, ge_traderow_scorpio);
        scorpio_exile = true;
    };
};

instance grd_205_scorpio_trade(c_info) {
    npc = grd_205_scorpio /*7207*/;
    nr = 0;
    condition = grd_205_scorpio_trade_condition;
    information = grd_205_scorpio_trade_info;
    permanent = true;
    trade = true;
    description = "Ïîêàæè ìíå, ÷òî ó òåáÿ åñòü.";
};

func int grd_205_scorpio_trade_condition() {
    if (npc_knowsinfo(hero, grd_205_scorpio_banished /*8967*/)) {
        return true;
    };
};

func void grd_205_scorpio_trade_info() {
    ai_output(other, self, "GRD_205_Scorpio_TRADE_Info_15_01"); //Ïîêàæè, ÷òî ó òåáÿ åñòü.
};

instance dia_cutter_exit(c_info) {
    npc = grd_208_cutter /*7212*/;
    nr = 999;
    condition = dia_cutter_exit_condition;
    information = dia_cutter_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_cutter_exit_condition() {
    return 1;
};

func void dia_cutter_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_cutter_hello(c_info) {
    npc = grd_208_cutter /*7212*/;
    nr = 1;
    condition = dia_cutter_hello_condition;
    information = dia_cutter_hello_info;
    description = "Êàêîé áîëüøîé çàìîê.";
};

func int dia_cutter_hello_condition() {
    if (!c_npcbelongstooldcamp(other)) {
        return 1;
    };
};

func void dia_cutter_hello_info() {
    ai_output(other, self, "DIA_Cutter_Hello_15_00"); //Êàêîé áîëüøîé çàìîê.
    ai_output(self, other, "DIA_Cutter_Hello_08_01"); //Êàæåòñÿ, ðàíüøå ÿ òåáÿ íå âèäåë. Òû êòî?
    ai_output(other, self, "DIA_Cutter_Hello_15_02"); //ß íîâåíüêèé. Ïðîñòî õîòåë íåìíîãî îñìîòðåòüñÿ.
};

instance dia_cutter_burg(c_info) {
    npc = grd_208_cutter /*7212*/;
    nr = 1;
    condition = dia_cutter_burg_condition;
    information = dia_cutter_burg_info;
    permanent = 10;
    description = "Òû ìîæåøü ðàññêàçàòü ìíå î çàìêå?";
};

func int dia_cutter_burg_condition() {
    if (npc_knowsinfo(hero, dia_cutter_hello /*8976*/)) {
        return 1;
    };
};

func void dia_cutter_burg_info() {
    ai_output(other, self, "DIA_Cutter_Burg_15_00"); //Òû ìîæåøü ðàññêàçàòü ìíå î çàìêå?
    ai_output(self, other, "DIA_Cutter_Burg_08_01"); //Ïîñëå Âîññòàíèÿ åãî çàíÿë Ãîìåç ñî ñâîåé øàéêîé.
    ai_output(self, other, "DIA_Cutter_Burg_08_02"); //Ñåé÷àñ ëó÷øå áûòü íà èõ ñòîðîíå - ýòî ÿ çíàþ òî÷íî.
    ai_output(self, other, "DIA_Cutter_Burg_08_03"); //Äàæå êîãäà ìû ñèäåëè â ïîäçåìåëüÿõ è ãîðáàòèëèñü â øàõòàõ, áîëüøèíñòâî êàòîðæíèêîâ ïîä÷èíÿëîñü åãî ïðèêàçàì.
    ai_output(other, self, "DIA_Cutter_Burg_15_04"); //Çíà÷èò, ïîä çàìêîì åñòü ïîäçåìåëüÿ?
    ai_output(self, other, "DIA_Cutter_Burg_08_05"); //Äà, íî ñåé÷àñ îíè ïóñòóþò. Òóäà äàæå íèêòî íå ñïóñêàëñÿ ïîñëå Âîññòàíèÿ.
};

instance dia_cutter_perm(c_info) {
    npc = grd_208_cutter /*7212*/;
    nr = 1;
    condition = dia_cutter_perm_condition;
    information = dia_cutter_perm_info;
    permanent = true;
    description = "Êàêîâî ýòî - áûòü ñòðàæíèêîì?";
};

func int dia_cutter_perm_condition() {
    if (npc_knowsinfo(hero, dia_cutter_burg /*8979*/)) {
        return 1;
    };
};

func void dia_cutter_perm_info() {
    ai_output(other, self, "DIA_Cutter_PERM_15_00"); //Êàêîâî ýòî - áûòü ñòðàæíèêîì?
    ai_output(self, other, "DIA_Cutter_PERM_08_01"); //Äîâîëüíî òèõîå ìåñòå÷êî. Ìû æèâåì â ñàìîì áîëüøîì è ñèëüíîì Ëàãåðå êîëîíèè. Íèêòî íå ñìååò íàïàñòü íà íàñ.
    ai_output(other, self, "DIA_Cutter_PERM_15_02"); //Ïîíÿòíî.
    ai_stopprocessinfos(self);
};

instance grd_208_cutter_welcome(c_info) {
    npc = grd_208_cutter /*7212*/;
    condition = grd_208_cutter_welcome_condition;
    information = grd_208_cutter_welcome_info;
    important = true;
};

func int grd_208_cutter_welcome_condition() {
    if (npc_gettrueguild(hero) == gil_grd) {
        return true;
    };
};

func void grd_208_cutter_welcome_info() {
    ai_output(self, other, "GRD_208_Cutter_WELCOME_Info_08_01"); //Òû ñäåëàë ïðàâèëüíûé âûáîð. Òåáå ïîíðàâèòñÿ áûòü ñòðàæíèêîì!
    ai_stopprocessinfos(self);
};

instance dia_scatty_exit(c_info) {
    npc = grd_210_scatty /*7217*/;
    nr = 999;
    condition = dia_scatty_exit_condition;
    information = dia_scatty_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_scatty_exit_condition() {
    return 1;
};

func void dia_scatty_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_scatty_whatdoyoudo(c_info) {
    npc = grd_210_scatty /*7217*/;
    nr = 1;
    condition = dia_scatty_whatdoyoudo_condition;
    information = dia_scatty_whatdoyoudo_info;
    description = "×åì òû çàíèìàåøüñÿ?";
};

func int dia_scatty_whatdoyoudo_condition() {
    return 1;
};

func void dia_scatty_whatdoyoudo_info() {
    ai_output(other, self, "DIA_Scatty_WhatDoYouDo_15_00"); //Â ÷åì çàêëþ÷àåòñÿ òâîÿ ðàáîòà?
    ai_output(self, other, "DIA_Scatty_WhatDoYouDo_01_01"); //ß îòâå÷àþ çà àðåíó - îðãàíèçóþ ñòàâêè, íàíèìàþ íîâûõ áîéöîâ... è âñå òàêîå.
};

var int scatty_chargekirgo;

var int scatty_chargekharim;

var int scatty_chargegorhanis;

instance dia_scatty_joinoc(c_info) {
    npc = grd_210_scatty /*7217*/;
    nr = 1;
    condition = dia_scatty_joinoc_condition;
    information = dia_scatty_joinoc_info;
    description = "ß õî÷ó ïðèñîåäèíèòüñÿ ê ýòîìó Ëàãåðþ. Òû ìîæåøü ìíå ïîìî÷ü?";
};

func int dia_scatty_joinoc_condition() {
    if (npc_gettrueguild(hero) == gil_none) {
        return 1;
    };
};

func void dia_scatty_joinoc_info() {
    var c_npc kirgo;
    var c_npc kharim;
    var c_npc gorhanis;

    ai_output(other, self, "DIA_Scatty_JoinOC_15_00"); //ß õî÷ó ïðèñîåäèíèòüñÿ ê ýòîìó Ëàãåðþ. Òû ìîæåøü ìíå ïîìî÷ü?
    ai_output(self, other, "DIA_Scatty_JoinOC_01_01"); //Ìîã áû, åñëè òåáå óäàñòñÿ ïðîèçâåñòè íà ìåíÿ âïå÷àòëåíèå.
    ai_output(self, other, "DIA_Scatty_JoinOC_01_02"); //Çäåñü ñîðåâíóþòñÿ ëó÷øèå áîéöû âñåõ òðåõ Ëàãåðåé.
    ai_output(self, other, "DIA_Scatty_JoinOC_01_03"); //Âûçîâè íà áîé îäíîãî èç íèõ. Ïîãëÿäèì, íàñêîëüêî òû õîðîø, è, ìîæåò áûòü, ÿ ïîäóìàþ î òâîåé ïðîñüáå.
    scatty_chargekirgo = log_running;
    scatty_chargekharim = log_running;
    scatty_chargegorhanis = log_running;
    kirgo = hlp_getnpc(grd_251_kirgo);
    kirgo.aivar[19] = false;
    kirgo.aivar[20] = false;
    kharim = hlp_getnpc(sld_729_kharim);
    kharim.aivar[19] = false;
    kharim.aivar[20] = false;
    gorhanis = hlp_getnpc(tpl_1422_gorhanis);
    gorhanis.aivar[19] = false;
    gorhanis.aivar[20] = false;
    b_logentry(ch1_joinoc, ch1_joinoc_2);
};

instance dia_scatty_kirgosuccess(c_info) {
    npc = grd_210_scatty /*7217*/;
    nr = 1;
    condition = dia_scatty_kirgosuccess_condition;
    information = dia_scatty_kirgosuccess_info;
    description = "ß äðàëñÿ ñ Êèðãî!";
};

func int dia_scatty_kirgosuccess_condition() {
    var c_npc kirgo;

    kirgo = hlp_getnpc(grd_251_kirgo);
    if (((scatty_chargekirgo == log_running) && (kirgo_charged == true)) && ((kirgo.aivar[19] == true) || (kirgo.aivar[20] == true))) {
        return 1;
    };
};

func void dia_scatty_kirgosuccess_info() {
    var c_npc kirgo;

    kirgo = hlp_getnpc(grd_251_kirgo);
    ai_output(other, self, "DIA_Scatty_KirgoSuccess_15_00"); //ß äðàëñÿ ñ Êèðãî!
    if (kirgo.aivar[20] == true) {
        ai_output(self, other, "DIA_Scatty_KirgoSuccess_01_01"); //Äà, è ïðîèãðàë!
        ai_output(self, other, "DIA_Scatty_KirgoSuccess_01_02"); //Äóìàþ, òû íå íàäåÿëñÿ óäèâèòü ìåíÿ ýòèì...
        scatty_chargekirgo = log_failed;
        b_logentry(ch1_joinoc, ch1_joinoc_3);
    }
    else {
        if (kirgo.aivar[19] == true) {
            ai_output(self, other, "DIA_Scatty_KirgoSuccess_01_03"); //È òû ïîáåäèë åãî! Ñîâñåì íåïëîõî äëÿ íîâè÷êà! ß óäèâëåí!
            scatty_chargekirgo = log_success;
            b_logentry(ch1_joinoc, ch1_joinoc_4);
            b_givexp(xp_kirgovictory);
        };
    };
};

instance dia_scatty_kharimsuccess(c_info) {
    npc = grd_210_scatty /*7217*/;
    nr = 1;
    condition = dia_scatty_kharimsuccess_condition;
    information = dia_scatty_kharimsuccess_info;
    description = "ß ñðàæàëñÿ ñ Õàðèìîì!";
};

func int dia_scatty_kharimsuccess_condition() {
    var c_npc kharim;

    kharim = hlp_getnpc(sld_729_kharim);
    if (((scatty_chargekharim == log_running) && (kharim_charged == true)) && ((kharim.aivar[19] == true) || (kharim.aivar[20] == true))) {
        return 1;
    };
};

func void dia_scatty_kharimsuccess_info() {
    var c_npc kharim;

    kharim = hlp_getnpc(sld_729_kharim);
    ai_output(other, self, "DIA_Scatty_KHARIMSuccess_15_00"); //ß ñðàæàëñÿ ñ Õàðèìîì!
    if (kharim.aivar[20] == true) {
        ai_output(self, other, "DIA_Scatty_KHARIMSuccess_01_01"); //Äà, è îí íàäðàë òåáå çàäíèöó!
        if (npc_gettrueguild(hero) == gil_none) {
            ai_output(self, other, "DIA_Scatty_KHARIMSuccess_01_02"); //Òû ïðàâèëüíî âûáðàë ïðîòèâíèêà. Íåëüçÿ òåðïåòü ýòèõ óáëþäêîâ èç Íîâîãî Ëàãåðÿ.
            ai_output(self, other, "DIA_Scatty_KHARIMSuccess_01_03"); //Ïîõîæå, òû ýòî ïîíèìàåøü - êàê ðàç òàêèå ëþäè íóæíû íàì!
        };
        scatty_chargekharim = log_failed;
        b_givexp(xp_kharimlost);
        b_logentry(ch1_joinoc, ch1_joinoc_5);
    }
    else {
        if (kharim.aivar[19] == true) {
            ai_output(self, other, "DIA_Scatty_KHARIMSuccess_01_04"); //È òû ïîáåäèë åãî! Äîëæåí ïðèçíàòü, ýòî áûëî íåïëîõî. Åãî âñåãäà ñ÷èòàëè îäíèì èç ëó÷øèõ áîéöîâ.
            ai_output(self, other, "DIA_Scatty_KHARIMSuccess_01_05"); //Òû óäèâèë ìåíÿ!
            scatty_chargekharim = log_success;
            b_logentry(ch1_joinoc, ch1_joinoc_6);
            b_givexp(xp_kharimvictory);
        };
    };
};

instance dia_scatty_othercamps(c_info) {
    npc = grd_210_scatty /*7217*/;
    nr = 1;
    condition = dia_scatty_othercamps_condition;
    information = dia_scatty_othercamps_info;
    description = "Ïî÷åìó òû ïîçâîëÿåøü áîéöàì èç äðóãèõ Ëàãåðåé äðàòüñÿ çäåñü?";
};

func int dia_scatty_othercamps_condition() {
    if (npc_knowsinfo(hero, dia_scatty_whatdoyoudo /*8991*/)) {
        return 1;
    };
};

func void dia_scatty_othercamps_info() {
    ai_output(other, self, "DIA_Scatty_OtherCamps_15_00"); //Ìíå êàçàëîñü, ÷òî Íîâûé Ëàãåðü è Ñòàðûé Ëàãåðü íå î÷åíü-òî ëàäÿò ìåæäó ñîáîé - òàê ïî÷åìó æå òû ïîçâîëÿåøü ýòèì ëþäÿì ñðàæàòüñÿ çäåñü?
    ai_output(self, other, "DIA_Scatty_OtherCamps_01_01"); //Âñå î÷åíü ïðîñòî: îíè äåðóòñÿ çäåñü îäèí ðàç â íåäåëþ, è ðóäîêîïàì î÷åíü íðàâèòñÿ ñìîòðåòü, êàê ðàñêàòûâàþò ïî çåìëå âîðîâ èç Íîâîãî Ëàãåðÿ.
    ai_output(self, other, "DIA_Scatty_OtherCamps_01_02"); //Êîãäà äåðåòñÿ îäèí èç íèõ, ëþäè äåëàþò áîëüøå ñòàâîê - è ýòî, êàê òû ïîíèìàåøü, ñîâñåì íå ïëîõî.
    ai_output(self, other, "DIA_Scatty_OtherCamps_01_03"); //Ëè÷íî ÿ òåðïåòü íå ìîãó ýòèõ íàãëåöîâ èç Íîâîãî Ëàãåðÿ - íî áèçíåñ åñòü áèçíåñ...
};

instance dia_scatty_wannabet(c_info) {
    npc = grd_210_scatty /*7217*/;
    nr = 1;
    condition = dia_scatty_wannabet_condition;
    information = dia_scatty_wannabet_info;
    permanent = true;
    description = "ß õî÷ó ñäåëàòü ñòàâêó.";
};

func int dia_scatty_wannabet_condition() {
    if (npc_knowsinfo(hero, dia_scatty_whatdoyoudo /*8991*/)) {
        return 1;
    };
};

func void dia_scatty_wannabet_info() {
    ai_output(other, self, "DIA_Scatty_WannaBet_15_00"); //ß õî÷ó ñäåëàòü ñòàâêó.
    ai_output(self, other, "DIA_Scatty_WannaBet_01_01"); //Íî ñåé÷àñ æå íèêòî íå äåðåòñÿ.
    ai_output(self, other, "DIA_Scatty_WannaBet_01_02"); //Ñëåäóþùèé áîé ñîñòîèòñÿ ÷åðåç íåñêîëüêî äíåé. Áóäåò äîïîëíèòåëüíîå ñîîáùåíèå.
};

instance dia_scatty_wannafight(c_info) {
    npc = grd_210_scatty /*7217*/;
    nr = 1;
    condition = dia_scatty_wannafight_condition;
    information = dia_scatty_wannafight_info;
    permanent = true;
    description = "ß õî÷ó ñðàæàòüñÿ íà àðåíå!";
};

func int dia_scatty_wannafight_condition() {
};

func void dia_scatty_wannafight_info() {
    ai_output(other, self, "DIA_Scatty_WannaFight_15_00"); //ß õî÷ó ñðàæàòüñÿ íà àðåíå!
    ai_output(self, other, "DIA_Scatty_WannaFight_01_01"); //ß íå ìîãó ïîçâîëèòü òåáå ýòîãî, ïîêà òû íå ïðèñîåäèíèøüñÿ ê îäíîìó èç Ëàãåðåé!
    ai_output(self, other, "DIA_Scatty_WannaFight_01_02"); //Íèêîìó íå íóæíû íåçàâèñèìûå áîéöû-îäèíî÷êè!
};

instance dia_scatty_train(c_info) {
    npc = grd_210_scatty /*7217*/;
    nr = 10;
    condition = dia_scatty_train_condition;
    information = dia_scatty_train_info;
    permanent = true;
    description = "À âû âîîáùå òðåíèðóåòå áîéöîâ?";
};

func int dia_scatty_train_condition() {
    if (npc_knowsinfo(hero, dia_scatty_whatdoyoudo /*8991*/)) {
        return 1;
    };
};

func void dia_scatty_train_info() {
    if (log_scattytrain == false) {
        log_createtopic(ge_teacheroc, log_note);
        b_logentry(ge_teacheroc, ge_teacheroc_scatty);
        log_scattytrain = true;
    };
    ai_output(other, self, "DIA_Scatty_TRAIN_15_00"); //À âû âîîáùå òðåíèðóåòå áîéöîâ?
    ai_output(self, other, "DIA_Scatty_TRAIN_01_01"); //Äà, íî íå ðàäè ðàçâëå÷åíèÿ. Åñëè òû õî÷åøü, ÷òîáû ÿ ó÷èë òåáÿ, òåáå ïðèäåòñÿ çàïëàòèòü.
    info_clearchoices(dia_scatty_train /*9022*/);
    info_addchoice(dia_scatty_train /*9022*/, dialog_back, dia_scatty_train_back);
    if (npc_gettalentskill(hero, npc_talent_1h) == 1) {
        info_addchoice(dia_scatty_train /*9022*/, b_buildlearnstring(name_learn1h_2, lpcost_talent_1h_2, 150), dia_scatty_train_2h);
    };
    if (npc_gettalentskill(hero, npc_talent_1h) == 0) {
        info_addchoice(dia_scatty_train /*9022*/, b_buildlearnstring(name_learn1h_1, lpcost_talent_1h_1, 50), dia_scatty_train_1h);
    };
};

func void dia_scatty_train_back() {
    info_clearchoices(dia_scatty_train /*9022*/);
};

func void dia_scatty_train_1h() {
    ai_output(other, self, "DIA_Scatty_TRAIN_1h_15_00"); //ß õîòåë áû ïîòðåíèðîâàòüñÿ ñ îäíîðó÷íûì îðóæèåì.
    if (npc_hasitems(other, itminugget) >= 50) {
        if (b_giveskill(other, npc_talent_1h, 1, lpcost_talent_1h_1)) {
            ai_output(self, other, "DIA_Scatty_TRAIN_1h_01_01"); //Õîðîøàÿ ìûñëü! Íî ïðåæäå ÷åì çàíèìàòüñÿ òåõíèêîé, òåáå íóæíî íàó÷èòüñÿ ïðàâèëüíî äåðæàòü îðóæèå.
            ai_output(self, other, "DIA_Scatty_TRAIN_1h_01_02"); //Íîâè÷êè ÷àñòî äåðæàòñÿ çà ðóêîÿòü äâóìÿ ðóêàìè. Ýòî íåïðàâèëüíî, ê ýòîìó ëó÷øå íå ïðèâûêàòü.
            ai_output(self, other, "DIA_Scatty_TRAIN_1h_01_03"); //Âîçüìèñü çà ðóêîÿòü îäíîé ðóêîé. Ëåçâèå ââåðõ, è íå äåðæè åãî íåïîäâèæíî.
            ai_output(self, other, "DIA_Scatty_TRAIN_1h_01_04"); //Îðóæèå äîëæíî ñòàòü ïðîäîëæåíèåì òâîåé ðóêè, âïèñûâàòüñÿ â òâîè äâèæåíèÿ. Ýòî ïîìîæåò óñêîðèòü àòàêó.
            ai_output(self, other, "DIA_Scatty_TRAIN_1h_01_05"); //Åñëè çàïîìíèøü âñå, î ÷åì ÿ òåáå ãîâîðèë, òâîè óäàðû ñòàíóò áîëåå èçÿùíûìè è áûñòðûìè.
            ai_output(self, other, "DIA_Scatty_TRAIN_1h_01_06"); //Äà, è âîò åùå ÷òî: íåêîòîðûå óäàðû êóäà ýôôåêòèâíåå îñòàëüíûõ. Ó íîâè÷êà íå òàê ìíîãî øàíñîâ âûïîëíèòü èõ.
            ai_output(self, other, "DIA_Scatty_TRAIN_1h_01_07"); //Íî ÷åì áîëüøå òû áóäåøü òðåíèðîâàòüñÿ, òåì ëó÷øå îíè ó òåáÿ áóäóò ïîëó÷àòüñÿ.
            b_giveinvitems(other, self, itminugget /*4517*/, 50);
        };
    }
    else {
        ai_output(self, other, "DIA_Scatty_TRAIN_1h_NoOre_01_00"); //Ó òåáÿ íåäîñòàòî÷íî ðóäû!
    };
};

func void dia_scatty_train_2h() {
    ai_output(other, self, "DIA_Scatty_TRAIN_2h_15_01"); //Ðàññêàæè ìíå åùå ÷òî-íèáóäü ïðî îäíîðó÷íîå îðóæèå.
    if (npc_hasitems(other, itminugget) >= 150) {
        if (b_giveskill(other, npc_talent_1h, 2, lpcost_talent_1h_2)) {
            ai_output(self, other, "DIA_Scatty_TRAIN_2h_Info_01_02"); //Ëàäíî, òû óæå çíàåøü ãëàâíîå. Åñëè äåðæàòü êëèíîê íåìíîãî íèæå, ïåðâûé óäàð ïîëó÷èòñÿ áîëåå ñèëüíûì.
            ai_output(self, other, "DIA_Scatty_TRAIN_2h_Info_01_03"); //Ðóáÿùèé óäàð, ïîìíèøü? Ëàäíî, òåïåðü î òîì, êàê íóæíî äâèãàòüñÿ. Íàíåñè äâà óäàðà è ðàçâîðà÷èâàéñÿ - âðàã íàâåðíÿêà ðàñòåðÿåòñÿ, à òû îêàæåøüñÿ â âûãîäíîì ïîëîæåíèè.
            ai_output(self, other, "DIA_Scatty_TRAIN_2h_Info_01_04"); //Åùå îäèí âçìàõ êëèíêîì ñïðàâà íàëåâî...
            ai_output(self, other, "DIA_Scatty_TRAIN_2h_Info_01_05"); //...è âîçâðàùàåøüñÿ â èñõîäíóþ ñòîéêó. Ãëàâíîå, íå çàáûâàé òðåíèðîâàòüñÿ. Èäè, îòðàáàòûâàé òåõíèêó.
            b_giveinvitems(other, self, itminugget /*4517*/, 150);
        };
    }
    else {
        ai_output(self, other, "DIA_Scatty_TRAIN_2h_NoOre_01_00"); //Âîçâðàùàéñÿ, êîãäà íàáåðåøü äîñòàòî÷íî ðóäû!
    };
};

instance dia_skip_exit(c_info) {
    npc = grd_211_skip /*7219*/;
    nr = 999;
    condition = dia_skip_exit_condition;
    information = dia_skip_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_skip_exit_condition() {
    return 1;
};

func void dia_skip_exit_info() {
    ai_stopprocessinfos(self);
};

var int skip_tradefree;

instance dia_skip_first(c_info) {
    npc = grd_211_skip /*7219*/;
    nr = 1;
    condition = dia_skip_first_condition;
    information = dia_skip_first_info;
    description = "×åì òû çàíèìàåøüñÿ?";
};

func int dia_skip_first_condition() {
    if (!(((npc_gettrueguild(other) == gil_stt) || (npc_gettrueguild(other) == gil_grd)) || (npc_gettrueguild(other) == gil_kdf))) {
        return 1;
    };
};

func void dia_skip_first_info() {
    ai_output(other, self, "DIA_Skip_First_15_00"); //×åì òû çàíèìàåøüñÿ?
    ai_output(self, other, "DIA_Skip_First_12_01"); //ß çàíèìàþñü îðóæèåì äëÿ ñòðàæíèêîâ.
    ai_output(other, self, "DIA_Skip_First_15_02"); //Òû ïðîäàåøü îðóæèå?
    ai_output(self, other, "DIA_Skip_First_12_03"); //Òîëüêî Ãîìåçó è åãî ëþäÿì.
    if (!npc_knowsinfo(hero, dia_raven_equipment /*8766*/)) {
        log_createtopic(ge_traderoc, log_note);
        b_logentry(ge_traderoc, ge_traderoc_2);
    };
    info_clearchoices(dia_skip_first /*9032*/);
    info_addchoice(dia_skip_first /*9032*/, "Âñå ÿñíî. Óâèäèìñÿ!", dia_skip_first_back);
    info_addchoice(dia_skip_first /*9032*/, "Ìåíÿ ïðèñëàë Òîðóñ. Îí âåëåë ìíå ïîäîáðàòü îðóæèå.", dia_skip_first_thorus);
    info_addchoice(dia_skip_first /*9032*/, "Ìåíÿ ïðèñëàë Ãîìåç.", dia_skip_first_gomez);
};

func void dia_skip_first_gomez() {
    ai_output(other, self, "DIA_Skip_First_Gomez_15_00"); //Ìåíÿ ïðèñëàë Ãîìåç. Îí ñêàçàë, ÷òî òû äîëæåí ïîäîáðàòü äëÿ ìåíÿ ñíàðÿæåíèå.
    ai_output(self, other, "DIA_Skip_First_Gomez_12_01"); //Êàê îáû÷íî, äà? Íîâûå äîñïåõè è ëó÷øåå îðóæèå èç òîãî, ÷òî ó ìåíÿ åñòü.
    ai_output(self, other, "DIA_Skip_First_Gomez_12_02"); //Óáèðàéñÿ îòñþäà, ïîêà ÿ íå ðàçîçëèëñÿ!
    info_clearchoices(dia_skip_first /*9032*/);
    ai_stopprocessinfos(self);
};

func void dia_skip_first_thorus() {
    ai_output(other, self, "DIA_Skip_First_Thorus_15_00"); //Ìåíÿ ïðèñëàë Òîðóñ. Îí âåëåë ìíå ïîäîáðàòü îðóæèå.
    ai_output(self, other, "DIA_Skip_First_Thorus_12_01"); //Äà?
    info_clearchoices(dia_skip_first /*9032*/);
    info_addchoice(dia_skip_first /*9032*/, "Ïî÷åìó áû òåáå ñàìîìó íå ñïðîñèòü åãî? ", dia_skip_first_thorus_askhim);
    info_addchoice(dia_skip_first /*9032*/, "Âûäàé îðóæèå!", dia_skip_first_thorus_kickass);
    info_addchoice(dia_skip_first /*9032*/, "Îí õî÷åò, ÷òîáû ÿ êîå-÷òî ñäåëàë äëÿ íåãî...", dia_skip_first_thorus_stranger);
};

func void dia_skip_first_back() {
    ai_output(other, self, "DIA_Skip_First_BACK_15_00"); //Âñå ÿñíî. Óâèäèìñÿ!
    info_clearchoices(dia_skip_first /*9032*/);
    ai_stopprocessinfos(self);
};

func void dia_skip_first_thorus_stranger() {
    ai_output(other, self, "DIA_Skip_First_Thorus_Stranger_15_00"); //Îí õî÷åò, ÷òîáû ÿ êîå-÷òî ñäåëàë äëÿ íåãî... íåáîëüøîå çàäàíèå, êîòîðîå íå ïî çóáàì íè îäíîìó èç âàñ.
    ai_output(self, other, "DIA_Skip_First_Thorus_Stranger_12_01"); //Äà? È îí íå ïðèäóìàë íè÷åãî ëó÷øå, êàê ïîñëàòü òåáÿ êî ìíå, âåðíî?
    info_clearchoices(dia_skip_first /*9032*/);
    info_addchoice(dia_skip_first /*9032*/, "Ïî÷åìó áû òåáå ñàìîìó íå ñïðîñèòü åãî? ", dia_skip_first_thorus_askhim);
    info_addchoice(dia_skip_first /*9032*/, "Âûäàé îðóæèå!", dia_skip_first_thorus_kickassagain);
};

func void dia_skip_first_thorus_kickass() {
    ai_output(other, self, "DIA_Skip_First_Thorus_KickAss_15_00"); //Îí âåëåë ïèíàòü òâîþ òîùóþ çàäíèöó äî òåõ ïîð, ïîêà òû íå âûäàøü ìíå îðóæèå.
    ai_output(self, other, "DIA_Skip_First_Thorus_KickAss_12_01"); //Â ñàìîì äåëå? Ìíå êàæåòñÿ, åñëè òû íå óáåðåøüñÿ îòñþäà äîñòàòî÷íî áûñòðî, ýòî ß áóäó ïèíàòü ÒÂÎÞ çàäíèöó.
    info_clearchoices(dia_skip_first /*9032*/);
    ai_stopprocessinfos(self);
};

func void dia_skip_first_thorus_askhim() {
    ai_output(other, self, "DIA_Skip_First_Thorus_AskHim_15_00"); //Ïî÷åìó áû òåáå ñàìîìó íå ñïðîñèòü åãî?
    ai_output(self, other, "DIA_Skip_First_Thorus_AskHim_12_01"); //Ìîæåøü íå ñîìíåâàòüñÿ, èìåííî ýòî ÿ è ñäåëàþ. Íî íå ñåé÷àñ. Óâåðåí, îí çàõî÷åò óñëûøàòü, ÷òî òû ãîâîðèë î íåì.
    ai_output(self, other, "DIA_Skip_First_Thorus_AskHim_12_02"); //Íå çíàþ, êòî òåáÿ âïóñòèë, íî íà òâîåì ìåñòå ÿ áû ïîñêîðåå óáðàëñÿ îòñþäà!
    info_clearchoices(dia_skip_first /*9032*/);
    ai_stopprocessinfos(self);
};

func void dia_skip_first_thorus_kickassagain() {
    ai_output(other, self, "DIA_Skip_First_Thorus_KickAssAGAIN_15_00"); //Îí âåëåë ïèíàòü òâîþ òîùóþ çàäíèöó äî òåõ ïîð, ïîêà òû íå âûäàøü ìíå îðóæèå.
    ai_output(self, other, "DIA_Skip_First_Thorus_KickAssAGAIN_12_01"); //Ëàäíî, ïàðåíü, ÷òî òåáå íóæíî?
    info_clearchoices(dia_skip_first /*9032*/);
    skip_tradefree = true;
};

instance dia_skip_verpatzt(c_info) {
    npc = grd_211_skip /*7219*/;
    nr = 1;
    condition = dia_skip_verpatzt_condition;
    information = dia_skip_verpatzt_info;
    permanent = true;
    description = "ß äóìàþ, ìíå ñòîèò ïîñîâåòîâàòüñÿ ïî ïîâîäó ñíàðÿæåíèÿ...";
};

func int dia_skip_verpatzt_condition() {
    if ((!(((npc_gettrueguild(other) == gil_stt) || (npc_gettrueguild(other) == gil_grd)) || (npc_gettrueguild(other) == gil_kdf))) && (npc_knowsinfo(hero, dia_skip_first /*9032*/) && (skip_tradefree == false))) {
        return 1;
    };
};

func void dia_skip_verpatzt_info() {
    ai_output(other, self, "DIA_Skip_VERPATZT_15_00"); //ß äóìàþ, ìíå ñòîèò âåðíóòüñÿ è ïîñîâåòîâàòüñÿ ïî ïîâîäó ñíàðÿæåíèÿ...
    ai_output(self, other, "DIA_Skip_VERPATZT_12_01"); //Ïðîâàëèâàé!
};

instance grd_211_skip_trade(c_info) {
    npc = grd_211_skip /*7219*/;
    nr = 0;
    condition = grd_211_skip_trade_condition;
    information = grd_211_skip_trade_info;
    permanent = true;
    trade = true;
    description = "Ìíå íóæíî âñåãî íåñêîëüêî âåùåé.";
};

func int grd_211_skip_trade_condition() {
    if ((((npc_gettrueguild(other) == gil_stt) || (npc_gettrueguild(other) == gil_grd)) || (npc_gettrueguild(other) == gil_kdf)) || (skip_tradefree == true)) {
        return true;
    };
};

func void grd_211_skip_trade_info() {
    ai_output(other, self, "GRD_211_Skip_TRADE_Info_15_01"); //Ìíå íóæíî âñåãî íåñêîëüêî âåùåé.
    ai_output(self, other, "GRD_211_Skip_TRADE_Info_12_02"); //ß ìîãó ïðîäàòü òåáå êîå ÷òî.
};

instance grd_211_skip_welcome(c_info) {
    npc = grd_211_skip /*7219*/;
    condition = grd_211_skip_welcome_condition;
    information = grd_211_skip_welcome_info;
    important = true;
};

func int grd_211_skip_welcome_condition() {
    if (npc_gettrueguild(hero) == gil_grd) {
        return true;
    };
};

func void grd_211_skip_welcome_info() {
    ai_output(self, other, "GRD_211_Skip_WELCOME_Info_12_01"); //Ýé, à òû íåïëîõî óñïåë îáóñòðîèòüñÿ äëÿ íîâè÷êà!
};

const string grd_212_checkpoint = "OCC_GATE_INSIDE";

instance info_grd_212_firstwarn(c_info) {
    npc = grd_212_torwache /*7222*/;
    nr = 1;
    condition = info_grd_212_firstwarn_condition;
    information = info_grd_212_firstwarn_info;
    permanent = true;
    important = true;
};

func int info_grd_212_firstwarn_condition() {
    if ((((hero.aivar[27] == aiv_gps_begin) && (self.aivar[29] == false)) && (npc_getattitude(self, hero) != att_friendly)) && hlp_strcmp(npc_getnearestwp(self), self.wp)) {
        return true;
    };
};

func void info_grd_212_firstwarn_info() {
    printglobals(pd_mission);
    ai_output(self, hero, "Info_Grd_212_FirstWarn_Info_13_01"); //ÑÒÎÉ!
    ai_output(hero, self, "Info_Grd_212_FirstWarn_Info_15_02"); //×òî òàêîå?
    ai_output(self, hero, "Info_Grd_212_FirstWarn_Info_13_03"); //Òû íå ìîæåøü çàéòè â çàìîê áåç ðàçðåøåíèÿ! Óáèðàéñÿ îòñþäà!
    hero.aivar[28] = npc_getdisttowp(hero, grd_212_checkpoint);
    hero.aivar[27] = aiv_gps_firstwarn;
    ai_stopprocessinfos(self);
};

instance info_grd_212_lastwarn(c_info) {
    npc = grd_212_torwache /*7222*/;
    nr = 1;
    condition = info_grd_212_lastwarn_condition;
    information = info_grd_212_lastwarn_info;
    permanent = true;
    important = true;
};

func int info_grd_212_lastwarn_condition() {
    if (((((hero.aivar[27] == aiv_gps_firstwarn) && (self.aivar[29] == false)) && (npc_getattitude(self, hero) != att_friendly)) && (npc_getdisttowp(hero, grd_212_checkpoint) < (hero.aivar[28] - 100))) && hlp_strcmp(npc_getnearestwp(self), self.wp)) {
        return true;
    };
};

func int info_grd_212_lastwarn_info() {
    ai_output(self, hero, "Info_Grd_212_LastWarn_13_01"); //Òû ÷òî, îãëîõ? Åùå îäèí øàã, è òû ñòàíåøü êîðìîì äëÿ ÷åðâåé!
    hero.aivar[28] = npc_getdisttowp(hero, grd_212_checkpoint);
    hero.aivar[27] = aiv_gps_lastwarn;
    ai_stopprocessinfos(self);
};

instance info_grd_212_attack(c_info) {
    npc = grd_212_torwache /*7222*/;
    nr = 1;
    condition = info_grd_212_attack_condition;
    information = info_grd_212_attack_info;
    permanent = true;
    important = true;
};

func int info_grd_212_attack_condition() {
    if (((((hero.aivar[27] == aiv_gps_lastwarn) && (self.aivar[29] == false)) && (npc_getattitude(self, hero) != att_friendly)) && (npc_getdisttowp(hero, grd_212_checkpoint) < (hero.aivar[28] - 100))) && hlp_strcmp(npc_getnearestwp(self), self.wp)) {
        return true;
    };
};

func int info_grd_212_attack_info() {
    hero.aivar[28] = 0;
    hero.aivar[27] = aiv_gps_punish;
    b_fullstop(self);
    ai_stopprocessinfos(self);
    b_intruderalert(self, other);
    b_setattackreason(self, aiv_ar_intruder);
    npc_settarget(self, hero);
    ai_startstate(self, zs_attack, 1, "");
};

instance info_grd_212_exit(c_info) {
    npc = grd_212_torwache /*7222*/;
    nr = 999;
    condition = info_grd_212_exit_condition;
    information = info_grd_212_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_grd_212_exit_condition() {
    return 1;
};

func void info_grd_212_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_grd_212_abblitzen(c_info) {
    npc = grd_212_torwache /*7222*/;
    nr = 1;
    condition = info_grd_212_abblitzen_condition;
    information = info_grd_212_abblitzen_info;
    permanent = true;
    description = "Ìíå íóæíî ïîïàñòü â çàìîê!";
};

func int info_grd_212_abblitzen_condition() {
    if (self.aivar[29] == false) {
        return 1;
    };
};

func void info_grd_212_abblitzen_info() {
    ai_output(other, self, "Info_Grd_212_Abblitzen_15_00"); //Ìíå íóæíî ïîïàñòü â çàìîê!
    ai_output(self, other, "Info_Grd_212_Abblitzen_13_01"); //Êàê èíòåðåñíî! À ÿ õî÷ó óáðàòüñÿ èç ýòîé ïðîêëÿòîé êîëîíèè!
    ai_output(self, other, "Info_Grd_212_Abblitzen_13_02"); //È óæ âî âñÿêîì ñëó÷àå ó ìåíÿ åñòü äåëà ïîâàæíåå, ÷åì ñëåäèòü, ÷òîá òàêèå áåçäåëüíèêè, êàê òû, íå ñîâàëè ñâîé íîñ êóäà íå ñëåäóåò.
    ai_output(other, self, "Info_Grd_212_Abblitzen_15_03"); //Òû ìîæåøü ïðîñòî âïóñòèòü ìåíÿ...
    ai_output(self, other, "Info_Grd_212_Abblitzen_13_04"); //Íåò, íå ìîãó! Òîëüêî Òîðóñ ìîæåò.
    ai_stopprocessinfos(self);
};

instance info_grd_212_firstin(c_info) {
    npc = grd_212_torwache /*7222*/;
    nr = 1;
    condition = info_grd_212_firstin_condition;
    information = info_grd_212_firstin_info;
    important = true;
};

func int info_grd_212_firstin_condition() {
    if (self.aivar[29] == true) {
        return 1;
    };
};

func void info_grd_212_firstin_info() {
    ai_output(self, other, "Info_Grd_212_FirstIn_13_00"); //ÑÒÎÉ!
    ai_output(other, self, "Info_Grd_212_FirstIn_15_01"); //Ðàññëàáüñÿ! ß ïîãîâîðèë ñ Òîðóñîì. Îí ìíå ðàçðåøèë.
    ai_output(self, other, "Info_Grd_212_FirstIn_13_02"); //ß çàïîìíèë òâîå ëèöî, ïàðåíü! Ó òåáÿ áóäóò íåïðèÿòíîñòè, è òàê ëåãêî îò íèõ òû íå îòäåëàåøüñÿ.
    ai_stopprocessinfos(self);
};

instance info_grd_212_passgate(c_info) {
    npc = grd_212_torwache /*7222*/;
    nr = 1;
    condition = info_grd_212_passgate_condition;
    information = info_grd_212_passgate_info;
    permanent = true;
    description = "ß âñå-òàêè ìîãó âîéòè?";
};

func int info_grd_212_passgate_condition() {
    if (self.aivar[29] == true) {
        return 1;
    };
};

func void info_grd_212_passgate_info() {
    ai_output(other, self, "Info_Grd_212_Passgate_15_00"); //ß âñå-òàêè ìîãó âîéòè?
    ai_output(self, other, "Info_Grd_212_Passgate_13_01"); //Äà, åñëè ïåðåñòàíåøü çàäàâàòü ãëóïûå âîïðîñû.
    ai_stopprocessinfos(self);
};

const string grd_213_checkpoint = "OCC_GATE_INSIDE";

instance info_grd_213_firstwarn(c_info) {
    npc = grd_213_torwache /*7227*/;
    nr = 1;
    condition = info_grd_213_firstwarn_condition;
    information = info_grd_213_firstwarn_info;
    permanent = true;
    important = true;
};

func int info_grd_213_firstwarn_condition() {
    if ((((hero.aivar[27] == aiv_gps_begin) && (self.aivar[29] == false)) && (npc_getattitude(self, hero) != att_friendly)) && hlp_strcmp(npc_getnearestwp(self), self.wp)) {
        return true;
    };
};

func void info_grd_213_firstwarn_info() {
    printglobals(pd_mission);
    ai_output(self, hero, "Info_Grd_213_FirstWarn_Info_07_01"); //ÑÒÎÉ!
    ai_output(hero, self, "Info_Grd_213_FirstWarn_Info_15_02"); //×òî òàêîå?
    ai_output(self, hero, "Info_Grd_213_FirstWarn_Info_07_03"); //Òû íå ìîæåøü çàéòè â çàìîê! Ïðîâàëèâàé!
    hero.aivar[28] = npc_getdisttowp(hero, grd_213_checkpoint);
    hero.aivar[27] = aiv_gps_firstwarn;
    ai_stopprocessinfos(self);
};

instance info_grd_213_lastwarn(c_info) {
    npc = grd_213_torwache /*7227*/;
    nr = 1;
    condition = info_grd_213_lastwarn_condition;
    information = info_grd_213_lastwarn_info;
    permanent = true;
    important = true;
};

func int info_grd_213_lastwarn_condition() {
    if (((((hero.aivar[27] == aiv_gps_firstwarn) && (self.aivar[29] == false)) && (npc_getattitude(self, hero) != att_friendly)) && (npc_getdisttowp(hero, grd_213_checkpoint) < (hero.aivar[28] - 100))) && hlp_strcmp(npc_getnearestwp(self), self.wp)) {
        return true;
    };
};

func int info_grd_213_lastwarn_info() {
    ai_output(self, hero, "Info_Grd_213_LastWarn_07_01"); //Òû ÷òî, îãëîõ? Åùå îäèí øàã, è ñòàíåøü ïèùåé äëÿ ÷åðâåé!
    hero.aivar[28] = npc_getdisttowp(hero, grd_213_checkpoint);
    hero.aivar[27] = aiv_gps_lastwarn;
    ai_stopprocessinfos(self);
};

instance info_grd_213_attack(c_info) {
    npc = grd_213_torwache /*7227*/;
    nr = 1;
    condition = info_grd_213_attack_condition;
    information = info_grd_213_attack_info;
    permanent = true;
    important = true;
};

func int info_grd_213_attack_condition() {
    if (((((hero.aivar[27] == aiv_gps_lastwarn) && (self.aivar[29] == false)) && (npc_getattitude(self, hero) != att_friendly)) && (npc_getdisttowp(hero, grd_213_checkpoint) < (hero.aivar[28] - 100))) && hlp_strcmp(npc_getnearestwp(self), self.wp)) {
        return true;
    };
};

func int info_grd_213_attack_info() {
    hero.aivar[28] = 0;
    hero.aivar[27] = aiv_gps_punish;
    b_fullstop(self);
    ai_stopprocessinfos(self);
    b_intruderalert(self, other);
    b_setattackreason(self, aiv_ar_intruder);
    npc_settarget(self, hero);
    ai_startstate(self, zs_attack, 1, "");
};

instance grd_213_torwache_welcome(c_info) {
    npc = grd_213_torwache /*7227*/;
    condition = grd_213_torwache_welcome_condition;
    information = grd_213_torwache_welcome_info;
    important = true;
};

func int grd_213_torwache_welcome_condition() {
    if (npc_gettrueguild(hero) == gil_grd) {
        return true;
    };
};

func void grd_213_torwache_welcome_info() {
    ai_output(self, other, "Grd_213_Torwache_WELCOME_Info_07_01"); //ß ñëûøàë, òåïåðü òû îäèí èç íàñ? Ñîâñåì íåïëîõî äëÿ íîâè÷êà.
};

instance info_grd_213_exit(c_info) {
    npc = grd_213_torwache /*7227*/;
    nr = 999;
    condition = info_grd_213_exit_condition;
    information = info_grd_213_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_grd_213_exit_condition() {
    return 1;
};

func void info_grd_213_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_grd_213_abblitzen(c_info) {
    npc = grd_213_torwache /*7227*/;
    nr = 1;
    condition = info_grd_213_abblitzen_condition;
    information = info_grd_213_abblitzen_info;
    permanent = true;
    description = "Ìíå êàæåòñÿ, â æèçíè ïîðîé íóæíî ñîâåðøàòü áåçóìíûå ïîñòóïêè....";
};

func int info_grd_213_abblitzen_condition() {
    if (self.aivar[29] == false) {
        return 1;
    };
};

func void info_grd_213_abblitzen_info() {
    ai_output(other, self, "Info_Grd_213_Abblitzen_15_00"); //Ìíå êàæåòñÿ, â æèçíè ïîðîé íóæíî ñîâåðøàòü áåçóìíûå ïîñòóïêè - èíà÷å åé íå õâàòàåò îñòðîòû. Íàïðèìåð, òû ìîæåøü âïóñòèòü ìåíÿ â çàìîê.
    ai_output(self, other, "Info_Grd_213_Abblitzen_07_01"); //Áåçóìíûå ïîñòóïêè? Íåïëîõàÿ èäåÿ - ÿ óæå äàâíûì-äàâíî íå íàäèðàë çàäíèöó áåçäåëüíèêàì âðîäå òåáÿ.
    ai_stopprocessinfos(self);
};

instance info_grd_213_passgate(c_info) {
    npc = grd_213_torwache /*7227*/;
    nr = 1;
    condition = info_grd_213_passgate_condition;
    information = info_grd_213_passgate_info;
    permanent = true;
    description = "Ýé, âñå íîðìàëüíî?";
};

func int info_grd_213_passgate_condition() {
    if (self.aivar[29] == true) {
        return 1;
    };
};

func void info_grd_213_passgate_info() {
    ai_output(other, self, "Info_Grd_213_Passgate_15_00"); //Ýé, âñå íîðìàëüíî?
    ai_output(self, other, "Info_Grd_213_Passgate_07_01"); //Õâàòèò áðîäèòü âîêðóã äà îêîëî - çàõîäè.
    ai_stopprocessinfos(self);
};

instance dia_grd_214_torwache_exit(c_info) {
    npc = grd_214_torwache /*7232*/;
    nr = 999;
    condition = dia_grd_214_torwache_exit_condition;
    information = dia_grd_214_torwache_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_grd_214_torwache_exit_condition() {
    return 1;
};

func void dia_grd_214_torwache_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_grd_214_torwache_job(c_info) {
    npc = grd_214_torwache /*7232*/;
    nr = 2;
    condition = dia_grd_214_torwache_job_condition;
    information = dia_grd_214_torwache_job_info;
    permanent = true;
    description = "×åì òû çàíèìàåøüñÿ?";
};

func int dia_grd_214_torwache_job_condition() {
    return 1;
};

func void dia_grd_214_torwache_job_info() {
    ai_output(other, self, "DIA_Grd_214_Torwache_job_15_00"); //×åì òû çàíèìàåøüñÿ âåñü äåíü?
    ai_output(self, other, "DIA_Grd_214_Torwache_job_07_01"); //Ñëåæó çà òåì, ÷òîáû íèêòî íå çàõîäèë âíóòðü áåç ïðèêàçà Ãîìåçà.
    ai_output(self, other, "DIA_Grd_214_Torwache_job_07_02"); //Òàê ÷òî ïîñòàðàéñÿ áåç ãëóïîñòåé, à òî íèêóäà íå ïîéäåøü.
};

instance grd_214_torwache_seethorus(c_info) {
    npc = grd_214_torwache /*7232*/;
    condition = grd_214_torwache_seethorus_condition;
    information = grd_214_torwache_seethorus_info;
    important = true;
};

func int grd_214_torwache_seethorus_condition() {
    if ((((!npc_knowsinfo(hero, grd_216_torwache_seethorus /*9141*/)) && ((corkalom_bringmcqballs == log_success) || (npc_hasitems(hero, itat_crawlerqueen) >= 3))) && (!npc_knowsinfo(hero, grd_200_thorus_gardist /*8875*/))) && (npc_gettrueguild(hero) == gil_stt)) {
        return true;
    };
};

func void grd_214_torwache_seethorus_info() {
    ai_output(self, other, "Grd_214_Torwache_SEETHORUS_Info_07_01"); //Ýé, õîðîøî ÷òî òû çäåñü. Òåáÿ èñêàë Òîðóñ!
    ai_output(other, self, "Grd_214_Torwache_SEETHORUS_Info_15_02"); //×òî åìó íóæíî?
    ai_output(self, other, "Grd_214_Torwache_SEETHORUS_Info_07_03"); //Óâåðåí, îí ñàì òåáå ñêàæåò.
};

instance grd_214_torwache_nodusty(c_info) {
    npc = grd_214_torwache /*7232*/;
    condition = grd_214_torwache_nodusty_condition;
    information = grd_214_torwache_nodusty_info;
    permanent = true;
    important = true;
};

func int grd_214_torwache_nodusty_condition() {
    var c_npc dusty;

    dusty = hlp_getnpc(vlk_524_dusty);
    if ((dusty.aivar[36] == true) && (npc_getdisttonpc(hero, dusty) < 2000)) {
        return true;
    };
};

func void grd_214_torwache_nodusty_info() {
    var c_npc dusty;

    ai_output(self, other, "Grd_214_Torwache_NODUSTY_Info_07_01"); //ÝÉ! Òû æå íå ñîáèðàåøüñÿ óòàùèòü åãî îòñþäà, âåðíî?!
    ai_output(other, self, "Grd_214_Torwache_NODUSTY_Info_15_02"); //Ìû ïðîñòî õîòåëè...
    ai_output(self, other, "Grd_214_Torwache_NODUSTY_Info_07_03"); //Ñêîðî òû óæå íè÷åãî íå çàõî÷åøü!
    ai_stopprocessinfos(self);
    npc_settarget(self, other);
    ai_startstate(self, zs_attack, 1, "");
    b_exchangeroutine(vlk_524_dusty /*8410*/, "start");
    dusty = hlp_getnpc(vlk_524_dusty);
    dusty.aivar[36] = false;
    dusty.flags = 0;
};

instance dia_grd_215_torwache_exit(c_info) {
    npc = grd_215_torwache /*7236*/;
    nr = 999;
    condition = dia_grd_215_torwache_exit_condition;
    information = dia_grd_215_torwache_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_grd_215_torwache_exit_condition() {
    return 1;
};

func void dia_grd_215_torwache_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_grd_215_torwache_first(c_info) {
    npc = grd_215_torwache /*7236*/;
    nr = 2;
    condition = dia_grd_215_torwache_first_condition;
    information = dia_grd_215_torwache_first_info;
    important = true;
};

func int dia_grd_215_torwache_first_condition() {
    if ((!npc_knowsinfo(hero, dia_grd_216_first /*9126*/)) && (kapitel < 2)) {
        return 1;
    };
};

func void dia_grd_215_torwache_first_info() {
    ai_output(self, other, "DIA_Grd_215_Torwache_First_06_00"); //Êóäà ýòî òû íàïðàâëÿåøüñÿ?
    ai_output(other, self, "DIA_Grd_215_Torwache_First_15_01"); //Â Ëàãåðü.
    ai_output(self, other, "DIA_Grd_215_Torwache_First_06_02"); //Îò òåáÿ íå áóäåò ïðîáëåì, âåäü òàê?
    info_clearchoices(dia_grd_215_torwache_first /*9112*/);
    info_addchoice(dia_grd_215_torwache_first /*9112*/, "Âîîáùå-òî ÿ ïëàíèðîâàë âçîðâàòü âåñü Ëàãåðü...", dia_grd_215_torwache_first_trouble);
    info_addchoice(dia_grd_215_torwache_first /*9112*/, "Ïðîñòî õîòåë íåìíîãî îñìîòðåòüñÿ.", dia_grd_215_torwache_first_justlooking);
    if (npc_knowsinfo(hero, info_diego_kolonie /*11802*/)) {
        info_addchoice(dia_grd_215_torwache_first /*9112*/, "Äèåãî ñêàçàë, ÷òî ÿ äîëæåí âñòðåòèòüñÿ ñ íèì â Ëàãåðå.", dia_grd_215_torwache_first_diego);
    };
};

func void dia_grd_215_torwache_first_trouble() {
    ai_output(other, self, "DIA_Grd_215_Torwache_First_Trouble_15_00"); //Âîîáùå-òî ÿ ïëàíèðîâàë âçîðâàòü âåñü Ëàãåðü...
    ai_output(self, other, "DIA_Grd_215_Torwache_First_Trouble_06_01"); //Ýé, äà òû çàáàâíûé ïàðåíü... Íå ëþáëþ çàáàâíûõ ïàðíåé.
    info_clearchoices(dia_grd_215_torwache_first /*9112*/);
    ai_stopprocessinfos(self);
    npc_settarget(self, other);
    ai_startstate(self, zs_attack, 1, "");
};

func void dia_grd_215_torwache_first_justlooking() {
    ai_output(other, self, "DIA_Grd_215_Torwache_First_JustLooking_15_00"); //Ïðîñòî õîòåë íåìíîãî îñìîòðåòüñÿ.
    ai_output(self, other, "DIA_Grd_215_Torwache_First_JustLooking_06_01"); //Ýòî îáîéäåòñÿ òåáå â äåñÿòü êóñêîâ ðóäû.
    info_clearchoices(dia_grd_215_torwache_first /*9112*/);
    info_addchoice(dia_grd_215_torwache_first /*9112*/, "Çàáóäü îá ýòîì.", dia_grd_215_torwache_first_nopay);
    info_addchoice(dia_grd_215_torwache_first /*9112*/, "Ëàäíî, âîò òåáå äåñÿòü êóñêîâ.", dia_grd_215_torwache_first_pay);
};

func void dia_grd_215_torwache_first_diego() {
    ai_output(other, self, "DIA_Grd_215_Torwache_First_Diego_15_00"); //Äèåãî ñêàçàë, ÷òî ÿ äîëæåí âñòðåòèòüñÿ ñ íèì â Ëàãåðå.
    ai_output(self, other, "DIA_Grd_215_Torwache_First_Diego_06_01"); //Ëàäíî, òîãäà ïðîõîäè.
    info_clearchoices(dia_grd_215_torwache_first /*9112*/);
};

func void dia_grd_215_torwache_first_nopay() {
    ai_output(other, self, "DIA_Grd_215_Torwache_First_NoPay_15_00"); //Äà ÿ ïðîñòî òàê.
    ai_output(self, other, "DIA_Grd_215_Torwache_First_NoPay_06_01"); //Òîãäà ïðîâàëèâàé.
    info_clearchoices(dia_grd_215_torwache_first /*9112*/);
};

func void dia_grd_215_torwache_first_pay() {
    if (npc_hasitems(other, itminugget) >= 10) {
        ai_output(other, self, "DIA_Grd_215_Torwache_First_Pay_15_00"); //Ëàäíî, âîò òåáå äåñÿòü êóñêîâ.
        ai_output(self, other, "DIA_Grd_215_Torwache_First_Pay_06_01"); //Íó çàõîäè.
        b_giveinvitems(other, self, itminugget /*4517*/, 10);
        createinvitems(self, itminugget, 10);
    }
    else {
        ai_output(other, self, "DIA_Grd_215_Torwache_First_Pay_NoOre_15_00"); //Ó ìåíÿ ñ ñîáîé ñòîëüêî íåò.
        ai_output(self, other, "DIA_Grd_215_Torwache_First_Pay_NoOre_06_01"); //ß ìîãó ñäåëàòü èñêëþ÷åíèå - òîëüêî îäèí ðàç è òîëüêî ïîòîìó, ÷òî òû çäåñü íîâåíüêèé.
    };
    info_clearchoices(dia_grd_215_torwache_first /*9112*/);
    ai_stopprocessinfos(self);
};

instance dia_grd_215_torwache_perm(c_info) {
    npc = grd_215_torwache /*7236*/;
    nr = 1;
    condition = dia_grd_215_torwache_perm_condition;
    information = dia_grd_215_torwache_perm_info;
    permanent = true;
    description = "Åñòü íîâîñòè?";
};

func int dia_grd_215_torwache_perm_condition() {
    return 1;
};

func void dia_grd_215_torwache_perm_info() {
    ai_output(other, self, "DIA_Grd_215_Torwache_PERM_15_00"); //Åñòü íîâîñòè?
    ai_output(self, other, "DIA_Grd_215_Torwache_PERM_06_01"); //Íå-à. Âñå, êàê îáû÷íî.
};

instance dia_grd_216_exit(c_info) {
    npc = grd_216_torwache /*7240*/;
    nr = 999;
    condition = dia_grd_216_exit_condition;
    information = dia_grd_216_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_grd_216_exit_condition() {
    return 1;
};

func void dia_grd_216_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_grd_216_first(c_info) {
    npc = grd_216_torwache /*7240*/;
    nr = 1;
    condition = dia_grd_216_first_condition;
    information = dia_grd_216_first_info;
    important = true;
};

func int dia_grd_216_first_condition() {
    var c_npc dusty;

    if (npc_getdisttowp(other, "OCR_NORTHGATE_ADVANCE") > 400) {
        npc_setrefusetalk(self, 30);
    };
    if (npc_refusetalk(self) == false) {
        dusty = hlp_getnpc(vlk_524_dusty);
        if ((dusty.aivar[36] == false) && (kapitel < 2)) {
            return 1;
        };
    };
};

func void dia_grd_216_first_info() {
    ai_output(self, other, "DIA_Grd_216_First_13_00"); //Ýé, òû! Ïî-ìîåìó ÿ òåáÿ çäåñü åùå íå âèäåë!
    ai_output(other, self, "DIA_Grd_216_First_15_01"); //Ïðàâèëüíî. ß òîëüêî ÷òî ñþäà ïîïàë.
    ai_output(self, other, "DIA_Grd_216_First_13_02"); //Áóäü îñòîðîæåí. Ñíàðóæè äîâîëüíî îïàñíî. Ñïîêîéíî ñåáÿ ìîæíî ÷óâñòâîâàòü òîëüêî â Ëàãåðå.
};

var int dustyguard_bribed;

instance dia_grd_216_dustyzoll(c_info) {
    npc = grd_216_torwache /*7240*/;
    nr = 1;
    condition = dia_grd_216_dustyzoll_condition;
    information = dia_grd_216_dustyzoll_info;
    permanent = true;
    important = true;
};

func int dia_grd_216_dustyzoll_condition() {
    var c_npc dusty;

    dusty = hlp_getnpc(vlk_524_dusty);
    if (((dusty.aivar[36] == true) && (npc_getdisttonpc(hero, dusty) < 2000)) && (dustyguard_bribed == false)) {
        return 1;
    };
};

func void dia_grd_216_dustyzoll_info() {
    ai_output(self, other, "DIA_Grd_216_Dusty_Zoll_13_00"); //Ñòîé! Êóäà ýòî òû ñîáðàëñÿ ñ íàøèì äðóãîì?
    info_clearchoices(dia_grd_216_dustyzoll /*9131*/);
    info_addchoice(dia_grd_216_dustyzoll /*9131*/, "Ýòî íå òâîå äåëî!", dia_grd_216_dustyzoll_pissoff);
    info_addchoice(dia_grd_216_dustyzoll /*9131*/, "Ìû íàïðàâëÿåìñÿ â Ëàãåðü Áðàòñòâà.", dia_grd_216_dustyzoll_topsi);
    if (npc_hasitems(other, itminugget) >= 100) {
        info_addchoice(dia_grd_216_dustyzoll /*9131*/, "Ìû ïðîñòî ïîøëè ïðîãóëÿòüñÿ. Âîçüìè ñîòíþ è çàáóäü îá ýòîì.", dia_grd_216_dustyzoll_littlewalk);
    };
};

func void dia_grd_216_dustyzoll_pissoff() {
    var c_npc dusty;

    ai_output(other, self, "DIA_Grd_216_Dusty_Zoll_PissOff_15_00"); //Ýòî íå òâîå äåëî!
    ai_output(self, other, "DIA_Grd_216_Dusty_Zoll_PIssOff_13_00"); //Íå ñîãëàñåí!
    ai_stopprocessinfos(self);
    npc_settarget(self, other);
    ai_startstate(self, zs_attack, 1, "");
    b_exchangeroutine(vlk_524_dusty /*8410*/, "start");
    dusty = hlp_getnpc(vlk_524_dusty);
    dusty.aivar[36] = false;
    dusty.flags = 0;
};

func void dia_grd_216_dustyzoll_topsi() {
    var c_npc dusty;

    ai_output(other, self, "DIA_Grd_216_Dusty_Zoll_ToPsi_15_00"); //Ìû íàïðàâëÿåìñÿ â Ëàãåðü Áðàòñòâà.
    ai_output(self, other, "DIA_Grd_216_Dusty_Zoll_ToPsi_13_00"); //Íó, òóäà âû íå äîáåðåòåñü...
    ai_stopprocessinfos(self);
    npc_settarget(self, other);
    ai_startstate(self, zs_attack, 1, "");
    b_exchangeroutine(vlk_524_dusty /*8410*/, "start");
    dusty = hlp_getnpc(vlk_524_dusty);
    dusty.aivar[36] = false;
    dusty.flags = 0;
};

func void dia_grd_216_dustyzoll_littlewalk() {
    var c_npc dusty;

    ai_output(other, self, "DIA_Grd_216_Dusty_Zoll_LittleWalk_15_00"); //Ìû ïðîñòî ïîøëè ïðîãóëÿòüñÿ. Âîçüìè ñîòíþ è çàáóäü îá ýòîì.
    if (npc_hasitems(hero, itminugget) >= 100) {
        ai_output(self, other, "DIA_Grd_216_Dusty_Zoll_LittleWalk_13_00"); //ß íè÷åãî íå âèäåë.
        b_giveinvitems(hero, self, itminugget /*4517*/, 100);
        dustyguard_bribed = true;
        b_logentry(ch1_recruitdusty, ch1_recruitdusty_1);
        b_givexp(xp_bribeddustyguard);
        ai_stopprocessinfos(self);
    }
    else {
        ai_output(self, other, "DIA_Grd_216_Dusty_Zoll_LittleWalk_13_02"); //Êîãî òû ïûòàåøüñÿ îáìàíóòü? Òåáå íå óäàñòñÿ óäðàòü òàê ëåãêî, ìàëûø!
        ai_stopprocessinfos(self);
        npc_settarget(self, other);
        ai_startstate(self, zs_attack, 1, "");
        b_exchangeroutine(vlk_524_dusty /*8410*/, "start");
        dusty = hlp_getnpc(vlk_524_dusty);
        dusty.aivar[36] = false;
        dusty.flags = 0;
    };
};

instance grd_216_torwache_seethorus(c_info) {
    npc = grd_216_torwache /*7240*/;
    condition = grd_216_torwache_seethorus_condition;
    information = grd_216_torwache_seethorus_info;
    important = true;
};

func int grd_216_torwache_seethorus_condition() {
    if ((((!npc_knowsinfo(hero, grd_214_torwache_seethorus /*9101*/)) && ((corkalom_bringmcqballs == log_success) || (npc_hasitems(hero, itat_crawlerqueen) >= 3))) && (!npc_knowsinfo(hero, grd_200_thorus_gardist /*8875*/))) && (npc_gettrueguild(hero) == gil_stt)) {
        return true;
    };
};

func void grd_216_torwache_seethorus_info() {
    ai_output(self, other, "Grd_216_Torwache_SEETHORUS_Info_13_01"); //Ýé, õîðîøî ÷òî òû çäåñü. Òåáÿ èñêàë Òîðóñ!
    ai_output(other, self, "Grd_216_Torwache_SEETHORUS_Info_15_02"); //×òî åìó íóæíî?
    ai_output(self, other, "Grd_216_Torwache_SEETHORUS_Info_13_03"); //Óâåðåí, îí ñàì òåáå ñêàæåò.
};

instance dia_grd_217_exit(c_info) {
    npc = grd_217_torwache /*7244*/;
    nr = 999;
    condition = dia_grd_217_exit_condition;
    information = dia_grd_217_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_grd_217_exit_condition() {
    return 1;
};

func void dia_grd_217_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_grd_217_first(c_info) {
    npc = grd_217_torwache /*7244*/;
    nr = 1;
    condition = dia_grd_217_first_condition;
    information = dia_grd_217_first_info;
    permanent = true;
    description = "Ïðèâåò!";
};

func int dia_grd_217_first_condition() {
    return 1;
};

func void dia_grd_217_first_info() {
    ai_output(other, self, "DIA_Grd_217_First_15_00"); //Ïðèâåò!
    ai_output(self, other, "DIA_Grd_217_First_06_01"); //Øåâåëè çàäíèöåé! Çàõîäè èëè ïðîâàëèâàé - ìíå âñå ðàâíî. Ïðîñòî óáèðàéñÿ ñ ìîèõ ãëàç.
    ai_stopprocessinfos(self);
};

instance dia_grd_218_firstin(c_info) {
    npc = grd_218_gardist /*7248*/;
    nr = 1;
    condition = dia_grd_218_firstin_condition;
    information = dia_grd_218_firstin_info;
    important = true;
};

func int dia_grd_218_firstin_condition() {
    if (self.aivar[29] == true) {
        return 1;
    };
};

func void dia_grd_218_firstin_info() {
    ai_output(self, other, "DIA_Grd_218_FirstIn_07_00"); //Ñòîé! ×òî òû äåëàåøü?
    ai_output(other, self, "DIA_Grd_218_FirstIn_15_01"); //Ïðîñòî õî÷ó çàéòè.
    ai_output(self, other, "DIA_Grd_218_FirstIn_07_02"); //Òû ÷òî, øóòèøü?
    ai_output(other, self, "DIA_Grd_218_FirstIn_15_03"); //Ïî÷åìó áû òåáå íå ñïðîñèòü îá ýòîì Òîðóñà?
    ai_output(self, other, "DIA_Grd_218_FirstIn_07_04"); //Áóäü óâåðåí, ÿ òàê è ñäåëàþ. È åñëè òû âðåøü, ñ÷èòàé, ÷òî òû ïîêîéíèê.
    ai_output(other, self, "DIA_Grd_218_FirstIn_15_05"); //ß íå ðàññëûøàë - òû ïðåäëîæèë ìíå âîéòè?
    ai_output(self, other, "DIA_Grd_218_FirstIn_07_06"); //Äà, øåâåëèñü!
    ai_stopprocessinfos(self);
};

const string grd_218_checkpoint = "OCC_BARONS_HALLWAY_FRONT";

instance info_grd_218_firstwarn(c_info) {
    npc = grd_218_gardist /*7248*/;
    nr = 1;
    condition = info_grd_218_firstwarn_condition;
    information = info_grd_218_firstwarn_info;
    permanent = true;
    important = true;
};

func int info_grd_218_firstwarn_condition() {
    if ((((hero.aivar[27] == aiv_gps_begin) && (self.aivar[29] == false)) && (npc_getattitude(self, hero) != att_friendly)) && hlp_strcmp(npc_getnearestwp(self), self.wp)) {
        return true;
    };
};

func void info_grd_218_firstwarn_info() {
    printglobals(pd_mission);
    ai_output(self, hero, "Info_Grd_218_FirstWarn_Info_07_01"); //Ñòîé! Íè øàãó äàëüøå!
    ai_output(hero, self, "Info_Grd_218_FirstWarn_Info_15_02"); //Ïî÷åìó?
    ai_output(self, hero, "Info_Grd_218_FirstWarn_Info_07_03"); //Òàêîìó óðîäó íå÷åãî äåëàòü â äîìå Áàðîíîâ!
    hero.aivar[28] = npc_getdisttowp(hero, grd_218_checkpoint);
    hero.aivar[27] = aiv_gps_firstwarn;
    ai_stopprocessinfos(self);
};

instance info_grd_218_attack(c_info) {
    npc = grd_218_gardist /*7248*/;
    nr = 1;
    condition = info_grd_218_attack_condition;
    information = info_grd_218_attack_info;
    permanent = true;
    important = true;
};

func int info_grd_218_attack_condition() {
    if (((((hero.aivar[27] == aiv_gps_firstwarn) && (self.aivar[29] == false)) && (npc_getattitude(self, hero) != att_friendly)) && (npc_getdisttowp(hero, grd_218_checkpoint) < (hero.aivar[28] - 100))) && hlp_strcmp(npc_getnearestwp(self), self.wp)) {
        return true;
    };
};

func int info_grd_218_attack_info() {
    hero.aivar[28] = 0;
    hero.aivar[27] = aiv_gps_punish;
    b_fullstop(self);
    ai_stopprocessinfos(self);
    b_intruderalert(self, other);
    b_setattackreason(self, aiv_ar_intruder);
    npc_settarget(self, hero);
    ai_startstate(self, zs_attack, 1, "");
};

instance dia_stone_hello(c_info) {
    npc = grd_219_stone /*7250*/;
    nr = 1;
    condition = dia_stone_hello_condition;
    information = dia_stone_hello_info;
    description = "Òû êóçíåö, òàê?";
};

func int dia_stone_hello_condition() {
    if (kapitel < 4) {
        return true;
    };
};

func void dia_stone_hello_info() {
    ai_output(other, self, "DIA_Stone_Hello_15_00"); //Òû êóçíåö, òàê?
    ai_output(self, other, "DIA_Stone_Hello_06_01"); //Âåðíî.
};

instance dia_stone_notselling(c_info) {
    npc = grd_219_stone /*7250*/;
    nr = 1;
    condition = dia_stone_notselling_condition;
    information = dia_stone_notselling_info;
    permanent = true;
    description = "È òû ïðîäàåøü îðóæèå è äîñïåõè?";
};

func int dia_stone_notselling_condition() {
    if ((npc_gettrueguild(hero) != gil_grd) && (kapitel < 4)) {
        return true;
    };
};

func void dia_stone_notselling_info() {
    ai_output(other, self, "DIA_Stone_NotSelling_15_00"); //È òû ïðîäàåøü îðóæèå è äîñïåõè?
    ai_output(self, other, "DIA_Stone_NotSelling_06_01"); //Îðóæèåì çàíèìàåòñÿ Ñêèï. ß ïðîäàþ òîëüêî äîñïåõè.
    ai_output(other, self, "DIA_Stone_NotSelling_15_02"); //Êàêèå äîñïåõè ó òåáÿ ñåé÷àñ åñòü?
    ai_output(self, other, "DIA_Stone_NotSelling_06_03"); //Òîëüêî äîñïåõè äëÿ ñòðàæíèêîâ. À òû íå ñòðàæíèê, òàê ÷òî ïðèäåòñÿ òåáå ïîèñêàòü ñíàðÿæåíèå ãäå-íèáóäü â äðóãîì ìåñòå!
    ai_stopprocessinfos(self);
};

instance grd_219_stone_getstuff(c_info) {
    npc = grd_219_stone /*7250*/;
    nr = 0;
    condition = grd_219_stone_getstuff_condition;
    information = grd_219_stone_getstuff_info;
    description = "Ìíå íóæíû äîñïåõè.";
};

func int grd_219_stone_getstuff_condition() {
    if (npc_gettrueguild(hero) == gil_grd) {
        return true;
    };
};

func void grd_219_stone_getstuff_info() {
    ai_output(other, self, "GRD_219_Stone_GETSTUFF_Info_15_01"); //Ìíå íóæíû äîñïåõè.
    ai_output(self, other, "GRD_219_Stone_GETSTUFF_Info_06_02"); //Çíà÷èò, Òîðóñ ïðèíÿë òåáÿ íà ñëóæáó, à? Ïîçäðàâëÿþ!
    ai_output(self, other, "GRD_219_Stone_GETSTUFF_Info_06_03"); //Åùå îäíîìó íå òåðïèòñÿ ñâåðíóòü ñåáå øåþ ðàäè Ãîìåçà. Âïðî÷åì, ÷åãî ÿ-òî âîëíóþñü?
    ai_output(self, other, "GRD_219_Stone_GETSTUFF_Info_06_04"); //Âîò, âîçüìè äîñïåõè è ìå÷. Äîáðî ïîæàëîâàòü â Ñòðàæó!
    createinvitems(self, itmw_1h_sword_03, 2);
    b_giveinvitems(self, other, itmw_1h_sword_03 /*4403*/, 2);
    npc_removeinvitem(other, itmw_1h_sword_03 /*4403*/);
    createinvitem(other, grd_armor_l);
    ai_equipbestarmor(hero);
    ai_equipbestmeleeweapon(hero);
    b_logentry(ge_becomeguard, ge_becomeguard_2);
    ai_stopprocessinfos(self);
};

instance grd_219_stone_betterarmor(c_info) {
    npc = grd_219_stone /*7250*/;
    nr = 0;
    condition = grd_219_stone_betterarmor_condition;
    information = grd_219_stone_betterarmor_info;
    permanent = true;
    description = "Ìíå íóæíû äîñïåõè ïîëó÷øå. ";
};

func int grd_219_stone_betterarmor_condition() {
    if (npc_knowsinfo(hero, grd_219_stone_getstuff /*9166*/) && (kapitel < 4)) {
        return true;
    };
};

func void grd_219_stone_betterarmor_info() {
    ai_output(other, self, "GRD_219_Stone_BETTERARMOR_Info_15_01"); //Ìíå íóæíû äîñïåõè ïîëó÷øå.
    ai_output(self, other, "GRD_219_Stone_BETTERARMOR_Info_06_02"); //Â ñâîå âðåìÿ îí ó òåáÿ îáÿçàòåëüíî áóäåò... Òîëüêî íå çàáóäü ïîäêîïèòü äîñòàòî÷íî ðóäû.
    info_clearchoices(grd_219_stone_betterarmor /*9169*/);
    info_addchoice(grd_219_stone_betterarmor /*9169*/, dialog_back, grd_219_stone_betterarmor_back);
    info_addchoice(grd_219_stone_betterarmor /*9169*/, b_buildbuyarmorstring(name_stoneheavyguards, value_grd_armor_h), grd_219_stone_betterarmor_h);
    info_addchoice(grd_219_stone_betterarmor /*9169*/, b_buildbuyarmorstring(name_stoneguards, value_grd_armor_m), grd_219_stone_betterarmor_m);
};

func void grd_219_stone_betterarmor_m() {
    ai_output(hero, self, "GRD_219_Stone_BETTERARMOR_Info_M_15_01"); //Ìíå íóæíû îáû÷íûå äîñïåõè äëÿ ñòðàæíèêà.
    if (kapitel < 3) {
        ai_output(self, hero, "GRD_219_Stone_BETTERARMOR_Info_M_06_02"); //Òîðóñ ñêàçàë: ïðåæäå ÷åì ïîëó÷èòü íîâûå äîñïåõè, òû åùå ïîñëóæèøü ñòðàæíèêîì!
    }
    else if (npc_hasitems(hero, itminugget) < value_grd_armor_m) {
        ai_output(self, hero, "GRD_219_Stone_BETTERARMOR_Info_M_06_03"); //Äîñïåõè äëÿ ñòðàæíèêà ó ìåíÿ åñòü, íî íå ïîõîæå, ÷òîáû ó òåáÿ áûëà ñ ñîáîé ðóäà. Âîçâðàùàéñÿ, êîãäà ó òåáÿ áóäåò, ÷åì çàïëàòèòü!
    }
    else {
        ai_output(self, hero, "GRD_219_Stone_BETTERARMOR_Info_M_06_04"); //Õîðîøî, íîâûå äîñïåõè äëÿ íîâîãî ñòðàæíèêà! Íå ïîçâîëÿé íàåìíèêàì äûðÿâèòü åãî, õà-õà-õà!
        b_giveinvitems(hero, self, itminugget /*4517*/, value_grd_armor_m);
        b_giveinvitems(self, hero, grd_armor_m /*4126*/, 1);
        ai_equipbestarmor(hero);
    };
    info_clearchoices(grd_219_stone_betterarmor /*9169*/);
};

func void grd_219_stone_betterarmor_h() {
    ai_output(hero, self, "GRD_219_Stone_BETTERARMOR_Info_H_15_01"); //Ìíå íóæíû òÿæåëûå äîñïåõè.
    ai_output(self, hero, "GRD_219_Stone_BETTERARMOR_Info_H_06_02"); //Òàêèå äîñïåõè ïîëó÷àþò òîëüêî ñòðàæíèêè âûñøåãî êëàññà è ÿ áîþñü òåáå äî íèõ åùå äàëåêî, ìàëûø.
    info_clearchoices(grd_219_stone_betterarmor /*9169*/);
};

func void grd_219_stone_betterarmor_back() {
    ai_output(hero, self, "GRD_219_Stone_BETTERARMOR_Info_BACK_15_01"); //ß ïåðåäóìàë.
    ai_output(self, hero, "GRD_219_Stone_BETTERARMOR_Info_BACK_06_02"); //Äåëàé, êàê õî÷åøü. Òû çíàåøü, ãäå ìåíÿ íàéòè.
    info_clearchoices(grd_219_stone_betterarmor /*9169*/);
};

instance dia_grd_219_stone_exit(c_info) {
    npc = grd_219_stone /*7250*/;
    nr = 999;
    condition = dia_grd_219_stone_exit_condition;
    information = dia_grd_219_stone_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_grd_219_stone_exit_condition() {
    return 1;
};

func void dia_grd_219_stone_exit_info() {
    var c_npc stone;

    if (npc_knowsinfo(hero, dia_grd_219_stone4 /*9191*/)) {
        ai_stopprocessinfos(self);
        stone = hlp_getnpc(grd_219_stone);
        ta_beginoverlay(stone);
        ta_min(stone, 0, 0, 0, 5, zs_position, "OCC_MERCS_HALLWAY_BACK");
        ta_min(stone, 0, 5, 0, 10, zs_position, "OCC_MERCS_ENTRANCE");
        ta_min(stone, 0, 10, 0, 15, zs_position, "OCC_SHADOWS_CORNER");
        ta_min(stone, 0, 15, 0, 20, zs_position, "OCC_STABLE_ENTRANCE");
        ta_min(stone, 0, 20, 72, 0, zs_position, "OCC_STABLE_LEFT_FRONT");
        ta_endoverlay(stone);
        ai_output(self, other, "Info_EXIT_06_02"); //Óâèäèìñÿ.
        ai_stopprocessinfos(self);
    }
    else {
        ai_output(self, other, "Info_EXIT_06_03"); //Óâèäèìñÿ.
        ai_stopprocessinfos(self);
    };
};

instance dia_grd_219_stone(c_info) {
    npc = grd_219_stone /*7250*/;
    condition = dia_grd_219_stone_condition;
    information = dia_grd_219_stone_info;
    important = true;
};

func int dia_grd_219_stone_condition() {
    if (kapitel >= 5) {
        return 1;
    };
};

func void dia_grd_219_stone_info() {
    ai_output(self, other, "DIA_GRD_219_Stone_06_01"); //×òî òåáå íóæíî? Òû íå ïîõîæ íà ïðèõâîñòíåé Ãîìåçà.
};

instance dia_grd_219_stone1(c_info) {
    npc = grd_219_stone /*7250*/;
    nr = 0;
    condition = dia_grd_219_stone1_condition;
    information = dia_grd_219_stone1_info;
    description = "Òû ïðàâ, ÿ íå ñëóæó Ãîìåçó.";
};

func int dia_grd_219_stone1_condition() {
    if (npc_knowsinfo(hero, dia_grd_219_stone /*9179*/)) {
        return 1;
    };
};

func void dia_grd_219_stone1_info() {
    ai_output(other, self, "DIA_GRD_219_Stone1_15_01"); //Òû ïðàâ, ÿ íå ñëóæó Ãîìåçó.
    ai_output(self, other, "DIA_GRD_219_Stone1_06_02"); //Òîãäà ÷òî òû çäåñü äåëàåøü? Êëþ÷è îò êàìåð íàõîäÿòñÿ ó Ãîìåçà...
    ai_output(other, self, "DIA_GRD_219_Stone1_15_03"); //Îí äàë èõ ìíå.
    ai_output(self, other, "DIA_GRD_219_Stone1_06_04"); //Óæ íå õî÷åøü ëè òû ñêàçàòü, ÷òî ýòî òû òîò ïàðåíü, êîòîðûé óäåëàë Ãîìåçà?
    ai_output(other, self, "DIA_GRD_219_Stone1_15_05"); //Òî÷íî òàê.
    ai_output(self, other, "DIA_GRD_219_Stone1_06_06"); //Ïàðåíü, âîò óæ íèêîãäà áû íå ïîäóìàë! Íî ÿ ðàä, ÷òî ýòîò ïàðøèâûé ãîëîâîðåç íàêîíåö-òî ïîëó÷èë ïî çàñëóãàì!
    ai_output(self, other, "DIA_GRD_219_Stone1_06_07"); //Íî çà÷åì òû ñïàñàåøü ìåíÿ?
    ai_output(other, self, "DIA_GRD_219_Stone1_15_08"); //ß ñëûøàë, ÷òî òû óãîäèë çà ðåøåòêó, è âîñïîëüçîâàëñÿ óäîáíûì ñëó÷àåì, ÷òîáû èçáàâèòüñÿ îò Ãîìåçà è îñâîáîäèòü òåáÿ.
    ai_output(self, other, "DIA_GRD_219_Stone1_06_09"); //Ñïàñèáî...
    ai_output(self, other, "DIA_GRD_219_Stone1_06_10"); //Çà ìíîé äîëæîê. Çàõîäè êî ìíå â êóçíèöó, ïîãîâîðèì.
    npc_exchangeroutine(self, "OTNEW");
};

instance dia_grd_219_stone3(c_info) {
    npc = grd_219_stone /*7250*/;
    condition = dia_grd_219_stone3_condition;
    information = dia_grd_219_stone3_info;
    important = true;
};

func int dia_grd_219_stone3_condition() {
    if (npc_knowsinfo(hero, dia_grd_219_stone1 /*9182*/) && hlp_strcmp(npc_getnearestwp(self), "OCC_STABLE_LEFT_FRONT")) {
        return 1;
    };
};

func void dia_grd_219_stone3_info() {
    ai_output(self, other, "DIA_GRD_219_Stone3_06_01"); //À âîò è òû. ß äîëæåí êàê-òî îòáëàãîäàðèòü òåáÿ, çà òî ÷òî òû âûòàùèë ìåíÿ èç òîé êðûñèíîé äûðû!
    ai_output(self, other, "DIA_GRD_219_Stone3_06_02"); //È çíàåøü, ÿ ïîäóìàë: ìíå âåäü ñîâñåì íå÷åãî ïîäàðèòü òåáå, òàê ëó÷øå ÿ ÷òî-íèáóäü äëÿ òåáÿ ñêóþ.
    ai_output(self, other, "DIA_GRD_219_Stone3_06_03"); //Êîëüöî èëè ÷òî-òî âðîäå òîãî...
};

instance dia_grd_219_stone2(c_info) {
    npc = grd_219_stone /*7250*/;
    nr = 0;
    condition = dia_grd_219_stone2_condition;
    information = dia_grd_219_stone2_info;
    description = "Êàê òû óãîäèë çà ðåøåòêó?";
};

func int dia_grd_219_stone2_condition() {
    if (npc_knowsinfo(hero, dia_grd_219_stone3 /*9185*/)) {
        return 1;
    };
};

func void dia_grd_219_stone2_info() {
    ai_output(other, self, "DIA_GRD_219_Stone2_15_01"); //Êàê òû óãîäèë çà ðåøåòêó?
    ai_output(self, other, "DIA_GRD_219_Stone2_06_02"); //Ãîìåç! Ýòîò óáëþäîê îáâèíèë ìåíÿ â ñãîâîðå ñ ìàãàìè Îãíÿ. Îí è íå óáèë-òî ìåíÿ òîëüêî ïîòîìó, ÷òî ÿ ëó÷øèé êóçíåö âî âñåì Ñòàðîì Ëàãåðå.
    ai_output(self, other, "DIA_GRD_219_Stone2_06_03"); //Ìåíÿ øâûðíóëè â ýòó êðûñèíóþ äûðó è äîñòàâàëè îòòóäà, òîëüêî êîãäà íóæíî áûëî ñäåëàòü ÷òî-òî äëÿ Ãîìåçà.
};

instance dia_grd_219_stone4(c_info) {
    npc = grd_219_stone /*7250*/;
    nr = 0;
    condition = dia_grd_219_stone4_condition;
    information = dia_grd_219_stone4_info;
    description = "Òû ìîæåøü óêðåïèòü ýòè äîñïåõè?";
};

func int dia_grd_219_stone4_condition() {
    if ((npc_knowsinfo(hero, dia_grd_219_stone3 /*9185*/) && npc_hasitems(hero, ore_armor_m)) && (knowstone == 0)) {
        return 1;
    };
};

func void dia_grd_219_stone4_info() {
    ai_output(other, self, "DIA_GRD_219_Stone4_15_01"); //Òû ìîæåøü óêðåïèòü ýòè äîñïåõè?
    ai_output(self, other, "DIA_GRD_219_Stone4_06_02"); //Êîíå÷íî. Äàâàé èõ ñþäà è ïîäîæäè ìèíóòêó.
    ai_unequiparmor(hero);
    b_giveinvitems(hero, self, ore_armor_m /*4152*/, 1);
    npc_removeinvitem(self, ore_armor_m /*4152*/);
    b_startusemob(self, "BSFIRE");
    ai_wait(self, 1.0);
    b_stopusemob(self, "BSFIRE");
    ai_wait(self, 1.0);
    b_startusemob(self, "BSANVIL");
    ai_wait(self, 1.0);
    b_stopusemob(self, "BSANVIL");
    ai_wait(self, 1.0);
    ai_gotonpc(self, hero);
    createinvitem(self, ore_armor_h);
    b_giveinvitems(self, hero, ore_armor_h /*4153*/, 1);
    ai_output(self, other, "DIA_GRD_219_Stone4_06_03"); //Âîò òåáå óñèëåííûå äîñïåõè. Òåïåðü ìû â ðàñ÷åòå.
    knowstone = 1;
};

instance dia_grd_219_stone5(c_info) {
    npc = grd_219_stone /*7250*/;
    nr = 0;
    condition = dia_grd_219_stone5_condition;
    information = dia_grd_219_stone5_info;
    description = "Ñ ïîìîùüþ êîëüöà ÿ ìîã áû ïîâûñèòü çàïàñ çäîðîâüÿ.";
};

func int dia_grd_219_stone5_condition() {
    if (npc_knowsinfo(hero, dia_grd_219_stone3 /*9185*/) && (knowstone == 0)) {
        return 1;
    };
};

func void dia_grd_219_stone5_info() {
    ai_output(other, self, "DIA_GRD_219_Stone5_15_01"); //Ñ ïîìîùüþ êîëüöà ÿ ìîã áû ïîâûñèòü çàïàñ çäîðîâüÿ.
    ai_output(self, other, "DIA_GRD_219_Stone5_06_02"); //Ýòî ñîâñåì íå ñëîæíî, ïîäîæäè ìèíóòêó.
    b_startusemob(self, "BSFIRE");
    ai_wait(self, 1.0);
    b_stopusemob(self, "BSFIRE");
    ai_wait(self, 1.0);
    b_startusemob(self, "BSANVIL");
    ai_wait(self, 1.0);
    b_stopusemob(self, "BSANVIL");
    ai_wait(self, 1.0);
    ai_gotonpc(self, hero);
    ai_output(self, other, "DIA_GRD_219_Stone5_06_03"); //Êîëüöî Çäîðîâüÿ äàñò òåáå äîïîëíèòåëüíûé çàïàñ æèçíåííûõ ñèë. Òåïåðü ìû â ðàñ÷åòå - ýòîãî äîëæíî áûòü áîëåå ÷åì äîñòàòî÷íî.
    createinvitem(self, ring_des_lebens2);
    b_giveinvitems(self, other, ring_des_lebens2 /*4947*/, 1);
    knowstone = 1;
};

instance dia_grd_219_stone6(c_info) {
    npc = grd_219_stone /*7250*/;
    nr = 0;
    condition = dia_grd_219_stone6_condition;
    information = dia_grd_219_stone6_info;
    description = "Êîëüöî ïðèãîäèëîñü áû ìíå äëÿ çàùèòû.";
};

func int dia_grd_219_stone6_condition() {
    if (npc_knowsinfo(hero, dia_grd_219_stone3 /*9185*/) && (knowstone == 0)) {
        return 1;
    };
};

func void dia_grd_219_stone6_info() {
    ai_output(other, self, "DIA_GRD_219_Stone6_15_01"); //Êîëüöî ïðèãîäèëîñü áû ìíå äëÿ çàùèòû.
    ai_output(self, other, "DIA_GRD_219_Stone6_06_02"); //Êîëüöî Çàùèòû? Õîðîøî, ÿ íà÷íó ïðÿìî ñåé÷àñ. Ïîäîæäè íåìíîãî.
    b_startusemob(self, "BSFIRE");
    ai_wait(self, 1.0);
    b_stopusemob(self, "BSFIRE");
    ai_wait(self, 1.0);
    b_startusemob(self, "BSANVIL");
    ai_wait(self, 1.0);
    b_stopusemob(self, "BSANVIL");
    ai_wait(self, 1.0);
    ai_gotonpc(self, hero);
    ai_output(self, other, "DIA_GRD_219_Stone6_06_03"); //Òåáå áûëî íóæíî Êîëüöî Çàùèòû - òû åãî ïîëó÷èë, òàê ÷òî òåïåðü ìû â ðàñ÷åòå.
    createinvitem(self, schutzring_total2);
    b_giveinvitems(self, other, schutzring_total2 /*4935*/, 1);
    knowstone = 1;
};

instance dia_grd_219_stone7(c_info) {
    npc = grd_219_stone /*7250*/;
    nr = 0;
    condition = dia_grd_219_stone7_condition;
    information = dia_grd_219_stone7_info;
    description = "Ìíå íóæíî ÷òî-íèáóäü, ÷òîáû ïîâûñèòü ìîþ ìàãè÷åñêóþ ñèëó.";
};

func int dia_grd_219_stone7_condition() {
    if (npc_knowsinfo(hero, dia_grd_219_stone3 /*9185*/) && (knowstone == 0)) {
        return 1;
    };
};

func void dia_grd_219_stone7_info() {
    ai_output(other, self, "DIA_GRD_219_Stone7_15_01"); //Ìíå íóæíî ÷òî-íèáóäü, ÷òîáû ïîâûñèòü ìîþ ìàãè÷åñêóþ ñèëó.
    ai_output(self, other, "DIA_GRD_219_Stone7_06_02"); //...×òî-íèáóäü, ÷òîáû ïîâûñèòü ìàãè÷åñêóþ ñèëó?.. Àìóëåò! Õîðîøî, ÿ ñêóþ äëÿ òåáÿ Àìóëåò Ìàãèè. Ýòî íå çàéìåò ìíîãî âðåìåíè.
    b_startusemob(self, "BSFIRE");
    ai_wait(self, 1.0);
    b_stopusemob(self, "BSFIRE");
    ai_wait(self, 1.0);
    b_startusemob(self, "BSANVIL");
    ai_wait(self, 1.0);
    b_stopusemob(self, "BSANVIL");
    ai_wait(self, 1.0);
    ai_gotonpc(self, hero);
    ai_output(self, other, "DIA_GRD_219_Stone7_06_03"); //Íó âîò, àìóëåò ãîòîâ. Ñêàæó áåç ëèøíåé ñêðîìíîñòè - ýòî õîðîøàÿ ðàáîòà. Òåïåðü ìû â ðàñ÷åòå.
    createinvitem(self, amulett_der_magie);
    b_giveinvitems(self, other, amulett_der_magie /*4045*/, 1);
    knowstone = 1;
};

instance info_pacho_exit(c_info) {
    npc = grd_224_pacho /*7266*/;
    nr = 999;
    condition = info_pacho_exit_condition;
    information = info_pacho_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_pacho_exit_condition() {
    return true;
};

func void info_pacho_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_pacho_stop(c_info) {
    npc = grd_224_pacho /*7266*/;
    condition = info_pacho_stop_condition;
    information = info_pacho_stop_info;
    important = true;
};

func int info_pacho_stop_condition() {
    return true;
};

func void info_pacho_stop_info() {
    ai_output(self, hero, "Info_Pacho_STOP_13_01"); //Ýé, òû!
    ai_output(hero, self, "Info_Pacho_STOP_15_02"); //Êòî? ß?
    ai_output(self, hero, "Info_Pacho_STOP_13_03"); //Íåò, òâîÿ áàáóøêà... Ê êîìó åùå ÿ ìîãó îáðàùàòüñÿ?!
    ai_output(self, hero, "Info_Pacho_STOP_13_04"); //Íà òâîåì ìåñòå ÿ áû íå õîäèë òóäà!
    ai_output(hero, self, "Info_Pacho_STOP_15_05"); //Ïî÷åìó íåò?
    ai_output(self, hero, "Info_Pacho_STOP_13_06"); //Ñðàçó âèäíî, ÷òî òû íîâè÷îê.
    ai_output(self, hero, "Info_Pacho_STOP_13_07"); //Ïàðåíü, ýòà äîðîãà âåäåò ê çåìëÿì îðêîâ...
    ai_output(self, hero, "Info_Pacho_STOP_13_08"); //Îíè ñ ðàäîñòüþ ïðèãîòîâÿò èç òåáÿ çàêóñêó ê øíàïñó!
    ai_output(hero, self, "Info_Pacho_STOP_15_09"); //Îõ...
    ai_output(self, hero, "Info_Pacho_STOP_13_10"); //Íå çà ÷òî!
    ai_stopprocessinfos(self);
};

instance info_bloodwyn_exit_schutzgeld(c_info) {
    npc = grd_233_bloodwyn /*7295*/;
    nr = 999;
    condition = info_bloodwyn_exit_schutzgeld_condition;
    information = info_bloodwyn_exit_schutzgeld_info;
    permanent = true;
    description = dialog_ende;
};

func int info_bloodwyn_exit_schutzgeld_condition() {
    return 1;
};

func void info_bloodwyn_exit_schutzgeld_info() {
    ai_output(other, self, "Info_Bloodwyn_EXIT_Schutzgeld_15_00"); //Óâèäèìñÿ.
    if (bloodwyn_protectionpaid == false) {
        ai_output(self, other, "Info_Bloodwyn_EXIT_Schutzgeld_08_01"); //Áåðåãè ñåáÿ, ìàëûø.
    }
    else {
        ai_output(self, other, "Info_Bloodwyn_EXIT_Schutzgeld_08_02"); //Òû òåïåðü íè î ÷åì íå âîëíóéñÿ. Ìû ïðèãëÿäèì çà òîáîé.
    };
    ai_stopprocessinfos(self);
};

instance info_bloodwyn_hello(c_info) {
    npc = grd_233_bloodwyn /*7295*/;
    nr = 3;
    condition = info_bloodwyn_hello_condition;
    information = info_bloodwyn_hello_info;
    important = true;
};

func int info_bloodwyn_hello_condition() {
    if ((kapitel <= 2) && (npc_gettrueguild(hero) == gil_none)) {
        return 1;
    };
};

func void info_bloodwyn_hello_info() {
    ai_output(self, other, "Info_Bloodwyn_Hello_08_00"); //Ýé, òû!
    ai_output(other, self, "Info_Bloodwyn_Hello_15_01"); //Ýòî òû ìíå ãîâîðèøü?
    ai_output(self, other, "Info_Bloodwyn_Hello_08_02"); //ß ïðåäóïðåæäàþ òåáÿ! Òàêèå òèïû, êàê òû, î÷åíü áûñòðî ïîïàäàþò çäåñü â íåïðèÿòíîñòè!
    ai_output(self, other, "Info_Bloodwyn_Hello_08_03"); //Ñþäà áðîñàþò, â îñíîâíîì, çàêîí÷åííûõ óáëþäêîâ.
    ai_output(self, other, "Info_Bloodwyn_Hello_08_04"); //È îíè äóìàþò, ÷òî ìîãóò äåëàòü ñ òîáîé âñå, ÷òî õîòÿò. Íî ìû èì ýòîãî íå ïîçâîëèì.
    ai_output(self, other, "Info_Bloodwyn_Hello_08_05"); //Ãîìåç õî÷åò, ÷òîáû â Ëàãåðå áûë ìèð, è ìû, ñòðàæíèêè, ñëåäèì çà ýòèì. Íî ýòà ðàáîòà îáõîäèòñÿ íàì íåäåøåâî.
    ai_output(self, other, "Info_Bloodwyn_Hello_08_06"); //Âîò ïî÷åìó ÿ ïðåäëàãàþ òåáå ïîäåëèòüñÿ çàïàñîì ðóäû. Ñêàæåì òàê, â çíàê äðóæáû. Òû ïîìîãàåøü íàì, ìû ïîìîãàåì òåáå. È åñëè ó òåáÿ áóäóò ïðîáëåìû, ìû ïðèäåì íà ïîìîùü.
    info_clearchoices(info_bloodwyn_hello /*9212*/);
    info_addchoice(info_bloodwyn_hello /*9212*/, "Ïî÷åìó áû è íåò? Ñêîëüêî òû õî÷åøü ïîëó÷èòü?", info_bloodwyn_hello_howmuch);
    info_addchoice(info_bloodwyn_hello /*9212*/, "ß ñàì ìîãó î ñåáå ïîçàáîòèòüñÿ!", info_bloodwyn_hello_forgetit);
    info_addchoice(info_bloodwyn_hello /*9212*/, "Ýòî óãðîçà?", info_bloodwyn_hello_solldrohungsein);
};

func void info_bloodwyn_hello_forgetit() {
    ai_output(other, self, "Info_Bloodwyn_ForgetIt_15_00"); //Òû ïðåäëàãàåøü ìíå ïëàòèòü äåíüãè çà çàùèòó? Íåò, ñïàñèáî, ÿ ñàì ìîãó î ñåáå ïîçàáîòèòüñÿ!
    ai_output(self, other, "Info_Bloodwyn_ForgetIt_08_01"); //Ðåøàòü òåáå, ìàëûø. Ñêîðî òû ïîæàëååøü î òîì, ÷òî îòâåðã ìîå äðóæåñêîå ïðåäëîæåíèå.
    bloodwyn_protectionpaid = false;
    herek_protectionbully = true;
    grim_protectionbully = true;
    bloodwyn_payday = b_setdaytolerance();
    info_clearchoices(info_bloodwyn_hello /*9212*/);
};

func void info_bloodwyn_hello_solldrohungsein() {
    ai_output(other, self, "Info_Bloodwyn_SollDrohungSein_15_00"); //Ýòî óãðîçà?
    ai_output(self, other, "Info_Bloodwyn_SollDrohungSein_08_01"); //Ñîâñåì íàîáîðîò! Ýòî ïðåäëîæåíèå äðóæáû!
};

func void info_bloodwyn_hello_howmuch() {
    ai_output(other, self, "Info_Bloodwyn_Hello_HowMuch_15_01"); //Ïî÷åìó áû è íåò? Ñêîëüêî òû õî÷åøü ïîëó÷èòü?
    ai_output(self, other, "Info_Bloodwyn_Hello_HowMuch_08_02"); //Íåìíîãî. Äåñÿòü êóñêîâ áóäåò âïîëíå äîñòàòî÷íî.
    info_clearchoices(info_bloodwyn_hello /*9212*/);
    info_addchoice(info_bloodwyn_hello /*9212*/, "Ó ìåíÿ íåò äåñÿòè êóñêîâ ðóäû.", info_bloodwyn_hello_notnow);
    if (npc_hasitems(other, itminugget) >= 10) {
        info_addchoice(info_bloodwyn_hello /*9212*/, "Âîò òâîÿ ðóäà. Äðóæáà âñåãäà â öåíå.", info_bloodwyn_hello_oktakeit);
    };
};

func void info_bloodwyn_hello_oktakeit() {
    ai_output(other, self, "Info_Bloodwyn_Hello_OkTakeIt_15_00"); //Âîò òâîÿ ðóäà. Äðóæáà âñåãäà â öåíå.
    ai_output(self, other, "Info_Bloodwyn_Hello_OkTakeIt_08_01"); //Ïîõîæå, òû óìíûé ïàðåíü. Ñ ýòîãî ìîìåíòà ìû áóäåì çàùèùàòü òåáÿ.
    ai_output(self, other, "Info_Bloodwyn_Hello_OkTakeIt_08_02"); //Íî ýòî íå çíà÷èò, ÷òî òû ìîæåøü äåëàòü âñå, ÷òî çàõî÷åøü - èç íåêîòîðûõ íåïðèÿòíîñòåé äàæå ìû íå ñìîæåì òåáÿ âûòàùèòü.
    b_giveinvitems(other, self, itminugget /*4517*/, 10);
    bloodwyn_protectionpaid = true;
    herek_protectionbully = false;
    grim_protectionbully = false;
    npc_setpermattitude(self, att_friendly);
    bloodwyn_payday = b_setdaytolerance();
    info_clearchoices(info_bloodwyn_hello /*9212*/);
};

func void info_bloodwyn_hello_notnow() {
    ai_output(other, self, "Info_Bloodwyn_Hello_NotNow_15_00"); //Ó ìåíÿ íåò äåñÿòè êóñêîâ ðóäû.
    ai_output(self, other, "Info_Bloodwyn_Hello_NotNow_08_01"); //Äàâàé ñêîëüêî åñòü, à îñòàëüíîå îòäàøü ïîòîì.
    ai_gotonpc(self, other);
    ai_output(self, other, "Info_Bloodwyn_Hello_NotNow_08_02"); //Ïîñìîòðèì...
    if (npc_hasitems(other, itminugget) > 0) {
        if (npc_hasitems(other, itminugget) > 9) {
            ai_output(self, other, "Info_Bloodwyn_Hello_NotNow_TenOreMore_08_00"); //Òû òîëüêî ïîãëàäè íà ýòî... Ïîõîæå, êòî-òî íå óìååò ñ÷èòàòü äî äåñÿòè, à?
            ai_output(self, other, "Info_Bloodwyn_Hello_NotNow_TenOreMore_08_01"); //Ïîæàëóé, ÿ çàáåðó âñå, ÷òî ó òåáÿ åñòü. Ìîæåò áûòü òîãäà ÿ ñóìåþ çàáûòü, ÷òî òû ïûòàëñÿ îáìàíóòü ìåíÿ.
        }
        else {
            ai_output(self, other, "Info_Bloodwyn_Hello_NotNow_LessThanTen_08_00"); //Ìàëî - ëó÷øå, ÷åì íè÷åãî. Ñïàñèáî çà ðóäó, ìàëûø!
            ai_output(self, other, "Info_Bloodwyn_Hello_NotNow_LessThanTen_08_01"); //Ñ ýòîãî ìîìåíòà ÿ áóäó ïðèãëÿäûâàòü çà òîáîé, ïîêà òû íàõîäèøüñÿ â Ëàãåðå.
        };
    }
    else {
        ai_output(self, other, "Info_Bloodwyn_Hello_NotNow_NoOre_08_00"); //Ïîõîæå, ó òåáÿ ñåé÷àñ íå ëó÷øèå âðåìåíà, ïðèÿòåëü. Íó íè÷åãî, êàê-íèáóäü â äðóãîé ðàç...
    };
    b_giveinvitems(other, self, itminugget /*4517*/, npc_hasitems(other, itminugget));
    bloodwyn_protectionpaid = true;
    herek_protectionbully = false;
    grim_protectionbully = false;
    npc_setpermattitude(self, att_friendly);
    bloodwyn_payday = b_setdaytolerance();
    info_clearchoices(info_bloodwyn_hello /*9212*/);
};

instance info_bloodwyn_payday(c_info) {
    npc = grd_233_bloodwyn /*7295*/;
    nr = 3;
    condition = info_bloodwyn_payday_condition;
    information = info_bloodwyn_payday_info;
    permanent = true;
    important = true;
};

func int info_bloodwyn_payday_condition() {
    if ((((kapitel <= 2) && (npc_gettrueguild(hero) == gil_none)) && (bloodwyn_payday <= (wld_getday() - 1))) && (npc_hasitems(other, itminugget) >= 10)) {
        return 1;
    };
};

func void info_bloodwyn_payday_info() {
    if (bloodwyn_protectionpaid == true) {
        ai_output(self, other, "Info_Bloodwyn_PayDay_08_00"); //À, ðàä òåáÿ âèäåòü, äðóæèùå!
        ai_output(self, other, "Info_Bloodwyn_PayDay_08_01"); //Êàê íàñ÷åò äíåâíîé ïëàòû? Òû äîëæåí äåñÿòü êóñêîâ, ïîìíèøü?
        info_clearchoices(info_bloodwyn_payday /*9220*/);
        info_addchoice(info_bloodwyn_payday /*9220*/, "Âîò, âîçüìè. Äëÿ äðóãà è 10 êóñêîâ íå æàëêî.", info_bloodwyn_payday_payagain);
        info_addchoice(info_bloodwyn_payday /*9220*/, "ß íå áóäó ïëàòèòü.", info_bloodwyn_payday_paynomore);
    }
    else {
        if (bloodwyn_protectionpaid == false) {
            ai_output(self, other, "Info_Bloodwyn_PayDay_Den_08_00"); //Ýé, òû!
            ai_output(other, self, "Info_Bloodwyn_PayDay_Den_15_01"); //×òî åùå?
            ai_output(self, other, "Info_Bloodwyn_PayDay_Den_08_02"); //Ïðèøëî âðåìÿ äîêàçàòü, ÷òî ìû íà ñàìîì äåëå äðóçüÿ.
            ai_output(self, other, "Info_Bloodwyn_PayDay_Den_08_03"); //Âñåãî äåñÿòü êóñêîâ ðóäû - ÷òî ñêàæåøü?
        };
    };
    bloodwyn_payday = b_setdaytolerance();
};

func void info_bloodwyn_payday_payagain() {
    ai_output(other, self, "Info_Bloodwyn_PayDay_PayAgain_15_00"); //Âîò, âîçüìè. Äëÿ äðóãà è äåñÿòè êóñêîâ íå æàëêî.
    ai_output(self, other, "Info_Bloodwyn_PayDay_PayAgain_08_01"); //ß òàê è äóìàë - ìû äðóçüÿ!
    b_giveinvitems(other, self, itminugget /*4517*/, 10);
    bloodwyn_protectionpaid = true;
    herek_protectionbully = false;
    grim_protectionbully = false;
    npc_setpermattitude(self, att_friendly);
    info_clearchoices(info_bloodwyn_payday /*9220*/);
};

func void info_bloodwyn_payday_paynomore() {
    ai_output(other, self, "Info_Bloodwyn_PayDay_PayNoMore_15_00"); //ß íå áóäó ïëàòèòü - òû è òàê ïîëó÷èë ñ ìåíÿ áîëåå ÷åì äîñòàòî÷íî.
    ai_output(self, other, "Info_Bloodwyn_PayDay_PayNoMore_08_01"); //Òû ìåíÿ ðàçî÷àðîâàë. Áîëüøå ìû íå äðóçüÿ. Ñàì ãëÿäè òåïåðü, ÷òîáû íèêòî òåáÿ íå îáèäåë è íå îãðàáèë.
    ai_output(other, self, "Info_Bloodwyn_PayDay_PayNoMore_15_02"); //Íå âîëíóéñÿ, ÿ ìîãó î ñåáå ïîçàáîòèòüñÿ.
    ai_output(self, other, "Info_Bloodwyn_PayDay_PayNoMore_08_03"); //Ïîñìîòðèì...
    bloodwyn_protectionpaid = false;
    herek_protectionbully = true;
    grim_protectionbully = true;
    npc_setpermattitude(self, att_angry);
    info_clearchoices(info_bloodwyn_payday /*9220*/);
};

instance info_bloodwyn_doch(c_info) {
    npc = grd_233_bloodwyn /*7295*/;
    nr = 3;
    condition = info_bloodwyn_doch_condition;
    information = info_bloodwyn_doch_info;
    permanent = true;
    description = "ß ïåðåäóìàë. Âîò äåñÿòü êóñêîâ ðóäû. ";
};

func int info_bloodwyn_doch_condition() {
    if (bloodwyn_protectionpaid == false) {
        return 1;
    };
};

func void info_bloodwyn_doch_info() {
    ai_output(other, self, "Info_Bloodwyn_Doch_15_00"); //ß ïåðåäóìàë. Âîò äåñÿòü êóñêîâ ðóäû.
    if (npc_hasitems(other, itminugget) >= 10) {
        ai_output(self, other, "Info_Bloodwyn_Doch_08_01"); //Âîò ýòî äðóãîå äåëî! Âèäèøü - òû ÌÎÆÅØÜ ïðèíèìàòü ïðàâèëüíûå ðåøåíèÿ.
        ai_output(self, other, "Info_Bloodwyn_Doch_08_02"); //Òåïåðü òû áóäåøü ïëàòèòü ìíå êàæäûé äåíü, òàê?
        b_giveinvitems(other, self, itminugget /*4517*/, 10);
        bloodwyn_protectionpaid = true;
        herek_protectionbully = false;
        grim_protectionbully = false;
        npc_setpermattitude(self, att_friendly);
        bloodwyn_payday = b_setdaytolerance();
    }
    else {
        ai_output(self, other, "Info_Bloodwyn_Doch_NoOre_08_00"); //Âîçâðàùàéñÿ, êîãäà ó òåáÿ áóäåò ÷åì çàïëàòèòü.
        ai_stopprocessinfos(self);
    };
};

instance info_bloodwyn_payforjesse(c_info) {
    npc = grd_233_bloodwyn /*7295*/;
    nr = 5;
    condition = info_bloodwyn_payforjesse_condition;
    information = info_bloodwyn_payforjesse_info;
    permanent = true;
    description = "Äæåññ ïðîñèë çàïëàòèòü çà íåãî äåñÿòü êóñêîâ ðóäû.";
};

func int info_bloodwyn_payforjesse_condition() {
    if (jesse_payforme == log_running) {
        return 1;
    };
};

func void info_bloodwyn_payforjesse_info() {
    ai_output(other, self, "Info_Bloodwyn_PayForJesse_15_00"); //Äæåññ ïðîñèë çàïëàòèòü çà íåãî äåñÿòü êóñêîâ ðóäû.
    if (bloodwyn_protectionpaid == false) {
        ai_output(self, other, "Info_Bloodwyn_PayForJesse_08_01"); //Ìíå êàæåòñÿ, ïðåæäå òû äîëæåí çàïëàòèòü ÑÂÎÈ äåñÿòü êóñêîâ.
    };
    ai_output(self, other, "Info_Bloodwyn_PayForJesse_08_02"); //Çàáóäü ïðî Äæåññà. Îí íåóäà÷íèê è âñå ðàâíî äîëãî íå ïðîòÿíåò.
    if (npc_hasitems(other, itminugget) >= 10) {
        ai_output(other, self, "Info_Bloodwyn_PayForJesse_15_03"); //Íåò, ÿ çàïëà÷ó çà íåãî. Âîçüìè äåñÿòü êóñêîâ è îñòàâü åãî â ïîêîå.
        ai_output(self, other, "Info_Bloodwyn_PayForJesse_08_04"); //Ëàäíî, ïàðåíü, êàê õî÷åøü.
        b_giveinvitems(other, self, itminugget /*4517*/, 10);
        jesse_payforme = log_success;
    }
    else {
        ai_output(other, self, "Info_Bloodwyn_PayForJesse_15_05"); //×åðò! Êàæåòñÿ, ó ìåíÿ íå õâàòàåò ðóäû.
        ai_output(self, other, "Info_Bloodwyn_PayForJesse_08_06"); //Ýòî çíàê ñâûøå, ïàðåíü! Ïîäóìàé åùå ðàç! Çà÷åì òåáå òðàòèòü ðóäó íà ýòîãî ëîäûðÿ?
    };
};

instance grd_233_bloodwyn_welcome(c_info) {
    npc = grd_233_bloodwyn /*7295*/;
    condition = grd_233_bloodwyn_welcome_condition;
    information = grd_233_bloodwyn_welcome_info;
    important = true;
};

func int grd_233_bloodwyn_welcome_condition() {
    if (npc_gettrueguild(hero) == gil_grd) {
        return true;
    };
};

func void grd_233_bloodwyn_welcome_info() {
    ai_output(self, other, "GRD_233_Bloodwyn_WELCOME_Info_08_01"); //Òåïåðü òû îäèí èç íàñ. Õîðîøî. Ñòðàæå íóæíû òàêèå ïàðíè, êàê òû.
};

instance info_bloodwyn_die(c_info) {
    npc = grd_233_bloodwyn /*7295*/;
    condition = info_bloodwyn_die_condition;
    information = info_bloodwyn_die_info;
    important = true;
};

func int info_bloodwyn_die_condition() {
    if (kapitel >= 4) {
        return true;
    };
};

func void info_bloodwyn_die_info() {
    ai_gotonpc(self, hero);
    if (((oldheroguild == gil_stt) || (oldheroguild == gil_grd)) || (oldheroguild == gil_kdf)) {
        if (oldheroguild == gil_grd) {
            ai_output(self, hero, "Info_Bloodwyn_DIE_08_01"); //Ïðåäàòåëü â íàøèõ ðÿäàõ! ÒÜÔÓ! È ìû íàçûâàëè òåáÿ ñòðàæíèêîì!
        }
        else if (oldheroguild == gil_kdf) {
            ai_output(self, hero, "Info_Bloodwyn_DIE_08_02"); //Ïîõîæå, ìû çàñåêëè îäíîãî èç ìÿòåæíûõ ìàãîâ Îãíÿ!
        }
        else {
            ai_output(self, hero, "Info_Bloodwyn_DIE_08_03"); //Íàñ ïðåäàë îäèí èç Ïðèçðàêîâ!
        };
        ai_output(hero, self, "Info_Bloodwyn_DIE_15_04"); //Ïîãîäè. Î ÷åì òû ãîâîðèøü, Áëàäâèí?
        ai_output(self, hero, "Info_Bloodwyn_DIE_08_05"); //Ñâÿçàëñÿ ñ Íîâûì Ëàãåðåì, äà?
        ai_output(hero, self, "Info_Bloodwyn_DIE_15_06"); //Íåò, ïîñòîé, ÿ...
        ai_output(self, hero, "Info_Bloodwyn_DIE_08_07"); //Ïîõîæå. òû äóìàë, ÷òî ñìîæåøü áåñêîíå÷íî ïóäðèòü íàì ìîçãè.
        ai_output(hero, self, "Info_Bloodwyn_DIE_15_08"); //×òî çà ÷óøü...
        ai_output(self, hero, "Info_Bloodwyn_DIE_08_09"); //Ïðåäàòåëè äîëæíû óìåðåòü.
        ai_output(self, hero, "Info_Bloodwyn_DIE_08_10"); //ÓÌÐÈ, ÏÐÅÄÀÒÅËÜ!!!
        if (npc_knowsinfo(hero, info_fletcher_die /*9331*/)) {
            b_logentry(ch4_bannedfromoc, ch4_bannedfromoc_4);
        }
        else {
            if (npc_gettrueguild(hero) == gil_none) {
                log_createtopic(ch4_bannedfromoc, log_mission);
                log_settopicstatus(ch4_bannedfromoc, log_running);
                b_logentry(ch4_bannedfromoc, ch4_bannedfromoc_5);
                b_logentry(ch4_bannedfromoc, ch4_bannedfromoc_3);
            };
        };
    }
    else {
        if (c_npcbelongstonewcamp(hero)) {
            ai_output(self, hero, "Info_Bloodwyn_DIE_08_11"); //Òàê òû ðåøèë âûñóíóòü íîñ èç ñâîåãî Íîâîãî Ëàãåðÿ? Ýòî áûëî î÷åíü ãëóïî ñ òâîåé ñòîðîíû!
        }
        else {
            ai_output(self, hero, "Info_Bloodwyn_DIE_08_12"); //Î, òàê òû ðåøèë âûñóíóòü íîñ èç ñâîåãî áîëîòà? Ýòî áûëî î÷åíü ãëóïî ñ òâîåé ñòîðîíû!
        };
        ai_output(hero, self, "Info_Bloodwyn_DIE_15_13"); //×òî?! ×òî òû èìååøü â âèäó?
        ai_output(self, hero, "Info_Bloodwyn_DIE_08_14"); //Òû ÷òî, íå ñëûøàë î íàïàäåíèè íà øàõòå?
        ai_output(hero, self, "Info_Bloodwyn_DIE_15_15"); //×òî...
        ai_output(self, hero, "Info_Bloodwyn_DIE_08_16"); //Ïðîñòè, íî ìû íå ìîæåì ïîçâîëèòü òåáå áîëòàòü îá ýòîì íàïðàâî è íàëåâî.
        ai_output(hero, self, "Info_Bloodwyn_DIE_15_17"); //Ýé, ÿ íå õî÷ó íåïðèÿòíîñòåé...
        ai_output(self, hero, "Info_Bloodwyn_DIE_08_18"); //Òåáå ñòîèëî ïîäóìàòü îá ýòîì ðàíüøå!
        ai_output(hero, self, "Info_Bloodwyn_DIE_15_19"); //Âñå, ñ ìåíÿ äîâîëüíî...
        ai_output(self, hero, "Info_Bloodwyn_DIE_08_20"); //Ñ ìåíÿ òîæå! ÓÁÅÉÒÅ ÅÃÎ!
    };
    npc_exchangeroutine(self, "FMTaken2");
    b_exchangeroutine(grd_232_gardist /*7291*/, "FMTaken2");
    b_exchangeroutine(grd_229_gardist /*7280*/, "FMTaken2");
    b_exchangeroutine(grd_216_torwache /*7240*/, "FMTaken2");
    b_exchangeroutine(grd_217_torwache /*7244*/, "FMTaken2");
    b_setpermattitude(grd_233_bloodwyn /*7295*/, att_hostile);
    b_setpermattitude(grd_232_gardist /*7291*/, att_hostile);
    b_setpermattitude(grd_229_gardist /*7280*/, att_hostile);
    b_setpermattitude(grd_216_torwache /*7240*/, att_hostile);
    b_setpermattitude(grd_217_torwache /*7244*/, att_hostile);
    if (!npc_knowsinfo(hero, info_fletcher_die /*9331*/)) {
        b_logentry(ch4_firemages, ch4_firemages_6);
    };
    ai_stopprocessinfos(self);
};

const string grd_237_checkpoint = "OW_PATH_272";

instance info_grd_237_firstwarn(c_info) {
    npc = grd_237_gardist /*7305*/;
    nr = 1;
    condition = info_grd_237_firstwarn_condition;
    information = info_grd_237_firstwarn_info;
    permanent = true;
    important = true;
};

func int info_grd_237_firstwarn_condition() {
    if ((((hero.aivar[27] == aiv_gps_begin) && (self.aivar[29] == false)) && (npc_getattitude(self, hero) != att_friendly)) && hlp_strcmp(npc_getnearestwp(self), self.wp)) {
        return true;
    };
};

func void info_grd_237_firstwarn_info() {
    ai_output(self, hero, "Info_Grd_237_FirstWarn_07_01"); //Ëó÷øå òåáå íå ðàçãóëèâàòü çäåñü. Âîò òàì óæå íà÷èíàþòñÿ çåìëè îðêîâ.
    ai_output(hero, self, "Info_Grd_237_FirstWarn_15_02"); //Ýòî îïàñíî?
    ai_output(self, hero, "Info_Grd_237_FirstWarn_07_03"); //Ñêàæåì òàê: ëó÷øå îòäàé ÌÍÅ âñþ ñâîþ ðóäó, ïîòîìó ÷òî îðêè âñå ðàâíî ïîðóáÿò òåáÿ íà êóñêè.
    hero.aivar[28] = npc_getdisttowp(hero, grd_237_checkpoint);
    info_clearchoices(info_grd_237_firstwarn /*9238*/);
    info_addchoice(info_grd_237_firstwarn /*9238*/, "Êàê-íèáóäü â äðóãîé ðàç.", info_grd_237_firstwarn_info_no);
    info_addchoice(info_grd_237_firstwarn /*9238*/, "Ëàäíî, âîçüìè çà ñîâåò!", info_grd_237_firstwarn_info_yes);
    info_addchoice(info_grd_237_firstwarn /*9238*/, "ß äóìàþ, ìíå ñòîèò âåðíóòüñÿ íàçàä.", info_grd_237_firstwarn_info_retreat);
};

func void info_grd_237_firstwarn_info_retreat() {
    info_clearchoices(info_grd_237_firstwarn /*9238*/);
    ai_output(hero, self, "Info_Grd_237_FirstWarn_15_04"); //ß äóìàþ, ìíå ñòîèò âåðíóòüñÿ íàçàä.
    ai_output(self, hero, "Info_Grd_237_FirstWarn_07_05"); //Æàëü, ÿ óæå íà÷àë äóìàòü î òîì, êàê ïîòðàòèòü òâîþ ðóäó.
    hero.aivar[27] = aiv_gps_firstwarn;
    ai_stopprocessinfos(self);
};

func void info_grd_237_firstwarn_info_yes() {
    var int ore;

    info_clearchoices(info_grd_237_firstwarn /*9238*/);
    ai_output(hero, self, "Info_Grd_237_FirstWarn_15_06"); //Ëàäíî, âîçüìè çà ñîâåò!
    ai_output(self, hero, "Info_Grd_237_FirstWarn_07_07"); //Ýòî áûëî î÷åíü ùåäðî ñ òâîåé ñòîðîíû.
    ore = npc_hasitems(hero, itminugget);
    b_giveinvitems(hero, self, itminugget /*4517*/, ore);
    self.aivar[29] = true;
    hero.aivar[27] = aiv_gps_firstwarn;
    ai_stopprocessinfos(self);
};

func void info_grd_237_firstwarn_info_no() {
    info_clearchoices(info_grd_237_firstwarn /*9238*/);
    ai_output(hero, self, "Info_Grd_237_FirstWarn_15_08"); //Êàê-íèáóäü â äðóãîé ðàç.
    ai_output(self, hero, "Info_Grd_237_FirstWarn_07_09"); //Òîãäà ëó÷øå ñòîé òàì, ãäå ñòîèøü.
    hero.aivar[27] = aiv_gps_firstwarn;
    ai_stopprocessinfos(self);
};

instance info_grd_237_lastwarn(c_info) {
    npc = grd_237_gardist /*7305*/;
    nr = 2;
    condition = info_grd_237_lastwarn_condition;
    information = info_grd_237_lastwarn_info;
    permanent = true;
    important = true;
};

func int info_grd_237_lastwarn_condition() {
    if ((((hero.aivar[27] == aiv_gps_firstwarn) && (self.aivar[29] == false)) && (npc_getdisttowp(hero, grd_237_checkpoint) < (hero.aivar[28] - 100))) && hlp_strcmp(npc_getnearestwp(self), self.wp)) {
        return true;
    };
};

func int info_grd_237_lastwarn_info() {
    ai_output(self, hero, "Info_Grd_237_LastWarn_07_01"); //Òû ÷òî, îãëîõ? Åùå îäèí øàã, è òû ñòàíåøü ïèùåé äëÿ ÷åðâåé!
    hero.aivar[28] = npc_getdisttowp(hero, grd_237_checkpoint);
    hero.aivar[27] = aiv_gps_lastwarn;
    ai_stopprocessinfos(self);
};

instance info_grd_237_attack(c_info) {
    npc = grd_237_gardist /*7305*/;
    nr = 1;
    condition = info_grd_237_attack_condition;
    information = info_grd_237_attack_info;
    permanent = true;
    important = true;
};

func int info_grd_237_attack_condition() {
    if ((((hero.aivar[27] == aiv_gps_lastwarn) && (self.aivar[29] == false)) && (npc_getdisttowp(hero, grd_237_checkpoint) < (hero.aivar[28] - 100))) && hlp_strcmp(npc_getnearestwp(self), self.wp)) {
        return true;
    };
};

func int info_grd_237_attack_info() {
    hero.aivar[28] = 0;
    hero.aivar[27] = aiv_gps_punish;
    b_fullstop(self);
    ai_stopprocessinfos(self);
    b_setattackreason(self, aiv_ar_intruder);
    npc_settarget(self, hero);
    ai_startstate(self, zs_attack, 1, "");
};

instance dia_grd_245_hello(c_info) {
    npc = grd_245_gardist /*7336*/;
    nr = 1;
    condition = dia_grd_245_hello_condition;
    information = dia_grd_245_hello_info;
    permanent = true;
    description = "×òî â ýòîì äîìå?";
};

func int dia_grd_245_hello_condition() {
    return 1;
};

func void dia_grd_245_hello_info() {
    ai_output(other, self, "DIA_GRD_245_Hello_15_00"); //×òî â ýòîì äîìå?
    ai_output(self, other, "DIA_GRD_245_Hello_13_01"); //Ýòî äîì Áàðîíîâ. Âåäè ñåáÿ ïîâåæëèâåé, åñëè êîãäà-íèáóäü ïîïàäåøü òóäà.
};

instance info_kirgo_exit(c_info) {
    npc = grd_251_kirgo /*7344*/;
    nr = 999;
    condition = info_kirgo_exit_condition;
    information = info_kirgo_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_kirgo_exit_condition() {
    return 1;
};

func void info_kirgo_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_kirgo_what(c_info) {
    npc = grd_251_kirgo /*7344*/;
    nr = 1;
    condition = info_kirgo_what_condition;
    information = info_kirgo_what_info;
    description = "Ïðèâåò! ß çäåñü íîâåíüêèé.";
};

func int info_kirgo_what_condition() {
    if (kapitel <= 2) {
        return 1;
    };
};

func void info_kirgo_what_info() {
    ai_output(other, self, "Info_Kirgo_What_15_00"); //Ïðèâåò! ß çäåñü íîâåíüêèé.
    ai_output(self, other, "Info_Kirgo_What_05_01"); //Ìîã áû è íå ãîâîðèòü! Ðàññêàæè ìíå, ÷òî äåëàåòñÿ âî âíåøíåì ìèðå. Óæå áîëüøå ìåñÿöà íåò íèêàêèõ íîâîñòåé îòòóäà.
    ai_output(self, other, "Info_Kirgo_What_05_02"); //Ìåíÿ çîâóò Êèðãî. ß äåðóñü íà àðåíå.
};

instance info_kirgo_good(c_info) {
    npc = grd_251_kirgo /*7344*/;
    nr = 1;
    condition = info_kirgo_good_condition;
    information = info_kirgo_good_info;
    description = "È íàñêîëüêî òû õîðîø? ß èìåþ ââèäó - â áîþ.";
};

func int info_kirgo_good_condition() {
    if (npc_knowsinfo(hero, info_kirgo_what /*9257*/)) {
        return 1;
    };
};

func void info_kirgo_good_info() {
    ai_output(other, self, "Info_Kirgo_Good_15_00"); //È êàê, óñïåøíî?
    ai_output(self, other, "Info_Kirgo_Good_05_01"); //Äåðóñü-òî? ß óæå äàâíî ýòèì íå çàíèìàëñÿ, íî îäíàæäû ÿ ïîáåäèë!
};

instance info_kirgo_charge(c_info) {
    npc = grd_251_kirgo /*7344*/;
    nr = 1;
    condition = info_kirgo_charge_condition;
    information = info_kirgo_charge_info;
    description = "ß õî÷ó âûçâàòü òåáÿ íà áîé!";
};

func int info_kirgo_charge_condition() {
    if ((npc_knowsinfo(hero, dia_scatty_joinoc /*8997*/) && npc_knowsinfo(hero, info_kirgo_what /*9257*/)) && (kapitel <= 1)) {
        return 1;
    };
};

func void info_kirgo_charge_info() {
    ai_output(other, self, "Info_Kirgo_Charge_15_00"); //ß õî÷ó âûçâàòü òåáÿ íà áîé!
    ai_output(self, other, "Info_Kirgo_Charge_05_01"); //×òî? Íî ÿ íå õî÷ó äðàòüñÿ. Ìîæåò, ïðîñòî âûïüåì ïî ïèâó è ïîãîâîðèì î âíåøíåì ìèðå?
    info_clearchoices(info_kirgo_charge /*9263*/);
    info_addchoice(info_kirgo_charge /*9263*/, "Íåò! ß õî÷ó äðàòüñÿ. Ñåé÷àñ!", info_kirgo_charge_now);
    info_addchoice(info_kirgo_charge /*9263*/, "Ëàäíî, äàâàé òâîå ïèâî!", info_kirgo_charge_beer);
};

func void info_kirgo_charge_now() {
    ai_output(other, self, "Info_Kirgo_Charge_NOW_15_00"); //Íåò! ß õî÷ó äðàòüñÿ. Ñåé÷àñ!
    ai_output(self, other, "Info_Kirgo_Charge_NOW_05_01"); //Ðàç òàê... ÿ ãîòîâ.
    info_clearchoices(info_kirgo_charge /*9263*/);
};

func void info_kirgo_charge_beer() {
    ai_output(other, self, "Info_Kirgo_Charge_Beer_15_00"); //Ëàäíî, äàâàé òâîå ïèâî!
    ai_output(self, other, "Info_Kirgo_Charge_Beer_05_01"); //Äåðæè!
    ai_output(other, self, "Info_Kirgo_Charge_Beer_15_02"); //Ñïàñèáî! Áîþñü, ÿ íå ìíîãî ñìîãó ðàññêàçàòü î âíåøíåì ìèðå - ìåíÿ äâà ìåñÿöà äåðæàëè â ãðÿçíîé ÿìå, ïðåæäå ÷åì áðîñèòü ñþäà.
    ai_output(self, other, "Info_Kirgo_Charge_Beer_05_03"); //Æàëêî... Íó ëàäíî, íè÷åãî... Äëÿ ïàðíÿ, êîòîðîãî äâà ìåñÿöà ïðîäåðæàëè â ÿìå, òû âûãëÿäèøü î÷åíü äàæå íè÷åãî.
    ai_output(other, self, "Info_Kirgo_Charge_Beer_15_04"); //Õîòåëîñü áû è äàëüøå òàêèì îñòàâàòüñÿ.
    ai_output(self, other, "Info_Kirgo_Charge_Beer_05_05"); //Ïî÷åìó òû õî÷åøü äðàòüñÿ ñ îäíèì èç íàñ?
    ai_output(other, self, "Info_Kirgo_Charge_Beer_15_06"); //ß õî÷ó, ÷òîáû îáî ìíå óçíàëè â Ëàãåðå!
    ai_output(self, other, "Info_Kirgo_Charge_Beer_05_07"); //Îò Ñêàòòè ÷òî ëè? Õ-ì, îí îäèí èç ñàìûõ âëèÿòåëüíûõ ëþäåé âî Âíåøíåì Êîëüöå... Ïîáåäèâ ìåíÿ, òû ìîã áû ïðîèçâåñòè íà íåãî âïå÷àòëåíèå...
    ai_output(self, other, "Info_Kirgo_Charge_Beer_05_08"); //Íî åñëè òû íà ñàìîì äåëå õî÷åøü óäèâèòü åãî, òåáå ñòîèò ïîáèòü Õàðèìà. Íî áîþñü, òåáå îí íå ïî çóáàì!
    ai_output(self, other, "Info_Kirgo_Charge_Beer_05_09"); //Åñëè âñå åùå õî÷åøü äðàòüñÿ, äàé ìíå çíàòü. Íî çíàåøü, ìíå ñîâñåì íå õî÷åòñÿ âûøèáàòü èç òåáÿ äóõ.
    createinvitem(self, itfobeer);
    b_giveinvitems(self, other, itfobeer /*4326*/, 1);
    self.npctype = npctype_friend;
    info_clearchoices(info_kirgo_charge /*9263*/);
};

var int kirgo_charged;

instance info_kirgo_chargereal(c_info) {
    npc = grd_251_kirgo /*7344*/;
    nr = 1;
    condition = info_kirgo_chargereal_condition;
    information = info_kirgo_chargereal_info;
    description = "Ìû áóäåì äðàòüñÿ - òû ãîòîâ?";
};

func int info_kirgo_chargereal_condition() {
    if (npc_knowsinfo(hero, info_kirgo_charge /*9263*/) && (kapitel <= 1)) {
        return 1;
    };
};

func void info_kirgo_chargereal_info() {
    ai_output(other, self, "Info_Kirgo_ChargeREAL_15_00"); //Ìû áóäåì äðàòüñÿ - òû ãîòîâ?
    ai_output(self, other, "Info_Kirgo_ChargeREAL_05_01"); //Èäè çà ìíîé!
    ai_stopprocessinfos(self);
    kirgo_charged = true;
    npc_exchangeroutine(self, "GUIDE");
};

instance info_kirgo_inarena(c_info) {
    npc = grd_251_kirgo /*7344*/;
    nr = 1;
    condition = info_kirgo_inarena_condition;
    information = info_kirgo_inarena_info;
    important = true;
};

func int info_kirgo_inarena_condition() {
    if ((kirgo_charged == true) && (npc_getdisttowp(hero, "OCR_ARENABATTLE_TRAIN") < 500)) {
        return 1;
    };
};

func void info_kirgo_inarena_info() {
    if (kapitel <= 1) {
        ai_output(self, other, "Info_Kirgo_InArena_05_00"); //Ëàäíî, ïîåõàëè. Ïóñòü ïîáåäèò ñèëüíåéøèé!
        ai_stopprocessinfos(self);
        npc_exchangeroutine(self, "START");
        npc_settarget(self, other);
        ai_startstate(self, zs_attack, 1, "");
    }
    else {
        b_say(self, other, "$LetsForgetOurLittleFight");
        ai_stopprocessinfos(self);
        npc_exchangeroutine(self, "START");
    };
};

instance dia_orry_preexit(c_info) {
    npc = grd_254_orry /*7355*/;
    nr = 999;
    condition = dia_orry_preexit_condition;
    information = dia_orry_preexit_info;
    description = dialog_ende;
};

func int dia_orry_preexit_condition() {
    return 1;
};

func void dia_orry_preexit_info() {
    ai_output(self, other, "DIA_Orry_PreExit_06_00"); //Ïîñòàðàéñÿ äîáðàòüñÿ äî Ñòàðîãî Ëàãåðÿ öåëûì è íåâðåäèìûì!
    ai_stopprocessinfos(self);
};

instance dia_orry_exit(c_info) {
    npc = grd_254_orry /*7355*/;
    nr = 999;
    condition = dia_orry_exit_condition;
    information = dia_orry_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_orry_exit_condition() {
    if (npc_knowsinfo(hero, dia_orry_preexit /*9275*/)) {
        return 1;
    };
};

func void dia_orry_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_orry_guardgate(c_info) {
    npc = grd_254_orry /*7355*/;
    nr = 2;
    condition = dia_orry_guardgate_condition;
    information = dia_orry_guardgate_info;
    description = "×åì òû çàíèìàåøüñÿ?";
};

func int dia_orry_guardgate_condition() {
    if (kapitel <= 1) {
        return 1;
    };
};

func void dia_orry_guardgate_info() {
    ai_output(other, self, "DIA_Orry_GuardGate_15_00"); //×òî òû çäåñü äåëàåøü?
    ai_output(self, other, "DIA_Orry_GuardGate_06_01"); //Ñëåæó çà òåì, ÷òîáû íèêòî íå ïîäîáðàëñÿ ê ìåñòó îáìåíà - îñîáåííî ýòè ãîëîâîðåçû èç Íîâîãî Ëàãåðÿ.
    ai_output(self, other, "DIA_Orry_GuardGate_06_02"); //Òû íîâåíüêèé, êîòîðîãî çàøâûðíóëè òîëüêî ñåãîäíÿ, âåðíî?
    ai_output(other, self, "DIA_Orry_GuardGate_15_03"); //Äà, ýòî ÿ.
    ai_output(self, other, "DIA_Orry_GuardGate_06_04"); //Îñòåðåãàéñÿ òèïîâ èç Íîâîãî Ëàãåðÿ!
    ai_output(self, other, "DIA_Orry_GuardGate_06_05"); //ß ðàáîòàþ íà Ñòàðûé Ëàãåðü - òàêæå êàê è âñå, êîãî òû âèäåë ó ñêàëû, ãäå ïðîèñõîäèò îáìåí.
    ai_output(self, other, "DIA_Orry_GuardGate_06_06"); //Òû óæå ïîãîâîðèë ñ Äèåãî?
    info_clearchoices(dia_orry_guardgate /*9281*/);
    info_addchoice(dia_orry_guardgate /*9281*/, "Íåò.", dia_orry_guardgate_no);
    info_addchoice(dia_orry_guardgate /*9281*/, "Äà.", dia_orry_guardgate_yes);
};

func void dia_orry_guardgate_no() {
    ai_output(other, self, "DIA_Orry_GuardGate_No_15_00"); //Íåò.
    ai_output(self, other, "DIA_Orry_GuardGate_No_06_01"); //È ÷åãî æå òû æäåøü? Îí ó íàñ çàíèìàåòñÿ íîâè÷êàìè.
    ai_output(self, other, "DIA_Orry_GuardGate_No_06_02"); //Îí ìíîãî çíàåò î êîëîíèè è çíàíèÿ ýòè ïðèãîäÿòñÿ òîìó, êòî çäåñü íåäàâíî.
    info_clearchoices(dia_orry_guardgate /*9281*/);
};

func void dia_orry_guardgate_yes() {
    ai_output(other, self, "DIA_Orry_GuardGate_Yes_15_00"); //Äà, ïîãîâîðèë.
    ai_output(self, other, "DIA_Orry_GuardGate_Yes_06_01"); //Õîðîøî. Çíà÷èò, òû â êóðñå âñåãî ïðîèñõîäÿùåãî.
    info_clearchoices(dia_orry_guardgate /*9281*/);
};

instance dia_orry_newcamp(c_info) {
    npc = grd_254_orry /*7355*/;
    nr = 1;
    condition = dia_orry_newcamp_condition;
    information = dia_orry_newcamp_info;
    description = "Ïî÷åìó ìíå ñëåäóåò îïàñàòüñÿ ëþäåé èç Íîâîãî Ëàãåðÿ?";
};

func int dia_orry_newcamp_condition() {
    if (npc_knowsinfo(hero, dia_orry_guardgate /*9281*/)) {
        return 1;
    };
};

func void dia_orry_newcamp_info() {
    ai_output(other, self, "DIA_Orry_NewCamp_15_00"); //Ïî÷åìó ìíå ñëåäóåò îïàñàòüñÿ ëþäåé èç Íîâîãî Ëàãåðÿ?
    ai_output(self, other, "DIA_Orry_NewCamp_06_01"); //Ïî ñðàâíåíèþ ñ Íîâûì Ëàãåðåì, Ñòàðûé - ýòî òèõîå è áåçîïàñíîå ìåñòî.
    ai_output(self, other, "DIA_Orry_NewCamp_06_02"); //Íîâûé Ëàãåðü íå ïîëó÷àåò òîâàðîâ èç âíåøíåãî ìèðà. Èõ âîðû ïðîñòî êðàäóò âñå, ÷òî èì íóæíî.
};

instance dia_orry_oldcamp(c_info) {
    npc = grd_254_orry /*7355*/;
    nr = 2;
    condition = dia_orry_oldcamp_condition;
    information = dia_orry_oldcamp_info;
    description = "À Ñòàðûé Ëàãåðü?";
};

func int dia_orry_oldcamp_condition() {
    if (npc_knowsinfo(hero, dia_orry_guardgate /*9281*/)) {
        return 1;
    };
};

func void dia_orry_oldcamp_info() {
    ai_output(other, self, "DIA_Orry_OldCamp_15_00"); //À Ñòàðûé Ëàãåðü?
    ai_output(self, other, "DIA_Orry_OldCamp_06_01"); //Âî ãëàâå âñåãî çäåñü ñòîÿò Áàðîíû. Ñëåäîì çà íèìè èäåò Ñòðàæà è Ïðèçðàêè. Íó à â ñàìîì íèçó íàõîäÿòñÿ ðóäîêîïû.
    ai_output(self, other, "DIA_Orry_OldCamp_06_02"); //Êàæäûé, êòî ïðèáûâàåò ñþäà, ñïåðâà ñòàíîâèòñÿ ðóäîêîïîì. Åñëè õî÷åøü äîñòèãíóòü áîëüøåãî, äëÿ íà÷àëà òåáå ïðèäåòñÿ ñòàòü îäíèì èç Ïðèçðàêîâ.
};

instance dia_orry_shore(c_info) {
    npc = grd_254_orry /*7355*/;
    nr = 3;
    condition = dia_orry_shore_condition;
    information = dia_orry_shore_info;
    description = "Êîãäà ÿ âûïëûë íà áåðåã, îäèí èç ýòèõ òèïîâ óäàðèë ìåíÿ...";
};

func int dia_orry_shore_condition() {
    if (npc_knowsinfo(hero, dia_orry_guardgate /*9281*/)) {
        return 1;
    };
};

func void dia_orry_shore_info() {
    ai_output(other, self, "DIA_Orry_Shore_15_00"); //Êîãäà ÿ âûïëûë íà áåðåã, îäèí èç ýòèõ òèïîâ óäàðèë ìåíÿ...
    ai_output(self, other, "DIA_Orry_Shore_06_01"); //Òàê ïîñòóïàþò ñî âñåìè íîâè÷êàìè. Îíè íàçûâàþò ýòî 'áîåâûì êðåùåíèåì'.
    ai_output(other, self, "DIA_Orry_Shore_15_02"); //À-à. È â Ñòàðîì Ëàãåðå âñå òàêèå?
    ai_output(self, other, "DIA_Orry_Shore_06_03"); //Â ëþáîì ìåñòå íàéäåòñÿ ïàðî÷êà íåãîäÿåâ. Íî îíè íå òðîíóò òåáÿ, åñëè òû ïëàòèøü äåíüãè çà ñâîþ çàùèòó.
};

instance dia_orry_woman(c_info) {
    npc = grd_254_orry /*7355*/;
    nr = 3;
    condition = dia_orry_woman_condition;
    information = dia_orry_woman_info;
    description = "ß âèäåë, ÷òî âìåñòå ñ òîâàðàìè ñþäà îòïðàâèëè êàêóþ-òî æåíùèíó.";
};

func int dia_orry_woman_condition() {
    if (npc_knowsinfo(hero, dia_orry_guardgate /*9281*/)) {
        return 1;
    };
};

func void dia_orry_woman_info() {
    ai_output(other, self, "DIA_Orry_Woman_15_00"); //ß âèäåë, ÷òî âìåñòå ñ òîâàðàìè ñþäà îòïðàâèëè êàêóþ-òî æåíùèíó.
    ai_output(self, other, "DIA_Orry_Woman_06_01"); //Äà, Áàðîíû ïîëó÷àþò âñå, ÷òî õîòÿò.
    ai_output(other, self, "DIA_Orry_Woman_15_02"); //Òû õî÷åøü ñêàçàòü, ÷òî êîðîëü âûìåíèâàåò ðóäó íà æåíùèí?!
    ai_output(self, other, "DIA_Orry_Woman_06_03"); //Îíè òàêèå æå ïðåñòóïíèêè, êàê è âñå çäåñü. Åñëè áû Ãîìåçó íå ïîíàäîáèëàñü ýòà æåíùèíà, îíà áû ñèäåëà â òþðüìå èëè åùå ãäå-íèáóäü.
    ai_output(self, other, "DIA_Orry_Woman_06_04"); //Íå çíàþ, ÷òî õóæå...
};

instance dia_orry_waffe(c_info) {
    npc = grd_254_orry /*7355*/;
    nr = 3;
    condition = dia_orry_waffe_condition;
    information = dia_orry_waffe_info;
    description = "Ìíå íóæíî êàêîå-íèáóäü îðóæèå...";
};

func int dia_orry_waffe_condition() {
    if (npc_knowsinfo(hero, dia_orry_guardgate /*9281*/)) {
        return 1;
    };
};

func void dia_orry_waffe_info() {
    ai_output(other, self, "DIA_Orry_Waffe_15_00"); //Ìíå íóæíî êàêîå-íèáóäü îðóæèå...
    ai_output(self, other, "DIA_Orry_Waffe_06_01"); //Âîçëå áðîøåííîé øàõòû, äàëüøå ïî ýòîé òðîïå, íàâåðíÿêà ìîæíî íàéòè ÷òî-íèáóäü.
    ai_output(self, other, "DIA_Orry_Waffe_06_02"); //Íî íå ñòîèò ëåçòü â äðàêó ñ ÷åì-òî âðîäå ðæàâîé êèðêè - ýòè øòóêîâèíû ñëèøêîì òÿæåëû è íåóäîáíû, ÷òîáû áûòü õîðîøèì îðóæèåì.
    ai_output(self, other, "DIA_Orry_Waffe_06_03"); //Íåîïûòíûé áîåö äîëæåí èñïîëüçîâàòü èõ ëèøü â ñëó÷àå êðàéíåé íåîáõîäèìîñòè.
};

instance dia_fletcher_exit(c_info) {
    npc = grd_255_fletcher /*7360*/;
    nr = 999;
    condition = dia_fletcher_exit_condition;
    information = dia_fletcher_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_fletcher_exit_condition() {
    return 1;
};

func void dia_fletcher_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_fletcher_first(c_info) {
    npc = grd_255_fletcher /*7360*/;
    nr = 1;
    condition = dia_fletcher_first_condition;
    information = dia_fletcher_first_info;
    important = true;
};

func int dia_fletcher_first_condition() {
    if (wld_istime(0, 0, 6, 0)) {
        return 1;
    };
};

func void dia_fletcher_first_info() {
    ai_output(self, other, "DIA_Fletcher_First_06_00"); //Ýé, òû!
    ai_output(other, self, "DIA_Fletcher_First_15_01"); //Êòî? ß?
    ai_output(self, other, "DIA_Fletcher_First_06_02"); //Òû ñàì çíàåøü, ê êîìó ÿ îáðàùàþñü!
    ai_output(self, other, "DIA_Fletcher_First_06_03"); //Âîò ÷òî ÿ òåáå ñêàæó, ñûíîê - ýòî ÌÎÉ ðàéîí. È ìíå íå íóæíû íåïðèÿòíîñòè!
    ai_output(self, other, "DIA_Fletcher_First_06_04"); //Íî íîâè÷êè, âðîäå òåáÿ, âñåãäà ñòàíîâÿòñÿ èõ ïðè÷èíîé - îñîáåííî êîãäà øëÿþòñÿ áåç äåëà ïî íî÷àì.
    ai_output(self, other, "DIA_Fletcher_First_06_05"); //Òàê ïî÷åìó áû òåáå íå îòïðàâèòüñÿ äîìîé è íå ïîçàáîòèòüñÿ î òîì ÷òîáû ÿ áîëüøå òåáÿ çäåñü íå âèäåë? Êàê ðàç íàïðîòèâ àðåíû åñòü ïóñòîé äîì - òû óçíàåøü åãî ïî íàâåñó. Îòïðàâëÿéñÿ ñïàòü.
    ai_output(self, other, "DIA_Fletcher_First_06_06"); //È åñëè ÿ ïîéìàþ òåáÿ â êàêîé-íèáóäü äðóãîé õèæèíå, ÿ ëè÷íî ïðîñëåæó çà òåì, ÷òîáû òû î÷åíü ïîæàëåë îá ýòîì.
    ai_stopprocessinfos(self);
};

var int fletcher_whytalk;

instance dia_fletcher_hello(c_info) {
    npc = grd_255_fletcher /*7360*/;
    nr = 2;
    condition = dia_fletcher_hello_condition;
    information = dia_fletcher_hello_info;
    important = true;
};

func int dia_fletcher_hello_condition() {
    if (npc_isinstate(self, zs_talk)) {
        return 1;
    };
};

func void dia_fletcher_hello_info() {
    ai_output(other, self, "DIA_Fletcher_Hello_15_00"); //Ýé, òû!
    ai_output(self, other, "DIA_Fletcher_Hello_06_01"); //Åñëè ñîáèðàåøüñÿ çàïëàòèòü çà çàùèòó, òû âûáðàë äëÿ ýòîãî íåïðàâèëüíûé äåíü.
    ai_output(other, self, "DIA_Fletcher_Hello_15_02"); //Äà? È ïî÷åìó?
    ai_output(self, other, "DIA_Fletcher_Hello_06_03"); //Ïîòîìó ÷òî ìåíÿ çäåñü íåò.
    info_clearchoices(dia_fletcher_hello /*9308*/);
    info_addchoice(dia_fletcher_hello /*9308*/, "Ïîíÿòíî.", dia_fletcher_hello_isee);
    info_addchoice(dia_fletcher_hello /*9308*/, "Òîãäà ïî÷åìó æå ÿ ñ òîáîé ðàçãîâàðèâàþ?", dia_fletcher_hello_whytalk);
    info_addchoice(dia_fletcher_hello /*9308*/, "À-à. È ãäå æå òû â òàêîì ñëó÷àå?", dia_fletcher_hello_whereelse);
};

func void dia_fletcher_hello_whereelse() {
    ai_output(other, self, "DIA_Fletcher_Hello_WhereElse_15_00"); //À-à. È ãäå æå òû â òàêîì ñëó÷àå?
    ai_output(self, other, "DIA_Fletcher_Hello_WhereElse_06_01"); //ß â çàìêå, ñèæó âîçëå áîëüøîãî êîñòðà, â ðóêàõ êóáîê ñ ïèâîì.
};

func void dia_fletcher_hello_whytalk() {
    ai_output(other, self, "DIA_Fletcher_Hello_WhyTalk_15_00"); //Òîãäà ïî÷åìó æå ÿ ñ òîáîé ðàçãîâàðèâàþ?
    ai_output(self, other, "DIA_Fletcher_Hello_WhyTalk_06_01"); //Äà ïîòîìó ÷òî Íåê ïðîïàë, à ýòî åãî ðàéîí.
    ai_output(self, other, "DIA_Fletcher_Hello_WhyTalk_06_02"); //È äî òåõ ïîð, ïîêà îí íå ïîÿâèòñÿ, Òîðóñ ïðèêàçàë ÌÍÅ ñòîÿòü íà ñòðàæå.
    fletcher_whytalk = true;
    info_clearchoices(dia_fletcher_hello /*9308*/);
};

func void dia_fletcher_hello_isee() {
    ai_output(other, self, "DIA_Fletcher_Hello_ISee_15_00"); //Ïîíÿòíî.
    info_clearchoices(dia_fletcher_hello /*9308*/);
};

instance dia_fletcher_wonek(c_info) {
    npc = grd_255_fletcher /*7360*/;
    nr = 1;
    condition = dia_fletcher_wonek_condition;
    information = dia_fletcher_wonek_info;
    description = "Íå çíàåøü, ãäå ñåé÷àñ ìîæåò áûòü Íåê?";
};

func int dia_fletcher_wonek_condition() {
    if (npc_knowsinfo(hero, dia_stt_315_lostnek /*12359*/) || (fletcher_whytalk == true)) {
        return 1;
    };
};

func void dia_fletcher_wonek_info() {
    ai_output(other, self, "DIA_Fletcher_WoNek_15_00"); //Íå çíàåøü, ãäå ñåé÷àñ ìîæåò áûòü Íåê?
    ai_output(self, other, "DIA_Fletcher_WoNek_06_01"); //Íå çíàþ, äà è óçíàòü íåîòêóäà.
    ai_output(self, other, "DIA_Fletcher_WoNek_06_02"); //Ïî-ëþáîìó, ìåñòíûå ðóäîêîïû äîëæíû ÷òî-òî çíàòü, âîò òîëüêî íå áóäóò îíè ãîâîðèòü ñî ñòðàæíèêîì.
    ai_output(self, other, "DIA_Fletcher_WoNek_06_03"); //Îñîáåííî ñåé÷àñ - âåäü îíè çíàþò, êàê ÿ íåíàâèæó ýòó ÷åðòîâó ðàáîòó. Óâåðåí, îíè ñìåþòñÿ ó ìåíÿ çà ñïèíîé!
    if ((sly_lostnek != log_success) && (npc_gettrueguild(hero) == gil_none)) {
        log_createtopic(ch1_lostnek, log_mission);
        log_settopicstatus(ch1_lostnek, log_running);
    };
    b_logentry(ch1_lostnek, ch1_lostnek_1);
};

instance dia_fletcher_troschu(c_info) {
    npc = grd_255_fletcher /*7360*/;
    nr = 1;
    condition = dia_fletcher_troschu_condition;
    information = dia_fletcher_troschu_info;
    description = "Ïî÷åìó áû òåáå â îòìåñòêó íå ñîáðàòü ñ íèõ åùå äåíåã çà çàùèòó?";
};

func int dia_fletcher_troschu_condition() {
    if (npc_knowsinfo(hero, dia_fletcher_hello /*9308*/)) {
        return 1;
    };
};

func void dia_fletcher_troschu_info() {
    ai_output(other, self, "DIA_Fletcher_TroSchu_15_00"); //Ïî÷åìó áû òåáå â îòìåñòêó íå ñîáðàòü ñ íèõ åùå äåíåã çà çàùèòó?
    ai_output(self, other, "DIA_Fletcher_TroSchu_06_01"); //Íåê óæå ñäåëàë îáõîä, ïðåæäå ÷åì èñ÷åçíóòü. Òåïåðü ó íèõ â êàðìàíàõ ïóñòî.
};

var int fletcher_foundnek;

instance dia_fletcher_wegennek(c_info) {
    npc = grd_255_fletcher /*7360*/;
    nr = 1;
    condition = dia_fletcher_wegennek_condition;
    information = dia_fletcher_wegennek_info;
    permanent = true;
    description = "ß ïî ïîâîäó Íåêà...";
};

func int dia_fletcher_wegennek_condition() {
    if (npc_knowsinfo(hero, dia_fletcher_wonek /*9314*/) && (fletcher_foundnek == false)) {
        return 1;
    };
};

func void dia_fletcher_wegennek_info() {
    var c_npc nek;

    ai_output(other, self, "DIA_Fletcher_WegenNek_15_00"); //ß ïî ïîâîäó Íåêà...
    ai_output(self, other, "DIA_Fletcher_WegenNek_06_01"); //Äà?
    nek = hlp_getnpc(grd_282_nek);
    if ((sly_lostnek == log_success) || (!hlp_isvalidnpc(nek))) {
        ai_output(other, self, "DIA_Fletcher_WegenNek_15_02"); //Äóìàþ, ÿ íàøåë åãî.
        ai_output(self, other, "DIA_Fletcher_WegenNek_06_03"); //×òî? Ãäå îí?
        ai_output(other, self, "DIA_Fletcher_WegenNek_15_04"); //Êîðìèò êðûñ...
        ai_output(self, other, "DIA_Fletcher_WegenNek_06_05"); //Î, íåò! Ïðîêëÿòüå! Çíà÷èò, òåïåðü ÿ îñòàíóñü çäåñü íàñîâñåì. ß òàê íàäåÿëñÿ, ÷òî îí âåðíåòñÿ!
        ai_output(self, other, "DIA_Fletcher_WegenNek_06_06"); //Òåïåðü ó ìåíÿ ïîÿâèëàñü ïðîáëåìà.
        fletcher_foundnek = true;
    }
    else {
        ai_output(other, self, "DIA_Fletcher_WegenNek_15_07"); //Íèêàêèõ íîâîñòåé.
        ai_output(self, other, "DIA_Fletcher_WegenNek_06_08"); //Äåðæè ìåíÿ â êóðñå.
    };
};

instance dia_fletcher_problem(c_info) {
    npc = grd_255_fletcher /*7360*/;
    nr = 1;
    condition = dia_fletcher_problem_condition;
    information = dia_fletcher_problem_info;
    description = "Ýé, â ÷åì ïðîáëåìà?";
};

func int dia_fletcher_problem_condition() {
    if (fletcher_foundnek == true) {
        return 1;
    };
};

func void dia_fletcher_problem_info() {
    ai_output(other, self, "DIA_Fletcher_Problem_15_00"); //Êàêàÿ ïðîáëåìà?
    ai_output(self, other, "DIA_Fletcher_Problem_06_01"); //ß ïî óøè â äîëãàõ ïåðåä Ñêàòòè. Òåïåðü îí óçíàåò, ÷òî ÿ çàíÿë ìåñòî Íåêà, è áóäåò ïðèõîäèòü ñþäà êàæäûé äåíü...
};

instance grd_255_fletcher_welcome(c_info) {
    npc = grd_255_fletcher /*7360*/;
    condition = grd_255_fletcher_welcome_condition;
    information = grd_255_fletcher_welcome_info;
    important = true;
};

func int grd_255_fletcher_welcome_condition() {
    if (npc_gettrueguild(hero) == gil_grd) {
        return true;
    };
};

func void grd_255_fletcher_welcome_info() {
    ai_output(self, other, "Grd_255_Fletcher_WELCOME_Info_06_01"); //Òû áûñòðî íàøåë çäåñü ñâîå ìåñòî. Äîáðî ïîæàëîâàòü â Ñòðàæó!
};

instance info_fletcher_die(c_info) {
    npc = grd_255_fletcher /*7360*/;
    condition = info_fletcher_die_condition;
    information = info_fletcher_die_info;
    important = true;
};

func int info_fletcher_die_condition() {
    if (kapitel >= 4) {
        return true;
    };
};

func void info_fletcher_die_info() {
    ai_gotonpc(self, hero);
    if (((oldheroguild == gil_stt) || (oldheroguild == gil_grd)) || (oldheroguild == gil_kdf)) {
        if (oldheroguild == gil_grd) {
            ai_output(self, hero, "Info_Fletcher_DIE_06_01"); //Ïðåäàòåëü! Ïîäóìàòü òîëüêî - ìû ïîçâîëèëè òåáå ñòàòü îäíèì èç ñòðàæíèêîâ!
        }
        else if (oldheroguild == gil_kdf) {
            ai_output(self, hero, "Info_Fletcher_DIE_06_02"); //Ýòî îäèí èç ïðåäàòåëåé-ìàãîâ!
        }
        else {
            ai_output(self, hero, "Info_Fletcher_DIE_06_03"); //Ïðèâåò, ïðåäàòåëü! Ïóñòü òû è îäèí èç Ïðèçðàêîâ Ãîìåçà - òåáå ýòî íå ïîìîæåò!
        };
        ai_output(hero, self, "Info_Fletcher_DIE_15_04"); //Ýé, Ôëåò÷åð, î ÷åì òû ãîâîðèøü?
        ai_output(self, hero, "Info_Fletcher_DIE_06_05"); //Òû â ñãîâîðå ñ ýòèì îòðåáüåì èç Íîâîãî Ëàãåðÿ, âåäü òàê?
        ai_output(hero, self, "Info_Fletcher_DIE_15_06"); //Ïîñòîé...
        ai_output(self, hero, "Info_Fletcher_DIE_06_07"); //Ïîëàãàþ, òû äóìàë, ÷òî íèêòî è íå äîãàäàåòñÿ, à?
        ai_output(hero, self, "Info_Fletcher_DIE_15_08"); //Óõ òû... Ïîïðèäåðæè-êà êîíåé!
        ai_output(self, hero, "Info_Fletcher_DIE_06_09"); //Íåò, ëó÷øå óæ òû ïîïðèäåðæè ñâîþ ãîëîâó - ïîòîìó ÷òî ñêîðî òû åå ëèøèøüñÿ!
        ai_output(self, hero, "Info_Fletcher_DIE_06_10"); //ÓÌÐÈ, ÏÐÅÄÀÒÅËÜ!!!
        if (npc_knowsinfo(hero, info_bloodwyn_die /*9234*/)) {
            b_logentry(ch4_bannedfromoc, ch4_bannedfromoc_1);
        }
        else {
            if (npc_gettrueguild(hero) == gil_none) {
                log_createtopic(ch4_bannedfromoc, log_mission);
                log_settopicstatus(ch4_bannedfromoc, log_running);
                b_logentry(ch4_bannedfromoc, ch4_bannedfromoc_2);
                b_logentry(ch4_bannedfromoc, ch4_bannedfromoc_3);
            };
        };
    }
    else {
        if (c_npcbelongstonewcamp(hero)) {
            ai_output(self, hero, "Info_Fletcher_DIE_06_11"); //Òû òîëüêî ïîñìîòðè - ïàðåíü èç Íîâîãî Ëàãåðÿ!
        }
        else {
            ai_output(self, hero, "Info_Fletcher_DIE_06_12"); //Òû òîëüêî ïîñìîòðè - ïàðåíü èç Áîëîòíîãî Ëàãåðÿ!
        };
        ai_output(hero, self, "Info_Fletcher_DIE_15_13"); //È ÷òî? Êàêîå òåáå äî ýòîãî äåëî?
        ai_output(self, hero, "Info_Fletcher_DIE_06_14"); //Ñêîðî íàì áóäåò ïðèíàäëåæàòü âàøà øàõòà.
        ai_output(hero, self, "Info_Fletcher_DIE_15_15"); //Äà? Ìå÷òàé äàëüøå!
        ai_output(self, hero, "Info_Fletcher_DIE_06_16"); //Íî ñàì ïîíèìàåøü - òåïåðü ÿ íå ìîãó ïîçâîëèòü òåáå áîëòàòü îá ýòîì íà êàæäîì óãëó!
        ai_output(hero, self, "Info_Fletcher_DIE_15_17"); //Ïîñòîé, ìíå íå íóæíû íåïðèÿòíîñòè.
        ai_output(self, hero, "Info_Fletcher_DIE_06_18"); //Òåáå ñòîèëî ïîäóìàòü îá ýòîì, ïðåæäå ÷åì ïðèõîäèòü ñþäà!
        ai_output(hero, self, "Info_Fletcher_DIE_15_19"); //Ýé, êàêîãî...
        ai_output(self, hero, "Info_Fletcher_DIE_06_20"); //Âïåðåä, ïàðíè, âçÿòü åãî!
    };
    npc_exchangeroutine(self, "FMTaken2");
    b_exchangeroutine(grd_252_gardist /*7347*/, "FMTaken2");
    b_exchangeroutine(grd_253_gardist /*7351*/, "FMTaken2");
    b_exchangeroutine(grd_244_gardist /*7332*/, "FMTaken2");
    b_exchangeroutine(grd_214_torwache /*7232*/, "FMTaken2");
    b_exchangeroutine(grd_215_torwache /*7236*/, "FMTaken2");
    b_setpermattitude(grd_255_fletcher /*7360*/, att_hostile);
    b_setpermattitude(grd_252_gardist /*7347*/, att_hostile);
    b_setpermattitude(grd_253_gardist /*7351*/, att_hostile);
    b_setpermattitude(grd_244_gardist /*7332*/, att_hostile);
    b_setpermattitude(grd_214_torwache /*7232*/, att_hostile);
    b_setpermattitude(grd_215_torwache /*7236*/, att_hostile);
    if (!npc_knowsinfo(hero, info_bloodwyn_die /*9234*/)) {
        b_logentry(ch4_firemages, ch4_firemages_6);
    };
    ai_stopprocessinfos(self);
};

instance grd_260_drake_exit(c_info) {
    npc = grd_260_drake /*7364*/;
    nr = 999;
    condition = grd_260_drake_exit_condition;
    information = grd_260_drake_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int grd_260_drake_exit_condition() {
    return 1;
};

func void grd_260_drake_exit_info() {
    ai_output(other, self, "Info_Exit_Info_15_01"); //Óâèäèìñÿ.
    ai_stopprocessinfos(self);
};

instance grd_260_drake_gefahr(c_info) {
    npc = grd_260_drake /*7364*/;
    nr = 0;
    condition = grd_260_drake_gefahr_condition;
    information = grd_260_drake_gefahr_info;
    description = "×åãî ñëåäóåò îñòåðåãàòüñÿ â øàõòàõ?";
};

func int grd_260_drake_gefahr_condition() {
    return npc_knowsinfo(hero, grd_260_drake_mine /*9344*/);
};

func void grd_260_drake_gefahr_info() {
    ai_output(other, self, "Grd_260_Drake_Gefahr_Info_15_01"); //×åãî ñëåäóåò îñòåðåãàòüñÿ â øàõòàõ?
    ai_output(self, other, "Grd_260_Drake_Gefahr_Info_11_02"); //Â îñíîâíîì, ïîëçóíîâ - ýòî îïàñíûå òâàðè.
    ai_output(self, other, "Grd_260_Drake_Gefahr_Info_11_03"); //Èç-çà íèõ íàì äàæå ïðèøëîñü îñòàâèòü íåñêîëüêî ïåùåð. Ê òîìó æå, îíè ñîæðàëè íåñêîëüêèõ ðóäîêîïîâ.
    ai_output(other, self, "Grd_260_Drake_Gefahr_Info_15_04"); //Ðàññêàæè ìíå î ïîëçóíàõ.
    ai_output(self, other, "Grd_260_Drake_Gefahr_Info_11_05"); //Îõ, ó ìåíÿ òàê ïåðåñîõëî âî ðòó...
    ai_output(self, other, "Grd_260_Drake_Gefahr_Info_11_06"); //Íåñè ïèâî, è ÿ ðàññêàæó òåáå î ïîëçóíàõ.
};

var int drake_gotdrink;

instance grd_260_drake_crawler_okay(c_info) {
    npc = grd_260_drake /*7364*/;
    nr = 0;
    condition = grd_260_drake_crawler_okay_condition;
    information = grd_260_drake_crawler_okay_info;
    permanent = true;
    description = "(îòäàòü ïèâî)";
};

func int grd_260_drake_crawler_okay_condition() {
    if (npc_knowsinfo(hero, grd_260_drake_gefahr /*9337*/) && (drake_gotdrink == false)) {
        return 1;
    };
};

func void grd_260_drake_crawler_okay_info() {
    ai_output(hero, self, "Grd_260_Drake_Crawler_Okay_15_01"); //Âîò, âûïåé çà ìîå çäîðîâüå!
    if (npc_hasitems(hero, itfobeer)) {
        b_giveinvitems(hero, self, itfobeer /*4326*/, 1);
        if (c_bodystatecontains(self, bs_sit)) {
            ai_standup(self);
            ai_turntonpc(self, hero);
        };
        ai_useitem(self, itfobeer /*4326*/);
        ai_output(self, hero, "Grd_260_Drake_Crawler_Okay_11_02"); //Ñïàñèáî. Íó, ïîëçóíû æèâóò áîëüøèìè ñòàÿìè, â îñíîâíîì, â áîêîâûõ ïåùåðàõ.
        ai_output(self, hero, "Grd_260_Drake_Crawler_Okay_11_03"); //Îíè åùå íè ðàçó íå íàïàäàëè íà íàñ çäåñü, â ãëàâíîé øàõòå. Åñëè óâèäèøü îäíîãî èç íèõ, áåãè!
        ai_output(self, hero, "Grd_260_Drake_Crawler_Okay_11_04"); //Èëè ïðèæìèñü ê ñòåíå - òàê ó òåáÿ áóäåò øàíñ ñïàñòèñü!
        drake_gotdrink = true;
    }
    else {
        ai_output(self, other, "Grd_260_Drake_Crawler_Okay_11_06"); //Òû ÷òî, øóòèøü? ß æå ñêàçàë: íåñè ïèâî, ïîòîì ïîãîâîðèì!
    };
};

instance grd_260_drake_mine(c_info) {
    npc = grd_260_drake /*7364*/;
    nr = 0;
    condition = grd_260_drake_mine_condition;
    information = grd_260_drake_mine_info;
    description = "×òî òû ìîæåøü ñêàçàòü î øàõòå?";
};

func int grd_260_drake_mine_condition() {
    return 1;
};

func void grd_260_drake_mine_info() {
    ai_output(other, self, "Grd_260_Drake_Mine_Info_15_01"); //×òî òû ìîæåøü ñêàçàòü î øàõòå?
    ai_output(self, other, "Grd_260_Drake_Mine_Info_11_02"); //Íó, ñåé÷àñ ìû ñ òîáîé íàõîäèìñÿ â ãëàâíîé øàõòå. Âíèç óõîäèò öåëàÿ ñèñòåìà ïëàòôîðì.
    ai_output(self, other, "Grd_260_Drake_Mine_Info_11_03"); //Ðóäó äîáûâàþò ïîâñþäó, íî ñëåäóåò îñòåðåãàòüñÿ ïîëçóíîâ - èõ çäåñü òîæå õâàòàåò.
    ai_output(self, other, "Grd_260_Drake_Mine_Info_11_04"); //Âíèçó ó íàñ íàõîäèòñÿ ïëàâèëüíÿ. ×àñòü ðóäû ìû ïåðåïëàâëÿåì çäåñü æå äëÿ ñîáñòâåííûõ íóæä.
};

instance grd_260_drake_mine_mehr(c_info) {
    npc = grd_260_drake /*7364*/;
    nr = 0;
    condition = grd_260_drake_mine_mehr_condition;
    information = grd_260_drake_mine_mehr_info;
    description = "Ðàññêàæè ìíå åùå ÷òî-íèáóäü î øàõòå.";
};

func int grd_260_drake_mine_mehr_condition() {
    if (npc_knowsinfo(hero, grd_260_drake_mine /*9344*/)) {
        return 1;
    };
};

func void grd_260_drake_mine_mehr_info() {
    ai_output(other, self, "Grd_260_Drake_Mine_Mehr_Info_15_01"); //Ðàññêàæè ìíå îá ýòîì ïîïîäðîáíåå!
    ai_output(self, other, "Grd_260_Drake_Mine_Mehr_Info_11_02"); //Åñëè õî÷åøü óçíàòü áîëüøå, îòïðàâëÿéñÿ ê Âàéïåðó. Îí ïëàâèëüùèê.
    ai_output(self, other, "Grd_260_Drake_Mine_Mehr_Info_11_03"); //Èëè ïîãîâîðè ñ ßíîì. Îí çäåñü ãëàâíûé. Îí çàïðàâëÿåò âñåì â øàõòå.
};

instance grd_260_drake_ian(c_info) {
    npc = grd_260_drake /*7364*/;
    nr = 0;
    condition = grd_260_drake_ian_condition;
    information = grd_260_drake_ian_info;
    description = "Ãäå ÿ ìîãó íàéòè ßíà?";
};

func int grd_260_drake_ian_condition() {
    if ((!npc_knowsinfo(hero, stt_301_ian_hi /*12232*/)) && npc_knowsinfo(hero, grd_260_drake_mine_mehr /*9347*/)) {
        return true;
    };
};

func void grd_260_drake_ian_info() {
    ai_output(other, self, "Grd_260_Drake_Ian_Info_15_01"); //Ãäå ÿ ìîãó íàéòè ßíà?
    ai_output(self, other, "Grd_260_Drake_Ian_Info_11_02"); //Òû íàéäåøü åãî â öåíòðå ãëàâíîé øàõòû, ðÿäîì ñî ñêëàäîì.
    ai_output(self, other, "Grd_260_Drake_Ian_Info_11_03"); //Äà, è âîò åùå ÷òî. Òû âåäü çíàêîì ñ Òîðóñîì, òàê? Çàáóäü î íåì!
    ai_output(self, other, "Grd_260_Drake_Ian_Info_11_04"); //Çäåñü êîìàíäóåò òîëüêî îäèí ÷åëîâåê, è ýòî - ßí. Îí ó íàñ ãëàâíûé.
    ai_output(self, other, "Grd_260_Drake_Ian_Info_11_05"); //Åñëè ïîññîðèøüñÿ ñ íèì, ïîññîðèøüñÿ ñî âñåìè íàìè, óñåê?
};

instance grd_260_drake_gardeaufnahme(c_info) {
    npc = grd_260_drake /*7364*/;
    condition = grd_260_drake_gardeaufnahme_condition;
    information = grd_260_drake_gardeaufnahme_info;
    important = true;
};

func int grd_260_drake_gardeaufnahme_condition() {
    if (((npc_hasitems(hero, itat_crawlerqueen) >= 1) && (npc_gettrueguild(hero) == gil_stt)) && (!npc_knowsinfo(hero, grd_264_gardist_gardeaufnahme /*9405*/))) {
        return true;
    };
};

func void grd_260_drake_gardeaufnahme_info() {
    ai_output(self, other, "Grd_260_Drake_GARDEAUFNAHME_Info_11_01"); //Ýé, ëîâêî æå òû ðàñïðàâèëñÿ ñ ïîëçóíàìè! Òû çàñëóæèâàåøü òîãî, ÷òîáû ñòàòü ñòðàæíèêîì!
    ai_output(self, other, "Grd_260_Drake_GARDEAUFNAHME_Info_11_02"); //Îòïðàâëÿéñÿ â Ñòàðûé Ëàãåðü è ïîãîâîðè îá ýòîì ñ Òîðóñîì!
    log_createtopic(ge_becomeguard, log_note);
    b_logentry(ge_becomeguard, ge_becomeguard_1);
};

instance grd_261_brandick_exit(c_info) {
    npc = grd_261_brandick /*7366*/;
    nr = 999;
    condition = grd_261_brandick_exit_condition;
    information = grd_261_brandick_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int grd_261_brandick_exit_condition() {
    return 1;
};

func void grd_261_brandick_exit_info() {
    ai_stopprocessinfos(self);
};

instance grd_261_brandick_aleph(c_info) {
    npc = grd_261_brandick /*7366*/;
    nr = 0;
    condition = grd_261_brandick_aleph_condition;
    information = grd_261_brandick_aleph_info;
    description = "(ïîæàëîâàòüñÿ íà Àëåôà)";
};

func int grd_261_brandick_aleph_condition() {
    if (npc_knowsinfo(hero, vlk_585_aleph_guards /*13062*/)) {
        return 1;
    };
};

func void grd_261_brandick_aleph_info() {
    ai_output(other, self, "GRD_261_Brandick_ALEPH_Info_15_01"); //Ñëóøàé, êîãäà òû óõîäèøü, Àëåô âåñü äåíü ïðîñòî ñèäèò è íè÷åãî íå äåëàåò.
    ai_output(self, other, "GRD_261_Brandick_ALEPH_Info_06_02"); //Ýòî ïðàâäà?
    ai_output(self, other, "GRD_261_Brandick_ALEPH_Info_06_03"); //Çíàåøü, êîãî ÿ ïðåçèðàþ äàæå áîëüøå, ÷åì ëåíòÿåâ? Ïðåäàòåëåé. Òàê ÷òî ïðîâàëèâàé!
    ai_stopprocessinfos(self);
};

instance grd_262_aaron_exit(c_info) {
    npc = grd_262_aaron /*7369*/;
    nr = 999;
    condition = grd_262_aaron_exit_condition;
    information = grd_262_aaron_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int grd_262_aaron_exit_condition() {
    return 1;
};

func void grd_262_aaron_exit_info() {
    ai_stopprocessinfos(self);
};

instance grd_262_aaron_chest(c_info) {
    npc = grd_262_aaron /*7369*/;
    nr = 0;
    condition = grd_262_aaron_chest_condition;
    information = grd_262_aaron_chest_info;
    permanent = true;
    description = "×åì òû çàíèìàåøüñÿ?";
};

func int grd_262_aaron_chest_condition() {
    if ((npc_getdisttowp(self, "OM_CAVE1_34") < 400) && (!npc_knowsinfo(hero, grd_262_aaron_bluff /*9368*/))) {
        return 1;
    };
};

func void grd_262_aaron_chest_info() {
    ai_output(other, self, "GRD_262_Aaron_CHEST_Info_15_01"); //×åì òû çàíèìàåøüñÿ?
    ai_output(self, other, "GRD_262_Aaron_CHEST_Info_09_02"); //Ñëåæó çà òåì, ÷òîáû ðóäîêîïû âðîäå Ñíàéïñà äåðæàëèñü ïîäàëüøå îò ìîåãî ñóíäóêà.
};

instance grd_262_aaron_bluff(c_info) {
    npc = grd_262_aaron /*7369*/;
    nr = 0;
    condition = grd_262_aaron_bluff_condition;
    information = grd_262_aaron_bluff_info;
    permanent = true;
    description = "(âûìàíèòü Àðîíà)";
};

func int grd_262_aaron_bluff_condition() {
    if ((npc_knowsinfo(hero, vlk_584_snipes_deal /*13047*/) && (aaron_lock != log_running)) && (aaron_lock != log_success)) {
        return 1;
    };
};

func void grd_262_aaron_bluff_info() {
    info_clearchoices(grd_262_aaron_bluff /*9368*/);
    info_addchoice(grd_262_aaron_bluff /*9368*/, dialog_back, grd_262_aaron_bluff_back);
    info_addchoice(grd_262_aaron_bluff /*9368*/, "Ìåíÿ ïðèñëàë ßí. Òû äîëæåí îòïðàâèòüñÿ ê íåìó íåìåäëåííî!", grd_262_aaron_bluff_ian);
    info_addchoice(grd_262_aaron_bluff /*9368*/, "ß ñëûøàë, çäåñü â øàõòå ïîÿâèëèñü áàíäèòû. Èì íóæíà ðóäà.", grd_262_aaron_bluff_bandit);
    info_addchoice(grd_262_aaron_bluff /*9368*/, "Ðóäîêîïû íàøëè çäîðîâåííûé ñàìîðîäîê!", grd_262_aaron_bluff_ore);
};

func void grd_262_aaron_bluff_ore() {
    ai_output(other, self, "GRD_262_Aaron_BLUFF_ORE_15_01"); //Ðóäîêîïû íàøëè çäîðîâåííûé ñàìîðîäîê!
    ai_output(self, other, "GRD_262_Aaron_BLUFF_ORE_09_02"); //È ÷òî ñ òîãî?
    ai_output(other, self, "GRD_262_Aaron_BLUFF_ORE_15_03"); //Äóìàþ, òåáå ñòîèò íà íåãî ïîñìîòðåòü!
    ai_output(self, other, "GRD_262_Aaron_BLUFF_ORE_09_04"); //Çàáóäü îá ýòîì.
};

func void grd_262_aaron_bluff_bandit() {
    ai_output(other, self, "GRD_262_Aaron_BLUFF_BANDIT_15_01"); //ß ñëûøàë, çäåñü â øàõòå ïîÿâèëèñü áàíäèòû. Èì íóæíà ðóäà.
    ai_output(self, other, "GRD_262_Aaron_BLUFF_BANDIT_09_02"); //Òû ïðèíèìàåøü ìåíÿ çà èäèîòà? Îíè áû íèêîãäà íå îñìåëèëèñü!
};

func void grd_262_aaron_bluff_ian() {
    ai_output(other, self, "GRD_262_Aaron_BLUFF_IAN_15_01"); //Ìåíÿ ïðèñëàë ßí. Òû äîëæåí îòïðàâèòüñÿ ê íåìó íåìåäëåííî!
    ai_output(self, other, "GRD_262_Aaron_BLUFF_IAN_09_02"); //×òî åìó íóæíî?
    info_clearchoices(grd_262_aaron_bluff /*9368*/);
    info_addchoice(grd_262_aaron_bluff /*9368*/, "Ïîíÿòèÿ íå èìåþ.", grd_262_aaron_bluff_ugly);
    info_addchoice(grd_262_aaron_bluff /*9368*/, "Îí óáüåò òåáÿ.", grd_262_aaron_bluff_bad);
    info_addchoice(grd_262_aaron_bluff /*9368*/, "Îí õî÷åò íàãðàäèòü òåáÿ.", grd_262_aaron_bluff_good);
};

func void grd_262_aaron_bluff_good() {
    ai_output(other, self, "GRD_262_Aaron_BLUFF_GOOD_15_01"); //Îí õî÷åò íàãðàäèòü òåáÿ çà õîðîøóþ ðàáîòó.
    ai_output(self, other, "GRD_262_Aaron_BLUFF_GOOD_09_02"); //Äà íó, ïðàâäà? Øåë áû òû îò ãðåõà ïîäàëüøå.
    npc_settempattitude(self, att_angry);
    ai_stopprocessinfos(self);
};

func void grd_262_aaron_bluff_bad() {
    ai_output(other, self, "GRD_262_Aaron_BLUFF_BAD_15_01"); //Îí íàêàæåò òåáÿ çà òâîþ ëåíü.
    ai_output(self, other, "GRD_262_Aaron_BLUFF_BAD_09_02"); //Íó, íå âïåðâîé. Ïðîâàëèâàé!
    ai_stopprocessinfos(self);
};

func void grd_262_aaron_bluff_ugly() {
    ai_output(other, self, "GRD_262_Aaron_BLUFF_UGLY_15_01"); //Ïîíÿòèÿ íå èìåþ. Íàâåðíîå îí ñàì òåáå ñêàæåò. Íå äóìàåøü æå òû, ÷òî ßí áóäåò äåëèòüñÿ ñî ìíîé ñâîèìè ïëàíàìè?
    ai_output(self, other, "GRD_262_Aaron_BLUFF_UGLY_09_02"); //Ëàäíî, òîãäà ÿ ïîéäó ê íåìó!
    ai_stopprocessinfos(self);
    npc_exchangeroutine(self, "trick");
    aaron_lock = log_running;
    snipes_deal = log_success;
    b_logentry(ch2_snipesdeal, ch2_snipesdeal_1);
};

func void grd_262_aaron_bluff_back() {
    info_clearchoices(grd_262_aaron_bluff /*9368*/);
};

instance grd_262_aaron_pissed(c_info) {
    npc = grd_262_aaron /*7369*/;
    condition = grd_262_aaron_pissed_condition;
    information = grd_262_aaron_pissed_info;
    important = true;
};

func int grd_262_aaron_pissed_condition() {
    if ((aaron_lock == log_running) && (npc_getdisttowp(hero, "OM_CAVE1_47") < 1000)) {
        return true;
    };
};

func void grd_262_aaron_pissed_info() {
    ai_drawweapon(self);
    ai_output(self, other, "Info_Aaron_PISSED_09_01"); //ÝÉ, ÒÛ!!! Åùå ðàç ïîïûòàåøüñÿ âûñòàâèòü ìåíÿ äóðàêîì, è òû ïîêîéíèê, ïîíÿë?!
    ai_removeweapon(self);
    npc_exchangeroutine(self, "start");
    aaron_lock = log_success;
    b_logentry(ch2_snipesdeal, ch2_snipesdeal_2);
};

instance grd_262_aaron_sell(c_info) {
    npc = grd_262_aaron /*7369*/;
    nr = 0;
    condition = grd_262_aaron_sell_condition;
    information = grd_262_aaron_sell_info;
    description = "Ýé, òû íè÷åãî íå ïîòåðÿë? Ê ïðèìåðó, êëþ÷ îò ñóíäóêà? ";
};

func int grd_262_aaron_sell_condition() {
    if (npc_knowsinfo(hero, vlk_584_snipes_deal_run /*13050*/)) {
        return 1;
    };
};

func void grd_262_aaron_sell_info() {
    ai_output(other, self, "Info_Aaron_SELL_15_01"); //Ýé, òû íè÷åãî íå ïîòåðÿë? Ê ïðèìåðó, êëþ÷ îò ñóíäóêà?
    ai_output(self, other, "Info_Aaron_SELL_09_02"); //Òî÷íî. ß äàæå íå õî÷ó çíàòü, êàê è ïî÷åìó òû óçíàë ïðî êëþ÷.
    ai_output(self, other, "Info_Aaron_SELL_09_03"); //Íî ÿ äàì òåáå äâàäöàòü êóñêîâ ðóäû, åñëè òû âåðíåøü åãî ìíå.
    b_logentry(ch2_snipesdeal, ch2_snipesdeal_3);
};

instance grd_262_aaron_sellnow(c_info) {
    npc = grd_262_aaron /*7369*/;
    nr = 0;
    condition = grd_262_aaron_sellnow_condition;
    information = grd_262_aaron_sellnow_info;
    description = "(ïðîäàòü êëþ÷)";
};

func int grd_262_aaron_sellnow_condition() {
    if (npc_knowsinfo(hero, grd_262_aaron_sell /*9381*/) && npc_hasitems(hero, itke_om_02)) {
        return 1;
    };
};

func void grd_262_aaron_sellnow_info() {
    ai_output(other, self, "Info_Aaron_SELLNOW_15_01"); //Âîò òâîé êëþ÷.
    ai_output(self, other, "Info_Aaron_SELLNOW_09_02"); //Äà, ýòî îí. Íó, âîò òâîè äâàäöàòü êóñêîâ, êàê ìû è äîãîâàðèâàëèñü.
    ai_output(self, other, "Info_Aaron_SELLNOW_09_03"); //Íî ó÷òè íà áóäóùåå: ñ ýòîãî ìîìåíòà ÿ íå ñïóùó ñ òåáÿ ãëàç!
    createinvitems(self, itminugget, 20);
    b_giveinvitems(self, other, itminugget /*4517*/, 20);
    b_giveinvitems(hero, self, itke_om_02 /*4633*/, 1);
    b_givexp(xp_sellkeytoaaron);
    b_logentry(ch2_snipesdeal, ch2_snipesdeal_4);
    log_settopicstatus(ch2_snipesdeal, log_success);
};

instance grd_263_asghan_exit(c_info) {
    npc = grd_263_asghan /*7372*/;
    nr = 999;
    condition = grd_263_asghan_exit_condition;
    information = grd_263_asghan_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int grd_263_asghan_exit_condition() {
    return 1;
};

func void grd_263_asghan_exit_info() {
    ai_stopprocessinfos(self);
};

instance grd_263_asghan_nest(c_info) {
    npc = grd_263_asghan /*7372*/;
    nr = 0;
    condition = grd_263_asghan_nest_condition;
    information = grd_263_asghan_nest_info;
    description = "Ãäå-òî çäåñü äîëæíî áûòü ëîãîâî ïîëçóíîâ.";
};

func int grd_263_asghan_nest_condition() {
    if (corkalom_bringmcqballs == log_running) {
        return 1;
    };
};

func void grd_263_asghan_nest_info() {
    ai_output(other, self, "Grd_263_Asghan_NEST_Info_15_01"); //Ãäå-òî çäåñü äîëæíî áûòü ëîãîâî ïîëçóíîâ.
    ai_output(self, other, "Grd_263_Asghan_NEST_Info_06_02"); //Âñÿ ãîðà - îäíî ñïëîøíîå ëîãîâî ýòèõ òâàðåé!
    ai_output(other, self, "Grd_263_Asghan_NEST_Info_15_03"); //Ïî÷åìó çàêðûëè ýòó øàõòó?
    ai_output(self, other, "Grd_263_Asghan_NEST_Info_06_04"); //Ñêîëüêî áû ìû íè óáèâàëè ïîëçóíîâ, èõ ñòàíîâèëîñü âñå áîëüøå è áîëüøå.
    ai_output(other, self, "Grd_263_Asghan_NEST_Info_15_05"); //Ïîõîæå, ãäå-òî íåïîäàëåêó äîëæíî áûòü èõ ëîãîâî. Ïîçâîëü ìíå îòêðûòü âîðîòà!
    ai_output(self, other, "Grd_263_Asghan_NEST_Info_06_06"); //Íåò! Ýòè âîðîòà ìîãóò áûòü îòêðûòû òîëüêî ñ ðàçðåøåíèÿ ßíà! Äî òåõ ïîð ïîêà òû íå ïîëó÷èøü åãî, ÿ íå ñäâèíóñü ñ ìåñòà.
    b_logentry(ch2_mceggs, ch2_mceggs_1);
};

instance grd_263_asghan_open(c_info) {
    npc = grd_263_asghan /*7372*/;
    nr = 0;
    condition = grd_263_asghan_open_condition;
    information = grd_263_asghan_open_info;
    description = "Ýé, Àñãõàí, òåïåðü òû ìîæåøü îòêðûòü âîðîòà!";
};

func int grd_263_asghan_open_condition() {
    if (npc_knowsinfo(hero, grd_263_asghan_nest /*9390*/) && npc_knowsinfo(hero, stt_301_ian_gear_suc /*12262*/)) {
        return true;
    };
};

func void grd_263_asghan_open_info() {
    ai_output(other, self, "Grd_263_Asghan_OPEN_Info_15_01"); //Ýé, Àñãõàí, òåïåðü òû ìîæåøü îòêðûòü âîðîòà!
    ai_output(self, other, "Grd_263_Asghan_OPEN_Info_06_02"); //ß óæå ãîâîðèë òåáå: òîëüêî åñëè ßí...
    ai_output(other, self, "Grd_263_Asghan_OPEN_Info_15_03"); //Àñãõàí... Âñå áóäåò â ïîðÿäêå... È ïðèìè íàèëó÷øèå ïîæåëàíèÿ îò ßíà.
    ai_output(self, other, "Grd_263_Asghan_OPEN_Info_06_04"); //Íó, åñëè ßí áåðåò îòâåòñòâåííîñòü íà ñåáÿ... Íî òîëüêî íà îäíîì óñëîâèè!
    ai_output(other, self, "Grd_263_Asghan_OPEN_Info_15_05"); //Íà êàêîì æå?
    ai_output(self, other, "Grd_263_Asghan_OPEN_Info_06_06"); //Äîáóäü ìíå ïîäêðåïëåíèå - äâóõ-òðåõ Ñòðàæåé. ß íå õî÷ó ñòîÿòü çäåñü îäèí, êîãäà ïîëçóíû ïîïðóò èç øàõòû!
    b_logentry(ch2_mceggs, ch2_mceggs_2);
    ai_stopprocessinfos(self);
};

instance grd_263_asghan_open_now(c_info) {
    npc = grd_263_asghan /*7372*/;
    nr = 0;
    condition = grd_263_asghan_open_now_condition;
    information = grd_263_asghan_open_now_info;
    description = "Âñå ïðèãîòîâëåíèÿ îêîí÷åíû. Òåïåðü ìîæíî îòêðûòü øàõòó!";
};

func int grd_263_asghan_open_now_condition() {
    if (((npc_knowsinfo(hero, tpl_1400_gornabar_suggest /*12456*/) && npc_knowsinfo(hero, tpl_1401_gornakosh_suggest /*12468*/)) || (npc_knowsinfo(hero, tpl_1401_gornakosh_suggest /*12468*/) && npc_knowsinfo(hero, tpl_1433_gornavid_health_suc /*12609*/))) || (npc_knowsinfo(hero, tpl_1433_gornavid_health_suc /*12609*/) && npc_knowsinfo(hero, tpl_1400_gornabar_suggest /*12456*/))) {
        return true;
    };
};

func void grd_263_asghan_open_now_info() {
    ai_output(other, self, "Grd_263_Asghan_OPEN_NOW_Info_15_01"); //Âñå ïðèãîòîâëåíèÿ îêîí÷åíû. Òåïåðü ìîæíî îòêðûòü øàõòó!
    ai_output(self, other, "Grd_263_Asghan_OPEN_NOW_Info_06_02"); //Ëàäíî, îòêðûâàé. Ïðåäñòàâëåíèå íà÷èíàåòñÿ!
    npc_setpermattitude(self, att_friendly);
    npc_exchangeroutine(self, "opengate");
    b_givexp(xp_openasghansgate);
    b_logentry(ch2_mceggs, ch2_mceggs_3);
    ai_stopprocessinfos(self);
};

instance grd_263_asghan_lairfound(c_info) {
    npc = grd_263_asghan /*7372*/;
    nr = 0;
    condition = grd_263_asghan_lairfound_condition;
    information = grd_263_asghan_lairfound_info;
    description = "Ïîëçóíû áîëüøå íå ïðåäñòàâëÿþò óãðîçû!";
};

func int grd_263_asghan_lairfound_condition() {
    if (npc_hasitems(hero, itat_crawlerqueen) >= 3) {
        return true;
    };
};

func void grd_263_asghan_lairfound_info() {
    ai_output(other, self, "Grd_263_Asghan_LAIRFOUND_Info_15_01"); //Ïîëçóíû áîëüøå íå ïðåäñòàâëÿþò óãðîçû!
    ai_output(self, other, "Grd_263_Asghan_LAIRFOUND_Info_06_02"); //Õîðîøàÿ íîâîñòü. ß îòïðàâëþ ãîíöà ê Òîðóñó!
    ai_stopprocessinfos(self);
};

instance grd_263_asghan_smalltalk(c_info) {
    npc = grd_263_asghan /*7372*/;
    nr = 0;
    condition = grd_263_asghan_smalltalk_condition;
    information = grd_263_asghan_smalltalk_info;
    description = "Êàê èäóò äåëà?";
};

func int grd_263_asghan_smalltalk_condition() {
    if (corkalom_bringmcqballs != log_running) {
        return true;
    };
};

func void grd_263_asghan_smalltalk_info() {
    ai_output(other, self, "Grd_263_Asghan_SMALLTALK_Info_15_01"); //Ýé, êàê äåëà?
    ai_output(self, other, "Grd_263_Asghan_SMALLTALK_Info_06_02"); //Íîðìàëüíî... Ïîêà íèêòî íå ïûòàåòñÿ îòêðûòü âîðîòà, ìíå íå íóæíî îòêðó÷èâàòü íèêîìó ãîëîâó.
    ai_output(other, self, "Grd_263_Asghan_SMALLTALK_Info_15_03"); //×òî òàêîãî îñîáåííîãî â ýòèõ âîðîòàõ?
    ai_output(self, other, "Grd_263_Asghan_SMALLTALK_Info_06_04"); //Ïîëçóíû. Áîëüøèå ìåðçêèå òâàðè. È èõ çäåñü î÷åíü ìíîãî.
};

instance grd_264_gardist_gardeaufnahme(c_info) {
    npc = grd_264_gardist /*7375*/;
    condition = grd_264_gardist_gardeaufnahme_condition;
    information = grd_264_gardist_gardeaufnahme_info;
    important = true;
};

func int grd_264_gardist_gardeaufnahme_condition() {
    if (((npc_hasitems(hero, itat_crawlerqueen) >= 1) && (npc_gettrueguild(hero) == gil_stt)) && (!npc_knowsinfo(hero, grd_260_drake_gardeaufnahme /*9353*/))) {
        return true;
    };
};

func void grd_264_gardist_gardeaufnahme_info() {
    ai_output(self, other, "Grd_264_Gardist_GARDEAUFNAHME_Info_07_01"); //Ýé, çäîðîâî òû ðàñïðàâèëñÿ ñ ïîëçóíàìè! Òû äîñòîèí áûòü îäíèì èç ñòðàæíèêîâ!
    ai_output(self, other, "Grd_264_Gardist_GARDEAUFNAHME_Info_07_02"); //Îòïðàâëÿéñÿ â Ñòàðûé Ëàãåðü è ïîãîâîðè îá ýòîì ñ Òîðóñîì!
    log_createtopic(ge_becomeguard, log_note);
    b_logentry(ge_becomeguard, ge_becomeguard_1);
};

instance grd_271_ulbert_exit(c_info) {
    npc = grd_271_ulbert /*7387*/;
    nr = 999;
    condition = grd_271_ulbert_exit_condition;
    information = grd_271_ulbert_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int grd_271_ulbert_exit_condition() {
    return 1;
};

func void grd_271_ulbert_exit_info() {
    ai_stopprocessinfos(self);
};

instance grd_271_ulbert_key(c_info) {
    npc = grd_271_ulbert /*7387*/;
    nr = 0;
    condition = grd_271_ulbert_key_condition;
    information = grd_271_ulbert_key_info;
    description = "×òî õðàíèòñÿ íà ñêëàäå?";
};

func int grd_271_ulbert_key_condition() {
    return 1;
};

func void grd_271_ulbert_key_info() {
    ai_output(other, self, "GRD_271_ULBERT_KEY_Info_15_01"); //×òî õðàíèòñÿ íà ñêëàäå?
    ai_output(self, other, "GRD_271_ULBERT_KEY_Info_07_02"); //Íå òâîåãî óìà äåëî.
};

instance grd_271_ulbert_trick(c_info) {
    npc = grd_271_ulbert /*7387*/;
    nr = 0;
    condition = grd_271_ulbert_trick_condition;
    information = grd_271_ulbert_trick_info;
    description = "Òû óæå äàâíî çäåñü ñòîèøü. Íàâåðíîå, õî÷åøü ïèòü?";
};

func int grd_271_ulbert_trick_condition() {
    if (npc_knowsinfo(hero, grd_271_ulbert_key /*9411*/)) {
        return 1;
    };
};

func void grd_271_ulbert_trick_info() {
    ai_output(other, self, "GRD_271_ULBERT_TRICK_Info_15_01"); //Òû óæå äàâíî çäåñü ñòîèøü. Íàâåðíîå, õî÷åøü ïèòü?
    ai_output(self, other, "GRD_271_ULBERT_TRICK_Info_07_02"); //Óãàäàë! Ìíå áû ñåé÷àñ íå ïîìåøàë áîëüøîé ãëîòîê ÷åãî-íèáóäü êðåïêîãî. Åñòü ñ ñîáîé ÷òî-íèáóäü?
    log_createtopic(ch2_storageshed, log_mission);
    log_settopicstatus(ch2_storageshed, log_running);
    b_logentry(ch2_storageshed, ch2_storageshed_1);
};

instance grd_271_ulbert_drink(c_info) {
    npc = grd_271_ulbert /*7387*/;
    nr = 0;
    condition = grd_271_ulbert_drink_condition;
    information = grd_271_ulbert_drink_info;
    description = "(îòäàòü âûïèâêó)";
};

func int grd_271_ulbert_drink_condition() {
    if (npc_knowsinfo(hero, grd_271_ulbert_trick /*9414*/) && ((npc_hasitems(hero, itfobeer) || npc_hasitems(hero, itfowine)) || npc_hasitems(hero, itfobooze))) {
        return 1;
    };
};

func void grd_271_ulbert_drink_info() {
    ai_output(other, self, "GRD_271_ULBERT_DRINK_Info_15_01"); //Äåðæè, ïðèõâàòèë ñïåöèàëüíî äëÿ òåáÿ!
    ai_output(self, other, "GRD_271_ULBERT_DRINK_Info_07_02"); //Ñïàñèáî.
    if (npc_hasitems(hero, itfobeer)) {
        b_giveinvitems(hero, self, itfobeer /*4326*/, 1);
        if (c_bodystatecontains(self, bs_sit)) {
            ai_standup(self);
            ai_turntonpc(self, hero);
        };
        ai_useitem(self, itfobeer /*4326*/);
    }
    else if (npc_hasitems(hero, itfowine)) {
        b_giveinvitems(hero, self, itfowine /*4328*/, 1);
        if (c_bodystatecontains(self, bs_sit)) {
            ai_standup(self);
            ai_turntonpc(self, hero);
        };
        ai_useitem(self, itfowine /*4328*/);
    }
    else {
        if (npc_hasitems(hero, itfobooze)) {
            b_giveinvitems(hero, self, itfobooze /*4330*/, 1);
            if (c_bodystatecontains(self, bs_sit)) {
                ai_standup(self);
                ai_turntonpc(self, hero);
            };
            ai_useitem(self, itfobooze /*4330*/);
        };
    };
};

instance grd_271_ulbert_drunk(c_info) {
    npc = grd_271_ulbert /*7387*/;
    nr = 0;
    condition = grd_271_ulbert_drunk_condition;
    information = grd_271_ulbert_drunk_info;
    description = "Íó, à ÒÅÏÅÐÜ, ÷òî æå âñå-òàêè õðàíèòñÿ íà ñêëàäå?";
};

func int grd_271_ulbert_drunk_condition() {
    if (npc_knowsinfo(hero, grd_271_ulbert_drink /*9417*/)) {
        return 1;
    };
};

func void grd_271_ulbert_drunk_info() {
    ai_output(other, self, "GRD_271_ULBERT_DRUNK_Info_15_01"); //Íó, à ÒÅÏÅÐÜ, ÷òî æå âñå-òàêè õðàíèòñÿ íà ñêëàäå?
    ai_output(self, other, "GRD_271_ULBERT_DRUNK_Info_07_02"); //Íåñêîëüêî ñóíäóêîâ, ãäå ìû äåðæèì ïðèïàñû. Ïðàâäà, êëþ÷ îò íèõ âñå ðàâíî èñ÷åç.
    ai_output(other, self, "GRD_271_ULBERT_DRUNK_Info_15_03"); //Èñ÷åç?
    ai_output(self, other, "GRD_271_ULBERT_DRUNK_Info_07_04"); //Äà, è ïîëàãàþ, ÷òî âèíèòü â ýòîì ñëåäóåò Àëåôà. Ýòîìó ïàðíþ íåëüçÿ äîâåðÿòü.
    b_logentry(ch2_storageshed, ch2_storageshed_2);
};

instance grd_271_ulbert_lock(c_info) {
    npc = grd_271_ulbert /*7387*/;
    nr = 0;
    condition = grd_271_ulbert_lock_condition;
    information = grd_271_ulbert_lock_info;
    description = "(âûìàíèòü Óëüáåðòà)";
};

func int grd_271_ulbert_lock_condition() {
    if (npc_knowsinfo(hero, grd_271_ulbert_drunk /*9420*/)) {
        return 1;
    };
};

func void grd_271_ulbert_lock_info() {
    ai_output(other, self, "GRD_271_ULBERT_LOCK_Info_15_01"); //Ñëóøàé, ßí ñ îñòàëüíûìè ñèäèò âíèçó è æàðèò ìÿñî.
    ai_output(self, other, "GRD_271_ULBERT_LOCK_Info_07_02"); //×òî? Áåç ìåíÿ?! Íó, ÿ åùå óñïåþ çàáðàòü ñâîþ äîëþ.
    b_logentry(ch2_storageshed, ch2_storageshed_3);
    npc_exchangeroutine(self, "away");
    ai_stopprocessinfos(self);
};

instance grd_271_ulbert_angry(c_info) {
    npc = grd_271_ulbert /*7387*/;
    condition = grd_271_ulbert_angry_condition;
    information = grd_271_ulbert_angry_info;
    important = true;
};

func int grd_271_ulbert_angry_condition() {
    if (npc_knowsinfo(hero, grd_271_ulbert_lock /*9423*/) && (npc_getdisttowp(hero, "OM_CAVE1_49") < 600)) {
        return true;
    };
};

func void grd_271_ulbert_angry_info() {
    ai_output(self, other, "GRD_271_ULBERT_ANGRY_Info_07_01"); //Ýé, òû, òàì íå áûëî íèêàêîãî ìÿñà!
    ai_output(other, self, "GRD_271_ULBERT_ANGRY_Info_15_02"); //À... îõ... Êàæåòñÿ, ÿ îøèáñÿ! Õîðîøåãî äíÿ!
    b_givexp(xp_lureulbertaway);
    b_logentry(ch2_storageshed, ch2_storageshed_4);
    log_settopicstatus(ch2_storageshed, log_success);
    npc_exchangeroutine(self, "start");
    ai_stopprocessinfos(self);
};

instance info_grd_275_preexit(c_info) {
    npc = grd_275_brueckenwache /*7394*/;
    nr = 999;
    condition = info_grd_275_preexit_condition;
    information = info_grd_275_preexit_info;
    description = dialog_ende;
};

func int info_grd_275_preexit_condition() {
    if (kapitel <= 1) {
        return 1;
    };
};

func void info_grd_275_preexit_info() {
    ai_output(self, other, "Info_GRD_275_PreExit_06_01"); //Íå çàáóäü çàãëÿíóòü â Ñòàðûé Ëàãåðü - ó íèõ óæå åñòü äëÿ òåáÿ êèðêà. Õà-õà-õà-õà!
    ai_stopprocessinfos(self);
};

instance info_grd_275_exit(c_info) {
    npc = grd_275_brueckenwache /*7394*/;
    nr = 999;
    condition = info_grd_275_exit_condition;
    information = info_grd_275_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_grd_275_exit_condition() {
    if ((kapitel > 1) || npc_knowsinfo(hero, info_grd_275_preexit /*9429*/)) {
        return 1;
    };
};

func void info_grd_275_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_grd_275_wasmachtihrhier(c_info) {
    npc = grd_275_brueckenwache /*7394*/;
    nr = 1;
    condition = info_grd_275_wasmachtihrhier_condition;
    information = info_grd_275_wasmachtihrhier_info;
    permanent = true;
    description = "×åì òû çàíèìàåøüñÿ?";
};

func int info_grd_275_wasmachtihrhier_condition() {
    return 1;
};

func void info_grd_275_wasmachtihrhier_info() {
    ai_output(other, self, "Info_GRD_275_WasMachtIhrHier_15_00"); //×òî âû çäåñü äåëàåòå?
    ai_output(self, other, "Info_GRD_275_WasMachtIhrHier_06_01"); //À êàê ïî-òâîåìó? Îõðàíÿåì ìîñò, êîíå÷íî!
    ai_output(self, other, "Info_GRD_275_WasMachtIhrHier_06_02"); //Ìû ñëåäèì çà òåì, ÷òîáû íè îäíà õèùíàÿ òâàðü íå ïåðåáðàëàñü íà äðóãóþ ñòîðîíó ðåêè.
};

instance info_grd_275_tips(c_info) {
    npc = grd_275_brueckenwache /*7394*/;
    nr = 1;
    condition = info_grd_275_tips_condition;
    information = info_grd_275_tips_info;
    permanent = true;
    description = "Âîçìîæíî, ó âàñ åñòü äëÿ ìåíÿ êàêîé-òî ñîâåò?";
};

func int info_grd_275_tips_condition() {
    return 1;
};

func void info_grd_275_tips_info() {
    ai_output(other, self, "Info_GRD_275_Tips_15_00"); //Âîçìîæíî, ó âàñ åñòü äëÿ ìåíÿ êàêîé-òî ñîâåò?
    ai_output(self, other, "Info_GRD_275_Tips_06_01"); //Àãà. Íèêîãäà íå õîäè â ëåñ â îäèíî÷êó...
    ai_output(self, other, "Info_GRD_275_Tips_06_02"); //Åñëè, êîíå÷íî, íå ñîáèðàåøüñÿ ïåðåáèòü âñåõ òâàðåé, êîòîðûå òàì îáèòàþò.
};

instance info_grd_276_exit(c_info) {
    npc = grd_276_brueckenwache /*7396*/;
    nr = 999;
    condition = info_grd_276_exit_condition;
    information = info_grd_276_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_grd_276_exit_condition() {
    return 1;
};

func void info_grd_276_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_grd_276_tips(c_info) {
    npc = grd_276_brueckenwache /*7396*/;
    nr = 1;
    condition = info_grd_276_tips_condition;
    information = info_grd_276_tips_info;
    description = "Ïðèâåò! ß çäåñü íîâåíüêèé.";
};

func int info_grd_276_tips_condition() {
    if (kapitel <= 2) {
        return 1;
    };
};

func void info_grd_276_tips_info() {
    ai_output(other, self, "Info_GRD_276_Tips_15_00"); //Ïðèâåò! ß çäåñü íåäàâíî...
    ai_output(self, other, "Info_GRD_276_Tips_07_01"); //Êàê ýòî ìèëî.
};

instance info_grd_276_bla(c_info) {
    npc = grd_276_brueckenwache /*7396*/;
    nr = 2;
    condition = info_grd_276_bla_condition;
    information = info_grd_276_bla_info;
    permanent = true;
    description = "Ýòî Ñòàðûé Ëàãåðü íà òîì áåðåãó?";
};

func int info_grd_276_bla_condition() {
    if (npc_knowsinfo(hero, info_grd_276_tips /*9444*/)) {
        return 1;
    };
};

func void info_grd_276_bla_info() {
    ai_output(other, self, "Info_GRD_276_Bla_15_00"); //Ýòî Ñòàðûé Ëàãåðü íà òîì áåðåãó?
    ai_output(self, other, "Info_GRD_276_Bla_07_01"); //Íåò, ýòî Íîâûé Ëàãåðü. Ñòàðûé íàõîäèòñÿ äàëüøå.
    ai_stopprocessinfos(self);
};

instance grd_277_gardist_sittingork(c_info) {
    npc = grd_277_gardist /*7398*/;
    nr = 0;
    condition = grd_277_gardist_sittingork_condition;
    information = grd_277_gardist_sittingork_info;
    description = "×òî ñ ýòèì îðêîì?";
};

func int grd_277_gardist_sittingork_condition() {
    if (ian_gearwheel != log_success) {
        return true;
    };
};

func void grd_277_gardist_sittingork_info() {
    ai_output(other, self, "Grd_277_Gardist_SITTINGORK_Info_15_01"); //×òî ñ ýòèì îðêîì?
    ai_output(self, other, "Grd_277_Gardist_SITTINGORK_Info_06_02"); //Îí íàø ïëåííèê. Åìó åùå ïîâåçëî, ÷òî ñëîìàëàñü øåñòåðåíêà ó ïðåññà. Òîëüêî ïîýòîìó ýòîò ãàäåíûø ñåé÷àñ îòäûõàåò.
    ai_output(self, other, "Grd_277_Gardist_SITTINGORK_Info_06_03"); //Êàê òîëüêî ïðåññ ïî÷èíÿò, îí âíîâü áóäåò ðàáîòàòü. Õâàòèò óæå áåçäåëüíè÷àòü!
};

instance grd_277_gardist_workingork(c_info) {
    npc = grd_277_gardist /*7398*/;
    nr = 0;
    condition = grd_277_gardist_workingork_condition;
    information = grd_277_gardist_workingork_info;
    description = "Ïî-ìîåìó, ïðåññ óæå ïî÷èíèëè.";
};

func int grd_277_gardist_workingork_condition() {
    if (ian_gearwheel == log_success) {
        return true;
    };
};

func void grd_277_gardist_workingork_info() {
    ai_output(other, self, "Grd_277_Gardist_WORKINGORK_Info_15_01"); //Ïî-ìîåìó, ïðåññ óæå ïî÷èíèëè.
    ai_output(self, other, "Grd_277_Gardist_WORKINGORK_Info_06_02"); //Äà, êîãäà íóæíî çàñòàâèòü êîãî-íèáóäü ðàáîòàòü, ìû äåëàåì ýòî áûñòðî.
};

instance dia_grd_281_exit(c_info) {
    npc = grd_281_gardist /*7407*/;
    nr = 999;
    condition = dia_grd_281_exit_condition;
    information = dia_grd_281_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_grd_281_exit_condition() {
    return 1;
};

func void dia_grd_281_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_grd_281_guardgate(c_info) {
    npc = grd_281_gardist /*7407*/;
    nr = 1;
    condition = dia_grd_281_guardgate_condition;
    information = dia_grd_281_guardgate_info;
    permanent = true;
    description = "Êàê äåëà?";
};

func int dia_grd_281_guardgate_condition() {
    if (!c_npcbelongstonewcamp(other)) {
        return 1;
    };
};

func void dia_grd_281_guardgate_info() {
    ai_output(other, self, "DIA_Grd_281_GuardGate_15_00"); //Êàê èäóò äåëà?
    ai_output(self, other, "DIA_Grd_281_GuardGate_07_01"); //Õîðîøî. Âîðîâ èç Íîâîãî Ëàãåðÿ ïîêà ÷òî íå âèäíî.
    ai_stopprocessinfos(self);
};

instance info_yberion_exit(c_info) {
    npc = gur_1200_yberion /*7448*/;
    nr = 999;
    condition = info_yberion_exit_condition;
    information = info_yberion_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_yberion_exit_condition() {
    return 1;
};

func void info_yberion_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_yberion_wache(c_info) {
    npc = gur_1200_yberion /*7448*/;
    nr = 1;
    condition = dia_yberion_wache_condition;
    information = dia_yberion_wache_info;
    permanent = true;
    important = true;
};

func int dia_yberion_wache_condition() {
    if (kapitel == 1) {
        return 1;
    };
};

func void dia_yberion_wache_info() {
    ai_output(self, other, "DIA_YBerion_Wache_12_00"); //×òî òû çäåñü äåëàåøü? Êòî òåáÿ âïóñòèë? Ñòðàæà!
    npc_sendpassiveperc(self, perc_assesswarn, self, other);
    ai_stopprocessinfos(self);
    b_setattackreason(self, aiv_ar_intruder);
    npc_settarget(self, hero);
    ai_startstate(self, zs_attack, 1, "");
};

instance dia_yberion_kennen(c_info) {
    npc = gur_1200_yberion /*7448*/;
    nr = 1;
    condition = dia_yberion_kennen_condition;
    information = dia_yberion_kennen_info;
    description = "Ïðèâåòñòâóþ âàñ, ãîñïîäèí Þ`Áåðèîí!";
};

func int dia_yberion_kennen_condition() {
    if (kapitel == 2) {
        return 1;
    };
};

func void dia_yberion_kennen_info() {
    ai_output(other, self, "DIA_YBerion_Kennen_15_00"); //Ïðèâåòñòâóþ âàñ, ãîñïîäèí Þ`Áåðèîí!
    ai_output(self, other, "DIA_YBerion_Kennen_12_01"); //À! ß òåáÿ çíàþ!
    ai_output(other, self, "DIA_YBerion_Kennen_15_02"); //Ýòî íåâîçìîæíî. Ìû íèêîãäà íå âñòðå÷àëèñü ïðåæäå.
    ai_output(self, other, "DIA_YBerion_Kennen_12_03"); //Íî ìíå êàçàëîñü... Õîðîøî - ÷òî òåáå íóæíî?
};

instance info_yberion_bringfocus(c_info) {
    npc = gur_1200_yberion /*7448*/;
    nr = 0;
    condition = info_yberion_bringfocus_condition;
    information = info_yberion_bringfocus_info;
    permanent = true;
    description = "ß ñëûøàë, âû êîå-÷òî èùåòå.";
};

func int info_yberion_bringfocus_condition() {
    if (((npc_knowsinfo(hero, dia_yberion_kennen /*9468*/) && (npc_gettrueguild(hero) != gil_none)) && (yberion_bringfocus != log_running)) && (yberion_bringfocus != log_success)) {
        return 1;
    };
};

func void info_yberion_bringfocus_info() {
    ai_output(other, self, "Sit_2_PSI_Yberion_BringFocus_Info_15_01"); //ß ñëûøàë, âû êîå-÷òî èùåòå.
    ai_output(self, other, "Sit_2_PSI_Yberion_BringFocus_Info_12_02"); //Âåðíî. Íàì íóæåí ìàãè÷åñêèé þíèòîð.
    ai_output(self, other, "Sit_2_PSI_Yberion_BringFocus_Info_12_03"); //Ìû ïîñëàëè îäíîãî èç íîâè÷êîâ - Íèðàñà - çàáðàòü åãî, íî îí äî ñèõ ïîð íå âåðíóëñÿ.
    ai_output(self, other, "Sit_2_PSI_Yberion_BringFocus_Info_12_04"); //Íå ìîã áû òû óçíàòü, ÷òî ïðîèçîøëî?
    info_clearchoices(info_yberion_bringfocus /*9471*/);
    info_addchoice(info_yberion_bringfocus /*9471*/, dialog_back, info_yberion_bringfocus_back);
    info_addchoice(info_yberion_bringfocus /*9471*/, "ß ïðèíåñó âàì þíèòîð.", info_yberion_bringfocus_ok);
    info_addchoice(info_yberion_bringfocus /*9471*/, "Îòêóäà ÿ äîëæåí íà÷àòü ïîèñêè?", info_yberion_bringfocus_wo);
    info_addchoice(info_yberion_bringfocus /*9471*/, "Ïî÷åìó ýòîò þíèòîð òàê âàæåí?", info_yberion_bringfocus_fokus);
};

func void info_yberion_bringfocus_back() {
    info_clearchoices(info_yberion_bringfocus /*9471*/);
};

func void info_yberion_bringfocus_ok() {
    ai_output(other, self, "Sit_2_PSI_Yberion_BringFocus_OK_15_01"); //ß ïðèíåñó âàì þíèòîð.
    ai_output(self, other, "Sit_2_PSI_Yberion_BringFocus_OK_12_02"); //Âîçüìè ýòó êàðòó. Íà íåé îòìå÷åíî ìåñòî, ãäå íàõîäèòñÿ þíèòîð.
    b_story_bringfirstfocus();
    b_logentry(ch2_focus, ch2_focus_1);
};

func void info_yberion_bringfocus_wo() {
    ai_output(other, self, "Sit_2_PSI_Yberion_BringFocus_WO_15_01"); //Îòêóäà ÿ äîëæåí íà÷àòü ïîèñêè?
    ai_output(self, other, "Sit_2_PSI_Yberion_BringFocus_WO_12_02"); //Íà âûõîäå èç Ëàãåðÿ ïîâåðíè íàïðàâî è ïîäíèìàéñÿ íà âûñîêóþ ñêàëó. Çà ëåñîì òû óâèäèøü ìîðå, è òàì òû íàéäåøü þíèòîð.
};

func void info_yberion_bringfocus_fokus() {
    ai_output(other, self, "Sit_2_PSI_Yberion_BringFocus_FOKUS_15_01"); //Ïî÷åìó ýòîò þíèòîð òàê âàæåí?
    ai_output(self, other, "Sit_2_PSI_Yberion_BringFocus_FOKUS_12_02"); //Ýòîò ìàãè÷åñêèé àðòåôàêò ñïîñîáåí êîíöåíòðèðîâàòü íàøó ñèëó.
    ai_output(self, other, "Sit_2_PSI_Yberion_BringFocus_FOKUS_12_03"); //Ýòî îäèí èç ïÿòè êàìíåé, ñ ïîìîùüþ êîòîðûõ ìàãè ñîòâîðèëè Áàðüåð.
    ai_output(self, other, "Sit_2_PSI_Yberion_BringFocus_FOKUS_12_04"); //Ìíå áûëî âèäåíèå î òîì, ÷òî ìû äîëæíû èñïîëüçîâàòü ñèëó ýòîãî êàìíÿ.
    ai_output(other, self, "Sit_2_PSI_Yberion_BringFocus_FOKUS_15_05"); //Êàêîå èíòåðåñíîå âèäåíèå!
    ai_output(self, other, "Sit_2_PSI_Yberion_BringFocus_FOKUS_12_06"); //Ìîå âèäåíèå áûëî íèñïîñëàíî Ñïÿùèì. Ìû ñìîæåì ïðèçâàòü åãî ñ ïîìîùüþ þíèòîðà!
};

instance info_yberion_bringfocus_running(c_info) {
    npc = gur_1200_yberion /*7448*/;
    nr = 1;
    condition = info_yberion_bringfocus_running_condition;
    information = info_yberion_bringfocus_running_info;
    description = "ß òàê è íå íàøåë þíèòîð.";
};

func int info_yberion_bringfocus_running_condition() {
    if ((yberion_bringfocus == log_running) && (!npc_hasitems(hero, focus_1))) {
        return true;
    };
};

func void info_yberion_bringfocus_running_info() {
    ai_output(other, self, "Info_YBerion_BringFocus_RUNNING_15_01"); //ß òàê è íå íàøåë þíèòîð.
    ai_output(self, other, "Info_YBerion_BringFocus_RUNNING_12_02"); //Íó òàê èùè åãî! Ñïÿùèé óêàæåò òåáå ïóòü.
};

instance info_yberion_bringfocus_success(c_info) {
    npc = gur_1200_yberion /*7448*/;
    nr = 1;
    condition = info_yberion_bringfocus_success_condition;
    information = info_yberion_bringfocus_success_info;
    description = "ß íàøåë þíèòîð.";
};

func int info_yberion_bringfocus_success_condition() {
    if ((yberion_bringfocus == log_running) && npc_hasitems(hero, focus_1)) {
        return 1;
    };
};

func void info_yberion_bringfocus_success_info() {
    var c_npc corkalom;

    ai_output(other, self, "Info_YBerion_BringFocus_Success_15_01"); //ß íàøåë þíèòîð.
    ai_output(self, other, "Info_YBerion_BringFocus_Success_12_02"); //Ïðåâîñõîäíî! Òû îêàçàë íàì âñåì íåîöåíèìóþ óñëóãó.
    ai_output(self, other, "Info_YBerion_BringFocus_Success_12_03"); //Òåïåðü îòíåñè þíèòîð Êîð Ãàëîìó. Îí çíàåò, ÷òî äåëàòü.
    if (kalom_talkedto == false) {
        ai_output(other, self, "Info_YBerion_BringFocus_Success_15_04"); //Ãäå ÿ ìîãó íàéòè ýòîãî Êîð Ãàëîìà?
        ai_output(self, other, "Info_YBerion_BringFocus_Success_12_05"); //Áîëüøóþ ÷àñòü âðåìåíè îí ïðîâîäèò â ñâîåé ëàáîðàòîðèè â âåðõíåé ÷àñòè ïëàòôîðì.
        ai_output(self, other, "Info_YBerion_BringFocus_Success_12_06"); //Ó âõîäà â Ëàãåðü òû íàéäåøü Ëåñòåðà. Îí îáû÷íî ïîêàçûâàåò íîâè÷êàì, ãäå ÷òî íàõîäèòñÿ.
        b_logentry(ch2_focus, ch2_focus_2);
    }
    else {
        b_logentry(ch2_focus, ch2_focus_3);
    };
    corkalom = hlp_getnpc(gur_1201_corkalom);
    corkalom.aivar[7] = true;
    tpl_1406_templer.aivar[29] = true;
    yberion_bringfocus = log_success;
    b_givexp(xp_bringfocustoyberion);
};

instance info_yberion_nyras(c_info) {
    npc = gur_1200_yberion /*7448*/;
    nr = 1;
    condition = info_yberion_nyras_condition;
    information = info_yberion_nyras_info;
    description = "Ýòîò íîâè÷îê, Íèðàñ, - îí ñîøåë ñ óìà!";
};

func int info_yberion_nyras_condition() {
    if (npc_hasitems(hero, focus_1)) {
        return 1;
    };
};

func void info_yberion_nyras_info() {
    ai_output(other, self, "Info_YBerion_NYRAS_15_01"); //Ýòîò íîâè÷îê, Íèðàñ, - îí ñîøåë ñ óìà!
    ai_output(other, self, "Info_YBerion_NYRAS_15_02"); //Îí òâåðäèò, ÷òî ñ íèì ãîâîðèë Ñïÿùèé è èçáðàë åãî ñâîèì åäèíñòâåííûì ñëóãîé!
    ai_output(other, self, "Info_YBerion_NYRAS_15_03"); //À çàòåì îí ïîïûòàëñÿ óáèòü ìåíÿ!
    ai_output(self, other, "Info_YBerion_NYRAS_12_04"); //Ìîãóùåñòâî Ñïÿùåãî ñëèøêîì âåëèêî äëÿ ðàçóìà íåïîñâÿùåííûõ.
    ai_output(self, other, "Info_YBerion_NYRAS_12_05"); //Ëèøü ìû, Ãóðó, ïîñëå äîëãèõ ëåò ìåäèòàöèè ñìîãëè äîñòè÷ü òîé ñèëû äóõà, ÷òî ïîçâîëÿåò íàì âûíîñèòü ãîëîñ âñåìîãóùåãî Ñïÿùåãî.
};

instance gur_1200_yberion_earn(c_info) {
    npc = gur_1200_yberion /*7448*/;
    nr = 0;
    condition = gur_1200_yberion_earn_condition;
    information = gur_1200_yberion_earn_info;
    description = "À êàê íàñ÷åò íåáîëüøîé íàãðàäû?";
};

func int gur_1200_yberion_earn_condition() {
    if (((yberion_bringfocus == log_success) && (!c_npcbelongstopsicamp(hero))) && c_ischapter(2)) {
        return 1;
    };
};

func void gur_1200_yberion_earn_info() {
    ai_output(other, self, "GUR_1200_Yberion_EARN_Info_15_01"); //À êàê íàñ÷åò íåáîëüøîé íàãðàäû?
    ai_output(self, other, "GUR_1200_Yberion_EARN_Info_12_02"); //Ïîñêîëüêó òû íå ÿâëÿåøüñÿ ÷ëåíîì Áðàòñòâà, ÿ íàãðàæó òåáÿ.
    ai_output(self, other, "GUR_1200_Yberion_EARN_Info_12_03"); //Ïðèìè ýòîò àìóëåò â çíàê ìîåé áëàãîäàðíîñòè.
    createinvitem(self, schutzamulett_feuer);
    b_giveinvitems(self, hero, schutzamulett_feuer /*4009*/, 1);
};

instance gur_1201_corkalom_first(c_info) {
    npc = gur_1201_corkalom /*7453*/;
    nr = 1;
    condition = gur_1201_corkalom_first_condition;
    information = gur_1201_corkalom_first_info;
    permanent = true;
    important = true;
};

func int gur_1201_corkalom_first_condition() {
    if (npc_isinstate(self, zs_talk)) {
        return 1;
    };
};

func void gur_1201_corkalom_first_info() {
    ai_output(self, other, "GUR_1201_CorKalom_FIRST_10_00"); //×òî òåáå íóæíî?
    kalom_talkedto = true;
};

instance gur_1201_corkalom_wannajoin(c_info) {
    npc = gur_1201_corkalom /*7453*/;
    nr = 1;
    condition = gur_1201_corkalom_wannajoin_condition;
    information = gur_1201_corkalom_wannajoin_info;
    description = "ß õî÷ó ñòàòü îäíèì èç ÷ëåíîâ Áðàòñòâà.";
};

func int gur_1201_corkalom_wannajoin_condition() {
    if (npc_gettrueguild(hero) == gil_none) {
        return 1;
    };
};

func void gur_1201_corkalom_wannajoin_info() {
    ai_output(other, self, "GUR_1201_CorKalom_WannaJoin_15_00"); //ß õî÷ó ñòàòü îäíèì èç ÷ëåíîâ Áðàòñòâà.
    ai_output(other, self, "GUR_1201_CorKalom_WannaJoin_15_01"); //ß ñëûøàë, òû êîìàíäóåøü ïîñëóøíèêàìè è âûáèðàåøü ñðåäè íèõ äîñòîéíûõ.
    ai_output(self, other, "GUR_1201_CorKalom_WannaJoin_10_02"); //Ó ìåíÿ íåò âðåìåíè! Ìîè ýêñïåðèìåíòû ñëèøêîì âàæíû, ÿ íå ìîãó ñåé÷àñ òðàòèòü âðåìÿ íà íîâè÷êîâ.
    ai_output(self, other, "GUR_1201_CorKalom_WannaJoin_10_03"); //ß ñîãëàøóñü ñ ðåøåíèåì Èäîëîâ. Âîçâðàùàéñÿ, êîãäà îíè ñêàæóò, ÷òî òû ãîòîâ íîñèòü íîñèòü ðîáó ïîñëóøíèêà.
    ai_stopprocessinfos(self);
    log_createtopic(ch1_joinpsi, log_mission);
    log_settopicstatus(ch1_joinpsi, log_running);
    b_logentry(ch1_joinpsi, ch1_joinpsi_7);
};

instance gur_1201_corkalom_recipe(c_info) {
    npc = gur_1201_corkalom /*7453*/;
    nr = 20;
    condition = gur_1201_corkalom_recipe_condition;
    information = gur_1201_corkalom_recipe_info;
    description = "Îäèí òîðãîâåö èç Ñòàðîãî Ëàãåðÿ èùåò ðåöåïò.";
};

func int gur_1201_corkalom_recipe_condition() {
    if (dexter_getkalomsrecipe == log_running) {
        return 1;
    };
};

func void gur_1201_corkalom_recipe_info() {
    ai_output(other, self, "GUR_1201_CorKalom_Recipe_15_00"); //Îäèí òîðãîâåö èç Ñòàðîãî Ëàãåðÿ èùåò ðåöåïò öåëåáíîãî ýëèêñèðà.
    ai_output(self, other, "GUR_1201_CorKalom_Recipe_10_01"); //Ìîè ðåöåïòû íå ïðîäàþòñÿ!
    b_logentry(ch1_kalomsrecipe, ch1_kalomsrecipe_1);
};

instance gur_1201_corkalom_experimente(c_info) {
    npc = gur_1201_corkalom /*7453*/;
    nr = 2;
    condition = gur_1201_corkalom_experimente_condition;
    information = gur_1201_corkalom_experimente_info;
    permanent = true;
    description = "×òî çà ýêñïåðèìåíòû òû ïðîâîäèøü?";
};

func int gur_1201_corkalom_experimente_condition() {
    if (kapitel <= 2) {
        return 1;
    };
};

func void gur_1201_corkalom_experimente_info() {
    ai_output(other, self, "GUR_1201_CorKalom_Experimente_15_00"); //×òî çà ýêñïåðèìåíòû òû ïðîâîäèøü?
    ai_output(self, other, "GUR_1201_CorKalom_Experimente_10_01"); //Ìîè èññëåäîâàíèÿ íàõîäÿòñÿ íà óðîâíå, íåäîñòóïíîì äëÿ òâîåãî ïîíèìàíèÿ, ìàëü÷èê. Íå òðàòü ïîïóñòó ìîå âðåìÿ!
};

instance gur_1201_corkalom_bringweed(c_info) {
    npc = gur_1201_corkalom /*7453*/;
    nr = 2;
    condition = gur_1201_corkalom_bringweed_condition;
    information = gur_1201_corkalom_bringweed_info;
    permanent = true;
    description = "ß ïðèíåñ äíåâíîé ñáîð áîëîòíèêà!";
};

func int gur_1201_corkalom_bringweed_condition() {
    if (baalorun_fetchweed == log_running) {
        return true;
    };
};

func void gur_1201_corkalom_bringweed_info() {
    ai_output(other, self, "GUR_1201_CorKalom_BRINGWEED_15_00"); //ß ïðèíåñ äíåâíîé ñáîð áîëîòíèêà!
    if (npc_hasitems(hero, itmi_plants_swampherb_01) < 100) {
        ai_output(self, other, "GUR_1201_CorKalom_BRINGWEED_10_01"); //È ÝÒÎ - âñå?! Ìíå íóæåí ÏÎËÍÛÉ ñáîð - ìèíèìóì ñîòíÿ ñòåáëåé!!!
        ai_stopprocessinfos(self);
    }
    else {
        ai_output(self, other, "GUR_1201_CorKalom_BRINGWEED_10_02"); //À, äàâàé ñþäà. È óáèðàéñÿ ñ ãëàç ìîèõ!
        b_giveinvitems(hero, self, itmi_plants_swampherb_01 /*4521*/, 100);
        npc_removeinvitems(self, itmi_plants_swampherb_01, 100);
        baalorun_fetchweed = log_success;
        b_logentry(ch1_deliverweed, ch1_deliverweed_2);
        log_settopicstatus(ch1_deliverweed, log_success);
        b_givexp(xp_deliveredweedharvest);
        baalorun_fetchweed = log_success;
        ai_stopprocessinfos(self);
    };
};

instance gur_1201_corkalom_crawlerzangen(c_info) {
    npc = gur_1201_corkalom /*7453*/;
    nr = 800;
    condition = gur_1201_corkalom_crawlerzangen_condition;
    information = gur_1201_corkalom_crawlerzangen_info;
    permanent = true;
    description = "ß ïðèíåñ òåáå æâàëû ïîëçóíîâ...";
};

func int gur_1201_corkalom_crawlerzangen_condition() {
    if (npc_hasitems(other, itat_crawler_01) > 0) {
        return 1;
    };
};

func void gur_1201_corkalom_crawlerzangen_info() {
    ai_output(other, self, "GUR_1201_CorKalom_Crawlerzangen_15_00"); //ß ïðèíåñ òåáå æâàëû ïîëçóíîâ...
    if (npc_hasitems(other, itat_crawler_01) > 9) {
        ai_output(self, other, "GUR_1201_CorKalom_Crawlerzangen_10_01"); //Î÷åíü õîðîøî. Â íàãðàäó ÿ äàì òåáå íåñêîëüêî ëó÷øèõ ýëèêñèðîâ.
        createinvitems(self, itfo_potion_mana_03, 3);
        b_giveinvitems(self, hero, itfo_potion_mana_03 /*4823*/, 3);
    }
    else if (npc_hasitems(other, itat_crawler_01) > 2) {
        ai_output(self, other, "GUR_1201_CorKalom_Crawlerzangen_10_02"); //Õîðîøî. Â íàãðàäó ÿ äàì òåáå íåñêîëüêî ýëèêñèðîâ.
        createinvitems(self, itfo_potion_mana_02, 2);
        b_giveinvitems(self, hero, itfo_potion_mana_02 /*4821*/, 2);
    }
    else {
        ai_output(self, other, "GUR_1201_CorKalom_Crawlerzangen_10_03"); //Õ-ì. È ýòî âñå? Âîò, çàáèðàé ìàãè÷åñêèé ýëèêñèð è ïðîâàëèâàé.
        createinvitems(self, itfo_potion_mana_01, 1);
        b_giveinvitems(self, hero, itfo_potion_mana_01 /*4819*/, 1);
        ai_stopprocessinfos(self);
    };
    b_giveinvitems(other, self, itat_crawler_01 /*4081*/, npc_hasitems(other, itat_crawler_01));
};

instance gur_1201_corkalom_joinpsi(c_info) {
    npc = gur_1201_corkalom /*7453*/;
    nr = 1;
    condition = gur_1201_corkalom_joinpsi_condition;
    information = gur_1201_corkalom_joinpsi_info;
    permanent = true;
    description = "Ïîõîæå, ìíå óäàëîñü óáåäèòü Èäîëîâ!";
};

func int gur_1201_corkalom_joinpsi_condition() {
    if ((npc_gettrueguild(hero) == gil_none) && npc_knowsinfo(hero, gur_1201_corkalom_wannajoin /*9494*/)) {
        return 1;
    };
};

func void gur_1201_corkalom_joinpsi_info() {
    var int counter;
    var c_npc lester;

    counter = 0;
    ai_output(other, self, "GUR_1201_CorKalom_JoinPSI_15_00"); //Ïîõîæå, ìíå óäàëîñü óáåäèòü Èäîëîâ!
    if (npc_knowsinfo(hero, dia_baalorun_gotweed /*9762*/)) {
        ai_output(other, self, "GUR_1201_CorKalom_JoinPSI_15_01"); //Èäîë Îðàí ñêàçàë, ÷òî ÿ äîñòîèí ñòàòü âåðíûì ñëóãîé Ñïÿùåãî.
        counter = counter + 1;
    };
    if (npc_knowsinfo(hero, dia_baalcadar_sleepspell /*9715*/)) {
        ai_output(self, other, "GUR_1201_CorKalom_JoinPSI_10_02"); //Ïðîäîëæàé...
        ai_output(other, self, "GUR_1201_CorKalom_JoinPSI_15_03"); //Èäîë Êàäàð ñ÷èòàåò ìåíÿ ñïîñîáíûì ó÷åíèêîì.
        counter = counter + 1;
    };
    if (npc_knowsinfo(hero, dia_baalnamib_firsttalk /*9688*/)) {
        ai_output(other, self, "GUR_1201_CorKalom_JoinPSI_15_04"); //Èäîë Íàìèá íàçûâàåò ìåíÿ èñòèííî âåðóþùèì.
        counter = counter + 1;
    };
    if (npc_knowsinfo(hero, dia_baaltyon_vision /*9784*/)) {
        ai_output(other, self, "GUR_1201_CorKalom_JoinPSI_15_05"); //Áëàãîäàðÿ ìíå Èäîëà Òèîíà ïîñåòèëî âèäåíèå.
        counter = counter + 1;
    };
    if (npc_knowsinfo(hero, dia_baaltondral_sendtokalom /*9675*/)) {
        ai_output(self, other, "GUR_1201_CorKalom_JoinPSI_10_06"); //È?
        ai_output(other, self, "GUR_1201_CorKalom_JoinPSI_15_07"); //Èäîë Òîíäðàë ñêàçàë, ÷òî ÿ äîëæåí ïîëó÷èòü ðîáó. ß ïðèâåë ê íåìó íîâîãî ó÷åíèêà.
        counter = counter + 1;
    };
    if (hero.level >= 5) {
        if (counter >= 4) {
            ai_output(self, other, "GUR_1201_CorKalom_JoinPSI_10_08"); //Õîðîøî. Äëÿ ìåíÿ âïîëíå äîñòàòî÷íî òîãî, ÷òî òåáÿ ïîääåðæèâàþò Èäîëû.
            ai_output(self, other, "GUR_1201_CorKalom_JoinPSI_10_09"); //Âîò, íàäåíü ýòî. À òåïåðü ñòóïàé è ïîñòàðàéñÿ ïðèíîñèòü ïîëüçó.
            createinvitem(self, nov_armor_m);
            b_giveinvitems(self, hero, nov_armor_m /*4139*/, 1);
            ai_equipbestarmor(other);
            npc_settrueguild(hero, gil_nov);
            hero.guild = gil_nov;
            b_logentry(ch1_joinpsi, ch1_joinpsi_8);
            log_createtopic(ge_traderpsi, log_note);
            b_logentry(ge_traderpsi, ge_traderpsi_2);
            log_settopicstatus(ch1_joinpsi, log_success);
            b_givexp(xp_becomenovice);
            log_createtopic(ch1_joinoc, log_mission);
            log_settopicstatus(ch1_joinoc, log_failed);
            b_logentry(ch1_joinoc, ch1_joinoc_8);
            log_createtopic(ch1_joinnc, log_mission);
            log_settopicstatus(ch1_joinnc, log_failed);
            b_logentry(ch1_joinnc, ch1_joinnc_2);
            lester = hlp_getnpc(pc_psionic);
            npc_exchangeroutine(lester, "START");
            lesterguide = 0;
            ai_continueroutine(lester);
        }
        else {
            ai_output(self, other, "GUR_1201_CorKalom_JoinPSI_NOT_10_00"); //È?
            ai_output(other, self, "GUR_1201_CorKalom_JoinPSI_NOT_15_01"); //Ýòî âñå.
            ai_output(self, other, "GUR_1201_CorKalom_JoinPSI_NOT_10_02"); //Òû ïîïóñòó òðàòèøü ìîå äðàãîöåííîå âðåìÿ. Âîçâðàùàéñÿ, êîãäà õîòÿ áû ÷åòâåðî Èäîëîâ ïðèçíàþò òåáÿ äîñòîéíûì!
        };
    }
    else {
        ai_output(self, other, "GUR_1201_CorKalom_JoinPSI_NOT_10_00"); //È?
        ai_output(other, self, "GUR_1201_CorKalom_JoinPSI_NOT_15_01"); //Ýòî âñå.
        b_say(self, other, "$NoLearnYouAlreadyKnow");
        b_printguildcondition(5);
    };
};

instance gur_1201_corkalom_joinpsi2(c_info) {
    npc = gur_1201_corkalom /*7453*/;
    nr = 1;
    condition = gur_1201_corkalom_joinpsi2_condition;
    information = gur_1201_corkalom_joinpsi2_info;
    description = "Çíà÷èò, òàê? Íè ïðèâåòñòâèé, íè äîáðûõ ïîæåëàíèé - íè÷åãî?!";
};

func int gur_1201_corkalom_joinpsi2_condition() {
    if (npc_gettrueguild(hero) == gil_nov) {
        return 1;
    };
};

func void gur_1201_corkalom_joinpsi2_info() {
    ai_output(other, self, "GUR_1201_CorKalom_JoinPSI_15_10"); //Çíà÷èò, òàê? Íè òåáå 'äîáðî ïîæàëîâàòü', íè äîáðûõ ïîæåëàíèé - íè÷åãî?!
    ai_output(self, other, "GUR_1201_CorKalom_JoinPSI_10_11"); //Äîáðî ïîæàëîâàòü.
    ai_output(other, self, "GUR_1201_CorKalom_JoinPSI_15_12"); //Óæå ëó÷øå.
    ai_output(self, other, "GUR_1201_CorKalom_JoinPSI_10_13"); //Ïåðåñòàíü øëÿòüñÿ áåç äåëà! Çàéìèñü ÷åì-íèáóäü. Âîò, âîçüìè ýòîò áîëîòíèê è îòíåñè åãî â Ñòàðûé Ëàãåðü, Ãîìåçó.
    ai_output(self, other, "GUR_1201_CorKalom_JoinPSI_10_14"); //Åñëè åãî ãîëîâîðåçû îòêàæóòñÿ ïðîïóñòèòü òåáÿ, ñêàæè èì, ÷òî òåáÿ ïîñëàë Êîð Ãàëîì.
    createinvitems(self, itmijoint_3, 30);
    b_giveinvitems(self, hero, itmijoint_3 /*4515*/, 30);
    kalom_krautbote = log_running;
    log_createtopic(ch1_krautbote, log_mission);
    log_settopicstatus(ch1_krautbote, log_running);
    b_logentry(ch1_krautbote, ch1_krautbote_3);
    ai_output(self, other, "GUR_1201_CorKalom_JoinPSI_10_15"); //Êàê, òû åùå çäåñü?
    ai_stopprocessinfos(self);
};

instance info_kalom_drugmonopol(c_info) {
    npc = gur_1201_corkalom /*7453*/;
    nr = 0;
    condition = info_kalom_drugmonopol_condition;
    information = info_kalom_drugmonopol_info;
    description = "Ó òåáÿ åñòü äëÿ ìåíÿ äðóãîå çàäàíèå?";
};

func int info_kalom_drugmonopol_condition() {
    if (npc_gettrueguild(other) == gil_nov) {
        return 1;
    };
};

func void info_kalom_drugmonopol_info() {
    var c_npc renyu;
    var c_npc killian;

    ai_output(other, self, "Mis_1_Psi_Kalom_DrugMonopol_15_00"); //Ó òåáÿ åñòü äëÿ ìåíÿ äðóãîå çàäàíèå?
    ai_output(self, other, "Mis_1_Psi_Kalom_DrugMonopol_10_01"); //Íåñêîëüêî óìíèêîâ â Íîâîì Ëàãåðå íà÷àëè ñàìè äîáûâàòü áîëîòíèê.
    ai_output(self, other, "Mis_1_Psi_Kalom_DrugMonopol_10_03"); //Ïðîñëåäè çà òåì, ÷òîáû îíè ïðåêðàòèëè ïðîèçâîäñòâî.
    ai_output(other, self, "Mis_1_Psi_Kalom_DrugMonopol_15_04"); //Êàê...
    ai_output(self, other, "Mis_1_Psi_Kalom_DrugMonopol_10_05"); //Äåòàëè ìåíÿ íå èíòåðåñóþò!
    ai_output(self, other, "Mis_1_Psi_Kalom_DrugMonopol_10_06"); //Èõ Ëàãåðü äîëæåí íàõîäèòüñÿ ãäå-òî çà ïðåäåëàìè Íîâîãî Ëàãåðÿ. Òû çíàåøü, ÷òî äåëàòü.
    kalom_drugmonopol = log_running;
    log_createtopic(ch1_drugmonopol, log_mission);
    log_settopicstatus(ch1_drugmonopol, log_running);
    b_logentry(ch1_drugmonopol, ch1_drugmonopol_1);
    renyu = hlp_getnpc(org_860_renyu);
    renyu.aivar[19] = false;
    killian = hlp_getnpc(org_861_killian);
    killian.aivar[19] = false;
};

instance info_kalom_success(c_info) {
    npc = gur_1201_corkalom /*7453*/;
    nr = 0;
    condition = info_kalom_success_condition;
    information = info_kalom_success_info;
    permanent = true;
    description = "Ïî ïîâîäó áîëîòíèêà â Íîâîì Ëàãåðå...";
};

func int info_kalom_success_condition() {
    if (kalom_drugmonopol == log_running) {
        return 1;
    };
};

func void info_kalom_success_info() {
    var c_npc killian;
    var c_npc renyu;
    var c_npc jacko;

    killian = hlp_getnpc(org_861_killian);
    renyu = hlp_getnpc(org_860_renyu);
    jacko = hlp_getnpc(org_862_jacko);
    ai_output(other, self, "Mis_1_Psi_Kalom_Success_15_00"); //Ïî ïîâîäó áîëîòíèêà â Íîâîì Ëàãåðå...
    ai_output(self, other, "Mis_1_Psi_Kalom_Success_10_01"); //Äà?
    if ((stooges_fled == true) || ((npc_isdead(jacko) && npc_isdead(renyu)) && npc_isdead(killian))) {
        ai_output(other, self, "Mis_1_Psi_Kalom_Success_15_04"); //Âîïðîñ ðåøåí.
        ai_output(self, other, "Mis_1_Psi_Kalom_Success_10_05"); //Òû óäèâëÿåøü ìåíÿ. ß íåäîîöåíèâàë òâîè ñïîñîáíîñòè. Ïîõîæå, òû ìîæåøü áûòü ïîëåçíûì.
        kalom_drugmonopol = log_success;
        b_logentry(ch1_drugmonopol, ch1_drugmonopol_2);
        log_settopicstatus(ch1_drugmonopol, log_success);
        b_givexp(xp_drugmonopol);
    }
    else {
        ai_output(other, self, "Mis_1_Psi_Kalom_Success_15_02"); //ß íå íàøåë ýòèõ ëþäåé.
        ai_output(self, other, "Mis_1_Psi_Kalom_Success_10_03"); //Íè÷åãî äðóãîãî ÿ îò òåáÿ è íå îæèäàë.
    };
};

instance info_kalom_krautboteback(c_info) {
    npc = gur_1201_corkalom /*7453*/;
    nr = 1;
    condition = info_kalom_krautboteback_condition;
    information = info_kalom_krautboteback_info;
    permanent = true;
    description = "ß äîñòàâèë áîëîòíèê.";
};

func int info_kalom_krautboteback_condition() {
    if (kalom_deliveredweed && (kalom_krautbote == log_running)) {
        return true;
    };
};

func void info_kalom_krautboteback_info() {
    ai_output(other, self, "Mis_1_Psi_Kalom_KrautboteBACK_15_00"); //ß äîñòàâèë áîëîòíèê.
    if (npc_hasitems(hero, itminugget) >= 500) {
        ai_output(self, other, "Mis_1_Psi_Kalom_KrautboteBACK_10_01"); //Õîðîøî. Íàéäè ñåáå äðóãîå çàäàíèå.
        kalom_krautbote = log_success;
        b_logentry(ch1_krautbote, ch1_krautbote_4);
        log_settopicstatus(ch1_krautbote, log_success);
        b_giveinvitems(hero, self, itminugget /*4517*/, 500);
        b_givexp(xp_weedshipmentreported);
    }
    else {
        ai_output(self, other, "Mis_1_Psi_Kalom_KrautboteBACK_10_02"); //Ãäå ïÿòü ñîòåí êóñêîâ ðóäû, ìàëü÷èê? Ïîñòàðàéñÿ, ÷òîáû ÿ ïîëó÷èë èõ êàê ìîæíî áûñòðåå!
    };
};

instance info_corkalom_bringfocus(c_info) {
    npc = gur_1201_corkalom /*7453*/;
    nr = 0;
    condition = info_corkalom_bringfocus_condition;
    information = info_corkalom_bringfocus_info;
    description = "Ìåíÿ ïðèñëàë Þ`Áåðèîí. ß ïðèíåñ þíèòîð.";
};

func int info_corkalom_bringfocus_condition() {
    if ((yberion_bringfocus == log_success) && npc_hasitems(hero, focus_1)) {
        return 1;
    };
};

func void info_corkalom_bringfocus_info() {
    ai_output(other, self, "Sit_2_PSI_Yberion_BringFocus_Info3_15_01"); //Ìåíÿ ïðèñëàë Þ`Áåðèîí. ß ïðèíåñ þíèòîð.
    ai_output(self, other, "Sit_2_PSI_Yberion_BringFocus_Info3_10_02"); //À-ààà, þíèòîð... Íàêîíåö-òî. Òåïåðü ÿ ñìîãó ïîñòè÷ü ìàãè÷åñêóþ ñóùíîñòü ýòèõ àðòåôàêòîâ.
    ai_output(self, other, "Sit_2_PSI_Yberion_BringFocus_Info3_10_03"); //Åñëè áû òîëüêî ó ìåíÿ áûëî äîñòàòî÷íî ñëþíû ïîëçóíîâ... ÷åðò!
    b_logentry(ch2_focus, ch2_focus_4);
    log_settopicstatus(ch2_focus, log_success);
    b_giveinvitems(hero, self, focus_1 /*4682*/, 1);
    npc_removeinvitem(self, focus_1 /*4682*/);
    b_givexp(xp_bringfocustocorkalom);
};

instance info_corkalom_bluff(c_info) {
    npc = gur_1201_corkalom /*7453*/;
    nr = 10;
    condition = info_corkalom_bluff_condition;
    information = info_corkalom_bluff_info;
    description = "Þ`Áåðèîí ñêàçàë, ÷òî òû çàïëàòèøü ìíå çà þíèòîð.";
};

func int info_corkalom_bluff_condition() {
    if (npc_knowsinfo(hero, info_corkalom_bringfocus /*9531*/) && (corkalom_bringmcqballs != log_success)) {
        return 1;
    };
};

func void info_corkalom_bluff_info() {
    ai_output(other, self, "Sit_2_PSI_Yberion_BLUFF_Info3_15_01"); //Þ`Áåðèîí ñêàçàë, ÷òî òû çàïëàòèøü ìíå çà þíèòîð.
    ai_output(self, other, "Sit_2_PSI_Yberion_BLUFF_Info3_10_02"); //Â ñàìîì äåëå? Îí òàê ñêàçàë? Íó, õîðîøî. Äóìàþ, ïÿòèäåñÿòè êóñêîâ ðóäû áóäåò âïîëíå äîñòàòî÷íî!
    createinvitems(self, itminugget, 50);
    b_giveinvitems(self, other, itminugget /*4517*/, 50);
};

instance gur_1201_corkalom_sache(c_info) {
    npc = gur_1201_corkalom /*7453*/;
    nr = 0;
    condition = gur_1201_corkalom_sache_condition;
    information = gur_1201_corkalom_sache_info;
    description = "Ñëþíû?";
};

func int gur_1201_corkalom_sache_condition() {
    if (npc_knowsinfo(hero, info_corkalom_bringfocus /*9531*/)) {
        return 1;
    };
};

func void gur_1201_corkalom_sache_info() {
    ai_output(other, self, "GUR_1201_CorKalom_SACHE_Info_15_01"); //Ñëþíû?
    ai_output(self, other, "GUR_1201_CorKalom_SACHE_Info_10_02"); //Äà. Òû äîëæåí çíàòü, ÷òî ÿ ãîòîâëþ ìàãè÷åñêèå ýëèêñèðû äëÿ âûçîâà Ñïÿùåãî. Äëÿ ýòîãî ìíå íóæíà ñëþíà, êîòîðàÿ âûäåëÿåòñÿ èç æâàë ïîëçóíîâ.
    ai_output(self, other, "GUR_1201_CorKalom_SACHE_Info_10_03"); //Òû çíàåøü, êòî òàêèå ïîëçóíû, âåäü òàê?
    info_clearchoices(gur_1201_corkalom_sache /*9537*/);
    info_addchoice(gur_1201_corkalom_sache /*9537*/, "Íåò.", gur_1201_corkalom_sache_nein);
    info_addchoice(gur_1201_corkalom_sache /*9537*/, "Äà.", gur_1201_corkalom_sache_ja);
};

func void gur_1201_corkalom_sache_nein() {
    ai_output(other, self, "GUR_1201_CorKalom_SACHE_NEIN_15_01"); //Íåò.
    ai_output(self, other, "GUR_1201_CorKalom_SACHE_NEIN_10_02"); //Ýòè æóòêèå òâàðè îáèòàþò âî òüìå ïåùåð è ïîæèðàþò ÷åëîâå÷åñêóþ ïëîòü.
    ai_output(self, other, "GUR_1201_CorKalom_SACHE_NEIN_10_03"); //Èõ æâàëû âûäåëÿþò îñîáóþ æèäêîñòü.
    ai_output(self, other, "GUR_1201_CorKalom_SACHE_NEIN_10_04"); //ß èñïîëüçóþ åå äëÿ ïðèãîòîâëåíèÿ ýëèêñèðà, êîòîðûé îòêðûâàåò ñïèðèòè÷åñêóþ ñâÿçü ñî Ñïÿùèì.
    info_clearchoices(gur_1201_corkalom_sache /*9537*/);
};

func void gur_1201_corkalom_sache_ja() {
    ai_output(other, self, "GUR_1201_CorKalom_SACHE_JA_15_01"); //Äà.
    ai_output(self, other, "GUR_1201_CorKalom_SACHE_JA_10_02"); //Î÷åíü õîðîøî!
    info_clearchoices(gur_1201_corkalom_sache /*9537*/);
};

instance gur_1201_corkalom_vision(c_info) {
    npc = gur_1201_corkalom /*7453*/;
    nr = 0;
    condition = gur_1201_corkalom_vision_condition;
    information = gur_1201_corkalom_vision_info;
    description = "Ïðîäîëæàé!";
};

func int gur_1201_corkalom_vision_condition() {
    if (npc_knowsinfo(hero, gur_1201_corkalom_sache /*9537*/)) {
        return 1;
    };
};

func void gur_1201_corkalom_vision_info() {
    ai_output(other, self, "GUR_1201_CorKalom_VISION_Info_15_01"); //Ïðîäîëæàé!
    ai_output(self, other, "GUR_1201_CorKalom_VISION_Info_10_02"); //Ñîâñåì íåäàâíî ìåíÿ ïîñåòèëî âèäåíèå. Ñàì Ñïÿùèé ïîäàë ìíå çíàê.
    ai_output(self, other, "GUR_1201_CorKalom_VISION_Info_10_03"); //È ÿ ïîíÿë, ÷òî ïîìèìî ñëþíû ïîëçóíîâ åñòü è äðóãèå ñðåäñòâà.
    ai_output(self, other, "GUR_1201_CorKalom_VISION_Info_10_04"); //È îí èçáðàë ìåíÿ äëÿ ýòîé ìèññèè. Òû ïîëó÷àåøü åå íå îò ìåíÿ. Òû ïîëó÷àåøü çàäàíèå îò ñàìîãî Ñïÿùåãî!
    ai_output(other, self, "GUR_1201_CorKalom_VISION_Info_15_05"); //Íåâåðîÿòíî!
    ai_output(self, other, "GUR_1201_CorKalom_VISION_Info_10_06"); //Ìîë÷è, ãëóïåö!
    ai_output(self, other, "GUR_1201_CorKalom_VISION_Info_10_07"); //È ïîíÿë ÿ, ÷òî íàõîæóñü íà ïðàâèëüíîì ïóòè, íî ìîè ñðåäñòâà íåäîñòàòî÷íî ñèëüíû.
    ai_output(self, other, "GUR_1201_CorKalom_VISION_Info_10_08"); //Îòâåò êðîåòñÿ â ïîëçóíàõ, íî æâàë èõ ÿâíî íåäîñòàòî÷íî.
    ai_output(self, other, "GUR_1201_CorKalom_VISION_Info_10_09"); //Äîëæíî áûòü ÷òî-òî åùå.
};

instance gur_1201_corkalom_nest(c_info) {
    npc = gur_1201_corkalom /*7453*/;
    nr = 0;
    condition = gur_1201_corkalom_nest_condition;
    information = gur_1201_corkalom_nest_info;
    description = "Òû ÷òî, íèêîãäà íå èçó÷àë ïîëçóíîâ?";
};

func int gur_1201_corkalom_nest_condition() {
    if (npc_knowsinfo(hero, gur_1201_corkalom_vision /*9542*/)) {
        return 1;
    };
};

func void gur_1201_corkalom_nest_info() {
    ai_output(other, self, "GUR_1201_CorKalom_NEST_Info_15_01"); //Òû ÷òî, íèêîãäà íå èçó÷àë ïîëçóíîâ? ß èìåþ â âèäó - âîçìîæíî, â êàêîé-òî äðóãîé ÷àñòè èõ òåëà ñîäåðæèòñÿ áîëüøå ýòîãî âåùåñòâà.
    ai_output(self, other, "GUR_1201_CorKalom_NEST_Info_10_02"); //Ðàçóìååòñÿ, ÿ ïðåïàðèðîâàë ïîëçóíîâ, íî ïîõîæå ëèøü â èõ æâàëàõ ñîäåðæàòñÿ íåîáõîäèìûå íàì âûäåëåíèÿ.
    ai_output(self, other, "GUR_1201_CorKalom_NEST_Info_10_03"); //Íî äîëæíî áûòü ÷òî-òî åùå... Íàéäè èõ ëîãîâî è ìû ïîëó÷èì îòâåò!
    corkalom_bringmcqballs = log_running;
};

func void gur_1201_corkalom_weg_accept() {
    log_createtopic(ch2_mceggs, log_mission);
    log_settopicstatus(ch2_mceggs, log_running);
    b_logentry(ch2_mceggs, ch2_mceggs_4);
    if (pressetourjanuar2001) {
        createinvitems(hero, itat_crawlerqueen, 3);
    };
};

instance gur_1201_corkalom_weg(c_info) {
    npc = gur_1201_corkalom /*7453*/;
    nr = 21;
    condition = gur_1201_corkalom_weg_condition;
    information = gur_1201_corkalom_weg_info;
    description = "Ïîèñêè âî òüìå - äåëî íåëåãêîå è îïàñíîå!";
};

func int gur_1201_corkalom_weg_condition() {
    if (npc_knowsinfo(hero, gur_1201_corkalom_nest /*9545*/) && (!npc_knowsinfo(hero, gur_1201_corkalom_rat /*9552*/))) {
        return 1;
    };
};

func void gur_1201_corkalom_weg_info() {
    ai_output(other, self, "GUR_1201_CorKalom_WEG_Info_15_01"); //Ïîèñêè âî òüìå - äåëî íåëåãêîå è îïàñíîå!
    ai_output(self, other, "GUR_1201_CorKalom_WEG_Info_10_02"); //Âîçüìè ýòè ñâèòêè ñ Çàêëèíàíèåì Ñâåòà è èñïîëüçóé èõ âî òüìå ïåùåð.
    ai_output(self, other, "GUR_1201_CorKalom_WEG_Info_10_03"); //Ñòðàæè â øàõòàõ ïîìîãóò òåáå.
    ai_output(self, other, "GUR_1201_CorKalom_WEG_Info_10_04"); //Äà ïðèäàñò òåáå ñèë Ñïÿùèé, è äà ïðîëüåòñÿ ñâåò åãî íà òâîé ïóòü, è ïðîñâåòèò îí äóõ òâîé è óêðåïèò âåðó òâîþ!
    createinvitems(self, itarscrolllight, 5);
    b_giveinvitems(self, other, itarscrolllight /*4159*/, 5);
    gur_1201_corkalom_weg_accept();
};

instance gur_1201_corkalom_rat(c_info) {
    npc = gur_1201_corkalom /*7453*/;
    nr = 20;
    condition = gur_1201_corkalom_rat_condition;
    information = gur_1201_corkalom_rat_info;
    description = "Áîé îáåùàåò áûòü òðóäíûì...";
};

func int gur_1201_corkalom_rat_condition() {
    if (npc_knowsinfo(hero, gur_1201_corkalom_nest /*9545*/) && (!npc_knowsinfo(hero, gur_1201_corkalom_weg /*9549*/))) {
        return 1;
    };
};

func void gur_1201_corkalom_rat_info() {
    ai_output(other, self, "GUR_1201_CorKalom_RAT_Info_15_01"); //Áîé îáåùàåò áûòü òðóäíûì...
    ai_output(self, other, "GUR_1201_CorKalom_RAT_Info_10_02"); //Âîçüìè ýòè öåëåáíûå ýëèêñèðû.
    ai_output(self, other, "GUR_1201_CorKalom_RAT_Info_10_03"); //ß äàþ èõ òåáå íå ïîòîìó, ÷òî õî÷ó, ÷òîáû òû óöåëåë, íî ïîòîìó, ÷òî ìèññèÿ, âîçëîæåííàÿ íà òåáÿ, äîëæíà áûòü âûïîëíåíà.
    createinvitems(self, itfo_potion_health_02, 5);
    b_giveinvitems(self, other, itfo_potion_health_02 /*4829*/, 5);
    gur_1201_corkalom_weg_accept();
};

instance gur_1201_corkalom_run(c_info) {
    npc = gur_1201_corkalom /*7453*/;
    nr = 0;
    condition = gur_1201_corkalom_run_condition;
    information = gur_1201_corkalom_run_info;
    description = "Ãäå ìíå èñêàòü ïîëçóíîâ?";
};

func int gur_1201_corkalom_run_condition() {
    if ((corkalom_bringmcqballs == log_running) && (npc_hasitems(hero, itat_crawlerqueen) < 1)) {
        return 1;
    };
};

func void gur_1201_corkalom_run_info() {
    ai_output(other, self, "GUR_1201_CorKalom_RUN_Info_15_01"); //Ãäå ìíå èñêàòü ïîëçóíîâ?
    ai_output(self, other, "GUR_1201_CorKalom_RUN_Info_10_02"); //Â Ñòàðîé Øàõòå.
    if (!enteredoldmine) {
        ai_output(other, self, "GUR_1201_CorKalom_RUN_Info_15_03"); //Ãäå íàõîäèòñÿ Ñòàðàÿ Øàõòà?
        ai_output(self, other, "GUR_1201_CorKalom_RUN_Info_10_04"); //Âîçüìè ýòó êàðòó. Íà íåé îòìå÷åíû âñå âàæíûå ìåñòà, êîòîðûå íàõîäÿòñÿ âíóòðè Áàðüåðà.
        createinvitem(self, itwrworldmap);
        b_giveinvitems(self, other, itwrworldmap /*4600*/, 1);
    };
};

instance gur_1201_corkalom_crawler(c_info) {
    npc = gur_1201_corkalom /*7453*/;
    nr = 0;
    condition = gur_1201_corkalom_crawler_condition;
    information = gur_1201_corkalom_crawler_info;
    description = "Êàê ïîáåäèòü ïîëçóíîâ?";
};

func int gur_1201_corkalom_crawler_condition() {
    if (npc_knowsinfo(hero, gur_1201_corkalom_run /*9555*/) && (corkalom_bringmcqballs != log_success)) {
        return 1;
    };
};

func void gur_1201_corkalom_crawler_info() {
    ai_output(other, self, "GUR_1201_CorKalom_CRAWLER_Info_15_01"); //Êàê ïîáåäèòü ïîëçóíîâ?
    ai_output(self, other, "GUR_1201_CorKalom_CRAWLER_Info_10_02"); //Â øàõòå òû âñòðåòèøü Ñòðàæåé. Îíè îõîòÿòñÿ íà ïîçóíîâ è äîáûâàþò äëÿ ìåíÿ èõ æâàëû. Ïîãîâîðè ñ Ãîð Íà Âèòîì - îí ïîìîæåò òåáå.
};

instance gur_1201_corkalom_find(c_info) {
    npc = gur_1201_corkalom /*7453*/;
    nr = 0;
    condition = gur_1201_corkalom_find_condition;
    information = gur_1201_corkalom_find_info;
    description = "Êàê îòûñêàòü ëîãîâî ïîëçóíîâ â øàõòå?";
};

func int gur_1201_corkalom_find_condition() {
    if (npc_knowsinfo(hero, gur_1201_corkalom_crawler /*9558*/)) {
        return 1;
    };
};

func void gur_1201_corkalom_find_info() {
    ai_output(other, self, "GUR_1201_CorKalom_FIND_Info_15_01"); //Êàê îòûñêàòü ëîãîâî ïîëçóíîâ â øàõòå?
    ai_output(self, other, "GUR_1201_CorKalom_FIND_Info_10_02"); //Ýòî áóäåò ñàìîé ñëîæíîé ÷àñòüþ òâîåé ìèññèè. ß íå ìîãó ñêàçàòü òåáå, ãäå è ÷òî òû äîëæåí èñêàòü. Íî ðÿäîì ñ òîáîé áóäåò íåçðèìî ïðèñóòñòâîâàòü Ñïÿùèé.
    ai_output(other, self, "GUR_1201_CorKalom_FIND_Info_15_03"); //Äà, ìíå ñðàçó ñòàëî ëåã÷å.
};

instance info_corkalom_bringmcqballs_success(c_info) {
    npc = gur_1201_corkalom /*7453*/;
    nr = 0;
    condition = info_corkalom_bringmcqballs_success_condition;
    information = info_corkalom_bringmcqballs_success_info;
    description = "ß íàøåë ÿéöà èç êëàäêè êîðîëåâû ïîëçóíîâ.";
};

func int info_corkalom_bringmcqballs_success_condition() {
    if (npc_hasitems(hero, itat_crawlerqueen) >= 3) {
        return 1;
    };
};

func void info_corkalom_bringmcqballs_success_info() {
    ai_output(other, self, "Mis_2_PSI_Kalom_BringMCQEggs_Success_15_01"); //ß íàøåë ÿéöà èç êëàäêè êîðîëåâû ïîëçóíîâ.
    ai_output(self, other, "Mis_2_PSI_Kalom_BringMCQEggs_Success_10_02"); //ß çíàë ýòî! Ìîå âèäåíèå áûëî çíàêîì Ñïÿùåãî! Â íèõ êîíöåíòðàöèÿ ýòîãî âåùåñòâà äîëæíà áûòü î÷åíü âûñîêîé!
    ai_output(self, other, "Mis_2_PSI_Kalom_BringMCQEggs_Success_10_03"); //Âåëèêîëåïíî! Òåïåðü ÿ ñìîãó ñîçäàòü ýëèêñèð, êîòîðûé ïîìîæåò íàì ïðèçâàòü Ñïÿùåãî!
    ai_output(other, self, "Mis_2_PSI_Kalom_BringMCQEggs_Success_15_04"); //À ÷òî íàñ÷åò íàãðàäû?
    ai_output(self, other, "Mis_2_PSI_Kalom_BringMCQEggs_Success_10_05"); //Àõ, äà... Áëàãîäàðþ òåáÿ!
    ai_output(other, self, "Mis_2_PSI_Kalom_BringMCQEggs_Success_15_06"); //ß èìåë â âèäó íå÷òî áîëåå ìàòåðèàëüíîå...
    ai_output(self, other, "Mis_2_PSI_Kalom_BringMCQEggs_Success_10_07"); //Õîðîøî, õîðîøî. ×åãî òû õî÷åøü?
    corkalom_bringmcqballs = log_success;
    b_giveinvitems(hero, self, itat_crawlerqueen /*4684*/, 3);
    npc_removeinvitems(self, itat_crawlerqueen, 3);
    b_givexp(xp_bringmceggs);
    b_logentry(ch2_mceggs, ch2_mceggs_5);
    log_settopicstatus(ch2_mceggs, log_success);
    if (mordrag_gotokalom == log_running) {
        b_logentry(ch1_gotopsicamp, ch1_gotopsicamp_1);
    }
    else {
        if (raven_spysect == log_running) {
            b_logentry(ch1_gotopsi, ch1_gotopsi_1);
        };
    };
    info_clearchoices(info_corkalom_bringmcqballs_success /*9564*/);
    info_addchoice(info_corkalom_bringmcqballs_success /*9564*/, "Ðóíà.", info_corkalom_bringmcqballs_success_rune);
    info_addchoice(info_corkalom_bringmcqballs_success /*9564*/, "Îðóæèå.", info_corkalom_bringmcqballs_success_waffe);
    info_addchoice(info_corkalom_bringmcqballs_success /*9564*/, "Öåëåáíûé ýëèêñèð.", info_corkalom_bringmcqballs_success_heal);
    info_addchoice(info_corkalom_bringmcqballs_success /*9564*/, "Ðóäà.", info_corkalom_bringmcqballs_success_ore);
    info_addchoice(info_corkalom_bringmcqballs_success /*9564*/, "Ìàíà.", info_corkalom_bringmcqballs_success_mana);
};

func void info_corkalom_bringmcqballs_success_rune() {
    ai_output(other, self, "Mis_2_PSI_Kalom_BringMCQEggs_Success_RUNE_15_01"); //Ðóíó.
    ai_output(self, other, "Mis_2_PSI_Kalom_BringMCQEggs_Success_RUNE_10_02"); //Ïóñòü ðóíà ýòà îñâåòèò òâîé ïóòü!
    createinvitem(self, itarrunelight);
    b_giveinvitems(self, hero, itarrunelight /*4158*/, 1);
    info_clearchoices(info_corkalom_bringmcqballs_success /*9564*/);
};

func void info_corkalom_bringmcqballs_success_waffe() {
    ai_output(other, self, "Mis_2_PSI_Kalom_BringMCQEggs_Success_WAFFE_15_01"); //Îðóæèå.
    ai_output(self, other, "Mis_2_PSI_Kalom_BringMCQEggs_Success_WAFFE_10_02"); //Ïóñòü ýòî îðóæèå ñîêðóøèò âñåõ òâîèõ âðàãîâ!
    createinvitem(self, itmw_1h_mace_war_03);
    b_giveinvitems(self, hero, itmw_1h_mace_war_03 /*4408*/, 1);
    info_clearchoices(info_corkalom_bringmcqballs_success /*9564*/);
};

func void info_corkalom_bringmcqballs_success_heal() {
    ai_output(other, self, "Mis_2_PSI_Kalom_BringMCQEggs_Success_HEAL_15_01"); //Öåëåáíûé ýëèêñèð.
    ai_output(self, other, "Mis_2_PSI_Kalom_BringMCQEggs_Success_HEAL_10_02"); //Äà ïðîäëèò îí òâîþ æèçíü â ìèíóòó îïàñíîñòè!
    createinvitem(self, itfo_potion_health_perma_01);
    b_giveinvitems(self, hero, itfo_potion_health_perma_01 /*4853*/, 1);
    info_clearchoices(info_corkalom_bringmcqballs_success /*9564*/);
};

func void info_corkalom_bringmcqballs_success_ore() {
    ai_output(other, self, "Mis_2_PSI_Kalom_BringMCQEggs_Success_ORE_15_01"); //Ðóäó.
    ai_output(self, other, "Mis_2_PSI_Kalom_BringMCQEggs_Success_ORE_10_02"); //Ïðèìè ýòó ðóäó â çíàê ïðèçíàòåëüíîñòè âñåãî Áðàòñòâà!
    createinvitems(self, itminugget, 100);
    b_giveinvitems(self, hero, itminugget /*4517*/, 100);
    info_clearchoices(info_corkalom_bringmcqballs_success /*9564*/);
};

func void info_corkalom_bringmcqballs_success_mana() {
    ai_output(other, self, "Mis_2_PSI_Kalom_BringMCQEggs_Success_MANA_15_01"); //Ìàíó.
    ai_output(self, other, "Mis_2_PSI_Kalom_BringMCQEggs_Success_MANA_10_02"); //Ïóñòü ýòîò ýëèêñèð óñèëèò ìàãè÷åñêèé ïîòîê, ñòðóÿùèéñÿ âíóòðè òåáÿ!
    createinvitem(self, itfo_potion_mana_perma_01);
    b_giveinvitems(self, hero, itfo_potion_mana_perma_01 /*4859*/, 1);
    info_clearchoices(info_corkalom_bringmcqballs_success /*9564*/);
};

instance info_corkalom_bringbook(c_info) {
    npc = gur_1201_corkalom /*7453*/;
    nr = 0;
    condition = info_corkalom_bringbook_condition;
    information = info_corkalom_bringbook_info;
    description = "Ìîæåò, ìû íà÷íåì ïðèçûâàòü Ñïÿùåãî ïðÿìî ñåé÷àñ?";
};

func int info_corkalom_bringbook_condition() {
    if (corkalom_bringmcqballs == log_success) {
        return 1;
    };
};

func void info_corkalom_bringbook_info() {
    ai_output(other, self, "Info_CorKalom_BringBook_Info_15_01"); //Ìîæåò, ìû íà÷íåì ïðèçûâàòü Ñïÿùåãî ïðÿìî ñåé÷àñ?
    ai_output(self, other, "Info_CorKalom_BringBook_Info_10_02"); //Íåò! ß åùå íå íàøåë ñïîñîáà çàðÿäèòü þíèòîð.
    ai_output(self, other, "Info_CorKalom_BringBook_Info_10_03"); //Äðåâíèå çíàíèÿ îá ýòèõ àðòåôàêòàõ óòåðÿíû.
    ai_output(other, self, "Info_CorKalom_BringBook_Info_15_04"); //Òû õî÷åøü ñêàçàòü, ÷òî ÿ ñîáèðàë ýòè ÿéöà âïóñòóþ?
    ai_output(self, other, "Info_CorKalom_BringBook_Info_10_05"); //Íåò, ïîñëóøàé ìåíÿ. Åñòü àëüìàíàõ, â êîòîðîì ñîäåðæàòñÿ âñå íåîáõîäèìûå íàì çíàíèÿ.
    ai_output(self, other, "Info_CorKalom_BringBook_Info_10_06"); //ß êóïèë ýòó êíèãó ó Êîððèñòî, ìàãà Îãíÿ èç Ñòàðîãî Ëàãåðÿ.
    ai_output(self, other, "Info_CorKalom_BringBook_Info_10_07"); //Íî îíà áûëà óêðàäåíà ïî ïóòè èç Ñòàðîãî Ëàãåðÿ â ëàáîðàòîðèþ.
    ai_output(self, other, "Info_CorKalom_BringBook_Info_10_08"); //Çà êíèãîé ÿ îòðÿäèë Òàëàñà, íîâè÷êà. Åãî îãðàáèëè.
    ai_output(self, other, "Info_CorKalom_BringBook_Info_10_09"); //Îí ïîäâåë ìåíÿ, íî ÿ äàë åìó åùå îäèí øàíñ. Îí äîëæåí âåðíóòü óòåðÿííûé àëüìàíàõ.
    ai_output(self, other, "Info_CorKalom_BringBook_Info_10_10"); //Ïîãîâîðè ñ íèì. Åìó ñåé÷àñ íóæíà ëþáàÿ ïîìîùü.
    corkalom_bringbook = log_running;
    log_createtopic(ch2_book, log_mission);
    log_settopicstatus(ch2_book, log_running);
    b_logentry(ch2_book, ch2_book_3);
    info_clearchoices(info_corkalom_bringbook /*9572*/);
    info_addchoice(info_corkalom_bringbook /*9572*/, dialog_back, info_corkalom_bringbook_back);
    info_addchoice(info_corkalom_bringbook /*9572*/, "×òî ÿ ïîëó÷ó çà ýòî?", info_corkalom_bringbook_earn);
    info_addchoice(info_corkalom_bringbook /*9572*/, "Êòî ïîõèòèë àëüìàíàõ?", info_corkalom_bringbook_who);
    info_addchoice(info_corkalom_bringbook /*9572*/, "Ãäå ÿ ìîãó íàéòè Òàëàñà?", info_corkalom_bringbook_where);
};

func void info_corkalom_bringbook_back() {
    info_clearchoices(info_corkalom_bringbook /*9572*/);
};

func void info_corkalom_bringbook_where() {
    ai_output(other, self, "Info_CorKalom_BringBook_Where_15_01"); //Ãäå ÿ ìîãó íàéòè Òàëàñà?
    ai_output(self, other, "Info_CorKalom_BringBook_Where_10_02"); //Òû íàéäåøü åãî ó ïîäíîæèÿ Õîëìà - òàì îí ïûòàåòñÿ óãîâîðèòü ëþäåé ïîìî÷ü åìó.
};

func void info_corkalom_bringbook_who() {
    ai_output(other, self, "Info_CorKalom_BringBook_Who_15_01"); //Êòî ïîõèòèë àëüìàíàõ?
    ai_output(self, other, "Info_CorKalom_BringBook_Who_10_02"); //Òàëàñ ñêàçàë, ÷òî íà íåãî íàïàëè ÷åðíûå ãîáëèíû. Ýòî íåñêîëüêî ñòðàííî, íî âñå æå âïîëíå ïðàâäîïîäîáíî.
};

func void info_corkalom_bringbook_earn() {
    ai_output(other, self, "Info_CorKalom_BringBook_Earn_15_01"); //×òî ÿ ïîëó÷ó çà ýòî?
    ai_output(self, other, "Info_CorKalom_BringBook_Earn_10_02"); //Ðàçâå ÿ óæå íå äîêàçàë òåáå ñâîþ ùåäðîñòü? Òû ïîëó÷èøü äîñòîéíóþ íàãðàäó.
};

instance info_corkalom_bringbook_success(c_info) {
    npc = gur_1201_corkalom /*7453*/;
    nr = 0;
    condition = info_corkalom_bringbook_success_condition;
    information = info_corkalom_bringbook_success_info;
    description = "ß íàøåë êíèãó.";
};

func int info_corkalom_bringbook_success_condition() {
    if (npc_hasitems(hero, itwrfokusbuch) && (corkalom_bringbook == log_running)) {
        return 1;
    };
};

func void info_corkalom_bringbook_success_info() {
    ai_output(other, self, "Info_CorKalom_BringBook_Success_15_01"); //ß íàøåë êíèãó.
    ai_output(self, other, "Info_CorKalom_BringBook_Success_10_02"); //Îòëè÷íàÿ ðàáîòà! Òåïåðü ó íàñ åñòü âñå, ÷òî íóæíî.
    ai_output(self, other, "Info_CorKalom_BringBook_Success_10_03"); //Ñåé÷àñ ÿ çàâåðøó ïîñëåäíèå ïðèãîòîâëåíèÿ.
    ai_output(other, self, "Info_CorKalom_BringBook_Success_15_04"); //Ãäå ñîñòîèòñÿ öåðåìîíèÿ?
    ai_output(self, other, "Info_CorKalom_BringBook_Success_10_05"); //Äîæäèñü íî÷è è ïðèõîäè âî äâîð õðàìà. Ìû ñîáåðåìñÿ òàì, äëÿ òîãî ÷òîáû ïðèçâàòü âåëèêîãî Ñïÿùåãî.
    b_giveinvitems(hero, self, itwrfokusbuch /*4685*/, 1);
    npc_removeinvitem(self, itwrfokusbuch /*4685*/);
    b_givexp(xp_bringbook);
    corkalom_bringbook = log_success;
    b_logentry(ch2_book, ch2_book_6);
    log_settopicstatus(ch2_book, log_success);
    ai_stopprocessinfos(self);
    b_story_prepareritual();
};

instance info_corkalom_belohnung(c_info) {
    npc = gur_1201_corkalom /*7453*/;
    nr = 1;
    condition = info_corkalom_belohnung_condition;
    information = info_corkalom_belohnung_info;
    description = "Êàê íàñ÷åò îïëàòû?";
};

func int info_corkalom_belohnung_condition() {
    if (npc_knowsinfo(hero, info_corkalom_bringbook_success /*9579*/)) {
        return 1;
    };
};

func void info_corkalom_belohnung_info() {
    ai_output(other, self, "Info_CorKalom_Belohnung_15_00"); //Êàê íàñ÷åò îïëàòû?
    ai_output(self, other, "Info_CorKalom_Belohnung_10_01"); //×åãî òû õî÷åøü?
    info_clearchoices(info_corkalom_belohnung /*9582*/);
    info_addchoice(info_corkalom_belohnung /*9582*/, "Ìàãè÷åñêèé ñâèòîê.", info_corkalom_belohnung_scroll);
    info_addchoice(info_corkalom_belohnung /*9582*/, "Ðóäà.", info_corkalom_belohnung_ore);
    info_addchoice(info_corkalom_belohnung /*9582*/, "Ìàãè÷åñêèé ýëèêñèð.", info_corkalom_belohnung_mana);
};

func void info_corkalom_belohnung_scroll() {
    ai_output(other, self, "Info_CorKalom_Belohnung_SCROLL_15_00"); //Îòäàé ìíå ýòè ñâèòêè ñ çàêëèíàíèÿìè.
    ai_output(self, other, "Info_CorKalom_Belohnung_SCROLL_10_01"); //Èñïîëüçóé ýòè çàêëèíàíèÿ ìóäðî.
    createinvitems(self, itarscrollsleep, 3);
    b_giveinvitems(self, hero, itarscrollsleep /*4215*/, 3);
    info_clearchoices(info_corkalom_belohnung /*9582*/);
};

func void info_corkalom_belohnung_ore() {
    ai_output(other, self, "Info_CorKalom_Belohnung_ORE_15_00"); //Ìíå áû ïðèãîäèëàñü ðóäà.
    ai_output(self, other, "Info_CorKalom_Belohnung_ORE_10_01"); //Ýòî óäîâëåòâîðèò òâîþ ñòðàñòü ê áîãàñòâó.
    createinvitems(self, itminugget, 300);
    b_giveinvitems(self, hero, itminugget /*4517*/, 300);
    info_clearchoices(info_corkalom_belohnung /*9582*/);
};

func void info_corkalom_belohnung_mana() {
    ai_output(other, self, "Info_CorKalom_Belohnung_MANA_15_00"); //Ìíå íóæíû ìàãè÷åñêèå ýëèêñèðû.
    ai_output(self, other, "Info_CorKalom_Belohnung_MANA_10_01"); //Äà ïðèäàäóò îíè òåáå ñèëû!
    createinvitems(self, itfo_potion_mana_02, 5);
    b_giveinvitems(self, hero, itfo_potion_mana_02 /*4821*/, 5);
    info_clearchoices(info_corkalom_belohnung /*9582*/);
};

instance gur_1201_corkalom_exit(c_info) {
    npc = gur_1201_corkalom /*7453*/;
    nr = 999;
    condition = gur_1201_corkalom_exit_condition;
    information = gur_1201_corkalom_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int gur_1201_corkalom_exit_condition() {
    return 1;
};

func void gur_1201_corkalom_exit_info() {
    ai_output(other, self, "GUR_1201_CorKalom_Exit_15_01"); //Äî âñòðå÷è!
    ai_output(self, other, "GUR_1201_CorKalom_Exit_10_02"); //Äà ïðîñâåòèò òåáÿ Ñïÿùèé!
    ai_stopprocessinfos(self);
};

instance dia_gur_1202_corangar_exit(c_info) {
    npc = gur_1202_corangar /*7457*/;
    nr = 999;
    condition = dia_gur_1202_corangar_exit_condition;
    information = dia_gur_1202_corangar_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_gur_1202_corangar_exit_condition() {
    return true;
};

func void dia_gur_1202_corangar_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_corangar_latertrainer(c_info) {
    npc = gur_1202_corangar /*7457*/;
    nr = 1;
    condition = dia_corangar_latertrainer_condition;
    information = dia_corangar_latertrainer_info;
    description = "Òû ìîæåøü ÷åìó-íèáóäü íàó÷èòü ìåíÿ?";
};

func int dia_corangar_latertrainer_condition() {
    if (npc_gettrueguild(other) != gil_tpl) {
        return 1;
    };
};

func void dia_corangar_latertrainer_info() {
    ai_output(other, self, "GUR_1202_CorAngar_LaterTrainer_15_00"); //Òû áóäåøü ó÷èòü ìåíÿ?
    ai_output(self, other, "GUR_1202_CorAngar_LaterTrainer_08_01"); //Òû õî÷åøü ñòàòü õîðîøèì âîèíîì è ïîòîìó èùåøü ñåáå íàñòàâíèêà.
    ai_output(self, other, "GUR_1202_CorAngar_LaterTrainer_08_02"); //Ïîõâàëüíî. Íî ÿ íå òîò, êòî òåáå íóæåí.
    ai_output(self, other, "GUR_1202_CorAngar_LaterTrainer_08_03"); //ß çàíèìàþñü ëèøü ñ òåìè, êòî ïðèíàäëåæèò ê Ñâÿùåííîìó Êðóãó Ñòðàæåé.
};

instance dia_corangar_wietempler(c_info) {
    npc = gur_1202_corangar /*7457*/;
    nr = 1;
    condition = dia_corangar_wietempler_condition;
    information = dia_corangar_wietempler_info;
    permanent = true;
    description = "Êàê ñòàòü Ñòðàæåì?";
};

func int dia_corangar_wietempler_condition() {
    if (npc_knowsinfo(hero, dia_corangar_latertrainer /*9594*/) && (npc_gettrueguild(other) != gil_tpl)) {
        return 1;
    };
};

func void dia_corangar_wietempler_info() {
    ai_output(other, self, "GUR_1202_CorAngar_WieTempler_15_00"); //Êàê ñòàòü Ñòðàæåì?
    ai_output(self, other, "GUR_1202_CorAngar_WieTempler_08_01"); //Ïðåæäå âñåãî, òû äîëæåí ñòàòü ïîñëóøíèêîì è äîêàçàòü, ÷òî òû äåéñòâèòåëüíî âåðèøü â Ñïÿùåãî.
    ai_output(self, other, "GUR_1202_CorAngar_WieTempler_08_02"); //Ïîòîì âîçâðàùàéñÿ êî ìíå, è ÿ áóäó ó÷èòü òåáÿ.
    ai_stopprocessinfos(self);
};

instance gur_1202_corangar_teach(c_info) {
    npc = gur_1202_corangar /*7457*/;
    nr = 10;
    condition = gur_1202_corangar_teach_condition;
    information = gur_1202_corangar_teach_info;
    permanent = true;
    description = "Òû ìîæåøü ðàçâèòü ìîþ ñèëó è ëîâêîñòü?";
};

func int gur_1202_corangar_teach_condition() {
    if (c_npcbelongstopsicamp(hero)) {
        return true;
    };
};

func void gur_1202_corangar_teach_info() {
    ai_output(other, self, "GUR_1202_CorAngar_Teach_15_00"); //Òû ìîæåøü ðàçâèòü ìîþ ñèëó è ëîâêîñòü?
    ai_output(self, other, "GUR_1202_CorAngar_Teach_08_01"); //Êàæäûé âîèí íóæäàåòñÿ â ñèëå è ëîâêîñòè.
    info_clearchoices(gur_1202_corangar_teach /*9600*/);
    info_addchoice(gur_1202_corangar_teach /*9600*/, dialog_back, gur_1202_corangar_teach_back);
    info_addchoice(gur_1202_corangar_teach /*9600*/, b_buildlearnstring(name_learnstrength_5, 5 * lpcost_attribute_strength, 0), gur_1202_corangar_teach_str_5);
    info_addchoice(gur_1202_corangar_teach /*9600*/, b_buildlearnstring(name_learnstrength_1, lpcost_attribute_strength, 0), gur_1202_corangar_teach_str_1);
    info_addchoice(gur_1202_corangar_teach /*9600*/, b_buildlearnstring(name_learndexterity_5, 5 * lpcost_attribute_dexterity, 0), gur_1202_corangar_teach_dex_5);
    info_addchoice(gur_1202_corangar_teach /*9600*/, b_buildlearnstring(name_learndexterity_1, lpcost_attribute_dexterity, 0), gur_1202_corangar_teach_dex_1);
};

func void gur_1202_corangar_teach_back() {
    info_clearchoices(gur_1202_corangar_teach /*9600*/);
};

func void gur_1202_corangar_teach_str_1() {
    b_buyattributepoints(other, atr_strength, lpcost_attribute_strength);
    info_clearchoices(gur_1202_corangar_teach /*9600*/);
    info_addchoice(gur_1202_corangar_teach /*9600*/, dialog_back, gur_1202_corangar_teach_back);
    info_addchoice(gur_1202_corangar_teach /*9600*/, b_buildlearnstring(name_learnstrength_5, 5 * lpcost_attribute_strength, 0), gur_1202_corangar_teach_str_5);
    info_addchoice(gur_1202_corangar_teach /*9600*/, b_buildlearnstring(name_learnstrength_1, lpcost_attribute_strength, 0), gur_1202_corangar_teach_str_1);
    info_addchoice(gur_1202_corangar_teach /*9600*/, b_buildlearnstring(name_learndexterity_5, 5 * lpcost_attribute_dexterity, 0), gur_1202_corangar_teach_dex_5);
    info_addchoice(gur_1202_corangar_teach /*9600*/, b_buildlearnstring(name_learndexterity_1, lpcost_attribute_dexterity, 0), gur_1202_corangar_teach_dex_1);
};

func void gur_1202_corangar_teach_str_5() {
    b_buyattributepoints(other, atr_strength, 5 * lpcost_attribute_strength);
    info_clearchoices(gur_1202_corangar_teach /*9600*/);
    info_addchoice(gur_1202_corangar_teach /*9600*/, dialog_back, gur_1202_corangar_teach_back);
    info_addchoice(gur_1202_corangar_teach /*9600*/, b_buildlearnstring(name_learnstrength_5, 5 * lpcost_attribute_strength, 0), gur_1202_corangar_teach_str_5);
    info_addchoice(gur_1202_corangar_teach /*9600*/, b_buildlearnstring(name_learnstrength_1, lpcost_attribute_strength, 0), gur_1202_corangar_teach_str_1);
    info_addchoice(gur_1202_corangar_teach /*9600*/, b_buildlearnstring(name_learndexterity_5, 5 * lpcost_attribute_dexterity, 0), gur_1202_corangar_teach_dex_5);
    info_addchoice(gur_1202_corangar_teach /*9600*/, b_buildlearnstring(name_learndexterity_1, lpcost_attribute_dexterity, 0), gur_1202_corangar_teach_dex_1);
};

func void gur_1202_corangar_teach_dex_1() {
    b_buyattributepoints(other, atr_dexterity, lpcost_attribute_dexterity);
    info_clearchoices(gur_1202_corangar_teach /*9600*/);
    info_addchoice(gur_1202_corangar_teach /*9600*/, dialog_back, gur_1202_corangar_teach_back);
    info_addchoice(gur_1202_corangar_teach /*9600*/, b_buildlearnstring(name_learnstrength_5, 5 * lpcost_attribute_strength, 0), gur_1202_corangar_teach_str_5);
    info_addchoice(gur_1202_corangar_teach /*9600*/, b_buildlearnstring(name_learnstrength_1, lpcost_attribute_strength, 0), gur_1202_corangar_teach_str_1);
    info_addchoice(gur_1202_corangar_teach /*9600*/, b_buildlearnstring(name_learndexterity_5, 5 * lpcost_attribute_dexterity, 0), gur_1202_corangar_teach_dex_5);
    info_addchoice(gur_1202_corangar_teach /*9600*/, b_buildlearnstring(name_learndexterity_1, lpcost_attribute_dexterity, 0), gur_1202_corangar_teach_dex_1);
};

func void gur_1202_corangar_teach_dex_5() {
    b_buyattributepoints(other, atr_dexterity, 5 * lpcost_attribute_dexterity);
    info_clearchoices(gur_1202_corangar_teach /*9600*/);
    info_addchoice(gur_1202_corangar_teach /*9600*/, dialog_back, gur_1202_corangar_teach_back);
    info_addchoice(gur_1202_corangar_teach /*9600*/, b_buildlearnstring(name_learnstrength_5, 5 * lpcost_attribute_strength, 0), gur_1202_corangar_teach_str_5);
    info_addchoice(gur_1202_corangar_teach /*9600*/, b_buildlearnstring(name_learnstrength_1, lpcost_attribute_strength, 0), gur_1202_corangar_teach_str_1);
    info_addchoice(gur_1202_corangar_teach /*9600*/, b_buildlearnstring(name_learndexterity_5, 5 * lpcost_attribute_dexterity, 0), gur_1202_corangar_teach_dex_5);
    info_addchoice(gur_1202_corangar_teach /*9600*/, b_buildlearnstring(name_learndexterity_1, lpcost_attribute_dexterity, 0), gur_1202_corangar_teach_dex_1);
};

instance gur_1202_corangar_wannabetpl(c_info) {
    npc = gur_1202_corangar /*7457*/;
    nr = 0;
    condition = gur_1202_corangar_wannabetpl_condition;
    information = gur_1202_corangar_wannabetpl_info;
    permanent = true;
    description = "ß õî÷ó ñòàòü Ñòðàæåì!";
};

func int gur_1202_corangar_wannabetpl_condition() {
    if ((corkalom_bringmcqballs == log_success) && (npc_gettrueguild(hero) == gil_nov)) {
        return true;
    };
};

func void gur_1202_corangar_wannabetpl_info() {
    ai_output(other, self, "GUR_1202_CorAngar_WANNABETPL_Info_15_01"); //ß õî÷ó ñòàòü Ñòðàæåì!
    if (hero.level < 10) {
        ai_output(self, other, "GUR_1202_CorAngar_WANNABETPL_Info_08_02"); //Òû åùå íå ãîòîâ. Òû ñìîæåøü ïðèñîåäèíèòüñÿ ê íàì, êîãäà ó òåáÿ áóäåò áîëüøå îïûòà.
        b_printguildcondition(10);
    }
    else {
        if (hero.level >= 10) {
            ai_output(self, other, "GUR_1202_CorAngar_WANNABETPL_Info_08_03"); //Ïðèøëî âðåìÿ òåáå ïðèñîåäèíèòüñÿ ê íàì.
            ai_output(self, other, "GUR_1202_CorAngar_WANNABETPL_Info_08_04"); //Ïîìíè, ÷òî Ñòðàæè - ýòî íå ïðîñòî õîðîøèå âîèíû è îõðàííèêè Ëàãåðÿ. Ìû - èçáðàííûå Ñòðàæè Ñïÿùåãî, Ñòðàæè äóõà.
            ai_output(self, other, "GUR_1202_CorAngar_WANNABETPL_Info_08_05"); //Ìû íàõîäèì ïðèìåíåíèå è ôèçè÷åñêîé, è äóõîâíîé ñèëå. Ëèøü òå, ÷üå òåëî è äóõ ïðåäñòàâëÿþò åäèíîå öåëîå, ìîãóò ñòàòü èñòèííûìè Ñòðàæàìè.
            ai_output(self, other, "GUR_1202_CorAngar_WANNABETPL_Info_08_06"); //ß èñêðåííå ðàä òîìó, ÷òî òû äîáèëñÿ ñòîëü âïå÷àòëÿþùèõ ðåçóëüòàòîâ çà ñòîëü êîðîòêîå âðåìÿ. Òåïåðü òû ãîòîâ ñòàòü îäíèì èõ íàñ.
            ai_output(self, other, "GUR_1202_CorAngar_WANNABETPL_Info_08_07"); //Çàïîìíè: íåâîçìóòèìûé äóõ è òðåíèðîâàííîå òåëî ïîìîãóò òåáå âûñòîÿòü ïðîòèâ ëþáîãî âðàãà.
            ai_output(self, other, "GUR_1202_CorAngar_WANNABETPL_Info_08_08"); //Îòïðàâëÿéñÿ ê Ãîð Íà Òîôó íà òðåíèðîâî÷íóþ ïëîùàäêó. Îí äàñò òåáå íîâûå äîñïåõè.
            npc_settrueguild(hero, gil_tpl);
            hero.guild = gil_tpl;
            log_createtopic(ge_becometemplar, log_note);
            b_logentry(ge_becometemplar, ge_becometemplar_1);
            log_createtopic(ge_teacherpsi, log_note);
            b_logentry(ge_teacherpsi, ge_teacherpsi_3);
        };
    };
};

instance gur_1202_corangar_zweihand1(c_info) {
    npc = gur_1202_corangar /*7457*/;
    nr = 0;
    condition = gur_1202_corangar_zweihand1_condition;
    information = gur_1202_corangar_zweihand1_info;
    permanent = true;
    description = b_buildlearnstring(name_learn2h_1, lpcost_talent_2h_1, 0);
};

func int gur_1202_corangar_zweihand1_condition() {
    if (((npc_gettalentskill(hero, npc_talent_2h) < 1) && (npc_gettalentskill(hero, npc_talent_1h) == 2)) && (npc_gettrueguild(hero) == gil_tpl)) {
        return true;
    };
};

func void gur_1202_corangar_zweihand1_info() {
    ai_output(other, self, "GUR_1202_CorAngar_ZWEIHAND1_Info_15_01"); //ß õî÷ó íàó÷èòüñÿ âëàäåòü äâóðó÷íûì ìå÷îì.
    if (b_giveskill(other, npc_talent_2h, 1, lpcost_talent_2h_1)) {
        ai_output(self, other, "GUR_1202_CorAngar_ZWEIHAND1_Info_08_02"); //Áîé ñ äâóðó÷íûì îðóæèåì òðåáóåò îïðåäåëåííîé ñèëû è ëîâêîñòè.
        ai_output(self, other, "GUR_1202_CorAngar_ZWEIHAND1_Info_08_03"); //Äëÿ òîãî ÷òîáû îâëàäåòü èì, òû äîëæåí òðåíèðîâàòü íå òîëüêî ñâîå òåëî, íî è ñâîé ðàçóì.
        ai_output(self, other, "GUR_1202_CorAngar_ZWEIHAND1_Info_08_04"); //Ëèøü äîñòèãíóâ êîíòðîëÿ íàä ñâîåé ôèçè÷åñêîé è äóõîâíîé ñèëîé, òû ñìîæåøü ïîëó÷èòü ýòîò íàâûê.
        ai_output(self, other, "GUR_1202_CorAngar_ZWEIHAND1_Info_08_05"); //Ñóòü êðîåòñÿ â êîíöåíòðàöèè. Â êîíöåíòðàöèè îáúåäèíÿþòñÿ òåëî è ðàçóì.
        ai_stopprocessinfos(self);
        b_practicecombat("PSI_PATH_6_7");
    };
};

instance gur_1202_corangar_zweihand2(c_info) {
    npc = gur_1202_corangar /*7457*/;
    nr = 0;
    condition = gur_1202_corangar_zweihand2_condition;
    information = gur_1202_corangar_zweihand2_info;
    permanent = true;
    description = b_buildlearnstring(name_learn2h_2, lpcost_talent_2h_2, 0);
};

func int gur_1202_corangar_zweihand2_condition() {
    if ((npc_gettalentskill(hero, npc_talent_2h) == 1) && (npc_gettrueguild(hero) == gil_tpl)) {
        return true;
    };
};

func void gur_1202_corangar_zweihand2_info() {
    ai_output(other, self, "GUR_1202_CorAngar_ZWEIHAND2_Info_15_01"); //ß õî÷ó óçíàòü ÷òî-íèáóäü åùå ïðî äâóðó÷íîå îðóæèå.
    if (b_giveskill(other, npc_talent_2h, 2, lpcost_talent_2h_2)) {
        ai_output(self, other, "GUR_1202_CorAngar_ZWEIHAND2_Info_08_02"); //Òû óæå âïîëíå îñâîèë òàíåö ñ êëèíêîì. Òåïåðü ÿ ðàññêàæó òåáå ïðî íàñòîÿùèé áîé.
        ai_output(self, other, "GUR_1202_CorAngar_ZWEIHAND2_Info_08_03"); //Èñïîëüçóé ñâîþ äóõîâíóþ ñèëó, äëÿ òîãî ÷òîáû ïðåäóãàäàòü äâèæåíèå ïðîòèâíèêà, ïðåæäå ÷åì îí íàíåñåò óäàð.
        ai_output(self, other, "GUR_1202_CorAngar_ZWEIHAND2_Info_08_04"); //Åñëè òû çíàåøü, êàê äåðåòñÿ òâîé âðàã, òî òû óæå íàïîëîâèíó ïîáåäèë.
        ai_output(self, other, "GUR_1202_CorAngar_ZWEIHAND2_Info_08_05"); //Áóäü áûñòð, òâîè äâèæåíèÿ äîëæíû áûòü ïëàâíûìè è íåîæèäàííûìè, à óäàðû - ñèëüíûìè è òî÷íûìè.
        ai_output(self, other, "GUR_1202_CorAngar_ZWEIHAND2_Info_08_06"); //Ó÷èñü òåðïåòü áîëü. Òâîÿ ñèëà âîëè â êîíå÷íîì ñ÷åòå ðåøàåò èñõîä áîÿ.
        ai_output(self, other, "GUR_1202_CorAngar_ZWEIHAND2_Info_08_07"); //Îñòàâàéñÿ ñïîêîåí. Òû ñìîæåøü óöåëåòü, òîëüêî åñëè áóäåøü âñòóïàòü â áîé ñïîêîéíûì è ñîñðåäîòî÷åííûì.
        ai_output(self, other, "GUR_1202_CorAngar_ZWEIHAND2_Info_08_08"); //Èñïîëüçóé ñâîè íàâûêè ñ óìîì. È ïîìíè: ñïðîâîöèðîâàòü áîé - çíà÷èò, ïðîèãðàòü åãî.
        ai_stopprocessinfos(self);
        b_practicecombat("PSI_PATH_6_7");
    };
};

instance gur_1202_corangar_sends(c_info) {
    npc = gur_1202_corangar /*7457*/;
    nr = 0;
    condition = gur_1202_corangar_sends_condition;
    information = gur_1202_corangar_sends_info;
    description = "×òî òåïåðü?";
};

func int gur_1202_corangar_sends_condition() {
    if ((kapitel == 3) && (corangar_gotoogy == false)) {
        return 1;
    };
};

func void gur_1202_corangar_sends_info() {
    ai_output(other, self, "GUR_1202_CorAngar_SENDS_Info_15_01"); //×òî åùå ñëó÷èëîñü?
    ai_output(self, other, "GUR_1202_CorAngar_SENDS_Info_08_02"); //Âèäåíèå áûëî î÷åíü íåÿñíûì, îíî ïðèíåñëî áîëüøå âîïðîñîâ, íåæåëè îòâåòîâ íà íèõ.
    ai_output(self, other, "GUR_1202_CorAngar_SENDS_Info_08_03"); //Îäíî ÿ çíàþ òî÷íî: ÿ âèäåë îðêà â ïåùåðå. Ýòî áûëî çàáðîøåííîå îðêñêîå êàïèùå, çäåñü, íåïîäàëåêó.
    ai_output(self, other, "GUR_1202_CorAngar_SENDS_Info_08_04"); //Êîãäà-òî îðêè õîðîíèëè òàì ñâîèõ óìåðøèõ, âîò ïî÷åìó ìû íàçûâàåì ýòè ïåùåðû îðêñêèì êëàäáèùåì.
    ai_output(self, other, "GUR_1202_CorAngar_SENDS_Info_08_05"); //Ãóðó Èäîë Ëþêîð îòïðàâèëñÿ òóäà ñ íåñêîëüêèìè Ñòðàæàìè. Âîçìîæíî åìó óäàñòñÿ îòûñêàòü ÷òî-òî, ÷òî ïîìîæåò íàì ïîíÿòü ýòî âèäåíèå.
    ai_output(self, other, "GUR_1202_CorAngar_SENDS_Info_08_06"); //Ìíå íóæíî, ÷òîáû êòî-íèáóäü îòïðàâèëñÿ òóäà è çàòåì äîëîæèë ìíå î ñèòóàöèè.
    ai_output(other, self, "GUR_1202_CorAngar_SENDS_Info_15_07"); //Ïî÷åìó òû íå ïîéäåøü ñàì? Âåäü òû æå êîìàíäóåøü âñåìè Ñòðàæàìè!
    ai_output(self, other, "GUR_1202_CorAngar_SENDS_Info_08_08"); //Ìîÿ çàäà÷à - çàùèùàòü Ïðîñâåùåííîãî. ß äîëæíåí îñòàâàòüñÿ çäåñü, ñ Þ`Áåðèîíîì, è îõðàíÿòü åãî.
    ai_output(self, other, "GUR_1202_CorAngar_SENDS_Info_08_09"); //Òû õîðîøî ïîñëóæèë íàøåìó Ëàãåðþ. ß äîâåðÿþ òåáå áîëüøå, ÷åì êîìó-ëèáî åùå.
    ai_output(self, other, "GUR_1202_CorAngar_SENDS_Info_08_10"); //ß ïðîøó òåáÿ îòïðàâèòüñÿ íà îðêñêîå êëàäáèùå è âûÿñíèòü, ÷òî óäàëîñü íàéòè Ñòðàæàì.
    info_clearchoices(gur_1202_corangar_sends /*9617*/);
    info_addchoice(gur_1202_corangar_sends /*9617*/, "×òî ÿ ïîëó÷ó âçàìåí?", gur_1202_corangar_sends_earn);
    info_addchoice(gur_1202_corangar_sends /*9617*/, "ß îòïðàâëÿþñü â ïóòü ïðÿìî ñåé÷àñ!", gur_1202_corangar_sends_know);
};

func void gur_1202_corangar_sends_earn() {
    ai_output(other, self, "GUR_1202_CorAngar_SENDS_EARN_Info_15_01"); //×òî ÿ ïîëó÷ó âçàìåí?
    ai_output(self, other, "GUR_1202_CorAngar_SENDS_EARN_Info_08_02"); //Òåáå íóæíà ðóäà? Ïîõîæå, ÿ ïåðåîöåíèë òåáÿ. Íî âñå ðàâíî, òû ìíå íóæåí. Âîò, âîçüìè ñîòíþ êóñêîâ ðóäû. Áîëüøå òû íå ïîëó÷èøü!
    createinvitems(self, itminugget, 100);
    b_giveinvitems(self, hero, itminugget /*4517*/, 100);
};

func void gur_1202_corangar_sends_know() {
    ai_output(other, self, "GUR_1202_CorAngar_SENDS_KNOW_Info_15_01"); //ß îòïðàâëÿþñü â ïóòü ïðÿìî ñåé÷àñ!
    ai_output(self, other, "GUR_1202_CorAngar_SENDS_KNOW_Info_08_02"); //Ïðåæäå âîçüìè ýòî êîëüöî. Îíî çàùèòèò òåáÿ â áîþ.
    createinvitem(self, schutzring_geschosse1);
    b_giveinvitems(self, hero, schutzring_geschosse1 /*4902*/, 1);
    info_clearchoices(gur_1202_corangar_sends /*9617*/);
    b_story_gotoorcgraveyard();
};

instance gur_1202_corangar_where(c_info) {
    npc = gur_1202_corangar /*7457*/;
    nr = 0;
    condition = gur_1202_corangar_where_condition;
    information = gur_1202_corangar_where_info;
    description = "Ãäå íàõîäèòñÿ êëàäáèùå îðêîâ?";
};

func int gur_1202_corangar_where_condition() {
    if (npc_knowsinfo(hero, gur_1202_corangar_sends /*9617*/)) {
        return 1;
    };
};

func void gur_1202_corangar_where_info() {
    ai_output(other, self, "GUR_1202_CorAngar_WHERE_Info_15_01"); //Ãäå íàõîäèòñÿ êëàäáèùå îðêîâ?
    ai_output(self, other, "GUR_1202_CorAngar_WHERE_Info_08_02"); //Íåäàëåêî îòñþäà. Äîðîãó òåáå ïîêàæåò ïîñëóøíèê Òàëàñ. Òû íàéäåøü åãî âî äâîðå õðàìà.
    b_logentry(ch3_orcgraveyard, ch3_orcgraveyard_4);
};

instance gur_1202_corangar_after(c_info) {
    npc = gur_1202_corangar /*7457*/;
    nr = 0;
    condition = gur_1202_corangar_after_condition;
    information = gur_1202_corangar_after_info;
    description = "ß áûë íà êëàäáèùå îðêîâ. ";
};

func int gur_1202_corangar_after_condition() {
    if (baallukor_bringparchment == 4) {
        return 1;
    };
};

func void gur_1202_corangar_after_info() {
    ai_output(other, self, "GUR_1202_CorAngar_AFTER_Info_15_01"); //ß áûë íà êëàäáèùå îðêîâ. Òàì íåò ÍÈ×ÅÃÎ. Íè Ñïÿùåãî, íè çàöåïêè, âîîáùå íè÷åãî.
    ai_output(self, other, "GUR_1202_CorAngar_AFTER_Info_08_02"); //À Èäîë Ëþêîð è åãî Ñòðàæè?
    ai_output(other, self, "GUR_1202_CorAngar_AFTER_Info_15_03"); //Îíè âñå ìåðòâû.
    ai_output(self, other, "GUR_1202_CorAngar_AFTER_Info_08_04"); //Ìåðòâû? Íî ïî÷åìó, ÷òî ïðîèçîøëî?
    ai_output(other, self, "GUR_1202_CorAngar_AFTER_Info_15_05"); //Ïåùåðû êèøìÿ êèøàò îðêàìè. Îíè ïåðåáèëè âñåõ Ñòðàæåé.
    ai_output(other, self, "GUR_1202_CorAngar_AFTER_Info_15_06"); //Ìíå è Ëþêîðó óäàëîñü âûæèòü, íî îí ïðè ýòîì ñîøåë ñ óìà.
    ai_output(other, self, "GUR_1202_CorAngar_AFTER_Info_15_07"); //Îí êðè÷àë, ÷òî Ñïÿùèé ïðèêàçàë åìó óáèòü ìåíÿ, è èñêðåííå ïûòàëñÿ âûïîëíèòü ýòîò ïðèêàç.
    ai_output(self, other, "GUR_1202_CorAngar_AFTER_Info_08_08"); //Ïîõîæå, îí ïðîñòî íå ìîã ñìèðèòüñÿ ñ ìûñëüþ î òîì, ÷òî åìó òàê è íå óäàëîñü íè÷åãî íàéòè.
    ai_output(self, other, "GUR_1202_CorAngar_AFTER_Info_08_09"); //ß íå âåðþ, ÷òî âîëÿ Ñïÿùåãî ïîäâèãëà åãî íà ñòîëü óæàñíûé ïîñòóïîê.
    ai_output(self, other, "GUR_1202_CorAngar_AFTER_Info_08_10"); //Ýòîãî íå ìîæåò... íå ìîæåò... ÝÒÎ ÍÅ ÎÒÍÎÑÈÒÑß Ê ÄÅËÓ!
    ai_output(self, other, "GUR_1202_CorAngar_AFTER_Info_08_11"); //Âàæíåå âñåãî òî, ÷òî Èäîë Ëþêîð åùå íå çàøåë ñëèøêîì äàëåêî â ñâîåì áåçóìèè.
    ai_output(self, other, "GUR_1202_CorAngar_AFTER_Info_08_12"); //Òåïåðü âñÿ íàøà íàäåæäà íà Þ`Áåðèîíà.
    b_givexp(xp_reporttocorangar);
    b_story_backfromorcgraveyard();
};

instance info_corangar_findherb(c_info) {
    npc = gur_1202_corangar /*7457*/;
    nr = 0;
    condition = info_corangar_findherb_condition;
    information = info_corangar_findherb_info;
    description = "Êàê ïîæèâàåò Þ`Áåðèîí?";
};

func int info_corangar_findherb_condition() {
    if (npc_knowsinfo(hero, gur_1202_corangar_after /*9625*/)) {
        return 1;
    };
};

func void info_corangar_findherb_info() {
    ai_output(other, self, "Mis_3_NC_CorAngar_FindHerb_15_01"); //Êàê ïîæèâàåò Þ`Áåðèîí?
    ai_output(self, other, "Mis_3_NC_CorAngar_FindHerb_08_02"); //Îí íå î÷íåòñÿ, åñëè ìû íå ïîìîæåì åìó. Âèäèøü - îí ñëàáååò ñ êàæäîé ìèíóòîé. ß çíàþ, êàê ðàçáóäèòü åãî, íî äëÿ ýòîãî ìíå ïîíàäîáèòñÿ òâîÿ ïîìîùü.
    ai_output(other, self, "Mis_3_NC_CorAngar_FindHerb_15_03"); //×òî ÿ äîëæåí ñäåëàòü?
    ai_output(self, other, "Mis_3_NC_CorAngar_FindHerb_08_04"); //Ïðèíåñè ìíå öåëåáíûå òðàâû ñ áîëîòà. Ïÿòè êóñòîâ ñàìîãî ñèëüíîãî ñîðòà äîëæíî áûòü äîñòàòî÷íî.
    ai_output(self, other, "Mis_3_NC_CorAngar_FindHerb_08_05"); //Ïðîøó òåáÿ, ïîòîðîïèñü!
    ai_stopprocessinfos(self);
    corangar_findherb = log_running;
    log_createtopic(ch3_findherbs, log_mission);
    log_settopicstatus(ch3_findherbs, log_running);
    b_logentry(ch3_findherbs, ch3_findherbs_1);
};

instance info_corangar_findherb_where(c_info) {
    npc = gur_1202_corangar /*7457*/;
    nr = 1;
    condition = info_corangar_findherb_where_condition;
    information = info_corangar_findherb_where_info;
    description = "Ãäå ÿ ñìîãó íàéòè ýòè òðàâû?";
};

func int info_corangar_findherb_where_condition() {
    if ((corangar_findherb == log_running) && (npc_hasitems(other, itfo_plants_herb_03) < 5)) {
        return 1;
    };
};

func void info_corangar_findherb_where_info() {
    ai_output(other, self, "Info_CorAngar_FindHerb_WHERE_15_01"); //Ãäå ÿ ñìîãó íàéòè ýòè òðàâû?
    ai_output(self, other, "Info_CorAngar_FindHerb_WHERE_08_02"); //Èùè èõ íà áîëîòå ïîçàäè Ëàãåðÿ. Òåáå ïðèäåòñÿ çàéòè äàëåêî âãëóáü áîëîòà - ïîñòàðàéñÿ íå ïîïàñòüñÿ áîëîòîæîðàì!
    ai_output(self, other, "Info_CorAngar_FindHerb_WHERE_08_03"); //È õâàòèò òðàòèòü âðåìÿ âïóñòóþ. Èäè!
    ai_stopprocessinfos(self);
    b_logentry(ch3_findherbs, ch3_findherbs_2);
};

instance info_corangar_findherb_look(c_info) {
    npc = gur_1202_corangar /*7457*/;
    nr = 1;
    condition = info_corangar_findherb_look_condition;
    information = info_corangar_findherb_look_info;
    description = "Êàê ÿ óçíàþ, ÷òî ýòî èìåííî òå òðàâû, êîòîðûå ìíå íóæíû?";
};

func int info_corangar_findherb_look_condition() {
    if ((corangar_findherb == log_running) && (npc_hasitems(other, itfo_plants_herb_03) < 5)) {
        return 1;
    };
};

func void info_corangar_findherb_look_info() {
    ai_output(other, self, "Info_CorAngar_FindHerb_LOOK_15_01"); //Êàê ÿ óçíàþ, ÷òî ýòî èìåííî òå òðàâû, êîòîðûå ìíå íóæíû?
    ai_output(self, other, "Info_CorAngar_FindHerb_LOOK_08_02"); //Îíè ïîõîæè íà çâåçäû ñ âîñåìüþ çåëåíûìè è îðàíæåâûìè ëèñòüÿìè.
    ai_output(self, other, "Info_CorAngar_FindHerb_LOOK_08_03"); //Â ïóòü!
    ai_stopprocessinfos(self);
    b_logentry(ch3_findherbs, ch3_findherbs_3);
};

instance info_corangar_findherb_running(c_info) {
    npc = gur_1202_corangar /*7457*/;
    nr = 1;
    condition = info_corangar_findherb_running_condition;
    information = info_corangar_findherb_running_info;
    permanent = true;
    description = "ß åùå íå ñîáðàë äîñòàòî÷íî òðàâ.";
};

func int info_corangar_findherb_running_condition() {
    if ((((corangar_findherb == log_running) && (npc_hasitems(other, itfo_plants_herb_03) < 5)) && npc_knowsinfo(hero, info_corangar_findherb_where /*9631*/)) && npc_knowsinfo(hero, info_corangar_findherb_look /*9634*/)) {
        return 1;
    };
};

func void info_corangar_findherb_running_info() {
    var c_npc fortuno;

    ai_output(other, self, "Info_CorAngar_FindHerb_Running_15_01"); //ß åùå íå ñîáðàë äîñòàòî÷íî òðàâ.
    ai_output(self, other, "Info_CorAngar_FindHerb_Running_08_02"); //Âîçìîæíî, ó Ôîðòóíî, òðàâíèêà, åñòü ÷òî-íèáóäü â çàïàñå.
    ai_output(self, other, "Info_CorAngar_FindHerb_Running_08_03"); //Òîðîïèñü. Ìíå íóæíî ïÿòü êóñòîâ. Ó Þ`Áåðèîíà îñòàëîñü íå òàê óæ ìíîãî âðåìåíè.
    ai_stopprocessinfos(self);
    if (!fortuno_hasyberionherbs) {
        fortuno = hlp_getnpc(nov_1357_fortuno);
        createinvitems(fortuno, itfo_plants_herb_03, 5);
        fortuno_hasyberionherbs = true;
        b_logentry(ch3_findherbs, ch3_findherbs_4);
    };
};

instance info_corangar_findherb_success(c_info) {
    npc = gur_1202_corangar /*7457*/;
    nr = 0;
    condition = info_corangar_findherb_success_condition;
    information = info_corangar_findherb_success_info;
    description = "Âîò öåëåáíûå òðàâû äëÿ Þ`Áåðèîíà.";
};

func int info_corangar_findherb_success_condition() {
    if ((npc_hasitems(other, itfo_plants_herb_03) >= 5) && (corangar_findherb == log_running)) {
        return true;
    };
};

func void info_corangar_findherb_success_info() {
    var c_npc yberion;

    ai_output(other, self, "Info_CorAngar_FindHerb_Success_15_01"); //Âîò öåëåáíûå òðàâû äëÿ Þ`Áåðèîíà.
    ai_output(self, other, "Info_CorAngar_FindHerb_Success_08_02"); //Îòëè÷íàÿ ðàáîòà. Ïîêà òû óõîäèë, Þ`Áåðèîí íåíàäîëãî ïðèøåë â ñåáÿ.
    ai_output(other, self, "Info_CorAngar_FindHerb_Success_15_03"); //Îí ÷òî-íèáóäü ãîâîðèë?
    ai_output(self, other, "Info_CorAngar_FindHerb_Success_08_04"); //Äà, îí ñêàçàë, ÷òî Ñïÿùèé - íå òî, ÷òî ìû äóìàåì. Ìû áîëüøå íå äîëæíû ïûòàòüñÿ ïðîáóäèòü åãî.
    ai_output(self, other, "Info_CorAngar_FindHerb_Success_08_05"); //Íàì îñòàåòñÿ òîëüêî íàäåÿòüñÿ, ÷òî äëÿ Þ`Áåðèîíà åùå íå âñå ïîòåðÿíî.
    yberion_dead = log_running;
    b_giveinvitems(other, self, itfo_plants_herb_03 /*4360*/, 5);
    npc_removeinvitems(self, itfo_plants_herb_03, 5);
    b_givexp(xp_findherbs);
    corangar_findherb = log_success;
    b_logentry(ch3_findherbs, ch3_findherbs_5);
    log_settopicstatus(ch3_findherbs, log_success);
    yberion = hlp_getnpc(gur_1200_yberion);
    ai_wait(self, 1.0);
    ai_gotonpc(self, yberion);
    ai_turntonpc(self, yberion);
    ai_playani(self, "T_PLUNDER");
    ai_waittillend(self, yberion);
    ai_output(self, other, "GUR_1202_CorAngar_DEATH_Info_08_00"); //Þ`Áåðèîí ìåðòâ. Íàø äóõîâíûé íàñòàâíèê ïîêèíóë íàñ!
    ai_turntonpc(self, other);
    ai_output(self, other, "GUR_1202_CorAngar_DEATH_Info_08_01"); //Äàæå ñ òâîåé ïîìîùüþ íàì íå óäàëîñü ñïàñòè åãî!
    ai_output(other, self, "GUR_1202_CorAngar_DEATH_Info_15_02"); //×òî æå òåïåðü, Êîð Àíãàð?
    ai_output(self, other, "GUR_1202_CorAngar_DEATH_Info_08_03"); //ß âñåãäà äîâåðÿë Þ`Áåðèîíó. Íåçàäîëãî äî êîíöà, îí âîçëîæèë âñå ñâîè íàäåæäû íà ïëàí ñïàñåíèÿ, ðàçðàáîòàííûé ìàãàìè Âîäû.
    ai_output(other, self, "GUR_1202_CorAngar_DEATH_Info_15_04"); //Òàê ÷òî òåïåðü ìû äîëæíû ïîääåðæèâàòü ìàãîâ Âîäû è èõ èäåè.
    ai_output(self, other, "GUR_1202_CorAngar_DEATH_Info_08_05"); //Èì ïîíàäîáÿòñÿ ìàãè÷åñêèé þíèòîð è àëüìàíàõ. È òåì, è äðóãèì âëàäååò Êîð Ãàëîì.
    ai_output(other, self, "GUR_1202_CorAngar_DEATH_Info_15_06"); //Ãäå ñåé÷àñ Êîð Ãàëîì?
    ai_output(self, other, "GUR_1202_CorAngar_DEATH_Info_08_07"); //Îí áûë â ÿðîñòè - çàáðàë íåñêîëüêèõ Ñòðàæåé è îòïðàâèëñÿ èñêàòü ñâîé ñîáñòâåííûé ïóòü ê Ñïÿùåìó.
    ai_output(other, self, "GUR_1202_CorAngar_DEATH_Info_15_08"); //Ïðîêëÿòüå, êàê æå íàì òåïåðü äîáûòü þíèòîð?
    ai_output(self, other, "GUR_1202_CorAngar_DEATH_Info_08_09"); //ß äóìàþ, ÷òî îí îñòàâèë êíèãó è þíèòîð â ñâîåé ëàáîðàòîðèè. Âîò êëþ÷ îò ñóíäóêà.
    createinvitem(self, itke_psi_kalom_01);
    b_giveinvitems(self, other, itke_psi_kalom_01 /*4697*/, 1);
};

instance info_corangar_teleport(c_info) {
    npc = gur_1202_corangar /*7457*/;
    condition = info_corangar_teleport_condition;
    information = info_corangar_teleport_info;
    important = true;
};

func int info_corangar_teleport_condition() {
    if (npc_knowsinfo(hero, info_corangar_findherb_success /*9641*/)) {
        return true;
    };
};

func void info_corangar_teleport_info() {
    ai_gotonpc(self, hero);
    ai_output(self, hero, "Info_CorAngar_TELEPORT_08_01"); //Ìèíóòó!
    ai_output(hero, self, "Info_CorAngar_TELEPORT_15_02"); //Äà?
    ai_output(self, hero, "Info_CorAngar_TELEPORT_08_03"); //Ïðèìè ýòó ìàãè÷åñêóþ ðóíó â çíàê áëàãîäàðíîñòè çà òâîè äîáðûå äåëà.
    ai_output(self, hero, "Info_CorAngar_TELEPORT_08_04"); //Îíà ïîçâîëèò òåáå ëåãêî è áûñòðî ïåðåíîñèòüñÿ âî äâîð íàøåãî õðàìà, êîãäà â ýòîì âîçíèêíåò íåîáõîäèìîñòü.
    ai_output(hero, self, "Info_CorAngar_TELEPORT_15_05"); //Áëàãîäàðþ òåáÿ!
    b_story_senttonc();
};

instance dia_baaltondral_muteexit(c_info) {
    npc = gur_1203_baaltondral /*7460*/;
    nr = 999;
    condition = dia_baaltondral_muteexit_condition;
    information = dia_baaltondral_muteexit_info;
    description = "Íè÷åãî íå ãîâîðè.";
};

func int dia_baaltondral_muteexit_condition() {
    if (!npc_knowsinfo(hero, dia_baaltondral_youtalked /*9657*/)) {
        return 1;
    };
};

func void dia_baaltondral_muteexit_info() {
    ai_stopprocessinfos(self);
};

instance dia_baaltondral_exit(c_info) {
    npc = gur_1203_baaltondral /*7460*/;
    nr = 999;
    condition = dia_baaltondral_exit_condition;
    information = dia_baaltondral_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_baaltondral_exit_condition() {
    if (npc_knowsinfo(hero, dia_baaltondral_muteexit /*9648*/) || npc_knowsinfo(hero, dia_baaltondral_youtalked /*9657*/)) {
        return 1;
    };
};

func void dia_baaltondral_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_baaltondral_fanaticteacher(c_info) {
    npc = gur_1203_baaltondral /*7460*/;
    nr = 1;
    condition = dia_baaltondral_fanaticteacher_condition;
    information = dia_baaltondral_fanaticteacher_info;
    important = true;
};

func int dia_baaltondral_fanaticteacher_condition() {
    return 1;
};

func void dia_baaltondral_fanaticteacher_info() {
    ai_output(self, other, "DIA_BaalTondral_FanaticTeacher_13_00"); //Òû íå ïîõîæ íà òåõ ðàáîâ, ÷òî ïîêîðèëèñü âîëå Áàðîíîâ.
    ai_output(self, other, "DIA_BaalTondral_FanaticTeacher_13_01"); //Òû áîëüøå ïîõîæ íà èñêàòåëÿ - èñêàòåëÿ èñòèííîé âåðû. Ðàçâå íå îùóùàåøü òû âíóòðè áóøóþùåå ïëàìÿ - òî, ÷òî íå äàåò òåáå ñïàòü ïî íî÷àì?
    ai_output(self, other, "DIA_BaalTondral_FanaticTeacher_13_02"); //Âèæó, òåáÿ òåðçàþò ñîìíåíèÿ - åñòü ëè ïðàâäà â òîì, ÷òî ïûòàþòñÿ íàâÿçàòü òåáå ïðèñëóæíèêè Áàðîíîâ? È òû çíàåøü, îòêóäà áåðóòñÿ ýòè ñîìíåíèÿ. Îíè âñå ëãóò!
    ai_output(self, other, "DIA_BaalTondral_FanaticTeacher_13_03"); //Ëîæü ýòà äàåò âëàñòü íàä òåìè, êòî ñëàá äóõîì. Íî òâîé äóõ íàìíîãî ñèëüíåå ýòîé ëæè!
    ai_output(self, other, "DIA_BaalTondral_FanaticTeacher_13_04"); //Ðàçâå íå îùóùàåøü òû ñòðåìëåíèå ê ñâîáîäå - åæåñåêóíäíî, åæå÷àñíî? Ðàçâå íå ÷óâñòâóåøü òû, êàê äåíü îòî äíÿ îíî ñòàíîâèòñÿ âñå ñèëüíåå, êàê íàïðàâëÿåò îíî òâîé äóõ? Îñâîáîäè åãî!
    ai_output(self, other, "DIA_BaalTondral_FanaticTeacher_13_05"); //Çíàåøü, ÷òî òû äåëàåøü, êîãäà ïûòàåøüñÿ ïîäàâèòü åãî? Òû îòâåðãàåøü ñîáñòâåííóþ äóøó, îòâåðãàåøü ñåáÿ! Íå ïîçâîëÿé ñòðàõó âëàñòâîâàòü íàä òâîåé æèçíüþ!
    ai_output(self, other, "DIA_BaalTondral_FanaticTeacher_13_06"); //Îñâîáîäè ñåáÿ. Òû äîëæåí ïîíÿòü! Ñïÿùèé ÏÐÎÁÓÄÈÒÑß! Îí îñâîáîäèò òåáÿ  è ñìåòåò âñåõ ÿçû÷íèêîâ-íåâåðíûõ!
    ai_output(self, other, "DIA_BaalTondral_FanaticTeacher_13_07"); //Êàê ïûëü, ñìûòàÿ äîæäåì, èñ÷åçíóò îíè èç ýòîãî ìèðà. Îíè áóäóò ðûäàòü è ãîðüêî ðàñêàèâàòüñÿ âî âñåì, íî áóäåò óæå ñëèøêîì ïîçäíî.
    ai_output(self, other, "DIA_BaalTondral_FanaticTeacher_13_08"); //Îíè çàïëàòÿò öåíó. Çàïëàòÿò ñâîåé êðîâüþ. È ñâîèìè æèçíÿìè.
};

instance dia_baaltondral_youtalked(c_info) {
    npc = gur_1203_baaltondral /*7460*/;
    nr = 1;
    condition = dia_baaltondral_youtalked_condition;
    information = dia_baaltondral_youtalked_info;
    description = "Ýé! Òû çàãîâîðèë ñî ìíîé. Ìîãó ÿ îáðàòèòüñÿ ê òåáå?";
};

func int dia_baaltondral_youtalked_condition() {
    return 1;
};

func void dia_baaltondral_youtalked_info() {
    ai_output(other, self, "DIA_BaalTondral_YouTalked_15_00"); //Ýé! Òû çàãîâîðèë ñî ìíîé. Íå çíà÷èò ëè ýòî, ÷òî òåïåðü è ÿ ìîãó îáðàòèòüñÿ ê òåáå?
    ai_output(self, other, "DIA_BaalTondral_YouTalked_13_01"); //Òû ïîñòèãàåøü íàøè ïðàâèëà. Ýòî ïîõâàëüíî.
    ai_output(self, other, "DIA_BaalTondral_YouTalked_13_02"); //ß îùóùàþ â òåáå âåëèêóþ äóõîâíóþ ñèëó! Ñêîðî òû áóäåøü äîïóùåí â êðóã èçáðàííûõ.
    ai_output(self, other, "DIA_BaalTondral_YouTalked_13_03"); //ß çàãîâîðèë ñ òîáîé, äàáû äàòü òåáå øàíñ ïðîÿâèòü ñåáÿ.
};

var int baaltondral_getnewguy;

instance dia_baaltondral_loyality(c_info) {
    npc = gur_1203_baaltondral /*7460*/;
    nr = 1;
    condition = dia_baaltondral_loyality_condition;
    information = dia_baaltondral_loyality_info;
    description = "Êàê ÿ ìîãó äîêàçàòü ñâîþ ïðåäàííîñòü?";
};

func int dia_baaltondral_loyality_condition() {
    if (npc_knowsinfo(hero, dia_baaltondral_youtalked /*9657*/)) {
        return 1;
    };
};

func void dia_baaltondral_loyality_info() {
    ai_output(other, self, "DIA_BaalTondral_Loyality_15_00"); //Êàê ÿ ìîãó äîêàçàòü ñâîþ ïðåäàííîñòü?
    ai_output(self, other, "DIA_BaalTondral_Loyality_13_01"); //Áîëüøå âñåãî ìû íóæäàåìñÿ â íîâûõ äóøàõ, ïîñòèãøèõ èñòèíó è âñòóïèâøèõ â êðóã Áðàòñòâà.
    ai_output(self, other, "DIA_BaalTondral_Loyality_13_02"); //Åñëè òû óáåäèøü îäíîãî èç íåâåðíûõ ïðèñîåäèíèòüñÿ ê íàøåìó Ëàãåðþ, ýòèì òû äîêàæåøü ñâîå ñòðåìëåíèå ñëóæèòü Áðàòñòâó.
    log_createtopic(ch1_recruitdusty, log_mission);
    log_settopicstatus(ch1_recruitdusty, log_running);
    b_logentry(ch1_recruitdusty, ch1_recruitdusty_2);
    baaltondral_getnewguy = log_running;
};

instance dia_baaltondral_newmember(c_info) {
    npc = gur_1203_baaltondral /*7460*/;
    nr = 1;
    condition = dia_baaltondral_newmember_condition;
    information = dia_baaltondral_newmember_info;
    permanent = true;
    description = "Ãäå ìíå íàéòè òàêîãî ÷åëîâåêà?";
};

func int dia_baaltondral_newmember_condition() {
    if (baaltondral_getnewguy == log_running) {
        return 1;
    };
};

func void dia_baaltondral_newmember_info() {
    ai_output(other, self, "DIA_BaalTondral_NewMember_15_00"); //Ãäå ìíå íàéòè òàêîãî ÷åëîâåêà?
    ai_output(self, other, "DIA_BaalTondral_NewMember_13_01"); //Ëó÷øå âñåãî äëÿ ýòîãî ïîäõîäèò Ñòàðûé Ëàãåðü. Ëþäè òàì óñòàëè îò ñòðàõà è ëæè. Äóøè èõ æàæäóò ïðîñâåòëåíèÿ è ïîääåðæêè.
    ai_output(self, other, "DIA_BaalTondral_NewMember_13_02"); //ß äóìàþ, ÷òî â Íîâîì Ëàãåðå òû åäâà ëè äîáüåøüñÿ óñïåõà. Òàì æèâóò íàñòîÿùèå âàðâàðû.
};

instance dia_baaltondral_newmember2(c_info) {
    npc = gur_1203_baaltondral /*7460*/;
    nr = 1;
    condition = dia_baaltondral_newmember2_condition;
    information = dia_baaltondral_newmember2_info;
    description = "Ïî÷åìó âàì òàê íóæíû íîâûå ëþäè?";
};

func int dia_baaltondral_newmember2_condition() {
    if (baaltondral_getnewguy == log_running) {
        return 1;
    };
};

func void dia_baaltondral_newmember2_info() {
    ai_output(other, self, "DIA_BaalTondral_NewMember2_15_00"); //Ïî÷åìó âàì òàê íóæíû íîâûå ëþäè?
    ai_output(self, other, "DIA_BaalTondral_NewMember2_13_01"); //Íàøåìó Ìàñòåðó áûëî âèäåíèå - ñ íèì ãîâîðèë Ñïÿùèé. Ó âñåìîãóùåãî åñòü äëÿ íàñ âàæíîå ñîîáùåíèå.
    ai_output(self, other, "DIA_BaalTondral_NewMember2_13_02"); //Íî îí åùå íå âîøåë â ïîëíóþ ñèëó. Âîò ïî÷åìó åìó íóæíà ÍÀØÀ ïîìîùü, äëÿ òîãî ÷òîáû ãîâîðèòü ñ íàìè.
    ai_output(self, other, "DIA_BaalTondral_NewMember2_13_03"); //Âñå ìû ãîòîâèìñÿ ê Âåëèêîé Öåðåìîíèè, è ÷åì áîëüøå ëþäåé ïðèìåò â íåé ó÷àñòèå, òåì áîëüøå íàøè øàíñû íà óñïåõ.
    ai_output(self, other, "DIA_BaalTondral_NewMember2_13_04"); //Åñëè òû õî÷åøü óçíàòü áîëüøå, èäè íà ïëîùàäü ïåðåä Õîëìîì. Íî íå îòâëåêàé Ìàñòåðà îò åãî ðàçìûøëåíèé!
};

instance dia_baaltondral_dustysuccess(c_info) {
    npc = gur_1203_baaltondral /*7460*/;
    nr = 1;
    condition = dia_baaltondral_dustysuccess_condition;
    information = dia_baaltondral_dustysuccess_info;
    description = "Ýòîò ÷åëîâåê èùåò òâîåãî ðàñïîëîæåíèÿ, ãîñïîäèí ìîé!";
};

func int dia_baaltondral_dustysuccess_condition() {
    var c_npc dusty;

    dusty = hlp_getnpc(vlk_524_dusty);
    if ((baaltondral_getnewguy == log_running) && (npc_getdisttonpc(self, dusty) < 1000)) {
        return 1;
    };
};

func void dia_baaltondral_dustysuccess_info() {
    var c_npc dusty;

    dusty = hlp_getnpc(vlk_524_dusty);
    ai_output(other, self, "DIA_BaalTondral_DustySuccess_15_00"); //Ýòîò ÷åëîâåê èùåò òâîåãî ðàñïîëîæåíèÿ, ãîñïîäèí ìîé!
    ai_output(self, other, "DIA_BaalTondral_DustySuccess_13_01"); //Êîãî òû ïðèâåë êî ìíå? Äîñòîèí ëè îí?
    ai_output(other, self, "DIA_BaalTondral_DustySuccess_15_02"); //Âíå ñîìíåíèé, îí íóæäàåòñÿ â äóõîâíîì íàñòàâíèêå, ãîñïîäèí.
    ai_output(self, other, "DIA_BaalTondral_DustySuccess_13_03"); //Î÷åíü õîðîøî. Ñ ýòîãî ìîìåíòà îí áóäåò îäíèì èç ìîèõ ó÷åíèêîâ.
    ai_turntonpc(self, dusty);
    ai_turntonpc(dusty, self);
    ai_output(self, NULL, "DIA_BaalTondral_DustySuccess_13_04"); //Òû áóäåøü ïðèõîäèòü êî ìíå êàæäûé äåíü è ñëóøàòü òî, ÷òî ÿ ñêàæó òåáå. Òâîÿ äóøà åùå ìîæåò áûòü ñïàñåíà.
    ai_waittillend(dusty, self);
    dusty.aivar[36] = false;
    dusty.flags = 0;
    dusty.guild = gil_nov;
    npc_settrueguild(dusty, gil_nov);
    b_exchangeroutine(vlk_524_dusty /*8410*/, "PREPARERITUAL");
    baaltondral_getnewguy = log_success;
    b_logentry(ch1_recruitdusty, ch1_recruitdusty_3);
    log_settopicstatus(ch1_recruitdusty, log_success);
    b_givexp(xp_delivereddusty);
};

instance dia_baaltondral_sendtokalom(c_info) {
    npc = gur_1203_baaltondral /*7460*/;
    nr = 1;
    condition = dia_baaltondral_sendtokalom_condition;
    information = dia_baaltondral_sendtokalom_info;
    description = "Ãîñïîäèí! ß õî÷ó ñòàòü îäíèì èç ÷ëåíîâ Áðàòñòâà.";
};

func int dia_baaltondral_sendtokalom_condition() {
    if (baaltondral_getnewguy == log_success) {
        return 1;
    };
};

func void dia_baaltondral_sendtokalom_info() {
    ai_output(other, self, "DIA_BaalTondral_SendToKalom_15_00"); //Ãîñïîäèí! ß õî÷ó ñòàòü îäíèì èç ÷ëåíîâ Áðàòñòâà è ìîëþ òåáÿ î ïîääåðæêå.
    ai_turntonpc(self, other);
    ai_output(self, other, "DIA_BaalTondral_SendToKalom_13_01"); //Òû çàñëóæèë åå. Èäè ê Êîð Ãàëîìó è ïðîñè ó íåãî ðîáó ïîñëóøíèêà.
    b_logentry(ch1_joinpsi, ch1_joinpsi_3);
};

instance dia_baalnamib_exit(c_info) {
    npc = gur_1204_baalnamib /*7462*/;
    nr = 999;
    condition = dia_baalnamib_exit_condition;
    information = dia_baalnamib_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_baalnamib_exit_condition() {
    return 1;
};

func void dia_baalnamib_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_baalnamib_notalk(c_info) {
    npc = gur_1204_baalnamib /*7462*/;
    nr = 1;
    condition = dia_baalnamib_notalk_condition;
    information = dia_baalnamib_notalk_info;
    permanent = true;
    important = true;
};

func int dia_baalnamib_notalk_condition() {
    if ((npc_isinstate(self, zs_talk) && (baalnamib_ansprechbar == false)) && (npc_getpermattitude(self, other) != att_friendly)) {
        return 1;
    };
};

func void dia_baalnamib_notalk_info() {
    info_clearchoices(dia_baalnamib_notalk /*9681*/);
    info_addchoice(dia_baalnamib_notalk /*9681*/, dialog_ende, dia_baalnamib_notalk_ende);
    info_addchoice(dia_baalnamib_notalk /*9681*/, "Âñå â ïîðÿäêå, ïðèÿòåëü?", dia_baalnamib_notalk_imp);
    info_addchoice(dia_baalnamib_notalk /*9681*/, "Äà ïðåáóäåò ñ òîáîé Ñïÿùèé!", dia_baalnamib_notalk_sleeper);
    info_addchoice(dia_baalnamib_notalk /*9681*/, "Ïðèâåò! ß çäåñü íîâåíüêèé.", dia_baalnamib_notalk_hi);
};

func void dia_baalnamib_notalk_hi() {
    ai_output(other, self, "DIA_BaalNamib_NoTalk_Hi_15_00"); //Ïðèâåò! ß çäåñü íîâåíüêèé!
    ai_output(self, other, "DIA_BaalNamib_NoTalk_Hi_02_01"); //(âçäîõ)
    baalnamib_sakrileg = true;
};

func void dia_baalnamib_notalk_sleeper() {
    ai_output(other, self, "DIA_BaalNamib_NoTalk_Sleeper_15_00"); //Äà ïðåáóäåò ñ òîáîé Ñïÿùèé!
    ai_output(self, other, "DIA_BaalNamib_NoTalk_Sleeper_02_01"); //(âçäîõ)
    baalnamib_sakrileg = true;
};

func void dia_baalnamib_notalk_imp() {
    ai_output(other, self, "DIA_BaalNamib_NoTalk_Imp_15_00"); //Âñå â ïîðÿäêå, ïðèÿòåëü?
    ai_output(self, other, "DIA_BaalNamib_NoTalk_Imp_02_01"); //(âçäîõ)
    baalnamib_sakrileg = true;
};

func void dia_baalnamib_notalk_ende() {
    ai_stopprocessinfos(self);
};

instance dia_baalnamib_firsttalk(c_info) {
    npc = gur_1204_baalnamib /*7462*/;
    nr = 1;
    condition = dia_baalnamib_firsttalk_condition;
    information = dia_baalnamib_firsttalk_info;
    important = true;
};

func int dia_baalnamib_firsttalk_condition() {
    if (baalnamib_ansprechbar == true) {
        return 1;
    };
};

func void dia_baalnamib_firsttalk_info() {
    ai_output(self, other, "DIA_BaalNamib_FirstTalk_02_00"); //(âçäîõ)
    ai_output(self, other, "DIA_BaalNamib_FirstTalk_02_01"); //Ñïÿùèé èçáðàë òåáÿ. Òû è â ñàìîì äåëå õî÷åøü ïðèñîåäèíèòüñÿ ê íàì?
    info_clearchoices(dia_baalnamib_firsttalk /*9688*/);
    info_addchoice(dia_baalnamib_firsttalk /*9688*/, "ÍÈ×ÅÃÎ ÍÅ ÃÎÂÎÐÈ.", dia_baalnamib_firsttalk_mute);
    info_addchoice(dia_baalnamib_firsttalk /*9688*/, "Äà, ÿ õî÷ó ñòàòü ïîñëåäîâàòåëåì Ñïÿùåãî.", dia_baalnamib_firsttalk_sleeper);
};

func void dia_baalnamib_firsttalk_mute() {
    ai_output(other, self, "DIA_BaalNamib_FirstTalk_Mute_15_00"); //(âçäîõ)
    ai_output(self, other, "DIA_BaalNamib_FirstTalk_Mute_02_01"); //Íó?
};

func void dia_baalnamib_firsttalk_sleeper() {
    ai_output(other, self, "DIA_BaalNamib_FirstTalk_Sleeper_15_00"); //Äà, ÿ õî÷ó ñòàòü ïîñëåäîâàòåëåì Ñïÿùåãî.
    ai_output(self, other, "DIA_BaalNamib_FirstTalk_Sleeper_02_01"); //Èäè ê Êîð Ãàëîìó. Ñêàæè åìó, ÷òî ÿ ñ÷èòàþ òåáÿ èñòèííî âåðóþùèì!
    info_clearchoices(dia_baalnamib_firsttalk /*9688*/);
    b_logentry(ch1_joinpsi, ch1_joinpsi_2);
    b_givexp(xp_impressbaalnamib);
};

instance gur_1204_baalnamib_armor(c_info) {
    npc = gur_1204_baalnamib /*7462*/;
    nr = 0;
    condition = gur_1204_baalnamib_armor_condition;
    information = gur_1204_baalnamib_armor_info;
    permanent = true;
    description = "Ìíå íóæíû äîñïåõè ïîëó÷øå.";
};

func int gur_1204_baalnamib_armor_condition() {
    if ((npc_gettrueguild(hero) == gil_nov) && (!npc_hasitems(hero, nov_armor_h))) {
        return true;
    };
};

func void gur_1204_baalnamib_armor_info() {
    ai_output(hero, self, "GUR_1204_BaalNamib_ARMOR_Info_15_01"); //Ìíå íóæíû äîñïåõè ïîëó÷øå.
    if (kapitel < 2) {
        ai_output(self, other, "GUR_1204_BaalNamib_ARMOR_Info_02_02"); //Òåáå åùå ðàíî íîñèòü òÿæåëûå äîñïåõè ïîñëóøíèêà.
    }
    else if (npc_hasitems(hero, itminugget) < value_nov_armor_h) {
        ai_output(self, other, "GUR_1204_BaalNamib_ARMOR_Info_02_03"); //Âîçâðàùàéñÿ, êîãäà ñîáåðåøü äîñòàòî÷íî ðóäû.
    }
    else {
        ai_output(self, other, "GUR_1204_BaalNamib_ARMOR_Info_02_04"); //Ýòè äîñïåõè çàùèòÿò òåëî òâîå, òàê æå êàê Ñïÿùèé çàùèùàåò òâîþ äóøó!
        createinvitem(self, nov_armor_h);
        b_giveinvitems(self, hero, nov_armor_h /*4140*/, 1);
        b_giveinvitems(hero, self, itminugget /*4517*/, value_nov_armor_h);
    };
};

instance info_baalnamib_brotherhood(c_info) {
    npc = gur_1204_baalnamib /*7462*/;
    nr = 0;
    condition = info_baalnamib_brotherhood_condition;
    information = info_baalnamib_brotherhood_info;
    description = "Ìîãó ëè ÿ ÷òî-íèáóäü ñäåëàòü äëÿ Áðàòñòâà?";
};

func int info_baalnamib_brotherhood_condition() {
};

func void info_baalnamib_brotherhood_info() {
    var c_npc kalom;

    ai_output(other, self, "Info_BaalNamib_BROTHERHOOD_15_01"); //Ìîãó ëè ÿ ÷òî-íèáóäü ñäåëàòü äëÿ Áðàòñòâà?
    ai_output(self, other, "Info_BaalNamib_BROTHERHOOD_02_02"); //Íàøåìó Ìàñòåðó, ìóäðåéøåìó Þ`Áåðèîíó, íóæåí ïîñëóøíèê. Èäè ê íåìó è ïðåäëîæè ñâîè óñëóãè.
    info_clearchoices(info_baalnamib_brotherhood /*9696*/);
    info_addchoice(info_baalnamib_brotherhood /*9696*/, "Õîðîøî, ÿ îòïðàâëþñü ê íåìó ïðÿìî ñåé÷àñ.", info_baalnamib_brotherhood_ok);
    info_addchoice(info_baalnamib_brotherhood /*9696*/, "Ãäå ÿ ìîãó íàéòè Þ`Áåðèîíà?", info_baalnamib_brotherhood_ybwo);
    info_addchoice(info_baalnamib_brotherhood /*9696*/, "Íå çíàåøü ëè òû, êàêîå ïîðó÷åíèå äàñò ìíå  Þ`Áåðèîí?", info_baalnamib_brotherhood_ybwas);
    kalom = hlp_getnpc(gur_1201_corkalom);
    npc_exchangeroutine(kalom, "kapitel2");
    ai_continueroutine(kalom);
};

func void info_baalnamib_brotherhood_ybwo() {
    ai_output(other, self, "Info_BaalNamib_BROTHERHOOD_YBWO_15_01"); //Ãäå ÿ ìîãó íàéòè Þ`Áåðèîíà?
    ai_output(self, other, "Info_BaalNamib_BROTHERHOOD_YBWO_02_02"); //Õîëì. Êàê è âñåãäà, âïðî÷åì.
};

func void info_baalnamib_brotherhood_ybwas() {
    ai_output(other, self, "Info_BaalNamib_BROTHERHOOD_YBWAS_15_01"); //Íå çíàåøü ëè òû, êàêîå ïîðó÷åíèå äàñò ìíå  Þ`Áåðèîí?
    ai_output(self, other, "Info_BaalNamib_BROTHERHOOD_YBWAS_02_02"); //Âñå ìû æäåì Âåëèêîé Öåðåìîíèè. Íî ïðåæäå ÷åì îíà íà÷íåòñÿ, íàì ïîòðåáóåòñÿ ìàãè÷åñêèé àðòåôàêò.
    ai_output(self, other, "Info_BaalNamib_BROTHERHOOD_YBWAS_02_03"); //Þ`Áåðèîí èùåò õðàáðåöà, êîòîðûé íàéäåò åãî.
    ai_output(other, self, "Info_BaalNamib_BROTHERHOOD_YBWAS_15_04"); //Íó, ýòî ïðîñòî.
    ai_output(self, other, "Info_BaalNamib_BROTHERHOOD_YBWAS_02_05"); //Åñëè áû ýòî áûëî òàê ïðîñòî, àðòåôàêò áûë áû óæå ó íàñ. Ïðåæäå ïîãîâîðè ñ Þ`Áåðèîíîì. Îí òåáå âñå îáúÿñíèò.
};

func void info_baalnamib_brotherhood_ok() {
    ai_output(other, self, "Info_BaalNamib_BROTHERHOOD_OK_15_01"); //ß îáðàùóñü ê íåìó íåìåäëåííî.
    ai_output(self, other, "Info_BaalNamib_BROTHERHOOD_OK_02_02"); //Äà õðàíèò òåáÿ Ñïÿùèé!
    info_clearchoices(info_baalnamib_brotherhood /*9696*/);
};

instance dia_baalcadar_exit(c_info) {
    npc = gur_1208_baalcadar /*7470*/;
    nr = 999;
    condition = dia_baalcadar_exit_condition;
    information = dia_baalcadar_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_baalcadar_exit_condition() {
    return 1;
};

func void dia_baalcadar_exit_info() {
    ai_stopprocessinfos(self);
};

var int baalcadar_ansprechbar;

var int baalcadar_sakrileg;

instance dia_baalcadar_notalk(c_info) {
    npc = gur_1208_baalcadar /*7470*/;
    nr = 2;
    condition = dia_baalcadar_notalk_condition;
    information = dia_baalcadar_notalk_info;
    permanent = true;
    important = true;
};

func int dia_baalcadar_notalk_condition() {
    if (((npc_isinstate(self, zs_talk) && (baalcadar_ansprechbar == false)) && (npc_getpermattitude(self, other) != att_friendly)) && (npc_gettrueguild(other) == gil_none)) {
        return 1;
    };
};

func void dia_baalcadar_notalk_info() {
    info_clearchoices(dia_baalcadar_notalk /*9708*/);
    info_addchoice(dia_baalcadar_notalk /*9708*/, dialog_ende, dia_baalcadar_notalk_ende);
    info_addchoice(dia_baalcadar_notalk /*9708*/, "Âñå â ïîðÿäêå, ïðèÿòåëü?", dia_baalcadar_notalk_imp);
    info_addchoice(dia_baalcadar_notalk /*9708*/, "Äà ïðåáóäåò ñ òîáîé Ñïÿùèé!", dia_baalcadar_notalk_sleeper);
    info_addchoice(dia_baalcadar_notalk /*9708*/, "Ïðèâåò! ß çäåñü íîâåíüêèé.", dia_baalcadar_notalk_hi);
};

func void dia_baalcadar_notalk_hi() {
    ai_output(other, self, "DIA_BaalCadar_NoTalk_Hi_15_00"); //Ïðèâåò! ß çäåñü íîâåíüêèé!
    ai_output(self, other, "DIA_BaalCadar_NoTalk_Hi_02_01"); //(âçäîõ)
    baalcadar_sakrileg = true;
};

func void dia_baalcadar_notalk_sleeper() {
    ai_output(other, self, "DIA_BaalCadar_NoTalk_Sleeper_15_00"); //Äà ïðåáóäåò ñ òîáîé Ñïÿùèé!
    ai_output(self, other, "DIA_BaalCadar_NoTalk_Sleeper_02_01"); //(âçäîõ)
    baalcadar_sakrileg = true;
};

func void dia_baalcadar_notalk_imp() {
    ai_output(other, self, "DIA_BaalCadar_NoTalk_Imp_15_00"); //Âñå â ïîðÿäêå, ïðèÿòåëü?
    ai_output(self, other, "DIA_BaalCadar_NoTalk_Imp_02_01"); //(âçäîõ)
    baalcadar_sakrileg = true;
};

func void dia_baalcadar_notalk_ende() {
    ai_stopprocessinfos(self);
};

instance dia_baalcadar_sleepspell(c_info) {
    npc = gur_1208_baalcadar /*7470*/;
    nr = 1;
    condition = dia_baalcadar_sleepspell_condition;
    information = dia_baalcadar_sleepspell_info;
    important = true;
};

func int dia_baalcadar_sleepspell_condition() {
    var c_npc nov1336;
    var c_npc nov1340;
    var c_npc nov1345;

    nov1336 = hlp_getnpc(nov_1336_novize);
    nov1340 = hlp_getnpc(nov_1340_novize);
    nov1345 = hlp_getnpc(nov_1345_novize);
    if ((npc_isinstate(nov1336, zs_magicsleep) || npc_isinstate(nov1340, zs_magicsleep)) || npc_isinstate(nov1345, zs_magicsleep)) {
        return 1;
    };
};

func void dia_baalcadar_sleepspell_info() {
    ai_output(self, other, "DIA_BaalCadar_SleepSpell_02_00"); //×òî òû äåëàåøü? ß ïðåäàþñü ðàçìûøëåíèÿì âìåñòå ñ ìîèìè ó÷åíèêàìè.
    ai_output(self, other, "DIA_BaalCadar_SleepSpell_02_01"); //Êòî íàó÷èë òåáÿ èñïîëüçîâàòü ìàãè÷åñêóþ ñèëó Ñïÿùåãî?
    ai_output(other, self, "DIA_BaalCadar_SleepSpell_15_02"); //Íèêòî. Ýòî âåäü î÷åíü ïðîñòî.
    ai_output(self, other, "DIA_BaalCadar_SleepSpell_02_03"); //Òû êàæåøüñÿ ìíå ñïîñîáíûì ó÷åíèêîì. ß áóäó ó÷èòü òåáÿ.
    baalcadar_ansprechbar = true;
    if (npc_gettrueguild(hero) == gil_none) {
        log_createtopic(ch1_joinpsi, log_mission);
        log_settopicstatus(ch1_joinpsi, log_running);
    };
    b_logentry(ch1_joinpsi, ch1_joinpsi_6);
    b_givexp(xp_impressbaalcadar);
};

instance gur_1208_baalcadar_teach(c_info) {
    npc = gur_1208_baalcadar /*7470*/;
    nr = 0;
    condition = gur_1208_baalcadar_teach_condition;
    information = gur_1208_baalcadar_teach_info;
    permanent = true;
    description = "Ìíå áû õîòåëîñü óçíàòü, êàê óâåëè÷èòü ñèëó ìîåé ìàãèè.";
};

func int gur_1208_baalcadar_teach_condition() {
    if ((baalcadar_ansprechbar == true) || (npc_gettrueguild(other) != gil_none)) {
        return true;
    };
};

func void gur_1208_baalcadar_teach_info() {
    ai_output(other, self, "Gur_1208_BaalCadar_Teach_Info_15_01"); //Ìíå áû õîòåëîñü óçíàòü, êàê óâåëè÷èòü ñèëó ìîåé ìàãèè.
    ai_output(self, other, "Gur_1208_BaalCadar_Teach_Info_02_02"); //Êëþ÷ ê ýòîìó êðîåòñÿ â ñèëå òâîåãî äóõà.
    if (log_baalcadartrain == false) {
        log_createtopic(ge_teacherpsi, log_note);
        b_logentry(ge_teacherpsi, ge_teacherpsi_1);
        log_baalcadartrain = true;
    };
    info_clearchoices(gur_1208_baalcadar_teach /*9721*/);
    info_addchoice(gur_1208_baalcadar_teach /*9721*/, dialog_back, gur_1208_baalcadar_teach_back);
    info_addchoice(gur_1208_baalcadar_teach /*9721*/, b_buildlearnstring(name_learnmana_5, 5 * lpcost_attribute_mana, 0), gur_1208_baalcadar_teach_man_5);
    info_addchoice(gur_1208_baalcadar_teach /*9721*/, b_buildlearnstring(name_learnmana_1, lpcost_attribute_mana, 0), gur_1208_baalcadar_teach_man_1);
};

func void gur_1208_baalcadar_teach_back() {
    info_clearchoices(gur_1208_baalcadar_teach /*9721*/);
};

func void gur_1208_baalcadar_teach_man_1() {
    b_buyattributepoints(other, atr_mana_max, lpcost_attribute_mana);
    info_clearchoices(gur_1208_baalcadar_teach /*9721*/);
    info_addchoice(gur_1208_baalcadar_teach /*9721*/, dialog_back, gur_1208_baalcadar_teach_back);
    info_addchoice(gur_1208_baalcadar_teach /*9721*/, b_buildlearnstring(name_learnmana_5, 5 * lpcost_attribute_mana, 0), gur_1208_baalcadar_teach_man_5);
    info_addchoice(gur_1208_baalcadar_teach /*9721*/, b_buildlearnstring(name_learnmana_1, lpcost_attribute_mana, 0), gur_1208_baalcadar_teach_man_1);
};

func void gur_1208_baalcadar_teach_man_5() {
    b_buyattributepoints(other, atr_mana_max, 5 * lpcost_attribute_mana);
    info_clearchoices(gur_1208_baalcadar_teach /*9721*/);
    info_addchoice(gur_1208_baalcadar_teach /*9721*/, dialog_back, gur_1208_baalcadar_teach_back);
    info_addchoice(gur_1208_baalcadar_teach /*9721*/, b_buildlearnstring(name_learnmana_5, 5 * lpcost_attribute_mana, 0), gur_1208_baalcadar_teach_man_5);
    info_addchoice(gur_1208_baalcadar_teach /*9721*/, b_buildlearnstring(name_learnmana_1, lpcost_attribute_mana, 0), gur_1208_baalcadar_teach_man_1);
};

instance gur_1208_baalcadar_firsttest(c_info) {
    npc = gur_1208_baalcadar /*7470*/;
    nr = 0;
    condition = gur_1208_baalcadar_firsttest_condition;
    information = gur_1208_baalcadar_firsttest_info;
    description = "Íàó÷è ìåíÿ ìàãèè ðóí.";
};

func int gur_1208_baalcadar_firsttest_condition() {
    if (c_npcbelongstopsicamp(hero)) {
        return true;
    };
};

func void gur_1208_baalcadar_firsttest_info() {
    ai_output(other, self, "Gur_1208_BaalCadar_FIRSTTEST_Info_15_01"); //Íàó÷è ìåíÿ ìàãèè ðóí.
    ai_output(self, other, "Gur_1208_BaalCadar_FIRSTTEST_Info_02_02"); //Ìíîãèå âûó÷èëè ÿçûê ðóí, íî î÷åíü íåìíîãèì äàíî ïîñòè÷ü ñóòü èõ ìàãèè.
    ai_output(self, other, "Gur_1208_BaalCadar_FIRSTTEST_Info_02_03"); //ß ïîïðîáóþ íàó÷èòü òåáÿ.
    log_createtopic(ge_teacherpsi, log_note);
    b_logentry(ge_teacherpsi, ge_teacherpsi_2);
};

instance gur_1208_baalcadar_kreis1(c_info) {
    npc = gur_1208_baalcadar /*7470*/;
    nr = 0;
    condition = gur_1208_baalcadar_kreis1_condition;
    information = gur_1208_baalcadar_kreis1_info;
    permanent = true;
    description = "ß ãîòîâ âñòóïèòü â Ïåðâûé Êðóã.";
};

func int gur_1208_baalcadar_kreis1_condition() {
    if (((npc_gettalentskill(hero, npc_talent_mage) == 0) && npc_knowsinfo(hero, gur_1208_baalcadar_firsttest /*9727*/)) && c_npcbelongstopsicamp(hero)) {
        return true;
    };
};

func void gur_1208_baalcadar_kreis1_info() {
    ai_output(other, self, "Gur_1208_BaalCadar_KREIS1_Info_15_01"); //ß ãîòîâ âñòóïèòü â Ïåðâûé Êðóã.
    if (b_giveskill(other, npc_talent_mage, 1, lpcost_talent_mage_1)) {
        ai_output(self, other, "Gur_1208_BaalCadar_KREIS1_Info_02_02"); //Òàê ñëóøàé æå ìåíÿ.
        ai_output(self, other, "Gur_1208_BaalCadar_KREIS1_Info_02_03"); //Äàâíûì äàâíî ïîÿâèëñÿ Ñïÿùèé, è ïîñëàë îí ðîäó ÷åëîâå÷åñêîìó âèäåíèå.
        ai_output(self, other, "Gur_1208_BaalCadar_KREIS1_Info_02_04"); //Íî ëþäè íå ñìîãëè óâèäåòü åãî, èáî îñëåïëÿëà èõ æàäíîñòü.
        ai_output(self, other, "Gur_1208_BaalCadar_KREIS1_Info_02_05"); //Ëèøü Þ`Áåðèîí è ñ íèì íåñêîëüêî èçáðàííûõ îòäåëèëèñü îò ñëåïîé òîëïû è îñíîâàëè Áðàòñòâî.
        ai_output(self, other, "Gur_1208_BaalCadar_KREIS1_Info_02_06"); //Â òîò ìîìåíò, êîãäà îíè ïîñëåäîâàëè çîâó Ñïÿùåãî, áûë ðîæäåí Ïåðâûé Êðóã. Ìàãèÿ ðóí ïîêîðèòñÿ òîìó, êòî èäåò çà Ñïÿùèì.
    };
    ai_stopprocessinfos(self);
};

instance gur_1208_baalcadar_kreis2(c_info) {
    npc = gur_1208_baalcadar /*7470*/;
    nr = 0;
    condition = gur_1208_baalcadar_kreis2_condition;
    information = gur_1208_baalcadar_kreis2_info;
    permanent = true;
    description = "ß ãîòîâ âñòóïèòü âî Âòîðîé Êðóã.";
};

func int gur_1208_baalcadar_kreis2_condition() {
    if ((npc_gettalentskill(hero, npc_talent_mage) == 1) && c_npcbelongstopsicamp(hero)) {
        return true;
    };
};

func void gur_1208_baalcadar_kreis2_info() {
    ai_output(other, self, "Gur_1208_BaalCadar_KREIS2_Info_15_01"); //ß ãîòîâ âñòóïèòü âî Âòîðîé Êðóã.
    if (b_giveskill(other, npc_talent_mage, 2, lpcost_talent_mage_2)) {
        ai_output(self, other, "Gur_1208_BaalCadar_KREIS2_Info_02_02"); //Òàê ñëóøàé æå ìåíÿ è ïîñòàðàéñÿ ïîíÿòü.
        ai_output(self, other, "Gur_1208_BaalCadar_KREIS2_Info_02_03"); //Ñïÿùèé ïðèâåë Þ`Áåðèîíà è åãî âåðíûõ ó÷åíèêîâ â ýòî ìåñòî, ãäå îíè îñíîâàëè õðàì.
        ai_output(self, other, "Gur_1208_BaalCadar_KREIS2_Info_02_04"); //Îíè òðóäèëèñü, íå ïîêëàäàÿ ðóê, - äåíü çà äíåì, íåäåëÿ çà íåäåëåé, ìåñÿö çà ìåñÿöåì. Ëàãåðü ðîñ. Âñå áîëüøå è áîëüøå ëþäåé ïðèñîåäèíÿëîñü ê íåìó, ñëåäóÿ çîâó Ñïÿùåãî.
        ai_output(self, other, "Gur_1208_BaalCadar_KREIS2_Info_02_05"); //Âìåñòå îíè ïûòàëèñü ãîâîðèòü ñî Ñïÿùèì íà ñïèðèòè÷åñêîì óðîâíå.
        ai_output(self, other, "Gur_1208_BaalCadar_KREIS2_Info_02_06"); //Òàê áûë ðîæäåí Âòîðîé Êðóã.
    };
    ai_stopprocessinfos(self);
};

instance gur_1208_baalcadar_kreis3(c_info) {
    npc = gur_1208_baalcadar /*7470*/;
    nr = 0;
    condition = gur_1208_baalcadar_kreis3_condition;
    information = gur_1208_baalcadar_kreis3_info;
    permanent = true;
    description = "ß ãîòîâ âñòóïèòü â Òðåòèé Êðóã.";
};

func int gur_1208_baalcadar_kreis3_condition() {
    if ((npc_gettalentskill(hero, npc_talent_mage) == 2) && c_npcbelongstopsicamp(hero)) {
        return true;
    };
};

func void gur_1208_baalcadar_kreis3_info() {
    ai_output(other, self, "Gur_1208_BaalCadar_KREIS3_Info_15_01"); //ß ãîòîâ âñòóïèòü â Òðåòèé Êðóã.
    if (b_giveskill(other, npc_talent_mage, 3, lpcost_talent_mage_3)) {
        ai_output(self, other, "Gur_1208_BaalCadar_KREIS3_Info_02_02"); //Çàïîìíè.
        ai_output(self, other, "Gur_1208_BaalCadar_KREIS3_Info_02_03"); //Âèäåíèÿ ïðîÿñíÿëèñü, íî ñïèðèòè÷åñêîé ñèëû Áðàòñòâà áûëî íåäîñòàòî÷íî äëÿ òîãî, ÷òîáû ïðèçâàòü Ñïÿùåãî.
        ai_output(self, other, "Gur_1208_BaalCadar_KREIS3_Info_02_04"); //Ðåøåíèå íàøåë îäèí èç Ãóðó, àëõèìèê. Îíè ïðèãîòîâèë ýëèêñèð èç ñëþíû ïîëçóíîâ. Áðàòüÿ âûïèëè åãî ïåðåä ìîëèòâîé, è âïåðâûå èõ ñèëû îáúåäèíèëèñü.
        ai_output(self, other, "Gur_1208_BaalCadar_KREIS3_Info_02_05"); //Â òî ñàìîå âðåìÿ ïî äðóãèì Ëàãåðÿì ðàçîøëèñü ïîñëóøíèêè - íåñòè ëþäÿì ñëîâî Ñïÿùåãî è îáðàùàòü ÿçû÷íèêîâ â èñòèííóþ âåðó.
        ai_output(self, other, "Gur_1208_BaalCadar_KREIS3_Info_02_06"); //Òàê áûë çàâåðøåí Òðåòèé Êðóã.
    };
    ai_stopprocessinfos(self);
};

instance gur_1208_baalcadar_kreis4(c_info) {
    npc = gur_1208_baalcadar /*7470*/;
    nr = 0;
    condition = gur_1208_baalcadar_kreis4_condition;
    information = gur_1208_baalcadar_kreis4_info;
    permanent = true;
    description = "ß ãîòîâ âñòóïèòü â ×åòâåðòûé Êðóã.";
};

func int gur_1208_baalcadar_kreis4_condition() {
    if ((npc_gettalentskill(hero, npc_talent_mage) == 3) && c_npcbelongstopsicamp(hero)) {
        return true;
    };
};

func void gur_1208_baalcadar_kreis4_info() {
    ai_output(other, self, "Gur_1208_BaalCadar_KREIS4_Info_15_01"); //ß ãîòîâ âñòóïèòü â ×åòâåðòûé Êðóã.
    if (b_giveskill(other, npc_talent_mage, 4, lpcost_talent_mage_4)) {
        ai_output(self, other, "Gur_1208_BaalCadar_KREIS4_Info_02_02"); //Ìíîãî âîäû óòåêëî ñî âðåìåí îñíîâàíèÿ Ëàãåðÿ. Ìíîãîå èçìåíèëîñü.
        ai_output(self, other, "Gur_1208_BaalCadar_KREIS4_Info_02_03"); //Âåðà ëþäåé ðîñëà, ðàñïðîñòðàíÿëàñü è êðåïëà.
        ai_output(self, other, "Gur_1208_BaalCadar_KREIS4_Info_02_04"); //Ìû íå çàáûëè íàøó öåëü. Ìû íå îñòàâèëè ïîïûòîê ïðèçâàòü Ñïÿùåãî.
        ai_output(self, other, "Gur_1208_BaalCadar_KREIS4_Info_02_05"); //Ñòîéêîñòü è íåïîêîëåáèìîñòü âåðû îáðàçóþò ×åòâåðòûé Êðóã.
        ai_output(self, other, "Gur_1208_BaalCadar_KREIS4_Info_02_06"); //Òåïåðü òåáå îòêðûòû âñå çíàíèÿ áðàòüåâ î ìàãèè. Òû áûë õîðîøèì ó÷åíèêîì.
    };
};

instance gur_1208_baalcadar_sellstuff(c_info) {
    npc = gur_1208_baalcadar /*7470*/;
    nr = 0;
    condition = gur_1208_baalcadar_sellstuff_condition;
    information = gur_1208_baalcadar_sellstuff_info;
    permanent = true;
    trade = true;
    description = dialog_trade;
};

func int gur_1208_baalcadar_sellstuff_condition() {
    if ((baalcadar_ansprechbar == true) || (npc_gettrueguild(other) != gil_none)) {
        return true;
    };
};

func void gur_1208_baalcadar_sellstuff_info() {
    if (log_baalcadarsell == false) {
        log_createtopic(ge_traderpsi, log_note);
        b_logentry(ge_traderpsi, ge_traderpsi_1);
        log_baalcadarsell = true;
    };
    ai_output(other, self, "Gur_1208_BaalCadar_SELLSTUFF_Info_15_01"); //ß õî÷ó îâëàäåòü ìàãè÷åñêèìè çíàêàìè.
};

instance dia_baalorun_exit(c_info) {
    npc = gur_1209_baalorun /*7472*/;
    nr = 999;
    condition = dia_baalorun_exit_condition;
    information = dia_baalorun_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_baalorun_exit_condition() {
    return 1;
};

func void dia_baalorun_exit_info() {
    ai_stopprocessinfos(self);
};

var int baalorun_ansprechbar;

var int baalorun_sakrileg;

instance dia_baalorun_notalk(c_info) {
    npc = gur_1209_baalorun /*7472*/;
    nr = 2;
    condition = dia_baalorun_notalk_condition;
    information = dia_baalorun_notalk_info;
    permanent = true;
    important = true;
};

func int dia_baalorun_notalk_condition() {
    if ((npc_isinstate(self, zs_talk) && (baalorun_ansprechbar == false)) && (npc_getpermattitude(self, other) != att_friendly)) {
        return 1;
    };
};

func void dia_baalorun_notalk_info() {
    info_clearchoices(dia_baalorun_notalk /*9750*/);
    info_addchoice(dia_baalorun_notalk /*9750*/, dialog_ende, dia_baalorun_notalk_ende);
    info_addchoice(dia_baalorun_notalk /*9750*/, "Âñå â ïîðÿäêå, ïðèÿòåëü?", dia_baalorun_notalk_imp);
    info_addchoice(dia_baalorun_notalk /*9750*/, "Äà ïðåáóäåò ñ òîáîé Ñïÿùèé!", dia_baalorun_notalk_sleeper);
    info_addchoice(dia_baalorun_notalk /*9750*/, "Ïðèâåò! ß çäåñü íîâåíüêèé.", dia_baalorun_notalk_hi);
};

func void dia_baalorun_notalk_hi() {
    ai_output(other, self, "DIA_BaalOrun_NoTalk_Hi_15_00"); //Ïðèâåò! ß çäåñü íîâåíüêèé!
    ai_output(self, other, "DIA_BaalOrun_NoTalk_Hi_12_01"); //(âçäîõ)
    baalorun_sakrileg = true;
};

func void dia_baalorun_notalk_sleeper() {
    ai_output(other, self, "DIA_BaalOrun_NoTalk_Sleeper_15_00"); //Äà ïðåáóäåò ñ òîáîé Ñïÿùèé!
    ai_output(self, other, "DIA_BaalOrun_NoTalk_Sleeper_12_01"); //(âçäîõ)
    baalorun_sakrileg = true;
};

func void dia_baalorun_notalk_imp() {
    ai_output(other, self, "DIA_BaalOrun_NoTalk_Imp_15_00"); //Âñå â ïîðÿäêå, ïðèÿòåëü?
    ai_output(self, other, "DIA_BaalOrun_NoTalk_Imp_12_01"); //(âçäîõ)
    baalorun_sakrileg = true;
};

func void dia_baalorun_notalk_ende() {
    ai_stopprocessinfos(self);
};

instance dia_baalorun_firsttalk(c_info) {
    npc = gur_1209_baalorun /*7472*/;
    nr = 1;
    condition = dia_baalorun_firsttalk_condition;
    information = dia_baalorun_firsttalk_info;
    important = true;
};

func int dia_baalorun_firsttalk_condition() {
    if (ghorim_kickharlok == log_success) {
        baalorun_ansprechbar = true;
        return 1;
    };
};

func void dia_baalorun_firsttalk_info() {
    ai_output(self, other, "DIA_BaalOrun_FirstTalk_12_00"); //ß ðàçãîâàðèâàë ñ Ãîðèìîì. Òû îêàçàë îäíîìó èç íàøèõ áðàòüåâ áîëüøóþ óñëóãó - è ïîñòóïèë ìóäðî.
    ai_output(self, other, "DIA_BaalOrun_FirstTalk_12_01"); //Èìåííî ïîýòîìó òû áûë èçáðàí äëÿ âûïîëíåíèÿ îñîáîé ìèññèè.
    ai_output(self, other, "DIA_BaalOrun_FirstTalk_12_02"); //Êîð Ãàëîìó äëÿ åãî ýêñïåðèìåíòîâ ñðî÷íî ïîíàäîáèëñÿ áîëîòíèê.
    ai_output(self, other, "DIA_BaalOrun_FirstTalk_12_03"); //Íàøè ñáîðùèêè òðóäÿòñÿ äåíü è íî÷ü, íå ïîêëàäàÿ ðóê. Îòïðàâëÿéñÿ ê íèì è äîñòàâü äíåâíîé ñáîð â ëàáîðàòîðèþ Ãàëîìà.
    b_givexp(xp_baaloruntalks);
    b_logentry(ch1_ghorimsrelief, ch1_ghorimsrelief_1);
    log_settopicstatus(ch1_ghorimsrelief, log_success);
    log_createtopic(ch1_deliverweed, log_mission);
    log_settopicstatus(ch1_deliverweed, log_running);
    b_logentry(ch1_deliverweed, ch1_deliverweed_1);
    baalorun_fetchweed = log_running;
    info_clearchoices(dia_baalorun_firsttalk /*9757*/);
    info_addchoice(dia_baalorun_firsttalk /*9757*/, "Íè÷åãî íå ãîâîðè.", dia_baalorun_firsttalk_muteende);
    info_addchoice(dia_baalorun_firsttalk /*9757*/, "Ãäå ÿ ìîãó íàéòè ýòèõ ñáîðùèêîâ?", dia_baalorun_firsttalk_where);
};

func void dia_baalorun_firsttalk_where() {
    ai_output(other, self, "DIA_BaalOrun_FirstTalk_Where_15_00"); //Ãäå ÿ ìîãó íàéòè ýòèõ ñáîðùèêîâ?
    ai_output(self, other, "DIA_BaalOrun_FirstTalk_Where_12_01"); //ß åùå íå ïîçâîëÿë òåáå çàäàâàòü âîïðîñû!
    ai_output(self, other, "DIA_BaalOrun_FirstTalk_Where_12_02"); //Ìîëèñü Ñïÿùåìó, äàáû ïðîñòèë îí òâîé ñâÿòîòàòñòâåííûé ïîñòóïîê! È ñòóïàé. Òâîÿ ìèññèÿ î÷åíü âàæíà äëÿ âñåõ íàñ.
    info_clearchoices(dia_baalorun_firsttalk /*9757*/);
    ai_stopprocessinfos(self);
    baalorun_ansprechbar = false;
};

func void dia_baalorun_firsttalk_muteende() {
    info_clearchoices(dia_baalorun_firsttalk /*9757*/);
    ai_stopprocessinfos(self);
    baalorun_ansprechbar = false;
};

instance dia_baalorun_gotweed(c_info) {
    npc = gur_1209_baalorun /*7472*/;
    nr = 1;
    condition = dia_baalorun_gotweed_condition;
    information = dia_baalorun_gotweed_info;
    important = true;
};

func int dia_baalorun_gotweed_condition() {
    if (viran_bloodflies == log_success) {
        return 1;
    };
};

func void dia_baalorun_gotweed_info() {
    ai_output(self, other, "DIA_BaalOrun_GotWeed_12_00"); //Òû çàùèòèë íàøèõ ñáîðùèêîâ...
    ai_output(self, other, "DIA_BaalOrun_GotWeed_12_01"); //Òû íå ïðîñòî äîêàçàë, ÷òî íàõîäèøüñÿ íà íàøåé ñòîðîíå, òû ïðîÿâèë ñåáÿ âåðíûì ñëóãîé Ñïÿùåãî.
    ai_output(self, other, "DIA_BaalOrun_GotWeed_12_02"); //ß ñ÷èòàþ, ÷òî òû äîñòîèí íîñèòü ðîáó ïîñëóøíèêà.
    baalorun_ansprechbar = true;
    log_createtopic(ch1_joinpsi, log_mission);
    if (npc_gettrueguild(hero) == gil_none) {
        log_settopicstatus(ch1_joinpsi, log_running);
    };
    b_logentry(ch1_joinpsi, ch1_joinpsi_5);
    b_givexp(xp_impressedbaalorun);
};

instance dia_baalorun_weedatkaloms(c_info) {
    npc = gur_1209_baalorun /*7472*/;
    nr = 1;
    condition = dia_baalorun_weedatkaloms_condition;
    information = dia_baalorun_weedatkaloms_info;
    description = "ß äîñòàâèë áîëîòíèê Êîð Ãàëîìó.";
};

func int dia_baalorun_weedatkaloms_condition() {
    if (baalorun_fetchweed == log_success) {
        return 1;
    };
};

func void dia_baalorun_weedatkaloms_info() {
    ai_output(other, self, "DIA_BaalOrun_WeedAtKaloms_15_00"); //ß äîñòàâèë áîëîòíèê Êîð Ãàëîìó.
    ai_output(self, other, "DIA_BaalOrun_WeedAtKaloms_12_01"); //Òû õîðîøî ïîðàáîòàë. Âîò íåáîëüøàÿ íàãðàäà çà òâîè ñòàðàíèÿ. Âîçüìè.
    ai_output(self, other, "DIA_BaalOrun_WeedAtKaloms_12_02"); //Ýòî ìàãè÷åñêîå Çàêëèíàíèå Ñíà. Òû ñìîæåøü âîñïîëüçîâàòüñÿ èì òîëüêî îäèí ðàç, íî ÿ íàäåþñü, ÷òî îíî ñîñëóæèò òåáå õîðîøóþ ñëóæáó.
    baalorun_ansprechbar = true;
    b_givexp(xp_reporttobaalorun);
    createinvitem(self, itarscrollsleep);
    b_giveinvitems(self, other, itarscrollsleep /*4215*/, 1);
};

instance dia_baalorun_perm(c_info) {
    npc = gur_1209_baalorun /*7472*/;
    nr = 2;
    condition = dia_baalorun_perm_condition;
    information = dia_baalorun_perm_info;
    permanent = true;
    description = "Êàê ïðîäâèãàåòñÿ äîáû÷à áîëîòíèêà?";
};

func int dia_baalorun_perm_condition() {
    if (baalorun_fetchweed == log_success) {
        return 1;
    };
};

func void dia_baalorun_perm_info() {
    ai_output(other, self, "DIA_BaalOrun_Perm_15_00"); //Êàê ïðîäâèãàåòñÿ äîáû÷à áîëîòíèêà?
    ai_output(self, other, "DIA_BaalOrun_Perm_12_01"); //Êàæäûé èç íàñ òðóäèòñÿ íà ïðåäåëå ñâîèõ ñèë, è â ðåçóëüòàòå ó íàñ äîñòàòî÷íî áîëîòíèêà íå òîëüêî äëÿ ñîáñòâåííûõ íóæä - ìû äàæå ïóñêàåì åãî íà îáìåí ñ äðóãèìè Ëàãåðÿìè.
    ai_output(self, other, "DIA_BaalOrun_Perm_12_02"); //Ýòî æåðòâà, êîòîðóþ íàøè ïîñëóøíèêè ñ ãîòîâíîñòüþ ïðèíîñÿò Ñïÿùåìó.
};

instance dia_baaltyon_exit(c_info) {
    npc = gur_1210_baaltyon /*7474*/;
    nr = 999;
    condition = dia_baaltyon_exit_condition;
    information = dia_baaltyon_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_baaltyon_exit_condition() {
    return 1;
};

func void dia_baaltyon_exit_info() {
    ai_stopprocessinfos(self);
};

var int baaltyon_ansprechbar;

var int baaltyon_sakrileg;

instance dia_baaltyon_notalk(c_info) {
    npc = gur_1210_baaltyon /*7474*/;
    nr = 1;
    condition = dia_baaltyon_notalk_condition;
    information = dia_baaltyon_notalk_info;
    permanent = true;
    important = true;
};

func int dia_baaltyon_notalk_condition() {
    if ((npc_isinstate(self, zs_talk) && (baaltyon_ansprechbar == false)) && (npc_getpermattitude(self, other) != att_friendly)) {
        return 1;
    };
};

func void dia_baaltyon_notalk_info() {
    info_clearchoices(dia_baaltyon_notalk /*9776*/);
    info_addchoice(dia_baaltyon_notalk /*9776*/, dialog_ende, dia_baaltyon_notalk_ende);
    if (npc_hasitems(other, specialjoint) >= 1) {
        info_addchoice(dia_baaltyon_notalk /*9776*/, "(ïðåäëîæèòü ïðèãîòîâëåííûé Çîâ Ñíà)", dia_baaltyon_specialjoint);
    };
    info_addchoice(dia_baaltyon_notalk /*9776*/, "Âñå â ïîðÿäêå, ïðèÿòåëü?", dia_baaltyon_notalk_imp);
    info_addchoice(dia_baaltyon_notalk /*9776*/, "Äà ïðåáóäåò ñ òîáîé Ñïÿùèé!", dia_baaltyon_notalk_sleeper);
    info_addchoice(dia_baaltyon_notalk /*9776*/, "Ïðèâåò! ß çäåñü íîâåíüêèé.", dia_baaltyon_notalk_hi);
};

func void dia_baaltyon_notalk_hi() {
    ai_output(other, self, "DIA_BaalTyon_NoTalk_Hi_15_00"); //Ïðèâåò! ß çäåñü íîâåíüêèé!
    ai_output(self, other, "DIA_BaalTyon_NoTalk_Hi_11_01"); //(âçäîõ)
    baaltyon_sakrileg = true;
};

func void dia_baaltyon_notalk_sleeper() {
    ai_output(other, self, "DIA_BaalTyon_NoTalk_Sleeper_15_00"); //Äà ïðåáóäåò ñ òîáîé Ñïÿùèé!
    ai_output(self, other, "DIA_BaalTyon_NoTalk_Sleeper_11_01"); //(âçäîõ)
    baaltyon_sakrileg = true;
};

func void dia_baaltyon_notalk_imp() {
    ai_output(other, self, "DIA_BaalTyon_NoTalk_Imp_15_00"); //Âñå â ïîðÿäêå, ïðèÿòåëü?
    ai_output(self, other, "DIA_BaalTyon_NoTalk_Imp_11_01"); //(âçäîõ)
    baaltyon_sakrileg = true;
};

func void dia_baaltyon_notalk_ende() {
    ai_stopprocessinfos(self);
};

func void dia_baaltyon_specialjoint() {
    ai_output(other, self, "DIA_BaalTyon_SpecialJoint_15_00"); //Âîò, ãîñïîäèí ìîé! Ïðèìèòå ñåé ñêðîìíûé äàð îò âàøåãî âåðíîãî ó÷åíèêà...
    ai_stopprocessinfos(self);
    b_giveinvitems(hero, self, specialjoint /*4544*/, 1);
    if (c_bodystatecontains(self, bs_sit)) {
        ai_standup(self);
        ai_turntonpc(self, hero);
    };
    ai_useitem(self, specialjoint /*4544*/);
    ai_output(self, other, "DIA_BaalTyon_SpecialJoint_11_01"); //Ììììììì...
    baaltyon_ansprechbar = true;
    npc_setrefusetalk(self, 5);
    hero.aivar[33] = false;
};

instance dia_baaltyon_vision(c_info) {
    npc = gur_1210_baaltyon /*7474*/;
    nr = 1;
    condition = dia_baaltyon_vision_condition;
    information = dia_baaltyon_vision_info;
    important = true;
};

func int dia_baaltyon_vision_condition() {
    if ((baaltyon_ansprechbar == true) && (npc_refusetalk(self) == false)) {
        return 1;
    };
};

func void dia_baaltyon_vision_info() {
    ai_output(self, other, "DIA_BaalTyon_Vision_11_00"); //Âî èìÿ Ñïÿùåãî! Ìåíÿ ïîñåòèëî âèäåíèå!
    ai_output(self, other, "DIA_BaalTyon_Vision_11_01"); //Ýòî áûëî íåâåðîÿòíî! ß âèäåë, ÷òî ìû âñòðåòèëè íîâîãî áðàòà, êîòîðûé áûë íå ïîõîæ íà âñåõ òåõ, ÷òî áûëè äî íåãî.
    ai_output(self, other, "DIA_BaalTyon_Vision_11_02"); //Îí ÷òî-òî äåëàë äëÿ íàñ... Â ðóêå ó íåãî áûë ìå÷, è îí ñïóñêàëñÿ ïî øèðîêîé ëåñòíèöå. Íà ýòîì âèäåíèå çàêîí÷èëîñü.
    ai_output(self, other, "DIA_BaalTyon_Vision_11_03"); //Îí áûë î÷åíü ïîõîæ íà ÒÅÁß. Êòî òû? ×òî òåáå íóæíî?
    ai_output(other, self, "DIA_BaalTyon_Vision_15_04"); //ß âñåãî ëèøü ñêðîìíûé ñëóãà Ñïÿùåãî...
    ai_output(self, other, "DIA_BaalTyon_Vision_11_05"); //Èäè ê Êîð Ãàëîìó. Îí ïîçàáîòèòñÿ î òåáå.
    self.npctype = npctype_main;
    self.flags = 0;
    baaltyon_ansprechbar = false;
    b_logentry(ch1_joinpsi, ch1_joinpsi_4);
    b_givexp(xp_impressedbaaltyon);
    ai_stopprocessinfos(self);
};

instance info_baallukor_exit(c_info) {
    npc = gur_1211_baallukor /*7480*/;
    nr = 999;
    condition = info_baallukor_exit_condition;
    information = info_baallukor_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_baallukor_exit_condition() {
    return 1;
};

func void info_baallukor_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_baallukor_meet(c_info) {
    npc = gur_1211_baallukor /*7480*/;
    condition = info_baallukor_meet_condition;
    information = info_baallukor_meet_info;
    important = true;
};

func int info_baallukor_meet_condition() {
    return true;
};

func void info_baallukor_meet_info() {
    ai_output(self, other, "Info_BaalLukor_MEET_13_01"); //Áëàãîäàðþ çà ïîìîùü. Òû ïðèáûë êàê ðàç âîâðåìÿ.
    b_givexp(xp_savebaallukor);
};

instance info_baallukor_dead(c_info) {
    npc = gur_1211_baallukor /*7480*/;
    nr = 20;
    condition = info_baallukor_dead_condition;
    information = info_baallukor_dead_info;
    description = "Ïî äîðîãå ñþäà ÿ âèäåë ìåðòâûõ Ñòðàæåé. ×òî ñëó÷èëîñü?";
};

func int info_baallukor_dead_condition() {
    return true;
};

func void info_baallukor_dead_info() {
    ai_output(other, self, "Info_BaalLukor_DEAD_15_01"); //Ïî äîðîãå ñþäà ÿ âèäåë íåñêîëüêèõ ìåðòâûõ Ñòðàæåé. ×òî ñëó÷èëîñü?
    ai_output(self, other, "Info_BaalLukor_DEAD_13_02"); //Ãîñïîäèí Êîð Àíãàð îòïðàâèë íàñ îáñëåäîâàòü ïåùåðû.
    ai_output(self, other, "Info_BaalLukor_DEAD_13_03"); //Ìû îæèäàëè óâèäåòü ðÿäû ìîãèë è ïîëóðàçëîæèâøèåñÿ ìóìèè.
    ai_output(self, other, "Info_BaalLukor_DEAD_13_04"); //Íî âíåçàïíî òüìà ðàññåÿëàñü, è îðêè áûëè ïîâñþäó! ß íå çíàþ, ÷åãî îíè èñêàëè çäåñü, íî èõ ïîÿâëåíèå áûëî áîëåå ÷åì íåîæèäàííûì.
    ai_output(other, self, "Info_BaalLukor_DEAD_15_05"); //À ãäå îñòàëüíûå Ñòðàæè?
    ai_output(self, other, "Info_BaalLukor_DEAD_13_06"); //Ìåðòâû! ß íåâîëüíî ñòàë ïðè÷èíîé èõ ãèáåëè. Íàäåþñü, Ñïÿùèé ïðîñòèò ìåíÿ çà ýòî.
    b_logentry(ch3_orcgraveyard, ch3_orcgraveyard_5);
};

instance info_baallukor_summoning(c_info) {
    npc = gur_1211_baallukor /*7480*/;
    nr = 10;
    condition = info_baallukor_summoning_condition;
    information = info_baallukor_summoning_info;
    description = "Ìåíÿ ïðèñëàë Êîð Àíãàð! ";
};

func int info_baallukor_summoning_condition() {
    return true;
};

func void info_baallukor_summoning_info() {
    ai_output(other, self, "Info_BaalLukor_SUMMONING_15_01"); //Ìåíÿ ïðèñëàë Êîð Àíãàð! Âû íàøëè ÷òî-íèáóäü?
    ai_output(self, other, "Info_BaalLukor_SUMMONING_13_02"); //Ïîêà åùå íåò. ×òî ñ Þ`Áåðèîíîì? Îí ïðèøåë â ñåáÿ?
    ai_output(other, self, "Info_BaalLukor_SUMMONING_15_03"); //Íåò, îí âñå åùå áåç ñîçíàíèÿ.
    ai_output(self, other, "Info_BaalLukor_SUMMONING_13_04"); //Ìû äîëæíû ðàçãàäàòü çàãàäêó ýòèõ ïåùåð. Ïîñëå òàêèõ ÷óäîèùíûõ ïîòåðü ÿ íå ìîãó âåðíóòüñÿ ê áðàòüÿì ñ ïóñòûìè ðóêàìè.
    ai_output(self, other, "Info_BaalLukor_SUMMONING_13_05"); //Íî ÿ íå ñëèøêîì ñèëåí â áîþ, à îðêè íå òàê ïîääàþòñÿ ìîåé ìàãèè, êàê ýòè äîâåð÷èâûå ãëóïöû èç Ñòàðîãî Ëàãåðÿ.
    ai_output(self, other, "Info_BaalLukor_SUMMONING_13_06"); //Åñëè òû ñëóæèøü Áðàòñòâó, òû äîëæåí ïîìî÷ü ìíå èññëåäîâàòü ýòó ãðîáíèöó.
};

instance info_baallukor_help(c_info) {
    npc = gur_1211_baallukor /*7480*/;
    nr = 0;
    condition = info_baallukor_help_condition;
    information = info_baallukor_help_info;
    description = "ß ïîìîãó òåáå.";
};

func int info_baallukor_help_condition() {
    return npc_knowsinfo(hero, info_baallukor_summoning /*9796*/);
};

func void info_baallukor_help_info() {
    ai_output(other, self, "Info_BaalLukor_HELP_15_01"); //ß ïîìîãó òåáå.
    ai_output(self, other, "Info_BaalLukor_HELP_13_02"); //Õîðîøî. Îòëè÷íî. Îò ýòîãî çàëà îòõîäÿò òðè òóííåëÿ. Ìû äîëæíû îñìîòðåòü èõ âñå.
    ai_output(self, other, "Info_BaalLukor_HELP_13_03"); //Èäè âïåðåä. ß ïîéäó ñëåäîì!
    b_logentry(ch3_orcgraveyard, ch3_orcgraveyard_6);
    ai_stopprocessinfos(self);
    npc_exchangeroutine(self, "Follow");
};

instance info_baallukor_foundnone(c_info) {
    npc = gur_1211_baallukor /*7480*/;
    nr = 0;
    condition = info_baallukor_foundnone_condition;
    information = info_baallukor_foundnone_info;
    permanent = true;
    description = "ß íè÷åãî íå ìîãó íàéòè!";
};

func int info_baallukor_foundnone_condition() {
    if (((npc_knowsinfo(hero, info_baallukor_help /*9799*/) && (baallukor_bringparchment == 0)) && (!npc_hasitems(hero, orkparchmentone))) && (!npc_hasitems(hero, orkparchmenttwo))) {
        return true;
    };
};

func void info_baallukor_foundnone_info() {
    ai_output(other, self, "Info_BaalLukor_FOUNDNONE_15_01"); //ß íè÷åãî íå ìîãó íàéòè!
    ai_output(self, other, "Info_BaalLukor_FOUNDNONE_13_02"); //Ìû äîëæíû îñìîòðåòü âñå òðè òóííåëÿ.
    npc_exchangeroutine(self, "Follow");
};

instance info_baallukor_foundone(c_info) {
    npc = gur_1211_baallukor /*7480*/;
    nr = 0;
    condition = info_baallukor_foundone_condition;
    information = info_baallukor_foundone_info;
    permanent = true;
    description = "Î÷åâèäíî, âòîðîé ïîëîâèíû ñâèòêà ïîïðîñòó íå ñóùåñòâóåò!";
};

func int info_baallukor_foundone_condition() {
    if (npc_knowsinfo(hero, info_baallukor_help /*9799*/) && (((baallukor_bringparchment == 1) && (!npc_hasitems(hero, orkparchmenttwo))) || ((baallukor_bringparchment == 2) && (!npc_hasitems(hero, orkparchmentone))))) {
        return true;
    };
};

func void info_baallukor_foundone_info() {
    ai_output(other, self, "Info_BaalLukor_FOUNDONE_15_01"); //Î÷åâèäíî, âòîðîé ïîëîâèíû ñâèòêà ïîïðîñòó íå ñóùåñòâóåò!
    ai_output(self, other, "Info_BaalLukor_FOUNDONE_13_02"); //Äîëæíà áûòü âòîðàÿ ïîëîâèíà. Äàâàé îñìîòðèì âñå òðè òóííåëÿ!
    npc_exchangeroutine(self, "Follow");
};

instance info_baallukor_firstwait(c_info) {
    npc = gur_1211_baallukor /*7480*/;
    condition = info_baallukor_firstwait_condition;
    information = info_baallukor_firstwait_info;
    important = true;
};

func int info_baallukor_firstwait_condition() {
    if ((npc_knowsinfo(hero, info_baallukor_help /*9799*/) && (!npc_knowsinfo(hero, info_baallukor_firstscroll /*9811*/))) && (npc_getdisttowp(self, "GRYD_040") < 500)) {
        return true;
    };
};

func void info_baallukor_firstwait_info() {
    b_fullstop(hero);
    ai_gotonpc(self, hero);
    ai_output(self, other, "Info_BaalLukor_FIRSTWAIT_13_01"); //Ìû â òóïèêå! Âîçìîæíî, ðàçãàäêà êðîåòñÿ â ýòèõ íèøàõ.
    if (!npc_hasitems(hero, orkparchmentone)) {
        ai_stopprocessinfos(self);
        npc_exchangeroutine(self, "WaitInSideTunnelOne");
    };
};

instance info_baallukor_firstscroll(c_info) {
    npc = gur_1211_baallukor /*7480*/;
    nr = 0;
    condition = info_baallukor_firstscroll_condition;
    information = info_baallukor_firstscroll_info;
    description = "ß íàøåë ñâèòîê!";
};

func int info_baallukor_firstscroll_condition() {
    if (npc_knowsinfo(hero, info_baallukor_help /*9799*/) && npc_hasitems(hero, orkparchmentone)) {
        return true;
    };
};

func void info_baallukor_firstscroll_info() {
    ai_output(other, self, "Info_BaalLukor_FIRSTSCROLL_15_01"); //ß íàøåë ñâèòîê!
    b_giveinvitems(hero, self, orkparchmentone /*4695*/, 1);
    if (baallukor_bringparchment == 2) {
        ai_output(self, other, "Info_BaalLukor_FIRSTSCROLL_13_02"); //Î÷åíü õîðîøî! Ýòî âòîðàÿ ïîëîâèíà ìàãè÷åñêîãî çàêëèíàíèÿ îðêîâ.
        baallukor_bringparchment = 3;
    }
    else {
        ai_output(self, other, "Info_BaalLukor_FIRSTSCROLL_13_03"); //Ýòî ïîõîæå íà ñâèòîê ñ çàêëèíàíèåì îðêîâ, ïîðâàííûé íà äâå ÷àñòè.
        ai_output(self, other, "Info_BaalLukor_FIRSTSCROLL_13_04"); //Ãäå-òî äîëæíà áûòü âòîðàÿ ÷àñòü.
        ai_stopprocessinfos(self);
        baallukor_bringparchment = 1;
    };
    npc_exchangeroutine(self, "Follow");
};

instance info_baallukor_secondwait(c_info) {
    npc = gur_1211_baallukor /*7480*/;
    condition = info_baallukor_secondwait_condition;
    information = info_baallukor_secondwait_info;
    important = true;
};

func int info_baallukor_secondwait_condition() {
    if ((npc_knowsinfo(hero, info_baallukor_help /*9799*/) && (!npc_knowsinfo(hero, info_baallukor_secondscroll /*9817*/))) && (npc_getdisttowp(self, "GRYD_047") < 500)) {
        return true;
    };
};

func void info_baallukor_secondwait_info() {
    b_fullstop(hero);
    ai_gotonpc(self, hero);
    ai_output(self, other, "Info_BaalLukor_SECONDWAIT_13_01"); //Õ-ììì... ýòîò òóííåëü çàêàí÷èâàåòñÿ òóïèêîì. Âîçìîæíî, çäåñü òû íàéäåøü ÷òî-òî, ÷òî ïðèãîäèòñÿ íàì â äàëüíåéøåì.
    if (!npc_hasitems(hero, orkparchmenttwo)) {
        ai_stopprocessinfos(self);
        npc_exchangeroutine(self, "WaitInSideTunnelTwo");
    };
};

instance info_baallukor_secondscroll(c_info) {
    npc = gur_1211_baallukor /*7480*/;
    nr = 0;
    condition = info_baallukor_secondscroll_condition;
    information = info_baallukor_secondscroll_info;
    description = "Çäåñü ëåæèò îáðûâîê ñâèòêà!";
};

func int info_baallukor_secondscroll_condition() {
    if (npc_knowsinfo(hero, info_baallukor_help /*9799*/) && npc_hasitems(hero, orkparchmenttwo)) {
        return true;
    };
};

func void info_baallukor_secondscroll_info() {
    b_fullstop(hero);
    ai_gotonpc(self, hero);
    ai_output(other, self, "Info_BaalLukor_SECONDSCROLL_15_01"); //Çäåñü ëåæèò îáðûâîê ñâèòêà!
    b_giveinvitems(hero, self, orkparchmenttwo /*4696*/, 1);
    if (baallukor_bringparchment == 1) {
        ai_output(self, other, "Info_BaalLukor_SECONDSCROLL_13_02"); //Î÷åíü õîðîøî! Ýòî âòîðàÿ ïîëîâèíà ìàãè÷åñêîãî çàêëèíàíèÿ îðêîâ.
        baallukor_bringparchment = 3;
    }
    else {
        ai_output(self, other, "Info_BaalLukor_SECONDSCROLL_13_03"); //Ýòî ïîõîæå íà ñâèòîê ñ çàêëèíàíèåì îðêîâ, ïîðâàííûé íà äâå ÷àñòè.
        ai_output(self, other, "Info_BaalLukor_SECONDSCROLL_13_04"); //Ãäå-òî äîëæíà áûòü âòîðàÿ ÷àñòü.
        ai_stopprocessinfos(self);
        baallukor_bringparchment = 2;
    };
    npc_exchangeroutine(self, "Follow");
};

instance info_baallukor_bothscrolls(c_info) {
    npc = gur_1211_baallukor /*7480*/;
    nr = 0;
    condition = info_baallukor_bothscrolls_condition;
    information = info_baallukor_bothscrolls_info;
    description = "×òî ìû áóäåì äåëàòü ñ ýòèìè äâóìÿ ÷àñòÿìè?";
};

func int info_baallukor_bothscrolls_condition() {
    if (npc_knowsinfo(hero, info_baallukor_help /*9799*/) && (baallukor_bringparchment == 3)) {
        return true;
    };
};

func void info_baallukor_bothscrolls_info() {
    ai_output(other, self, "Info_BaalLukor_BOTHSCROLLS_15_01"); //×òî ìû áóäåì äåëàòü ñ ýòèìè äâóìÿ ÷àñòÿìè?
    ai_output(self, other, "Info_BaalLukor_BOTHSCROLLS_13_02"); //Îáðûâêè ñâèòêà ñîâïàäàþò äðóã ñ äðóãîì. Íî ÿ íå ìîãó ðàñøèôðîâàòü ýòè îðêñêèå ñèìâîëû.
    b_logentry(ch3_orcgraveyard, ch3_orcgraveyard_7);
    npc_exchangeroutine(self, "Follow");
};

instance info_baallukor_runes(c_info) {
    npc = gur_1211_baallukor /*7480*/;
    condition = info_baallukor_runes_condition;
    information = info_baallukor_runes_info;
    important = true;
};

func int info_baallukor_runes_condition() {
    if (npc_knowsinfo(hero, info_baallukor_bothscrolls /*9820*/) && ((npc_getdisttowp(hero, "GRYD_025") < 600) || (npc_getdisttowp(hero, "GRYD_048") < 600))) {
        return true;
    };
};

func void info_baallukor_runes_info() {
    b_fullstop(hero);
    ai_gotonpc(self, hero);
    ai_output(self, other, "Info_BaalLukor_RUNES_13_01"); //Ìèíóòêó! Ýòî óæå èíòåðåñíî...
    ai_output(other, self, "Info_BaalLukor_RUNES_15_02"); //Íó, ÿ íå âèæó çäåñü íè÷åãî èíòåðåñíîãî.
    ai_output(self, other, "Info_BaalLukor_RUNES_13_03"); //Ïîìîë÷è íåìíîãî è ïðèñìîòðèñü ê ðóíàì â ýòîé ïåùåðå.
    ai_output(self, other, "Info_BaalLukor_RUNES_13_04"); //Äà, ýòîãî äîëæíî áûòü äîñòàòî÷íî äëÿ òîãî, ÷òîáû ïåðåâåñòè îáå ïîëîâèíû ñâèòêà.
    b_usefakescroll();
    ai_output(self, other, "Info_BaalLukor_RUNES_13_06"); //Ïîëó÷èëîñü! Ýòî Çàêëèíàíèå Ïîðòàëà. Ïîõîæå, îíî ñðàáàòûâàåò òîëüêî â îïðåäåëåííûõ ìåñòàõ.
    ai_output(self, other, "Info_BaalLukor_RUNES_13_07"); //Ñòðàííî!
    npc_removeinvitems(self, orkparchmentone, 1);
    npc_removeinvitems(self, orkparchmenttwo, 1);
    b_logentry(ch3_orcgraveyard, ch3_orcgraveyard_8);
    npc_exchangeroutine(self, "Follow");
};

instance info_baallukor_whatnow(c_info) {
    npc = gur_1211_baallukor /*7480*/;
    nr = 0;
    condition = info_baallukor_whatnow_condition;
    information = info_baallukor_whatnow_info;
    permanent = true;
    description = "Â êàêèõ ýòî 'îïðåäåëåííûõ' ìåñòàõ?";
};

func int info_baallukor_whatnow_condition() {
    if ((npc_knowsinfo(hero, info_baallukor_runes /*9823*/) && npc_knowsinfo(hero, info_baallukor_hallwithout /*9829*/)) && (!npc_knowsinfo(hero, info_baallukor_hallwith /*9832*/))) {
        return true;
    };
};

func void info_baallukor_whatnow_info() {
    ai_output(other, self, "Info_BaalLukor_WHATNOW_15_01"); //Â êàêèõ ýòî 'îïðåäåëåííûõ' ìåñòàõ?
    ai_output(self, other, "Info_BaalLukor_WHATNOW_13_02"); //Áîëüøîé çàë, ÷åðåç êîòîðûé ìû ïðîõîäèëè, ïîêàçàëñÿ ìíå î÷åíü... ñòðàííûì... ìåñòîì. Âåðíåìñÿ òóäà!
    npc_exchangeroutine(self, "Follow");
};

instance info_baallukor_hallwithout(c_info) {
    npc = gur_1211_baallukor /*7480*/;
    condition = info_baallukor_hallwithout_condition;
    information = info_baallukor_hallwithout_info;
    important = true;
};

func int info_baallukor_hallwithout_condition() {
    if ((!npc_knowsinfo(hero, info_baallukor_runes /*9823*/)) && (npc_getdisttowp(hero, "GRYD_055") < 500)) {
        return true;
    };
};

func void info_baallukor_hallwithout_info() {
    b_fullstop(hero);
    ai_setwalkmode(self, npc_walk);
    ai_gotonpc(self, hero);
    ai_output(self, other, "Info_BaalLukor_HALLWITHOUT_13_01"); //Ýòî ìåñòî... ß íå ìîãó ýòîãî îáúÿñíèòü, íî ýòî ìåñòî...
    ai_output(self, other, "Info_BaalLukor_HALLWITHOUT_13_02"); //Î, íå îáðàùàé âíèìàíèÿ. Äîëæíî áûòü, ó ìåíÿ ðàçûãðàëîñü âîîáðàæåíèå.
    b_logentry(ch3_orcgraveyard, ch3_orcgraveyard_9);
    npc_exchangeroutine(self, "Follow");
};

instance info_baallukor_hallwith(c_info) {
    npc = gur_1211_baallukor /*7480*/;
    condition = info_baallukor_hallwith_condition;
    information = info_baallukor_hallwith_info;
    important = true;
};

func int info_baallukor_hallwith_condition() {
    if (npc_knowsinfo(hero, info_baallukor_runes /*9823*/) && (npc_getdisttowp(hero, "GRYD_055") < 500)) {
        return true;
    };
};

func void info_baallukor_hallwith_info() {
    b_fullstop(hero);
    ai_setwalkmode(self, npc_walk);
    ai_gotonpc(self, hero);
    ai_output(self, other, "Info_BaalLukor_HALLWITH_13_01"); //Ó ýòîãî ìåñòà îñîáàÿ àóðà... Àóðà ÷åãî-òî òàéíîãî.
    ai_output(other, self, "Info_BaalLukor_HALLWITH_15_02"); //Ýòîò çàë íàïîìíèë ìíå îáðàç èç ìîåãî âèäåíèÿ.
    ai_output(self, other, "Info_BaalLukor_HALLWITH_13_03"); //Âèäåíèå... Ìû î÷åíü áëèçêè ê öåëè...
    b_logentry(ch3_orcgraveyard, ch3_orcgraveyard_10);
    ai_stopprocessinfos(self);
    npc_exchangeroutine(self, "DOOR");
};

instance info_baallukor_door(c_info) {
    npc = gur_1211_baallukor /*7480*/;
    condition = info_baallukor_door_condition;
    information = info_baallukor_door_info;
    important = true;
};

func int info_baallukor_door_condition() {
    if (npc_knowsinfo(hero, info_baallukor_hallwith /*9832*/) && (npc_getdisttowp(hero, "GRYD_060") < 500)) {
        return true;
    };
};

func void info_baallukor_door_info() {
    b_fullstop(hero);
    ai_setwalkmode(self, npc_walk);
    ai_gotonpc(self, hero);
    ai_output(self, other, "Info_BaalLukor_DOOR_13_01"); //Çà ýòîé ñòåíîé... Êàæåòñÿ, çäåñü!
    ai_output(self, other, "Info_BaalLukor_DOOR_13_02"); //ß ïîêà íå íàáðàë äîñòàòî÷íîé ìàãè÷åñêîé ñèëû.
    ai_output(self, other, "Info_BaalLukor_DOOR_13_03"); //Èñïîëüçóé Çàêëèíàíèå Ïîðòàëà çäåñü, ïåðåä ýòîé ñòåíîé.
    createinvitem(self, itarscrollteleport4);
    b_giveinvitems(self, hero, itarscrollteleport4 /*4174*/, 1);
    ai_stopprocessinfos(self);
};

instance info_baallukor_teleport(c_info) {
    npc = gur_1211_baallukor /*7480*/;
    condition = info_baallukor_teleport_condition;
    information = info_baallukor_teleport_info;
    important = true;
};

func int info_baallukor_teleport_condition() {
    if ((npc_knowsinfo(hero, info_baallukor_door /*9835*/) && npc_canseenpcfreelos(self, hero)) && (npc_getdisttowp(hero, "GRYD_072") < 550)) {
        return true;
    };
};

func void info_baallukor_teleport_info() {
    b_fullstop(hero);
    ai_setwalkmode(self, npc_walk);
    ai_gotonpc(self, hero);
    ai_output(self, other, "Info_BaalLukor_TELEPORT_13_01"); //Îíî ïðèâåäåò òåáÿ â êàêîå-òî òàéíîå ìåñòî. Ìîÿ èíòóèöèÿ åùå íèêîãäà íå ïîäâîäèëà ìåíÿ.
    ai_output(other, self, "Info_BaalLukor_TELEPORT_15_02"); //Íåóæåëè ìû äåéñòâèòåëüíî íàéäåì çäåñü îòâåò íà âîïðîñ, êàê ïðèçâàòü Ñïÿùåãî???
    ai_output(other, self, "Info_BaalLukor_TELEPORT_15_03"); //Ýòî ìåñòî áîëüøå ïîõîæå íà ïîõîðîííûé çàë.
    ai_output(self, other, "Info_BaalLukor_TELEPORT_13_04"); //Èäåì äàëüøå.
    ai_output(self, other, "Info_BaalLukor_HELP_13_03"); //Èäè âïåðåä. ß ïîéäó ñëåäîì!
    b_logentry(ch3_orcgraveyard, ch3_orcgraveyard_11);
    ai_stopprocessinfos(self);
    npc_exchangeroutine(self, "TELEPORT");
};

instance info_baallukor_altar(c_info) {
    npc = gur_1211_baallukor /*7480*/;
    condition = info_baallukor_altar_condition;
    information = info_baallukor_altar_info;
    important = true;
};

func int info_baallukor_altar_condition() {
    if ((npc_knowsinfo(hero, info_baallukor_teleport /*9838*/) && (npc_getdisttowp(hero, "GRYD_082") < 400)) && npc_canseenpcfreelos(self, hero)) {
        return true;
    };
};

func void info_baallukor_altar_info() {
    b_fullstop(hero);
    ai_gotowp(hero, "GRYD_081");
    ai_aligntowp(hero);
    ai_gotonpc(self, hero);
    ai_output(self, hero, "Info_BaalLukor_ALTAR_13_01"); //ÍÅÒ! Ýòîãî íå ìîæåò áûòü! Çäåñü íè÷åãî íåò... íè÷åãî, êðîìå êîñòåé... è ïûëè.
    ai_setwalkmode(self, npc_run);
    ai_gotowp(self, "GRYD_082");
    ai_playanibs(self, "T_STAND_2_PRAY", bs_sit);
    ai_output(self, hero, "Info_BaalLukor_ALTAR_13_02"); //ÍÅÒ!
    ai_output(self, hero, "Info_BaalLukor_ALTAR_13_03"); //ÃÎÑÏÎÄÈÍ, ÎÒÂÅÒÜ ÌÍÅ!!!
    ai_output(self, hero, "Info_BaalLukor_ALTAR_13_04"); //ßÂÈ ÑÅÁß, ÑÏßÙÈÉ!!!
    ai_output(self, hero, "Info_BaalLukor_ALTAR_13_05"); //ÍÅÅÅÅÅÅÒ!!!
    ai_output(hero, self, "Info_BaalLukor_ALTAR_15_06"); //Íó âîò. Îí îêîí÷àòåëüíî ñîøåë ñ óìà!
    ai_standup(self);
    b_whirlaround(self, hero);
    ai_output(self, hero, "Info_BaalLukor_ALTAR_13_07"); //Ýòî âñå òâîÿ âèíà. Òâîå íå÷åñòèâîå ïðèñóòñòâèå ðàçîçëèëî âñåìîãóùåãî Ñïÿùåãî!
    ai_output(self, hero, "Info_BaalLukor_ALTAR_13_08"); //È òåïåðü ÿ äîëæåí ðàñïëà÷èâàòüñÿ çà òâîå ñâÿòîòàòñòâî!
    ai_output(self, hero, "Info_BaalLukor_ALTAR_13_09"); //ß äîëæåí ïðèíåñòè æåðòâó ñâîåìó ãîñïîäèíó. ×ÅËÎÂÅ×ÅÑÊÓÞ ÆÅÐÒÂÓ!!!
    ai_output(self, hero, "Info_BaalLukor_ALTAR_13_10"); //È òîãäà îí òî÷íî ïðîñâÿòèò ìåíÿ è ñäåëàåò ìåíÿ ñâîèì ñëóãîé.
    ai_output(self, hero, "Info_BaalLukor_ALTAR_13_11"); //ÓÌÐÈ, ÍÅÂÅÐÍÛÉ!!!
    ai_output(self, hero, "Info_BaalLukor_ALTAR_13_12"); //ÀÉÉÉÅÅÅÅÕÕÕÕÕÕ!!!!!!
    self.flags = 0;
    self.npctype = npctype_main;
    baallukor_bringparchment = 4;
    npc_settempattitude(self, att_hostile);
    npc_setpermattitude(self, att_hostile);
    b_logentry(ch3_orcgraveyard, ch3_orcgraveyard_12);
    ai_stopprocessinfos(self);
    ai_startstate(self, zs_attack, 1, "");
};

instance info_baallukorow_exit(c_info) {
    npc = gur_1211_baallukorow /*7488*/;
    nr = 999;
    condition = info_baallukorow_exit_condition;
    information = info_baallukorow_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_baallukorow_exit_condition() {
    return 1;
};

func void info_baallukorow_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_baallukorow_hallo(c_info) {
    npc = gur_1211_baallukorow /*7488*/;
    nr = 20;
    condition = info_baallukorow_hallo_condition;
    information = info_baallukorow_hallo_info;
    description = "×òî òû äåëàåøü?";
};

func int info_baallukorow_hallo_condition() {
    return true;
};

func void info_baallukorow_hallo_info() {
    ai_output(other, self, "DIA_Jeremiah_Hallo_15_00"); //×òî òû äåëàåøü?
    ai_output(self, other, "Info_BaalLukor_RUNES_13_03"); //Ïîìîë÷è íåìíîãî è ïðèñìîòðèñü ê ðóíàì â ýòîé ïåùåðå.
    ai_output(self, other, "Info_BaalLukor_HALLWITHOUT_13_01"); //Ýòî ìåñòî... ß íå ìîãó ýòîãî îáúÿñíèòü, íî ýòî ìåñòî...
    ai_output(other, self, "Info_Mine_Org_13_DieLage_15_00"); //Âñå â ïîðÿäêå?
    ai_output(self, other, "Info_BaalLukor_HALLWITHOUT_13_02"); //Î, íå îáðàùàé âíèìàíèÿ. Äîëæíî áûòü, ó ìåíÿ ðàçûãðàëîñü âîîáðàæåíèå.
};

instance info_baallukorow_perm(c_info) {
    npc = gur_1211_baallukorow /*7488*/;
    nr = 10;
    condition = info_baallukorow_perm_condition;
    information = info_baallukorow_perm_info;
    permanent = true;
    description = "Íàøåë ÷òî-íèáóäü?";
};

func int info_baallukorow_perm_condition() {
    if (npc_knowsinfo(hero, info_baallukorow_hallo /*9847*/)) {
        return true;
    };
};

func void info_baallukorow_perm_info() {
    ai_output(other, self, "PC_Psionic_CHESTCLOSED_Info_15_01"); //Íàøåë ÷òî-íèáóäü?
    ai_output(self, other, "Info_BaalLukor_DOOR_13_02"); //ß ïîêà íå íàáðàë äîñòàòî÷íîé ìàãè÷åñêîé ñèëû.
};

instance gur_1212_madcorkalom_talk2sc(c_info) {
    npc = gur_1212_madcorkalom /*7491*/;
    condition = gur_1212_madcorkalom_talk2sc_condition;
    information = gur_1212_madcorkalom_talk2sc_info;
    important = true;
};

func int gur_1212_madcorkalom_talk2sc_condition() {
    return true;
};

func void gur_1212_madcorkalom_talk2sc_info() {
    ai_setwalkmode(self, npc_walk);
    ai_gotonpc(self, hero);
    ai_output(self, hero, "GUR_1212_MadCorKalom_Talk2SC_10_01"); //Íàêîíåö-òî ìû ñíîâà âñòðåòèëèñü!
    ai_output(self, hero, "GUR_1212_MadCorKalom_Talk2SC_10_02"); //Ìîé ãîñïîäèí ñîîáùèë ìíå î òâîåì ïðèáûòèè!
    ai_output(self, hero, "GUR_1212_MadCorKalom_Talk2SC_10_03"); //Îí ÷óâñòâóåò, ÷òî òû ðÿäîì.
    ai_output(hero, self, "GUR_1212_MadCorKalom_Talk2SC_15_04"); //Ñêîðî ÿ áóäó áëèæå ê íåìó, áëèæå, ÷åì åìó õîòåëîñü áû!
    ai_output(self, hero, "GUR_1212_MadCorKalom_Talk2SC_10_05"); //Ìû íå ïîçâîëèì òåáå ðàññòðîèòü íàøè ïëàíû.
    ai_output(self, hero, "GUR_1212_MadCorKalom_Talk2SC_10_06"); //Ìèð âîò-âîò ñòàíåò ñâèäåòåëåì ïðîáóæäåíèÿ Èçáàâèòåëÿ, è íèêòî íå â ñèëàõ îñòàíîâèòü åãî.
    ai_output(self, hero, "GUR_1212_MadCorKalom_Talk2SC_10_07"); //Âñåõ íåâåðíûõ æäåò ðàñïëàòà çà èõ ãðåõè.
    ai_output(self, hero, "GUR_1212_MadCorKalom_Talk2SC_10_08"); //È òåáå óãîòîâàíà ÷åñòü ñòàòü ïåðâûì èç íèõ.
    ai_output(self, hero, "GUR_1212_MadCorKalom_Talk2SC_10_09"); //ÏÏÐÐÐÎÎÎÎÎÎÎÎÎÎÎÁÁÁÓÓÓÓÓÓÄÄÈÑÜ, ÑÑÑÏÏÏÏÏÏßßßßßßßßßßßÙÙÙÈÈÈÈÈÈÉÉÉÉ!!!!!!!!!
    ai_stopprocessinfos(self);
    npc_setattitude(self, att_hostile);
    npc_settempattitude(self, att_hostile);
    ai_waittillend(sleeper, self);
    ai_playanibs(sleeper, "T_WAKEUP", bs_stand);
    ai_wait(self, 2.0);
    npc_settarget(self, hero);
    ai_startstate(self, zs_attack, 1, "");
};

instance ie_397_announcer_exit(c_info) {
    npc = ie_397_announcer /*7515*/;
    nr = 999;
    condition = ie_397_announcer_exit_condition;
    information = ie_397_announcer_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int ie_397_announcer_exit_condition() {
    return 1;
};

func void ie_397_announcer_exit_info() {
    ai_stopprocessinfos(self);
};

instance ie_397_announcer_announce(c_info) {
    npc = ie_397_announcer /*7515*/;
    condition = ie_397_announcer_announce_condition;
    information = ie_397_announcer_announce_info;
    important = true;
};

func int ie_397_announcer_announce_condition() {
    if (kapitel == 2) {
    };
};

func void ie_397_announcer_announce_info() {
    ai_output(self, other, "Info_Announcer_ANNOUNCE_11_01"); //Ìîè áëàãîðîäíûå ãîñïîäà Áàðîíû, óâàæàåìûå ñòðàæíèêè, Ïðèçðàêè è ðóäîêîïû...
    ai_output(self, other, "Info_Announcer_ANNOUNCE_11_02"); //Ìíå âûïàëà áîëüøàÿ ÷åñòü ïðåäñòàâèòü âàì íàøèõ èíîñòðàííûõ äðóçåé...
    ai_output(self, other, "Info_Announcer_ANNOUNCE_11_03"); //!!! IN EXTREMO !!!!
    npc_exchangeroutine(self, "concert");
    b_exchangeroutine(charlotte /*7519*/, "concert");
    ai_stopprocessinfos(self);
};

instance iefan1_exit(c_info) {
    npc = iefan1 /*7523*/;
    nr = 999;
    condition = iefan1_exit_condition;
    information = iefan1_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int iefan1_exit_condition() {
    return 1;
};

func void iefan1_exit_info() {
    ai_stopprocessinfos(self);
};

instance iefan2_exit(c_info) {
    npc = iefan2 /*7526*/;
    nr = 999;
    condition = iefan2_exit_condition;
    information = iefan2_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int iefan2_exit_condition() {
    return 1;
};

func void iefan2_exit_info() {
    ai_stopprocessinfos(self);
};

instance iefan3_exit(c_info) {
    npc = iefan3 /*7529*/;
    nr = 999;
    condition = iefan3_exit_condition;
    information = iefan3_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int iefan3_exit_condition() {
    return 1;
};

func void iefan3_exit_info() {
    ai_stopprocessinfos(self);
};

instance iefan4_exit(c_info) {
    npc = iefan4 /*7532*/;
    nr = 999;
    condition = iefan4_exit_condition;
    information = iefan4_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int iefan4_exit_condition() {
    return 1;
};

func void iefan4_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_rodriguez_exit(c_info) {
    npc = kdf_400_rodriguez /*7535*/;
    nr = 999;
    condition = dia_rodriguez_exit_condition;
    information = dia_rodriguez_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_rodriguez_exit_condition() {
    return 1;
};

func void dia_rodriguez_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_rodriguez_hello(c_info) {
    npc = kdf_400_rodriguez /*7535*/;
    nr = 1;
    condition = dia_rodriguez_hello_condition;
    information = dia_rodriguez_hello_info;
    permanent = true;
    description = "ß èùó Âåðõîâíîãî Ìàãà Êðóãà Îãíÿ!";
};

func int dia_rodriguez_hello_condition() {
    if (npc_gettrueguild(hero) != gil_kdf) {
        return true;
    };
};

func void dia_rodriguez_hello_info() {
    ai_output(other, self, "DIA_Rodriguez_Hello_15_00"); //ß èùó Âåðõîâíîãî Ìàãà Êðóãà Îãíÿ!
    ai_output(self, other, "DIA_Rodriguez_Hello_12_01"); //Îòïðàâëÿéñÿ ê Ìèëüòåíó. Îí ó íàñ çàíèìàåòñÿ ïîñûëüíûìè.
    ai_stopprocessinfos(self);
};

instance kdf_401_damarok_welcome(c_info) {
    npc = kdf_401_damarok /*7538*/;
    condition = kdf_401_damarok_welcome_condition;
    information = kdf_401_damarok_welcome_info;
    important = true;
};

func int kdf_401_damarok_welcome_condition() {
    if (((npc_knowsinfo(hero, kdf_402_corristo_robe /*9920*/) && npc_knowsinfo(hero, kdf_403_drago_rune /*9947*/)) && npc_knowsinfo(hero, kdf_405_torrez_book /*10063*/)) && (npc_getdisttonpc(hero, self) < 1000)) {
        return true;
    };
};

func void kdf_401_damarok_welcome_info() {
    ai_gotonpc(self, hero);
    ai_output(self, other, "KDF_401_Damarok_WELCOME_Info_14_01"); //Äà õðàíèò òåáÿ âå÷íûé Îãîíü!
    corristo_kdfaufnahme = 6;
    b_story_feueraufnahme();
    ai_stopprocessinfos(self);
};

instance kdf_401_damarok_exit(c_info) {
    npc = kdf_401_damarok /*7538*/;
    nr = 999;
    condition = kdf_401_damarok_exit_condition;
    information = kdf_401_damarok_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int kdf_401_damarok_exit_condition() {
    return true;
};

func void kdf_401_damarok_exit_info() {
    ai_stopprocessinfos(self);
};

instance kdf_401_damarok_heal(c_info) {
    npc = kdf_401_damarok /*7538*/;
    condition = kdf_401_damarok_heal_condition;
    information = kdf_401_damarok_heal_info;
    important = true;
};

func int kdf_401_damarok_heal_condition() {
    if ((npc_gettrueguild(hero) == gil_kdf) && (corristo_kdfaufnahme == 6)) {
        return true;
    };
};

func void kdf_401_damarok_heal_info() {
    ai_output(self, other, "KDF_401_Damarok_HEAL_Info_14_01"); //Åñëè òû ðàíåí, ÿ çàëå÷ó òâîè ðàíû.
    ai_stopprocessinfos(self);
};

instance kdf_401_damarok_healinfo(c_info) {
    npc = kdf_401_damarok /*7538*/;
    nr = 100;
    condition = kdf_401_damarok_healinfo_condition;
    information = kdf_401_damarok_healinfo_info;
    permanent = true;
    description = "ß ðàíåí. Òû ìîæåøü ìíå ïîìî÷ü?";
};

func int kdf_401_damarok_healinfo_condition() {
    if ((hero.attribute[atr_hitpoints] /*0*/ < hero.attribute[atr_hitpoints_max] /*1*/) && (npc_gettrueguild(hero) == gil_kdf)) {
        return true;
    };
};

func void kdf_401_damarok_healinfo_info() {
    ai_output(other, self, "KDF_401_Damarok_HEALINFO_Info_15_01"); //ß ðàíåí. Òû ìîæåøü ïîìî÷ü ìíå?
    ai_output(self, other, "KDF_401_Damarok_HEALINFO_Info_14_02"); //Êîãäà èçëå÷èâàåòñÿ òåëî, î÷èùàåòñÿ è äóõ ÷åëîâåêà.
    snd_play("MFX_Heal_Cast");
    hero.attribute[atr_hitpoints] /*0*/ = hero.attribute[atr_hitpoints_max] /*1*/;
};

instance kdf_402_corristo_exit(c_info) {
    npc = kdf_402_corristo /*7541*/;
    nr = 999;
    condition = kdf_402_corristo_exit_condition;
    information = kdf_402_corristo_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int kdf_402_corristo_exit_condition() {
    return true;
};

func void kdf_402_corristo_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_corristo_intruder(c_info) {
    npc = kdf_402_corristo /*7541*/;
    nr = 1;
    condition = info_corristo_intruder_condition;
    information = info_corristo_intruder_info;
    permanent = true;
    important = true;
};

func int info_corristo_intruder_condition() {
    if (npc_isinstate(self, zs_talk) && ((!npc_knowsinfo(hero, grd_200_thorus_wannabemage /*8886*/)) && (corkalom_bringmcqballs != log_success))) {
        return 1;
    };
};

func void info_corristo_intruder_info() {
    ai_output(self, other, "Info_Saturas_Intruder_14_00"); //×òî òû çäåñü äåëàåøü? Òåáå çäåñü íå÷åãî äåëàòü! Óáèðàéñÿ!
    ai_stopprocessinfos(self);
};

instance kdf_402_corristo_explainmage(c_info) {
    npc = kdf_402_corristo /*7541*/;
    nr = 0;
    condition = kdf_402_corristo_explainmage_condition;
    information = kdf_402_corristo_explainmage_info;
    description = "Ðàññêàæè ìíå, êàêîâî ýòî - áûòü ìàãîì?";
};

func int kdf_402_corristo_explainmage_condition() {
    if ((!npc_knowsinfo(hero, kdf_402_corristo_wannbekdf /*9901*/)) && (npc_gettrueguild(hero) == gil_stt)) {
        return true;
    };
};

func void kdf_402_corristo_explainmage_info() {
    ai_output(other, self, "KDF_402_Corristo_EXPLAINMAGE_Info_15_01"); //Ðàññêàæè ìíå, êàêîâî ýòî - áûòü ìàãîì?
    ai_output(self, other, "KDF_402_Corristo_EXPLAINMAGE_Info_14_02"); //Ìû - ìàãè Îãíÿ. Ìû ñëóæèì Èííîñó, âûñøåìó èç áîãîâ.
    ai_output(self, other, "KDF_402_Corristo_EXPLAINMAGE_Info_14_03"); //Íàøà ìàãèÿ - åãî áîæåñòâåííûé äàð. Ìû èçáðàíû æðåöàìè, íàñòàâíèêàìè è ñóäüÿìè.
    ai_output(self, other, "KDF_402_Corristo_EXPLAINMAGE_Info_14_04"); //Äàð ýòîò - íàøå èçâå÷íîå áðåìÿ, öåëü, êîòîðàÿ îïðåäåëÿåò ñóòü íàøåé æèçíè.
};

instance kdf_402_corristo_wannbekdf(c_info) {
    npc = kdf_402_corristo /*7541*/;
    nr = 0;
    condition = kdf_402_corristo_wannbekdf_condition;
    information = kdf_402_corristo_wannbekdf_info;
    permanent = true;
    description = "ß õî÷ó âñòóïèòü â âàø ìàãè÷åñêèé Êðóã.";
};

func int kdf_402_corristo_wannbekdf_condition() {
    if ((((corkalom_bringmcqballs == log_success) || npc_knowsinfo(hero, grd_200_thorus_wannabemage /*8886*/)) && (corristo_kdfaufnahme == 0)) && (npc_gettrueguild(hero) == gil_stt)) {
        return true;
    };
};

func void kdf_402_corristo_wannbekdf_info() {
    ai_output(other, self, "KDF_402_Corristo_WANNBEKDF_Info_15_01"); //ß õî÷ó âñòóïèòü â âàø ìàãè÷åñêèé Êðóã.
    ai_output(self, other, "KDF_402_Corristo_WANNBEKDF_Info_14_02"); //Òàê òû õî÷åøü ñòàòü ìàãîì Êðóãà Îãíÿ? Õ-ì...
    if (hero.level < 10) {
        ai_output(self, other, "KDF_402_Corristo_WANNBEKDF_Info_14_04"); //Òâîèõ çíàíèé ïîêà åùå íåäîñòàòî÷íî. Âîçâðàùàéñÿ, êîãäà áóäåøü çíàòü áîëüøå.
        ai_stopprocessinfos(self);
        b_printguildcondition(10);
    }
    else {
        ai_output(self, other, "KDF_402_Corristo_WANNBEKDF_Info_14_03"); //Ìíîãèå õîòåëè ïðèñîåäèíèòüñÿ ê íàì, íî çà äîëãèå ãîäû ÿ âûáðàë ñåáå ëèøü îäíîãî ó÷åíèêà. Âñå îñòàëüíûå áûëè íåäîñòîéíû ýòîãî.
        ai_output(self, other, "KDF_402_Corristo_WANNBEKDF_Info_14_05"); //Äóõ òâîé ñèëåí è ãîòîâ ïðèñîåäèíèòüñÿ ê íàì. Íî åñëè òû õî÷åøü ñòàòü ìàãîì, ÿ äîëæåí ïðåæäå èñïûòàòü òåáÿ. Äàé ìíå çíàòü, êîãäà áóäåøü ãîòîâ ê èñïûòàíèþ.
        corristo_kdfaufnahme = 1;
        info_clearchoices(kdf_402_corristo_wannbekdf /*9901*/);
        log_createtopic(ge_becomefiremage, log_note);
        b_logentry(ge_becomefiremage, ge_becomefiremage_1);
    };
};

instance kdf_402_corristo_kdftest(c_info) {
    npc = kdf_402_corristo /*7541*/;
    nr = 0;
    condition = kdf_402_corristo_kdftest_condition;
    information = kdf_402_corristo_kdftest_info;
    description = "ß ãîòîâ. Èñïûòàé ìåíÿ.";
};

func int kdf_402_corristo_kdftest_condition() {
    if ((corristo_kdfaufnahme == 1) && (npc_gettrueguild(hero) == gil_stt)) {
        return true;
    };
};

func void kdf_402_corristo_kdftest_info() {
    ai_output(other, self, "KDF_402_Corristo_KDFTEST_Info_15_01"); //ß ãîòîâ. Èñïûòàé ìåíÿ.
    ai_output(self, other, "KDF_402_Corristo_KDFTEST_Info_14_02"); //Õîðîøî. Òû ïîìîã Áðàòñòâó íà áîëîòàõ, òàê?
    info_clearchoices(kdf_402_corristo_kdftest /*9904*/);
    info_addchoice(kdf_402_corristo_kdftest /*9904*/, "Äà.", kdf_402_corristo_kdftest_ja);
    info_addchoice(kdf_402_corristo_kdftest /*9904*/, "Íåò.", kdf_402_corristo_kdftest_no);
};

func void kdf_402_corristo_kdftest_ja() {
    ai_output(other, self, "KDF_402_Corristo_KDFTEST_JA_Info_15_01"); //Äà.
    ai_output(self, other, "KDF_402_Corristo_KDFTEST_JA_Info_14_02"); //Õ-ìì...
    ai_output(self, other, "KDF_402_Corristo_KDFTEST_JA_Info_14_03"); //Êàê çîâóò íàøåãî áîãà?
    corristo_kdfaufnahme = 2;
    info_clearchoices(kdf_402_corristo_kdftest /*9904*/);
    info_addchoice(kdf_402_corristo_kdftest /*9904*/, "Àäàíîñ.", kdf_402_corristo_kdftest_adanos);
    info_addchoice(kdf_402_corristo_kdftest /*9904*/, "Ñïÿùèé", kdf_402_corristo_kdftest_sleeper);
    info_addchoice(kdf_402_corristo_kdftest /*9904*/, "Èííîñ.", kdf_402_corristo_kdftest_innos);
    info_addchoice(kdf_402_corristo_kdftest /*9904*/, "Ãîìåç", kdf_402_corristo_kdftest_gomez);
};

func void kdf_402_corristo_kdftest_no() {
    ai_output(other, self, "KDF_402_Corristo_KDFTEST_NO_Info_15_01"); //Íåò.
    ai_output(self, other, "KDF_402_Corristo_KDFTEST_NO_Info_14_02"); //Õ-ìì...
    ai_output(self, other, "KDF_402_Corristo_KDFTEST_NO_Info_14_03"); //Íàì íå íóæíû ëþäè, êîòîðûå îòðåêàþòñÿ îò ñâîèõ ïîñòóïêîâ.
    ai_output(self, other, "KDF_402_Corristo_KDFTEST_NO_Info_14_04"); //Äóìàþ, èç òåáÿ âûéäåò íåïëîõîé áîåö èëè ðóäîêîï. Ïóòü ìàãà îòíûíå çàêðûò äëÿ òåáÿ.
    ai_stopprocessinfos(self);
    npc_exchangeroutine(self, "START");
};

func void kdf_402_corristo_kdftest_adanos() {
    ai_output(other, self, "KDF_402_Corristo_KDFTEST_ADANOS_Info_15_01"); //Àäàíîñ.
    ai_output(self, other, "KDF_402_Corristo_KDFTEST_ADANOS_Info_14_02"); //Õ-ìì...
    ai_output(self, other, "KDF_402_Corristo_KDFTEST_ADANOS_Info_14_03"); //Îòâåò íåâåðíûé. Äóìàþ, òû ìîã áû ñòàòü íåïëîõèì ñòðàæíèêîì.
    ai_stopprocessinfos(self);
    npc_exchangeroutine(self, "START");
};

func void kdf_402_corristo_kdftest_sleeper() {
    ai_output(other, self, "KDF_402_Corristo_KDFTEST_SLEEPER_Info_15_01"); //Ñïÿùèé.
    ai_output(self, other, "KDF_402_Corristo_KDFTEST_SLEEPER_Info_14_02"); //Õ-ìì...
    ai_output(self, other, "KDF_402_Corristo_KDFTEST_SLEEPER_Info_14_03"); //Ïîõîæå, òû ïðîâåë ñëèøêîì ìíîãî âðåìåíè ñðåäè áîëîòíûõ áðàòüåâ. Âåðîÿòíî, ëó÷øå âñåãî òåáå áóäåò òàì è îñòàòüñÿ.
    ai_stopprocessinfos(self);
    npc_exchangeroutine(self, "START");
};

func void kdf_402_corristo_kdftest_innos() {
    ai_output(other, self, "KDF_402_Corristo_KDFTEST_INNOS_Info_15_01"); //Èííîñ.
    ai_output(self, other, "KDF_402_Corristo_KDFTEST_INNOS_Info_14_02"); //Õ-ìì...
    ai_output(self, other, "KDF_402_Corristo_KDFTEST_INNOS_Info_14_03"); //×òî åñòü âûñøàÿ äîáðîäåòåëü?
    corristo_kdfaufnahme = 3;
    info_clearchoices(kdf_402_corristo_kdftest /*9904*/);
    info_addchoice(kdf_402_corristo_kdftest /*9904*/, "×åñòü âîèíà.", kdf_402_corristo_kdftest_fight);
    info_addchoice(kdf_402_corristo_kdftest /*9904*/, "Ñìèðåíèå ïåðåä ëèöîì ìàãèè.", kdf_402_corristo_kdftest_demut);
    info_addchoice(kdf_402_corristo_kdftest /*9904*/, "Äèñöèïëèíà è ïîðÿäîê.", kdf_402_corristo_kdftest_disziplin);
    info_addchoice(kdf_402_corristo_kdftest /*9904*/, "Áëàãîãîâåíèå ïåðåä áîãàìè.", kdf_402_corristo_kdftest_ehrfurcht);
};

func void kdf_402_corristo_kdftest_gomez() {
    ai_output(other, self, "KDF_402_Corristo_KDFTEST_GOMEZ_Info_15_01"); //Ãîìåç.
    ai_output(self, other, "KDF_402_Corristo_KDFTEST_GOMEZ_Info_14_02"); //Õ-ìì...
    ai_output(self, other, "KDF_402_Corristo_KDFTEST_GOMEZ_Info_14_03"); //Äóìàþ, Ñòðàæà - ëó÷øåå ìåñòî äëÿ òåáÿ. Ïîãîâîðè ñ Òîðóñîì!
    ai_stopprocessinfos(self);
    npc_exchangeroutine(self, "START");
};

func void kdf_402_corristo_kdftest_fight() {
    ai_output(other, self, "KDF_402_Corristo_KDFTEST_FIGHT_Info_15_01"); //×åñòü âîèíà.
    ai_output(self, other, "KDF_402_Corristo_KDFTEST_FIGHT_Info_14_02"); //Õ-ìì...
    ai_output(self, other, "KDF_402_Corristo_KDFTEST_FIGHT_Info_14_03"); //Äóìàþ, Ñòðàæà - ëó÷øåå ìåñòî äëÿ òåáÿ. Ïîãîâîðè ñ Òîðóñîì!
    ai_stopprocessinfos(self);
};

func void kdf_402_corristo_kdftest_demut() {
    ai_output(other, self, "KDF_402_Corristo_KDFTEST_DEMUT_Info_15_01"); //Ñìèðåíèå ïåðåä ëèöîì ìàãèè.
    ai_output(self, other, "KDF_402_Corristo_KDFTEST_DEMUT_Info_14_02"); //Õ-ìì...
    ai_output(self, other, "KDF_402_Corristo_KDFTEST_DEMUT_Info_14_03"); //Òû îòâå÷àë õîðîøî è ïðàâèëüíî. ß áóäó ó÷èòü òåáÿ ìàãè÷åñêîìó èñêóññòâó.
    ai_output(self, other, "KDF_402_Corristo_KDFTEST_DEMUT_Info_14_04"); //Ñëåäóé çà ìíîé â Çàë Ìàãèè, ãäå òû ïðèíåñåøü äðåâíèé îáåò.
    ai_stopprocessinfos(self);
    corristo_kdfaufnahme = 4;
    b_story_feueraufnahme();
};

func void kdf_402_corristo_kdftest_disziplin() {
    ai_output(other, self, "KDF_402_Corristo_KDFTEST_DISZIPLIN_Info_15_01"); //Äèñöèïëèíà è ïîðÿäîê.
    ai_output(self, other, "KDF_402_Corristo_KDFTEST_DISZIPLIN_Info_14_02"); //Õ-ìì...
    ai_output(self, other, "KDF_402_Corristo_KDFTEST_DISZIPLIN_Info_14_03"); //Òû îòâå÷àë õîðîøî è ïðàâèëüíî. ß áóäó ó÷èòü òåáÿ ìàãè÷åñêîìó èñêóññòâó.
    ai_output(self, other, "KDF_402_Corristo_KDFTEST_DISZIPLIN_Info_14_04"); //Ñëåäóé çà ìíîé â Çàë Ìàãèè, ãäå òû ïðèíåñåøü äðåâíèé îáåò.
    corristo_kdfaufnahme = 4;
    ai_stopprocessinfos(self);
    b_story_feueraufnahme();
};

func void kdf_402_corristo_kdftest_ehrfurcht() {
    ai_output(other, self, "KDF_402_Corristo_KDFTEST_EHRFURCHT_Info_15_01"); //Áëàãîãîâåíèå ïåðåä áîãàìè.
    ai_output(self, other, "KDF_402_Corristo_KDFTEST_EHRFURCHT_Info_14_02"); //Õ-ìì...
    ai_output(self, other, "KDF_402_Corristo_KDFTEST_EHRFURCHT_Info_14_03"); //Òû îòâå÷àë õîðîøî è ïðàâèëüíî. ß áóäó ó÷èòü òåáÿ ìàãè÷åñêîìó èñêóññòâó.
    ai_output(self, other, "KDF_402_Corristo_KDFTEST_EHRFURCHT_Info_14_04"); //Ñëåäóé çà ìíîé â Çàë Ìàãèè, ãäå òû ïðèíåñåøü äðåâíèé îáåò.
    corristo_kdfaufnahme = 4;
    ai_stopprocessinfos(self);
    b_story_feueraufnahme();
};

instance kdf_402_corristo_aufnahme(c_info) {
    npc = kdf_402_corristo /*7541*/;
    condition = kdf_402_corristo_aufnahme_condition;
    information = kdf_402_corristo_aufnahme_info;
    important = true;
};

func int kdf_402_corristo_aufnahme_condition() {
    if (((npc_getdisttowp(hero, "OCC_CHAPEL_UPSTAIRS") < 500) && (corristo_kdfaufnahme == 4)) && (npc_gettrueguild(hero) == gil_stt)) {
        return true;
    };
};

func void kdf_402_corristo_aufnahme_info() {
    corristo_kdfaufnahme = 5;
    b_story_feueraufnahme();
    ai_unequipweapons(hero);
    ai_setwalkmode(hero, npc_walk);
    ai_gotonpc(hero, self);
    ai_output(self, other, "KDF_402_Corristo_AUFNAHME_Info_14_01"); //Ìû âñå ñîáðàëèñü çäåñü ñåãîäíÿ íà ïîñâÿùåíèå íîâîãî ñëóæèòåëÿ Îãíÿ.
    ai_output(self, other, "KDF_402_Corristo_AUFNAHME_Info_14_02"); //Ïðèíåñè æå êëÿòâó Îãíþ.
    snd_play("howling_01");
    ai_output(self, other, "KDF_402_Corristo_AUFNAHME_Info_14_03"); //ß êëÿíóñü ìàãèåé áîãîâ...
    ai_output(other, self, "KDF_402_Corristo_AUFNAHME_Info_15_04"); //ß êëÿíóñü ìàãèåé áîãîâ...
    ai_output(self, other, "KDF_402_Corristo_AUFNAHME_Info_14_05"); //... ÿ êëÿíóñü ñèëîé ñâÿùåííîãî Îãíÿ...
    ai_output(other, self, "KDF_402_Corristo_AUFNAHME_Info_15_06"); //... ÿ êëÿíóñü ñèëîé ñâÿùåííîãî Îãíÿ...
    ai_output(self, other, "KDF_402_Corristo_AUFNAHME_Info_14_07"); //... ÷òî äåëà ìîè è çíàíèÿ ìîè ñ ýòîãî äíÿ è íàâåêè áóäóò åäèíû ñ ïëàìåíåì...
    ai_output(other, self, "KDF_402_Corristo_AUFNAHME_Info_15_08"); //... ÷òî äåëà ìîè è çíàíèÿ ìîè ñ ýòîãî äíÿ è íàâåêè áóäóò åäèíû ñ ïëàìåíåì...
    ai_output(self, other, "KDF_402_Corristo_AUFNAHME_Info_14_09"); //... äî òåõ ïîð, ïîêà òåëî ìîå íå âåðíåòñÿ â ÷åðòîãè Áåëüäæàðà è íå óãàñíåò îãîíü ìîåé æèçíè.
    ai_output(other, self, "KDF_402_Corristo_AUFNAHME_Info_15_10"); //... äî òåõ ïîð ïîêà òåëî ìîå íå âåðíåòñÿ â ÷åðòîãè Áåëüäæàðà è íå óãàñíåò îãîíü ìîåé æèçíè.
    ai_stopprocessinfos(self);
};

instance kdf_402_corristo_robe(c_info) {
    npc = kdf_402_corristo /*7541*/;
    condition = kdf_402_corristo_robe_condition;
    information = kdf_402_corristo_robe_info;
    important = true;
};

func int kdf_402_corristo_robe_condition() {
    if (npc_knowsinfo(hero, kdf_402_corristo_aufnahme /*9917*/) && (npc_gettrueguild(hero) == gil_stt)) {
        return true;
    };
};

func void kdf_402_corristo_robe_info() {
    snd_play("MFX_Heal_Cast");
    createinvitem(hero, kdf_armor_l);
    createinvitem(self, itamarrow);
    b_giveinvitems(self, hero, itamarrow /*4894*/, 1);
    npc_removeinvitem(hero, itamarrow /*4894*/);
    ai_output(self, other, "KDF_402_Corristo_ROBE_Info_14_01"); //Ïðîèçíåñÿ ñëîâà êëÿòâû, òû ñâÿçàë ñâîþ æèçíü ñ Îãíåì.
    ai_output(self, other, "KDF_402_Corristo_ROBE_Info_14_02"); //Íîñè ýòî îäåÿíèå â çíàê íåðóøèìîñòè ñâÿçè.
    ai_stopprocessinfos(self);
    ai_equipbestarmor(hero);
    ai_unequipweapons(hero);
    npc_settrueguild(hero, gil_kdf);
    hero.guild = gil_kdf;
    hero.attribute[atr_hitpoints] /*0*/ = hero.attribute[atr_hitpoints_max] /*1*/;
    b_logentry(ge_becomefiremage, ge_becomefiremage_2);
    log_createtopic(ge_teacheroc, log_note);
    b_logentry(ge_teacheroc, ge_teacheroc_corristo);
};

instance kdf_402_corristo_mana(c_info) {
    npc = kdf_402_corristo /*7541*/;
    nr = 0;
    condition = kdf_402_corristo_mana_condition;
    information = kdf_402_corristo_mana_info;
    permanent = true;
    description = "ß õî÷ó óâåëè÷èòü ñèëó ñâîåé ìàãèè.";
};

func int kdf_402_corristo_mana_condition() {
    if (npc_gettrueguild(hero) == gil_kdf) {
        return true;
    };
};

func void kdf_402_corristo_mana_info() {
    ai_output(other, self, "KDF_402_Corristo_MANA_Info_15_01"); //ß õî÷ó óâåëè÷èòü ñèëó ñâîåé ìàãèè.
    ai_output(self, other, "KDF_402_Corristo_MANA_Info_14_02"); //ß ìîãó óâåëè÷èòü òâîþ ñèëó. Êàê èñïîëüçîâàòü åå - òâîå äåëî.
    info_clearchoices(kdf_402_corristo_mana /*9923*/);
    info_addchoice(kdf_402_corristo_mana /*9923*/, dialog_back, kdf_402_corristo_mana_back);
    info_addchoice(kdf_402_corristo_mana /*9923*/, b_buildlearnstring(name_learnmana_5, 5 * lpcost_attribute_mana, 0), kdf_402_corristo_mana_man_5);
    info_addchoice(kdf_402_corristo_mana /*9923*/, b_buildlearnstring(name_learnmana_1, lpcost_attribute_mana, 0), kdf_402_corristo_mana_man_1);
};

func void kdf_402_corristo_mana_back() {
    info_clearchoices(kdf_402_corristo_mana /*9923*/);
};

func void kdf_402_corristo_mana_man_1() {
    b_buyattributepoints(other, atr_mana_max, lpcost_attribute_mana);
    info_clearchoices(kdf_402_corristo_mana /*9923*/);
    info_addchoice(kdf_402_corristo_mana /*9923*/, dialog_back, kdf_402_corristo_mana_back);
    info_addchoice(kdf_402_corristo_mana /*9923*/, b_buildlearnstring(name_learnmana_5, 5 * lpcost_attribute_mana, 0), kdf_402_corristo_mana_man_5);
    info_addchoice(kdf_402_corristo_mana /*9923*/, b_buildlearnstring(name_learnmana_1, lpcost_attribute_mana, 0), kdf_402_corristo_mana_man_1);
};

func void kdf_402_corristo_mana_man_5() {
    b_buyattributepoints(other, atr_mana_max, 5 * lpcost_attribute_mana);
    info_clearchoices(kdf_402_corristo_mana /*9923*/);
    info_addchoice(kdf_402_corristo_mana /*9923*/, dialog_back, kdf_402_corristo_mana_back);
    info_addchoice(kdf_402_corristo_mana /*9923*/, b_buildlearnstring(name_learnmana_5, 5 * lpcost_attribute_mana, 0), kdf_402_corristo_mana_man_5);
    info_addchoice(kdf_402_corristo_mana /*9923*/, b_buildlearnstring(name_learnmana_1, lpcost_attribute_mana, 0), kdf_402_corristo_mana_man_1);
};

instance kdf_402_corristo_explaincircles(c_info) {
    npc = kdf_402_corristo /*7541*/;
    nr = 0;
    condition = kdf_402_corristo_explaincircles_condition;
    information = kdf_402_corristo_explaincircles_info;
    description = "Ïîæàëóéñòà, îáúÿñíè ìíå, â ÷åì ñìûñë ìàãè÷åñêèõ Êðóãîâ?";
};

func int kdf_402_corristo_explaincircles_condition() {
    if (npc_gettrueguild(hero) == gil_kdf) {
        return true;
    };
};

func void kdf_402_corristo_explaincircles_info() {
    ai_output(other, self, "KDF_402_Corristo_EXPLAINCIRCLES_Info_15_01"); //Ïîæàëóéñòà, îáúÿñíè ìíå, â ÷åì ñìûñë ìàãè÷åñêèõ Êðóãîâ?
    ai_output(self, other, "KDF_402_Corristo_EXPLAINCIRCLES_Info_14_02"); //Ñ óäîâîëüñòâèåì. Êðóãè ñèìâîëèçèðóþò òâîå ïîíèìàíèå ìàãèè.
    ai_output(self, other, "KDF_402_Corristo_EXPLAINCIRCLES_Info_14_03"); //Îíè îáîçíà÷àþò óðîâåíü òâîèõ çíàíèé è íàâûêîâ, ñïîñîáíîñòü îáó÷àòüñÿ íîâûì çàêëèíàíèÿì.
    ai_output(self, other, "KDF_402_Corristo_EXPLAINCIRCLES_Info_14_04"); //Òû äîëæåí ïðîéòè êàæäûé Êðóã äî êîíöà, ïðåæäå ÷åì ñìîæåøü âñòóïèòü â ñëåäóþùèé.
    ai_output(self, other, "KDF_402_Corristo_EXPLAINCIRCLES_Info_14_05"); //Ïîòðåáóþòñÿ äîëãèå ÷àñû îáó÷åíèÿ è íàìíîãî áîëüøå îïûòà, ÷òîáû äîñòè÷ü âûñøèõ Êðóãîâ.
    ai_output(self, other, "KDF_402_Corristo_EXPLAINCIRCLES_Info_14_06"); //Òâîè ñòàðàíèÿ êàæäûé ðàç áóäóò âîçíàãðàæäàòüñÿ íîâûìè ìîãóùåñòâåííûìè çàêëèíàíèÿìè. Íî â ëþáîì ñëó÷àå ìàãè÷åñêèå Êðóãè çíà÷àò êóäà áîëüøå.
    ai_output(self, other, "KDF_402_Corristo_EXPLAINCIRCLES_Info_14_07"); //Îíè - ÷àñòü òâîåé æèçíè. Îíè âñåãäà áóäóò ñ òîáîé. Ñäåëàé èõ ÷àñòüþ ñåáÿ.
    ai_output(self, other, "KDF_402_Corristo_EXPLAINCIRCLES_Info_14_08"); //Äëÿ òîãî ÷òîáû ïîíÿòü èõ ñèëó, òû äîëæåí ïîçíàòü ñåáÿ.
};

instance kdf_402_corristo_kreis1(c_info) {
    npc = kdf_402_corristo /*7541*/;
    nr = 0;
    condition = kdf_402_corristo_kreis1_condition;
    information = kdf_402_corristo_kreis1_info;
    permanent = true;
    description = b_buildlearnstring(name_learnmage_1, lpcost_talent_mage_1, 0);
};

func int kdf_402_corristo_kreis1_condition() {
    if (((npc_gettalentskill(hero, npc_talent_mage) == 0) && npc_knowsinfo(hero, kdf_402_corristo_explaincircles /*9929*/)) && (npc_gettrueguild(hero) == gil_kdf)) {
        return true;
    };
};

func void kdf_402_corristo_kreis1_info() {
    ai_output(other, self, "KDF_402_Corristo_KREIS1_Info_15_01"); //ß ãîòîâ âñòóïèòü â Ïåðâûé Êðóã.
    if (b_giveskill(other, npc_talent_mage, 1, lpcost_talent_mage_1)) {
        ai_output(self, other, "KDF_402_Corristo_KREIS1_Info_14_02"); //Âñòóïèâ â Ïåðâûé Êðóã, òû íàó÷èøüñÿ èñïîëüçîâàòü ìàãè÷åñêèå ðóíû.
        ai_output(self, other, "KDF_402_Corristo_KREIS1_Info_14_03"); //Êàæäàÿ ðóíà ñîäåðæèò ñòðóêòóðó îñîáîãî ìàãè÷åñêîãî çàêëèíàíèÿ.
        ai_output(self, other, "KDF_402_Corristo_KREIS1_Info_14_04"); //Èñïîëüçîâàâ ñâîþ ñîáñòâåííóþ ìàãè÷åñêóþ ñèëó, òû ñìîæåøü âûñâîáîäèòü ìàãèþ ðóíû.
        ai_output(self, other, "KDF_402_Corristo_KREIS1_Info_14_05"); //Íî â îòëè÷èå îò  ñâèòêîâ, êîòîðûå ïî ñóòè ÿâëÿþòñÿ ìàãè÷åñêèìè ôîðìóëàìè, ìàãèÿ ðóí ïîääåðæèâàåò ñòðóêòóðó çàêëèíàíèÿ âñåãäà.
        ai_output(self, other, "KDF_402_Corristo_KREIS1_Info_14_06"); //Êàæäàÿ ðóíà òàèò â ñåáå ìàãè÷åñêóþ ñèëó, êîòîðóþ òû ìîæåøü çàáðàòü â ëþáîé ìîìåíò.
        ai_output(self, other, "KDF_402_Corristo_KREIS1_Info_14_07"); //Òàê æå, êàê è ñî ñâèòêîì, â ìîìåíò, êîãäà òû èñïîëüçóåøü ðóíó, ðàñõîäóåòñÿ òâîÿ ñîáñòâåííàÿ ìàãè÷åñêàÿ ñèëà.
        ai_output(self, other, "KDF_402_Corristo_KREIS1_Info_14_08"); //Ñ êàæäûì íîâûì Êðóãîì òû áóäåøü óçíàâàòü î ðóíàõ âñå áîëüøå è áîëüøå.
        ai_output(self, other, "KDF_402_Corristo_KREIS1_Info_14_09"); //Èñïîëüçóé èõ ñèëó, äëÿ òîãî ÷òîáû ïîçíàòü ñåáÿ.
    };
};

instance kdf_402_corristo_kreis2(c_info) {
    npc = kdf_402_corristo /*7541*/;
    nr = 0;
    condition = kdf_402_corristo_kreis2_condition;
    information = kdf_402_corristo_kreis2_info;
    permanent = true;
    description = b_buildlearnstring(name_learnmage_2, lpcost_talent_mage_2, 0);
};

func int kdf_402_corristo_kreis2_condition() {
    if ((npc_gettalentskill(hero, npc_talent_mage) == 1) && (npc_gettrueguild(hero) == gil_kdf)) {
        return true;
    };
};

func void kdf_402_corristo_kreis2_info() {
    ai_output(other, self, "KDF_402_Corristo_KREIS2_Info_15_01"); //ß ãîòîâ âñòóïèòü âî Âòîðîé Êðóã.
    if (b_giveskill(other, npc_talent_mage, 2, lpcost_talent_mage_2)) {
        ai_output(self, other, "KDF_402_Corristo_KREIS2_Info_14_02"); //Òû óæå íàó÷èëñÿ ïîíèìàòü ðóíû. Ïðèøëî âðåìÿ óãëóáèòü òâîè ïîçíàíèÿ.
        ai_output(self, other, "KDF_402_Corristo_KREIS2_Info_14_03"); //Âñòóïèâ âî Âòîðîé Êðóã, òû ïîñòèãíåøü îñíîâû ìîùíûõ áîåâûõ çàêëÿòèé è ïîçíàåøü âñå ñåêðåòû öåëèòåëüñòâà.
        ai_output(self, other, "KDF_402_Corristo_KREIS2_Info_14_04"); //Íî äëÿ òîãî ÷òîáû ïîçíàòü èñòèííûå ñåêðåòû ìàãèè, òåáå ïðåäñòîèò ìíîãîìó íàó÷èòüñÿ.
        ai_output(self, other, "KDF_402_Corristo_KREIS2_Info_14_05"); //Òû óæå çíàåøü î òîì, ÷òî ìîæåøü èñïîëüçîâàòü ëþáóþ ðóíó áåññ÷åòíîå ÷èñëî ðàç, íî ëèøü äî òåõ ïîð, ïîêà íå èçðàñõîäóåøü ñîáñòâåííóþ ìàãè÷åñêóþ ñèëó.
        ai_output(self, other, "KDF_402_Corristo_KREIS2_Info_14_06"); //Íî ïðåæäå ÷åì ñäåëàòü ÷òî-ëèáî, ïîäóìàé î òîì, åñòü ëè â ýòîì ñìûñë. Òû îáëàäàåøü ñèëîé, êîòîðàÿ ïîçâîëÿåò ñ ëåãêîñòüþ ñåÿòü ñìåðòü è ðàçðóøåíèÿ.
        ai_output(self, other, "KDF_402_Corristo_KREIS2_Info_14_07"); //Íî èñòèííûé ìàã èñïîëüçóåò åå ëèøü ïî íåîáõîäèìîñòè.
        ai_output(self, other, "KDF_402_Corristo_KREIS2_Info_14_08"); //Íàó÷èñü îöåíèâàòü ñèòóàöèþ, è òû ïîçíàåøü èñòèííóþ ñèëó ðóí.
    };
};

instance kdf_402_corristo_kreis3(c_info) {
    npc = kdf_402_corristo /*7541*/;
    nr = 0;
    condition = kdf_402_corristo_kreis3_condition;
    information = kdf_402_corristo_kreis3_info;
    permanent = true;
    description = b_buildlearnstring(name_learnmage_3, lpcost_talent_mage_3, 0);
};

func int kdf_402_corristo_kreis3_condition() {
    if ((npc_gettalentskill(hero, npc_talent_mage) == 2) && (npc_gettrueguild(hero) == gil_kdf)) {
        return true;
    };
};

func void kdf_402_corristo_kreis3_info() {
    ai_output(other, self, "KDF_402_Corristo_KREIS3_Info_15_01"); //Êàêèå çíàíèÿ ñîïóòñòâóþò Òðåòüåìó Êðóãó?
    if (b_giveskill(other, npc_talent_mage, 3, lpcost_talent_mage_3)) {
        ai_output(self, other, "KDF_402_Corristo_KREIS3_Info_14_02"); //Òðåòèé Êðóã ÿâëÿåòñÿ îäíèì èç âàæíåéøèõ ýòàïîâ â æèçíè êàæäîãî ìàãà. Äîñòèãíóâ åãî, òû çàâåðøàåøü ñâîé ïîèñê.
        ai_output(self, other, "KDF_402_Corristo_KREIS3_Info_14_03"); //Òû óæå ïðåîäîëåë çíà÷èòåëüíûé ýòàï íà ïóòè ìàãèè. Òû íàó÷èëñÿ èñïîëüçîâàòü ðóíû.
        ai_output(self, other, "KDF_402_Corristo_KREIS3_Info_14_04"); //Ýòî çíàíèå ïîñëóæèò îñíîâîé äëÿ ñëåäóþùåãî ýòàïà. Èñïîëüçóé ðóíû îñìîòðèòåëüíî.
        ai_output(self, other, "KDF_402_Corristo_KREIS3_Info_14_05"); //Òû ìîæåøü èñïîëüçîâàòü èõ èëè íåò. Íî òû äîëæåí îïðåäåëèòüñÿ ñ âûáîðîì.
        ai_output(self, other, "KDF_402_Corristo_KREIS3_Info_14_06"); //Ñäåëàâ âûáîð, èñïîëüçóé ñâîþ ñèëó áåç êîëåáàíèé.
        ai_output(self, other, "KDF_402_Corristo_KREIS3_Info_14_07"); //Íàéäè ñâîé ïóòü, è òîãäà òû ïîçíàåøü ñèëó ðåøåíèÿ.
    };
};

instance kdf_402_corristo_kreis4(c_info) {
    npc = kdf_402_corristo /*7541*/;
    nr = 0;
    condition = kdf_402_corristo_kreis4_condition;
    information = kdf_402_corristo_kreis4_info;
    permanent = true;
    description = b_buildlearnstring(name_learnmage_4, lpcost_talent_mage_4, 0);
};

func int kdf_402_corristo_kreis4_condition() {
    if ((npc_gettalentskill(hero, npc_talent_mage) == 3) && (npc_gettrueguild(hero) == gil_kdf)) {
        return true;
    };
};

func void kdf_402_corristo_kreis4_info() {
    ai_output(other, self, "KDF_402_Corristo_KREIS4_Info_15_01"); //ß ãîòîâ âñòóïèòü â ×åòâåðòûé Êðóã.
    if (b_giveskill(other, npc_talent_mage, 4, lpcost_talent_mage_4)) {
        ai_output(self, other, "KDF_402_Corristo_KREIS4_Info_14_02"); //Òû çàâåðøèë ïåðâûå òðè Êðóãà. Ïðèøëî âðåìÿ òåáå ïîñòè÷ü ñåêðåòû ìàãèè.
        ai_output(self, other, "KDF_402_Corristo_KREIS4_Info_14_03"); //Îñíîâà ìàãèè ðóí - êàìåíü. Ìàãè÷åñêèé êàìåíü, äîáûòûé èç ìàãè÷åñêîé ðóäû.
        ai_output(self, other, "KDF_402_Corristo_KREIS4_Info_14_04"); //Ýòî òà ñàìàÿ ðóäà, êîòîðóþ äîáûâàþò â øàõòàõ. Â õðàìàõ îíà íàäåëÿåòñÿ ìàãè÷åñêèìè ôîðìóëàìè, è òàì æå ðóíû ïðåâðàùàþòñÿ â îðóäèÿ íàøåé ñèëû.
        ai_output(self, other, "KDF_402_Corristo_KREIS4_Info_14_05"); //Òåïåðü òû îáëàäàåøü âñåìè çíàíèÿìè, êîòîðûå áûëè íàêîïëåíû õðàìàìè.
        ai_output(self, other, "KDF_402_Corristo_KREIS4_Info_14_06"); //Òû íàó÷èëñÿ âñåìó, ÷òî ÿ çíàë ñàì.
        ai_output(self, other, "KDF_402_Corristo_KREIS4_Info_14_07"); //Ïîçíàé ìàãèþ, è òû îòêðîåøü äëÿ ñåáÿ ñåêðåò âëàñòè.
    };
};

instance kdf_402_corristo_heavyarmor(c_info) {
    npc = kdf_402_corristo /*7541*/;
    nr = 0;
    condition = kdf_402_corristo_heavyarmor_condition;
    information = kdf_402_corristo_heavyarmor_info;
    permanent = true;
    description = b_buildbuyarmorstring(name_corristohighrobe, value_kdf_armor_h);
};

func int kdf_402_corristo_heavyarmor_condition() {
    if ((npc_gettrueguild(hero) == gil_kdf) && (!npc_hasitems(hero, kdf_armor_h))) {
        return true;
    };
};

func void kdf_402_corristo_heavyarmor_info() {
    ai_output(other, self, "KDF_402_Corristo_HEAVYARMOR_Info_15_01"); //Ãîñïîäèí ìîé, ÿ õî÷ó íîñèòü îáëà÷åíèå âûñøèõ ìàãîâ Îãíÿ.
    if (kapitel < 3) {
        ai_output(self, other, "KDW_600_Saturas_HEAVYARMOR_Info_14_02"); //Òâîå âðåìÿ åùå íå ïðèøëî.
    }
    else if (npc_hasitems(hero, itminugget) < value_kdf_armor_h) {
        ai_output(self, other, "KDF_402_Corristo_HEAVYARMOR_Info_14_03"); //Äëÿ ýòîãî ó òåáÿ íåäîñòàòî÷íî ðóäû.
    }
    else {
        ai_output(self, other, "KDF_402_Corristo_HEAVYARMOR_Info_14_04"); //Âðåìÿ ïðèøëî. Òû äîñòîèí íîñèòü îáëà÷åíèå âûñøèõ ìàãîâ Îãíÿ.
        createinvitem(hero, kdf_armor_h);
        createinvitem(self, itamarrow);
        b_giveinvitems(self, hero, itamarrow /*4894*/, 1);
        npc_removeinvitem(hero, itamarrow /*4894*/);
        b_giveinvitems(hero, self, itminugget /*4517*/, value_kdf_armor_h);
        ai_equipbestarmor(hero);
    };
};

instance kdf_403_drago_rune(c_info) {
    npc = kdf_403_drago /*7545*/;
    condition = kdf_403_drago_rune_condition;
    information = kdf_403_drago_rune_info;
    important = true;
};

func int kdf_403_drago_rune_condition() {
    if (npc_knowsinfo(hero, kdf_402_corristo_robe /*9920*/)) {
        return true;
    };
};

func void kdf_403_drago_rune_info() {
    ai_output(self, other, "KDF_403_Drago_RUNE_Info_13_01"); //Ïðèìè ýòó ðóíó, äàð Èííîñà. Äà çàùèòèò îíà òåáÿ íà òâîåì ïóòè!
    createinvitem(self, itarrunefirebolt);
    b_giveinvitems(self, other, itarrunefirebolt /*4160*/, 1);
    ai_stopprocessinfos(self);
};

instance kdf_403_drago_exit(c_info) {
    npc = kdf_403_drago /*7545*/;
    nr = 999;
    condition = kdf_403_drago_exit_condition;
    information = kdf_403_drago_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int kdf_403_drago_exit_condition() {
    return true;
};

func void kdf_403_drago_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_xardas_exit(c_info) {
    npc = kdf_404_xardas /*7548*/;
    nr = 999;
    condition = info_xardas_exit_condition;
    information = info_xardas_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_xardas_exit_condition() {
    return 1;
};

func void info_xardas_exit_info() {
    ai_stopprocessinfos(self);
    if (!npc_hasitems(self, itarrunefireball)) {
        createinvitem(self, itarrunefireball);
    };
    if (npc_hasitems(self, itarscrollsummondemon) < 1) {
        createinvitems(self, itarscrollsummondemon, 2);
    };
};

instance info_xardas_disturb(c_info) {
    npc = kdf_404_xardas /*7548*/;
    condition = info_xardas_disturb_condition;
    information = info_xardas_disturb_info;
    important = true;
};

func int info_xardas_disturb_condition() {
    if (!urshak_spokeofulumulu) {
        return true;
    };
};

func void info_xardas_disturb_info() {
    b_whirlaround(self, hero);
    ai_output(self, hero, "Info_Xardas_DISTURB_14_01"); //ÊÒÎ ÏÎÑÌÅË ÎÒÂËÅ×Ü ÌÅÍß ÎÒ ÌÎÈÕ ÈÑÑËÅÄÎÂÀÍÈÉ?
    ai_output(hero, self, "Info_Xardas_DISTURB_15_02"); //Ìåíÿ çîâóò...
    ai_output(self, hero, "Info_Xardas_DISTURB_14_03"); //ß íå æåëàþ çíàòü òâîå èìÿ. Ýòî íåñóùåñòâåííî.
    ai_output(self, hero, "Info_Xardas_DISTURB_14_04"); //Êóäà âàæíåå òî, ÷òî çà äîëãèå ãîäû òû - ïåðâûé, êòî ñóìåë ðàçãàäàòü çàãàäêè ìîåãî ãîëåìà.
};

instance info_xardas_others(c_info) {
    npc = kdf_404_xardas /*7548*/;
    nr = 0;
    condition = info_xardas_others_condition;
    information = info_xardas_others_info;
    description = "À áûëè è äðóãèå?";
};

func int info_xardas_others_condition() {
    if (npc_knowsinfo(hero, info_xardas_disturb /*9956*/)) {
        return true;
    };
};

func void info_xardas_others_info() {
    ai_output(hero, self, "Info_Xardas_OTHERS_15_01"); //À áûëè è äðóãèå?
    ai_output(self, hero, "Info_Xardas_OTHERS_14_02"); //Èõ áûëî íåìíîãî, è êîãäà îíè íàäîåäàëè ìíå, ÿ çíàêîìèë èõ ñî ñâîèìè ñâåðõúåñòåñòâåííûìè ñîçäàíèÿìè.
    ai_output(hero, self, "Info_Xardas_OTHERS_15_03"); //Ïîõîæå, òû öåíèøü ñâîå óåäèíåíèå.
};

instance info_xardas_saturas(c_info) {
    npc = kdf_404_xardas /*7548*/;
    nr = 0;
    condition = info_xardas_saturas_condition;
    information = info_xardas_saturas_info;
    description = "Ìåíÿ ïðèñëàë Ñàòóðàñ. Íàì íóæíà òâîÿ ïîìîùü!";
};

func int info_xardas_saturas_condition() {
    if (npc_knowsinfo(hero, info_xardas_disturb /*9956*/)) {
        return true;
    };
};

func void info_xardas_saturas_info() {
    ai_output(hero, self, "Info_Xardas_SATURAS_15_01"); //Ìåíÿ ïðèñëàë Ñàòóðàñ. Íàì íóæíà òâîÿ ïîìîùü!
    ai_output(hero, self, "Info_Xardas_SATURAS_15_02"); //Ìàãè Âîäû õîòÿò èñïîëüçîâàòü ñâîè çàïàñû ðóäû...
    ai_output(self, hero, "Info_Xardas_SATURAS_14_03"); //Ðåøåíèå êðîåòñÿ íå â ÝÒÎÌ!
    ai_output(hero, self, "Info_Xardas_SATURAS_15_04"); //Íå â ýòîì?
    ai_output(self, hero, "Info_Xardas_SATURAS_14_05"); //ÍÅÒ!
};

instance info_xardas_kdw(c_info) {
    npc = kdf_404_xardas /*7548*/;
    nr = 0;
    condition = info_xardas_kdw_condition;
    information = info_xardas_kdw_info;
    description = "Âñå ìàãè Îãíÿ ìåðòâû!";
};

func int info_xardas_kdw_condition() {
    if (npc_knowsinfo(hero, info_xardas_disturb /*9956*/)) {
        return true;
    };
};

func void info_xardas_kdw_info() {
    ai_output(hero, self, "Info_Xardas_KDW_15_01"); //Âñå ìàãè Îãíÿ ìåðòâû.
    ai_output(hero, self, "Info_Xardas_KDW_15_02"); //Èõ óáèë Ãîìåç.
    ai_output(self, hero, "Info_Xardas_KDW_14_03"); //Ýòî ìåíÿ íå óäèâëÿåò. Òóïûå ìÿñíèêè-âàðâàðû â çàìêå - èì íåëüçÿ áûëî äîâåðÿòü.
    ai_output(self, hero, "Info_Xardas_KDW_14_04"); //Ïîìîãàÿ Ãîìåçó çàõâàòèòü âëàñòü, Êîððèñòî è îñòàëüíûå ñàìè ñóíóëè ãîëîâó â ïåòëþ.
};

instance info_xardas_sleeper(c_info) {
    npc = kdf_404_xardas /*7548*/;
    nr = 0;
    condition = info_xardas_sleeper_condition;
    information = info_xardas_sleeper_info;
    description = "Ãîâîðÿò, ÷òî `Ñïÿùèé` íà ñàìîì äåëå ÿâëÿåòñÿ çëûì äåìîíîì.";
};

func int info_xardas_sleeper_condition() {
    if (npc_knowsinfo(hero, info_xardas_disturb /*9956*/)) {
        return true;
    };
};

func void info_xardas_sleeper_info() {
    ai_output(hero, self, "Info_Xardas_SLEEPER_15_01"); //Ãîâîðÿò, ÷òî òàê íàçûâàåìûé 'Ñïÿùèé' íà ñàìîì äåëå ÿâëÿåòñÿ çëûì äåìîíîì.
    ai_output(hero, self, "Info_Xardas_SLEEPER_15_02"); //Ýòî âûÿñíèëè ÷ëåíû áîëîòíîãî Áðàòñòâà.
    ai_output(hero, self, "Info_Xardas_SLEEPER_15_03"); //Ìàãè Âîäû óâåðåíû, ÷òî âñÿ êîëîíèÿ íàõîäèòñÿ ïîä óãðîçîé.
    ai_output(self, hero, "Info_Xardas_SLEEPER_14_04"); //Ýòà îïàñíîñòü áîëüøå, ÷åì ìîæåò ñåáå ïðåäñòàâèòü ëþáîé, êòî íàõîäèòñÿ âíóòðè Áàðüåðà.
};

instance info_xardas_danger(c_info) {
    npc = kdf_404_xardas /*7548*/;
    nr = 0;
    condition = info_xardas_danger_condition;
    information = info_xardas_danger_info;
    description = "Åñëè âçðûâ æåëåçíîé ãîðû íå ïðåäîòâðàòèò óãðîçó...";
};

func int info_xardas_danger_condition() {
    if (npc_knowsinfo(hero, info_xardas_sleeper /*9968*/) && npc_knowsinfo(hero, info_xardas_saturas /*9962*/)) {
        return true;
    };
};

func void info_xardas_danger_info() {
    ai_output(hero, self, "Info_Xardas_DANGER_15_01"); //Åñëè âçðûâ æåëåçíîé ãîðû íå ïðåäîòâðàòèò óãðîçó...
    ai_output(self, hero, "Info_Xardas_DANGER_14_02"); //... Çàáóäü î ðóäå! Îíà íå â ñèëàõ îáðóøèòü Áàðüåð.
    ai_output(self, hero, "Info_Xardas_DANGER_14_03"); //Åñëè áû Êîððèñòî è Ñàòóðàñ íå òðàòèëè ñâîå âðåìÿ íà ðåøåíèå ïóñòûõ è íèê÷åìíûõ âîïðîñîâ âñå ýòè ãîäû, ñåé÷àñ îíè áû çíàëè òî æå, ÷òî è ÿ.
    ai_output(hero, self, "Info_Xardas_DANGER_15_04"); //×òî èìåííî?
    ai_output(self, hero, "Info_Xardas_DANGER_14_05"); //Íè îäèí èç äâåíàäöàòè ìàãîâ íå ïðåêðàùàë ëîìàòü ãîëîâó íàä âîïðîñîì, ïî÷åìó îíè íå â ñîñòîÿíèè êîíòðîëèðîâàòü Áàðüåð è ïî÷åìó îí ðàçðîññÿ äî òàêèõ ãèãàíòñêèõ ðàçìåðîâ.
};

instance info_xardas_barrier(c_info) {
    npc = kdf_404_xardas /*7548*/;
    nr = 0;
    condition = info_xardas_barrier_condition;
    information = info_xardas_barrier_info;
    description = "È òû íàøåë îòâåò?";
};

func int info_xardas_barrier_condition() {
    if (npc_knowsinfo(hero, info_xardas_danger /*9971*/)) {
        return true;
    };
};

func void info_xardas_barrier_info() {
    ai_output(hero, self, "Info_Xardas_BARRIER_15_01"); //È òû íàøåë îòâåò?
    ai_output(self, hero, "Info_Xardas_BARRIER_14_02"); //Íó, ÿñíî îäíî: îòâåò íàõîäèòñÿ ïîä ãîðîäîì îðêîâ.
    ai_output(hero, self, "Info_Xardas_BARRIER_15_03"); //Ãîðîä îðêîâ?
    ai_output(self, hero, "Info_Xardas_BARRIER_14_04"); //Îðêè - âîâñå íå çâåðè, êàê äóìàåò áîëüøèíñòâî ëþäåé. Èõ êóëüòóðà íàñ÷èòûâàåò ñòîëüêî æå ëåò, ñêîëüêî è ÷åëîâå÷åñêàÿ.
    ai_output(self, hero, "Info_Xardas_BARRIER_14_05"); //Íåñêîëüêî âåêîâ íàçàä ïÿòü îðêîâ-øàìàíîâ ïðèçâàëè äðåâíåãî äåìîíà, â íàäåæäå, ÷òî îí ïîìîæåò èì ïîáåäèòü âñåõ âðàãîâ.
    ai_output(hero, self, "Info_Xardas_BARRIER_15_06"); //Ýòîò äåìîí - ýòî è åñòü Ñïÿùèé?
    ai_output(self, hero, "Info_Xardas_BARRIER_14_07"); //Ýòî èìÿ îðêè äàëè åìó íàìíîãî ïîçæå. Íî ÿ íå ñêàæó òåáå, ïî÷åìó îíè åãî òàê ïðîçâàëè è ïî÷åìó ñåé÷àñ ýòî ñâåðõúåñòåñòâåííîå ñîçäàíèå âíóøàåò èì òàêîé óæàñ.
};

instance info_xardas_event(c_info) {
    npc = kdf_404_xardas /*7548*/;
    nr = 0;
    condition = info_xardas_event_condition;
    information = info_xardas_event_info;
    description = "Ïî÷åìó?";
};

func int info_xardas_event_condition() {
    if (npc_knowsinfo(hero, info_xardas_barrier /*9974*/)) {
        return true;
    };
};

func void info_xardas_event_info() {
    ai_output(hero, self, "Info_Xardas_EVENT_15_01"); //Íå ñêàæåøü? Íî ïî÷åìó?
    ai_output(self, hero, "Info_Xardas_EVENT_14_02"); //ß äóìàþ, ÷òî òû ìîæåøü áûòü... ÍÅÒ, äëÿ òîãî ÷òîáû óáåäèòüñÿ â ýòîì îêîí÷àòåëüíî, ÿ äàì òåáå îäíî çàäàíèå.
    ai_output(hero, self, "Info_Xardas_EVENT_15_03"); //Êàêîå?
    ai_output(self, hero, "Info_Xardas_EVENT_14_04"); //Ñëóøàé âíèìàòåëüíî. Îðêè èçãíàëè îäíîãî øàìàíà èç ãîðîäà.
};

instance info_xardas_eventwhy(c_info) {
    npc = kdf_404_xardas /*7548*/;
    nr = 0;
    condition = info_xardas_eventwhy_condition;
    information = info_xardas_eventwhy_info;
    description = "Çà ÷òî îíè èçãíàëè åãî?";
};

func int info_xardas_eventwhy_condition() {
    if (npc_knowsinfo(hero, info_xardas_event /*9977*/)) {
        return true;
    };
};

func void info_xardas_eventwhy_info() {
    ai_output(hero, self, "Info_Xardas_EVENTWHY_15_01"); //Çà ÷òî îíè èçãíàëè åãî?
    ai_output(self, hero, "Info_Xardas_EVENTWHY_14_02"); //Êîãäà îäèí èç ìîèõ äåìîíîâ ïûòàë îðêñêîãî âîèíà, òîò óæå óìèðàë è áûë íå â ñîñòîÿíèè îòâåòèòü íà ýòîò âîïðîñ.
};

instance info_xardas_eventhow(c_info) {
    npc = kdf_404_xardas /*7548*/;
    nr = 0;
    condition = info_xardas_eventhow_condition;
    information = info_xardas_eventhow_info;
    description = "Êàêîå îòíîøåíèå ýòîò øàìàí èìååò ê ìîåìó çàäàíèþ?";
};

func int info_xardas_eventhow_condition() {
    if (npc_knowsinfo(hero, info_xardas_event /*9977*/)) {
        return true;
    };
};

func void info_xardas_eventhow_info() {
    ai_output(hero, self, "Info_Xardas_EVENTHOW_15_01"); //Êàêîå îòíîøåíèå ýòîò øàìàí èìååò ê ìîåìó çàäàíèþ?
    ai_output(self, hero, "Info_Xardas_EVENTHOW_14_02"); //Îí ðàññêàæåò òåáå âòîðóþ ÷àñòü èñòîðèè î Ñïÿùåì.
    ai_output(hero, self, "Info_Xardas_EVENTHOW_15_03"); //Åäâà ëè øàìàí îðêîâ çàõî÷åò ãîâîðèòü ñî ìíîé!
    ai_output(self, hero, "Info_Xardas_EVENTHOW_14_04"); //Òû õî÷åøü, ÷òîáû ÿ ïîìîã òåáå, èëè íåò?
    ai_output(hero, self, "Info_Xardas_EVENTHOW_15_05"); //Âîîáùå-òî, äà, íî...
    ai_output(self, hero, "Info_Xardas_EVENTHOW_14_06"); //Òîãäà áîëüøå íèêîãäà íå ïîäâåðãàé ñîìíåíèþ ìîè ñëîâà!
    ai_output(self, hero, "Info_Xardas_EVENTHOW_14_07"); //Íàéäè øàìàíà. Îí íå ñëèøêîì ëàäèò ñî ñâîèìè ñîðîäè÷àìè èç ãîðîäà îðêîâ, òàê ÷òî, âîçìîæíî, îí âûñëóøàåò íåçâàííîãî ãîñòÿ, ïðåæäå ÷åì ïðåâðàòèòü åãî â æèâîé ôàêåë.
    ai_output(hero, self, "Info_Xardas_EVENTHOW_15_08"); //Çâó÷èò îáíàäåæèâàþùå!
};

instance info_xardas_eventwhere(c_info) {
    npc = kdf_404_xardas /*7548*/;
    nr = 0;
    condition = info_xardas_eventwhere_condition;
    information = info_xardas_eventwhere_info;
    description = "Ãäå æèâåò ýòîò èçãíàííûé øàìàí?";
};

func int info_xardas_eventwhere_condition() {
    if (npc_knowsinfo(hero, info_xardas_event /*9977*/)) {
        return true;
    };
};

func void info_xardas_eventwhere_info() {
    ai_output(hero, self, "Info_Xardas_EVENTWHERE_15_01"); //Ãäå æèâåò ýòîò èçãíàííûé øàìàí?
    ai_output(self, hero, "Info_Xardas_EVENTWHERE_14_02"); //Îòïðàâëÿéñÿ íà âîñòîê, ê ñòàðîé êðåïîñòè. Òû íå çàáëóäèøüñÿ - îíà ñòîèò íà âåðøèíå ãîðû, è åå âèäíî èçäàëåêà.
    ai_output(hero, self, "Info_Xardas_EVENTWHERE_15_03"); //Â íåå ìîæíî çàéòè?
    ai_output(self, hero, "Info_Xardas_EVENTWHERE_14_04"); //Íà ñàìîì äåëå, îò ñòàðîé êðåïîñòè îñòàëèñü ëèøü îáëîìêè ñòåí. Îíà áûëà ðàçðóøåíà åùå íåñêîëüêî äåñÿòèëåòèé íàçàä.
};

instance info_xardas_accept(c_info) {
    npc = kdf_404_xardas /*7548*/;
    nr = 0;
    condition = info_xardas_accept_condition;
    information = info_xardas_accept_info;
    description = "ß äîáüþñü îòâåòîâ îò ýòîãî øàìàíà!";
};

func int info_xardas_accept_condition() {
    if ((npc_knowsinfo(hero, info_xardas_eventwhy /*9980*/) && npc_knowsinfo(hero, info_xardas_eventhow /*9983*/)) && npc_knowsinfo(hero, info_xardas_eventwhere /*9986*/)) {
        return true;
    };
};

func void info_xardas_accept_info() {
    ai_output(hero, self, "Info_Xardas_ACCEPT_15_01"); //ß äîáüþñü îòâåòîâ îò ýòîãî øàìàíà!
    ai_output(self, hero, "Info_Xardas_ACCEPT_14_02"); //Ìîé ñëóãà óæå îòäàë òåáå Ðóíó Òåëåïîðòàöèè. Â ëþáîé ìîìåíò îíà ïåðåíåñåò òåáÿ â ïåíòàãðàììó, êîòîðàÿ íàõîäèòñÿ â íèæíåì çàëå.
    ai_output(self, hero, "Info_Xardas_ACCEPT_14_03"); //Ó òåáÿ íå áóäåò ïðîáëåì ñ âîçâðàùåíèåì.
    npc_exchangeroutine(self, "Study");
    ai_stopprocessinfos(self);
    b_story_cordspost();
    b_story_findorcshaman();
};

instance kdf_404_xardas_sellmagicstuff(c_info) {
    npc = kdf_404_xardas /*7548*/;
    nr = 0;
    condition = kdf_404_xardas_sellmagicstuff_condition;
    information = kdf_404_xardas_sellmagicstuff_info;
    permanent = true;
    trade = true;
    description = "ß õî÷ó ïîñòèãàòü ñóòü ìàãèè.";
};

func int kdf_404_xardas_sellmagicstuff_condition() {
    if (npc_knowsinfo(hero, info_xardas_accept /*9989*/)) {
        return true;
    };
};

func void kdf_404_xardas_sellmagicstuff_info() {
    ai_output(other, self, "Kdf_404_Xardas_SELLMAGICSTUFF_Info_15_01"); //ß õî÷ó ïîñòèãàòü ñóòü ìàãèè.
};

instance info_xardas_return(c_info) {
    npc = kdf_404_xardas /*7548*/;
    nr = 0;
    condition = info_xardas_return_condition;
    information = info_xardas_return_info;
    description = "ß äîáèëñÿ îòâåòîâ îò øàìàíà îðêîâ!";
};

func int info_xardas_return_condition() {
    if (urshak_spokeofulumulu && (!enteredtemple)) {
        return true;
    };
};

func void info_xardas_return_info() {
    ai_output(hero, self, "Info_Xardas_RETURN_15_01"); //ß äîáèëñÿ îòâåòîâ îò øàìàíà îðêîâ!
    ai_output(self, hero, "Info_Xardas_RETURN_14_02"); //Íó, òàê ãîâîðè æå!
    ai_output(hero, self, "Info_Xardas_RETURN_15_03"); //Ïÿòü øàìàíîâ ïðèçâàëè Ñïÿùåãî è âûñòðîèëè äëÿ íåãî ïîäçåìíûé õðàì, âõîä â êîòîðûé íàõîäèòñÿ â ãîðîäå îðêîâ.
    ai_output(self, hero, "Info_Xardas_RETURN_14_04"); //Âñå âåðíî.
    ai_output(hero, self, "Info_Xardas_RETURN_15_05"); //Íî äåìîíû íå çíàþò áëàãîäàðíîñòè - è Ñïÿùèé âûðâàë èõ ñåðäöà è îáðåê ñòðîèòåëåé õðàìà íà âå÷íîå ñëóæåíèå åìó â îáëèêå íåæèòè.
    ai_output(self, hero, "Info_Xardas_RETURN_14_06"); //Õîðîøî, î÷åíü õîðîøî!
    ai_output(hero, self, "Info_Xardas_RETURN_15_07"); //Îðêè çàïå÷àòàëè õðàì è íà÷àëè ïðèíîñèòü æåðòâû, äàáû óìèðîòâîðèòü äåìîíà.
    ai_output(self, hero, "Info_Xardas_RETURN_14_08"); //Íàøåë ëè òû ïóòü êî âõîäó â õðàì?
    ai_output(hero, self, "Info_Xardas_RETURN_15_09"); //Äà, åñòü îðê, êîòîðûé...
    ai_output(self, hero, "Info_Xardas_RETURN_14_10"); //Èçáàâü ìåíÿ îò ïîäðîáíîñòåé! Îòïðàâëÿéñÿ â ïîäçåìíûé õðàì! Òàì ñîêðûò íàø åäèíñòâåííûé øàíñ óíè÷òîæèòü Áàðüåð!
    ai_output(hero, self, "Info_Xardas_RETURN_15_11"); //Íî ÿ íå ïîíèìàþ!
    ai_output(self, hero, "Info_Xardas_RETURN_14_12"); //Íå òû ëè âçûâàë êî ìíå î ïîìîùè, æåëàÿ óíè÷òîæèòü Áàðüåð?
    ai_output(hero, self, "Info_Xardas_RETURN_15_13"); //Ýòî òàê, íî...
    ai_output(self, hero, "Info_Xardas_RETURN_14_14"); //ÒÀÊ ÈÄÈ ÆÅ! Ìû è òàê óæå ïîòðàòèëè âïóñòóþ íåìàëî âðåìåíè! Îòïðàâëÿéñÿ â ïîäçåìíûé õðàì è íàéäè òàì îòâåò!
    b_story_returnedfromurshak();
};

instance info_xardas_foundtemple(c_info) {
    npc = kdf_404_xardas /*7548*/;
    nr = 0;
    condition = info_xardas_foundtemple_condition;
    information = info_xardas_foundtemple_info;
    description = "ß íàøåë ïóòü â ïîäçåìíûé õðàì!";
};

func int info_xardas_foundtemple_condition() {
    if (enteredtemple) {
        return true;
    };
};

func void info_xardas_foundtemple_info() {
    ai_output(other, self, "Info_Xardas_FOUNDTEMPLE_15_01"); //ß íàøåë ïóòü â ïîäçåìíûé õðàì!
    ai_output(self, other, "Info_Xardas_FOUNDTEMPLE_14_02"); //ÒÅÁÅ ÓÄÀËÎÑÜ... Ýòî íåâåðîÿòíî!
    ai_output(self, other, "Info_Xardas_FOUNDTEMPLE_14_03"); //Ñèëà òâîÿ ðàñòåò, è óæå ñåé÷àñ ñ òîáîé íå ìîæåò ñðàâíèòüñÿ íè îäèí èç æèâóùèõ â ïëåíó Áàðüåðà.
    ai_output(self, other, "Info_Xardas_FOUNDTEMPLE_14_04"); //Áûòü ìîæåò, èìåííî î òåáå ãîâîðÿò îðêñêèå ïðîðî÷åñòâà!
};

instance info_xardas_prophecy(c_info) {
    npc = kdf_404_xardas /*7548*/;
    nr = 0;
    condition = info_xardas_prophecy_condition;
    information = info_xardas_prophecy_info;
    description = "Ïðîðî÷åñòâà? Êàêèå ïðîðî÷åñòâà?";
};

func int info_xardas_prophecy_condition() {
    if (npc_knowsinfo(hero, info_xardas_foundtemple /*9998*/)) {
        return true;
    };
};

func void info_xardas_prophecy_info() {
    ai_output(other, self, "Info_Xardas_PROPHECY_15_01"); //Ïðîðî÷åñòâà? Êàêèå ïðîðî÷åñòâà?
    ai_output(self, other, "Info_Xardas_PROPHECY_14_02"); //Â äðåâíèõ êíèãàõ îðêîâ, íàïèñàííûõ âñêîðå ïîñëå òîãî êàê áûë çàïå÷àòàí ïîäçåìíûé õðàì, óïîìèíàåòñÿ 'Ñâÿùåííûé Âðàã'.
    ai_output(other, self, "Info_Xardas_PROPHECY_15_03"); //Ñâÿùåííûé âðàã?
    ai_output(self, other, "Info_Xardas_PROPHECY_14_04"); //×åëîâåê, êîòîðûé ïðèäåò, ÷òîáû íàâñåãäà èçáàâèòü ýòîò ìèð îò Ñïÿùåãî!
    ai_output(other, self, "Info_Xardas_PROPHECY_15_05"); //È îáî ìíå ãîâîðÿò äðåâíèå ïðîðî÷åñòâà??? Òû, äîëæíî áûòü, îøèáñÿ!
    ai_output(self, other, "Info_Xardas_PROPHECY_14_06"); //Ìîæåò áûòü... À ìîæåò áûòü è íåò!
};

instance info_xardas_loadsword(c_info) {
    npc = kdf_404_xardas /*7548*/;
    nr = 0;
    condition = info_xardas_loadsword_condition;
    information = info_xardas_loadsword_info;
    description = "ß íàøåë ýòîò ñòðàííûé ìå÷.";
};

func int info_xardas_loadsword_condition() {
    if (npc_hasitems(hero, mythrilklinge)) {
        return true;
    };
};

func void info_xardas_loadsword_info() {
    ai_output(other, self, "Info_Xardas_LOADSWORD_15_01"); //ß íàøåë ýòîò ñòðàííûé ìå÷.
    ai_output(self, other, "Info_Xardas_LOADSWORD_14_02"); //Ïîêàæè ìíå åãî.
    createinvitem(self, mythrilklinge01);
    ai_equipbestmeleeweapon(self);
    ai_readymeleeweapon(self);
    ai_playani(self, "T_1HSINSPECT");
    ai_removeweapon(self);
    ai_unequipweapons(self);
    ai_output(self, other, "Info_Xardas_LOADSWORD_14_03"); //Êàê èíòåðåñíî... Íà íåì âûáèòî ñëîâî 'ÓÐÈÇÅËÜ'.
    ai_output(self, other, "Info_Xardas_LOADSWORD_14_04"); //ß ñëûøàë îá ýòîì ìå÷å. Îí ïðèøåë èç òåõ äíåé, êîòîðûå ïðèíÿòî íàçûâàòü çàðåé ÷åëîâå÷åñòâà.
    ai_output(self, other, "Info_Xardas_LOADSWORD_14_05"); //Ìå÷ ýòîò âûêîâàí èç íåâåäîìîãî ìåòàëëà, è â äðåâíèõ êíèãàõ íåò íè ñòðî÷êè î åãî ñîçäàòåëÿõ.
    ai_output(self, other, "Info_Xardas_LOADSWORD_14_06"); //Ãîâîðÿò, ÷òî îí îáëàäàåò íåâåðîÿòíîé ñèëîé, íî ÿ äàæå íå ÷óâñòâóþ â íåì ìàãèè.
    npc_removeinvitem(hero, mythrilklinge /*4761*/);
    createinvitem(hero, mythrilklinge01);
};

instance info_xardas_loadsword01(c_info) {
    npc = kdf_404_xardas /*7548*/;
    nr = 0;
    condition = info_xardas_loadsword01_condition;
    information = info_xardas_loadsword01_info;
    description = "ÓÐÈÇÅËÜ îáëàäàåò íåâåðîÿòíîé ñèëîé?";
};

func int info_xardas_loadsword01_condition() {
    if (npc_knowsinfo(hero, info_xardas_loadsword /*10004*/)) {
        return true;
    };
};

func void info_xardas_loadsword01_info() {
    npc_removeinvitem(self, mythrilklinge01 /*4762*/);
    ai_output(other, self, "Info_Xardas_LOADSWORD01_15_01"); //ÓÐÈÇÅËÜ îáëàäàåò íåâåðîÿòíîé ñèëîé?
    ai_output(self, other, "Info_Xardas_LOADSWORD01_14_02"); //Âñòðå÷àþòñÿ óïîìèíàíèÿ î òîì, ÷òî ìå÷ ýòîò áåç òðóäà ïðîíçàåò ëþáûå äîñïåõè è ðàçðóøàåò ñàìûå ìîùíûå çàùèòíûå çàêëèíàíèÿ.
    ai_output(other, self, "Info_Xardas_LOADSWORD01_15_03"); //Êàê ìîãëî îðóæèå òàêîé ñèëû ïîïàñòü â ëàïû îðêîâ?
    ai_output(self, other, "Info_Xardas_LOADSWORD01_14_04"); //Óòâåðæäàþò, ÷òî îðêè çàáðàëè åãî ó ìîãó÷åãî âîèíà. Íå çíàÿ, êàê âëàäåòü òàêèì ìå÷îì, îíè ïðîñòî ñïðÿòàëè åãî!
    ai_output(other, self, "Info_Xardas_LOADSWORD01_15_05"); //Íî ñïðÿòàëè íåäîñòàòî÷íî õîðîøî!
};

instance info_xardas_loadsword02(c_info) {
    npc = kdf_404_xardas /*7548*/;
    nr = 0;
    condition = info_xardas_loadsword02_condition;
    information = info_xardas_loadsword02_info;
    description = "Ìîæíî ëè âåðíóòü áûëóþ ñèëó ýòîãî îðóæèÿ?";
};

func int info_xardas_loadsword02_condition() {
    if (npc_knowsinfo(hero, info_xardas_loadsword01 /*10007*/)) {
        return true;
    };
};

func void info_xardas_loadsword02_info() {
    ai_output(other, self, "Info_Xardas_LOADSWORD02_15_01"); //Ìîæíî ëè âåðíóòü áûëóþ ñèëó ýòîãî îðóæèÿ?
    ai_output(self, other, "Info_Xardas_LOADSWORD02_14_02"); //Äëÿ ýòîãî òåáå ïîíàäîáèòñÿ î÷åíü ñèëüíûé èñòî÷íèê ìàãè÷åñêîé ýíåðãèè.
    ai_output(other, self, "Info_Xardas_LOADSWORD02_15_03"); //Òàêîé, ÷òî ñïîñîáåí ðàçðóøèòü äàæå ìàãè÷åñêèé Áàðüåð?
    ai_output(self, other, "Info_Xardas_LOADSWORD02_14_04"); //Ïðèìåðíî òàêîé...
    ai_output(self, other, "Info_Xardas_LOADSWORD02_14_05"); //Ïîìèìî ýòîãî òåáå ïîòðåáóåòñÿ äîâîëüíî íåîáû÷íîå çàêëèíàíèå äëÿ ïåðåíîñà ýíåðãèè.
    ai_output(self, other, "Info_Xardas_LOADSWORD02_14_06"); //×åðåç íåêîòîðîå âðåìÿ ÿ ïîäãîòîâëþ åãî äëÿ òåáÿ.
    b_story_showedurizieltoxardas();
};

instance info_xardas_betterarmor(c_info) {
    npc = kdf_404_xardas /*7548*/;
    nr = 0;
    condition = info_xardas_betterarmor_condition;
    information = info_xardas_betterarmor_info;
    description = "À ÿ òåì âðåìåíåì ïîèùó ñåáå äîñïåõè ïîëó÷øå!";
};

func int info_xardas_betterarmor_condition() {
    if (npc_knowsinfo(hero, info_xardas_loadsword02 /*10010*/)) {
        return true;
    };
};

func void info_xardas_betterarmor_info() {
    var c_item armor;
    var int armorinstance;

    ai_output(other, self, "Info_Xardas_BETTERARMOR_15_01"); //À ÿ òåì âðåìåíåì ïîèùó ñåáå äîñïåõè ïîëó÷øå!
    armor = npc_getequippedarmor(hero);
    armorinstance = hlp_getinstanceid(armor);
    if (armorinstance == crw_armor_h /*4151*/) {
        ai_output(other, self, "Info_Xardas_BETTERARMOR_15_02"); //Â ïîäçåìíîì õðàìå ýòó êîëü÷óãó èç ïàíöèðåé ïîëçóíîâ äûðÿâèëè ñëèøêîì ÷àñòî.
    }
    else if ((armorinstance == kdw_armor_h /*4149*/) || (armorinstance == kdw_armor_l /*4148*/)) {
        ai_output(other, self, "Info_Xardas_BETTERARMOR_15_03"); //Ýòà ãîëóáàÿ ðâàíü íå ñëèøêîì õîðîøî çàùèùàëà ìåíÿ â ïîäçåìíîì õðàìå.
    }
    else {
        ai_output(other, self, "Info_Xardas_BETTERARMOR_15_04"); //Íåæèòü áóêâàëüíî èçðåøåòèëà ìîè ñòàðûå äîñïåõè.
    };
    ai_output(self, other, "Info_Xardas_BETTERARMOR_14_05"); //Òû äîëæåí áóäåøü ïîéòè â ìîþ ñòàðóþ áàøíþ.
    ai_output(other, self, "Info_Xardas_BETTERARMOR_15_06"); //Òâîþ ñòàðóþ áàøíþ?
    ai_output(self, other, "Info_Xardas_BETTERARMOR_14_07"); //Ïîñëå çåìëåòðÿñåíèÿ îíà îêàçàëàñü íà äíå îäíîãî èç âîñòî÷íûõ îçåð. Øïèëü äî ñèõ ïîð òîð÷èò èç âîäû.
    ai_output(self, other, "Info_Xardas_BETTERARMOR_14_08"); //À âíóòðè ïî-ïðåæíåìó åñòü íåñêîëüêî öåííûõ àðòåôàêòîâ. ß íè ðàçó íå ïûòàëñÿ âåðíóòü èõ.
    ai_output(other, self, "Info_Xardas_BETTERARMOR_15_09"); //Êàê ÿ òóäà ïîïàäó?
    ai_output(self, other, "Info_Xardas_BETTERARMOR_14_10"); //ß íå áûë òàì ïîñëå çåìëåòðÿñåíèÿ, òàê ÷òî âõîä òåáå ïðèäåòñÿ èñêàòü ñàìîìó.
    ai_output(self, other, "Info_Xardas_BETTERARMOR_14_11"); //Íî âîçüìè ýòîò êëþ÷. Èì òû ñìîæåøü îòêðûòü ñóíäóê, â êîòîðîì ÿ õðàíèë íåñêîëüêî ÷ðåçâû÷àéíî ðåäêèõ ìàãè÷åñêèõ âåùèö.
    b_story_exploresunkentower();
};

instance info_xardas_orearmor(c_info) {
    npc = kdf_404_xardas /*7548*/;
    condition = info_xardas_orearmor_condition;
    information = info_xardas_orearmor_info;
    important = true;
};

func int info_xardas_orearmor_condition() {
    if (npc_hasitems(hero, ore_armor_m) || npc_hasitems(hero, ore_armor_h)) {
        return true;
    };
};

func void info_xardas_orearmor_info() {
    var c_item armor;
    var int armorinstance;

    armor = npc_getequippedarmor(hero);
    armorinstance = hlp_getinstanceid(armor);
    if ((armorinstance == ore_armor_m /*4152*/) || (armorinstance == ore_armor_h /*4153*/)) {
        ai_output(self, other, "Info_Xardas_OREARMOR_14_01"); //ß âèæó íà òåáå æåëåçíûå äîñïåõè.
    }
    else {
        ai_output(self, other, "Info_Xardas_OREARMOR_14_02"); //ß âèæó, òû íàøåë æåëåçíûå äîñïåõè.
    };
    ai_output(other, self, "Info_Xardas_OREARMOR_15_03"); //ß íàøåë åãî â îäíîì èç ñòàðûõ ñóíäóêîâ â çàòîíóâøåé áàøíå.
    ai_output(self, other, "Info_Xardas_OREARMOR_14_04"); //Êîãäà-òî îí ïðèíàäëåæàë òîìó æå âîèíó, êîòîðûé ñðàæàëñÿ ïðîòèâ îðêîâ ñ ÓÐÈÇÅËÅÌ â ðóêàõ.
    ai_output(other, self, "Info_Xardas_OREARMOR_15_05"); //Íàäåþñü, îí ïðèíåñåò ìíå áîëüøå óäà÷è, ÷åì ñâîåìó ïðåæíåìó õîçÿèíó.
};

instance info_xardas_formula(c_info) {
    npc = kdf_404_xardas /*7548*/;
    nr = 0;
    condition = info_xardas_formula_condition;
    information = info_xardas_formula_info;
    description = "Òû ïîäãîòîâèë çàêëèíàíèå, äëÿ âîçâðàùåíèÿ ñèëû ÓÐÈÇÅËß?";
};

func int info_xardas_formula_condition() {
    if ((npc_hasitems(hero, ore_armor_m) || npc_hasitems(hero, ore_armor_h)) || npc_hasitems(hero, itarruneteleport1)) {
        return true;
    };
};

func void info_xardas_formula_info() {
    ai_output(other, self, "Info_Xardas_FORMULA_15_01"); //Òû ïîäãîòîâèë çàêëèíàíèå, äëÿ òîãî ÷òîáû âåðíóòü áûëóþ ñèëó ÓÐÈÇÅËß?
    ai_output(self, other, "Info_Xardas_FORMULA_14_02"); //Îíî ãîòîâî. Íî òû íå ñìîæåøü âîñïîëüçîâàòüñÿ èì.
    ai_output(other, self, "Info_Xardas_FORMULA_15_03"); //Ïî÷åìó?
    ai_output(self, other, "Info_Xardas_FORMULA_14_04"); //Åãî äîëæåí ïðîèçíîñèòü ìàã, ïîêà òû áóäåøü êàñàòüñÿ ìå÷îì èñòî÷íèêà ìàãè÷åñêîé ýíåðãèè.
    ai_output(other, self, "Info_Xardas_FORMULA_15_05"); //×òî æ, ïðèäåòñÿ ïîçâàòü êîãî-íèáóäü íà ïîìîùü.
    ai_output(self, other, "Info_Xardas_FORMULA_14_06"); //Âîçüìè çàêëèíàíèå è âåðíè áûëóþ ñèëó ýòîãî ìå÷à. Îíà òåáå ïîòðåáóåòñÿ!
    b_story_loadsword();
};

instance info_xardas_altrune(c_info) {
    npc = kdf_404_xardas /*7548*/;
    nr = 0;
    condition = info_xardas_altrune_condition;
    information = info_xardas_altrune_info;
    description = "Íî ÿ æå ìàã! Ìíå íåëåãî áóäåò óïðàâëÿòüñÿ ñ ìå÷îì!";
};

func int info_xardas_altrune_condition() {
    if (npc_knowsinfo(hero, info_xardas_formula /*10023*/) && ((npc_gettrueguild(hero) == gil_kdw) || (npc_gettrueguild(hero) == gil_dmb))) {
        return true;
    };
};

func void info_xardas_altrune_info() {
    ai_output(other, self, "Info_Xardas_ALTRUNE_15_01"); //Íî ÿ æå ìàã! Ìíå íåëåãî áóäåò óïðàâëÿòüñÿ ñ ìå÷îì!
    ai_output(self, other, "Info_Xardas_ALTRUNE_14_02"); //Åñòü îäèí ñïîñîá...
    ai_output(self, other, "Info_Xardas_ALTRUNE_14_03"); //Íî ïðåæäå âîññòàíîâè ñèëó ìå÷à - è çàòåì âîçâðàùàéñÿ!
};

instance info_xardas_swordloaded(c_info) {
    npc = kdf_404_xardas /*7548*/;
    nr = 0;
    condition = info_xardas_swordloaded_condition;
    information = info_xardas_swordloaded_info;
    description = "ß âîññòàíîâèë ÓÐÈÇÅËÜ!";
};

func int info_xardas_swordloaded_condition() {
    if (npc_hasitems(hero, mythrilklinge02)) {
        return true;
    };
};

func void info_xardas_swordloaded_info() {
    ai_output(other, self, "Info_Xardas_SWORDLOADED_15_01"); //ß âîññòàíîâèë ÓÐÈÇÅËÜ!
    ai_output(self, other, "Info_Xardas_SWORDLOADED_14_02"); //Íåâåðîÿòíî: ìå÷ âíîâü îáðåë áûëóþ ñèëó! Òåïåðü â òâîèõ ðóêàõ äåéñòâèòåëüíî ìîùíîå îðóæèå!
    wld_insertitem(itarscrollteleport4 /*4174*/, "OW_ORC_SHAMAN_ROOM2");
};

instance info_xardas_makerune(c_info) {
    npc = kdf_404_xardas /*7548*/;
    nr = 0;
    condition = info_xardas_makerune_condition;
    information = info_xardas_makerune_info;
    description = "Òû ãîâîðèë, ÷òî äàæå ìàã ñìîæåò âîñïîëüçîâàòüñÿ ýòèì ìå÷îì.";
};

func int info_xardas_makerune_condition() {
    if (npc_knowsinfo(hero, info_xardas_altrune /*10026*/) && npc_knowsinfo(hero, info_xardas_swordloaded /*10029*/)) {
        return true;
    };
};

func void info_xardas_makerune_info() {
    ai_output(other, self, "Info_Xardas_MAKERUNE_15_01"); //Òû ãîâîðèë, ÷òî äàæå ìàã ñìîæåò âîñïîëüçîâàòüñÿ ýòèì ìå÷îì.
    ai_output(self, other, "Info_Xardas_MAKERUNE_14_02"); //Ïðèñìîòðèñü ê íåìó ïîâíèìàòåëüíåå. Âèäèøü ýòîò ñèíèé êàìåíü â îñíîâàíèè êëèíêà?
    ai_output(self, other, "Info_Xardas_MAKERUNE_14_03"); //Â íåì çàêëþ÷åíà âñÿ ìàãè÷åñêàÿ ñèëà ÓÐÈÇÅËß.
    ai_output(self, other, "Info_Xardas_MAKERUNE_14_04"); //Åñëè çàáðàòü åãî îòòóäà, ÿ ñìîãó ñîçäàòü ìàãè÷åñêóþ ðóíó ñ òåìè æå ñâîéñòâàìè.
    ai_output(other, self, "Info_Xardas_MAKERUNE_15_05"); //Ñäåëàòü èç ìå÷à ìàãè÷åñêóþ ðóíó?
    ai_output(self, other, "Info_Xardas_MAKERUNE_14_06"); //Â áîþ ñèëà åå íå óñòóïèò ñèëå ÓÐÈÇÅËß!
    ai_output(self, other, "Info_Xardas_MAKERUNE_14_07"); //Íî ïîìíè: ëèøü ìàãó Øåñòîãî Êðóãà ïîñâÿùåíèÿ ïîä ñèëó áóäåò óïðàâèòüñÿ ñ ýòîé ìîãóùåñòâåííîé ðóíîé!
};

instance info_xardas_makerunedoit(c_info) {
    npc = kdf_404_xardas /*7548*/;
    nr = 0;
    condition = info_xardas_makerunedoit_condition;
    information = info_xardas_makerunedoit_info;
    permanent = true;
    description = "Âîçüìè êàìåíü èç ÓÐÈÇÅËß!";
};

func int info_xardas_makerunedoit_condition() {
    if (npc_knowsinfo(hero, info_xardas_makerune /*10032*/) && npc_hasitems(hero, mythrilklinge02)) {
        return true;
    };
};

func void info_xardas_makerunedoit_info() {
    ai_output(other, self, "Info_Xardas_MAKERUNEDOIT_15_01"); //Âîçüìè êàìåíü èç ÓÐÈÇÅËß!
    if (npc_gettalentskill(hero, npc_talent_mage) < 6) {
        ai_output(self, other, "Info_Xardas_MAKERUNEDOIT_14_02"); //Íî òû åùå íå ïðîøåë Øåñòîé Êðóã ìàãèè!
    };
    ai_output(self, other, "Info_Xardas_MAKERUNEDOIT_14_03"); //Ýòî òâîå îêîí÷àòåëüíîå ðåøåíèå. Òû äåéñòâèòåëüíî õî÷åøü, ÷òîáû ÿ çàáðàë ýòîò êàìåíü?
    info_clearchoices(info_xardas_makerunedoit /*10035*/);
    info_addchoice(info_xardas_makerunedoit /*10035*/, "ÄÀ, ñäåëàé ýòî!", info_xardas_makerune_yes);
    info_addchoice(info_xardas_makerunedoit /*10035*/, "ÍÅÒ, íå äåëàé ýòîãî!", info_xardas_makerune_no);
};

func void info_xardas_makerune_yes() {
    info_clearchoices(info_xardas_makerunedoit /*10035*/);
    ai_output(other, self, "Info_Xardas_MAKERUNEDOIT_15_04"); //ÄÀ, ñäåëàé ýòî!
    ai_output(self, other, "Info_Xardas_MAKERUNEDOIT_14_05"); //Êàê ïîæåëàåøü... Âîò, âîçüìè ïóñòîé ìå÷ è ðóíó!
    npc_removeinvitem(hero, mythrilklinge02 /*4763*/);
    createinvitems(self, urizielrune, 2);
    b_giveinvitems(self, hero, urizielrune /*4768*/, 2);
    npc_removeinvitem(hero, urizielrune /*4768*/);
    createinvitem(hero, mythrilklinge03);
    b_logentry(ch5_uriziel, ch5_uriziel_6);
    log_settopicstatus(ch5_uriziel, log_success);
};

func void info_xardas_makerune_no() {
    info_clearchoices(info_xardas_makerunedoit /*10035*/);
    ai_output(other, self, "Info_Xardas_MAKERUNEDOIT_15_06"); //ÍÅÒ, íå äåëàé ýòîãî!
    ai_output(self, other, "Info_Xardas_MAKERUNEDOIT_14_07"); //Êàê ïîæåëàåøü. Ìàãè÷åñêàÿ ñèëà îñòàíåòñÿ â ýòîì ìå÷å!
};

instance info_xardas_loadsword09(c_info) {
    npc = kdf_404_xardas /*7548*/;
    nr = 0;
    condition = info_xardas_loadsword09_condition;
    information = info_xardas_loadsword09_info;
    permanent = true;
    description = b_buildlearnstring(name_learnmage_6, lpcost_talent_mage_6, 0);
};

func int info_xardas_loadsword09_condition() {
    if (enteredtemple && (npc_gettrueguild(hero) == gil_kdw)) {
        return true;
    };
};

func void info_xardas_loadsword09_info() {
    ai_output(other, self, "Info_Xardas_LOADSWORD09_15_01"); //Òû íàó÷èøü ìåíÿ?
    if (npc_gettalentskill(hero, npc_talent_mage) == 5) {
        if (b_giveskill(other, npc_talent_mage, 6, lpcost_talent_mage_6)) {
            ai_output(self, other, "Info_Xardas_LOADSWORD09_14_02"); //ß ïîäíèìó òåáÿ â Øåñòîé Êðóã ìàãèè.
            ai_output(self, other, "Info_Xardas_LOADSWORD09_14_03"); //Çàìåòü, â Øåñòîé Êðóã ìîãóò âñòóïèòü ëèøü ñàìûå ìîãóùåñòâåííûå èç ìàãîâ. Îí ïðåäíàçíà÷åí äëÿ òåõ, ÷üÿ æèçíü - ýòî çíàê.
            ai_output(self, other, "Info_Xardas_LOADSWORD09_14_04"); //Òâîé çíàê - â îáúåäèíåíèè ñòèõèé.
            ai_output(self, other, "Info_Xardas_LOADSWORD09_14_05"); //Øåñòîé Êðóã ïîçâîëèò òåáå èñïîëüçîâàòü ìàãèþ ëþáîé ðóíû.
            ai_output(self, other, "Info_Xardas_LOADSWORD09_14_06"); //È íå çàáóäü: íå çàõâàòûâàòü ñèëó, íî áûòü åå èñòî÷íèêîì.
            createinvitem(hero, dmb_armor_m);
            ai_equipbestarmor(hero);
            createinvitem(self, itamarrow);
            b_giveinvitems(self, hero, itamarrow /*4894*/, 1);
            npc_removeinvitem(hero, itamarrow /*4894*/);
            hero.guild = gil_dmb;
            npc_settrueguild(hero, gil_dmb);
            ai_stopprocessinfos(self);
        };
    }
    else {
        ai_output(self, other, "Info_Xardas_LOADSWORD09_14_07"); //Íå ñåé÷àñ. Ó òåáÿ åñòü âñå íàâûêè, íî òû åùå íåäîñòàòî÷íî îïûòåí. Ïóñòü ñíà÷àëà ñ òîáîé ïîçàíèìàåòñÿ Ñàòóðàñ.
        ai_stopprocessinfos(self);
    };
};

instance dia_torrez_exit(c_info) {
    npc = kdf_405_torrez /*7551*/;
    nr = 999;
    condition = dia_torrez_exit_condition;
    information = dia_torrez_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_torrez_exit_condition() {
    return 1;
};

func void dia_torrez_exit_info() {
    ai_stopprocessinfos(self);
    if (!npc_hasitems(self, itarrunefirebolt)) {
        createinvitem(self, itarrunefirebolt);
    };
};

instance dia_torrez_hello(c_info) {
    npc = kdf_405_torrez /*7551*/;
    nr = 1;
    condition = dia_torrez_hello_condition;
    information = dia_torrez_hello_info;
    description = "ß èùó Âåðõîâíîãî Ìàãà Êðóãà Îãíÿ!";
};

func int dia_torrez_hello_condition() {
    return 1;
};

func void dia_torrez_hello_info() {
    ai_output(other, self, "DIA_Torrez_Hello_15_00"); //ß èùó Âåðõîâíîãî Ìàãà Êðóãà Îãíÿ!
    ai_output(self, other, "DIA_Torrez_Hello_04_01"); //Ïîãîâîðè ñ Ìèëüòåíîì! È ñòóïàé îòñþäà!
    ai_stopprocessinfos(self);
};

instance dia_torrez_belohnung(c_info) {
    npc = kdf_405_torrez /*7551*/;
    nr = 5;
    condition = dia_torrez_belohnung_condition;
    information = dia_torrez_belohnung_info;
    description = "ß ïåðåäàë åìó ïèñüìî, è òåïåðü ÿ äîëæåí âûáðàòü ñåáå íàãðàäó.";
};

func int dia_torrez_belohnung_condition() {
    if (npc_knowsinfo(hero, dia_milten_comesback /*11541*/) && (milten_hasletter == true)) {
        return 1;
    };
};

func void dia_torrez_belohnung_info() {
    ai_output(other, self, "DIA_Torrez_Belohnung_15_00"); //Ìåíÿ ïðèñëàë Êîððèñòî.ß ïåðåäàë åìó ïèñüìî, è òåïåðü ÿ äîëæåí âûáðàòü ñåáå íàãðàäó.
    ai_output(self, other, "DIA_Torrez_Belohnung_04_01"); //Òû îêàçàë íàì áîëüøóþ óñëóãó è äîëæåí áûòü âîçíàãðàæäåí çà ýòî. Âûáèðàé ñ óìîì.
    info_clearchoices(dia_torrez_belohnung /*10049*/);
    info_addchoice(dia_torrez_belohnung /*10049*/, "Ýññåíöèÿ äóõà (ìàêñèìàëüíûé óðîâåíü ìàíû ïîâûøàåòñÿ +5)", dia_torrez_belohnung_manamax);
    info_addchoice(dia_torrez_belohnung /*10049*/, "3 ìàãè÷åñêèõ ñâèòêà ('Îãíåííûé øàð', 'Ìîëíèÿ' è 'Ïàäàëüùèê')", dia_torrez_belohnung_scrolls);
    info_addchoice(dia_torrez_belohnung /*10049*/, "Êîëüöî Ëîâêîñòè (+5)", dia_torrez_belohnung_dex);
    info_addchoice(dia_torrez_belohnung /*10049*/, "Êîëüöî Ñèëû (+5)", dia_torrez_belohnung_str);
};

func void dia_torrez_belohnung_str() {
    ai_output(other, self, "DIA_Torrez_Belohnung_Str_15_00"); //ß âîçüìó Êîëüöî Ñèëû.
    ai_output(self, other, "DIA_Torrez_Belohnung_Str_04_01"); //Êàê ÿ è îæèäàë. Âîò, âîçüìè ñâîå êîëüöî.
    createinvitem(self, staerkering);
    b_giveinvitems(self, hero, staerkering /*4950*/, 1);
    info_clearchoices(dia_torrez_belohnung /*10049*/);
};

func void dia_torrez_belohnung_dex() {
    ai_output(other, self, "DIA_Torrez_Belohnung_Dex_15_00"); //ß âîçüìó Êîëüöî Ëîâêîñòè.
    ai_output(self, other, "DIA_Torrez_Belohnung_Dex_04_01"); //Ëîâêîñòü ïîáåæäàåò ñèëó. Ìóäðîå ðåøåíèå.
    createinvitem(self, ring_des_geschicks);
    b_giveinvitems(self, hero, ring_des_geschicks /*4938*/, 1);
    info_clearchoices(dia_torrez_belohnung /*10049*/);
};

func void dia_torrez_belohnung_scrolls() {
    ai_output(other, self, "DIA_Torrez_Belohnung_Scrolls_15_00"); //Äàé ìíå ýòè ìàãè÷åñêèå ñâèòêè.
    ai_output(self, other, "DIA_Torrez_Belohnung_Scrolls_04_01"); //Íå çàáóäü - êàæäûé èç íèõ òû ñìîæåøü èñïîëüçîâàòü òîëüêî îäèí ðàç!
    createinvitems(self, itarscrollfireball, 3);
    b_giveinvitems(self, hero, itarscrollfireball /*4163*/, 3);
    npc_removeinvitems(other, itarscrollfireball, 2);
    createinvitem(other, itarscrolltrfscavenger);
    createinvitem(other, itarscrollchainlightning);
    info_clearchoices(dia_torrez_belohnung /*10049*/);
};

func void dia_torrez_belohnung_manamax() {
    ai_output(other, self, "DIA_Torrez_Belohnung_ManaMax_15_00"); //Ìíå áû ïðèãîäèëñÿ ýëèêñèð.
    ai_output(self, other, "DIA_Torrez_Belohnung_ManaMax_04_01"); //Ïðàâèëüíûé âûáîð! Òû âçÿë ñàìóþ öåííóþ íàãðàäó. Ãëîòîê ýëèêñèðà - è ñèëà òâîÿ âîçðàñòåò!
    createinvitem(self, itfo_potion_mana_perma_01);
    b_giveinvitems(self, hero, itfo_potion_mana_perma_01 /*4859*/, 1);
    info_clearchoices(dia_torrez_belohnung /*10049*/);
};

instance dia_torrez_brieftausch(c_info) {
    npc = kdf_405_torrez /*7551*/;
    nr = 5;
    condition = dia_torrez_brieftausch_condition;
    information = dia_torrez_brieftausch_info;
    description = "ß ïðèíåñ òåáå ïèñüìî. Íî ïðåæäå ÿ õî÷ó ïîëó÷èòü ñâîþ íàãðàäó!";
};

func int dia_torrez_brieftausch_condition() {
    if (((npc_knowsinfo(hero, dia_milten_comesback /*11541*/) && (milten_hasletter == false)) && (npc_hasitems(other, itwr_fire_letter_01) >= 1)) || (npc_hasitems(other, itwr_fire_letter_02) >= 1)) {
        return 1;
    };
};

func void dia_torrez_brieftausch_info() {
    var c_npc corristo;

    ai_output(other, self, "DIA_Torrez_BriefTausch_15_00"); //ß ïðèíåñ òåáå ïèñüìî. Íî ïðåæäå ÿ õî÷ó ïîëó÷èòü ñâîþ íàãðàäó!
    ai_output(self, other, "DIA_Torrez_BriefTausch_04_01"); //Ïî÷åìó òû íå ïîãîâîðèë ñ Ìèëüòåíîì?
    ai_output(other, self, "DIA_Torrez_BriefTausch_15_02"); //Óæå ñäåëàíî.
    ai_output(self, other, "DIA_Torrez_BriefTausch_04_03"); //ß ïîíÿë. Íàãðàäà çäåñü - ïîêàæè ìíå ïèñüìî. Áûñòðî!
    ai_output(other, self, "DIA_Torrez_BriefTausch_15_04"); //Âîò îíî.
    if (npc_hasitems(other, itwr_fire_letter_01) >= 1) {
        ai_output(self, other, "DIA_Torrez_BriefTausch_04_05"); //Â íàãðàäó òû ïîëó÷èøü Êîëüöî Ñèëû. Ýòî ðåäêèé àðòåôàêò, è òû íàéäåøü åìó äîñòîéíîå ïðèìåíåíèå.
        ai_output(self, other, "DIA_Torrez_BriefTausch_04_06"); //Òåïåðü èäè!
        b_giveinvitems(other, self, itwr_fire_letter_01 /*4616*/, 1);
        npc_removeinvitems(self, itwr_fire_letter_01, 1);
        createinvitems(self, staerkering, 1);
        b_giveinvitems(self, other, staerkering /*4950*/, 1);
        b_givexp(xp_xardasletter);
    }
    else {
        if (npc_hasitems(other, itwr_fire_letter_02) >= 1) {
            ai_output(self, other, "DIA_Torrez_BriefTausch_04_07"); //Ïå÷àòü ñëîìàíà.
            ai_output(other, self, "DIA_Torrez_BriefTausch_15_08"); //Áûâàåò.
            ai_output(self, other, "DIA_Torrez_BriefTausch_04_09"); //Òâîÿ íàãðàäà - öåëåáíûé ýëèêñèð. Ñêàæè ñïàñèáî è çà ýòî - ãîíöû, äîñòàâèâøèå ïèñüìî áåç ïå÷àòè, îáû÷íî íå ïîëó÷àþò âîîáùå íè÷åãî!
            b_giveinvitems(other, self, itwr_fire_letter_02 /*4622*/, 1);
            npc_removeinvitems(self, itwr_fire_letter_02, 1);
            createinvitems(self, itfo_potion_health_03, 1);
            b_giveinvitems(self, other, itfo_potion_health_03 /*4831*/, 1);
            b_givexp(xp_xardasletteropen);
        };
    };
    corristo = hlp_getnpc(kdf_402_corristo);
    createinvitems(corristo, itwr_fire_letter_02, 1);
    ai_stopprocessinfos(self);
};

instance dia_torrez_perm(c_info) {
    npc = kdf_405_torrez /*7551*/;
    nr = 1;
    condition = dia_torrez_perm_condition;
    information = dia_torrez_perm_info;
    permanent = true;
    description = "Êàê äåëà íà ìàãè÷åñêîì ôðîíòå?";
};

func int dia_torrez_perm_condition() {
    return 1;
};

func void dia_torrez_perm_info() {
    ai_output(other, self, "DIA_Torrez_PERM_15_00"); //Êàê äåëà íà ìàãè÷åñêîì ôðîíòå?
    ai_output(self, other, "DIA_Torrez_PERM_04_01"); //Íå òâîåãî óìà äåëî!
    ai_stopprocessinfos(self);
};

instance kdf_405_torrez_book(c_info) {
    npc = kdf_405_torrez /*7551*/;
    condition = kdf_405_torrez_book_condition;
    information = kdf_405_torrez_book_info;
    important = true;
};

func int kdf_405_torrez_book_condition() {
    if (npc_knowsinfo(hero, kdf_402_corristo_robe /*9920*/) && npc_knowsinfo(hero, kdf_403_drago_rune /*9947*/)) {
        return true;
    };
};

func void kdf_405_torrez_book_info() {
    ai_output(self, other, "KDF_405_Torrez_BOOK_Info_04_01"); //Åñòü êíèãè, îáúÿñíÿþùèå ìàãèþ êàæäîãî èç Êðóãîâ. Èçó÷àé èõ. Âñÿ ñèëà - â çíàíèè!
    ai_output(self, other, "KDF_405_Torrez_BOOK_Info_04_02"); //Âîçüìè êíèãó Ïåðâîãî Êðóãà è ó÷èñü ïîíèìàòü Îãîíü.
    createinvitem(self, itwr_book_circle_01);
    b_giveinvitems(self, hero, itwr_book_circle_01 /*4989*/, 1);
    ai_stopprocessinfos(self);
};

instance kdf_405_torrez_sellbooks(c_info) {
    npc = kdf_405_torrez /*7551*/;
    nr = 0;
    condition = kdf_405_torrez_sellbooks_condition;
    information = kdf_405_torrez_sellbooks_info;
    permanent = true;
    trade = true;
    description = "ß õî÷ó îâëàäåòü òàéíîé ìàãè÷åñêîé ïèñüìåííîñòè.";
};

func int kdf_405_torrez_sellbooks_condition() {
    if (npc_knowsinfo(hero, kdf_405_torrez_greet /*10069*/)) {
        return true;
    };
};

func void kdf_405_torrez_sellbooks_info() {
    ai_output(other, self, "KDF_405_Torrez_SELLBOOKS_Info_15_01"); //ß õî÷ó îâëàäåòü ìàãè÷åñêèìè ïèñüìåíàìè.
};

instance kdf_405_torrez_greet(c_info) {
    npc = kdf_405_torrez /*7551*/;
    nr = 0;
    condition = kdf_405_torrez_greet_condition;
    information = kdf_405_torrez_greet_info;
    description = "Ïðèâåòñòâóþ òåáÿ, Ìàã!";
};

func int kdf_405_torrez_greet_condition() {
    return true;
};

func void kdf_405_torrez_greet_info() {
    ai_output(other, self, "KDF_405_Torrez_GREET_Info_15_01"); //Ïðèâåòñòâóþ òåáÿ, Ìàã!
    ai_output(self, other, "KDF_405_Torrez_GREET_Info_04_02"); //Äà ïðåáóäåò ñ òîáîé Èííîñ! ß îáìåíèâàþñü ìàãè÷åñêèìè çíàíèÿìè è ìîãó ïîêàçàòü òåáå, êàê óâåëè÷èòü ìàãè÷åñêóþ ñèëó!
    log_createtopic(ge_traderoc, log_note);
    b_logentry(ge_traderoc, ge_traderoc_3);
    log_createtopic(ge_teacheroc, log_note);
    b_logentry(ge_teacheroc, ge_teacheroc_torrez);
};

instance kdf_405_torrez_mana(c_info) {
    npc = kdf_405_torrez /*7551*/;
    nr = 0;
    condition = kdf_405_torrez_mana_condition;
    information = kdf_405_torrez_mana_info;
    permanent = true;
    description = "ß õî÷ó óâåëè÷èòü ñèëó ñâîåé ìàãèè.";
};

func int kdf_405_torrez_mana_condition() {
    if (npc_knowsinfo(hero, kdf_405_torrez_greet /*10069*/)) {
        return true;
    };
};

func void kdf_405_torrez_mana_info() {
    ai_output(other, self, "KDF_405_Torrez_MANA_Info_15_01"); //ß õîòåë áû óâåëè÷èòü ñâîþ ìàãè÷åñêóþ ñèëó.
    ai_output(self, other, "KDF_405_Torrez_MANA_Info_04_02"); //ß ìîãó ïîìî÷ü òåáå óâåëè÷èòü ñèëó. Êàê èñïîëüçîâàòü åå - òâîå äåëî.
    info_clearchoices(kdf_405_torrez_mana /*10072*/);
    info_addchoice(kdf_405_torrez_mana /*10072*/, dialog_back, kdf_405_torrez_mana_back);
    info_addchoice(kdf_405_torrez_mana /*10072*/, b_buildlearnstring(name_learnmana_5, 5 * lpcost_attribute_mana, 0), kdf_405_torrez_mana_man_5);
    info_addchoice(kdf_405_torrez_mana /*10072*/, b_buildlearnstring(name_learnmana_1, lpcost_attribute_mana, 0), kdf_405_torrez_mana_man_1);
};

func void kdf_405_torrez_mana_back() {
    info_clearchoices(kdf_405_torrez_mana /*10072*/);
};

func void kdf_405_torrez_mana_man_1() {
    b_buyattributepoints(other, atr_mana_max, lpcost_attribute_mana);
    info_clearchoices(kdf_405_torrez_mana /*10072*/);
    info_addchoice(kdf_405_torrez_mana /*10072*/, dialog_back, kdf_405_torrez_mana_back);
    info_addchoice(kdf_405_torrez_mana /*10072*/, b_buildlearnstring(name_learnmana_5, 5 * lpcost_attribute_mana, 0), kdf_405_torrez_mana_man_5);
    info_addchoice(kdf_405_torrez_mana /*10072*/, b_buildlearnstring(name_learnmana_1, lpcost_attribute_mana, 0), kdf_405_torrez_mana_man_1);
};

func void kdf_405_torrez_mana_man_5() {
    b_buyattributepoints(other, atr_mana_max, 5 * lpcost_attribute_mana);
    info_clearchoices(kdf_405_torrez_mana /*10072*/);
    info_addchoice(kdf_405_torrez_mana /*10072*/, dialog_back, kdf_405_torrez_mana_back);
    info_addchoice(kdf_405_torrez_mana /*10072*/, b_buildlearnstring(name_learnmana_5, 5 * lpcost_attribute_mana, 0), kdf_405_torrez_mana_man_5);
    info_addchoice(kdf_405_torrez_mana /*10072*/, b_buildlearnstring(name_learnmana_1, lpcost_attribute_mana, 0), kdf_405_torrez_mana_man_1);
};

instance kdf_405_torrez_wannabemage(c_info) {
    npc = kdf_405_torrez /*7551*/;
    nr = 0;
    condition = kdf_405_torrez_wannabemage_condition;
    information = kdf_405_torrez_wannabemage_info;
    description = "×òî íóæíî ñäåëàòü äëÿ òîãî, ÷òîáû ñòàòü ìàãîì?";
};

func int kdf_405_torrez_wannabemage_condition() {
    if ((npc_knowsinfo(hero, kdf_405_torrez_greet /*10069*/) && (npc_gettrueguild(hero) != gil_kdf)) && (!npc_knowsinfo(hero, kdf_402_corristo_wannbekdf /*9901*/))) {
        return true;
    };
};

func void kdf_405_torrez_wannabemage_info() {
    ai_output(other, self, "KDF_405_Torrez_WANNABEMAGE_Info_15_01"); //×òî íóæíî ñäåëàòü äëÿ òîãî, ÷òîáû ñòàòü ìàãîì?
    ai_output(self, other, "KDF_405_Torrez_WANNABEMAGE_Info_04_02"); //Ïîãîâîðè ñ Ìàñòåðîì Êîððèñòî, åñëè ó íåãî áóäåò íà òåáÿ âðåìÿ.
};

instance info_xardas_ot(c_info) {
    npc = kdf_406_otxardas /*7554*/;
    condition = info_xardas_ot_condition;
    information = info_xardas_ot_info;
    important = true;
};

func int info_xardas_ot_condition() {
    if (npc_getdisttowp(self, "TPL_331") < 1000) {
        return true;
    };
};

func void info_xardas_ot_info() {
    ai_output(self, other, "Info_Xardas_OT_14_01"); //Ó íàñ íå òàê ìíîãî âðåìåíè, òàê ÷òî ñëóøàé âíèìàòåëüíî!
    ai_output(other, self, "Info_Xardas_OT_15_02"); //Êàê òû...
    ai_output(self, other, "Info_Xardas_OT_14_03"); //Ñïÿùèé óæå ðÿäîì. Ìíå ñòîèëî áîëüøèõ òðóäîâ äîáðàòüñÿ ñþäà.
    ai_output(self, other, "Info_Xardas_OT_14_04"); //ß ïåðåâåë îðêñêèå ïðîðî÷åñòâà è ïîíÿë, ÷òî çíà÷àò ïÿòü ñåðäåö.
    ai_output(self, other, "Info_Xardas_OT_14_05"); //Ïÿòü ñåðäåö ïîáåæäåííûõ òîáîé æðåöîâ ëåæàò â ïÿòè ãðîáíèöàõ.
    ai_output(self, other, "Info_Xardas_OT_14_06"); //Ãðîáíèöû ýòè íåñëîæíî îòêðûòü, íî òîëüêî äðåâíèé êëèíîê â ðóêàõ æðåöà ñìîæåò óíè÷òîæèòü ñåðäöà.
    ai_output(self, other, "Info_Xardas_OT_14_07"); //Òû äîëæåí áóäåøü ïðîíçèòü ñåðäöà ïÿòüþ êëèíêàìè. Òîëüêî òàê ìîæíî èçãíàòü Ñïÿùåãî èç ýòîãî ìèðà.
    ai_output(other, self, "Info_Xardas_OT_15_08"); //ß ïîíÿë!
    ai_output(self, other, "Info_Xardas_OT_14_09"); //Òîðîïèñü, áåçóìíûé Êîð Ãàëîì ñî ñâîèìè ó÷åíèêàìè óæå çäåñü, è äåìîí âñêîðå ïðîáóäèòñÿ.
    ai_output(self, other, "Info_Xardas_OT_14_10"); //Îíè ñîáðàëèñü â â çàëå Ñïÿùåãî.
    ai_output(other, self, "Info_Xardas_OT_15_11"); //ß ïðîëèë äîâîëüíî êðîâè. Òåïåðü ìåíÿ óæå íè÷òî íå îñòàíîâèò!
    ai_output(self, other, "Info_Xardas_OT_14_12"); //Ìîùü Ñïÿùåãî ðàñòåò, è ÿ íå...
    ai_output(other, self, "Info_Xardas_OT_15_13"); //×òî ñ òîáîé?
    ai_output(self, other, "Info_Xardas_OT_14_14"); //ß... äîëæåí...
    npc_exchangeroutine(self, "DRAINED");
    log_createtopic(ch6_sleeper, log_mission);
    log_settopicstatus(ch6_sleeper, log_running);
    b_logentry(ch6_sleeper, ch6_sleeper_1);
    ai_stopprocessinfos(self);
};

instance info_saturas_exit(c_info) {
    npc = kdw_600_saturas /*7557*/;
    nr = 999;
    condition = info_saturas_exit_condition;
    information = info_saturas_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_saturas_exit_condition() {
    return 1;
};

func void info_saturas_exit_info() {
    ai_output(self, other, "Info_Saturas_EXIT_14_01"); //Íàäåþñü, òû âåðíåøüñÿ öåëûì è íåâðåäèìûì!
    ai_stopprocessinfos(self);
};

instance info_saturas_intruder(c_info) {
    npc = kdw_600_saturas /*7557*/;
    nr = 1;
    condition = info_saturas_intruder_condition;
    information = info_saturas_intruder_info;
    permanent = true;
    important = true;
};

func int info_saturas_intruder_condition() {
    if (npc_isinstate(self, zs_talk) && (kapitel < 3)) {
        return 1;
    };
};

func void info_saturas_intruder_info() {
    ai_output(self, other, "Info_Saturas_Intruder_14_00"); //×òî òû çäåñü äåëàåøü? Òåáå çäåñü íå÷åãî äåëàòü! Óáèðàéñÿ!
    ai_stopprocessinfos(self);
};

instance info_saturas_news(c_info) {
    npc = kdw_600_saturas /*7557*/;
    nr = 0;
    condition = info_saturas_news_condition;
    information = info_saturas_news_info;
    description = "Ó ìåíÿ åñòü âàæíûå íîâîñòè èç Ëàãåðÿ Áðàòñòâà!";
};

func int info_saturas_news_condition() {
    if ((corangar_sendtonc == true) && npc_knowsinfo(hero, info_cronos_sleeper /*10263*/)) {
        return true;
    };
};

func void info_saturas_news_info() {
    ai_output(other, self, "Info_Saturas_NEWS_15_01"); //Ó ìåíÿ åñòü âàæíûå íîâîñòè èç Ëàãåðÿ Áðàòñòâà!
    ai_output(self, other, "Info_Saturas_NEWS_14_02"); //Ýòî äîëæíû áûòü äåéñòâèòåëüíî âàæíûå íîâîñòè, åñëè Êðîíîñ ïîçâîëèë òåáå âñòðåòèòüñÿ ñî ìíîé!
};

instance info_saturas_yberion(c_info) {
    npc = kdw_600_saturas /*7557*/;
    nr = 0;
    condition = info_saturas_yberion_condition;
    information = info_saturas_yberion_info;
    description = "Þ`Áåðèîí ìåðòâ! ";
};

func int info_saturas_yberion_condition() {
    if (npc_knowsinfo(hero, info_saturas_news /*10090*/)) {
        return true;
    };
};

func void info_saturas_yberion_info() {
    ai_output(other, self, "Info_Saturas_YBERION_15_01"); //Þ`Áåðèîí ìåðòâ! Îí óìåð âî âðåìÿ öåðåìîíèè âûçîâà Ñïÿùåãî!
    ai_output(self, other, "Info_Saturas_YBERION_14_02"); //Þ`Áåðèîí óìåð? Ïîèñòèíå, ýòî õóäøàÿ íîâîñòü èç òåõ, ÷òî òû ìîã ïðèíåñòè!
    ai_output(self, other, "Info_Saturas_YBERION_14_03"); //Êòî æå òåïåðü âîçãëàâëÿåò Áðàòñòâî? Ýòîò âëàñòîëþáåö è ëæåö Êîð Ãàëîì?
    ai_output(other, self, "Info_Saturas_YBERION_15_04"); //Íåò! Ãàëîì îòðåêñÿ îò Áðàòñòâà. Îí çàáðàë íåñêîëüêèõ Ñòðàæåé, è íèêòî íå çíàåò, ãäå îíè òåïåðü.
    ai_output(self, other, "Info_Saturas_YBERION_14_05"); //Íî çà÷åì? Âåäü ïîñëå ãèáåëè Þ`Áåðèîíà îí äîëæåí áûë ñòàòü ãëàâíûì!
    ai_output(other, self, "Info_Saturas_YBERION_15_06"); //Ñîáûòèÿ ïîñëåäíèõ äíåé óáåäèëè Ãóðó â òîì, ÷òî îíè èçáðàëè íåïðàâèëüíûé ïóòü. Ïîõîæå, èõ áîã îêàçàëñÿ âñåãî ëèøü çëûì äåìîíîì.
    ai_output(other, self, "Info_Saturas_YBERION_15_07"); //Ïîä âëèÿíèåì Ñïÿùåãî îäèí èç Ãóðó ÷óòü íå óáèë ìåíÿ, íåñìîòðÿ íà òî, ÷òî íåçàäîëãî äî ýòîãî ÿ ñïàñ åìó æèçíü.
    ai_output(other, self, "Info_Saturas_YBERION_15_08"); //Åäèíñòâåííûì èç Ãóðó, êòî îòêàçàëñÿ ïðèçíàòü èñòèííóþ ñóùíîñòü ýòîãî àäñêîãî ñîçäàíèÿ, áûë Êîð Ãàëîì. Âîò ïî÷åìó îí ïîêèíóë Áîëîòíûé Ëàãåðü.
    ai_output(self, other, "Info_Saturas_YBERION_14_09"); //Ïîíÿòíî. ×òî æ, äëÿ íàñ ýòî òîëüêî ê ëó÷øåìó. Êîð Àíãàð - õîðîøèé ÷åëîâåê, óïðÿìûé, íî ÷åñòíûé.
    ai_output(self, other, "Info_Saturas_YBERION_14_10"); //Íèêòî êðîìå íåãî íå ñìîæåò óäåðæàòü Áðàòñòâî îò ðàñïàäà ïîñëå ýòîé äóõîâíîé êàòàñòðîôû.
    b_logentry(ch3_escapeplannc, ch3_escapeplannc_5);
};

instance info_saturas_book(c_info) {
    npc = kdw_600_saturas /*7557*/;
    nr = 0;
    condition = info_saturas_book_condition;
    information = info_saturas_book_info;
    description = "Ó ìåíÿ åñòü àëüìàíàõ...";
};

func int info_saturas_book_condition() {
    if (npc_knowsinfo(hero, info_saturas_yberion /*10093*/) && npc_hasitems(hero, itwrfokusbuch)) {
        return true;
    };
};

func void info_saturas_book_info() {
    ai_output(other, self, "Info_Saturas_BOOK_15_01"); //Ó ìåíÿ åñòü àëüìàíàõ...
    ai_output(other, self, "Info_Saturas_BOOK_15_02"); //Þ`Áåðèîí èñïîëüçîâàë åãî, äëÿ òîãî ÷òîáû çàðÿäèòü þíèòîð.
    ai_output(self, other, "Info_Saturas_BOOK_14_03"); //Îòëè÷íî! Çíàíèå, êîòîðîå ñîäåðæèòñÿ â ýòîé êíèãå, ïîìîæåò íàì çàðÿäèòü ïÿòü ãëàâíûõ êàìíåé-þíèòîðîâ.
    ai_output(self, other, "Info_Saturas_BOOK_14_04"); //ß âîçüìó ýòîò àëüìàíàõ.
    b_giveinvitems(hero, self, itwrfokusbuch /*4685*/, 1);
    npc_removeinvitem(self, itwrfokusbuch /*4685*/);
    b_givexp(xp_deliverbooktosaturas);
};

instance info_saturas_focus(c_info) {
    npc = kdw_600_saturas /*7557*/;
    nr = 0;
    condition = info_saturas_focus_condition;
    information = info_saturas_focus_info;
    description = "Ó ìåíÿ åñòü þíèòîð...";
};

func int info_saturas_focus_condition() {
    if (npc_knowsinfo(hero, info_saturas_yberion /*10093*/) && npc_hasitems(hero, focus_1)) {
        return true;
    };
};

func void info_saturas_focus_info() {
    ai_output(other, self, "Info_Saturas_FOCUS_15_01"); //Ó ìåíÿ åñòü þíèòîð...
    ai_output(self, other, "Info_Saturas_FOCUS_14_02"); //Òû äåðæèøü êëþ÷ îò íàøèõ îêîâ.
    ai_output(self, other, "Info_Saturas_FOCUS_14_03"); //Ýòî îäèí èç ïÿòè êàìíåé-þíèòîðîâ, ñ ïîìîùüþ êîòîðûõ áûë ñîçäàí ìàãè÷åñêèé Áàðüåð.
    ai_output(self, other, "Info_Saturas_FOCUS_14_04"); //Èõ æå ñèëà ïîìîæåò íàì îáðóøèòü ýòó ãèãàíòñêóþ ñòåíó.
    ai_output(other, self, "Info_Saturas_FOCUS_15_05"); //Íî äëÿ ýòîãî æå ïîòðåáóåòñÿ ÷åðòîâà óéìà ýíåðãèè?!
    ai_output(self, other, "Info_Saturas_FOCUS_14_06"); //Âåðíî. Âñå ýòè ãîäû ìû íåóñòàííî êîïèëè ðóäó, âìåñòî òîãî ÷òîáû âûìåíèâàòü íà íåå ïðåäìåòû ðîñêîøè ó íàøèõ òþðåìùèêîâ.
    ai_output(self, other, "Info_Saturas_FOCUS_14_07"); //Òåáå, äîëæíî áûòü, èçâåñòíî, ÷òî â êàæäîì êóñêå ðóäû çàêëþ÷åíà íåáîëüøàÿ ÷àñòèöà ìàãèè. Ñèëû, êîòîðàÿ ñîäåðæèòñÿ â íàøåé æåëåçíîé ãîðå, äîëæíî áûòü äîñòàòî÷íî, ÷òîáû óíè÷òîæèòü Áàðüåð.
    ai_output(other, self, "Info_Saturas_FOCUS_15_08"); //Ýòî ðèñêîâàííî.
    ai_output(self, other, "Info_Saturas_FOCUS_14_09"); //Ýòî áóäåò ìàãè÷åñêèé âçðûâ, íå îáû÷íûé, è îïàñåí îí ëèøü äëÿ ìàãèè âíóòðè Áàðüåðà. Íàì, ëþäÿì, îí íå ïðè÷èíèò âðåäà.
    ai_output(other, self, "Info_Saturas_FOCUS_15_10"); //Âîò, âîçüìè þíèòîð. Íàäåþñü, òû íàéäåøü åìó ïðèìåíåíèå â ñâîèõ ïëàíàõ.
    b_giveinvitems(hero, self, focus_1 /*4682*/, 1);
    npc_removeinvitem(self, focus_1 /*4682*/);
    b_givexp(xp_deliverfocustosaturas);
};

instance info_saturas_whatnow(c_info) {
    npc = kdw_600_saturas /*7557*/;
    nr = 0;
    condition = info_saturas_whatnow_condition;
    information = info_saturas_whatnow_info;
    description = "Êàê òû ñîáèðàåøüñÿ èñïîëüçîâàòü þíèòîð è àëüìàíàõ?";
};

func int info_saturas_whatnow_condition() {
    if (npc_knowsinfo(hero, info_saturas_focus /*10099*/) && npc_knowsinfo(hero, info_saturas_book /*10096*/)) {
        return true;
    };
};

func void info_saturas_whatnow_info() {
    ai_output(other, self, "Info_Saturas_WHATNOW_15_01"); //Êàê òû ñîáèðàåøüñÿ èñïîëüçîâàòü þíèòîð è àëüìàíàõ?
    ai_output(self, other, "Info_Saturas_WHATNOW_14_03"); //Ïîêà íèêàê. Íàì íóæíû åùå ÷åòûðå êàìíÿ-þíèòîðà.
    ai_output(self, other, "Info_Saturas_WHATNOW_14_04"); //Ê ñîæàëåíèþ, ïîêà ó íàñ íåò íè îäíîãî.
};

instance info_saturas_offer(c_info) {
    npc = kdw_600_saturas /*7557*/;
    nr = 0;
    condition = info_saturas_offer_condition;
    information = info_saturas_offer_info;
    description = "ß ãîòîâ íàéòè äëÿ òåáÿ ÷åòûðå êàìíÿ-þíèòîðà!";
};

func int info_saturas_offer_condition() {
    if (npc_knowsinfo(hero, info_saturas_whatnow /*10102*/)) {
        return true;
    };
};

func void info_saturas_offer_info() {
    ai_output(other, self, "Info_Saturas_OFFER_15_01"); //ß ãîòîâ íàéòè äëÿ òåáÿ ÷åòûðå êàìíÿ-þíèòîðà!
    ai_output(other, self, "Info_Saturas_OFFER_15_02"); //Âåäü ÿ è ñàì íå ïðî÷ü óáðàòüñÿ îòñþäà.
    ai_output(self, other, "Info_Saturas_OFFER_14_03"); //Äîëæåí ïðåäóïðåäèòü òåáÿ: ïîèñêè áóäóò íåëåãêèìè è äàæå îïàñíûìè.
    ai_output(self, other, "Info_Saturas_OFFER_14_04"); //Íàøè îòíîøåíèÿ ñî Ñòàðûì Ëàãåðåì ïîðòÿòñÿ ñ êàæäûì äíåì, è êàæäûé ÷åëîâåê íà ñ÷åòó - ÿ íå ìîãó äàòü íèêîãî òåáå â ïîìîùü.
    ai_output(self, other, "Info_Saturas_OFFER_14_05"); //Òåáå ïðèäåòñÿ äåéñòâîâàòü â îäèíî÷êó.
    ai_output(other, self, "Info_Saturas_OFFER_15_06"); //Íó... Íè÷åãî íîâîãî. Îáû÷íî ÿ ñïðàâëÿëñÿ è òàê.
    ai_output(self, other, "Info_Saturas_OFFER_14_07"); //Òâîÿ óâåðåííîñòü äåëàåò òåáå ÷åñòü, íî êîå-÷òî òåáå âñå-òàêè ïîíàäîáèòñÿ.
    ai_output(self, other, "Info_Saturas_OFFER_14_08"); //Âîçüìè ýòó ñòàðóþ êàðòó. Íà íåé îòìå÷åíû ìåñòà, ãäå íàõîäèëèñü þíèòîðû â ìîìåíò ñîòâîðåíèÿ Áàðüåðà.
    ai_output(self, other, "Info_Saturas_OFFER_14_09"); //Êðîìå òîãî, çàêëèíàíèå, çàïèñàííîå â ýòîì ìàãè÷åñêîì ñâèòêå, ïîìîæåò òåáå áûñòðî âåðíóòüñÿ â íàø Ëàãåðü.
    ai_output(self, other, "Info_Saturas_OFFER_14_10"); //Íàêîíåö, ïîãîâîðè ñ Ðèîðäàíîì - îí ãîòîâèò äëÿ íàøåãî Ëàãåðÿ ýëèêñèðû.
    ai_output(self, other, "Info_Saturas_OFFER_14_11"); //Òû íàéäåøü åãî äîì çäåñü æå, íà âåðõíåì óðîâíå.
    b_story_bringfoci();
};

func void b_deliverfocus() {
    if (saturas_bringfoci == 1) {
        ai_output(self, other, "Info_Saturas_BRINGFOCUS_14_01"); //Õ-ì, äåëî ïðîäâèãàåòñÿ. Òû ìîëîäåö!
        ai_output(self, other, "Info_Saturas_BRINGFOCUS_14_02"); //Äëÿ îñóùåñòâëåíèÿ íàøåãî ïëàíà íóæíû åùå òðè êàìíÿ.
        ai_output(self, other, "Info_Saturas_BRINGFOCUS_14_03"); //Ïðèíåñè ìíå îñòàâøèåñÿ þíèòîðû.
        saturas_bringfoci = 2;
        b_givexp(xp_deliversecondfocus);
    }
    else if (saturas_bringfoci == 2) {
        ai_output(self, other, "Info_Saturas_BRINGFOCUS_14_04"); //Õîðîøî! Òû ïðèíåñ íàì âòîðîé êàìåíü.
        ai_output(self, other, "Info_Saturas_BRINGFOCUS_14_05"); //Ìû âñå áëèæå è áëèæå ê öåëè.
        ai_output(self, other, "Info_Saturas_BRINGFOCUS_14_06"); //Íàáåðèñü õðàáðîñòè è òåðïåíèÿ è äîñòàíü åùå äâà þíèòîðà.
        saturas_bringfoci = 3;
        b_givexp(xp_deliverthirdfocus);
    }
    else if (saturas_bringfoci == 3) {
        ai_output(self, other, "Info_Saturas_BRINGFOCUS_14_07"); //Íåâåðîÿòíî: òåïåðü ó íàñ åñòü óæå ÷åòûðå êàìíÿ!
        ai_output(self, other, "Info_Saturas_BRINGFOCUS_14_08"); //Îñòàëîñü íàéòè âñåãî îäèí, è òîãäà ó íàñ áóäåò âñå íåîáõîäèìîå äëÿ îñóùåñòâëåíèÿ íàøåãî ïëàíà.
        ai_output(self, other, "Info_Saturas_BRINGFOCUS_14_09"); //Òû óæå îêàçàë âñåì íàì âåëèêóþ óñëóãó. Íàéäè æå è ïÿòûé êàìåíü, è òîãäà âñêîðå âñå ìû áóäåì ñâîáîäíû.
        saturas_bringfoci = 4;
        b_givexp(xp_deliverfourthfocus);
    }
    else {
        if (saturas_bringfoci == 4) {
            ai_output(self, other, "Info_Saturas_BRINGFOCUS_14_10"); //Âåëèêîëåïíî: òåïåðü ó íàñ åñòü âñå ïÿòü êàìíåé!
            ai_output(self, other, "Info_Saturas_BRINGFOCUS_14_11"); //Òû îêàçàë íàøåìó Ëàãåðþ íåîöåíèìóþ ïîìîùü. Ïðèìè æå óâåðåíèÿ â ìîåé áåñêîíå÷íîé ïðèçíàòåëüíîñòè.
            ai_output(self, other, "Info_Saturas_BRINGFOCUS_14_12"); //È çàãëÿíè ê Ðèîðäàíó. Îí çíàåò, ÷åì âîçíàãðàäèòü òåáÿ çà òðóäû.
            ai_output(self, other, "Info_Saturas_BRINGFOCUS_14_13"); //Åùå ïîãîâîðè ñ Êðîíîñîì, õðàíèòåëåì ðóäû. Ó íåãî òàêæå ïðèãîòîâëåí äëÿ òåáÿ ïîäàðîê.
            saturas_bringfoci = 5;
            b_givexp(xp_deliverfifthfocus);
            b_logentry(ch3_bringfoci, ch3_bringfoci_6);
            b_logentry(ch3_bringfoci, ch3_bringfoci_7);
            log_settopicstatus(ch3_monasteryruin, log_success);
            log_settopicstatus(ch3_stonehenge, log_success);
            log_settopicstatus(ch3_fortress, log_success);
            log_settopicstatus(ch3_trollcanyon, log_success);
        };
    };
    if ((!npc_hasitems(hero, itarscrollteleport2)) && (saturas_bringfoci < 5)) {
        ai_output(self, other, "Info_Saturas_BRINGFOCUS_14_14"); //ß âèæó, òû âîñïîëüçîâàëñÿ ñâèòêîì ñ Çàêëèíàíèåì Ïîðòàë. Âîò, âîçüìè åùå îäèí.
        createinvitem(self, itarscrollteleport2);
        b_giveinvitems(self, other, itarscrollteleport2 /*4171*/, 1);
    };
};

instance info_saturas_bringfocus2(c_info) {
    npc = kdw_600_saturas /*7557*/;
    nr = 0;
    condition = info_saturas_bringfocus2_condition;
    information = info_saturas_bringfocus2_info;
    description = "ß íàøåë þíèòîð â óùåëüå òðîëëåé!";
};

func int info_saturas_bringfocus2_condition() {
    if (npc_hasitems(hero, focus_2) && (saturas_bringfoci > 0)) {
        return true;
    };
};

func void info_saturas_bringfocus2_info() {
    ai_output(other, self, "Info_Saturas_BRINGFOCUS2_15_01"); //ß íàøåë þíèòîð â óùåëüå òðîëëåé!
    b_logentry(ch3_trollcanyon, ch3_trollcanyon_1);
    log_settopicstatus(ch3_trollcanyon, log_success);
    b_giveinvitems(hero, self, focus_2 /*4708*/, 1);
    npc_removeinvitem(self, focus_2 /*4708*/);
    b_deliverfocus();
};

instance info_saturas_bringfocus3(c_info) {
    npc = kdw_600_saturas /*7557*/;
    nr = 0;
    condition = info_saturas_bringfocus3_condition;
    information = info_saturas_bringfocus3_info;
    description = "ß íàøåë þíèòîð â ôîðòå íà ãîðå!";
};

func int info_saturas_bringfocus3_condition() {
    if (npc_hasitems(hero, focus_3) && (saturas_bringfoci > 0)) {
        return true;
    };
};

func void info_saturas_bringfocus3_info() {
    ai_output(other, self, "Info_Saturas_BRINGFOCUS3_15_01"); //ß íàøåë þíèòîð â ôîðòå íà ãîðå!
    b_logentry(ch3_fortress, ch3_fortress_1);
    log_settopicstatus(ch3_fortress, log_success);
    b_giveinvitems(hero, self, focus_3 /*4716*/, 1);
    npc_removeinvitem(self, focus_3 /*4716*/);
    b_deliverfocus();
};

instance info_saturas_bringfocus4(c_info) {
    npc = kdw_600_saturas /*7557*/;
    nr = 0;
    condition = info_saturas_bringfocus4_condition;
    information = info_saturas_bringfocus4_info;
    description = "ß íàøåë þíèòîð â ðàçðóøåííîì ìîíàñòûðå!";
};

func int info_saturas_bringfocus4_condition() {
    if (npc_hasitems(hero, focus_4) && (saturas_bringfoci > 0)) {
        return true;
    };
};

func void info_saturas_bringfocus4_info() {
    ai_output(other, self, "Info_Saturas_BRINGFOCUS4_15_01"); //ß íàøåë þíèòîð â ðàçðóøåííîì ìîíàñòûðå!
    ai_output(other, self, "Info_Saturas_BRINGFOCUS4_15_02"); //Òàì áûë Ãîðí, íàåìíèê, îí ïîìîãàë ìíå â ïîèñêàõ.
    b_logentry(ch3_monasteryruin, ch3_monasteryruin_1);
    log_settopicstatus(ch3_monasteryruin, log_success);
    b_giveinvitems(hero, self, focus_4 /*4718*/, 1);
    npc_removeinvitem(self, focus_4 /*4718*/);
    b_deliverfocus();
};

instance info_saturas_bringfocus5(c_info) {
    npc = kdw_600_saturas /*7557*/;
    nr = 0;
    condition = info_saturas_bringfocus5_condition;
    information = info_saturas_bringfocus5_info;
    description = "ß íàøåë þíèòîð ïîä êàìåííûì êîëüöîì!";
};

func int info_saturas_bringfocus5_condition() {
    if (npc_hasitems(hero, focus_5) && (saturas_bringfoci > 0)) {
        return true;
    };
};

func void info_saturas_bringfocus5_info() {
    ai_output(other, self, "Info_Saturas_BRINGFOCUS5_15_01"); //ß íàøåë þíèòîð ïîä êàìåííûì êîëüöîì!
    b_logentry(ch3_stonehenge, ch3_stonehenge_1);
    log_settopicstatus(ch3_stonehenge, log_success);
    b_giveinvitems(hero, self, focus_5 /*4723*/, 1);
    npc_removeinvitem(self, focus_5 /*4723*/);
    b_deliverfocus();
};

instance info_saturas_allfoci(c_info) {
    npc = kdw_600_saturas /*7557*/;
    nr = 0;
    condition = info_saturas_allfoci_condition;
    information = info_saturas_allfoci_info;
    description = "Òåïåðü òû ìîæåøü âçîðâàòü æåëåçíóþ ãîðó?";
};

func int info_saturas_allfoci_condition() {
    if ((saturas_bringfoci == 5) && (kapitel < 4)) {
        return true;
    };
};

func void info_saturas_allfoci_info() {
    ai_output(other, self, "Info_Saturas_ALLFOCI_15_01"); //Òåïåðü òû ìîæåøü âçîðâàòü æåëåçíóþ ãîðó?
    ai_output(self, other, "Info_Saturas_ALLFOCI_14_02"); //Òåïåðü ó íàñ åñòü âñå äëÿ îñóùåñòâëåíèÿ íàøåãî ïëàíà.
    ai_output(self, other, "Info_Saturas_ALLFOCI_14_03"); //Íî Áàðüåð áûë ñîòâîðåí äâåíàäöàòüþ ìàãàìè.
    ai_output(self, other, "Info_Saturas_ALLFOCI_14_04"); //Â Êðóãå Âîäû íåäîñòàòî÷íî ìàãîâ, ÷òîáû óïðàâëÿòü ñòîëü ìîãóùåñòâåííîé ñèëîé è íàïðàâëÿòü åå â íóæíîå ðóñëî.
    ai_output(other, self, "Info_Saturas_ALLFOCI_15_05"); //×òî ìû ìîæåì ñäåëàòü?
    ai_output(self, other, "Info_Saturas_ALLFOCI_14_06"); //ß ïîíèìàþ, ÷òî ìû óæå è òàê â íåîïëàòíîì äîëãó ïåðåä òîáîé çà âñå, ÷òî òû äëÿ íàñ ñäåëàë...
    ai_output(self, other, "Info_Saturas_ALLFOCI_14_07"); //... íî â èíòåðåñàõ âñåõ æèòåëåé êîëîíèè ÿ äîëæåí ïîïðîñèòü òåáÿ îêàçàòü íàì åùå îäíó óñëóãó.
};

instance info_saturas_favor(c_info) {
    npc = kdw_600_saturas /*7557*/;
    nr = 0;
    condition = info_saturas_favor_condition;
    information = info_saturas_favor_info;
    description = "Åùå îäíó óñëóãó?";
};

func int info_saturas_favor_condition() {
    if (npc_knowsinfo(hero, info_saturas_allfoci /*10121*/)) {
        return true;
    };
};

func void info_saturas_favor_info() {
    ai_output(other, self, "Info_Saturas_FAVOR_15_01"); //Åùå îäíó óñëóãó?
    ai_output(self, other, "Info_Saturas_FAVOR_14_02"); //Äà. Îòïðàâëÿéñÿ â Ñòàðûé Ëàãåðü è ïîïûòàéñÿ óáåäèòü ìàãîâ Êðóãà Îãíÿ ïîìî÷ü íàì.
    ai_output(other, self, "Info_Saturas_FAVOR_15_03"); //ÌÀÃÎÂ ÎÃÍß??? Ïî÷åìó òû äóìàåøü, ÷òî îíè áóäóò ðèñêîâàòü ñâîèì ïîëîæåíèåì ðàäè êîãî-òî åùå?
    ai_output(other, self, "Info_Saturas_FAVOR_15_04"); //Óíè÷òîæèâ Áàðüåð, îíè ïîòåðÿþò âñå, ê ÷åìó òàê ïðèâûêëè, ëèøàòñÿ ñâîåé ñèëû è âëàñòè!
    ai_output(self, other, "Info_Saturas_FAVOR_14_05"); //Èìåííî ïîýòîìó ÒÛ äîëæåí âçÿòüñÿ çà âûïîëíåíèå ýòîé ìèññèè. Ó òåáÿ åñòü äðóçüÿ âî âñåõ Ëàãåðÿõ êîëîíèè.
    ai_output(self, other, "Info_Saturas_FAVOR_14_06"); //Íàïîìíè ìàãàì Îãíÿ ïðî òî ñòàðîå äîáðîå âðåìÿ, êîãäà ìû âìåñòå ïîñòèãàëè èñêóññòâî ìàãèè.
};

instance info_saturas_accept(c_info) {
    npc = kdw_600_saturas /*7557*/;
    nr = 0;
    condition = info_saturas_accept_condition;
    information = info_saturas_accept_info;
    description = "Ëàäíî, ÿ ïîñòàðàþñü óáåäèòü ìàãîâ Îãíÿ.";
};

func int info_saturas_accept_condition() {
    if (npc_knowsinfo(hero, info_saturas_favor /*10124*/)) {
        return true;
    };
};

func void info_saturas_accept_info() {
    ai_output(other, self, "Info_Saturas_ACCEPT_15_01"); //Ëàäíî, ÿ ïîñòàðàþñü óáåäèòü ìàãîâ Îãíÿ.
    ai_output(other, self, "Info_Saturas_ACCEPT_15_02"); //Íî ÿ íè÷åãî íå îáåùàþ! ß ïî-ïðåæíåìó ñ÷èòàþ ýòó çàòåþ ÷èñòûì áåçóìèåì.
    ai_output(self, other, "Info_Saturas_ACCEPT_14_03"); //Òû äîëæåí ïîïðîáîâàòü. Åñëè òû íå äîáüåøüñÿ óñïåõà, îñòàíåòñÿ òîëüêî îäèí...
    ai_output(self, other, "Info_Saturas_ACCEPT_14_04"); //Òîëüêî îäèí...
    ai_output(other, self, "Info_Saturas_ACCEPT_15_05"); //... îäèí ×ÒÎ?
    ai_output(self, other, "Info_Saturas_ACCEPT_14_06"); //Íå âàæíî. Ó òåáÿ ÄÎËÆÍÎ ïîëó÷èòüñÿ!
    ai_output(self, other, "Info_Saturas_ACCEPT_14_07"); //Âîò, âîçüìè ýòó ìàãè÷åñêóþ ðóíó. Ïåðåäàé åå Êîððèñòî, Âåðõîâíîìó Ìàãó Êðóãà Îãíÿ, â çíàê íàøåãî äîâåðèÿ.
    ai_output(self, other, "Info_Saturas_ACCEPT_14_08"); //Ñ åå ïîìîùüþ îí ñìîæåò â ëþáîé ìîìåíò, ìèíóÿ ñòðàæó, ïåðåíåñòèñü ñþäà, â ýòó êîìíàòó.
    ai_output(self, other, "Info_Saturas_ACCEPT_14_09"); //Ýòî äîëæíî óáåäèòü íàøèõ áûâøèõ äðóçåé â íàøèõ äîáðûõ íàìåðåíèÿõ.
    b_kapitelwechsel(4);
};

instance info_saturas_ambush(c_info) {
    npc = kdw_600_saturas /*7557*/;
    condition = info_saturas_ambush_condition;
    information = info_saturas_ambush_info;
    important = true;
};

func int info_saturas_ambush_condition() {
    if (fmtaken && (!findxardas)) {
        return true;
    };
};

func void info_saturas_ambush_info() {
    var c_npc gorn;

    gorn = hlp_getnpc(pc_fighter);
    ai_turntonpc(gorn, hero);
    ai_output(self, hero, "Info_Saturas_AMBUSH_14_01"); //ß ðàä, ÷òî òû âåðíóëñÿ. Ñëó÷èëîñü íå÷òî óæàñíîå!
    ai_output(hero, self, "Info_Saturas_AMBUSH_15_02"); //Äàé-êà ÿ óãàäàþ: íà Ñâîáîäíóþ Øàõòó íàïàëè ñòðàæíèêè èç Ñòàðîãî Ëàãåðÿ. Íèêòî íå âèäåë, îòêóäà îíè ïîÿâèëèñü?..
    ai_output(self, hero, "Info_Saturas_AMBUSH_14_03"); //Ïîñòîé... êàê... íî êîíå÷íî... Òû óçíàë îá ýòîì åùå â Ñòàðîì Ëàãåðå!
    ai_output(self, hero, "Info_Saturas_AMBUSH_14_04"); //Ãîðí ïðèáûë ñþäà íåçàäîëãî äî òåáÿ.
    ai_output(self, hero, "Info_Saturas_AMBUSH_14_05"); //×òî çàñòàâèëî Ãîìåçà ïîéòè íà ñòîëü àãðåññèâíûé øàã?
    ai_output(self, hero, "Info_Saturas_AMBUSH_14_06"); //Îí äîëæåí îòäàâàòü ñåáå îò÷åò â òîì, ÷òî ýòîò ãíóñíûé ïîñòóïîê ñòàíåò ïðè÷èíîé âîéíû!
};

instance info_saturas_collapse(c_info) {
    npc = kdw_600_saturas /*7557*/;
    nr = 0;
    condition = info_saturas_collapse_condition;
    information = info_saturas_collapse_info;
    description = "Ñòàðóþ Øàõòó çàëèëî âîäîé, è îíà îáðóøèëàñü!";
};

func int info_saturas_collapse_condition() {
    if (npc_knowsinfo(hero, info_saturas_ambush /*10130*/)) {
        return true;
    };
};

func void info_saturas_collapse_info() {
    ai_output(hero, self, "Info_Saturas_COLLAPSE_15_01"); //Ñòàðóþ Øàõòó çàëèëî âîäîé, è îíà îáðóøèëàñü!
    ai_output(self, hero, "Info_Saturas_COLLAPSE_14_02"); //... Îáðóøèëàñü... êîíå÷íî æå... ýòî ïðîÿñíÿåò äåëî.
    ai_output(self, hero, "Info_Saturas_COLLAPSE_14_03"); //Ìû çàãíàëè Ãîìåçà â óãîë, è òåïåðü îí îïàñíåå, ÷åì êîãäà áû òî íè áûëî. Åìó íå÷åãî òåðÿòü, è îí ïîéäåò íà âñå!
};

instance info_saturas_murder(c_info) {
    npc = kdw_600_saturas /*7557*/;
    nr = 0;
    condition = info_saturas_murder_condition;
    information = info_saturas_murder_info;
    description = "Ãîìåç ðàñïðàâèëñÿ ñ ìàãàìè Îãíÿ!";
};

func int info_saturas_murder_condition() {
    if (npc_knowsinfo(hero, info_saturas_ambush /*10130*/)) {
        return true;
    };
};

func void info_saturas_murder_info() {
    ai_output(hero, self, "Info_Saturas_MURDER_15_01"); //Ãîìåç èçáàâèëñÿ îò âñåõ ìàãîâ Îãíÿ!
    ai_output(self, hero, "Info_Saturas_MURDER_14_02"); //ÓÁÈË ÈÕ??? Íî âî èìÿ Áåëüäæàðà, çà÷åì åìó ýòî ïîíàäîáèëîñü?
    ai_output(hero, self, "Info_Saturas_MURDER_15_03"); //Îíè âûñòóïèëè ïðîòèâ íàïàäåíèÿ íà Ñâîáîäíóþ Øàõòó, ïðîòèâ Ãîìåçà.
    ai_output(self, hero, "Info_Saturas_MURDER_14_04"); //Òîãäà âñå ìû îáðå÷åíû. Áåç ýòèõ øåñòåðûõ ìàãîâ ìû íå ñìîæåì êîíòðîëèðîâàòü ìàãè÷åñêóþ ñèëó ïðè âçðûâå æåëåçíîé ãîðû.
    ai_output(self, hero, "Info_Saturas_MURDER_14_05"); //Íî íåñìîòðÿ íè íà ÷òî, ÿ áëàãîäàðþ òåáÿ çà ñêîðáíóþ âåñòü, êîòîðóþ òû, íåâçèðàÿ íà îïàñíîñòü, ïðèíåñ â íàøó îáèòåëü.
    b_givexp(xp_reporttosaturas);
    b_logentry(ch4_firemages, ch4_firemages_8);
    log_settopicstatus(ch4_firemages, log_success);
};

instance kdw_600_saturas_nomoreoc(c_info) {
    npc = kdw_600_saturas /*7557*/;
    nr = 0;
    condition = kdw_600_saturas_nomoreoc_condition;
    information = kdw_600_saturas_nomoreoc_info;
    description = "Çà ïîìîùü âàì ìåíÿ èçãíàëè èç Ñòàðîãî Ëàãåðÿ!";
};

func int kdw_600_saturas_nomoreoc_condition() {
    if (npc_knowsinfo(hero, info_saturas_murder /*10137*/) && ((oldheroguild == gil_grd) || (oldheroguild == gil_kdf))) {
        return true;
    };
};

func void kdw_600_saturas_nomoreoc_info() {
    ai_output(other, self, "KDW_600_Saturas_NOMOREOC_Info_15_01"); //Çà ïîìîùü âàì ìåíÿ èçãíàëè èç Ñòàðîãî Ëàãåðÿ!
    ai_output(self, other, "KDW_600_Saturas_NOMOREOC_Info_14_02"); //Òû áîëüøå íå ïðèíàäëåæèøü ê Ñòàðîìó Ëàãåðþ?
    ai_output(self, other, "KDW_600_Saturas_NOMOREOC_Info_14_03"); //Òîãäà äîáðî ïîæàëîâàòü ê íàì!
    log_createtopic(ch4_bannedfromoc, log_mission);
    log_settopicstatus(ch4_bannedfromoc, log_running);
    b_logentry(ch4_bannedfromoc, ch4_bannedfromoc_7);
};

instance kdw_600_saturas_gotolee(c_info) {
    npc = kdw_600_saturas /*7557*/;
    nr = 0;
    condition = kdw_600_saturas_gotolee_condition;
    information = kdw_600_saturas_gotolee_info;
    description = "Òû õî÷åøü ñêàçàòü, ÷òî íàåìíèêè ïðèìóò ìåíÿ ê ñåáå?";
};

func int kdw_600_saturas_gotolee_condition() {
    if ((oldheroguild == gil_grd) && npc_knowsinfo(hero, kdw_600_saturas_nomoreoc /*10140*/)) {
        return true;
    };
};

func void kdw_600_saturas_gotolee_info() {
    ai_output(other, self, "KDW_600_Saturas_GOTOLEE_Info_15_01"); //Òû õî÷åøü ñêàçàòü, ÷òî íàåìíèêè ïðèìóò ìåíÿ ê ñåáå?
    ai_output(self, other, "KDW_600_Saturas_GOTOLEE_Info_14_02"); //Ïîãîâîðè ñ Ëè. Îí áóäåò ðåøàòü. À çàòåì âîçâðàùàéñÿ êî ìíå.
    b_logentry(ch4_bannedfromoc, ch4_bannedfromoc_8);
};

instance kdw_600_saturas_oath(c_info) {
    npc = kdw_600_saturas /*7557*/;
    nr = 0;
    condition = kdw_600_saturas_oath_condition;
    information = kdw_600_saturas_oath_info;
    description = "Îçíà÷àåò ëè ýòî, ÷òî òåïåðü ÿ ïðèíàäëåæó ê ãèëüäèè ìàãîâ Âîäû?";
};

func int kdw_600_saturas_oath_condition() {
    if ((oldheroguild == gil_kdf) && npc_knowsinfo(hero, kdw_600_saturas_nomoreoc /*10140*/)) {
        return true;
    };
};

func void kdw_600_saturas_oath_info() {
    ai_output(other, self, "KDW_600_Saturas_OATH_Info_15_01"); //Îçíà÷àåò ëè ýòî, ÷òî òåïåðü ÿ ïðèíàäëåæó ê ãèëüäèè ìàãîâ Âîäû?
    ai_output(self, other, "KDW_600_Saturas_OATH_Info_14_02"); //Ïîêà åùå íåò. Ïðåæäå òû äîëæåí ïðèíåñòè êëÿòâó Âîäå.
    ai_output(other, self, "KDW_600_Saturas_OATH_Info_15_03"); //Íî ÿ óæå ïðèíîñèë êëÿòâó Îãíþ!
    ai_output(self, other, "KDW_600_Saturas_OATH_Info_14_04"); //Õ-ììì...
    ai_output(self, other, "KDW_600_Saturas_OATH_Info_14_05"); //Ýòî íå çíà÷èò, ÷òî òû äîëæåí íàðóøèòü ñòàðûé îáåò!
    ai_output(other, self, "KDW_600_Saturas_OATH_Info_15_06"); //Óõ... ß íå ïîíèìàþ...
    ai_output(self, other, "KDW_600_Saturas_OATH_Info_14_07"); //Òâîé îáåò ïðîñòî ðàñøèðèòñÿ, è òû ñòàíåøü ìàãîì ñðàçó äâóõ ñòèõèé!
    ai_output(self, other, "KDW_600_Saturas_OATH_Info_14_08"); //Òåáå áóäóò ïîäâëàñòíû è ñèëà Îãíÿ, è ìóäðîñòü Âîäû!
    b_logentry(ch4_bannedfromoc, ch4_bannedfromoc_9);
};

instance kdw_600_saturas_kdwaufnahme(c_info) {
    npc = kdw_600_saturas /*7557*/;
    nr = 0;
    condition = kdw_600_saturas_kdwaufnahme_condition;
    information = kdw_600_saturas_kdwaufnahme_info;
    description = "ß ãîòîâ ïðèíåñòè êëÿòâó.";
};

func int kdw_600_saturas_kdwaufnahme_condition() {
    if (npc_knowsinfo(hero, kdw_600_saturas_oath /*10146*/)) {
        return true;
    };
};

func void kdw_600_saturas_kdwaufnahme_info() {
    ai_gotonpc(hero, self);
    ai_output(other, self, "KDW_600_Saturas_KDWAUFNAHME_Info_15_01"); //ß ãîòîâ ïðèíåñòè êëÿòâó.
    ai_output(self, other, "KDW_600_Saturas_KDWAUFNAHME_Info_14_02"); //Âåðíûé ñëóæèòåëü Îãíÿ, îòíûíå òû ïîëó÷èøü áëàãîñëîâåíèå Âîäû!
    ai_output(self, other, "KDW_600_Saturas_KDWAUFNAHME_Info_14_03"); //Ïîâòîðÿé çà ìíîé ñëîâà êëÿòâû:
    ai_output(self, other, "KDW_600_Saturas_KDWAUFNAHME_Info_14_04"); //Ìîùüþ áîãîâ ÿ êëÿíóñü...
    ai_output(other, self, "KDW_600_Saturas_KDWAUFNAHME_Info_15_05"); //Ìîùüþ áîãîâ ÿ êëÿíóñü...
    ai_output(self, other, "KDW_600_Saturas_KDWAUFNAHME_Info_14_06"); //... è ñèëîé ñâÿùåííîé Âîäû...
    ai_output(other, self, "KDW_600_Saturas_KDWAUFNAHME_Info_15_07"); //... è ñèëîé ñâÿùåííîé Âîäû...
    ai_output(self, other, "KDW_600_Saturas_KDWAUFNAHME_Info_14_08"); //... ÷òî çíàíèÿ ìîè è ïîñòóïêè ìîè ñ ýòîãî äíÿ è âîâåêè âåêîâ áóäóò åäèíû ñ Âîäîé...
    ai_output(other, self, "KDW_600_Saturas_KDWAUFNAHME_Info_15_09"); //... ÷òî çíàíèÿ ìîè è ïîñòóïêè ìîè ñ ýòîãî äíÿ è âîâåêè âåêîâ áóäóò åäèíû ñ Âîäîé...
    ai_output(self, other, "KDW_600_Saturas_KDWAUFNAHME_Info_14_10"); //... äî òåõ ïîð, ïîêà òåëî ìîå íå âåðíåòñÿ â ÷åðòîãè Áåëüäæàðà è íå èññÿêíåò èñòî÷íèê ìîåé æèçíè.
    ai_output(other, self, "KDW_600_Saturas_KDWAUFNAHME_Info_15_11"); //... äî òåõ ïîð ïîêà òåëî ìîå íå âåðíåòñÿ â ÷åðòîãè Áåëüäæàðà è íå èññÿêíåò èñòî÷íèê ìîåé æèçíè.
    ai_output(self, other, "KDW_600_Saturas_KDWAUFNAHME_Info_14_12"); //Ýòîé êëÿòâîé òû îáúåäèíèë â ñåáå ñèëó Îãíÿ è áëàãîñëîâåíèå Âîäû.
    ai_output(self, other, "KDW_600_Saturas_KDWAUFNAHME_Info_14_13"); //Òû ñâÿçàë âîåäèíî äâå ïðîòèâîïîëîæíîñòè. Òàê ïóñòü æå æèçíü òâîÿ ïîñëóæèò çíàêîì îáúåäèíåíèÿ ñòèõèé!
    ai_output(self, other, "KDW_600_Saturas_KDWAUFNAHME_Info_14_14"); //Íîñè ýòî îáëà÷åíèå â çíàê ñâÿçè ñî ñâÿùåííîé Âîäîé è Àäàíîñîì.
    createinvitem(self, kdw_armor_l);
    b_giveinvitems(self, other, kdw_armor_l /*4148*/, 1);
    ai_equipbestarmor(hero);
    snd_play("MFX_Heal_Cast");
    npc_settrueguild(hero, gil_kdw);
    hero.guild = gil_kdw;
    b_logentry(ch4_bannedfromoc, ch4_bannedfromoc_10);
    log_settopicstatus(ch4_bannedfromoc, log_success);
    ai_stopprocessinfos(self);
};

instance kdw_600_saturas_lesson(c_info) {
    npc = kdw_600_saturas /*7557*/;
    nr = 100;
    condition = kdw_600_saturas_lesson_condition;
    information = kdw_600_saturas_lesson_info;
    description = "Òû áóäåøü ìîèì íàñòàâíèêîì?";
};

func int kdw_600_saturas_lesson_condition() {
    if (npc_gettrueguild(hero) == gil_kdw) {
        return true;
    };
};

func void kdw_600_saturas_lesson_info() {
    ai_output(other, self, "KDW_600_Saturas_LESSON_Info_15_01"); //Òû áóäåøü ìîèì íàñòàâíèêîì?
    if (npc_gettalentskill(hero, npc_talent_mage) <= 3) {
        ai_output(self, other, "KDW_600_Saturas_LESSON_Info_14_02"); //Òåáå ïðåäñòîèò ìíîãîìó íàó÷èòüñÿ. Ìû ïðèñòóïèì, êàê òîëüêî òû áóäåøü ãîòîâ.
    }
    else if (npc_gettalentskill(hero, npc_talent_mage) == 4) {
        ai_output(self, other, "KDW_600_Saturas_LESSON_Info_14_03"); //Åñòü åùå îäèí Êðóã, äî ñèõ ïîð íå ïðîéäåííûé òîáîþ. Ìû ïðèñòóïèì, êàê òîëüêî òû áóäåøü ãîòîâ.
    }
    else {
        ai_output(self, other, "KDW_600_Saturas_LESSON_Info_14_04"); //Òû óæå ïðîøåë Ïÿòûé Êðóã ìàãèè. Òû çíàåøü òî æå, ÷òî çíàþ ÿ.
        ai_output(self, other, "KDW_600_Saturas_LESSON_Info_14_05"); //ß íå ìîãó áîëüøå ó÷èòü òåáÿ.
    };
    log_createtopic(ge_teachernc, log_note);
    b_logentry(ge_teachernc, ge_teachernc_saturas);
};

instance kdw_600_saturas_kreis1(c_info) {
    npc = kdw_600_saturas /*7557*/;
    nr = 100;
    condition = kdw_600_saturas_kreis1_condition;
    information = kdw_600_saturas_kreis1_info;
    permanent = true;
    description = b_buildlearnstring(name_learnmage_1, lpcost_talent_mage_1, 0);
};

func int kdw_600_saturas_kreis1_condition() {
    if ((npc_knowsinfo(hero, kdw_600_saturas_lesson /*10152*/) && (npc_gettalentskill(hero, npc_talent_mage) == 0)) && (npc_gettrueguild(hero) == gil_kdw)) {
        return true;
    };
};

func void kdw_600_saturas_kreis1_info() {
    ai_output(other, self, "KDW_600_Saturas_KREIS1_Info_15_01"); //ß ãîòîâ âñòóïèòü â Ïåðâûé Êðóã.
    if (b_giveskill(other, npc_talent_mage, 1, lpcost_talent_mage_1)) {
        ai_output(self, other, "KDW_600_Saturas_KREIS1_Info_14_02"); //Âñòóïèâ â Ïåðâûé Êðóã, òû íàó÷èøüñÿ èñïîëüçîâàòü ìàãè÷åñêèå ðóíû.
        ai_output(self, other, "KDW_600_Saturas_KREIS1_Info_14_03"); //Êàæäàÿ ðóíà ñîäåðæèò ñòðóêòóðó îñîáîãî ìàãè÷åñêîãî çàêëèíàíèÿ.
        ai_output(self, other, "KDW_600_Saturas_KREIS1_Info_14_04"); //Èñïîëüçîâàâ ñâîþ ñîáñòâåííóþ ìàãè÷åñêóþ ñèëó, òû ñìîæåøü âûñâîáîäèòü ìàãèþ ðóíû.
        ai_output(self, other, "KDW_600_Saturas_KREIS1_Info_14_05"); //Íî â îòëè÷èå îò ñâèòêîâ, êîòîðûå ïî ñóòè ÿâëÿþòñÿ ìàãè÷åñêèìè ôîðìóëàìè, ìàãèÿ ðóí ïîääåðæèâàåò ñòðóêòóðó çàêëèíàíèÿ âñåãäà.
        ai_output(self, other, "KDW_600_Saturas_KREIS1_Info_14_06"); //Êàæäàÿ ðóíà òàèò â ñåáå ìàãè÷åñêóþ ñèëó, âîñïîëüçîâàòüñÿ êîòîðîé òû ìîæåøü â ëþáîé ìîìåíò.
        ai_output(self, other, "KDW_600_Saturas_KREIS1_Info_14_07"); //Òàê æå, êàê è ñî ñâèòêîì, â ìîìåíò, êîãäà òû èñïîëüçóåøü ðóíó, ðàñõîäóåòñÿ òâîÿ ñîáñòâåííàÿ ìàãè÷åñêàÿ ñèëà.
        ai_output(self, other, "KDW_600_Saturas_KREIS1_Info_14_08"); //Ñ êàæäûì íîâûì Êðóãîì òû áóäåøü óçíàâàòü î ðóíàõ âñå áîëüøå è áîëüøå.
        ai_output(self, other, "KDW_600_Saturas_KREIS1_Info_14_09"); //Èñïîëüçóé èõ ñèëó, äëÿ òîãî ÷òîáû ïîçíàòü ñåáÿ.
    };
};

instance kdw_600_saturas_kreis2(c_info) {
    npc = kdw_600_saturas /*7557*/;
    nr = 100;
    condition = kdw_600_saturas_kreis2_condition;
    information = kdw_600_saturas_kreis2_info;
    permanent = true;
    description = b_buildlearnstring(name_learnmage_2, lpcost_talent_mage_2, 0);
};

func int kdw_600_saturas_kreis2_condition() {
    if ((npc_knowsinfo(hero, kdw_600_saturas_lesson /*10152*/) && (npc_gettalentskill(hero, npc_talent_mage) == 1)) && (npc_gettrueguild(hero) == gil_kdw)) {
        return true;
    };
};

func void kdw_600_saturas_kreis2_info() {
    ai_output(other, self, "KDW_600_Saturas_KREIS2_Info_15_01"); //ß ãîòîâ âñòóïèòü âî Âòîðîé Êðóã.
    if (b_giveskill(other, npc_talent_mage, 2, lpcost_talent_mage_2)) {
        ai_output(self, other, "KDW_600_Saturas_KREIS2_Info_14_02"); //Òû óæå íàó÷èëñÿ ïîíèìàòü ðóíû. Ïðèøëî âðåìÿ óãëóáèòü òâîè ïîçíàíèÿ.
        ai_output(self, other, "KDW_600_Saturas_KREIS2_Info_14_03"); //Âñòóïèâ âî Âòîðîé Êðóã, òû ïîñòèãíåøü îñíîâû ìîùíûõ áîåâûõ çàêëÿòèé è ïîçíàåøü âñå ñåêðåòû öåëèòåëüñòâà.
        ai_output(self, other, "KDW_600_Saturas_KREIS2_Info_14_04"); //Íî äëÿ òîãî ÷òîáû ïîçíàòü èñòèííûå ñåêðåòû ìàãèè, òåáå ïðåäñòîèò ìíîãîìó íàó÷èòüñÿ.
        ai_output(self, other, "KDW_600_Saturas_KREIS2_Info_14_05"); //Òû óæå çíàåøü î òîì, ÷òî ìîæåøü èñïîëüçîâàòü ëþáóþ ðóíó áåññ÷åòíîå ÷èñëî ðàç, íî ëèøü äî òåõ ïîð, ïîêà íå èçðàñõîäóåøü âñþ ñâîþ ìàãè÷åñêóþ ñèëó.
        ai_output(self, other, "KDW_600_Saturas_KREIS2_Info_14_06"); //Íî ïðåæäå ÷åì ñäåëàòü ÷òî-ëèáî, ïîäóìàé î òîì, åñòü ëè â ýòîì ñìûñë. Òû îáëàäàåøü ñèëîé, êîòîðàÿ ïîçâîëÿåò ñ ëåãêîñòüþ ñåÿòü ñìåðòü è ðàçðóøåíèÿ.
        ai_output(self, other, "KDW_600_Saturas_KREIS2_Info_14_07"); //Íî èñòèííûé ìàã èñïîëüçóåò åå ëèøü ïî íåîáõîäèìîñòè.
        ai_output(self, other, "KDW_600_Saturas_KREIS2_Info_14_08"); //Íàó÷èñü îöåíèâàòü ñèòóàöèþ, è òû ïîçíàåøü èñòèííóþ ñèëó ðóí.
    };
};

instance kdw_600_saturas_kreis3(c_info) {
    npc = kdw_600_saturas /*7557*/;
    nr = 100;
    condition = kdw_600_saturas_kreis3_condition;
    information = kdw_600_saturas_kreis3_info;
    permanent = true;
    description = b_buildlearnstring(name_learnmage_3, lpcost_talent_mage_3, 0);
};

func int kdw_600_saturas_kreis3_condition() {
    if ((npc_knowsinfo(hero, kdw_600_saturas_lesson /*10152*/) && (npc_gettalentskill(hero, npc_talent_mage) == 2)) && (npc_gettrueguild(hero) == gil_kdw)) {
        return true;
    };
};

func void kdw_600_saturas_kreis3_info() {
    ai_output(other, self, "KDW_600_Saturas_KREIS3_Info_15_01"); //Êàêèå çíàíèÿ ñîïóòñòâóþò Òðåòüåìó Êðóãó?
    if (b_giveskill(other, npc_talent_mage, 3, lpcost_talent_mage_3)) {
        ai_output(self, other, "KDW_600_Saturas_KREIS3_Info_14_02"); //Òðåòèé Êðóã ÿâëÿåòñÿ îäíèì èç âàæíåéøèõ ýòàïîâ â æèçíè êàæäîãî ìàãà. Äîñòèãíóâ åãî, òû çàâåðøàåøü ñâîé ïîèñê.
        ai_output(self, other, "KDW_600_Saturas_KREIS3_Info_14_03"); //Òû óæå ïðåîäîëåë çíà÷èòåëüíûé ýòàï íà ïóòè ìàãèè. Òû íàó÷èëñÿ èñïîëüçîâàòü ðóíû.
        ai_output(self, other, "KDW_600_Saturas_KREIS3_Info_14_04"); //Ýòî çíàíèå ïîñëóæèò îñíîâîé äëÿ ñëåäóþùåãî ýòàïà. Èñïîëüçóé ðóíû îñìîòðèòåëüíî.
        ai_output(self, other, "KDW_600_Saturas_KREIS3_Info_14_05"); //Òû ìîæåøü èñïîëüçîâàòü èõ èëè íåò. Íî òû äîëæåí îïðåäåëèòüñÿ ñ âûáîðîì.
        ai_output(self, other, "KDW_600_Saturas_KREIS3_Info_14_06"); //Ñäåëàâ âûáîð, èñïîëüçóé ñâîþ ñèëó áåç êîëåáàíèé.
        ai_output(self, other, "KDW_600_Saturas_KREIS3_Info_14_07"); //Íàéäè ñâîé ïóòü, è òîãäà òû ïîçíàåøü ñèëó ðåøåíèÿ.
    };
};

instance kdw_600_saturas_kreis4(c_info) {
    npc = kdw_600_saturas /*7557*/;
    nr = 100;
    condition = kdw_600_saturas_kreis4_condition;
    information = kdw_600_saturas_kreis4_info;
    permanent = true;
    description = b_buildlearnstring(name_learnmage_4, lpcost_talent_mage_4, 0);
};

func int kdw_600_saturas_kreis4_condition() {
    if ((npc_knowsinfo(hero, kdw_600_saturas_lesson /*10152*/) && (npc_gettalentskill(hero, npc_talent_mage) == 3)) && (npc_gettrueguild(hero) == gil_kdw)) {
        return true;
    };
};

func void kdw_600_saturas_kreis4_info() {
    ai_output(other, self, "KDW_600_Saturas_KREIS4_Info_15_01"); //ß ãîòîâ âñòóïèòü â ×åòâåðòûé Êðóã.
    if (b_giveskill(other, npc_talent_mage, 4, lpcost_talent_mage_4)) {
        ai_output(self, other, "KDW_600_Saturas_KREIS4_Info_14_02"); //Òû çàâåðøèë ïåðâûå òðè Êðóãà. Ïðèøëî âðåìÿ ïîñòè÷ü ñåêðåòû ìàãèè.
        ai_output(self, other, "KDW_600_Saturas_KREIS4_Info_14_03"); //Îñíîâà ìàãèè ðóí - êàìåíü. Ìàãè÷åñêèé êàìåíü, äîáûòûé èç ìàãè÷åñêîé ðóäû.
        ai_output(self, other, "KDW_600_Saturas_KREIS4_Info_14_04"); //Ýòî òà ñàìàÿ ðóäà, êîòîðóþ äîáûâàþò â øàõòàõ. Â õðàìàõ îíà íàäåëÿåòñÿ ìàãè÷åñêèìè ôîðìóëàìè, è òàì æå ðóíû ïðåâðàùàþòñÿ â îðóäèÿ íàøåé ñèëû.
        ai_output(self, other, "KDW_600_Saturas_KREIS4_Info_14_05"); //Ñ ðóíàìè, êîòîðûìè òû ñåé÷àñ âëàäååøü, òû îáðåë çíàíèå õðàìîâ ýòîãî ìèðà.
        ai_output(self, other, "KDW_600_Saturas_KREIS4_Info_14_07"); //Ïîéìè ìàãèþ, è òû îòêðîåøü äëÿ ñåáÿ ñåêðåò ñèëû.
    };
};

instance kdw_600_saturas_kreis5(c_info) {
    npc = kdw_600_saturas /*7557*/;
    nr = 100;
    condition = kdw_600_saturas_kreis5_condition;
    information = kdw_600_saturas_kreis5_info;
    permanent = true;
    description = b_buildlearnstring(name_learnmage_5, lpcost_talent_mage_5, 0);
};

func int kdw_600_saturas_kreis5_condition() {
    if ((npc_knowsinfo(hero, kdw_600_saturas_lesson /*10152*/) && (npc_gettalentskill(hero, npc_talent_mage) == 4)) && (npc_gettrueguild(hero) == gil_kdw)) {
        return true;
    };
};

func void kdw_600_saturas_kreis5_info() {
    ai_output(other, self, "KDW_600_Saturas_KREIS5_Info_15_01"); //ß ãîòîâ âñòóïèòü â Ïÿòûé Êðóã.
    if (b_giveskill(other, npc_talent_mage, 5, lpcost_talent_mage_5)) {
        ai_output(self, other, "KDW_600_Saturas_KREIS5_Info_14_02"); //Äà áóäåò òàê. ß îòêðîþ òåáå èñòèííûé ñìûñë Ïÿòîãî Êðóãà.
        ai_output(self, other, "KDW_600_Saturas_KREIS5_Info_14_03"); //Îãíåííûé Øòîðì è Ëåäÿíàÿ Âîëíà - òàê íàçûâàþòñÿ ðóíû, ìàãèÿ êîòîðûõ îòíûíå ïîäâëàñòíà òåáå, êàê è ñïîñîáíîñòü èñòðåáëÿòü íåæèòü.
        ai_output(self, other, "KDW_600_Saturas_KREIS5_Info_14_04"); //Íî ñàìîå ñèëüíîå çàêëèíàíèå Ïÿòîãî Êðóãà - Ñìåðòåëüíàÿ Çûáü. Çàâëàäåâ ýòîé ðóíîé, òû ïîëó÷èøü âåëèêóþ è î÷åíü îïàñíóþ ñèëó.
        ai_output(self, other, "KDW_600_Saturas_KREIS5_Info_14_05"); //Èñïîëüçóé åå êàê ìîæíî ðåæå, èáî äàð ýòîò - îò áîãîâ Òüìû.
        ai_output(self, other, "KDW_600_Saturas_KREIS4_Info_14_06"); //Òåïåðü òû íàó÷èëñÿ âñåìó, ÷òî çíàþ ÿ ñàì.
        ai_output(self, other, "KDW_600_Saturas_KREIS5_Info_14_06"); //Ïîçíàé ïðåäåë ñâîèõ âîçìîæíîñòåé, è òû ïîçíàåøü ñâîþ èñòèííóþ ñèëó.
    };
};

instance kdw_600_saturas_heavyarmor(c_info) {
    npc = kdw_600_saturas /*7557*/;
    nr = 100;
    condition = kdw_600_saturas_heavyarmor_condition;
    information = kdw_600_saturas_heavyarmor_info;
    permanent = true;
    description = b_buildbuyarmorstring(name_saturashighrobe, value_kdw_armor_h);
};

func int kdw_600_saturas_heavyarmor_condition() {
    if ((npc_gettrueguild(hero) == gil_kdw) && (!npc_hasitems(hero, kdw_armor_h))) {
        return true;
    };
};

func void kdw_600_saturas_heavyarmor_info() {
    ai_output(other, self, "KDW_600_Saturas_HEAVYARMOR_Info_15_01"); //ß õî÷ó íîñèòü îáëà÷åíèå âûñøèõ ìàãîâ Âîäû.
    if ((npc_gettalentskill(hero, npc_talent_mage) < 4) && (kapitel < 5)) {
        ai_output(self, other, "KDW_600_Saturas_HEAVYARMOR_Info_14_02"); //Òâîå âðåìÿ åùå íå ïðèøëî.
    }
    else if (npc_hasitems(hero, itminugget) < value_kdw_armor_h) {
        ai_output(self, other, "KDW_600_Saturas_HEAVYARMOR_Info_14_03"); //Òâîèõ çàïàñîâ ðóäû íå õâàòèò äàæå íà òî, ÷òîáû çàïëàòèòü çà òêàíü.
    }
    else {
        ai_output(self, other, "KDW_600_Saturas_HEAVYARMOR_Info_14_04"); //Âðåìÿ ïðèøëî. Òû äîñòîèí íîñèòü îáëà÷åíèå âûñøèõ ìàãîâ Âîäû.
        b_giveinvitems(hero, self, itminugget /*4517*/, value_kdw_armor_h);
        createinvitem(hero, kdw_armor_h);
        createinvitem(self, itamarrow);
        b_giveinvitems(self, hero, itamarrow /*4894*/, 1);
        npc_removeinvitem(hero, itamarrow /*4894*/);
        ai_equipbestarmor(hero);
    };
};

instance info_saturas_nowsld(c_info) {
    npc = kdw_600_saturas /*7557*/;
    nr = 0;
    condition = info_saturas_nowsld_condition;
    information = info_saturas_nowsld_info;
    description = "Ëè ïðèíÿë ìåíÿ â íàåìíèêè.";
};

func int info_saturas_nowsld_condition() {
    if (npc_knowsinfo(hero, sld_700_lee_changeside /*11984*/)) {
        return true;
    };
};

func void info_saturas_nowsld_info() {
    ai_output(hero, self, "Info_Saturas_NOWSLD_15_01"); //Ëè ïðèíÿë ìåíÿ â íàåìíèêè.
    ai_output(self, hero, "Info_Saturas_NOWSLD_14_02"); //Õîðîøî. Î÷åíü õîðîøî. Òåïåðü òû ñòàë ÷ëåíîì íàøåãî Ëàãåðÿ.
    ai_output(self, hero, "Info_Saturas_NOWSLD_14_03"); //Äîáðî ïîæàëîâàòü!
    b_logentry(ch4_bannedfromoc, ch4_bannedfromoc_11);
    log_settopicstatus(ch4_bannedfromoc, log_success);
};

instance info_saturas_xardas(c_info) {
    npc = kdw_600_saturas /*7557*/;
    nr = 0;
    condition = info_saturas_xardas_condition;
    information = info_saturas_xardas_info;
    description = "Îòïðàâëÿÿ ìåíÿ ê ìàãàì Îãíÿ, òû óïîìÿíóë... ÊÎÃÎ-ÒÎ.";
};

func int info_saturas_xardas_condition() {
    if (npc_knowsinfo(hero, info_saturas_collapse /*10134*/) && npc_knowsinfo(hero, info_saturas_murder /*10137*/)) {
        if ((npc_gettrueguild(hero) != gil_grd) && (npc_gettrueguild(hero) != gil_kdf)) {
            return true;
        };
    };
};

func void info_saturas_xardas_info() {
    ai_output(hero, self, "Info_Saturas_XARDAS_15_01"); //Îòïðàâëÿÿ ìåíÿ ê ìàãàì Îãíÿ, òû óïîìÿíóë... ÊÎÅ-ÊÎÃÎ.
    ai_output(self, hero, "Info_Saturas_XARDAS_14_02"); //Íó, ÿ íàäåÿëñÿ, ÷òî ìû ñïðàâèìñÿ è áåç åãî ïîìîùè, íî ñóäÿ ïî òîìó, êàê ðàçâèâàþòñÿ ñîáûòèÿ...
    ai_output(hero, self, "Info_Saturas_XARDAS_15_03"); //Êòî ÎÍ?
    ai_output(self, hero, "Info_Saturas_XARDAS_14_04"); //Õîðîøî, õîðîøî!
    ai_output(self, hero, "Info_Saturas_XARDAS_14_05"); //Ìíîãî, ìíîãî ëåò íàçàä...
    ai_output(hero, self, "Info_Saturas_XARDAS_15_06"); //Íåëüçÿ ëè ïîäñîêðàòèòü èñòîðèþ, à?
    ai_output(self, hero, "Info_Saturas_XARDAS_14_07"); //Òåðïåíèå! Èòàê, êîãäà âñå ìû, äâåíàäöàòü ìàãîâ, ñîçäàâàëè ìàãè÷åñêèé Áàðüåð, íàøà ñèëà íàïðàâëÿëàñü è êîíòðîëèðîâàëàñü òðèíàäöàòûì.
    ai_output(hero, self, "Info_Saturas_XARDAS_15_08"); //Òðèíàäöàòûé ìàã? ß äóìàë, âàñ áûëà òîëüêî äþæèíà!
    ai_output(self, hero, "Info_Saturas_XARDAS_14_09"); //Áîëüøèíñòâî èç òåõ, êòî íå çàñòàë îñíîâàíèÿ êîëîíèè, äóìàþò òî÷íî òàê æå.
    ai_output(self, hero, "Info_Saturas_XARDAS_14_10"); //Òðèíàäöàòûé ìàã ðóêîâîäèë íàìè, è áûëî ýòî åùå äî òîãî, êàê ìû ðàçäåëèëèñü íà Êðóãè Îãíÿ è Âîäû.
    ai_output(self, hero, "Info_Saturas_XARDAS_14_11"); //Íî îí ïîêèíóë Ñòàðûé Ëàãåðü, êîòîðûé êîãäà-òî áûë åäèíñòâåííûì Ëàãåðåì â êîëîíèè.
};

instance info_saturas_xardaswho(c_info) {
    npc = kdw_600_saturas /*7557*/;
    nr = 0;
    condition = info_saturas_xardaswho_condition;
    information = info_saturas_xardaswho_info;
    description = "Êàê çîâóò ýòîãî òðèíàäöàòîãî ìàãà?";
};

func int info_saturas_xardaswho_condition() {
    if (npc_knowsinfo(hero, info_saturas_xardas /*10176*/)) {
        return true;
    };
};

func void info_saturas_xardaswho_info() {
    ai_output(hero, self, "Info_Saturas_XARDASWHO_15_01"); //Êàê çîâóò ýòîãî òðèíàäöàòîãî ìàãà?
    ai_output(self, hero, "Info_Saturas_XARDASWHO_14_02"); //Ýãî èìÿ Êñàðäàñ. Åäâà ëè ñåé÷àñ êòî-íèáóäü ïîìíèò î íåì.
    ai_output(self, hero, "Info_Saturas_XARDASWHO_14_03"); //À òå, êòî ïîìíèò, íàçûâàþò åãî íå èíà÷å êàê ÍÅÊÐÎÌÀÍÒÎÌ!
};

instance info_saturas_xardaswhy(c_info) {
    npc = kdw_600_saturas /*7557*/;
    nr = 0;
    condition = info_saturas_xardaswhy_condition;
    information = info_saturas_xardaswhy_info;
    description = "Ïî÷åìó îí ïîêèíóë Ñòàðûé Ëàãåðü?";
};

func int info_saturas_xardaswhy_condition() {
    if (npc_knowsinfo(hero, info_saturas_xardas /*10176*/)) {
        return true;
    };
};

func void info_saturas_xardaswhy_info() {
    ai_output(hero, self, "Info_Saturas_XARDASWHY_15_01"); //Ïî÷åìó îí ïîêèíóë Ñòàðûé Ëàãåðü?
    ai_output(self, hero, "Info_Saturas_XARDASWHY_14_02"); //Îí íà÷àë èçó÷àòü ìàãèþ, ïîçâîëÿâøóþ ïðèçûâàòü ìàãè÷åñêèõ ñóùåñòâ... íåæèòü.
    ai_output(self, hero, "Info_Saturas_XARDASWHY_14_03"); //Ãîìåç áûë íå åäèíñòâåííûì èç òåõ, êòî íà÷àë áåñïîêîèòüñÿ. Áîëüøèíñòâî äðóãèõ ìàãîâ âûñòóïèëî ïðîòèâ Êñàðäàñà è åãî íå÷åñòèâûõ ýêñïåðèìåíòîâ.
    ai_output(hero, self, "Info_Saturas_XARDASWHY_15_04"); //È ÷òî áûëî ïîòîì?
    ai_output(self, hero, "Info_Saturas_XARDASWHY_14_05"); //Â îòëè÷èå îò ìÿñíèêà-Ãîìåçà, Êñàðäàñ ðåøèë èçáåæàòü êîíôëèêòà è ïðîñòî óøåë.
};

instance info_saturas_xardaswhere(c_info) {
    npc = kdw_600_saturas /*7557*/;
    nr = 0;
    condition = info_saturas_xardaswhere_condition;
    information = info_saturas_xardaswhere_info;
    description = "Ãäå ýòîò ìàã òåïåðü?";
};

func int info_saturas_xardaswhere_condition() {
    if (npc_knowsinfo(hero, info_saturas_xardas /*10176*/)) {
        return true;
    };
};

func void info_saturas_xardaswhere_info() {
    ai_output(hero, self, "Info_Saturas_XARDASWHERE_15_01"); //Ãäå ýòîò ìàã òåïåðü?
    ai_output(self, hero, "Info_Saturas_XARDASWHERE_14_02"); //Îí æèâåò â óåäèíåíèè â ñâîåé áàøíå ïîñðåäè çåìåëü îðêîâ.
    ai_output(self, hero, "Info_Saturas_XARDASWHERE_14_03"); //Îíà íàõîäèòñÿ â ñàìîé þæíîé ÷àñòè êîëîíèè.
};

instance info_saturas_xardashelp(c_info) {
    npc = kdw_600_saturas /*7557*/;
    nr = 0;
    condition = info_saturas_xardashelp_condition;
    information = info_saturas_xardashelp_info;
    description = "ß îòïðàâëþñü ê Êñàðäàñó è ïîïðîøó åãî î ïîìîùè!";
};

func int info_saturas_xardashelp_condition() {
    if ((npc_knowsinfo(hero, info_saturas_xardaswho /*10179*/) && npc_knowsinfo(hero, info_saturas_xardaswhy /*10182*/)) && npc_knowsinfo(hero, info_saturas_xardaswhere /*10185*/)) {
        return true;
    };
};

func void info_saturas_xardashelp_info() {
    ai_output(hero, self, "Info_Saturas_XARDASHELP_15_01"); //ß îòïðàâëþñü ê Êñàðäàñó è ïîïðîøó åãî î ïîìîùè!
    ai_output(self, hero, "Info_Saturas_XARDASHELP_14_02"); //Îí åäèíñòâåííûé, êòî òåïåðü ìîæåò íàì ïîìî÷ü.
    ai_output(self, hero, "Info_Saturas_XARDASHELP_14_03"); //Íî åñëè îí íå çíàåò ñïîñîáà èëè íå çàõî÷åò ïîìîãàòü íàì...
    ai_output(hero, self, "Info_Saturas_XARDASHELP_15_04"); //ÇÀÕÎ×ÅÒ!
    ai_output(self, hero, "Info_Saturas_XARDASHELP_14_05"); //Åñòü è äðóãàÿ ïðîáëåìà...
    b_story_findxardas();
};

instance info_saturas_xardasproblem(c_info) {
    npc = kdw_600_saturas /*7557*/;
    nr = 0;
    condition = info_saturas_xardasproblem_condition;
    information = info_saturas_xardasproblem_info;
    description = "Ïðîáëåìà?";
};

func int info_saturas_xardasproblem_condition() {
    if (npc_knowsinfo(hero, info_saturas_xardashelp /*10188*/)) {
        return true;
    };
};

func void info_saturas_xardasproblem_info() {
    ai_output(hero, self, "Info_Saturas_XARDASPROBLEM_15_01"); //Ïðîáëåìà?
    ai_output(self, hero, "Info_Saturas_XARDASPROBLEM_14_02"); //Äà. Çà ïðîøåäøèå ãîäû ìû íåñêîëüêî ðàç ïûòàëèñü ñâÿçàòüñÿ ñ Êñàðäàñîì.
    ai_output(self, hero, "Info_Saturas_XARDASPROBLEM_14_03"); //Ïîõîæå, îí íå õî÷åò, ÷òîáû åãî áåñïîêîèëè.
    ai_output(hero, self, "Info_Saturas_XARDASPROBLEM_15_04"); //×òî ýòî çíà÷èò?
    ai_output(self, hero, "Info_Saturas_XARDASPROBLEM_14_05"); //Íèêòî èç ãîíöîâ íå âåðíóëñÿ èç åãî áàøíè.
    ai_output(self, hero, "Info_Saturas_XARDASPROBLEM_14_06"); //Òåáå ïðèäåòñÿ íàéòè ñïîñîá, êàê îáìàíóòü åãî ñîçäàíèé.
    ai_output(hero, self, "Info_Saturas_XARDASPROBLEM_15_07"); //Ýòî äîëæíî áûòü çàáàâíî!
    b_logentry(ch4_findxardas, ch4_findxardas_6);
};

instance info_saturas_xardasgo(c_info) {
    npc = kdw_600_saturas /*7557*/;
    nr = 0;
    condition = info_saturas_xardasgo_condition;
    information = info_saturas_xardasgo_info;
    description = "Êàê ïðîéòè ìèìî ýòèõ òâàðåé?";
};

func int info_saturas_xardasgo_condition() {
    if (npc_knowsinfo(hero, info_saturas_xardasproblem /*10191*/)) {
        return true;
    };
};

func void info_saturas_xardasgo_info() {
    ai_output(hero, self, "Info_Saturas_XARDASGO_15_01"); //Êàê ïðîéòè ìèìî ýòèõ òâàðåé?
    ai_output(self, hero, "Info_Saturas_XARDASGO_14_02"); //Åñëè áû ÿ çíàë, òî íåïðåìåííî ñêàçàë áû òåáå!
    ai_output(self, hero, "Info_Saturas_XARDASGO_14_03"); //Ñîâåòóþ òåáå ïîèñêàòü îòâåò â íàøåé áèáëèîòåêå.
    ai_output(self, hero, "Info_Saturas_XARDASGO_14_04"); //Áûòü ìîæåò, â ñòàðûõ êíèãàõ åñòü óïîìèíàíèÿ î ñèëüíûõ è ñëàáûõ ñòîðîíàõ ñóùåñòâ, ïîðîæäåíûõ ìàãèåé.
    ai_output(hero, self, "Info_Saturas_XARDASGO_15_05"); //ß ïåðåðîþ âñþ áèáëèîòåêó. È íå âîëíóéñÿ...
    ai_output(hero, self, "Info_Saturas_XARDASGO_15_06"); //ß âåðíóñü!
    b_logentry(ch4_findxardas, ch4_findxardas_7);
};

instance kdw_600_saturas_timesup(c_info) {
    npc = kdw_600_saturas /*7557*/;
    condition = kdw_600_saturas_timesup_condition;
    information = kdw_600_saturas_timesup_info;
    important = true;
};

func int kdw_600_saturas_timesup_condition() {
    if ((findorcshaman == log_running) || (findorcshaman == log_success)) {
        return true;
    };
};

func void kdw_600_saturas_timesup_info() {
    ai_output(self, other, "KDW_600_Saturas_TIMESUP_Info_14_00"); //Òû ãîâîðèë ñ Êñàðäàñîì?
    info_clearchoices(kdw_600_saturas_timesup /*10197*/);
    info_addchoice(kdw_600_saturas_timesup /*10197*/, "Íó...", kdw_600_saturas_timesup_ja1);
    info_addchoice(kdw_600_saturas_timesup /*10197*/, "Íåò...", kdw_600_saturas_timesup_ja2);
    info_addchoice(kdw_600_saturas_timesup /*10197*/, "Âñå íå òàê, êàê òû äóìàåøü...", kdw_600_saturas_timesup_ja3);
};

func void kdw_600_saturas_timesup_ja1() {
    ai_output(other, self, "KDW_600_Saturas_TIMESUP_Info_15_01"); //Íó...
    ai_output(self, other, "KDW_600_Saturas_TIMESUP_Info_14_02"); //Íó?.. Íó - ÷òî?
};

func void kdw_600_saturas_timesup_ja2() {
    ai_output(other, self, "KDW_600_Saturas_TIMESUP_Info_15_05"); //Íåò...
    ai_output(self, other, "KDW_600_Saturas_TIMESUP_Info_14_06"); //Ïî÷åìó?
    ai_output(other, self, "KDW_600_Saturas_TIMESUP_Info_15_07"); //ß åùå íå äîáðàëñÿ äî áàøíè...
    ai_output(self, other, "KDW_600_Saturas_TIMESUP_Info_14_08"); //Òû äîëæåí íàéòè åãî è ñïðîñèòü ó íåãî ñîâåòà!
    b_story_cancelfindxardas();
    ai_stopprocessinfos(self);
};

func void kdw_600_saturas_timesup_ja3() {
    ai_output(other, self, "KDW_600_Saturas_TIMESUP_Info_15_09"); //Âñå íå òàê, êàê òû äóìàåøü...
    ai_output(self, other, "KDW_600_Saturas_TIMESUP_Info_14_10"); //Î ÷åì ýòî òû? Îí äîëæåí çíàòü, êàê âçîðâàòü æåëåçíóþ ãîðó!
    ai_output(other, self, "KDW_600_Saturas_TIMESUP_Info_15_11"); //Æåëåçíàÿ ãîðà... îõ... óõ-ì... Îíà óæå î÷åíü âûñîêàÿ!
    ai_output(self, other, "KDW_600_Saturas_TIMESUP_Info_14_12"); //Íàéäè Êñàðäàñà, íàì íóæíà åãî ïîìîùü!
    b_story_cancelfindxardas();
    ai_stopprocessinfos(self);
};

instance kdw_600_saturas_hogeaufnahme(c_info) {
    npc = kdw_600_saturas /*7557*/;
    nr = 10;
    condition = kdw_600_saturas_hogeaufnahme_condition;
    information = kdw_600_saturas_hogeaufnahme_info;
    description = "Íåôàðèóñ ñêàçàë, ÷òî ÿ ãîòîâ íîñèòü îáëà÷åíèå Ìàãà Âîäû.";
};

func int kdw_600_saturas_hogeaufnahme_condition() {
    if (npc_knowsinfo(hero, info_saturas_murder /*10137*/) && (npc_gettrueguild(hero) == gil_sld)) {
        return 1;
    };
};

func void kdw_600_saturas_hogeaufnahme_info() {
    ai_output(other, self, "KDW_600_Saturas_HogeAUFNAHME_15_00"); //Íåôàðèóñ ñêàçàë, ÷òî ÿ ãîòîâ íîñèòü îáëà÷åíèå Ìàãà Âîäû.
    ai_output(self, other, "KDW_600_Saturas_NOMOREOC_Info_14_03"); //Òîãäà äîáðî ïîæàëîâàòü ê íàì!
    ai_output(other, self, "KDW_600_Saturas_OATH_Info_15_01"); //Îçíà÷àåò ëè ýòî, ÷òî òåïåðü ÿ ïðèíàäëåæó ê ãèëüäèè ìàãîâ Âîäû?
    ai_output(self, other, "KDW_600_Saturas_OATH_Info_14_02"); //Ïîêà åùå íåò. Ïðåæäå òû äîëæåí ïðèíåñòè êëÿòâó Âîäå.
};

instance kdw_600_saturas_hogeaufnahmeteil2(c_info) {
    npc = kdw_600_saturas /*7557*/;
    nr = 10;
    condition = kdw_600_saturas_hogeaufnahmeteil2_condition;
    information = kdw_600_saturas_hogeaufnahmeteil2_info;
    description = "ß ãîòîâ ïðèíåñòè êëÿòâó.";
};

func int kdw_600_saturas_hogeaufnahmeteil2_condition() {
    if (npc_knowsinfo(hero, kdw_600_saturas_hogeaufnahme /*10203*/) && (npc_gettrueguild(hero) == gil_sld)) {
        return 1;
    };
};

func void kdw_600_saturas_hogeaufnahmeteil2_info() {
    ai_gotonpc(hero, self);
    ai_output(other, self, "KDW_600_Saturas_KDWAUFNAHME_Info_15_01"); //ß ãîòîâ ïðèíåñòè êëÿòâó.
    ai_output(self, other, "KDW_600_Saturas_KDWAUFNAHME_Info_14_03"); //Ïîâòîðÿé çà ìíîé ñëîâà êëÿòâû:
    ai_output(self, other, "KDW_600_Saturas_KDWAUFNAHME_Info_14_04"); //Ìîùüþ áîãîâ ÿ êëÿíóñü...
    ai_output(other, self, "KDW_600_Saturas_KDWAUFNAHME_Info_15_05"); //Ìîùüþ áîãîâ ÿ êëÿíóñü...
    ai_output(self, other, "KDW_600_Saturas_KDWAUFNAHME_Info_14_06"); //... è ñèëîé ñâÿùåííîé Âîäû...
    ai_output(other, self, "KDW_600_Saturas_KDWAUFNAHME_Info_15_07"); //... è ñèëîé ñâÿùåííîé Âîäû...
    ai_output(self, other, "KDW_600_Saturas_KDWAUFNAHME_Info_14_08"); //... ÷òî çíàíèÿ ìîè è ïîñòóïêè ìîè ñ ýòîãî äíÿ è âîâåêè âåêîâ áóäóò åäèíû ñ Âîäîé...
    ai_output(other, self, "KDW_600_Saturas_KDWAUFNAHME_Info_15_09"); //... ÷òî çíàíèÿ ìîè è ïîñòóïêè ìîè ñ ýòîãî äíÿ è âîâåêè âåêîâ áóäóò åäèíû ñ Âîäîé...
    ai_output(self, other, "KDW_600_Saturas_KDWAUFNAHME_Info_14_10"); //... äî òåõ ïîð, ïîêà òåëî ìîå íå âåðíåòñÿ â ÷åðòîãè Áåëüäæàðà è íå èññÿêíåò èñòî÷íèê ìîåé æèçíè.
    ai_output(other, self, "KDW_600_Saturas_KDWAUFNAHME_Info_15_11"); //... äî òåõ ïîð ïîêà òåëî ìîå íå âåðíåòñÿ â ÷åðòîãè Áåëüäæàðà è íå èññÿêíåò èñòî÷íèê ìîåé æèçíè.
    ai_output(self, other, "KDW_600_Saturas_KDWAUFNAHME_Info_14_14"); //Íîñè ýòî îáëà÷åíèå â çíàê ñâÿçè ñî ñâÿùåííîé Âîäîé è Àäàíîñîì.
    createinvitem(self, kdw_armor_l);
    b_giveinvitems(self, other, kdw_armor_l /*4148*/, 1);
    ai_equipbestarmor(hero);
    snd_play("MFX_Heal_Cast");
    npc_settrueguild(hero, gil_kdw);
    hero.guild = gil_kdw;
    log_createtopic(ch4_sldtokdw, log_note);
    b_logentry(ch4_sldtokdw, ch4_sldtokdw_1);
    ai_stopprocessinfos(self);
};

instance info_myxir_exit(c_info) {
    npc = kdw_601_myxir /*7559*/;
    nr = 999;
    condition = info_myxir_exit_condition;
    information = info_myxir_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_myxir_exit_condition() {
    return true;
};

func void info_myxir_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_merdarion_exit(c_info) {
    npc = kdw_602_merdarion /*7561*/;
    nr = 999;
    condition = info_merdarion_exit_condition;
    information = info_merdarion_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_merdarion_exit_condition() {
    return true;
};

func void info_merdarion_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_nefarius_exit(c_info) {
    npc = kdw_603_nefarius /*7564*/;
    nr = 999;
    condition = info_nefarius_exit_condition;
    information = info_nefarius_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_nefarius_exit_condition() {
    return 1;
};

func void info_nefarius_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_nefarius_hallo(c_info) {
    npc = kdw_603_nefarius /*7564*/;
    nr = 1;
    condition = info_nefarius_hallo_condition;
    information = info_nefarius_hallo_info;
    description = "Êàê òåáÿ çîâóò?";
};

func int info_nefarius_hallo_condition() {
    return 1;
};

func void info_nefarius_hallo_info() {
    ai_output(other, self, "Info_Nefarius_Hallo_15_00"); //Êòî òû?
    ai_output(self, other, "Info_Nefarius_Hallo_04_01"); //ß Íåôàðèóñ, ìàã Êðóãà Âîäû.
};

instance info_nefarius_wosaturas(c_info) {
    npc = kdw_603_nefarius /*7564*/;
    nr = 2;
    condition = info_nefarius_wosaturas_condition;
    information = info_nefarius_wosaturas_info;
    description = "Ãäå ìíå íàéòè Ñàòóðàñà?";
};

func int info_nefarius_wosaturas_condition() {
    return 1;
};

func void info_nefarius_wosaturas_info() {
    ai_output(other, self, "Info_Nefarius_WoSaturas_15_00"); //Ãäå ìíå íàéòè Ñàòóðàñà?
    ai_output(self, other, "Info_Nefarius_WoSaturas_04_01"); //Èäè â áîëüøèå êðóãëûå âîðîòà. Òàì òû è íàéäåøü åãî.
};

instance info_nefarius_wannamage(c_info) {
    npc = kdw_603_nefarius /*7564*/;
    nr = 1;
    condition = info_nefarius_wannamage_condition;
    information = info_nefarius_wannamage_info;
    description = "ß õî÷ó ñòàòü ìàãîì Êðóãà Âîäû!";
};

func int info_nefarius_wannamage_condition() {
    if (npc_knowsinfo(hero, info_nefarius_hallo /*10218*/)) {
        return 1;
    };
};

func void info_nefarius_wannamage_info() {
    ai_output(other, self, "Info_Nefarius_WannaMage_15_00"); //ß õî÷ó ñòàòü ìàãîì Êðóãà Âîäû!
    ai_output(self, other, "Info_Nefarius_WannaMage_04_01"); //(ñî ñìåõîì) Íå òàê áûñòðî, ìîé ìàëü÷èê!
    ai_output(self, other, "Info_Nefarius_WannaMage_04_02"); //Ïðåæäå ÷åì ìû ïîçâîëèì íîâè÷êó ïðèñîåäèíèòüñÿ ê íàì, îí äîëæåí ïðîÿâèòü ñåáÿ â êàêîì-íèáóäü âåëèêîì äåÿíèè.
    ai_output(self, other, "Info_Nefarius_WannaMage_04_03"); //È îí äîëæåí ñëóæèòü íàì êàêîå-òî âðåìÿ.
    ai_output(self, other, "Info_Nefarius_WannaMage_04_04"); //Åñëè òû ñåðüåçåí â ñâîèõ íàìåðåíèÿõ, òû äîëæåí ñòàòü îäíèì èç íàøèõ íàåìíèêîâ. Òàê òû ñìîæåøü ñëóæèòü íàì.
    ai_output(self, other, "Info_Nefarius_WannaMage_04_05"); //È ìîæåò áûòü îäíàæäû òåáå ïðåäñòàâèòñÿ øàíñ ñäåëàòü ÷òî-òî áîëüøîå.
};

instance info_nefarius_nowready(c_info) {
    npc = kdw_603_nefarius /*7564*/;
    nr = 1;
    condition = info_nefarius_nowready_condition;
    information = info_nefarius_nowready_info;
    permanent = true;
    description = "ß ãîòîâ ïðèñîåäèíèòüñÿ ê Êðóãó Âîäû?";
};

func int info_nefarius_nowready_condition() {
    if (((!fmtaken) && npc_knowsinfo(hero, info_nefarius_wannamage /*10224*/)) && (npc_gettrueguild(hero) != gil_kdw)) {
        return 1;
    };
};

func void info_nefarius_nowready_info() {
    ai_output(other, self, "Info_Nefarius_NowReady_15_00"); //ß ãîòîâ ïðèñîåäèíèòüñÿ ê Êðóãó Âîäû?
    if (npc_gettrueguild(hero) != gil_sld) {
        ai_output(self, other, "Info_Nefarius_NowReady_04_01"); //Ñòàíü îäíèì èç íàøèõ íàåìíèêîâ, à òàì ïîñìîòðèì...
    }
    else {
        ai_output(self, other, "Info_Nefarius_NowReady_04_02"); //Âèæó, òû ñòàë îäíèì èç íàøèõ íàåìíèêîâ. Î÷åíü õîðîøî, î÷åíü õîðîøî...
        ai_output(self, other, "Info_Nefarius_NowReady_04_03"); //Òåïåðü äåëî çà âðåìåíåì...
    };
};

instance info_nefarius_ocnews(c_info) {
    npc = kdw_603_nefarius /*7564*/;
    nr = 1;
    condition = info_nefarius_ocnews_condition;
    information = info_nefarius_ocnews_info;
    important = true;
};

func int info_nefarius_ocnews_condition() {
    if (fmtaken && (!findxardas)) {
        return true;
    };
};

func void info_nefarius_ocnews_info() {
    ai_output(self, other, "Info_Nefarius_OCNews_04_00"); //Åñòü êàêèå-íèáóäü íîâîñòè îò íàøèõ äðóçåé èç Ñòàðîãî Ëàãåðÿ?
    ai_output(other, self, "Info_Nefarius_OCNews_15_01"); //Ãîìåç ðàñïðàâèëñÿ ñ ìàãàìè Îãíÿ!
    ai_output(self, other, "Info_Nefarius_OCNews_04_02"); //Íåò! Êðåòèí! ß ïðåäóïðåæäàë Êîððèñòî - åìó íåëüçÿ äîâåðÿòü! Òû äîëæåí ðàññêàçàòü îá ýòîì Ñàòóðàñó!
    if (npc_gettrueguild(hero) == gil_sld) {
        ai_output(self, other, "Info_Nefarius_OCNews_04_03"); //Ïîäîæäè!
        ai_output(self, other, "Info_Nefarius_OCNews_04_04"); //Ðàäè íàñ òû ïåðåæèë ìíîãî îïàñíîñòåé è âñòðåòèë èõ äîñòîéíî.
        ai_output(self, other, "Info_Nefarius_OCNews_04_05"); //Äóìàþ, ÷òî òåïåðü òû ãîòîâ íîñèòü îäåÿíèå ìàãîâ Âîäû.
        ai_output(self, other, "Info_Nefarius_OCNews_04_06"); //Íî ñåé÷àñ òû äîëæåí ïîãîâîðèòü ñ Ñàòóðàñîì! Òîðîïèñü!
    };
    ai_stopprocessinfos(self);
};

instance kdw_604_cronos_exit(c_info) {
    npc = kdw_604_cronos /*7566*/;
    nr = 999;
    condition = kdw_604_cronos_exit_condition;
    information = kdw_604_cronos_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int kdw_604_cronos_exit_condition() {
    return 1;
};

func void kdw_604_cronos_exit_info() {
    ai_stopprocessinfos(self);
    if (!npc_hasitems(self, itarruneicecube)) {
        createinvitem(self, itarruneicecube);
    };
    if (!npc_hasitems(self, itarrunethunderbolt)) {
        createinvitem(self, itarrunethunderbolt);
    };
};

instance kdw_604_cronos_brief(c_info) {
    npc = kdw_604_cronos /*7566*/;
    nr = 1;
    condition = kdw_604_cronos_brief_condition;
    information = kdw_604_cronos_brief_info;
    description = "Ó ìåíÿ åñòü ïèñüìî Âåðõîâíîìó Ìàãó Êðóãà Îãíÿ.";
};

func int kdw_604_cronos_brief_condition() {
    if (((npc_knowsinfo(hero, kdw_604_cronos_greet /*10284*/) && (npc_gettrueguild(hero) != gil_stt)) && (npc_gettrueguild(hero) != gil_kdf)) && (hero.level < 10)) {
        return 1;
    };
};

func void kdw_604_cronos_brief_info() {
    ai_output(other, self, "DIA_Cronos_Brief_15_00"); //Ó ìåíÿ ïèñüìî ê Âåðõîâíîìó Ìàãó Êðóãà Îãíÿ.
    ai_output(self, other, "DIA_Cronos_Brief_08_01"); //Âñå ìû çäåñü - ìàãè Êðóãà Âîäû. Ìàãè Êðóãà Îãíÿ æèâóò â Ñòàðîì Ëàãåðå.
    ai_output(other, self, "DIA_Cronos_Brief_15_02"); //Íî ÿ íå ìîãó ïîïàñòü â çàìîê. Òû ìîæåøü ïîìî÷ü ìíå?
    ai_output(self, other, "DIA_Cronos_Brief_08_03"); //Íó, âðåìÿ îò âðåìåíè ìû ïîñûëàåì ãîíöîâ ê íàøèì áðàòüÿì â Ñòàðîì Ëàãåðå...
    ai_output(self, other, "DIA_Cronos_Brief_08_04"); //Íî ñâîè ïîñëàíèÿ ìû äîâåðÿåì òîëüêî ëþäÿì Ëàðñà. Âîò óæå ìíîãî ëåò îí ñëåäèò çà òåì, ÷òîáû íàøè ãîíöû äîáèðàëèñü äî ïóíêòà íàçíà÷åíèÿ.
};

instance kdw_604_cronos_barrier(c_info) {
    npc = kdw_604_cronos /*7566*/;
    nr = 2;
    condition = kdw_604_cronos_barrier_condition;
    information = kdw_604_cronos_barrier_info;
    description = "Âû õîòèòå óíè÷òîæèòü Áàðüåð - íî êàê âû ñîáèðàåòåñü ýòî ñäåëàòü?";
};

func int kdw_604_cronos_barrier_condition() {
    if (npc_knowsinfo(hero, kdw_604_cronos_greet /*10284*/)) {
        return 1;
    };
};

func void kdw_604_cronos_barrier_info() {
    ai_output(other, self, "DIA_Cronos_Barrier_15_00"); //Âû õîòèòå óíè÷òîæèòü Áàðüåð - íî êàê èìåííî âû ñîáèðàåòåñü ýòî ñäåëàòü?
    ai_output(self, other, "DIA_Cronos_Barrier_08_01"); //Íàì ïîòðåáóþòñÿ áîëüøèå çàïàñû ìàãè÷åñêîé ðóäû.
    ai_output(self, other, "DIA_Cronos_Barrier_08_02"); //Îñâîáîäèâ åå ñèëó âî âðåìÿ îñîáîé öåðåìîíèè, ìû óíè÷òîæèì Áàðüåð.
    ai_output(self, other, "DIA_Cronos_Barrier_08_03"); //Êîíå÷íî, çàïàñû ðóäû ïðèâëåêàþò ìíîæåñòâî âîðîâ è ìîøåííèêîâ!
    ai_output(self, other, "DIA_Cronos_Barrier_08_04"); //Èìåííî ïîýòîìó íàì íóæíû ëþäè, ãîòîâûå çàùèùàòü íàø ïëàí.
};

instance kdw_604_cronos_wannajoin(c_info) {
    npc = kdw_604_cronos /*7566*/;
    nr = 3;
    condition = kdw_604_cronos_wannajoin_condition;
    information = kdw_604_cronos_wannajoin_info;
    description = "ß õî÷ó ïðèñîåäèíèòüñÿ ê âàì!";
};

func int kdw_604_cronos_wannajoin_condition() {
    if (npc_knowsinfo(hero, kdw_604_cronos_greet /*10284*/)) {
        return 1;
    };
};

func void kdw_604_cronos_wannajoin_info() {
    ai_output(other, self, "DIA_Cronos_WannaJoin_15_00"); //ß õî÷ó ïðèñîåäèíèòüñÿ ê âàì!
    ai_output(self, other, "DIA_Cronos_WannaJoin_08_01"); //Åñëè òû õî÷åøü ñòàòü îäíèì èç íàñ, òû äîëæåí ïîãîâîðèòü ñ Ëè èëè ñ Ëàðñîì.
};

instance kdw_604_cronos_wannamage(c_info) {
    npc = kdw_604_cronos /*7566*/;
    nr = 3;
    condition = kdw_604_cronos_wannamage_condition;
    information = kdw_604_cronos_wannamage_info;
    description = "ß õî÷ó ñòàòü ìàãîì!";
};

func int kdw_604_cronos_wannamage_condition() {
    if (npc_knowsinfo(hero, kdw_604_cronos_wannajoin /*10242*/)) {
        return 1;
    };
};

func void kdw_604_cronos_wannamage_info() {
    ai_output(other, self, "DIA_Cronos_WannaMage_15_00"); //ß õî÷ó ñòàòü ìàãîì!
    ai_output(self, other, "DIA_Cronos_WannaMage_08_01"); //Ìû íå ìîæåì ðàñïðîñòðàíÿòü íàøè çíàíèÿ ñðåäè ñâîèõ âðàãîâ.
    ai_output(self, other, "DIA_Cronos_WannaMage_08_02"); //Î òâîåì îáó÷åíèè íå ìîæåò áûòü è ðå÷è äî òåõ ïîð, ïîêà òû íå äîêàæåøü íàì ñâîþ ïðåäàííîñòü.
};

instance kdw_604_cronos_bandit(c_info) {
    npc = kdw_604_cronos /*7566*/;
    nr = 4;
    condition = kdw_604_cronos_bandit_condition;
    information = kdw_604_cronos_bandit_info;
    description = "Òåïåðü ÿ îäèí èç ëþäåé Ëàðñà. Ãäå ïîñëàíèå äëÿ ìàãîâ Îãíÿ?";
};

func int kdw_604_cronos_bandit_condition() {
    if (((npc_gettrueguild(hero) == gil_org) || (npc_gettrueguild(hero) == gil_sld)) && (corangar_sendtonc == false)) {
        return 1;
    };
};

func void kdw_604_cronos_bandit_info() {
    ai_output(other, self, "DIA_Cronos_Bandit_15_00"); //Òåïåðü ÿ îäèí èç ëþäåé Ëàðñà. Ó òåáÿ åñòü ïîñëàíèå, êîòîðîå òû õîòåë áû îòïðàâèòü ñî ìíîé ìàãàì Îãíÿ?
    ai_output(self, other, "DIA_Cronos_Bandit_08_01"); //Íåñîìíåííî, åñòü. Íî ó òåáÿ äîëæåí áûòü çíàê ãîíöà, èíà÷å ëþäè Ãîìåçà íå ïðîïóñòÿò òåáÿ â çàìîê.
    ai_output(self, other, "DIA_Cronos_Bandit_08_02"); //Âîò, âîçüìè ïèñüìî è ýòîò çíàê. È ïîñïåøè!
    createinvitem(other, kdw_amulett);
    createinvitem(other, cronos_brief);
    cronos_messenger = log_running;
};

instance kdw_604_cronos_briefback(c_info) {
    npc = kdw_604_cronos /*7566*/;
    nr = 3;
    condition = kdw_604_cronos_briefback_condition;
    information = kdw_604_cronos_briefback_info;
    description = "ß ïåðåäàë âàøå ïîñëàíèå!";
};

func int kdw_604_cronos_briefback_condition() {
    if (cronos_messenger == log_success) {
        return 1;
    };
};

func void kdw_604_cronos_briefback_info() {
    ai_output(other, self, "DIA_Cronos_BriefBack_15_00"); //ß ïåðåäàë âàøå ïîñëàíèå!
    ai_output(self, other, "DIA_Cronos_BriefBack_08_01"); //À, õîðîøî! Âîò òåáå íåáîëüøàÿ íàãðàäà çà òðóäû...
    createinvitems(self, itminugget, 200);
    b_giveinvitems(self, other, itminugget /*4517*/, 200);
    b_givexp(xp_cronosletter);
};

instance info_cronos_news(c_info) {
    npc = kdw_604_cronos /*7566*/;
    nr = 0;
    condition = info_cronos_news_condition;
    information = info_cronos_news_info;
    description = "Ó ìåíÿ âàæíîå ïîñëàíèå äëÿ Ñàòóðàñà!";
};

func int info_cronos_news_condition() {
    if ((corangar_sendtonc == true) && (!npc_knowsinfo(hero, info_cronos_sleeper /*10263*/))) {
        return true;
    };
};

func void info_cronos_news_info() {
    ai_output(other, self, "Info_Cronos_NEWS_15_01"); //Ó ìåíÿ âàæíîå ïîñëàíèå äëÿ Ñàòóðàñà!
    ai_output(self, other, "Info_Cronos_NEWS_08_02"); //×òî òàêîãî âàæíîãî â ýòîì ïîñëàíèè, ÷òîáû íàø äóõîâíûé ëèäåð îòðûâàëñÿ ðàäè íåãî îò ñâîèõ èññëåäîâàíèé?
};

instance info_cronos_kalom(c_info) {
    npc = kdw_604_cronos /*7566*/;
    nr = 10;
    condition = info_cronos_kalom_condition;
    information = info_cronos_kalom_info;
    description = "Êîð Ãàëîì ïîêèíóë Áðàòñòâî!";
};

func int info_cronos_kalom_condition() {
    if (npc_knowsinfo(hero, info_cronos_news /*10254*/) && (!npc_knowsinfo(hero, info_cronos_sleeper /*10263*/))) {
        return true;
    };
};

func void info_cronos_kalom_info() {
    ai_output(other, self, "Info_Cronos_KALOM_15_01"); //Êîð Ãàëîì ïîêèíóë Áðàòñòâî âìåñòå ñ íåñêîëüêèìè ôàíàòèêàìè-Ñòðàæàìè!
    ai_output(other, self, "Info_Cronos_KALOM_15_02"); //Îí õî÷åò ñàì íàéòè Ñïÿùåãî è ïðîáóäèòü åãî âî ÷òî áû òî íè ñòàëî.
    ai_output(self, other, "Info_Cronos_KALOM_08_03"); //ß íèêîãäà íå äîâåðÿë åìó. Âòîðîé Ãóðó èëè íåò, îí âñåãäà áûë êîâàðíûì, òùåñëàâíûì è ñïîñîáíûì íà âñå.
    ai_output(self, other, "Info_Cronos_KALOM_08_04"); //Áðàòñòâî ïðåêðàñíî îáîéäåòñÿ è áåç íåãî!
    ai_output(self, other, "Info_Cronos_KALOM_08_05"); //Êàê òîëüêî ïîÿâèòñÿ âîçìîæíîñòü, ÿ ðàññêàæó îá ýòîì Ñàòóðàñó. Òåïåðü èäè!
    ai_stopprocessinfos(self);
};

instance info_cronos_yberion(c_info) {
    npc = kdw_604_cronos /*7566*/;
    nr = 20;
    condition = info_cronos_yberion_condition;
    information = info_cronos_yberion_info;
    description = "Þ`Áåðèîí, ãëàâà Ëàãåðÿ Ñåêòàíòîâ, ìåðòâ!";
};

func int info_cronos_yberion_condition() {
    if (npc_knowsinfo(hero, info_cronos_news /*10254*/) && (!npc_knowsinfo(hero, info_cronos_sleeper /*10263*/))) {
        return true;
    };
};

func void info_cronos_yberion_info() {
    ai_output(other, self, "Info_Cronos_YBERION_15_01"); //Þ`Áåðèîí, ãëàâà Ëàãåðÿ Ñåêòàíòîâ, ìåðòâ!
    ai_output(self, other, "Info_Cronos_YBERION_08_02"); //×ÒÎ??? Êàê ýòî ìîãëî ñëó÷èòüñÿ?
    ai_output(other, self, "Info_Cronos_YBERION_15_03"); //Áðàòñòâî ïðîâîäèëî ìàãè÷åñêèé ðèòóàë, ïðèçûâàÿ ñâîåãî áîãà.
    ai_output(other, self, "Info_Cronos_YBERION_15_04"); //Ïîõîæå, óìñòâåííîå íàïðÿæåíèå îêàçàëîñü ñëèøêîì ñèëüíûì äëÿ Þ`Áåðèîíà.
    ai_output(self, other, "Info_Cronos_YBERION_08_05"); //Êàê æàëü. Þ`Áåðèîí áûë âåðíûì ñîþçíèêîì.
    ai_output(self, other, "Info_Cronos_YBERION_08_06"); //Íî ÿ íå âèæó ïðè÷èíû ïðåðûâàòü çàíÿòèÿ Ñàòóðàñà.
    ai_stopprocessinfos(self);
};

instance info_cronos_sleeper(c_info) {
    npc = kdw_604_cronos /*7566*/;
    nr = 30;
    condition = info_cronos_sleeper_condition;
    information = info_cronos_sleeper_info;
    description = "Ãóðó âûÿñíèëè, ÷òî âñå ýòî âðåìÿ îíè ìîëèëèñü çëîìó äåìîíó!";
};

func int info_cronos_sleeper_condition() {
    if (npc_knowsinfo(hero, info_cronos_news /*10254*/)) {
        return true;
    };
};

func void info_cronos_sleeper_info() {
    ai_output(other, self, "Info_Cronos_SLEEPER_15_01"); //Ãóðó âûÿñíèëè, ÷òî âñå ýòî âðåìÿ îíè ìîëèëèñü çëîìó äåìîíó!
    ai_output(self, other, "Info_Cronos_SLEEPER_08_02"); //Çíà÷èò, òåïåðü îíè ñ÷èòàþò ñâîåãî Ñïÿùåãî äåìîíîì?
    ai_output(self, other, "Info_Cronos_SLEEPER_08_03"); //Ïîõîæå íà î÷åðåäíóþ áåçóìíóþ èäåþ Áðàòñòâà, íî...
    ai_output(self, other, "Info_Cronos_SLEEPER_08_04"); //... åñëè îíè äåéñòâèòåëüíî ïðàâû... âñÿ êîëîíèÿ ìîæåò áûòü â îãðîìíîé îïàñíîñòè.
    ai_output(self, other, "Info_Cronos_SLEEPER_08_05"); //Òû äîëæåí íåìåäëåííî äîëîæèòü îá ýòîì Ñàòóðàñó. Îí ðåøèò, ÷òî äåëàòü.
    ai_output(other, self, "Info_Cronos_SLEEPER_15_06"); //Ãäå ìíå íàéòè Ñàòóðàñà?
    ai_output(self, other, "Info_Cronos_SLEEPER_08_07"); //Ïîäíèìèñü íà âåðõíèé óðîâåíü. Ñêàæè ñòðàæíèêàì, ÷òî ÿ ïîçâîëèë òåáå ïðîéòè.
    ai_output(self, other, "Info_Cronos_SLEEPER_08_08"); //Ïàðîëü - ÒÅÒÐÈÀÍÄÎÕ.
    ai_output(self, other, "Info_Cronos_SLEEPER_08_09"); //Òû íàéäåøü Ñàòóðàñà ó ïåíòàãðàììû.
    ai_output(self, other, "Info_Cronos_SLEEPER_08_10"); //Òàì îí ïðîâîäèò âñå äíè, ïûòàÿñü ïîíÿòü, êàê ìîæíî âçîðâàòü íàøó æåëåçíóþ ãîðó.
    b_logentry(ch3_escapeplannc, ch3_escapeplannc_4);
    b_givexp(xp_getcronospermission);
    ai_stopprocessinfos(self);
};

instance info_cronos_parole(c_info) {
    npc = kdw_604_cronos /*7566*/;
    nr = 30;
    condition = info_cronos_parole_condition;
    information = info_cronos_parole_info;
    description = "Íàçîâè ìíå åùå ðàç ïàðîëü.";
};

func int info_cronos_parole_condition() {
    if (npc_knowsinfo(hero, info_cronos_sleeper /*10263*/) && (!npc_knowsinfo(hero, info_saturas_news /*10090*/))) {
        return true;
    };
};

func void info_cronos_parole_info() {
    ai_output(other, self, "Info_Cronos_PAROLE_15_01"); //Íàçîâè ìíå åùå ðàç ïàðîëü.
    ai_output(self, other, "Info_Cronos_PAROLE_08_02"); //Ïàìÿòü ó òåáÿ, êàê ó ìîåé áàáóøêè. Ïàðîëü - ÒÅÒÐÈÀÍÄÎÕ.
};

instance info_cronos_reward(c_info) {
    npc = kdw_604_cronos /*7566*/;
    nr = 30;
    condition = info_cronos_reward_condition;
    information = info_cronos_reward_info;
    description = "Ñàòóðàñ ñêàçàë, ÷òî òû ïðèãîòîâèë äëÿ ìåíÿ íàãðàäó.";
};

func int info_cronos_reward_condition() {
    if (saturas_bringfoci == 5) {
        return true;
    };
};

func void info_cronos_reward_info() {
    ai_output(other, self, "Info_Cronos_REWARD_15_01"); //Ñàòóðàñ ñêàçàë, ÷òî òû ïðèãîòîâèë äëÿ ìåíÿ íàãðàäó.
    ai_output(self, other, "Info_Cronos_REWARD_08_02"); //Êàê õðàíèòåëü ðóäû ÿ õî÷ó ïîäåëèòüñÿ ñ òîáîé åå ìàëîé òîëèêîé â çíàê ïðèçíàòåëüíîñòè çà òå âåëèêèå äåëà, êîòîðûå òû ñîâåðøèë äëÿ íàøåãî Ëàãåðÿ.
    ai_output(self, other, "Info_Cronos_REWARD_08_03"); //Íàäåþñü, òåáå îíà ïîñëóæèò íå õóæå, ÷åì íàì!
    b_logentry(ch3_bringfoci, ch3_bringfoci_5);
    if (npc_knowsinfo(hero, info_riordian_reward /*10293*/)) {
        log_settopicstatus(ch3_bringfoci, log_success);
    };
    createinvitems(self, itminugget, 1000);
    b_giveinvitems(self, hero, itminugget /*4517*/, 1000);
};

instance kdw_604_cronos_welcome(c_info) {
    npc = kdw_604_cronos /*7566*/;
    condition = kdw_604_cronos_welcome_condition;
    information = kdw_604_cronos_welcome_info;
    important = true;
};

func int kdw_604_cronos_welcome_condition() {
    if (npc_gettrueguild(hero) == gil_kdw) {
        return true;
    };
};

func void kdw_604_cronos_welcome_info() {
    ai_output(self, other, "KDW_604_Cronos_WELCOME_Info_08_01"); //Òû ïðèíÿë ïðàâèëüíîå ðåøåíèå - ïðèñîåäèíèòüñÿ ê ìàãàì Âîäû. Äîáðî ïîæàëîâàòü, áðàò!
    ai_stopprocessinfos(self);
};

instance kdw_604_cronos_mana(c_info) {
    npc = kdw_604_cronos /*7566*/;
    nr = 800;
    condition = kdw_604_cronos_mana_condition;
    information = kdw_604_cronos_mana_info;
    permanent = true;
    description = "ß õî÷ó óâåëè÷èòü ñèëó ñâîåé ìàãèè.";
};

func int kdw_604_cronos_mana_condition() {
    if (npc_knowsinfo(hero, kdw_604_cronos_greet /*10284*/) && ((corangar_sendtonc == false) || npc_knowsinfo(hero, info_cronos_sleeper /*10263*/))) {
        return true;
    };
};

func void kdw_604_cronos_mana_info() {
    ai_output(other, self, "KDW_604_Cronos_MANA_Info_15_01"); //ß õî÷ó óâåëè÷èòü ñèëó ñâîåé ìàãèè.
    ai_output(self, other, "KDW_604_Cronos_MANA_Info_08_02"); //ß ìîãó ïîìî÷ü òåáå óâåëè÷èòü ñèëó. Èñïîëüçóé åå ñ óìîì.
    info_clearchoices(kdw_604_cronos_mana /*10275*/);
    info_addchoice(kdw_604_cronos_mana /*10275*/, dialog_back, kdw_604_cronos_mana_back);
    info_addchoice(kdw_604_cronos_mana /*10275*/, b_buildlearnstring(name_learnmana_5, 5 * lpcost_attribute_mana, 0), kdw_604_cronos_mana_man_5);
    info_addchoice(kdw_604_cronos_mana /*10275*/, b_buildlearnstring(name_learnmana_1, lpcost_attribute_mana, 0), kdw_604_cronos_mana_man_1);
};

func void kdw_604_cronos_mana_back() {
    info_clearchoices(kdw_604_cronos_mana /*10275*/);
};

func void kdw_604_cronos_mana_man_1() {
    b_buyattributepoints(other, atr_mana_max, lpcost_attribute_mana);
    info_clearchoices(kdw_604_cronos_mana /*10275*/);
    info_addchoice(kdw_604_cronos_mana /*10275*/, dialog_back, kdw_604_cronos_mana_back);
    info_addchoice(kdw_604_cronos_mana /*10275*/, b_buildlearnstring(name_learnmana_5, 5 * lpcost_attribute_mana, 0), kdw_604_cronos_mana_man_5);
    info_addchoice(kdw_604_cronos_mana /*10275*/, b_buildlearnstring(name_learnmana_1, lpcost_attribute_mana, 0), kdw_604_cronos_mana_man_1);
};

func void kdw_604_cronos_mana_man_5() {
    b_buyattributepoints(other, atr_mana_max, 5 * lpcost_attribute_mana);
    info_clearchoices(kdw_604_cronos_mana /*10275*/);
    info_addchoice(kdw_604_cronos_mana /*10275*/, dialog_back, kdw_604_cronos_mana_back);
    info_addchoice(kdw_604_cronos_mana /*10275*/, b_buildlearnstring(name_learnmana_5, 5 * lpcost_attribute_mana, 0), kdw_604_cronos_mana_man_5);
    info_addchoice(kdw_604_cronos_mana /*10275*/, b_buildlearnstring(name_learnmana_1, lpcost_attribute_mana, 0), kdw_604_cronos_mana_man_1);
};

instance kdw_604_cronos_sellstuff(c_info) {
    npc = kdw_604_cronos /*7566*/;
    nr = 900;
    condition = kdw_604_cronos_sellstuff_condition;
    information = kdw_604_cronos_sellstuff_info;
    permanent = true;
    trade = true;
    description = dialog_trade;
};

func int kdw_604_cronos_sellstuff_condition() {
    if (npc_knowsinfo(hero, kdw_604_cronos_greet /*10284*/) && ((corangar_sendtonc == false) || npc_knowsinfo(hero, info_cronos_sleeper /*10263*/))) {
        return true;
    };
};

func void kdw_604_cronos_sellstuff_info() {
    ai_output(other, self, "KDW_604_Cronos_SELLSTUFF_Info_15_01"); //ß õî÷ó îâëàäåòü ìàãè÷åñêèìè ïèñüìåíàìè.
};

instance kdw_604_cronos_greet(c_info) {
    npc = kdw_604_cronos /*7566*/;
    nr = 0;
    condition = kdw_604_cronos_greet_condition;
    information = kdw_604_cronos_greet_info;
    description = "Ïðèâåòñòâóþ òåáÿ, Ìàã!";
};

func int kdw_604_cronos_greet_condition() {
    return true;
};

func void kdw_604_cronos_greet_info() {
    ai_output(other, self, "KDW_604_Cronos_GREET_Info_15_01"); //Ïðèâåòñòâóþ òåáÿ, Ìàã!
    ai_output(self, other, "KDW_604_Cronos_GREET_Info_08_02"); //Äà ïðåáóäåò ñ òîáîé áëàãîñëîâåíèå Àäàíîñà! ß ìîãó óâåëè÷èòü ñèëó òâîåé ìàãèè èëè äàòü òåáå íå÷òî ïîëåçíîå.
    ai_output(self, other, "KDW_604_Cronos_GREET_Info_08_03"); //×òî ÿ ìîãó äëÿ òåáÿ ñäåëàòü?
    log_createtopic(ge_tradernc, log_note);
    b_logentry(ge_tradernc, ge_tradernc_2);
    log_createtopic(ge_teachernc, log_note);
    b_logentry(ge_teachernc, ge_teachernc_cronos);
};

instance info_riordian_exit(c_info) {
    npc = kdw_605_riordian /*7568*/;
    nr = 999;
    condition = info_riordian_exit_condition;
    information = info_riordian_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_riordian_exit_condition() {
    return true;
};

func void info_riordian_exit_info() {
    ai_stopprocessinfos(self);
    if (!npc_hasitems(self, itarrunethunderball)) {
        createinvitem(self, itarrunethunderball);
    };
};

instance info_riordian_news(c_info) {
    npc = kdw_605_riordian /*7568*/;
    nr = 0;
    condition = info_riordian_news_condition;
    information = info_riordian_news_info;
    description = "Ìåíÿ ïðèñëàë Ñàòóðàñ. ";
};

func int info_riordian_news_condition() {
    if (npc_knowsinfo(hero, info_saturas_offer /*10105*/)) {
        return true;
    };
};

func void info_riordian_news_info() {
    ai_output(other, self, "Info_Riordian_NEWS_15_01"); //Ìåíÿ ïðèñëàë Ñàòóðàñ.
    ai_output(self, other, "Info_Riordian_NEWS_14_02"); //À-ààà, çàõîäè. Ìíå óæå äîëîæèëè.
    ai_output(self, other, "Info_Riordian_NEWS_14_03"); //Âîò, âîçüìè ýòè ýëèêñèðû. Çäåñü âñå, ÷òî òåáå ìîæåò ïîíàäîáèòüñÿ.
    ai_output(self, other, "Info_Riordian_NEWS_14_04"); //Òåïåðü èäè - è îòûùè ýòè êàìíè. Â íèõ íàøà ïîñëåäíÿÿ íàäåæäà.
    createinvitems(self, itfo_potion_health_01, 20);
    b_giveinvitems(self, hero, itfo_potion_health_01 /*4827*/, 20);
    npc_removeinvitems(hero, itfo_potion_health_01, 15);
    createinvitems(hero, itfo_potion_mana_01, 5);
    createinvitems(hero, itfo_potion_health_02, 2);
    createinvitems(hero, itfo_potion_mana_02, 2);
    createinvitems(hero, itfo_potion_health_03, 1);
    createinvitems(hero, itfo_potion_mana_03, 1);
    createinvitems(hero, itfo_potion_haste_02, 2);
    createinvitems(hero, itfo_potion_strength_01, 1);
    createinvitems(hero, itfo_potion_dex_01, 1);
};

instance info_riordian_reward(c_info) {
    npc = kdw_605_riordian /*7568*/;
    nr = 0;
    condition = info_riordian_reward_condition;
    information = info_riordian_reward_info;
    description = "Ñàòóðàñ ñêàçàë, ÷òî òû ïðèãîòîâèë äëÿ ìåíÿ íàãðàäó?";
};

func int info_riordian_reward_condition() {
    if (saturas_bringfoci == 5) {
        return true;
    };
};

func void info_riordian_reward_info() {
    ai_output(other, self, "Info_Riordian_REWARD_15_01"); //Ñàòóðàñ ñêàçàë, ÷òî òû ïðèãîòîâèë äëÿ ìåíÿ íàãðàäó?
    ai_output(self, other, "Info_Riordian_REWARD_14_02"); //À-ààà, çàõîäè, çàõîäè.
    ai_output(self, other, "Info_Riordian_REWARD_14_03"); //Íàø äóõîâíûé ëèäåð ðàññêàçàë ìíå î òâîèõ ãåðîè÷åñêèõ ïîäâèãàõ.
    ai_output(self, other, "Info_Riordian_REWARD_14_04"); //Âñå îáèòàòåëè Ëàãåðÿ - äà ÷òî òàì, âñå æèòåëè êîëîíèè - â ãëóáîêîì äîëãó ïåðåä òîáîé.
    ai_output(self, other, "Info_Riordian_REWARD_14_05"); //Ïðèìè æå îò íàñ ýòó ñêðîìíóþ íàãðàäó.
    createinvitems(self, itfo_potion_health_02, 20);
    b_giveinvitems(self, hero, itfo_potion_health_02 /*4829*/, 20);
    npc_removeinvitems(hero, itfo_potion_health_02, 15);
    createinvitems(hero, itfo_potion_mana_02, 5);
    createinvitems(hero, itfo_potion_health_03, 2);
    createinvitems(hero, itfo_potion_mana_03, 2);
    createinvitems(hero, itfo_potion_haste_02, 3);
    createinvitems(hero, itfo_potion_master_01, 1);
    createinvitems(hero, itfo_potion_health_perma_02, 1);
    createinvitems(hero, itfo_potion_mana_perma_02, 1);
    b_logentry(ch3_bringfoci, ch3_bringfoci_4);
    if (npc_knowsinfo(hero, info_cronos_reward /*10269*/)) {
        log_settopicstatus(ch3_bringfoci, log_success);
    };
};

instance info_riordian_message(c_info) {
    npc = kdw_605_riordian /*7568*/;
    condition = info_riordian_message_condition;
    information = info_riordian_message_info;
    important = true;
};

func int info_riordian_message_condition() {
    if (urshak_spokeofulumulu && (!enteredfreemine)) {
        return true;
    };
};

func void info_riordian_message_info() {
    ai_output(self, hero, "Info_Riordian_MESSAGE_14_01"); //Ðàä, ÷òî òû ïðèøåë! ß æäàë òåáÿ!
};

instance info_riordian_messagewhy(c_info) {
    npc = kdw_605_riordian /*7568*/;
    nr = 0;
    condition = info_riordian_messagewhy_condition;
    information = info_riordian_messagewhy_info;
    description = "Òû æäàë ìåíÿ? Çà÷åì?";
};

func int info_riordian_messagewhy_condition() {
    if (npc_knowsinfo(hero, info_riordian_message /*10296*/)) {
        return true;
    };
};

func void info_riordian_messagewhy_info() {
    ai_output(hero, self, "Info_Riordian_MESSAGEWHY_15_01"); //Òû æäàë ìåíÿ? Çà÷åì?
    ai_output(self, hero, "Info_Riordian_MESSAGEWHY_14_02"); //Ãîðí ïðîñèë îòïðàâèòü òåáÿ ê íåìó, êàê òîëüêî òû ïîÿâèøüñÿ.
    ai_output(hero, self, "Info_Riordian_MESSAGEWHY_15_03"); //×òî ñëó÷èëîñü?
    ai_output(self, hero, "Info_Riordian_MESSAGEWHY_14_04"); //Ó íåãî åñòü ïëàí, êàê îñâîáîäèòü çàõâà÷åííóþ øàõòó.
    ai_output(hero, self, "Info_Riordian_MESSAGEWHY_15_05"); //Îí ïî-ïðåæíåìó îõðàíÿåò âõîä â øàõòó?
    ai_output(self, hero, "Info_Riordian_MESSAGEWHY_14_06"); //Äà. Ïðîøó òåáÿ, îòïðàâëÿéñÿ ê íåìó êàê ìîæíî ñêîðåå.
};

instance kdw_605_riordian_welcome(c_info) {
    npc = kdw_605_riordian /*7568*/;
    condition = kdw_605_riordian_welcome_condition;
    information = kdw_605_riordian_welcome_info;
    important = true;
};

func int kdw_605_riordian_welcome_condition() {
    if (npc_gettrueguild(hero) == gil_kdw) {
        return true;
    };
};

func void kdw_605_riordian_welcome_info() {
    ai_output(self, other, "KDW_605_Riordian_WELCOME_Info_14_01"); //ß ðàä, ÷òî òû òåïåðü ñ íàìè.
};

instance kdw_605_riordian_heal(c_info) {
    npc = kdw_605_riordian /*7568*/;
    condition = kdw_605_riordian_heal_condition;
    information = kdw_605_riordian_heal_info;
    important = true;
};

func int kdw_605_riordian_heal_condition() {
    if ((npc_gettrueguild(hero) == gil_kdw) && npc_knowsinfo(hero, kdw_605_riordian_welcome /*10302*/)) {
        return true;
    };
};

func void kdw_605_riordian_heal_info() {
    ai_output(self, other, "KDW_605_Riordian_HEAL_Info_14_01"); //Åñëè òû ðàíåí, ÿ âûëå÷ó òåáÿ.
};

instance kdw_605_riordian_healinfo(c_info) {
    npc = kdw_605_riordian /*7568*/;
    nr = 100;
    condition = kdw_605_riordian_healinfo_condition;
    information = kdw_605_riordian_healinfo_info;
    permanent = true;
    description = "ß ðàíåí. Òû ìîæåøü ìíå ïîìî÷ü?";
};

func int kdw_605_riordian_healinfo_condition() {
    if ((hero.attribute[atr_hitpoints] /*0*/ < hero.attribute[atr_hitpoints_max] /*1*/) && (npc_gettrueguild(hero) == gil_kdw)) {
        return true;
    };
};

func void kdw_605_riordian_healinfo_info() {
    ai_output(other, self, "KDW_605_Riordian_HEALINFO_Info_15_01"); //ß ðàíåí. Òû ìîæåøü ìíå ïîìî÷ü?
    ai_output(self, other, "KDW_605_Riordian_HEALINFO_Info_14_02"); //Äà èñöåëèòñÿ äóõ òâîé è ïëîòü òâîÿ!
    hero.attribute[atr_hitpoints] /*0*/ = hero.attribute[atr_hitpoints_max] /*1*/;
    snd_play("MFX_Heal_Cast");
};

instance kdw_605_riordian_greet(c_info) {
    npc = kdw_605_riordian /*7568*/;
    nr = 0;
    condition = kdw_605_riordian_greet_condition;
    information = kdw_605_riordian_greet_info;
    description = "Ïðèâåòñòâóþ òåáÿ, Ìàã!";
};

func int kdw_605_riordian_greet_condition() {
    return true;
};

func void kdw_605_riordian_greet_info() {
    ai_output(other, self, "KDW_605_Riordian_GREET_Info_15_01"); //Ïðèâåòñòâóþ òåáÿ, Ìàã!
    ai_output(self, other, "KDW_605_Riordian_GREET_Info_14_02"); //ß Ðèîðäàí, àëõèìèê. Ïîëàãàþ, òåáå íóæåí ýëèêñèð?
    log_createtopic(ge_tradernc, log_note);
    b_logentry(ge_tradernc, ge_tradernc_1);
};

instance kdw_605_riordian_trade(c_info) {
    npc = kdw_605_riordian /*7568*/;
    nr = 0;
    condition = kdw_605_riordian_trade_condition;
    information = kdw_605_riordian_trade_info;
    permanent = true;
    trade = true;
    description = "Ïîêàæè ìíå, ÷òî ó òåáÿ åñòü.";
};

func int kdw_605_riordian_trade_condition() {
    if (npc_knowsinfo(hero, kdw_605_riordian_greet /*10311*/)) {
        return true;
    };
};

func void kdw_605_riordian_trade_info() {
    ai_output(other, self, "KDW_605_Riordian_TRADE_Info_15_01"); //Ïîêàæè ìíå, ÷òî ó òåáÿ åñòü.
};

instance dia_gilbert_exit(c_info) {
    npc = non_1500_gilbert /*7571*/;
    nr = 999;
    condition = dia_gilbert_exit_condition;
    information = dia_gilbert_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_gilbert_exit_condition() {
    return 1;
};

func void dia_gilbert_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_gilbert_first(c_info) {
    npc = non_1500_gilbert /*7571*/;
    nr = 1;
    condition = dia_gilbert_first_condition;
    information = dia_gilbert_first_info;
    important = true;
};

func int dia_gilbert_first_condition() {
    if (npc_getdisttonpc(self, other) <= zivilanquatschdist) {
        return 1;
    };
};

func void dia_gilbert_first_info() {
    ai_output(self, other, "DIA_Gilbert_First_04_00"); //×òî òû çäåñü äåëàåøü? Ãîñòè íå ÷àñòî çàáðåäàþò ñþäà, õå-õå!
    ai_output(self, other, "DIA_Gilbert_First_04_01"); //Òû õèòåð, ðàç óæ ñóìåë îòûñêàòü ìîå óêðûòèå.
    b_givexp(xp_gilbertfound);
};

instance dia_gilbert_hallo(c_info) {
    npc = non_1500_gilbert /*7571*/;
    nr = 1;
    condition = dia_gilbert_hallo_condition;
    information = dia_gilbert_hallo_info;
    permanent = true;
    description = "×åì òû çàíèìàåøüñÿ?";
};

func int dia_gilbert_hallo_condition() {
    return 1;
};

func void dia_gilbert_hallo_info() {
    ai_output(other, self, "DIA_Gilbert_Hallo_15_00"); //×òî òû çäåñü äåëàåøü?
    ai_output(self, other, "DIA_Gilbert_Hallo_04_01"); //ß óæå ñûò ïî ãîðëî Ñòàðûì Ëàãåðåì. Ê òîìó æå, ó ìåíÿ âîçíèêëè ïðîáëåìû ñ ðåáÿòàìè Ãîìåçà. Ýòî áûëî òàê äàâíî.
    ai_output(self, other, "DIA_Gilbert_Hallo_04_02"); //Òåïåðü óæå, íàâåðíîå, íèêòî îá ýòîì è íå ïîìíèò. Íî ÿ ïî-ïðåæíåìó çäåñü. Åñëè ñïðîñèøü ìåíÿ, òî ïî-ìîåìó, â Ñòàðîì Ëàãåðå ñëèøêîì ìíîãî òóïûõ áîëâàíîâ.
};

instance nov_1300_talas_exit(c_info) {
    npc = nov_1300_talas /*7581*/;
    nr = 999;
    condition = nov_1300_talas_exit_condition;
    information = nov_1300_talas_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int nov_1300_talas_exit_condition() {
    return true;
};

func void nov_1300_talas_exit_info() {
    ai_stopprocessinfos(self);
};

instance nov_1300_talas_ur(c_info) {
    npc = nov_1300_talas /*7581*/;
    nr = 0;
    condition = nov_1300_talas_ur_condition;
    information = nov_1300_talas_ur_info;
    description = "Òû Òàëàñ - òîò ñàìûé, êîòîðîãî îãðàáèëè?";
};

func int nov_1300_talas_ur_condition() {
    if (npc_knowsinfo(hero, info_corkalom_bringbook /*9572*/) && (corkalom_bringbook != log_success)) {
        return true;
    };
};

func void nov_1300_talas_ur_info() {
    ai_output(other, self, "Nov_1300_Talas_UR_Info_15_01"); //Òû Òàëàñ - òîò ñàìûé, êîòîðîãî îãðàáèëè?
    ai_output(self, other, "Nov_1300_Talas_UR_Info_02_02"); //Îñòàâü ìåíÿ â ïîêîå, ÿ íå õî÷ó îá ýòîì ãîâîðèòü!
};

instance nov_1300_talas_help(c_info) {
    npc = nov_1300_talas /*7581*/;
    nr = 0;
    condition = nov_1300_talas_help_condition;
    information = nov_1300_talas_help_info;
    description = "ß ìîãó ïîìî÷ü òåáå âåðíóòü àëüìàíàõ.";
};

func int nov_1300_talas_help_condition() {
    if (npc_knowsinfo(hero, nov_1300_talas_ur /*10329*/) && (corkalom_bringbook != log_success)) {
        return 1;
    };
};

func void nov_1300_talas_help_info() {
    ai_output(other, self, "Nov_1300_Talas_HELP_Info_15_01"); //ß ìîãó ïîìî÷ü òåáå âåðíóòü àëüìàíàõ.
    ai_output(self, other, "Nov_1300_Talas_HELP_Info_02_02"); //Ïðàâäà? Çíàåøü, íà ìåíÿ íàïàëè ãîáëèíû... è òåïåðü ÿ äîëæåí âåðíóòüñÿ òóäà è äîáûòü êíèãó.
    ai_output(self, other, "Nov_1300_Talas_HELP_Info_02_03"); //Ïîñëóøàé, ó ìåíÿ åñòü èäåÿ: äàâàé ÿ ïîêàæó òåáå, ãäå ýòî íàõîäèòñÿ, à òû çàáåðåøü àëüìàíàõ.
    info_clearchoices(nov_1300_talas_help /*10332*/);
    info_addchoice(nov_1300_talas_help /*10332*/, "Ñîãëàñåí.", nov_1300_talas_help_ok);
    info_addchoice(nov_1300_talas_help /*10332*/, "Ýòî îáîéäåòñÿ òåáå â 30 êóñêîâ ðóäû.", nov_1300_talas_help_bring);
    info_addchoice(nov_1300_talas_help /*10332*/, "50 êóñêîâ ðóäû - è ÿ â äåëå.", nov_1300_talas_help_more);
};

func void nov_1300_talas_help_ok() {
    ai_output(other, self, "Nov_1300_Talas_HELP_OK_15_01"); //Èäåò.
    ai_output(self, other, "Nov_1300_Talas_HELP_OK_02_02"); //Òîãäà ìû ìîæåì îòïðàâèòüñÿ ïðÿìî ñåé÷àñ.
    info_clearchoices(nov_1300_talas_help /*10332*/);
};

func void nov_1300_talas_help_bring() {
    ai_output(other, self, "Nov_1300_Talas_HELP_BRING_15_01"); //Ýòî îáîéäåòñÿ òåáå â 30 êóñêîâ ðóäû.
    ai_output(self, other, "Nov_1300_Talas_HELP_BRING_02_02"); //Ëàäíî. Ìû ìîæåì îòïðàâèòüñÿ ïðÿìî ñåé÷àñ.
    createinvitems(self, itminugget, 30);
    b_giveinvitems(self, hero, itminugget /*4517*/, 30);
    info_clearchoices(nov_1300_talas_help /*10332*/);
};

func void nov_1300_talas_help_more() {
    ai_output(other, self, "Nov_1300_Talas_HELP_MORE_15_01"); //50 êóñêîâ ðóäû - è ÿ â äåëå.
    ai_output(self, other, "Nov_1300_Talas_HELP_MORE_02_02"); //×òî? Äà ýòî æå ãðàáåæ! Íó õîðîøî... äàé ìíå çíàòü, êîãäà áóäåøü ãîòîâ.
    createinvitems(self, itminugget, 50);
    b_giveinvitems(self, hero, itminugget /*4517*/, 50);
    info_clearchoices(nov_1300_talas_help /*10332*/);
};

instance nov_1300_talas_ready(c_info) {
    npc = nov_1300_talas /*7581*/;
    nr = 0;
    condition = nov_1300_talas_ready_condition;
    information = nov_1300_talas_ready_info;
    description = "ß ãîòîâ.";
};

func int nov_1300_talas_ready_condition() {
    if (npc_knowsinfo(hero, nov_1300_talas_help /*10332*/) && (corkalom_bringbook != log_success)) {
        return 1;
    };
};

func void nov_1300_talas_ready_info() {
    ai_output(other, self, "Nov_1300_Talas_READY_Info_15_01"); //ß ãîòîâ.
    ai_output(self, other, "Nov_1300_Talas_READY_Info_02_02"); //Èäè çà ìíîé.
    b_logentry(ch2_book, ch2_book_1);
    self.aivar[36] = true;
    npc_exchangeroutine(self, "GOBBOCAVE");
    ai_stopprocessinfos(self);
};

instance nov_1300_talas_bridge(c_info) {
    npc = nov_1300_talas /*7581*/;
    condition = nov_1300_talas_bridge_condition;
    information = nov_1300_talas_bridge_info;
    important = true;
};

func int nov_1300_talas_bridge_condition() {
    if (npc_knowsinfo(hero, nov_1300_talas_ready /*10338*/) && (npc_getdisttowp(self, "LOCATION_29_02") < 1000)) {
        return 1;
    };
};

func void nov_1300_talas_bridge_info() {
    ai_output(self, other, "Nov_1300_Talas_BRIDGE_Info_02_01"); //Ýòè ÷åðòîâû òâàðè æèâóò â ïåùåðå çà ìîñòîì. Áóäü îñòîðîæåí, ëàäíî?
    ai_output(other, self, "Nov_1300_Talas_BRIDGE_Info_15_02"); //À òû, çíà÷èò, ñî ìíîé íå ïîéäåøü?
    ai_output(self, other, "Nov_1300_Talas_BRIDGE_Info_02_03"); //ß ïîäîæäó çäåñü... ãì... áóäó ïðèêðûâàòü îòõîä.
    b_logentry(ch2_book, ch2_book_2);
};

instance nov_1300_talas_back(c_info) {
    npc = nov_1300_talas /*7581*/;
    condition = nov_1300_talas_back_condition;
    information = nov_1300_talas_back_info;
    important = true;
};

func int nov_1300_talas_back_condition() {
    if (npc_knowsinfo(hero, nov_1300_talas_bridge /*10341*/) && npc_hasitems(hero, itwrfokusbuch)) {
        return 1;
    };
};

func void nov_1300_talas_back_info() {
    ai_output(self, other, "Nov_1300_Talas_BACK_Info_02_01"); //Àëüìàíàõ ó òåáÿ! Çäîðîâî! Òåïåðü ìû ìîæåì âåðíóòüñÿ â Ëàãåðü.
    b_logentry(ch2_book, ch2_book_4);
    npc_exchangeroutine(self, "RETURNTOCAMP");
    ai_stopprocessinfos(self);
};

instance nov_1300_talas_returned(c_info) {
    npc = nov_1300_talas /*7581*/;
    condition = nov_1300_talas_returned_condition;
    information = nov_1300_talas_returned_info;
    important = true;
};

func int nov_1300_talas_returned_condition() {
    if (((npc_knowsinfo(hero, nov_1300_talas_back /*10344*/) && npc_hasitems(hero, itwrfokusbuch)) && (npc_getdisttowp(self, "PSI_START") < 1000)) && (corkalom_bringbook != log_success)) {
        return true;
    };
};

func void nov_1300_talas_returned_info() {
    ai_output(self, other, "Info_Talas_RETURNED_02_01"); //Âîò ìû è äîìà. Òåáå ëó÷øå ïîñêîðåå îòäàòü àëüìàíàõ Êîð Ãàëîìó.
    ai_output(other, self, "Info_Talas_RETURNED_15_02"); //Áåðåãè ñåáÿ è íå ïåðåæèâàé!
    ai_output(self, other, "Info_Talas_RETURNED_02_03"); //Óæ òî÷íî íå áóäó! Íå ñòîèò äàæå è âîëíîâàòüñÿ.
    b_logentry(ch2_book, ch2_book_5);
    self.aivar[36] = false;
    npc_exchangeroutine(self, "BackInCamp");
    ai_stopprocessinfos(self);
};

instance nov_1300_talas_ogy(c_info) {
    npc = nov_1300_talas /*7581*/;
    nr = 0;
    condition = nov_1300_talas_ogy_condition;
    information = nov_1300_talas_ogy_info;
    description = "Ìåíÿ ïðèñëàë Êîð Àíãàð.";
};

func int nov_1300_talas_ogy_condition() {
    if (npc_knowsinfo(hero, gur_1202_corangar_where /*9622*/)) {
        return 1;
    };
};

func void nov_1300_talas_ogy_info() {
    ai_output(other, self, "Nov_1300_Talas_OGY_15_01"); //Ìåíÿ ïðèñëàë Êîð Àíãàð. Îí ñêàçàë, ÷òî òû äîëæåí ïðîâîäèòü ìåíÿ íà êëàäáèùå îðêîâ. Ìíå íóæíî íàéòè Èäîëà Ëþêîðà è åãî Ñòðàæåé.
    ai_output(self, other, "Nov_1300_Talas_OGY_02_02"); //Òàê, ÿ ñíîâà ïîñûëüíûé. ×åðò!!! Åñëè áû ÿ íå ïîòåðÿë ýòîò àëüìàíàõ...
    ai_output(self, other, "Nov_1300_Talas_OGY_02_03"); //Íó õîðîøî, èäè çà ìíîé.
    self.aivar[36] = true;
    ai_stopprocessinfos(self);
    npc_exchangeroutine(self, "OGY");
};

instance nov_1300_talas_backagain(c_info) {
    npc = nov_1300_talas /*7581*/;
    condition = nov_1300_talas_backagain_condition;
    information = nov_1300_talas_backagain_info;
    important = true;
};

func int nov_1300_talas_backagain_condition() {
    if (npc_getdisttowp(self, "OW_PATH_011") < 1000) {
        return 1;
    };
};

func void nov_1300_talas_backagain_info() {
    ai_output(self, other, "Nov_1300_Talas_BACKAGAIN_Info_02_01"); //×åðåç ìîñò ÿ ñ òîáîé íå ïîéäó, ýòî ÷èñòîå ñàìîóáèéñòâî.
    ai_output(self, other, "Nov_1300_Talas_BACKAGAIN_Info_02_02"); //Íóæíî áûòü íåíîðìàëüíûì, ÷òîáû ñîâàòüñÿ òóäà. Äàæå Ëþêîð ñî ñâîèìè Ñòðàæàìè - è òîò íå âåðíóëñÿ.
    ai_output(other, self, "Nov_1300_Talas_BACKAGAIN_Info_15_03"); //Âîò è ïîñìîòðèì, ÷òî òàì ïðîèçîøëî. À òû âîçâðàùàéñÿ â Ëàãåðü. Ñêàæåøü, ÿ áóäó ïîçæå.
    self.aivar[36] = false;
    ai_stopprocessinfos(self);
    npc_exchangeroutine(self, "ReturnToCampAgain");
};

instance dia_caine_exit(c_info) {
    npc = nov_1301_caine /*7588*/;
    nr = 999;
    condition = dia_caine_exit_condition;
    information = dia_caine_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_caine_exit_condition() {
    return 1;
};

func void dia_caine_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_caine_hallo(c_info) {
    npc = nov_1301_caine /*7588*/;
    nr = 1;
    condition = dia_caine_hallo_condition;
    information = dia_caine_hallo_info;
    description = "Ïðèâåò! ß çäåñü íîâåíüêèé.";
};

func int dia_caine_hallo_condition() {
    return 1;
};

func void dia_caine_hallo_info() {
    ai_output(other, self, "DIA_Caine_Hallo_15_00"); //Ïðèâåò! ß çäåñü íîâåíüêèé!
    ai_output(self, other, "DIA_Caine_Hallo_13_01"); //ß... ÿ... ÿ Êàèí, ó÷åíèê Êîð Ãàëîìà. Òû âåäü ñëûøàë î íåì, äà?
    info_clearchoices(dia_caine_hallo /*10359*/);
    info_addchoice(dia_caine_hallo /*10359*/, "Íåò.", dia_caine_hallo_nein);
    info_addchoice(dia_caine_hallo /*10359*/, "Äà.", dia_caine_hallo_ja);
};

func void dia_caine_hallo_ja() {
    ai_output(other, self, "DIA_Caine_Hallo_Ja_15_00"); //À-ãà.
    ai_output(self, other, "DIA_Caine_Hallo_Ja_13_01"); //Òîãäà òû çíàåøü, ÷òî îí âòîðîé ÷åëîâåê â ýòîì Ëàãåðå... ï-ïîñëå Þ`Áåðèîíà.
    info_clearchoices(dia_caine_hallo /*10359*/);
};

func void dia_caine_hallo_nein() {
    ai_output(other, self, "DIA_Caine_Hallo_Nein_15_00"); //Íåò.
    ai_output(self, other, "DIA_Caine_Hallo_Nein_13_01"); //Íåò?! Òû çäåñü íåäàâíî, íå òàê ëè?
    ai_output(self, other, "DIA_Caine_Hallo_Nein_13_02"); //Êîð Ãàëîì â ýòîì Ëàãåðå - âòîðîé ÷åëîâåê ïîñëå Þ`Áåðèîíà. Îí ðåøàåò, êîãî ïðèíèìàòü ê íàì, à êîãî íåò.
    info_clearchoices(dia_caine_hallo /*10359*/);
};

instance dia_caine_job(c_info) {
    npc = nov_1301_caine /*7588*/;
    nr = 2;
    condition = dia_caine_job_condition;
    information = dia_caine_job_info;
    description = "À òû ÷åì çàíèìàåøüñÿ?";
};

func int dia_caine_job_condition() {
    if (npc_knowsinfo(hero, dia_caine_hallo /*10359*/)) {
        return 1;
    };
};

func void dia_caine_job_info() {
    ai_output(other, self, "DIA_Caine_Job_15_00"); //À òû ÷åì çàíèìàåøüñÿ?
    ai_output(self, other, "DIA_Caine_Job_13_01"); //ß... ÿ... ÿ ïîìîãàþ åìó ãîòîâèòü ñíàäîáüÿ.
    ai_output(self, other, "DIA_Caine_Job_13_02"); //Â îñíîâíîì á-áîëîòíèê è ñëþíà ïîëçóíîâ. Ñ-ñëþíà íóæíà áîëüøå âñåãî.
};

instance dia_caine_wosekret(c_info) {
    npc = nov_1301_caine /*7588*/;
    nr = 2;
    condition = dia_caine_wosekret_condition;
    information = dia_caine_wosekret_info;
    description = "Êàê äîáûâàåòñÿ ñëþíà ïîëçóíîâ?";
};

func int dia_caine_wosekret_condition() {
    if (npc_knowsinfo(hero, dia_caine_job /*10364*/)) {
        return 1;
    };
};

func void dia_caine_wosekret_info() {
    ai_output(other, self, "DIA_Caine_WoSekret_15_00"); //Êàê äîáûâàåòñÿ ñëþíà ïîëçóíîâ?
    ai_output(self, other, "DIA_Caine_WoSekret_13_01"); //Ïîëçóíîâ òû ìîæåøü íàéòè â Ñòàðîé Øàõòå. Íî íóæíî åùå çíàòü, êàê äîáûâàåòñÿ ñëþíà.
    ai_output(self, other, "DIA_Caine_WoSekret_13_02"); //Åñëè òû è â ñàìîì äåëå õî÷åøü ïîîõîòèòüñÿ íà ýòèõ òâàðåé, ïîãîâîðè ëó÷øå ñî Ñòðàæàìè, êòî ïîîïûòíåå. Ñ Ãîð Íà Äðàêîì, íàïðèìåð.
    ai_output(self, other, "DIA_Caine_WoSekret_13_03"); //Îí õîäèò ìåæäó Ñòàðîé Øàõòîé è... è Ëàãåðåì êàæäûé äåíü. À ï-ïî óòðàì òû ìîæåøü çàñòàòü åãî â ëàáîðàòîðèè.
};

instance dia_caine_addinfokalom(c_info) {
    npc = nov_1301_caine /*7588*/;
    nr = 2;
    condition = dia_caine_addinfokalom_condition;
    information = dia_caine_addinfokalom_info;
    description = "×òî åùå òû ìîæåøü ðàññêàçàòü î ñâîåì ãîñïîäèíå?";
};

func int dia_caine_addinfokalom_condition() {
    if (npc_knowsinfo(hero, dia_caine_job /*10364*/)) {
        return 1;
    };
};

func void dia_caine_addinfokalom_info() {
    ai_output(other, self, "DIA_Caine_AddInfoKalom_15_00"); //×òî åùå òû ìîæåøü ðàññêàçàòü î ñâîåì ãîñïîäèíå?
    ai_output(self, other, "DIA_Caine_AddInfoKalom_13_01"); //Îí... îí íå òàêîé, êàê... êàê âñå Ãóðó. Ê íåìó ìîæåò îáðàòèòüñÿ ëþáîé, íî... íî ÍÈÊÎÌÓ íå ïîçâîëåíî ïîïóñòó òðàòèòü åãî äðàãîöåííîå âðåìÿ.
};

instance nov_1301_caine_chest(c_info) {
    npc = nov_1301_caine /*7588*/;
    nr = 0;
    condition = nov_1301_caine_chest_condition;
    information = nov_1301_caine_chest_info;
    description = "Êàê äîáûòü ðåöåïò ýëèêñèðà Êîð Ãàëîìà?";
};

func int nov_1301_caine_chest_condition() {
    if (dexter_getkalomsrecipe == log_running) {
        return true;
    };
};

func void nov_1301_caine_chest_info() {
    ai_output(other, self, "Nov_1301_Caine_CHEST_Info_15_01"); //Êàê äîáûòü ðåöåïò ýëèêñèðà Êîð Ãàëîìà?
    ai_output(self, other, "Nov_1301_Caine_CHEST_Info_13_02"); //Íèêàê. Îí õðàíèò åãî â çàïåðòîì ñóíäóêå è íå îòäàñò íèêîìó íè çà êàêèå äåíüãè.
};

instance dia_viran_exit(c_info) {
    npc = nov_1302_viran /*7590*/;
    nr = 999;
    condition = dia_viran_exit_condition;
    information = dia_viran_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_viran_exit_condition() {
    return 1;
};

func void dia_viran_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_viran_what(c_info) {
    npc = nov_1302_viran /*7590*/;
    nr = 1;
    condition = dia_viran_what_condition;
    information = dia_viran_what_info;
    description = "×åì òû çàíèìàåøüñÿ?";
};

func int dia_viran_what_condition() {
    return 1;
};

func void dia_viran_what_info() {
    ai_output(other, self, "DIA_Viran_What_15_00"); //×åì òû çàíèìàåøüñÿ?
    ai_output(self, other, "DIA_Viran_What_07_01"); //Ìû ñîáèðàåì áîëîòíèê. Ïîñëå òîãî êàê íàøè áðàòüÿ çàêîí÷àò ïåðåðàáîòêó, åãî ìîæíî áóäåò êóðèòü.
    ai_output(self, other, "DIA_Viran_What_07_02"); //Íà áîëîòå äîâîëüíî îïàñíî, íî ýòà òðàâà ðàñòåò òîëüêî çäåñü. Âîîáùå-òî, îíî è ê ëó÷øåìó.
    ai_output(other, self, "DIA_Viran_What_15_03"); //Ïî÷åìó?
    ai_output(self, other, "DIA_Viran_What_07_04"); //Ïîòîìó ÷òî çäåñü äî íåå íå ìîãóò äîáðàòüñÿ äâà äðóãèõ Ëàãåðÿ. Ìû åäèíñòâåííûå â êîëîíèè äîáûâàåì áîëîòíèê.
    ai_output(self, other, "DIA_Viran_What_07_05"); //Ìîæíî ïðîäàâàòü åãî äâóì äðóãèì Ëàãåðÿì - è ïðè ýòîì ÌÛ íàçíà÷àåì öåíó.
};

instance dia_viran_fetchweed(c_info) {
    npc = nov_1302_viran /*7590*/;
    nr = 1;
    condition = dia_viran_fetchweed_condition;
    information = dia_viran_fetchweed_info;
    description = "Ìåíÿ ïðèñëàë Èäîë Îðàí.";
};

func int dia_viran_fetchweed_condition() {
    if (baalorun_fetchweed == log_running) {
        return 1;
    };
};

func void dia_viran_fetchweed_info() {
    ai_output(other, self, "DIA_Viran_FetchWeed_15_00"); //Ìåíÿ ïðèñëàë Èäîë Îðàí. ß äîëæåí îòíåñòè äíåâíîé ñáîð Êîð Ãàëîìó.
    ai_output(self, other, "DIA_Viran_FetchWeed_07_01"); //Äóìàåøü, ýòî òàê ïðîñòî, äà?
    ai_output(self, other, "DIA_Viran_FetchWeed_07_02"); //Ýäàê ëþáîé ïðèäåò è ñêàæåò: 'Ìåíÿ ïðèñëàë Èäîë Îðàí', - à çàòåì - ôüþèòü! - èùè âåòðà â ïîëå!
    info_clearchoices(dia_viran_fetchweed /*10382*/);
    info_addchoice(dia_viran_fetchweed /*10382*/, "Îòïðàâëÿéñÿ ê íåìó è ñïðîñè åãî ñàì, åñëè íå âåðèøü ìíå!", dia_viran_fetchweed_gotohim);
    info_addchoice(dia_viran_fetchweed /*10382*/, "Ìåíÿ íà ñàìîì äåëå ïðèñëàë Èäîë Îðàí!", dia_viran_fetchweed_really);
};

func void dia_viran_fetchweed_really() {
    ai_output(other, self, "DIA_Viran_FetchWeed_Really_15_00"); //Ìåíÿ íà ñàìîì äåëå ïðèñëàë Èäîë Îðàí!
    ai_output(self, other, "DIA_Viran_FetchWeed_Really_07_01"); //Êîíå÷íî.
};

func void dia_viran_fetchweed_gotohim() {
    ai_output(other, self, "DIA_Viran_FetchWeed_GotoHim_15_00"); //Îòïðàâëÿéñÿ ê íåìó è ñïðîñè åãî ñàì, åñëè íå âåðèøü ìíå!
    ai_output(self, other, "DIA_Viran_FetchWeed_GotoHim_07_01"); //Ó ìåíÿ åñòü èäåÿ ïîëó÷øå. Òû ìîæåøü äîêàçàòü, ÷òî òû - òîò, çà êîãî ñåáÿ âûäàåøü, åñëè âûïîëíèøü äëÿ íàñ êîå-êàêóþ ðàáîòó.
    info_clearchoices(dia_viran_fetchweed /*10382*/);
};

var int viran_bloodflies;

instance dia_viran_bloodflies(c_info) {
    npc = nov_1302_viran /*7590*/;
    nr = 1;
    condition = dia_viran_bloodflies_condition;
    information = dia_viran_bloodflies_info;
    description = "È ÷òî òû õî÷åøü, ÷òîáû ÿ ñäåëàë?";
};

func int dia_viran_bloodflies_condition() {
    if (npc_knowsinfo(hero, dia_viran_fetchweed /*10382*/)) {
        return 1;
    };
};

func void dia_viran_bloodflies_info() {
    ai_output(other, self, "DIA_Viran_Bloodflies_15_00"); //È ÷òî òû õî÷åøü, ÷òîáû ÿ ñäåëàë?
    ai_output(self, other, "DIA_Viran_Bloodflies_07_01"); //Äà ñóùèé ïóñòÿê. Ðàáîòàòü íà áîëîòå è òàê îïàñíî, à òóò åùå ýòè ÷åðòîâû ñëåïíè.
    ai_output(self, other, "DIA_Viran_Bloodflies_07_02"); //Áåç íèõ áûëî áû êóäà êàê ëåã÷å, ïîíèìàåøü?
    viran_bloodflies = log_running;
    b_logentry(ch1_deliverweed, ch1_deliverweed_3);
};

var int viran_botenday;

instance dia_viran_running(c_info) {
    npc = nov_1302_viran /*7590*/;
    nr = 1;
    condition = dia_viran_running_condition;
    information = dia_viran_running_info;
    permanent = true;
    description = "ß íå âèæó íèêàêèõ ñëåïíåé.";
};

func int dia_viran_running_condition() {
    if (viran_bloodflies == log_running) {
        return 1;
    };
};

func void dia_viran_running_info() {
    ai_output(other, self, "DIA_Viran_Running_15_00"); //ß íå âèæó íèêàêèõ ñëåïíåé.
    npc_perceiveall(self);
    if (wld_detectnpc(self, bloodfly /*6729*/, zs_mm_rtn_wusel, -1) && (npc_getdisttonpc(self, other) < 2000)) {
        ai_output(self, hero, "DIA_Viran_Running_07_00"); //À òû îòîéäè øàãîâ íà äâàäöàòü!
        ai_output(self, hero, "DIA_Viran_Running_07_01"); //Íå äóìàé, ÷òî òåáå óäàñòñÿ ëåãêî îòäåëàòüñÿ!
    }
    else {
        ai_output(self, hero, "DIA_Viran_Running_07_02"); //Êàæåòñÿ, æóêîâ áîëüøå íåò. Õîðîøàÿ ðàáîòà!
        ai_output(self, hero, "DIA_Viran_Running_07_03"); //Ëþáîé, êòî âçÿëñÿ çà íåå, ëèáî íà íàøåé ñòîðîíå, ëèáî ïîëíûé èäèîò!
        ai_output(self, hero, "DIA_Viran_Running_07_04"); //À ó èäèîòà íå õâàòèò óìà, ÷òîáû îäóðà÷èòü ìåíÿ, âåäü òàê?
        ai_output(self, hero, "DIA_Viran_Running_07_05"); //Âîò, ïîëó÷àé äíåâíîé ñáîð è òàùè åãî ê Êîð Ãàëîìó.
        ai_output(self, hero, "DIA_Viran_Running_07_06"); //Åñëè îí íà÷íåò æàëîâàòüñÿ è ñêàæåò, ÷òî ýòîãî íåäîñòàòî÷íî, ïðåäëîæè åìó îòîðâàòü çàäíèöó îò êðåñëà è ïðèéòè ñþäà ñàìîìó, ÷òîáû ïîñìîòðåòü, êàê òÿæåëî ðàáîòàåòñÿ íà áîëîòàõ.
        createinvitems(self, itmi_plants_swampherb_01, 50);
        b_giveinvitems(self, hero, itmi_plants_swampherb_01 /*4521*/, 50);
        if (npc_knowsinfo(hero, dia_balor_fetchweed /*10422*/)) {
            b_logentry(ch1_deliverweed, ch1_deliverweed_4);
        }
        else {
            b_logentry(ch1_deliverweed, ch1_deliverweed_5);
        };
        b_givexp(xp_weedfromviran);
        viran_bloodflies = log_success;
        viran_botenday = wld_getday();
    };
    ai_stopprocessinfos(self);
};

instance dia_viran_perm(c_info) {
    npc = nov_1302_viran /*7590*/;
    nr = 1;
    condition = dia_viran_perm_condition;
    information = dia_viran_perm_info;
    permanent = true;
    description = "Êàê óáîðêà óðîæàÿ?";
};

func int dia_viran_perm_condition() {
    if (viran_bloodflies == log_success) {
        return 1;
    };
};

func void dia_viran_perm_info() {
    ai_output(other, self, "DIA_Viran_Perm_15_00"); //Êàê óáîðêà óðîæàÿ?
    ai_output(self, other, "DIA_Viran_Perm_07_01"); //Äà-äà, ïîñìåéñÿ, ïîñìåéñÿ. Óâåðåí, òåáå Ãóðó äîâåðÿþò ðàáîòåíêó ïîëó÷øå.
    ai_output(self, other, "DIA_Viran_Perm_07_02"); //Íó, ïî êðàéíåé ìåðå, ìíå íå ïðèõîäèòñÿ ãîðáàòèòüñÿ ñàìîìó. Íà òî ó íàñ åñòü 'ïåõîòà' - õà, õà, õà.
};

instance dia_viran_ripoff(c_info) {
    npc = nov_1302_viran /*7590*/;
    nr = 5;
    condition = dia_viran_ripoff_condition;
    information = dia_viran_ripoff_info;
    description = "ß ñíîâà äîëæåí äîñòàâèòü âåñü ñáîð ê Êîð Ãàëîìó.";
};

func int dia_viran_ripoff_condition() {
    if ((viran_botenday <= (wld_getday() - 2)) && (viran_bloodflies == log_success)) {
        return 1;
    };
};

func void dia_viran_ripoff_info() {
    ai_output(other, self, "DIA_Viran_RipOff_15_00"); //ß ñíîâà äîëæåí äîñòàâèòü âåñü ñáîð ê Êîð Ãàëîìó.
    ai_output(self, other, "DIA_Viran_RipOff_07_01"); //Ñíîâà?
    ai_output(other, self, "DIA_Viran_RipOff_15_02"); //Íàäåþñü, òû íå ñîáèðàåøüñÿ ïîïðîñèòü ìåíÿ ïåðåáèòü âñåõ áîëîòîæîðîâ â îêðóãå, ÷òîáû åùå ðàç äîêàçàòü òåáå ìîþ ïðåäàííîñòü? Ó ìåíÿ íå òàê ìíîãî âðåìåíè.
    ai_output(self, other, "DIA_Viran_RipOff_07_03"); //Ëàäíî, ëàäíî! Çàáèðàé ýòè ÷åðòîâû ñîðíÿêè!
    createinvitems(self, itmi_plants_swampherb_01, 50);
    b_giveinvitems(self, hero, itmi_plants_swampherb_01 /*4521*/, 50);
};

instance dia_nyras_exit(c_info) {
    npc = nov_1303_nyras /*7592*/;
    nr = 999;
    condition = dia_nyras_exit_condition;
    information = dia_nyras_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_nyras_exit_condition() {
    return 1;
};

func void dia_nyras_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_nyras_hallo(c_info) {
    npc = nov_1303_nyras /*7592*/;
    nr = 1;
    condition = dia_nyras_hallo_condition;
    information = dia_nyras_hallo_info;
    description = "Ïðèâåò! ß çäåñü íîâåíüêèé.";
};

func int dia_nyras_hallo_condition() {
    if (kapitel <= 1) {
        return true;
    };
};

func void dia_nyras_hallo_info() {
    ai_output(other, self, "DIA_Nyras_Hallo_15_00"); //Ïðèâåò! ß çäåñü íîâåíüêèé!
    ai_output(self, other, "DIA_Nyras_Hallo_03_01"); //Äà ïðåáóäåò ñ òîáîé Ñïÿùèé, íåçíàêîìåö!
};

instance dia_nyras_ort(c_info) {
    npc = nov_1303_nyras /*7592*/;
    nr = 1;
    condition = dia_nyras_ort_condition;
    information = dia_nyras_ort_info;
    description = "Ðàññêàæè ìíå îá ýòîì ìåñòå.";
};

func int dia_nyras_ort_condition() {
    if (npc_knowsinfo(hero, dia_nyras_hallo /*10404*/) && (kapitel <= 1)) {
        return 1;
    };
};

func void dia_nyras_ort_info() {
    ai_output(other, self, "DIA_Nyras_Ort_15_00"); //Ðàññêàæè ìíå îá ýòîì ìåñòå.
    ai_output(self, other, "DIA_Nyras_Ort_03_01"); //Íó... Ãóðó çäåñü ñàìûå ãëàâíûå. Îíè íåñóò íàðîäó ñëîâî Ñïÿùåãî è ïåðåäàþò íîâè÷êàì ìóäðîñòü íàøåãî ãîñïîäèíà.
    ai_output(self, other, "DIA_Nyras_Ort_03_02"); //Ðàçóìååòñÿ, ñàì îí íå ñìîã áû ïîãîâîðèòü ñ êàæäûì ëè÷íî.
    ai_output(self, other, "DIA_Nyras_Ort_03_03"); //Íî èíîãäà îí ñîáèðàåò íàñ âî äâîðå õðàìà, äàáû äîíåñòè äî íàñ ñâÿùåííîå ñëîâî Ñïÿùåãî.
    info_clearchoices(dia_nyras_ort /*10407*/);
    info_addchoice(dia_nyras_ort /*10407*/, "Ïîâåäàé ìíå î ñâÿùåííûõ ñëîâàõ âåëèêîãî Ñïÿùåãî.", dia_nyras_ort_holy);
    info_addchoice(dia_nyras_ort /*10407*/, "È ÷òî îí ãîâîðèò?", dia_nyras_ort_casual);
};

func void dia_nyras_ort_casual() {
    ai_output(other, self, "DIA_Nyras_Ort_Casual_15_00"); //È ÷òî îí ãîâîðèò?
    ai_output(self, other, "DIA_Nyras_Ort_Casual_03_01"); //Ñïÿùèé óêàçûâàåò íàì ïóòü, íî ÿçû÷íèêàì, âðîäå òåáÿ, ýòîãî íå ïîíÿòü!
    info_clearchoices(dia_nyras_ort /*10407*/);
};

func void dia_nyras_ort_holy() {
    ai_output(other, self, "DIA_Nyras_Ort_Holy_15_00"); //Ïîâåäàé ìíå î ñâÿùåííûõ ñëîâàõ âåëèêîãî Ñïÿùåãî.
    ai_output(self, other, "DIA_Nyras_Ort_Holy_03_01"); //ÎÍ ãîâîðèò, ÷òî ìû âíîâü äîëæíû îáðåñòè ñâîáîäó.
    ai_output(self, other, "DIA_Nyras_Ort_Holy_03_02"); //Ïî ñëîâàì Þ`Áåðèîíà, Ñïÿùèé óêàæåò íàì ïóòü, êàê òîëüêî ìû áóäåì â ñîñòîÿíèè óñëûøàòü åãî.
    ai_output(self, other, "DIA_Nyras_Ort_Holy_03_03"); //Þ`Áåðèîí ãîòîâèò Âåëèêóþ Öåðåìîíèþ, â õîäå êîòîðîé âìåñòå ñî ñâîèìè ëó÷øèìè ó÷åíèêàìè îí ïðèçîâåò Ñïÿùåãî.
    ai_output(self, other, "DIA_Nyras_Ort_Holy_03_04"); //Åìó ïîìîãàåò Êîð Ãàëîì - àëõèìèê, êîòîðûé ãîòîâèò ýëèêñèð, ñïîñîáíûé ïîãðóçèòü íàñ â òðàíñ.
    ai_output(self, other, "DIA_Nyras_Ort_Holy_03_05"); //Ëèøü â ýòîì ñîñòîÿíèè ìû ìîæåì ïîíèìàòü ìûñëè Ñïÿùåãî - äà åùå âî ñíå.
    info_clearchoices(dia_nyras_ort /*10407*/);
};

instance nov_1303_nyras_greet(c_info) {
    npc = nov_1303_nyras /*7592*/;
    condition = nov_1303_nyras_greet_condition;
    information = nov_1303_nyras_greet_info;
    important = true;
};

func int nov_1303_nyras_greet_condition() {
    if (yberion_bringfocus == log_running) {
        return 1;
    };
};

func void nov_1303_nyras_greet_info() {
    ai_output(self, other, "Nov_1303_Nyras_GREET_Info_03_00"); //Óáèðàéñÿ! Òåáå íå÷åãî çäåñü äåëàòü!
};

instance nov_1303_nyras_leave(c_info) {
    npc = nov_1303_nyras /*7592*/;
    nr = 0;
    condition = nov_1303_nyras_leave_condition;
    information = nov_1303_nyras_leave_info;
    description = "ß èùó þíèòîð.";
};

func int nov_1303_nyras_leave_condition() {
    if (npc_knowsinfo(hero, nov_1303_nyras_greet /*10412*/)) {
        return 1;
    };
};

func void nov_1303_nyras_leave_info() {
    ai_output(other, self, "Nov_1303_Nyras_LEAVE_Info_15_01"); //ß èùó þíèòîð.
    ai_output(self, other, "Nov_1303_Nyras_LEAVE_Info_03_02"); //Ê ñîæàëåíèþ, òû îïîçäàë. ß óæå íàøåë åãî!
    ai_output(self, other, "Nov_1303_Nyras_LEAVE_Info_03_03"); //È çíàåøü - ÿ ðåøèë îñòàâèòü åãî ñåáå!!!
    ai_output(self, other, "Nov_1303_Nyras_LEAVE_Info_03_04"); //Ñïÿùèé ãîâîðèë ñî ìíîé ïðîøëîé íî÷üþ - è îí èçáðàë ìåíÿ ñâîèì åäèíñòâåííûì ïîñëåäîâàòåëåì!
    ai_output(self, other, "Nov_1303_Nyras_LEAVE_Info_03_05"); //Òåïåðü ÿ ñëóæó òîëüêî Ñïÿùåìó. Íèêàêèõ áîëüøå Ãóðó è Ñòðàæåé!
    ai_output(self, other, "Nov_1303_Nyras_LEAVE_Info_03_06"); //ÒÎËÜÊÎ ß!!! ÎÄÈÍ!!
    ai_output(self, other, "Nov_1303_Nyras_LEAVE_Info_03_07"); //ÓÌÐÈ!!!
    b_logentry(ch2_focus, ch2_focus_5);
    npc_setpermattitude(self, att_hostile);
    ai_stopprocessinfos(self);
    npc_settarget(self, hero);
    ai_startstate(self, zs_attack, 1, "");
};

instance dia_balor_exit(c_info) {
    npc = nov_1304_balor /*7595*/;
    nr = 999;
    condition = dia_balor_exit_condition;
    information = dia_balor_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_balor_exit_condition() {
    return 1;
};

func void dia_balor_exit_info() {
    ai_stopprocessinfos(self);
};

var int balor_botenday;

instance dia_balor_fetchweed(c_info) {
    npc = nov_1304_balor /*7595*/;
    nr = 1;
    condition = dia_balor_fetchweed_condition;
    information = dia_balor_fetchweed_info;
    description = "Ìåíÿ ïðèñëàë Èäîë Îðàí. ß äîëæåí çàáðàòü âåñü áîëîòíèê.";
};

func int dia_balor_fetchweed_condition() {
    if (baalorun_fetchweed == log_running) {
        return 1;
    };
};

func void dia_balor_fetchweed_info() {
    ai_output(other, self, "DIA_Balor_FetchWeed_15_00"); //Ìåíÿ ïðèñëàë Èäîë Îðàí. ß äîëæåí çàáðàòü âåñü áîëîòíèê.
    ai_output(self, other, "DIA_Balor_FetchWeed_01_01"); //Õîðîøî, òàê ìíå íå ïðèäåòñÿ èäòè ñàìîìó. Âîò, âîçüìè.
    ai_output(self, other, "DIA_Balor_FetchWeed_01_02"); //Íå çàáóäü çàãëÿíóòü íà äðóãóþ ñòîðîíó áîëîòà, ê Âàéðàíó, åñëè òû ó íåãî åùå íå áûë.
    ai_output(self, other, "DIA_Balor_FetchWeed_01_03"); //Â ïðîòèâíîì ñëó÷àå êîå-êîìó äíåâíîé ñáîð ìîæåò ïîêàçàòüñÿ ñëèøêîì ìàëåíüêèì, è êîå-êòî ìîæåò äàæå ïîäóìàòü, ÷òî òû ïðîäàë ïîëîâèíó, õå-õå.
    createinvitems(self, itmi_plants_swampherb_01, 50);
    b_giveinvitems(self, other, itmi_plants_swampherb_01 /*4521*/, 50);
    b_logentry(ch1_deliverweed, ch1_deliverweed_6);
    b_givexp(xp_weedfrombalor);
    if ((!npc_knowsinfo(hero, dia_viran_what /*10379*/)) && (!npc_knowsinfo(hero, dia_viran_fetchweed /*10382*/))) {
        b_logentry(ch1_deliverweed, ch1_deliverweed_7);
    };
    balor_botenday = wld_getday();
};

var int balor_playercheating;

instance dia_balor_sellunder(c_info) {
    npc = nov_1304_balor /*7595*/;
    nr = 1;
    condition = dia_balor_sellunder_condition;
    information = dia_balor_sellunder_info;
    description = "Äà êîìó ÿ ìîãó ïðîäàòü ýòîò áîëîòíèê?";
};

func int dia_balor_sellunder_condition() {
    if (npc_knowsinfo(hero, dia_balor_fetchweed /*10422*/)) {
        return 1;
    };
};

func void dia_balor_sellunder_info() {
    ai_output(other, self, "DIA_Balor_SellUnder_15_00"); //Äà êîìó ÿ ìîãó ïðîäàòü ýòîò áîëîòíèê?
    ai_output(self, other, "DIA_Balor_SellUnder_01_01"); //Î-î! Èäåÿ çàäåëà çà æèâîå, äà?
    info_clearchoices(dia_balor_sellunder /*10426*/);
    info_addchoice(dia_balor_sellunder /*10426*/, "Çàáóäü îá ýòîì, ÿ ïðîñòî òàê ñïðîñèë.", dia_balor_sellunder_forgetit);
    info_addchoice(dia_balor_sellunder /*10426*/, "Çíàåøü íóæíîãî ÷åëîâåêà? Ìû ìîãëè áû ïîäåëèòü äåíüãè ïîðîâíó.", dia_balor_sellunder_halfhalf);
    info_addchoice(dia_balor_sellunder /*10426*/, "Ïðîñòî ñêàæè ìíå, êòî ýòîò ÷åëîâåê.", dia_balor_sellunder_comeon);
};

func void dia_balor_sellunder_forgetit() {
    ai_output(other, self, "DIA_Balor_SellUnder_ForgetIt_15_00"); //Çàáóäü îá ýòîì, ÿ ïðîñòî òàê ñïðîñèë.
    info_clearchoices(dia_balor_sellunder /*10426*/);
};

func void dia_balor_sellunder_halfhalf() {
    ai_output(other, self, "DIA_Balor_SellUnder_HalfHalf_15_00"); //Åñëè òû çíàåøü íóæíîãî ÷åëîâåêà, ìû ìîãëè áû ïîäåëèòü äåíüãè ïîðîâíó.
    ai_output(self, other, "DIA_Balor_SellUnder_HalfHalf_01_01"); //Íó, ÿ çíàþ â Íîâîì Ëàãåðå êîå-êîãî, êîìó íóæåí áîëîòíèê...
    ai_output(self, other, "DIA_Balor_SellUnder_HalfHalf_01_02"); //Íî åñëè Ãóðó ïîéìàþò òåáÿ íà ýòîì, òî ñêîðìÿò áîëîòîæîðàì! Íåò, ÿ òåáå íè÷åãî íå ãîâîðèë!
    balor_playercheating = true;
    info_clearchoices(dia_balor_sellunder /*10426*/);
};

func void dia_balor_sellunder_comeon() {
    ai_output(other, self, "DIA_Balor_SellUnder_ComeOn_15_00"); //Ïðîñòî ñêàæè ìíå, êòî ýòîò ÷åëîâåê.
    ai_output(self, other, "DIA_Balor_SellUnder_ComeOn_01_01"); //Âîò âáèë ñåáå â ãîëîâó! Ãîâîðþ æå òåáå: åñëè äíåâíîé ñáîð íå áóäåò äîñòàâëåí Êîð Ãàëîìó, íàñ îáîèõ æäóò áîëüøèå íåïðèÿòíîñòè!
};

var int balor_tellsncdealer;

instance dia_balor_telldealer(c_info) {
    npc = nov_1304_balor /*7595*/;
    nr = 1;
    condition = dia_balor_telldealer_condition;
    information = dia_balor_telldealer_info;
    permanent = true;
    description = "Äà ëàäíî òåáå. Êîìó â Íîâîì Ëàãåðå íóæåí áîëîòíèê?";
};

func int dia_balor_telldealer_condition() {
    if ((balor_playercheating == true) && (balor_tellsncdealer == false)) {
        return 1;
    };
};

func void dia_balor_telldealer_info() {
    ai_output(other, self, "DIA_Balor_TellDealer_15_00"); //Äà ëàäíî òåáå. Êîìó â Íîâîì Ëàãåðå íóæåí áîëîòíèê?
    ai_output(self, other, "DIA_Balor_TellDealer_01_01"); //Òû äóìàåøü, ÿ ïðîñòî òàê íàçîâó òåáå èìÿ, è òû óáåæèøü ñ òðàâîé? Äàæå è íå íàäåéñÿ, ïðèÿòåëü!
    ai_output(self, other, "DIA_Balor_TellDealer_01_02"); //Ãîíè 50 êóñêîâ ðóäû â êà÷åñòâå çàäàòêà - òîãäà è ïîãîâîðèì.
    info_clearchoices(dia_balor_telldealer /*10433*/);
    info_addchoice(dia_balor_telldealer /*10433*/, "Çàáóäü îá ýòîì.", dia_balor_telldealer_forgetit);
    info_addchoice(dia_balor_telldealer /*10433*/, "Ýòî ñïðàâåäëèâî. Âîò, äåðæè.", dia_balor_telldealer_pay);
};

func void dia_balor_telldealer_pay() {
    ai_output(other, self, "DIA_Balor_TellDealer_Pay_15_00"); //Ýòî ñïðàâåäëèâî. Âîò, äåðæè.
    if (npc_hasitems(other, itminugget) >= 50) {
        ai_output(self, other, "DIA_Balor_TellDealer_Pay_01_01"); //Õîðîøî... Ñëóøàé. Åãî çîâóò Ñàéôåð. Òû íàéäåøü åãî â áàðå íà îçåðå.
        ai_output(self, other, "DIA_Balor_TellDealer_Pay_01_02"); //Íî áóäü îñòîðîæåí. Ñìîòðè, ÷òîáû òåáÿ êòî-íèáóäü íå íàäóë!
        info_clearchoices(dia_balor_telldealer /*10433*/);
        b_giveinvitems(other, self, itminugget /*4517*/, 50);
        balor_tellsncdealer = true;
        b_logentry(ch1_deliverweed, ch1_deliverweed_8);
        b_givexp(xp_balornamedcipher);
        log_createtopic(ge_tradernc, log_note);
        b_logentry(ge_tradernc, ge_tradernc_3);
    }
    else {
        ai_output(self, other, "DIA_Balor_TellDealer_Pay_NoOre_01_00"); //Íå âèæó äåíåã. 50 êóñêîâ ðóäû è íè øòóêîé ìåíüøå, èëè ÿ áóäó íåì, êàê ðûáà.
        info_clearchoices(dia_balor_telldealer /*10433*/);
    };
};

func void dia_balor_telldealer_forgetit() {
    ai_output(other, self, "DIA_Balor_TellDealer_ForgetIt_15_00"); //Çàáóäü îá ýòîì.
    ai_output(self, other, "DIA_Balor_TellDealer_ForgetIt_01_01"); //Íåóæåëè òû äóìàåøü, ÷òî ìîæíî ïðîñòî ïðèéòè â Íîâûé Ëàãåðü è òîëêíóòü ãðóç áîëîòíèêà ïåðâîìó âñòðå÷íîìó? Òû íè çà ÷òî íå ñìîæåøü ñáûòü åãî ñ ðóê.
    ai_output(self, other, "DIA_Balor_TellDealer_ForgetIt_01_02"); //Ðàçâå ÷òî êòî-íèáóäü èç âîðîâ ïðîëîìèò òåáå ãîëîâó è ñàì çàáåðåò òîâàð.
    info_clearchoices(dia_balor_telldealer /*10433*/);
};

var int balor_rippedoff;

instance dia_balor_ripoff(c_info) {
    npc = nov_1304_balor /*7595*/;
    nr = 5;
    condition = dia_balor_ripoff_condition;
    information = dia_balor_ripoff_info;
    permanent = true;
    description = "ß âåðíóëñÿ çà ñëåäóþùåé ïàðòèåé äëÿ Êîð Ãàëîìà.";
};

func int dia_balor_ripoff_condition() {
    if (((balor_botenday <= (wld_getday() - 2)) && npc_knowsinfo(hero, dia_balor_fetchweed /*10422*/)) && (balor_rippedoff == false)) {
        return 1;
    };
};

func void dia_balor_ripoff_info() {
    ai_output(other, self, "DIA_Balor_RipOff_15_00"); //Ýòî ñíîâà ÿ. ß âåðíóëñÿ çà ñëåäóþùåé ïàðòèåé.
    if (balor_playercheating == true) {
        ai_output(self, other, "DIA_Balor_RipOff_01_01"); //Êîíå÷íî! Ñíîâà ñîáèðàåøüñÿ ïðîäàòü åå Íîâîìó Ëàãåðþ!
        ai_output(self, other, "DIA_Balor_RipOff_01_02"); //ß òðåáóþ 50 êóñêîâ ðóäû - ìîé îáû÷íûé àâàíñ!
        info_clearchoices(dia_balor_ripoff /*10439*/);
        info_addchoice(dia_balor_ripoff /*10439*/, "Vergi* es.", dia_balor_ripoff_forgetit);
        info_addchoice(dia_balor_ripoff /*10439*/, "50 sind fair - hier, nimm.", dia_balor_ripoff_pay);
    }
    else {
        ai_output(self, other, "DIA_Balor_RipOff_01_03"); //Ñíîâà òû? Õîðîøî, âîò, âîçüìè, íî íå äåëàé íèêàêèõ ãëóïîñòåé, ïîíÿë?
        ai_output(other, self, "DIA_Balor_RipOff_15_04"); //È â ìûñëÿõ íå áûëî.
        createinvitems(self, itmi_plants_swampherb_01, 50);
        b_giveinvitems(self, hero, itmi_plants_swampherb_01 /*4521*/, 50);
        balor_rippedoff = true;
    };
};

func void dia_balor_ripoff_pay() {
    ai_output(other, self, "DIA_Balor_TellDealer_Pay_15_00"); //Ýòî ñïðàâåäëèâî. Âîò, äåðæè.
    if (npc_hasitems(other, itminugget) >= 50) {
        ai_output(self, other, "DIA_Balor_TellDealer_Pay_01_02"); //Íî áóäü îñòîðîæåí. Ñìîòðè, ÷òîáû òåáÿ êòî-íèáóäü íå íàäóë!
        info_clearchoices(dia_balor_ripoff /*10439*/);
        b_giveinvitems(other, self, itminugget /*4517*/, 50);
        createinvitems(self, itmi_plants_swampherb_01, 50);
        b_giveinvitems(self, hero, itmi_plants_swampherb_01 /*4521*/, 50);
        balor_rippedoff = true;
    }
    else {
        ai_output(self, other, "DIA_Balor_TellDealer_Pay_NoOre_01_00"); //Íå âèæó äåíåã. 50 êóñêîâ ðóäû è íè øòóêîé ìåíüøå, èëè ÿ áóäó íåì, êàê ðûáà.
        info_clearchoices(dia_balor_ripoff /*10439*/);
    };
};

func void dia_balor_ripoff_forgetit() {
    ai_output(other, self, "DIA_Balor_TellDealer_ForgetIt_15_00"); //Çàáóäü îá ýòîì.
    info_clearchoices(dia_balor_ripoff /*10439*/);
};

instance dia_balor_perm(c_info) {
    npc = nov_1304_balor /*7595*/;
    nr = 1;
    condition = dia_balor_perm_condition;
    information = dia_balor_perm_info;
    permanent = true;
    description = "Ïðîäîëæàé ñîáèðàòü!";
};

func int dia_balor_perm_condition() {
    if (npc_knowsinfo(hero, dia_balor_fetchweed /*10422*/)) {
        return 1;
    };
};

func void dia_balor_perm_info() {
    ai_output(other, self, "DIA_Balor_Perm_15_00"); //Ïðîäîëæàé ñîáèðàòü!
    ai_output(self, other, "DIA_Balor_Perm_01_01"); //À ÷åì, ïî-òâîåìó, ÿ çàíèìàþü? Ïðîñèæèâàþ çàäíèöó?
};

instance dia_joru_exit(c_info) {
    npc = nov_1305_joru /*7597*/;
    nr = 999;
    condition = dia_joru_exit_condition;
    information = dia_joru_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_joru_exit_condition() {
    return 1;
};

func void dia_joru_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_joru_greet(c_info) {
    npc = nov_1305_joru /*7597*/;
    nr = 1;
    condition = dia_joru_greet_condition;
    information = dia_joru_greet_info;
    description = "×åì òû çàíèìàåøüñÿ?";
};

func int dia_joru_greet_condition() {
    return 1;
};

func void dia_joru_greet_info() {
    ai_output(other, self, "DIA_Joru_Greet_15_00"); //×åì òû çàíèìàåøüñÿ?
    ai_output(self, other, "DIA_Joru_Greet_07_01"); //ß íåñó ó÷åíèêàì ñëîâî Ñïÿùåãî.
    ai_output(self, other, "DIA_Joru_Greet_07_02"); //ß ñàì ïîêà åùå ó÷óñü, íî ñêîðî ÿ áóäó Èäîëîì - îäíèì èç Ãóðó.
    ai_output(self, other, "DIA_Joru_Greet_07_03"); //ß äàæå ãîâîðèë ñ ñàìèì Þ`Áåðèîíîì. Îí - Èçáðàííûé. Îí ñêàçàë ìíå, ÷òî åñëè ÿ áóäó ìíîãî òðóäèòüñÿ, ÿ âñêîðå ñàì ñòàíó ãîñïîäèíîì.
    ai_output(self, other, "DIA_Joru_Greet_07_04"); //Íî ÿ íå òîðîïëþñü ñ ýòèì. Ãîñïîäèíîì ÿ ìîãó ñòàòü â ëþáîé ìîìåíò, ïîíèìàåøü?
    ai_output(self, other, "DIA_Joru_Greet_07_05"); //À ïîêà ìíå íðàâèòñÿ òî äåëî, êîòîðûì ÿ çàíèìàþñü ñåé÷àñ.
};

instance dia_joru_tester(c_info) {
    npc = nov_1305_joru /*7597*/;
    nr = 1;
    condition = dia_joru_tester_condition;
    information = dia_joru_tester_info;
    description = "×åì òû çàíèìàåøüñÿ?";
};

func int dia_joru_tester_condition() {
    if (npc_knowsinfo(hero, dia_joru_greet /*10450*/)) {
        return 1;
    };
};

func void dia_joru_tester_info() {
    ai_output(other, self, "DIA_Joru_Tester_15_00"); //×åì òû çàíèìàåøüñÿ?
    ai_output(self, other, "DIA_Joru_Tester_07_01"); //Âìåñòå ñ ìîèìè äðóçüÿìè ÿ èñïûòûâàþ íîâûå ýëèêñèðû, êîòîðûå Êîð Ãàëîì ñîçäàåò â ñâîåé ëàáîðàòîðèè.
    ai_output(self, other, "DIA_Joru_Tester_07_02"); //Ðàç â íåñêîëüêî äíåé åãî ïîìîùíèê âûäàåò íàì íîâûå îáðàçöû. È ìû èñïûòûâàåì èõ.
    ai_output(self, other, "DIA_Joru_Tester_07_03"); //Ýòà òðàâà ðàñêðûâàåò òâîå ñîçíàíèå. Ïðèíÿâ ïðàâèëüíóþ äîçó, òû ìîæåøü ãîâîðèòü ñî Ñïÿùèì.
};

instance dia_joru_sleepercontact(c_info) {
    npc = nov_1305_joru /*7597*/;
    nr = 1;
    condition = dia_joru_sleepercontact_condition;
    information = dia_joru_sleepercontact_info;
    description = "È òû êîãäà-íèáóäü ãîâîðèë ñî Ñïÿùèì?";
};

func int dia_joru_sleepercontact_condition() {
    if (npc_knowsinfo(hero, dia_joru_tester /*10453*/)) {
        return 1;
    };
};

func void dia_joru_sleepercontact_info() {
    ai_output(other, self, "DIA_Joru_SleeperContact_15_00"); //È òû êîãäà-íèáóäü ãîâîðèë ñî Ñïÿùèì?
    ai_output(self, other, "DIA_Joru_SleeperContact_07_01"); //Íåò. Åùå íåò. È âñå ïîòîìó, ÷òî íàì íå õâàòàåò ýòîãî ñíàäîáüÿ.
    ai_output(self, other, "DIA_Joru_SleeperContact_07_02"); //Êîð Ãàëîìà èíòåðåñóåò òîëüêî ðåçóëüòàò, à ìîå ìíåíèå, êàê ìíå êàæåòñÿ, åãî íå çàíèìàåò âîâñå.
    ai_output(self, other, "DIA_Joru_SleeperContact_07_03"); //Åñëè ñîñòàâ îêàçûâàåò äîëæíîå äåéñòâèå, îí ñðàçó ïåðåäàåò åãî Ãóðó...
    ai_output(self, other, "DIA_Joru_SleeperContact_07_04"); //Íî ñêîðî ÿ è ñàì ñòàíó Ãóðó, è òîãäà, ðàñøèðèâ ñîçíàíèå äî ïðåäåëà, ÿ òîæå ñìîãó óñëûøàòü ãîëîñ Ñïÿùåãî.
};

var int joru_bringjoints;

instance dia_joru_joinpsi(c_info) {
    npc = nov_1305_joru /*7597*/;
    nr = 5;
    condition = dia_joru_joinpsi_condition;
    information = dia_joru_joinpsi_info;
    description = "ß õîòåë áû ïðèñîåäèíèòüñÿ ê âàøåìó Ëàãåðþ. Òû ìîã áû ìíå ïîìî÷ü?";
};

func int dia_joru_joinpsi_condition() {
    if (npc_knowsinfo(hero, dia_joru_greet /*10450*/) && (npc_gettrueguild(hero) == gil_none)) {
        return 1;
    };
};

func void dia_joru_joinpsi_info() {
    ai_output(other, self, "DIA_Joru_JoinPsi_15_00"); //ß õîòåë áû ïðèñîåäèíèòüñÿ ê âàøåìó Ëàãåðþ. Òû ìîã áû ìíå ïîìî÷ü?
    ai_output(self, other, "DIA_Joru_JoinPsi_07_01"); //Òû õî÷åøü ïðèñîåäèíèòüñÿ ê íàì? Õîðîøî! Ïîñòîé-êà... äà, äóìàþ, ÷òî ÿ ñìîãó òåáå ïîìî÷ü.
    ai_output(self, other, "DIA_Joru_JoinPsi_07_02"); //ß ïîêà ÷òî íå Ãóðó, íî îáëàäàþ îïðåäåëåííûì âëèÿíèåì â Áðàòñòâå.
    ai_output(self, other, "DIA_Joru_JoinPsi_07_03"); //Ñäåëàé ìíå îäîëæåíèå. Òû âåäü óæå ãîâîðèë ñ Ôîðòóíî?
    info_clearchoices(dia_joru_joinpsi /*10460*/);
    info_addchoice(dia_joru_joinpsi /*10460*/, "Íåò.", dia_joru_joinpsi_nein);
    info_addchoice(dia_joru_joinpsi /*10460*/, "Äà.", dia_joru_joinpsi_ja);
};

func void dia_joru_joinpsi_ja() {
    ai_output(other, self, "GUR_1201_CorKalom_SACHE_JA_15_01"); //Äà.
    ai_output(self, other, "DIA_Joru_JoinPsi_Ja_07_00"); //Òîãäà òû äîëæåí áûë ïîëó÷èòü ñâîþ äíåâíóþ äîçó. Åñëè òû îòäàøü åå ìíå, ÿ ïîñòàðàþñü òåáå ïîìî÷ü.
    ai_output(other, self, "DIA_Joru_JoinPsi_Ja_15_01"); //ß ïîäóìàþ îá ýòîì.
    joru_bringjoints = log_running;
    info_clearchoices(dia_joru_joinpsi /*10460*/);
};

func void dia_joru_joinpsi_nein() {
    ai_output(other, self, "GUR_1201_CorKalom_SACHE_NEIN_15_01"); //Íåò.
    ai_output(self, other, "DIA_Joru_JoinPsi_Nein_07_00"); //Òàê èäè ê íåìó è çàáåðè ñâîþ äíåâíóþ äîçó. Åñëè òû îòäàøü ìíå ñâîé áîëîòíèê, ÿ ïîñòàðàþñü ïîìî÷ü òåáå.
    ai_output(other, self, "DIA_Joru_JoinPsi_Nein_15_01"); //ß ïîäóìàþ îá ýòîì.
    joru_bringjoints = log_running;
    log_createtopic(ch1_joinpsi, log_mission);
    log_settopicstatus(ch1_joinpsi, log_running);
    b_logentry(ch1_joinpsi, ch1_joinpsi_9);
    info_clearchoices(dia_joru_joinpsi /*10460*/);
};

instance dia_joru_jointsrunning(c_info) {
    npc = nov_1305_joru /*7597*/;
    nr = 5;
    condition = dia_joru_jointsrunning_condition;
    information = dia_joru_jointsrunning_info;
    permanent = true;
    description = "Áîëîòíèê ó ìåíÿ. Ìîæåøü çàáèðàòü.";
};

func int dia_joru_jointsrunning_condition() {
    if (joru_bringjoints == log_running) {
        return 1;
    };
};

func void dia_joru_jointsrunning_info() {
    ai_output(other, self, "DIA_Joru_JointsRunning_15_00"); //Áîëîòíèê ó ìåíÿ. Ìîæåøü çàáèðàòü.
    if (npc_hasitems(other, itmijoint_2) >= 3) {
        ai_output(self, other, "DIA_Joru_JointsRunning_07_01"); //Õîðîøî! Òû, äîëæíî áûòü, çàìåòèë, ÷òî íèêòî èç Ãóðó íå õî÷åò ñ òîáîé ðàçãîâàðèâàòü.
        ai_output(self, other, "DIA_Joru_JointsRunning_07_02"); //×òîáû äîáèòüñÿ ñâîåãî, íóæíî ïðîèçâåñòè íà íèõ âïå÷àòëåíèå. ß ðàññêàæó òåáå, êàê ýòî ñäåëàòü.
        b_giveinvitems(other, self, itmijoint_2 /*4513*/, 3);
        joru_bringjoints = log_success;
        b_givexp(xp_weedforjoru);
    }
    else {
        ai_output(self, other, "DIA_Joru_JointsRunning_NO_JOINTS_07_00"); //Êàæåòñÿ, ìû ñîøëèñü íà òðåõ ñòåáëÿõ 'ñåâåðíîãî òåìíîãî'?! Îòäàé ìíå áîëîòíèê, è ÒÎÃÄÀ ÿ ïîìîãó òåáå!
    };
};

var int joru_tips;

instance dia_joru_impressgurus(c_info) {
    npc = nov_1305_joru /*7597*/;
    nr = 5;
    condition = dia_joru_impressgurus_condition;
    information = dia_joru_impressgurus_info;
    permanent = true;
    description = "Êàê ïðîèçâåñòè âïå÷àòëåíèå íà Ãóðó?";
};

func int dia_joru_impressgurus_condition() {
    if (joru_bringjoints == log_success) {
        return 1;
    };
};

func void dia_joru_impressgurus_info() {
    ai_output(other, self, "DIA_Joru_ImpressGurus_15_00"); //Êàê ïðîèçâåñòè âïå÷àòëåíèå íà Ãóðó?
    ai_output(self, other, "DIA_Joru_ImpressGurus_07_01"); //Èäîë Êàäàð íàñòàâëÿåò ó÷åíèêîâ â ìàãèè Ñïÿùåãî.
    ai_output(self, other, "DIA_Joru_ImpressGurus_07_02"); //Åñëè õî÷åøü, ÷òîáû îí îáðàòèë íà òåáÿ âíèìàíèå, èñïîëüçóé ìàãèþ.
    ai_output(self, other, "DIA_Joru_ImpressGurus_07_03"); //Òîëüêî íå âçäóìàé îïðîáîâàòü íà íåì Êóëàê Âåòðà! Ïîãðóçè êîãî-íèáóäü èç ó÷åíèêîâ â ñîí èëè ñäåëàé åùå ÷òî-íèáóäü âðîäå ýòîãî.
    ai_output(self, other, "DIA_Joru_ImpressGurus_07_04"); //Ñëîæíåå âñåãî áóäåò ñ Èäîëîì Íàìèáîì - ýòî òîò òèï ó ãëàâíûõ âîðîò. Äóìàþ, çäåñü òåáå ñìîæåò ïîìî÷ü Ëåñòåð. Ïîãîâîðè ñ íèì, êîãäà åãî ãîñïîäèíà íå áóäåò ïîáëèçîñòè.
    ai_output(self, other, "DIA_Joru_ImpressGurus_07_05"); //Çàòî ñ îñòàëüíûìè Ãóðó ïðîáëåì áûòü íå äîëæíî - ïðîñòî ïîñòàðàéñÿ áûòü ïîëåçíûì.
    ai_output(other, self, "DIA_Joru_ImpressGurus_15_06"); //Áëàãîäàðþ çà ñîâåò.
    ai_output(self, other, "DIA_Joru_ImpressGurus_07_07"); //Õåé - ñäåëêà åñòü ñäåëêà!
    if (joru_joinpsi == false) {
        b_logentry(ch1_joinpsi, ch1_joinpsi_10);
        b_logentry(ch1_joinpsi, ch1_joinpsi_11);
        joru_joinpsi = true;
    };
    joru_tips = true;
};

instance dia_joru_getmagic(c_info) {
    npc = nov_1305_joru /*7597*/;
    nr = 5;
    condition = dia_joru_getmagic_condition;
    information = dia_joru_getmagic_info;
    permanent = true;
    description = "Êàê íàó÷èòüñÿ ìàãèè Ñïÿùåãî?";
};

func int dia_joru_getmagic_condition() {
    if (joru_tips == true) {
        return 1;
    };
};

func void dia_joru_getmagic_info() {
    if (joru_tips_mage == false) {
        log_createtopic(ge_traderpsi, log_note);
        b_logentry(ge_traderpsi, ge_traderpsi_4);
        joru_tips_mage = true;
    };
    ai_output(other, self, "DIA_Joru_GetMagic_15_00"); //Êàê íàó÷èòüñÿ ìàãèè Ñïÿùåãî?
    ai_output(self, other, "DIA_Joru_GetMagic_07_01"); //Èäîë Êàäàð ïðîäàåò ðóíû è ìàãè÷åñêèå ñâèòêè. Ïðàâäà, åñëè îí íå æåëàåò ñ òîáîé ðàçãîâàðèâàòü, òîëêó îò ýòîãî íå ìíîãî.
    ai_output(self, other, "DIA_Joru_GetMagic_07_02"); //Âîçìîæíî, òåáå ñìîæåò ïîìî÷ü äðóãîé Ãóðó.
};

instance dia_ghorim_exit(c_info) {
    npc = nov_1310_ghorim /*7607*/;
    nr = 999;
    condition = dia_ghorim_exit_condition;
    information = dia_ghorim_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_ghorim_exit_condition() {
    return 1;
};

func void dia_ghorim_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_ghorim_missingharlok(c_info) {
    npc = nov_1310_ghorim /*7607*/;
    nr = 1;
    condition = dia_ghorim_missingharlok_condition;
    information = dia_ghorim_missingharlok_info;
    description = "Ïðèâåò! Êàê äåëà?";
};

func int dia_ghorim_missingharlok_condition() {
    return 1;
};

func void dia_ghorim_missingharlok_info() {
    ai_output(other, self, "DIA_Ghorim_MissingHarlok_15_00"); //Ïðèâåò! Êàê äåëà?
    ai_output(self, other, "DIA_Ghorim_MissingHarlok_02_01"); //ß âàëþñü ñ íîã, ïàðåíü. Ðàáîòàþ óæå äâà äíÿ - è íè ìèíóòû îòäûõà.
    ai_output(self, other, "DIA_Ghorim_MissingHarlok_02_02"); //Õàðëîê äàâíûì äàâíî äîëæåí áûë çàñòóïèòü íà ñìåíó. Ñ ýòèì ïàðíåì âñåãäà òàê.
    ai_output(self, other, "DIA_Ghorim_MissingHarlok_02_03"); //Íåáîñü äðûõíåò ñåé÷àñ ó ñåáÿ äîìà!
    ai_output(other, self, "DIA_Ghorim_MissingHarlok_15_04"); //Òàê ïî÷åìó áû òåáå íå íàâåäàòüñÿ ê íåìó â ãîñòè è íå ïíóòü åãî ïîä çàä?
    ai_output(self, other, "DIA_Ghorim_MissingHarlok_02_05"); //ß íå ìîãó óéòè, ïîêà äåæóðèò Èäîë Îðàí, - òóò ðàáîòà ïðåæäå âñåãî.
    ai_output(self, other, "DIA_Ghorim_MissingHarlok_02_06"); //Ìîæåò, òû ñõîäèøü âìåñòî ìåíÿ? Îí æèâåò ïîä ëàáîðàòîðèåé Êîð Ãàëîìà, ó Ôîðòóíî.
    ai_output(self, other, "DIA_Ghorim_MissingHarlok_02_07"); //Ñêàæè åìó, ÷òîáû îí íåìåäëåííî òàùèë ñâîþ çàäíèöó ñþäà.
    log_createtopic(ch1_ghorimsrelief, log_mission);
    log_settopicstatus(ch1_ghorimsrelief, log_running);
    b_logentry(ch1_ghorimsrelief, ch1_ghorimsrelief_2);
    ghorim_kickharlok = log_running;
};

instance dia_ghorim_success(c_info) {
    npc = nov_1310_ghorim /*7607*/;
    nr = 1;
    condition = dia_ghorim_success_condition;
    information = dia_ghorim_success_info;
    permanent = true;
    description = "Íó? Òåïåðü òû ñâîáîäåí?";
};

func int dia_ghorim_success_condition() {
    var c_npc harlok;

    harlok = hlp_getnpc(nov_1358_harlok);
    if ((ghorim_kickharlok == log_success) || ((ghorim_kickharlok == log_running) && npc_isdead(harlok))) {
        return 1;
    };
};

func void dia_ghorim_success_info() {
    var c_npc harlok;

    ai_output(other, self, "DIA_Ghorim_SUCCESS_15_00"); //Íó? Òåïåðü òû ñâîáîäåí?
    harlok = hlp_getnpc(nov_1358_harlok);
    if (!npc_isdead(harlok)) {
        ai_output(self, other, "DIA_Ghorim_SUCCESS_02_01"); //Äà, íàêîíåö-òî ÿ ìîãó ïîñïàòü. Ñïàñèáî, äðóæèùå!
    }
    else {
        b_say(self, other, "$GetOutOfHere");
        ghorim_kickharlok = log_failed;
        b_logentry(ch1_ghorimsrelief, ch1_ghorimsrelief_6);
        log_settopicstatus(ch1_ghorimsrelief, log_failed);
        ai_stopprocessinfos(self);
    };
};

instance dia_darrion_exit(c_info) {
    npc = nov_1312_darrion /*7612*/;
    nr = 999;
    condition = dia_darrion_exit_condition;
    information = dia_darrion_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_darrion_exit_condition() {
    return 1;
};

func void dia_darrion_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_darrion_hello(c_info) {
    npc = nov_1312_darrion /*7612*/;
    nr = 1;
    condition = dia_darrion_hello_condition;
    information = dia_darrion_hello_info;
    description = "Ïðèâåò! ß çäåñü íîâåíüêèé - ðàññêàæè ìíå î Ëàãåðå.";
};

func int dia_darrion_hello_condition() {
    return 1;
};

func void dia_darrion_hello_info() {
    ai_output(other, self, "DIA_Darrion_Hello_15_00"); //Ïðèâåò! ß çäåñü íîâåíüêèé, è ìíå íóæíî, ÷òîáû êòî-íèáóäü ðàññêàçàë ìíå î Ëàãåðå.
    ai_output(self, other, "DIA_Darrion_Hello_11_01"); //Òû âûáðàë íå ñàìîå óäà÷íîå âðåìÿ. Ñòðàæè ãîòîâÿòñÿ ê áîþ, è ìû ðàáîòàåì äåíü è íî÷ü.
    ai_output(self, other, "DIA_Darrion_Hello_11_02"); //Ó ìåíÿ íåò âðåìåíè íà áîëòîâíþ. Òàê ÷òî íå îòâëåêàé ìåíÿ - åñëè, êîíå÷íî, òû íå õî÷åøü ÷òî-íèáóäü êóïèòü.
    log_createtopic(ge_traderpsi, log_note);
    b_logentry(ge_traderpsi, ge_traderpsi_3);
};

instance dia_darrion_trade(c_info) {
    npc = nov_1312_darrion /*7612*/;
    nr = 800;
    condition = dia_darrion_trade_condition;
    information = dia_darrion_trade_info;
    permanent = true;
    trade = true;
    description = "Ïîêàæè, ÷òî ó òåáÿ åñòü.";
};

func int dia_darrion_trade_condition() {
    if (npc_knowsinfo(hero, dia_darrion_hello /*10489*/)) {
        return true;
    };
};

func void dia_darrion_trade_info() {
    ai_output(other, self, "DIA_Darrion_Trade_15_00"); //Ïîêàæè, ÷òî ó òåáÿ åñòü.
    ai_output(self, other, "DIA_Darrion_Trade_11_01"); //Äðóãîå äåëî. Âîò, çäåñü âñå, ÷òî åñòü ó ìåíÿ ñåãîäíÿ.
    if (npc_hasitems(self, itmiswordraw) < 5) {
        createinvitems(self, itmiswordraw, 5);
    };
    if (npc_hasitems(self, itmiswordrawhot) < 5) {
        createinvitems(self, itmiswordrawhot, 5);
    };
    if (npc_hasitems(self, itmiswordbladehot) < 5) {
        createinvitems(self, itmiswordbladehot, 5);
    };
    if (npc_hasitems(self, itmiswordblade) < 5) {
        createinvitems(self, itmiswordblade, 5);
    };
};

instance nov_1319_novize_callsleeper(c_info) {
    npc = nov_1319_novize /*7634*/;
    condition = nov_1319_novize_callsleeper_condition;
    information = nov_1319_novize_callsleeper_info;
    important = true;
};

func int nov_1319_novize_callsleeper_condition() {
    var c_npc novize;
    var c_npc kalom;

    novize = hlp_getnpc(nov_1319_novize);
    kalom = hlp_getnpc(gur_1201_corkalom);
    if (((((((corkalom_bringbook == log_success) && (npc_getdisttowp(novize, "PSI_TEMPLE_COURT_2") < 1000)) && c_timeforgreatprayer()) && (!npc_knowsinfo(hero, nov_1320_novize_callsleeper /*10500*/))) && (!npc_knowsinfo(hero, tpl_1431_templer_callsleeper /*12595*/))) && (!npc_knowsinfo(hero, tpl_1430_templer_callsleeper /*12590*/))) && (npc_getdisttowp(kalom, "PSI_TEMPLE_STAIRS_RIGHT") < 300)) {
        return true;
    };
};

func void nov_1319_novize_callsleeper_info() {
    ai_stopprocessinfos(self);
    b_kapitelwechsel(3);
};

instance nov_1320_novize_callsleeper(c_info) {
    npc = nov_1320_novize /*7637*/;
    condition = nov_1320_novize_callsleeper_condition;
    information = nov_1320_novize_callsleeper_info;
    important = true;
};

func int nov_1320_novize_callsleeper_condition() {
    var c_npc novize;
    var c_npc kalom;

    novize = hlp_getnpc(nov_1320_novize);
    kalom = hlp_getnpc(gur_1201_corkalom);
    if (((((((corkalom_bringbook == log_success) && (npc_getdisttowp(novize, "PSI_TEMPLE_COURT_3") < 1000)) && c_timeforgreatprayer()) && (!npc_knowsinfo(hero, nov_1319_novize_callsleeper /*10495*/))) && (!npc_knowsinfo(hero, tpl_1431_templer_callsleeper /*12595*/))) && (!npc_knowsinfo(hero, tpl_1430_templer_callsleeper /*12590*/))) && (npc_getdisttowp(kalom, "PSI_TEMPLE_STAIRS_RIGHT") < 300)) {
        return true;
    };
};

func void nov_1320_novize_callsleeper_info() {
    ai_stopprocessinfos(self);
    b_kapitelwechsel(3);
};

instance dia_baalparvez_exit(c_info) {
    npc = nov_1330_baalparvez /*7658*/;
    nr = 999;
    condition = dia_baalparvez_exit_condition;
    information = dia_baalparvez_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_baalparvez_exit_condition() {
    return 1;
};

func void dia_baalparvez_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_baalparvez_greet(c_info) {
    npc = nov_1330_baalparvez /*7658*/;
    nr = 1;
    condition = dia_baalparvez_greet_condition;
    information = dia_baalparvez_greet_info;
    important = true;
};

func int dia_baalparvez_greet_condition() {
    if (npc_getdisttonpc(self, hero) < zivilanquatschdist) {
        return 1;
    };
};

func void dia_baalparvez_greet_info() {
    ai_output(self, other, "DIA_BaalParvez_Greet_10_00"); //Äà ïðåáóäåò ñ òîáîé Ñïÿùèé, íåçíàêîìåö!
    ai_output(self, other, "DIA_BaalParvez_Greet_10_01"); //ß çäåñü, äëÿ òîãî ÷òîáû íàñòàâèòü òåáÿ íà ïóòü èñòèííûé.
};

instance dia_baalparvez_rightway(c_info) {
    npc = nov_1330_baalparvez /*7658*/;
    nr = 1;
    condition = dia_baalparvez_rightway_condition;
    information = dia_baalparvez_rightway_info;
    description = "È êàêîé æå ýòî ïóòü?";
};

func int dia_baalparvez_rightway_condition() {
    if (npc_knowsinfo(hero, dia_baalparvez_greet /*10508*/)) {
        return 1;
    };
};

func void dia_baalparvez_rightway_info() {
    ai_output(other, self, "DIA_BaalParvez_RightWay_15_00"); //È êàêîé æå ýòî ïóòü?
    ai_output(self, other, "DIA_BaalParvez_RightWay_10_01"); //Ïóòü Ñïÿùåãî. Ëèøü îí ñïîñîáåí ñäåëàòü íàñ ñâîáîäíûìè.
    ai_output(self, other, "DIA_BaalParvez_RightWay_10_02"); //Â íàøåì Ëàãåðå Ãóðó ãîòîâÿò Âåëèêóþ Öåðåìîíèþ. Îíè õîòÿò ïðèçâàòü Ñïÿùåãî.
    ai_output(self, other, "DIA_BaalParvez_RightWay_10_03"); //Äî ñèõ ïîð îí ãîâîðèë ñ íàìè â âèäåíèÿõ, íî òåïåðü ïðèøëî âðåìÿ óâèäåòü åãî âîî÷èþ.
    ai_output(self, other, "DIA_BaalParvez_RightWay_10_04"); //Äëÿ ýòîãî íàì ïîíàäîáèòñÿ ìíîãî ïîñëåäîâàòåëåé. Îáúåäèíèâ èõ äóõîâíóþ ñèëó, ìû ïðîáüåìñÿ ê íåìó.
    ai_output(self, other, "DIA_BaalParvez_RightWay_10_05"); //Íàø Ëàãåðü íàõîäèòñÿ íåäàëåêî îòñþäà, íà áîëîòàõ. Åñëè õî÷åøü, ÿ ìîãó îòâåñòè òåáÿ òóäà.
};

instance dia_baalparvez_myadvantage(c_info) {
    npc = nov_1330_baalparvez /*7658*/;
    nr = 1;
    condition = dia_baalparvez_myadvantage_condition;
    information = dia_baalparvez_myadvantage_info;
    description = "Êàêîé ìíå ðåçîí ïðèñîåäèíÿòüñÿ ê âàì?";
};

func int dia_baalparvez_myadvantage_condition() {
    if (npc_knowsinfo(hero, dia_baalparvez_rightway /*10511*/)) {
        return 1;
    };
};

func void dia_baalparvez_myadvantage_info() {
    ai_output(other, self, "DIA_BaalParvez_MyAdvantage_15_00"); //Êàêîé ìíå ðåçîí ïðèñîåäèíÿòüñÿ ê âàì?
    ai_output(self, other, "DIA_BaalParvez_MyAdvantage_10_01"); //Âîçìîæíî, òû ñòàíåøü îäíèì èç èçáðàííûõ, êòî ïîëó÷èò îò Ñïÿùåãî ìàãè÷åñêèé äàð.
    ai_output(self, other, "DIA_BaalParvez_MyAdvantage_10_02"); //Èëè òû äîñòîèí âûñøåé ÷åñòè - ñòàòü Ñòðàæåì. Òîëüêî ëó÷øèå èç âîèíîâ ìîãóò íîñèòü ýòî çâàíèå.
    ai_output(self, other, "DIA_BaalParvez_MyAdvantage_10_03"); //Åñëè áóäåò íà òî âîëÿ Ñïÿùåãî, òû ìîæåøü äàæå ñîâìåñòèòü îáà ýòèõ çàíÿòèÿ: ëó÷øèå èç Ñòðàæåé òàêæå îáëàäàþò ìàãè÷åñêèì äàðîì.
    ai_output(self, other, "DIA_BaalParvez_MyAdvantage_10_04"); //Êàê âèäèøü, íàøå Áðàòñòâî ïðåäîñòàâèò òåáå ìàññó âîçìîæíîñòåé.
    ai_output(self, other, "DIA_BaalParvez_MyAdvantage_10_05"); //Ñòîèò ïîäóìàòü îá ýòîì, ïðåæäå ÷åì òû ðåøèøü ïðèñîåäèíèòüñÿ ê êàêîìó-íèáóäü äðóãîìó Ëàãåðþ.
};

instance dia_baalparvez_sleeper(c_info) {
    npc = nov_1330_baalparvez /*7658*/;
    nr = 2;
    condition = dia_baalparvez_sleeper_condition;
    information = dia_baalparvez_sleeper_info;
    description = "Êòî òàêîé Ñïÿùèé?";
};

func int dia_baalparvez_sleeper_condition() {
    if (npc_knowsinfo(hero, dia_baalparvez_greet /*10508*/)) {
        return 1;
    };
};

func void dia_baalparvez_sleeper_info() {
    ai_output(other, self, "DIA_BaalParvez_Sleeper_15_00"); //Êòî òàêîé Ñïÿùèé?
    ai_output(self, other, "DIA_BaalParvez_Sleeper_10_01"); //Ñïÿùèé ãîâîðèò ñ íàìè âî ñíàõ è âèäåíèÿõ.
    ai_output(self, other, "DIA_BaalParvez_Sleeper_10_02"); //Îí óêàçûâàåò íàì ïóòü ñ òåõ ñàìûõ ïîð, êàê Þ`Áåðèîí âïåðâûå óñëûøàë åãî ãîëîñ. Ýòî áûëî ïÿòü ëåò íàçàä.
    ai_output(self, other, "DIA_BaalParvez_Sleeper_10_03"); //Âñå ÷ëåíû Áðàòñòâà îòâåðãàþò òðåõ áîãîâ. Ìû ìîëèìñÿ î ñïàñåíèè ëèøü Ñïÿùåìó.
    ai_output(other, self, "DIA_BaalParvez_Sleeper_15_04"); //Î ñïàñåíèè îò ÷åãî?
    ai_output(self, other, "DIA_BaalParvez_Sleeper_10_05"); //Î ñïàñåíèè èç ýòîãî ïðîêëÿòîãî ìåñòà, ðàçóìååòñÿ! Ñïÿùèé óêàæåò íàì ïóòü ê ñâîáîäå!
};

instance dia_baalparvez_sleepersaid(c_info) {
    npc = nov_1330_baalparvez /*7658*/;
    nr = 2;
    condition = dia_baalparvez_sleepersaid_condition;
    information = dia_baalparvez_sleepersaid_info;
    description = "È ÷òî ãîâîðèò âàì Ñïÿùèé?";
};

func int dia_baalparvez_sleepersaid_condition() {
    if (npc_knowsinfo(hero, dia_baalparvez_sleeper /*10517*/)) {
        return 1;
    };
};

func void dia_baalparvez_sleepersaid_info() {
    ai_output(other, self, "DIA_BaalParvez_SleeperSaid_15_00"); //È ÷òî ãîâîðèò âàì Ñïÿùèé?
    ai_output(self, other, "DIA_BaalParvez_SleeperSaid_10_01"); //Îí ïðèâåë íàñ íà áîëîòà, ê ðóèíàì ñòàðîãî õðàìà. Òàì ìû ïîñòðîèëè íîâûé Ëàãåðü.
    ai_output(self, other, "DIA_BaalParvez_SleeperSaid_10_02"); //Îí äàðîâàë íàì ñâîáîäó - íèêòî èç íàñ íå ãíåò ñïèíó â øàõòàõ.
    ai_output(self, other, "DIA_BaalParvez_SleeperSaid_10_03"); //Îí îòêðûë íàì âîëøåáíóþ ñèëó áîëîòíèêà. Ìû ïðîäàåì åãî äðóãèì Ëàãåðÿì, è â îáìåí ïîëó÷àåì âñå, ÷òî íàì íóæíî.
    ai_output(self, other, "DIA_BaalParvez_SleeperSaid_10_04"); //Íåêîòîðûõ èç íàñ îí íàãðàäèë ìàãè÷åñêèì äàðîì. Ýòà ìàãèÿ êóäà áîëåå äðåâíÿÿ è ìîãóùåñòâåííàÿ, ÷åì òà, ê êîòîðîé ïðèâûêëè æèòåëè êîëîíèè.
};

instance dia_baalparvez_psimagic(c_info) {
    npc = nov_1330_baalparvez /*7658*/;
    nr = 4;
    condition = dia_baalparvez_psimagic_condition;
    information = dia_baalparvez_psimagic_info;
    description = "Ðàññêàæè ìíå î ìàãèè Ñïÿùåãî.";
};

func int dia_baalparvez_psimagic_condition() {
    if (npc_knowsinfo(hero, dia_baalparvez_sleepersaid /*10520*/)) {
        return 1;
    };
};

func void dia_baalparvez_psimagic_info() {
    ai_output(other, self, "DIA_BaalParvez_PSIMagic_15_00"); //Ðàññêàæè ìíå î ìàãèè Ñïÿùåãî.
    ai_output(self, other, "DIA_BaalParvez_PSIMagic_10_01"); //Ýòîò äàð ïîçâîëèò òåáå ñèëîé ðàçóìà òâîðèòü ÷óäåñà.
    ai_output(self, other, "DIA_BaalParvez_PSIMagic_10_02"); //Ëèøü Ãóðó íàøåãî Áðàòñòâà ïîñâÿùåíû â ñåêðåòû ìàãèè Ñïÿùåãî.
};

var int baalparvez_gotopsi_day;

instance dia_baalparvez_gotopsi(c_info) {
    npc = nov_1330_baalparvez /*7658*/;
    nr = 800;
    condition = dia_baalparvez_gotopsi_condition;
    information = dia_baalparvez_gotopsi_info;
    permanent = true;
    description = "Îòâåäè ìåíÿ â ñâîé Ëàãåðü. ß õî÷ó ïîñìîòðåòü íà íåãî.";
};

func int dia_baalparvez_gotopsi_condition() {
    if ((((npc_refusetalk(self) == false) && npc_knowsinfo(hero, dia_baalparvez_rightway /*10511*/)) && (npc_getdisttowp(self, "PATH_OC_PSI_18") > 5000)) && (!npc_knowsinfo(hero, dia_baalparvez_atpsi /*10530*/))) {
        return 1;
    };
};

func void dia_baalparvez_gotopsi_info() {
    ai_output(other, self, "DIA_BaalParvez_GotoPSI_15_00"); //Îòâåäè ìåíÿ â ñâîé Ëàãåðü. ß õî÷ó ïîñìîòðåòü íà íåãî.
    if (psi_walk == 0) {
        if (npc_gettrueguild(hero) == gil_none) {
            log_createtopic(ch1_joinpsi, log_mission);
            log_settopicstatus(ch1_joinpsi, log_running);
        };
        b_logentry(ch1_joinpsi, ch1_joinpsi_12);
        psi_walk = 1;
    };
    ai_output(self, other, "DIA_BaalParvez_GotoPSI_10_01"); //Î÷åíü õîðîøî! ß ïîéäó âïåðåäè. Ñëåäóé çà ìíîé.
    baalparvez_gotopsi_day = wld_getday();
    self.aivar[36] = true;
    npc_setrefusetalk(self, 300);
    ai_stopprocessinfos(self);
    npc_setpermattitude(self, att_friendly);
    npc_exchangeroutine(self, "GUIDE");
};

instance dia_baalparvez_atpsi(c_info) {
    npc = nov_1330_baalparvez /*7658*/;
    nr = 1;
    condition = dia_baalparvez_atpsi_condition;
    information = dia_baalparvez_atpsi_info;
    important = true;
};

func int dia_baalparvez_atpsi_condition() {
    if (hlp_strcmp(npc_getnearestwp(self), "PATH_OC_PSI_18")) {
        return 1;
    };
};

func void dia_baalparvez_atpsi_info() {
    var c_npc kalom;

    if (baalparvez_gotopsi_day > (wld_getday() - 2)) {
        ai_output(self, other, "DIA_BaalParvez_AtPSI_10_00"); //Âîò ìû è ïðèøëè. Ïåðåä íàìè íàõîäèòñÿ Ëàãåðü Áðàòñòâà.
    }
    else {
        ai_output(self, other, "DIA_BaalParvez_AtPSI_LATE_10_00"); //Íå ñïåøè, áðàò! Âîò è íàø Ëàãåðü.
    };
    ai_output(self, other, "DIA_BaalParvez_AtPSI_10_01"); //Çàõîäè â âîðîòà è ïîãîâîðè ñ ìîèìè áðàòüÿìè. Óâèäèøü, ÷òî ïðèäÿ ñþäà, òû íå ïîòðàòèë âðåìÿ âïóñòóþ.
    ai_output(self, other, "DIA_BaalParvez_AtPSI_10_02"); //Ñïðîñè Êîð Ãàëîìà. Îí çàíèìàåòñÿ ó÷åíèêàìè è èõ íàñòàâíèêàìè.
    ai_output(self, other, "DIA_BaalParvez_AtPSI_10_03"); //ß æå âîçâðàùàþñü â Ñòàðûé Ëàãåðü. Åñòü åùå ìíîãî íåâåðíûõ, êîòîðûõ íåîáõîäèìî íàñòàâèòü íà èñòèííûé ïóòü.
    ai_output(other, self, "DIA_BaalParvez_AtPSI_15_04"); //Óäà÷è òåáå!
    self.aivar[36] = false;
    b_logentry(ch1_joinpsi, ch1_joinpsi_13);
    b_givexp(xp_arrivedatpsicamp);
    kalom = hlp_getnpc(gur_1201_corkalom);
    kalom.aivar[7] = true;
    ai_stopprocessinfos(self);
    npc_exchangeroutine(self, "START");
};

instance dia_baaltaran_exit(c_info) {
    npc = nov_1331_baaltaran /*7661*/;
    nr = 999;
    condition = dia_baaltaran_exit_condition;
    information = dia_baaltaran_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_baaltaran_exit_condition() {
    return 1;
};

func void dia_baaltaran_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_baaltaran_greet(c_info) {
    npc = nov_1331_baaltaran /*7661*/;
    nr = 1;
    condition = dia_baaltaran_greet_condition;
    information = dia_baaltaran_greet_info;
    description = "ß çäåñü íîâåíüêèé. Êòî òû?";
};

func int dia_baaltaran_greet_condition() {
    return 1;
};

func void dia_baaltaran_greet_info() {
    ai_output(other, self, "DIA_BaalTaran_Greet_15_00"); //ß çäåñü íîâåíüêèé. Êòî òû?
    ai_output(self, other, "DIA_BaalTaran_Greet_05_01"); //ß Èäîë Áðàòñòâà Ñïÿùåãî, è çîâóò ìåíÿ Òýðàí.
};

instance dia_baaltaran_bruderschaft(c_info) {
    npc = nov_1331_baaltaran /*7661*/;
    nr = 1;
    condition = dia_baaltaran_bruderschaft_condition;
    information = dia_baaltaran_bruderschaft_info;
    description = "×òî òàêîå Áðàòñòâî Ñïÿùåãî?";
};

func int dia_baaltaran_bruderschaft_condition() {
    if (npc_knowsinfo(hero, dia_baaltaran_greet /*10537*/)) {
        return 1;
    };
};

func void dia_baaltaran_bruderschaft_info() {
    ai_output(other, self, "DIA_BaalTaran_Bruderschaft_15_00"); //×òî òàêîå Áðàòñòâî Ñïÿùåãî?
    ai_output(self, other, "DIA_BaalTaran_Bruderschaft_05_01"); //Òàê ìû íàçûâàåì áðàòñòâî ïîñëåäîâàòåëåé íîâîé âåðû.
    ai_output(self, other, "DIA_BaalTaran_Bruderschaft_05_02"); //Íàø Ëàãåðü íàõîäèòñÿ ñðåäè áîëîò íà âîñòîêå. ß ïðèøåë ñþäà, ÷òîáû íåñòè ñëîâî Ñïÿùåãî èíîâåðöàì - òàêèì, êàê òû.
};

instance dia_baaltaran_sleeper(c_info) {
    npc = nov_1331_baaltaran /*7661*/;
    nr = 1;
    condition = dia_baaltaran_sleeper_condition;
    information = dia_baaltaran_sleeper_info;
    description = "Êòî òàêîé Ñïÿùèé?";
};

func int dia_baaltaran_sleeper_condition() {
    if (npc_knowsinfo(hero, dia_baaltaran_greet /*10537*/)) {
        return 1;
    };
};

func void dia_baaltaran_sleeper_info() {
    ai_output(other, self, "DIA_BaalTaran_Sleeper_15_00"); //Êòî òàêîé Ñïÿùèé?
    ai_output(self, other, "DIA_BaalTaran_Sleeper_05_01"); //Ñïÿùèé - ýòî íàø ñïàñèòåëü. Ïÿòü ëåò íàçàä îí ÿâèë ñåáÿ íàøåìó íàñòàâíèêó Þ`Áåðèîíó.
    ai_output(self, other, "DIA_BaalTaran_Sleeper_05_02"); //Ñ òåõ ìû îòðåêëèñü îò òðåõ áîãîâ. È òåáå òîæå ñòîèò îòâåðãíóòü èõ.
    ai_output(self, other, "DIA_BaalTaran_Sleeper_05_03"); //Èç ñâîåé íåáåñíîé îáèòåëè îíè ëèøü íàáëþäàþò çà òåì, êàê ìû òîìèìñÿ â ýòîé òåìíèöå. Íî Ñïÿùèé ïðèâåäåò íàñ ê ñâîáîäå!
};

instance dia_baaltaran_lehre(c_info) {
    npc = nov_1331_baaltaran /*7661*/;
    nr = 3;
    condition = dia_baaltaran_lehre_condition;
    information = dia_baaltaran_lehre_info;
    description = "Ðàññêàæè ìíå îá ó÷åíèè Ñïÿùåãî.";
};

func int dia_baaltaran_lehre_condition() {
    if (npc_knowsinfo(hero, dia_baaltaran_bruderschaft /*10540*/)) {
        return 1;
    };
};

func void dia_baaltaran_lehre_info() {
    ai_output(other, self, "DIA_BaalTaran_Lehre_15_00"); //Ðàññêàæè ìíå îá ó÷åíèè Ñïÿùåãî.
    ai_output(self, other, "DIA_BaalTaran_Lehre_05_01"); //Ìîùü Ñïÿùåãî íåèçìåðèìà. Âîçìîæíî, îí äàæå ñèëüíåå Èííîñà, áîãà Ñâåòà.
    ai_output(self, other, "DIA_BaalTaran_Lehre_05_02"); //Äóõ åãî ñ íàìè, íî ñàì Ñïÿùèé åùå íå íàáðàë ïîëíóþ ñèëó. Òûñÿ÷ó ëåò îí ïðîâåë âî ñíå, íî ìîìåíò åãî ïðîáóæäåíèÿ áëèçîê.
    ai_output(self, other, "DIA_BaalTaran_Lehre_05_03"); //Ìû áûëè èçáðàíû íåñòè ëþäÿì ñëîâî åãî, ìû æå ñòàíåì ñâèäèòåëÿìè åãî ïðîáóæäåíèÿ.
    ai_output(self, other, "DIA_BaalTaran_Lehre_05_04"); //Çíàé, ÷òî òå, êòî ïðèñîåäèíèòñÿ ê Ñïÿùåìó, îáðåòóò áåññìåðòíóþ äóøó, íåâåðíûõ æå æäåò áåñïîùàäíàÿ êàðà.
    ai_output(self, other, "DIA_BaalTaran_Lehre_05_05"); //Íî â áåñêîíå÷íîé ìèëîñòè ñâîåé Ñïÿùèé ïîñûëàåò äîêàçàòåëüñòâî ñâîåé ñèëû âñåì, êîãî òåðçàþò ñîìíåíèÿ.
};

instance dia_baaltaran_freiheit(c_info) {
    npc = nov_1331_baaltaran /*7661*/;
    nr = 4;
    condition = dia_baaltaran_freiheit_condition;
    information = dia_baaltaran_freiheit_info;
    description = "Êàêèì æå îí áóäåò, ýòîò ïóòü ê ñâîáîäå?";
};

func int dia_baaltaran_freiheit_condition() {
    if (npc_knowsinfo(hero, dia_baaltaran_sleeper /*10543*/)) {
        return 1;
    };
};

func void dia_baaltaran_freiheit_info() {
    ai_output(other, self, "DIA_BaalTaran_Freiheit_15_00"); //Êàêèì æå îí áóäåò, ýòîò ïóòü ê ñâîáîäå?
    ai_output(self, other, "DIA_BaalTaran_Freiheit_05_01"); //Âñå ìû ãîòîâèìñÿ ê Âåëèêîé Öåðåìîíèè, â õîäå êîòîðîé íàøè áðàòüÿ îáúåäèíÿò ñâîè ñèëû è ïðèçîâóò Ñïÿùåãî.
    ai_output(self, other, "DIA_BaalTaran_Freiheit_05_02"); //È òîãäà Âñåìîãóùèé îòêðîåò íàì ïóòü ê ñâîáîäå!
};

instance dia_baaltaran_beweis(c_info) {
    npc = nov_1331_baaltaran /*7661*/;
    nr = 3;
    condition = dia_baaltaran_beweis_condition;
    information = dia_baaltaran_beweis_info;
    description = "Êàêèå äîêàçàòåëüñòâà ñâîåé ñèëû ïîñûëàåò òâîé áîã?";
};

func int dia_baaltaran_beweis_condition() {
    if (npc_knowsinfo(hero, dia_baaltaran_sleeper /*10543*/)) {
        return 1;
    };
};

func void dia_baaltaran_beweis_info() {
    ai_output(other, self, "DIA_BaalTaran_Beweis_15_00"); //Êàêèå äîêàçàòåëüñòâà ñâîåé ñèëû ïîñûëàåò òâîé áîã?
    ai_output(self, other, "DIA_BaalTaran_Beweis_05_01"); //Îí ãîâîðèò ñ íàìè â âèäåíèÿõ. Òå, êîìó õîòü ðàç äîâåëîñü óñëûøàòü åãî ãîëîñ, áîëüøå íå ñîìíåâàþòñÿ â ñèëå Ñïÿùåãî.
    ai_output(self, other, "DIA_BaalTaran_Beweis_05_02"); //Íà áîëîòå ðàñòåò òðàâà, êîòîðàÿ ïîìîæåò òåáå ñòàòü áëèæå ê Ñïÿùåìó è óñëûøàòü åãî ãîëîñ. Íåêîòîðûå èç íàñ äàæå âèäÿò ïîñûëàåìûå èì îáðàçû.
    ai_output(other, self, "DIA_BaalTaran_Beweis_15_03"); //ßñíî.
};

instance dia_baaltaran_waytost(c_info) {
    npc = nov_1331_baaltaran /*7661*/;
    nr = 1;
    condition = dia_baaltaran_waytost_condition;
    information = dia_baaltaran_waytost_info;
    description = "Êàê äîáðàòüñÿ äî Ëàãåðÿ Áðàòñòâà?";
};

func int dia_baaltaran_waytost_condition() {
    if (npc_knowsinfo(hero, dia_baaltaran_bruderschaft /*10540*/)) {
        return 1;
    };
};

func void dia_baaltaran_waytost_info() {
    ai_output(other, self, "DIA_BaalTaran_WayToST_15_00"); //Êàê äîáðàòüñÿ äî Ëàãåðÿ Áðàòñòâà?
    ai_output(self, other, "DIA_BaalTaran_WayToST_05_01"); //ß íå ìîãó îòîðâàòüñÿ îò äåë, íî ñåé÷àñ â ýòîì Ëàãåðå íàõîäèòñÿ Èäîë Ïàðâåç.
    ai_output(self, other, "DIA_BaalTaran_WayToST_05_02"); //Òû íàéäåøü åãî ó ðûíêà, ïî äðóãóþ ñòîðîíó çàìêà. Êàæåòñÿ, ó íåãî äàæå åñòü òàì ñâîÿ õèæèíà.
    if (npc_gettrueguild(hero) == gil_none) {
        log_createtopic(ch1_joinpsi, log_mission);
        log_settopicstatus(ch1_joinpsi, log_running);
    };
    b_logentry(ch1_joinpsi, ch1_joinpsi_14);
};

instance dia_baaltaran_intocastle(c_info) {
    npc = nov_1331_baaltaran /*7661*/;
    nr = 10;
    condition = dia_baaltaran_intocastle_condition;
    information = dia_baaltaran_intocastle_info;
    permanent = true;
    description = "ß äîëæåí ïîïàñòü â çàìîê. Òû ìîæåøü ïîìî÷ü ìíå?";
};

func int dia_baaltaran_intocastle_condition() {
    if (npc_knowsinfo(hero, dia_baaltaran_greet /*10537*/)) {
        return 1;
    };
};

func void dia_baaltaran_intocastle_info() {
    ai_output(other, self, "DIA_BaalTaran_IntoCastle_15_00"); //ß äîëæåí ïîïàñòü â çàìîê. Òû ìîæåøü ïîìî÷ü ìíå?
    ai_output(self, other, "DIA_BaalTaran_IntoCastle_05_01"); //Áîþñü, ÷òî íåò, áðàò ìîé. Âîðîòà çàìêà îòêðûòû ëèøü äëÿ òåõ ÷ëåíîâ Áðàòñòâà, êòî äîñòàâëÿåò Ãîìåçó áîëîòíèê.
    ai_output(self, other, "DIA_BaalTaran_IntoCastle_05_02"); //×àñòü ñîáðàííîé íà áîëîòàõ òðàâû ìû ïðîäàåì Ñòàðîìó Ëàãåðþ, è ïîëó÷àåì âçàìåí âåùè èç âíåøíåãî ìèðà.
    ai_output(self, other, "DIA_BaalTaran_IntoCastle_05_03"); //Åñëè áû òû áûë îäíèì èç ãîíöîâ Êîð Ãàëîìà, äî áåç òðóäà ïðîíèê áû â çàìîê. Íî ïðåæäå òû äîëæåí ñòàòü îäíèì èç ÷ëåíîâ Áðàòñòâà.
    ai_output(self, other, "DIA_BaalTaran_IntoCastle_05_04"); //Íî ÷òî çà äåëà ó òåáÿ â çàìêå?
    info_clearchoices(dia_baaltaran_intocastle /*10558*/);
    info_addchoice(dia_baaltaran_intocastle /*10558*/, "ß äîëæåí âñòðåòèòüñÿ òàì ñ îäíèì ÷åëîâåêîì.", dia_baaltaran_intocastle_meetsomeone);
    info_addchoice(dia_baaltaran_intocastle /*10558*/, "Ó ìåíÿ åñòü ïèñüìî Âåðõîâíîìó Ìàãó Êðóãà Îãíÿ.", dia_baaltaran_intocastle_letter);
};

func void dia_baaltaran_intocastle_meetsomeone() {
    ai_output(other, self, "DIA_BaalTaran_IntoCastle_MeetSomeone_15_00"); //ß äîëæåí âñòðåòèòüñÿ òàì ñ îäíèì ÷åëîâåêîì.
    ai_output(self, other, "DIA_BaalTaran_IntoCastle_MeetSomeone_05_01"); //Â ñàìîì äåëå? È ñ êåì æå? Ïî÷åìó òû ïðîñòî íå ïîäîæäåøü, ïîêà îí âûéäåò èç çàìêà?
    info_clearchoices(dia_baaltaran_intocastle /*10558*/);
    info_addchoice(dia_baaltaran_intocastle /*10558*/, "Òåáÿ ýòî íå êàñàåòñÿ.", dia_baaltaran_intocastle_forgetit);
    info_addchoice(dia_baaltaran_intocastle /*10558*/, "Ýòî îäèí èç ìàãîâ.", dia_baaltaran_intocastle_mage);
};

func void dia_baaltaran_intocastle_letter() {
    ai_output(other, self, "DIA_BaalTaran_IntoCastle_Letter_15_00"); //Ó ìåíÿ åñòü ïèñüìî äëÿ Âåðõîâíîãî Ìàãà Êðóãà Îãíÿ.
    ai_output(self, other, "DIA_BaalTaran_IntoCastle_Letter_05_01"); //Î? Îòêóäà îíî ó òåáÿ? Òåáå åãî äàëè ìàãè, ïðåæäå ÷åì çàáðîñèòü ñþäà, âåðíî?
    ai_output(self, other, "DIA_BaalTaran_IntoCastle_Letter_05_02"); //Íå ñòîèò áîëòàòü îá ýòîì ïèñüìå. Íå âîëíóéñÿ - ÿ íèêîìó íå ðàññêàæó î íåì.
    ai_output(self, other, "DIA_BaalTaran_IntoCastle_Letter_05_03"); //Íî ðàäè ñâîåãî æå ñîáñòâåííîãî áëàãà áîëüøå íèêîìó íå ãîâîðè îá ýòîì. Çà ýòî ïèñüìî çäåøíèé íàðîä íå çàäóìûâàÿñü ïåðåðåæåò òåáå ãëîòêó.
    ai_output(self, other, "DIA_BaalTaran_IntoCastle_Letter_05_04"); //Êàæäîìó çàõî÷åòñÿ ïîëó÷èòü íàãðàäó, ïîëîæåííóþ ãîíöó, äîñòàâèâøåìó ïèñüìî èç âíåøíåãî ìèðà.
    info_clearchoices(dia_baaltaran_intocastle /*10558*/);
};

func void dia_baaltaran_intocastle_mage() {
    ai_output(other, self, "DIA_BaalTaran_IntoCastle_Mage_15_00"); //Ýòî îäèí èç ìàãîâ.
    ai_output(self, other, "DIA_BaalTaran_IntoCastle_Mage_05_01"); //Î! Çíàåøü, îíè íèêîãäà íå ïîêèäàþò çàìîê. Òåáå äåéñòâèòåëüíî ïðèäåòñÿ êàê-òî ïîïàñòü âíóòðü.
    ai_output(self, other, "DIA_BaalTaran_IntoCastle_Mage_05_02"); //Íî ÷òî òåáå îò íåãî íóæíî? Ìàãè÷åñêèå ðóíû? Èëè ýëèêñèð?
    info_clearchoices(dia_baaltaran_intocastle /*10558*/);
    info_addchoice(dia_baaltaran_intocastle /*10558*/, "Òåáÿ ýòî íå êàñàåòñÿ.", dia_baaltaran_intocastle_forgetit);
    info_addchoice(dia_baaltaran_intocastle /*10558*/, "Âåðíî.", dia_baaltaran_intocastle_exactly);
};

func void dia_baaltaran_intocastle_forgetit() {
    ai_output(other, self, "DIA_BaalTaran_IntoCastle_ForgetIt_15_00"); //Òåáÿ ýòî íå êàñàåòñÿ.
    ai_output(self, other, "DIA_BaalTaran_IntoCastle_ForgetIt_05_01"); //Õîðîøî, äðóã. ß ïðîñòî õîòåë ïîìî÷ü...
    info_clearchoices(dia_baaltaran_intocastle /*10558*/);
};

func void dia_baaltaran_intocastle_exactly() {
    ai_output(other, self, "DIA_BaalTaran_IntoCastle_Exactly_15_00"); //Óãàäàë.
    ai_output(self, other, "DIA_BaalTaran_IntoCastle_Exactly_05_01"); //ß òàê è çíàë! ×òî åùå ïàðåíü, âðîäå òåáÿ, ìîæåò õîòåòü îò ìàãîâ?!
    ai_output(self, other, "DIA_BaalTaran_IntoCastle_Exactly_05_02"); //Âîò òåáå õîðîøèé ñîâåò: çàáóäü î íèõ. Çà ñâîè ìàãè÷åñêèå ôîêóñû îíè ïðîñÿò ñëèøêîì ìíîãî ðóäû.
    ai_output(self, other, "DIA_BaalTaran_IntoCastle_Exactly_05_03"); //Â íàøåì Ëàãåðå è ðóíû, è ýëèêñèðû ñòîÿò êóäà äåøåâëå.
    info_clearchoices(dia_baaltaran_intocastle /*10558*/);
};

instance dia_baalkagan_exit(c_info) {
    npc = nov_1332_baalkagan /*7663*/;
    nr = 999;
    condition = dia_baalkagan_exit_condition;
    information = dia_baalkagan_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_baalkagan_exit_condition() {
    return 1;
};

func void dia_baalkagan_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_baalkagan_hello(c_info) {
    npc = nov_1332_baalkagan /*7663*/;
    nr = 1;
    condition = dia_baalkagan_hello_condition;
    information = dia_baalkagan_hello_info;
    description = "Òû èç Ëàãåðÿ Ñåêòàíòîâ, âåðíî?";
};

func int dia_baalkagan_hello_condition() {
    return 1;
};

func void dia_baalkagan_hello_info() {
    ai_output(other, self, "DIA_BaalKagan_Hello_15_00"); //Òû èç Ëàãåðÿ Ñåêòàíòîâ, âåðíî?
    ai_output(self, other, "DIA_BaalKagan_Hello_13_01"); //Ìû íàçûâàåì åãî Áðàòñòâîì.
    ai_output(self, other, "DIA_BaalKagan_Hello_13_02"); //ß - Èäîë Êàãàí. Äà ïðåáóäåò ñ òîáîé Ñïÿùèé!
};

instance dia_baalkagan_whyhere(c_info) {
    npc = nov_1332_baalkagan /*7663*/;
    nr = 1;
    condition = dia_baalkagan_whyhere_condition;
    information = dia_baalkagan_whyhere_info;
    description = "×åì òû çàíèìàåøüñÿ?";
};

func int dia_baalkagan_whyhere_condition() {
    if (npc_knowsinfo(hero, dia_baalkagan_hello /*10569*/)) {
        return 1;
    };
};

func void dia_baalkagan_whyhere_info() {
    ai_output(other, self, "DIA_BaalKagan_WhyHere_15_00"); //×òî òû çäåñü äåëàåøü?
    ai_output(self, other, "DIA_BaalKagan_WhyHere_13_01"); //Èçíà÷àëüíî ìåíÿ ïîñëàëè ñþäà óáåæäàòü ëþäåé ïðèñîåäèíèòüñÿ ê íàøåìó Áðàòñòâó.
    ai_output(self, other, "DIA_BaalKagan_WhyHere_13_02"); //Íî âàðâàðîâ íå èíòåðåñóåò äóõîâíîå ïðîñâåùåíèå. Â èòîãå ÿ ïðîñòî ïðîäàþ áîëîòíèê.
    ai_output(self, other, "DIA_BaalKagan_WhyHere_13_03"); //È îí ïîëüçóåòñÿ çäåñü áîëüøèì ñïðîñîì. Ñëèøêîì áîëüøèì. Ìíå ñ òðóäîì óäàåòñÿ îáåñïå÷èâàòü èõ ïîòðåáíîñòè.
    log_createtopic(ge_tradernc, log_note);
    b_logentry(ge_tradernc, ge_tradernc_4);
};

instance dia_baalkagan_trade(c_info) {
    npc = nov_1332_baalkagan /*7663*/;
    nr = 800;
    condition = dia_baalkagan_trade_condition;
    information = dia_baalkagan_trade_info;
    permanent = true;
    trade = true;
    description = "Ïîêàæè ìíå, ÷òî ó òåáÿ åñòü.";
};

func int dia_baalkagan_trade_condition() {
    if (npc_knowsinfo(hero, dia_baalkagan_whyhere /*10572*/)) {
        return 1;
    };
};

func void dia_baalkagan_trade_info() {
    ai_output(other, self, "DIA_BaalKagan_TRADE_15_00"); //Ïîêàæè ìíå, ÷òî ó òåáÿ åñòü.
    ai_output(self, other, "DIA_BaalKagan_TRADE_13_01"); //Êàê ïîæåëàåøü.
};

instance dia_baalkagan_orderhelp(c_info) {
    npc = nov_1332_baalkagan /*7663*/;
    nr = 2;
    condition = dia_baalkagan_orderhelp_condition;
    information = dia_baalkagan_orderhelp_info;
    description = "Ïî÷åìó îíè íå ïîøëþò ñþäà åùå îäíîãî ÷åëîâåêà?";
};

func int dia_baalkagan_orderhelp_condition() {
    if (npc_knowsinfo(hero, dia_baalkagan_whyhere /*10572*/)) {
        return 1;
    };
};

func void dia_baalkagan_orderhelp_info() {
    ai_output(other, self, "DIA_BaalKagan_OrderHelp_15_00"); //Ïî÷åìó îíè íå ïîøëþò ñþäà åùå îäíîãî ÷åëîâåêà?
    ai_output(self, other, "DIA_BaalKagan_OrderHelp_13_01"); //Èäîë Èñèäðî äîëæåí ïîìîãàòü ìíå, íî îí ïðîâîäèò âñå äíè â áàðå íà îçåðå, ãäå âûìåíèâàåò áîëîòíèê íà ðèñîâûé øíàïñ.
    ai_output(self, other, "DIA_BaalKagan_OrderHelp_13_02"); //Îí ñëèøêîì ïîäâåðæåí ïüÿíñòâó, è áîþñü, ÷òî ïîìîùè îò íåãî æäàòü íå ñòîèò.
    if (lares_get400ore == log_running) {
        log_createtopic(ch1_dealerjob, log_mission);
        log_settopicstatus(ch1_dealerjob, log_running);
        b_logentry(ch1_dealerjob, ch1_dealerjob_8);
    };
};

instance dia_baalkagan_wannahelp(c_info) {
    npc = nov_1332_baalkagan /*7663*/;
    nr = 3;
    condition = dia_baalkagan_wannahelp_condition;
    information = dia_baalkagan_wannahelp_info;
    description = "ß ìîãó ïîìî÷ü òåáå ïðîäàâàòü áîëîòíèê.";
};

func int dia_baalkagan_wannahelp_condition() {
    if (npc_knowsinfo(hero, dia_baalkagan_orderhelp /*10578*/)) {
        return 1;
    };
};

func void dia_baalkagan_wannahelp_info() {
    ai_output(other, self, "DIA_BaalKagan_WannaHelp_15_00"); //ß ìîãó ïîìî÷ü òåáå ïðîäàâàòü áîëîòíèê.
    ai_output(self, other, "DIA_BaalKagan_WannaHelp_13_01"); //Ñòîëü áîëüøîé ãðóç ýòîé òðàâû ÿ ìîãó äîâåðèòü ëèøü ÷ëåíó Áðàòñòâà.
    ai_output(self, other, "DIA_BaalKagan_WannaHelp_13_02"); //Íî òû ìîæåøü ïîìî÷ü ìíå ñ äàðàìè.
    ai_output(self, other, "DIA_BaalKagan_WannaHelp_13_03"); //Íå âñå åùå çíàþò îá ýòîé òðàâå. Ïîïðîáîâàâ åå ðàç, îíè õîòÿò âñå áîëüøå è áîëüøå, à çíà÷èò, ó ìåíÿ õîðîøî èäåò òîðãîâëÿ.
    ai_output(other, self, "DIA_BaalKagan_WannaHelp_15_04"); //Ïîæàëóé, òåïåðü òåáå íå ñïðàâèòüñÿ ñ ýòîé çàäà÷åé..
    ai_output(self, other, "DIA_BaalKagan_WannaHelp_13_05"); //Îá Èäîëå Èñèäðî âñêîðå ïîçàáîòÿòñÿ íàøè áðàòüÿ. ß óæå îòïðàâèë ïèñüìî Êîð Ãàëîìó.
};

instance dia_baalkagan_wasdrin(c_info) {
    npc = nov_1332_baalkagan /*7663*/;
    nr = 3;
    condition = dia_baalkagan_wasdrin_condition;
    information = dia_baalkagan_wasdrin_info;
    description = "Ñêàæè, ÷òî ÿ ïîëó÷ó, åñëè ïîìîãó òåáå ñ áîëîòíèêîì?";
};

func int dia_baalkagan_wasdrin_condition() {
    if (npc_knowsinfo(hero, dia_baalkagan_wannahelp /*10581*/)) {
        return 1;
    };
};

func void dia_baalkagan_wasdrin_info() {
    ai_output(other, self, "DIA_BaalKagan_WasDrin_15_00"); //Ñêàæè, ÷òî ÿ ïîëó÷ó, åñëè ïîìîãó òåáå ñ áîëîòíèêîì?
    ai_output(self, other, "DIA_BaalKagan_WasDrin_13_01"); //ß ùåäðî íàãðàæó òåáÿ, êàê òû ñàì òîãî ïîæåëàåøü.
    ai_output(self, other, "DIA_BaalKagan_WasDrin_13_02"); //Ó ìåíÿ åñòü ñâèòêè, â êîòîðûõ çàêëþ÷åíà ìîãóùåñòâåííàÿ ìàãèÿ Ñïÿùåãî.
    if (npc_gettrueguild(hero) == gil_none) {
        ai_output(self, other, "DIA_BaalKagan_WasDrin_13_03"); //Èëè, åñëè çàõî÷åøü, ÿ ìîãó ïîìî÷ü òåáå ñòàòü îäíèì èç ÷ëåíîâ íàøåãî Áðàòñòâà. Ó ìåíÿ õîðîøèå ñâÿçè ñ Êîð Ãàëîìîì è Èäîëîì Òèîíîì.
        ai_output(self, other, "DIA_BaalKagan_WasDrin_13_04"); //Îáà îíè - ïðèáëèæåííûå íàøåãî íàñòàâíèêà, Þ`Áåðèîíà.
    };
    ai_output(self, other, "DIA_BaalKagan_WasDrin_13_05"); //Åñëè òû ïðåäïî÷èòàåøü äåíüãè, ÿ ìîãó çàïëàòèòü òåáå ðóäîé. 100 ñàìîðîäêîâ - õîðîøàÿ ïëàòà çà òâîþ ðàáîòó.
};

var int baalkagan_verteilkraut;

instance dia_baalkagan_gimmekraut(c_info) {
    npc = nov_1332_baalkagan /*7663*/;
    nr = 3;
    condition = dia_baalkagan_gimmekraut_condition;
    information = dia_baalkagan_gimmekraut_info;
    description = "Ëàäíî, äàâàé ìíå áîëîòíèê. Êîìó ÿ äîëæåí åãî ðàçäàâàòü?";
};

func int dia_baalkagan_gimmekraut_condition() {
    if (npc_knowsinfo(hero, dia_baalkagan_wasdrin /*10584*/)) {
        return 1;
    };
};

func void dia_baalkagan_gimmekraut_info() {
    ai_output(other, self, "DIA_BaalKagan_GimmeKraut_15_00"); //Ëàäíî, äàâàé ìíå áîëîòíèê. Êîìó ÿ äîëæåí åãî ðàçäàâàòü?
    ai_output(self, other, "DIA_BaalKagan_GimmeKraut_13_01"); //Óâåðåí, òû áåç òðóäà íàéäåøü æåëàþùèõ. Ïðîñòî ãîâîðè ñ ëþäüìè. Íî ïîìíè - ïî ÎÄÍÎÌÓ ñòåáëþ êàæäîìó, íå áîëüøå.
    ai_output(self, other, "DIA_BaalKagan_GimmeKraut_13_02"); //È âîò åùå ÷òî: åñëè êòî-íèáóäü îòáåðåò ó òåáÿ áîëîòíèê, èëè òû âûêóðèøü åãî ñàì, íàøà ñäåëêà íå ñîñòîèòñÿ.
    ai_output(other, self, "DIA_BaalKagan_GimmeKraut_15_03"); //Ðàçóìååòñÿ.
    baalkagan_verteilkraut = log_running;
    log_createtopic(ch1_spreadjoints, log_mission);
    log_settopicstatus(ch1_spreadjoints, log_running);
    b_logentry(ch1_spreadjoints, ch1_spreadjoints_1);
    createinvitems(self, itmijoint_1, 10);
    b_giveinvitems(self, hero, itmijoint_1 /*4511*/, 10);
};

instance dia_baalkagan_success(c_info) {
    npc = nov_1332_baalkagan /*7663*/;
    nr = 3;
    condition = dia_baalkagan_success_condition;
    information = dia_baalkagan_success_info;
    permanent = true;
    description = "ß ðàçäàë áîëîòíèê, êàê òû è ïðîñèë.";
};

func int dia_baalkagan_success_condition() {
    if ((baalkagan_verteilkraut == log_running) && (nc_joints_verteilt > 0)) {
        return 1;
    };
};

func void dia_baalkagan_success_info() {
    ai_output(other, self, "DIA_BaalKagan_SUCCESS_15_00"); //ß ðàçäàë áîëîòíèê, êàê òû è ïðîñèë.
    if (nc_joints_verteilt >= 8) {
        ai_output(self, other, "DIA_BaalKagan_SUCCESS_13_01"); //À ó ìåíÿ óæå ïîáûâàëè íîâûå ïîêóïàòåëè. Òû ïðîäåëàë õîðîøóþ ðàáîòó.
        ai_output(self, other, "DIA_BaalKagan_SUCCESS_13_02"); //×òî òû õî÷åøü ïîëó÷èòü â íàãðàäó?
        info_clearchoices(dia_baalkagan_success /*10591*/);
        info_addchoice(dia_baalkagan_success /*10591*/, "ß âîçüìó ðóäó.", dia_baalkagan_success_erz);
        if (npc_gettrueguild(hero) == gil_none) {
            info_addchoice(dia_baalkagan_success /*10591*/, "Ïîìîãè ìíå ñòàòü ÷ëåíîì Áðàòñòâà.", dia_baalkagan_success_join);
        };
        info_addchoice(dia_baalkagan_success /*10591*/, "Êàêèå èíòåðåñíûå ìàãè÷åñêèå ñâèòêè. ×òî ýòî çà çàêëèíàíèÿ?", dia_baalkagan_success_whatspells);
        baalkagan_verteilkraut = log_success;
        log_settopicstatus(ch1_spreadjoints, log_success);
        b_logentry(ch1_spreadjoints, ch1_spreadjoints_2);
        b_givexp(xp_distributedweedforkagan);
    }
    else {
        ai_output(self, other, "DIA_BaalKagan_NO_SUCCESS_13_00"); //ß ïîêà ÷òî íå âèæó íîâûõ ïîêóïàòåëåé. Ðàçäàâàé åùå.
    };
};

func void dia_baalkagan_success_whatspells() {
    ai_output(other, self, "DIA_BaalKagan_SUCCESS_WhatSpells_15_00"); //Êàêèå èíòåðåñíûå ìàãè÷åñêèå ñâèòêè. ×òî ýòî çà çàêëèíàíèÿ?
    ai_output(self, other, "DIA_BaalKagan_SUCCESS_WhatSpells_13_01"); //Êóëàê Âåòðà, ×àðû, Òåëåêèíåç, Ïèðîêèíåç è Ñîí. Òû ìîæåøü âûáðàòü ëþáûå òðè.
    info_addchoice(dia_baalkagan_success /*10591*/, "ß âîçüìó ìàãè÷åñêèå ñâèòêè.", dia_baalkagan_success_takescrolls);
};

func void dia_baalkagan_success_join() {
    info_clearchoices(dia_baalkagan_success /*10591*/);
    ai_output(other, self, "DIA_BaalKagan_SUCCESS_Join_15_00"); //Ïîìîãè ìíå ñòàòü ÷ëåíîì Áðàòñòâà.
    ai_output(self, other, "DIA_BaalKagan_SUCCESS_Join_13_01"); //Òâîþ ïðîñüáó ëåãêî âûïîëíèòü. ß ïîìîãó òåáå. Èäîë Òèîí - îäèí èç íèçøèõ Ãóðó Áðàòñòâà, êàê è ÿ.
    ai_output(self, other, "DIA_BaalKagan_SUCCESS_Join_13_02"); //Þ`Áåðèîí ñäåëàë åãî ñâîèì ñîâåòíèêîì, íî õàðàêòåð Òèîíà îò ýòîãî íè÷óòü íå óëó÷øèëñÿ.
    ai_output(self, other, "DIA_BaalKagan_SUCCESS_Join_13_03"); //Òåïåðü îí ñ÷èòàåò ñåáÿ íàñòîëüêî âàæíîé ïåðñîíîé, ÷òî ãîâîðèò ëèøü ñî ñâîèìè ó÷åíèêàìè.
    ai_output(self, other, "DIA_BaalKagan_SUCCESS_Join_13_04"); //Åñëè òû îòäàøü åìó ýòî, îí ñäåëàåò äëÿ òåáÿ èñêëþ÷åíèå.
    createinvitem(self, specialjoint);
    b_giveinvitems(self, other, specialjoint /*4544*/, 1);
    log_createtopic(ch1_joinpsi, log_mission);
    log_settopicstatus(ch1_joinpsi, log_running);
    b_logentry(ch1_joinpsi, ch1_joinpsi_15);
};

func void dia_baalkagan_success_erz() {
    ai_output(other, self, "DIA_BaalKagan_SUCCESS_Erz_15_00"); //ß âîçüìó 100 êóñêîâ ðóäû.
    ai_output(self, other, "DIA_BaalKagan_SUCCESS_Erz_13_01"); //Î÷åíü õîðîøî. Âîò îíè.
    createinvitems(self, itminugget, 100);
    b_giveinvitems(self, other, itminugget /*4517*/, 100);
    info_clearchoices(dia_baalkagan_success /*10591*/);
};

func void dia_baalkagan_success_takescrolls() {
    ai_output(other, self, "DIA_BaalKagan_SUCCESS_TakeScrolls_15_00"); //ß âîçüìó ìàãè÷åñêèå ñâèòêè.
    ai_output(self, other, "DIA_BaalKagan_SUCCESS_TakeScrolls_13_01"); //Õîðîøåå ðåøåíèå. Âûáèðàé òðè ëþáûõ.
    info_clearchoices(dia_baalkagan_success /*10591*/);
    info_addchoice(dia_baalkagan_success /*10591*/, "Êóëàê âåòðà", dia_baalkagan_success_takescrolls_windfaust);
    info_addchoice(dia_baalkagan_success /*10591*/, "Òåëåêèíåç", dia_baalkagan_success_takescrolls_telekinese);
    info_addchoice(dia_baalkagan_success /*10591*/, "Ïèðîêèíåç", dia_baalkagan_success_takescrolls_pyrokinese);
    info_addchoice(dia_baalkagan_success /*10591*/, "Ñîí", dia_baalkagan_success_takescrolls_schlaf);
    info_addchoice(dia_baalkagan_success /*10591*/, "×àðû", dia_baalkagan_success_takescrolls_charme);
};

var int baalkagan_drei;

func void dia_baalkagan_success_takescrolls_windfaust() {
    createinvitem(self, itarscrollwindfist);
    b_giveinvitems(self, hero, itarscrollwindfist /*4207*/, 1);
    baalkagan_drei = baalkagan_drei + 1;
    if (baalkagan_drei >= 3) {
        ai_output(self, other, "DIA_BaalKagan_SUCCESS_TakeScrolls_DREI_13_00"); //Ýòî áûë ïîñëåäíèé ñâèòîê. Èñïîëüçóé èõ ñ óìîì!
        info_clearchoices(dia_baalkagan_success /*10591*/);
    };
};

func void dia_baalkagan_success_takescrolls_telekinese() {
    createinvitem(self, itarscrolltelekinesis);
    b_giveinvitems(self, hero, itarscrolltelekinesis /*4211*/, 1);
    baalkagan_drei = baalkagan_drei + 1;
    if (baalkagan_drei >= 3) {
        ai_output(self, other, "DIA_BaalKagan_SUCCESS_TakeScrolls_DREI_13_00"); //Ýòî áûë ïîñëåäíèé ñâèòîê. Èñïîëüçóé èõ ñ óìîì!
        info_clearchoices(dia_baalkagan_success /*10591*/);
    };
};

func void dia_baalkagan_success_takescrolls_pyrokinese() {
    createinvitem(self, itarscrollpyrokinesis);
    b_giveinvitems(self, hero, itarscrollpyrokinesis /*4217*/, 1);
    baalkagan_drei = baalkagan_drei + 1;
    if (baalkagan_drei >= 3) {
        ai_output(self, other, "DIA_BaalKagan_SUCCESS_TakeScrolls_DREI_13_00"); //Ýòî áûë ïîñëåäíèé ñâèòîê. Èñïîëüçóé èõ ñ óìîì!
        info_clearchoices(dia_baalkagan_success /*10591*/);
    };
};

func void dia_baalkagan_success_takescrolls_schlaf() {
    createinvitem(self, itarscrollsleep);
    b_giveinvitems(self, hero, itarscrollsleep /*4215*/, 1);
    baalkagan_drei = baalkagan_drei + 1;
    if (baalkagan_drei >= 3) {
        ai_output(self, other, "DIA_BaalKagan_SUCCESS_TakeScrolls_DREI_13_00"); //Ýòî áûë ïîñëåäíèé ñâèòîê. Èñïîëüçóé èõ ñ óìîì!
        info_clearchoices(dia_baalkagan_success /*10591*/);
    };
};

func void dia_baalkagan_success_takescrolls_charme() {
    createinvitem(self, itarscrollcharm);
    b_giveinvitems(self, hero, itarscrollcharm /*4213*/, 1);
    baalkagan_drei = baalkagan_drei + 1;
    if (baalkagan_drei >= 3) {
        ai_output(self, other, "DIA_BaalKagan_SUCCESS_TakeScrolls_DREI_13_00"); //Ýòî áûë ïîñëåäíèé ñâèòîê. Èñïîëüçóé èõ ñ óìîì!
        info_clearchoices(dia_baalkagan_success /*10591*/);
    };
};

instance dia_baalisidro_exit(c_info) {
    npc = nov_1333_baalisidro /*7665*/;
    nr = 999;
    condition = dia_baalisidro_exit_condition;
    information = dia_baalisidro_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_baalisidro_exit_condition() {
    return 1;
};

func void dia_baalisidro_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_baalisidro_hello(c_info) {
    npc = nov_1333_baalisidro /*7665*/;
    nr = 1;
    condition = dia_baalisidro_hello_condition;
    information = dia_baalisidro_hello_info;
    description = "Òû âûãëÿäèøü íå ñëèøêîì ðàäîñòíûì.";
};

func int dia_baalisidro_hello_condition() {
    return 1;
};

func void dia_baalisidro_hello_info() {
    ai_output(other, self, "DIA_BaalIsidro_Hello_15_00"); //Òû âûãëÿäèøü íå ñëèøêîì ðàäîñòíûì.
    ai_output(self, other, "DIA_BaalIsidro_Hello_03_01"); //Òàê è åñòü!
    ai_output(self, other, "DIA_BaalIsidro_Hello_03_02"); //Ìíå íóæíî ñáûòü ñ ðóê öåëóþ ãîðó áîëîòíèêà.
    ai_output(other, self, "DIA_BaalIsidro_Hello_15_03"); //Òåáÿ ïðèñëàëè ñþäà èç Ëàãåðÿ Ñåêòàíòîâ?
    ai_output(self, other, "DIA_BaalIsidro_Hello_03_04"); //Äà. Íî íå ìîå ýòî äåëî...
};

instance dia_baalisidro_trade(c_info) {
    npc = nov_1333_baalisidro /*7665*/;
    nr = 800;
    condition = dia_baalisidro_trade_condition;
    information = dia_baalisidro_trade_info;
    permanent = true;
    trade = true;
    description = "Ïîêàæè ìíå, ÷òî ó òåáÿ åñòü.";
};

func int dia_baalisidro_trade_condition() {
    if (npc_knowsinfo(hero, dia_baalisidro_hello /*10607*/)) {
        return 1;
    };
};

func void dia_baalisidro_trade_info() {
    ai_output(other, self, "DIA_BaalIsidro_TRADE_15_00"); //Ïîêàæè ìíå, ÷òî ó òåáÿ åñòü.
    ai_output(self, other, "DIA_BaalIsidro_TRADE_03_01"); //Âîò...
};

instance dia_baalisidro_gimmekraut(c_info) {
    npc = nov_1333_baalisidro /*7665*/;
    nr = 1;
    condition = dia_baalisidro_gimmekraut_condition;
    information = dia_baalisidro_gimmekraut_info;
    description = "ß ìîãó ïîìî÷ü òåáå ïðîäàâàòü áîëîòíèê - íî íå çàäàðîì, êîíå÷íî.";
};

func int dia_baalisidro_gimmekraut_condition() {
    if (npc_knowsinfo(hero, dia_baalisidro_hello /*10607*/)) {
        return 1;
    };
};

func void dia_baalisidro_gimmekraut_info() {
    ai_output(other, self, "DIA_BaalIsidro_GimmeKraut_15_00"); //ß ìîãó ïîìî÷ü òåáå ïðîäàâàòü áîëîòíèê - íî íå çàäàðîì, êîíå÷íî.
    ai_output(self, other, "DIA_BaalIsidro_GimmeKraut_03_01"); //Çàáóäü îá ýòîì - ÿ åùå íå íàñòîëüêî ïüÿí. Òû ïðîñòî ñáåæèøü ñ íèì - âîò è âñå.
    log_createtopic(ch1_dealerjob, log_mission);
    log_settopicstatus(ch1_dealerjob, log_running);
    b_logentry(ch1_dealerjob, ch1_dealerjob_1);
};

instance dia_baalisidro_problem(c_info) {
    npc = nov_1333_baalisidro /*7665*/;
    nr = 1;
    condition = dia_baalisidro_problem_condition;
    information = dia_baalisidro_problem_info;
    description = "Èäîë Êàãàí ñîáèðàåòñÿ ïîäûñêàòü òåáå çàìåíó.";
};

func int dia_baalisidro_problem_condition() {
    if (npc_knowsinfo(hero, dia_baalkagan_wannahelp /*10581*/)) {
        return 1;
    };
};

func void dia_baalisidro_problem_info() {
    ai_output(other, self, "DIA_BaalIsidro_Problem_15_00"); //Âîò ÷òî ÿ òåáå ñêàæó, äðóæèùå: ó òåáÿ áîëüøèå íåïðèÿòíîñòè. Èäîë Êàãàí ñîáèðàåòñÿ ïîäûñêàòü òåáå çàìåíó.
    ai_output(self, other, "DIA_BaalIsidro_Problem_03_01"); //×òî? Ìèëîñåðäíûé Ñïÿùèé, ñæàëüñÿ íàäî ìíîé! Ìíå íóæíî èçáàâèòüñÿ îò ýòîé òðàâû...
    if (baalisidro_gotdrink == false) {
        b_logentry(ch1_dealerjob, ch1_dealerjob_2);
    }
    else {
        b_logentry(ch1_dealerjob, ch1_dealerjob_3);
    };
};

var int baalisidro_gotdrink;

instance dia_baalisidro_drink(c_info) {
    npc = nov_1333_baalisidro /*7665*/;
    nr = 1;
    condition = dia_baalisidro_drink_condition;
    information = dia_baalisidro_drink_info;
    permanent = true;
    description = "Î ÷åì ÿ è ãîâîðþ. Âûïåé åùå - çà ìîé ñ÷åò.";
};

func int dia_baalisidro_drink_condition() {
    if (npc_knowsinfo(hero, dia_baalisidro_gimmekraut /*10613*/) && (baalisidro_gotdrink == false)) {
        return 1;
    };
};

func void dia_baalisidro_drink_info() {
    ai_output(other, self, "DIA_BaalIsidro_Drink_15_00"); //Î ÷åì ÿ è ãîâîðþ. Âûïåé åùå - çà ìîé ñ÷åò.
    if (((npc_hasitems(other, itfobooze) > 0) || (npc_hasitems(other, itfobeer) > 0)) || (npc_hasitems(other, itfowine) > 0)) {
        ai_output(self, other, "DIA_BaalIsidro_Drink_03_01"); //Ñïàñèáî, äðóæèùå! Ïüþ çà òâîå çäîðîâüå!
        if (npc_hasitems(other, itfobooze)) {
            b_giveinvitems(other, self, itfobooze /*4330*/, 1);
            if (c_bodystatecontains(self, bs_sit)) {
                ai_standup(self);
                ai_turntonpc(self, hero);
            };
            ai_useitem(self, itfobooze /*4330*/);
        }
        else if (npc_hasitems(other, itfobeer)) {
            b_giveinvitems(other, self, itfobeer /*4326*/, 1);
            if (c_bodystatecontains(self, bs_sit)) {
                ai_standup(self);
                ai_turntonpc(self, hero);
            };
            ai_useitem(self, itfobeer /*4326*/);
        }
        else {
            if (npc_hasitems(other, itfowine)) {
                b_giveinvitems(other, self, itfowine /*4328*/, 1);
                if (c_bodystatecontains(self, bs_sit)) {
                    ai_standup(self);
                    ai_turntonpc(self, hero);
                };
                ai_useitem(self, itfowine /*4328*/);
            };
        };
        baalisidro_gotdrink = true;
        if (npc_knowsinfo(hero, dia_baalisidro_problem /*10616*/)) {
            b_logentry(ch1_dealerjob, ch1_dealerjob_4);
        }
        else {
            b_logentry(ch1_dealerjob, ch1_dealerjob_5);
        };
    }
    else {
        ai_output(self, other, "DIA_BaalIsidro_NO_Drink_03_00"); //×òî? Ãäå?
    };
};

var int baalisidro_dealerjob;

instance dia_baalisidro_thinkagain(c_info) {
    npc = nov_1333_baalisidro /*7665*/;
    nr = 1;
    condition = dia_baalisidro_thinkagain_condition;
    information = dia_baalisidro_thinkagain_info;
    permanent = true;
    description = "Ïîäóìàé îá ýòîì: òû îòäàøü ìíå áîëîòíèê, è ìû ïîäåëèì ïðèáûëü. ";
};

func int dia_baalisidro_thinkagain_condition() {
    if (npc_knowsinfo(hero, dia_baalisidro_gimmekraut /*10613*/) && ((baalisidro_dealerjob != log_running) && (baalisidro_dealerjob != log_success))) {
        return 1;
    };
};

func void dia_baalisidro_thinkagain_info() {
    ai_output(other, self, "DIA_BaalIsidro_ThinkAgain_15_00"); //Ïîäóìàé îá ýòîì: òû îòäàøü ìíå áîëîòíèê, è ìû ïîäåëèì ïðèáûëü.
    if ((baalisidro_gotdrink == true) && npc_knowsinfo(hero, dia_baalisidro_problem /*10616*/)) {
        ai_output(self, other, "DIA_BaalIsidro_ThinkAgain_03_01"); //Îõ, ïàðåíü, êàê æå ìíå íóæíî ñáûòü ñ ðóê ýòó òðàâó. Òû æå íå õî÷åøü âûñòàâèòü ìåíÿ èäèîòîì, ïðàâäà?
        ai_output(other, self, "DIA_BaalIsidro_ThinkAgain_15_02"); //Äàþ òåáå ñëîâî.
        ai_output(self, other, "DIA_BaalIsidro_ThinkAgain_03_03"); //Õîðîøî, çàáèðàé áîëîòíèê... Òû äîëæåí âûðó÷èòü çà íåãî ïî ìåíüøåé ìåðå 400 êóñêîâ ðóäû. Ïîëó÷àåòñÿ ïî 200 íà áðàòà. ß áóäó æäàòü òåáÿ çäåñü. Âîçâðàùàéñÿ, êàê òîëüêî ïîëó÷èøü ðóäó.
        ai_output(other, self, "DIA_BaalIsidro_ThinkAgain_15_04"); //Òû íå çíàåøü, êòî çäåñü ïîêóïàåò áîëüøå âñåãî áîëîòíèêà?
        ai_output(self, other, "DIA_BaalIsidro_ThinkAgain_03_05"); //Åñëè áû ÿ çíàë, òî îòïðàâèëñÿ áû ê íåìó ñàì.
        ai_output(self, other, "DIA_BaalIsidro_ThinkAgain_03_06"); //Òåïåðü, ñáûâ ýòó òðàâó ñ ðóê, ÿ ÷óâñòâóþ ñåáÿ íàìíîãî ëó÷øå.
        baalisidro_dealerjob = log_running;
        b_logentry(ch1_dealerjob, ch1_dealerjob_6);
        createinvitems(self, itmijoint_1, 40);
        b_giveinvitems(self, other, itmijoint_1 /*4511*/, 50);
        npc_removeinvitems(self, itmijoint_2, 20);
        npc_removeinvitems(self, itmijoint_3, 20);
        npc_removeinvitems(other, itmijoint_1, 40);
        createinvitems(other, itmijoint_2, 20);
        createinvitems(other, itmijoint_3, 20);
        ai_stopprocessinfos(self);
    }
    else {
        ai_output(self, other, "DIA_BaalIsidro_REFUSE_ThinkAgain_03_00"); //Íåò, ïàðåíü. ß ñïðàâëþñü...
    };
};

instance dia_baalisidro_running(c_info) {
    npc = nov_1333_baalisidro /*7665*/;
    nr = 1;
    condition = dia_baalisidro_running_condition;
    information = dia_baalisidro_running_info;
    description = "ß ïðîäàë òâîé áîëîòíèê. Âîò 200 êóñêîâ ðóäû.";
};

func int dia_baalisidro_running_condition() {
    if (baalisidro_dealerjob == log_running) {
        return 1;
    };
};

func void dia_baalisidro_running_info() {
    ai_output(other, self, "DIA_BaalIsidro_RUNNING_15_00"); //ß ïðîäàë òâîé áîëîòíèê.
    ai_output(self, other, "DIA_BaalIsidro_RUNNING_03_01"); //È ãäå ìîè 200 êóñêîâ?
    if (npc_hasitems(other, itminugget) >= 200) {
        ai_output(other, self, "DIA_BaalIsidro_RUNNING_15_02"); //Âîò îíè.
        ai_output(self, other, "DIA_BaalIsidro_RUNNING_03_03"); //Õîðîøî... È ê ÷åðòó Èäîëà Êàãàíà! (õèõèêàåò)
        ai_output(self, other, "DIA_BaalIsidro_RUNNING_03_04"); //Ðàä áûë èìåòü ñ òîáîé äåëî.
        b_giveinvitems(hero, self, itminugget /*4517*/, 200);
        baalisidro_dealerjob = log_success;
        log_settopicstatus(ch1_dealerjob, log_success);
        b_logentry(ch1_dealerjob, ch1_dealerjob_7);
        b_givexp(xp_baalisidropayshare);
    }
    else {
        ai_output(other, self, "DIA_BaalIsidro_RUNNING_NoOre_15_05"); //Çàáûë âçÿòü ñ ñîáîé.
        ai_output(self, other, "DIA_BaalIsidro_RUNNING_NoOre_03_06"); //Òàê ïðèíåñè èõ!
        ai_stopprocessinfos(self);
    };
};

instance dia_shrat_exit(c_info) {
    npc = nov_1356_shrat /*7723*/;
    nr = 999;
    condition = dia_shrat_exit_condition;
    information = dia_shrat_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_shrat_exit_condition() {
    return 1;
};

func void dia_shrat_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_shrat_whyhere(c_info) {
    npc = nov_1356_shrat /*7723*/;
    nr = 1;
    condition = dia_shrat_whyhere_condition;
    information = dia_shrat_whyhere_info;
    description = "×åì òû çàíèìàåøüñÿ?";
};

func int dia_shrat_whyhere_condition() {
    return 1;
};

func void dia_shrat_whyhere_info() {
    ai_output(other, self, "DIA_Shrat_WhyHere_15_00"); //×åì òû çàíèìàåøüñÿ?
    ai_output(self, other, "DIA_Shrat_WhyHere_02_01"); //Ðàçâå ÿ ïîçâîëèë òåáå îáðàòèòüñÿ êî ìíå?
    ai_output(self, other, "DIA_Shrat_WhyHere_02_02"); //Øó÷ó! ß çäåñü, ïîòîìó ÷òî ýòè ÷åðòîâû ïðèäóðêè äåéñòâóþò ìíå íà íåðâû!
    ai_output(self, other, "DIA_Shrat_WhyHere_02_03"); //Íå ñìåé îáðàùàòüñÿ êî ìíå!' - 'Ìîëè Ñïÿùåãî î ïðîùåíèè!' - 'Ýòî çàäàíèå íåîáû÷àéíîé âàæíîñòè!'
    ai_output(self, other, "DIA_Shrat_WhyHere_02_04"); //Êîãäà âîêðóã òåáÿ ñòîëüêî ïñèõîâ, ýòîãî äîñòàòî÷íî, ÷òîáû ñâåñòè ÷åëîâåêà ñ óìà.
    ai_output(self, other, "DIA_Shrat_WhyHere_02_05"); //ß Øðåò, ó÷åíèê ïåðâîãî ðàíãà, èì æå ÿ è îñòàíóñü!
};

instance dia_shrat_joinpsi(c_info) {
    npc = nov_1356_shrat /*7723*/;
    nr = 1;
    condition = dia_shrat_joinpsi_condition;
    information = dia_shrat_joinpsi_info;
    description = "ß õî÷ó ñòàòü îäíèì èç ÷ëåíîâ Áðàòñòâà. Òû ìîæåøü ìíå ïîìî÷ü?";
};

func int dia_shrat_joinpsi_condition() {
    if (npc_knowsinfo(hero, dia_shrat_whyhere /*10633*/)) {
        return 1;
    };
};

func void dia_shrat_joinpsi_info() {
    ai_output(other, self, "DIA_Shrat_JoinPSI_15_00"); //ß õî÷ó ñòàòü îäíèì èç ÷ëåíîâ Áðàòñòâà. Òû ìîæåøü ìíå ïîìî÷ü?
    ai_output(self, other, "DIA_Shrat_JoinPSI_02_01"); //Òû äåéñòâèòåëüíî ñîáèðàåøüñÿ ïðèñîåäèíèòüñÿ ê ýòèì òèïàì? À ÿ òîëüêî è äóìàþ î òîì, êàê ñâàëèòü îòñþäà.
    ai_output(self, other, "DIA_Shrat_JoinPSI_02_02"); //Ìû ìîãëè áû âìåñòå ñòðàíñòâîâàòü ïî êîëîíèè. Îáëåã÷èì êîøåëüêè ïàðî÷êè òîëñòîñóìîâ, ïîäíàêîïèì ðóäû - ÷òî ñêàæåøü?
};

instance dia_shrat_comewithme(c_info) {
    npc = nov_1356_shrat /*7723*/;
    nr = 1;
    condition = dia_shrat_comewithme_condition;
    information = dia_shrat_comewithme_info;
    permanent = true;
    description = "Êîíå÷íî, èäåì! Âìåñòå âåñåëåå!";
};

func int dia_shrat_comewithme_condition() {
    if (npc_knowsinfo(hero, dia_shrat_joinpsi /*10636*/) && (self.aivar[36] == false)) {
        return 1;
    };
};

func void dia_shrat_comewithme_info() {
    ai_output(other, self, "DIA_Shrat_ComeWithMe_15_00"); //Êîíå÷íî, èäåì! Âìåñòå âåñåëåå!
    ai_output(self, other, "DIA_Shrat_ComeWithMe_02_01"); //Òî, ÷òî ÿ õîòåë óñëûøàòü! Âïåðåä!
    npc_exchangeroutine(self, "FOLLOW");
    self.aivar[36] = true;
};

instance dia_shrat_leaveme(c_info) {
    npc = nov_1356_shrat /*7723*/;
    nr = 700;
    condition = dia_shrat_leaveme_condition;
    information = dia_shrat_leaveme_info;
    permanent = true;
    description = "Íàøè ïóòè ðàñõîäÿòñÿ - ÿ ïîéäó îäèí.";
};

func int dia_shrat_leaveme_condition() {
    if (self.aivar[36] == true) {
        return 1;
    };
};

func void dia_shrat_leaveme_info() {
    ai_output(other, self, "DIA_Shrat_LeaveMe_15_00"); //Íàøè ïóòè ðàñõîäÿòñÿ - ÿ ïîéäó îäèí.
    ai_output(self, other, "DIA_Shrat_LeaveMe_02_01"); //Ëàäíî. À ÿ âåðíóñü â ñâîå óêðûòèå íà áîëîòàõ. Áåðåãè ñåáÿ!
    npc_exchangeroutine(self, "START");
    self.aivar[36] = false;
};

instance dia_fortuno_exit(c_info) {
    npc = nov_1357_fortuno /*7726*/;
    nr = 999;
    condition = dia_fortuno_exit_condition;
    information = dia_fortuno_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_fortuno_exit_condition() {
    return 1;
};

func void dia_fortuno_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_fortuno_greet(c_info) {
    npc = nov_1357_fortuno /*7726*/;
    nr = 1;
    condition = dia_fortuno_greet_condition;
    information = dia_fortuno_greet_info;
    important = true;
};

func int dia_fortuno_greet_condition() {
    if (npc_getdisttonpc(self, other) <= zivilanquatschdist) {
        return 1;
    };
};

func void dia_fortuno_greet_info() {
    ai_output(self, other, "DIA_Fortuno_Greet_05_00"); //Ïîäîéäè ïîáëèæå! Çäåñü êàæäûé íîâè÷îê ïîëó÷àåò îò ìåíÿ ïîäàðîê.
};

var int fortuno_rationday;

instance dia_fortuno_getgeschenk(c_info) {
    npc = nov_1357_fortuno /*7726*/;
    nr = 1;
    condition = dia_fortuno_getgeschenk_condition;
    information = dia_fortuno_getgeschenk_info;
    description = "Êàêîé ïîäàðîê?";
};

func int dia_fortuno_getgeschenk_condition() {
    return 1;
};

func void dia_fortuno_getgeschenk_info() {
    ai_output(other, self, "DIA_Fortuno_GetGeschenk_15_00"); //Êàêîé ïîäàðîê?
    ai_output(self, other, "DIA_Fortuno_GetGeschenk_05_01"); //Çäåñü òðè ñèãàðåòû ñ áîëîòíèêîì. 'Ñåâåðíûé òåìíûé'. Ñèëüíàÿ âåùü!
    ai_output(self, other, "DIA_Fortuno_GetGeschenk_05_02"); //Òû ñìîæåøü áðàòü ó ìåíÿ áîëîòíèê êàæäûé äåíü, íî åñëè çàõî÷åøü ïîëó÷èòü áîëüøå îáû÷íîé äíåâíîé ïîðöèè, ïðèäåòñÿ çàïëàòèòü.
    ai_output(self, other, "DIA_Fortuno_GetGeschenk_05_03"); //Åñëè íà äîðîãå ìåæäó Ëàãåðÿìè òåáå ïîïàäóòñÿ êàêèå-íèáóäü òðàâû èëè ÿãîäû, ïðèíîñè èõ ñþäà. ß çàïëà÷ó.
    createinvitems(self, itmijoint_2, 3);
    b_giveinvitems(self, other, itmijoint_2 /*4513*/, 3);
    fortuno_rationday = wld_getday();
    log_createtopic(ge_traderpsi, log_note);
    b_logentry(ge_traderpsi, ge_traderpsi_5);
};

instance dia_fortuno_dailyration(c_info) {
    npc = nov_1357_fortuno /*7726*/;
    nr = 3;
    condition = dia_fortuno_dailyration_condition;
    information = dia_fortuno_dailyration_info;
    permanent = true;
    description = "ß ïðèøåë çà ñâîåé äíåâíîé ïîðöèåé áîëîòíèêà.";
};

func int dia_fortuno_dailyration_condition() {
    if (npc_knowsinfo(hero, dia_fortuno_getgeschenk /*10652*/)) {
        return 1;
    };
};

func void dia_fortuno_dailyration_info() {
    ai_output(other, self, "DIA_Fortuno_DailyRation_15_00"); //ß ïðèøåë çà ñâîåé äíåâíîé ïîðöèåé áîëîòíèêà.
    if (fortuno_rationday != wld_getday()) {
        ai_output(self, other, "DIA_Fortuno_DailyRation_05_01"); //Âîò, âîçüìè. Òðè 'ñåâåðíûõ òåìíûõ' - íî íå êóðè èõ âñå ñðàçó!
        createinvitems(self, itmijoint_2, 3);
        b_giveinvitems(self, other, itmijoint_2 /*4513*/, 3);
        fortuno_rationday = wld_getday();
    }
    else {
        ai_output(self, other, "DIA_Fortuno_DailyRation_05_02"); //Ñåãîäíÿ òû óæå ïîëó÷èë ñâîþ ïîðöèþ. Åñëè õî÷åøü åùå, ïðèõîäè çàâòðà èëè êóïè ÷òî-íèáóäü.
    };
};

instance dia_fortuno_buyjoints(c_info) {
    npc = nov_1357_fortuno /*7726*/;
    nr = 4;
    condition = dia_fortuno_buyjoints_condition;
    information = dia_fortuno_buyjoints_info;
    permanent = true;
    trade = true;
    description = "Äàâàé ìåíÿòüñÿ.";
};

func int dia_fortuno_buyjoints_condition() {
    if (npc_knowsinfo(hero, dia_fortuno_getgeschenk /*10652*/)) {
        return 1;
    };
};

func void dia_fortuno_buyjoints_info() {
    ai_output(other, self, "DIA_Fortuno_BuyJoints_15_00"); //Äàâàé ìåíÿòüñÿ.
    ai_output(self, other, "DIA_Fortuno_BuyJoints_05_01"); //×òî òåáå îò ìåíÿ íóæíî? Èëè òû õî÷åøü ìíå ÷òî-òî ïðîäàòü?
};

instance dia_harlok_exit(c_info) {
    npc = nov_1358_harlok /*7728*/;
    nr = 999;
    condition = dia_harlok_exit_condition;
    information = dia_harlok_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_harlok_exit_condition() {
    return 1;
};

func void dia_harlok_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_harlok_fetchharlok(c_info) {
    npc = nov_1358_harlok /*7728*/;
    nr = 1;
    condition = dia_harlok_fetchharlok_condition;
    information = dia_harlok_fetchharlok_info;
    description = "Ìåíÿ ïðèñëàë Ãîðèì.";
};

func int dia_harlok_fetchharlok_condition() {
    if (ghorim_kickharlok == log_running) {
        return 1;
    };
};

func void dia_harlok_fetchharlok_info() {
    ai_output(other, self, "DIA_Harlok_FetchHarlok_15_00"); //Ìåíÿ ïðèñëàë Ãîðèì.
    ai_output(self, other, "DIA_Harlok_FetchHarlok_01_01"); //×òî?
    info_clearchoices(dia_harlok_fetchharlok /*10664*/);
    info_addchoice(dia_harlok_fetchharlok /*10664*/, dialog_back, dia_harlok_fetchharlok_back);
    info_addchoice(dia_harlok_fetchharlok /*10664*/, "Òàùè ñâîþ çàäíèöó ê ïðåññó, èëè ñàì ïîïàäåøü â íåãî!", dia_harlok_fetchharlok_orelse);
    info_addchoice(dia_harlok_fetchharlok /*10664*/, "ß äîëæåí íàïîìíèòü òåáå, ÷òî òû äîëæåí åãî ñìåíèòü.", dia_harlok_fetchharlok_please);
};

func void dia_harlok_fetchharlok_please() {
    ai_output(other, self, "DIA_Harlok_FetchHarlok_Please_15_00"); //ß äîëæåí íàïîìíèòü òåáå, ÷òî òû äîëæåí åãî ñìåíèòü.
    ai_output(self, other, "DIA_Harlok_FetchHarlok_Please_01_01"); //Êàê ìèëî ñ òâîåé ñòîðîíû. Íàïîìíè åùå ðàçîê, êîãäà ÿ ïðîñíóñü, ëàäíî?
};

func void dia_harlok_fetchharlok_orelse() {
    ai_output(other, self, "DIA_Harlok_FetchHarlok_OrElse_15_00"); //Òàùè ñâîþ çàäíèöó ê ïðåññó èëè ñàì ïîïàäåøü â íåãî!
    ai_output(self, other, "DIA_Harlok_FetchHarlok_OrElse_01_01"); //Òîëüêî ÏÎÏÐÎÁÓÉ åùå ðàç ðàñêðûòü ðîò, ùåíîê!
    ai_stopprocessinfos(self);
};

func void dia_harlok_fetchharlok_back() {
    ai_output(other, self, "DIA_Harlok_FetchHarlok_BACK_15_00"); //Ëàäíî, ëàäíî.
    info_clearchoices(dia_harlok_fetchharlok /*10664*/);
};

instance dia_harlok_harlokagain(c_info) {
    npc = nov_1358_harlok /*7728*/;
    nr = 1;
    condition = dia_harlok_harlokagain_condition;
    information = dia_harlok_harlokagain_info;
    description = "Òû äîëæåí ñìåíèòü ñâîåãî òîâàðèùà!";
};

func int dia_harlok_harlokagain_condition() {
    if ((self.aivar[19] == false) && npc_knowsinfo(hero, dia_harlok_fetchharlok /*10664*/)) {
        return 1;
    };
};

func void dia_harlok_harlokagain_info() {
    ai_output(other, self, "DIA_Harlok_HarlokAgain_15_00"); //Ïðîñòî õîòåë íàïîìíèòü òåáå, ÷òî òû äîëæåí ñìåíèòü ñâîåãî òîâàðèùà!
    ai_output(self, other, "DIA_Harlok_HarlokAgain_01_01"); //Ñëóøàé! ß æå ñêàçàë òåáå - ïðîâàëèâàé!
    b_logentry(ch1_ghorimsrelief, ch1_ghorimsrelief_3);
};

instance dia_harlok_sendharlok(c_info) {
    npc = nov_1358_harlok /*7728*/;
    nr = 1;
    condition = dia_harlok_sendharlok_condition;
    information = dia_harlok_sendharlok_info;
    description = "Íó, òåïåðü òû ãîòîâ ñìåíèòü ñâîåãî ïðèÿòåëÿ?";
};

func int dia_harlok_sendharlok_condition() {
    if ((self.aivar[19] == true) && npc_knowsinfo(hero, dia_harlok_fetchharlok /*10664*/)) {
        return 1;
    };
};

func void dia_harlok_sendharlok_info() {
    var c_npc ghorim;

    ai_output(other, self, "DIA_Harlok_SendHarlok_15_00"); //Íó, òåïåðü òû ãîòîâ ñìåíèòü ñâîåãî ïðèÿòåëÿ?
    ai_output(self, other, "DIA_Harlok_SendHarlok_01_01"); //×åðòîâà çàíîçà â çàäíèöå! Ïî÷åìó òû ñóåøüñÿ íå â ñâîå äåëî?
    ai_output(other, self, "DIA_Harlok_SendHarlok_15_02"); //Ïðîñòî õî÷ó óâèäåòü òåáÿ çà ðàáîòîé.
    ai_output(self, other, "DIA_Harlok_SendHarlok_01_03"); //Ëàäíî, ëàäíî - óæå èäó... ùåíîê!
    b_logentry(ch1_ghorimsrelief, ch1_ghorimsrelief_4);
    b_givexp(xp_sentharlok);
    npc_exchangeroutine(self, "START");
    ghorim = hlp_getnpc(nov_1310_ghorim);
    npc_exchangeroutine(ghorim, "START");
    ghorim_kickharlok = log_success;
    npc_setpermattitude(ghorim, att_friendly);
    npc_setpermattitude(self, att_angry);
    ai_stopprocessinfos(self);
};

instance dia_harlok_angry(c_info) {
    npc = nov_1358_harlok /*7728*/;
    nr = 1;
    condition = dia_harlok_angry_condition;
    information = dia_harlok_angry_info;
    permanent = true;
    important = true;
};

func int dia_harlok_angry_condition() {
    if (npc_isinstate(self, zs_talk) && (ghorim_kickharlok == log_success)) {
        return 1;
    };
};

func void dia_harlok_angry_info() {
    ai_output(self, other, "DIA_Harlok_Angry_01_00"); //Îñòàâü ìåíÿ â ïîêîå! ß èäó...
    ai_stopprocessinfos(self);
};

instance nov_1371_baalnetbek_exit(c_info) {
    npc = nov_1371_baalnetbek /*7767*/;
    nr = 999;
    condition = nov_1371_baalnetbek_exit_condition;
    information = nov_1371_baalnetbek_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int nov_1371_baalnetbek_exit_condition() {
    return true;
};

func void nov_1371_baalnetbek_exit_info() {
    ai_stopprocessinfos(self);
};

instance nov_1371_baalnetbek_crazy(c_info) {
    npc = nov_1371_baalnetbek /*7767*/;
    nr = 0;
    condition = nov_1371_baalnetbek_crazy_condition;
    information = nov_1371_baalnetbek_crazy_info;
    description = "Êàê òåáÿ çîâóò?";
};

func int nov_1371_baalnetbek_crazy_condition() {
    return true;
};

func void nov_1371_baalnetbek_crazy_info() {
    ai_output(other, self, "Nov_1371_BaalNetbek_CRAZY_Info_15_01"); //Êòî òû?
    ai_output(self, other, "Nov_1371_BaalNetbek_CRAZY_Info_03_02"); //ß Ãóðó, Ãóðó áîëîòà. Ìîè ñëóãè çîâóò ìåíÿ Èäîë Íåòáåê.
    ai_output(other, self, "Nov_1371_BaalNetbek_CRAZY_Info_15_03"); //Ñëóãè? ß íå âèæó íèêàêèõ ñëóã!
    ai_output(self, other, "Nov_1371_BaalNetbek_CRAZY_Info_03_04"); //Îíè ïîâñþäó. Äåðåâüÿ! Îíè õîäÿò è ïîþò, è òàíöóþò...
    ai_output(other, self, "Nov_1371_BaalNetbek_CRAZY_Info_15_05"); //... À, ïîíÿòíî. Ëàäíî, ìíå ïîðà...
    ai_output(self, other, "Nov_1371_BaalNetbek_CRAZY_Info_03_06"); //Ïîñòîé, òû äîëæåí ïîìî÷ü ìíå! ß ñîáèðàþñü ïðåâðàòèòü ýòî áîëîòî â ãèãàíòñêèé öâåòóùèé ëóã!
    ai_output(other, self, "Nov_1371_BaalNetbek_CRAZY_Info_15_07"); //Ëàäíî, òû ïîêà íà÷èíàé áåç ìåíÿ, à ÿ... ÿ ñêîðî âåðíóñü.
    ai_turnaway(hero, self);
    ai_output(other, self, "Nov_1371_BaalNetbek_CRAZY_Info_15_08"); //Îí íå ñîáèðàåòñÿ ìåíÿ íèêóäà âåñòè...
    ai_stopprocessinfos(self);
};

instance nov_1371_baalnetbek_again(c_info) {
    npc = nov_1371_baalnetbek /*7767*/;
    nr = 0;
    condition = nov_1371_baalnetbek_again_condition;
    information = nov_1371_baalnetbek_again_info;
    permanent = true;
    description = "Ýé, êàê äåëà?";
};

func int nov_1371_baalnetbek_again_condition() {
    if (npc_knowsinfo(hero, nov_1371_baalnetbek_crazy /*10683*/)) {
        return true;
    };
};

func void nov_1371_baalnetbek_again_info() {
    ai_output(other, self, "Nov_1371_BaalNetbek_AGAIN_Info_15_01"); //Ýé, êàê äåëà?
    ai_output(self, other, "Nov_1371_BaalNetbek_AGAIN_Info_03_02"); //Ïîñòàðàéñÿ íå ïðè÷èíÿòü âðåäà ìîèì äåðåâüÿì!
};

instance info_freemineorc_exit(c_info) {
    npc = freemineorc /*7774*/;
    nr = 999;
    condition = info_freemineorc_exit_condition;
    information = info_freemineorc_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_freemineorc_exit_condition() {
    return 1;
};

func void info_freemineorc_exit_info() {
    if (!npc_knowsinfo(hero, info_freemineorc_everyulumulu /*10746*/)) {
        ai_output(hero, self, "Info_FreemineOrc_EXIT_15_01"); //Ìíå íóæíî ïðîéòè!
        ai_output(self, hero, "Info_FreemineOrc_EXIT_17_02"); //Íåçíàêîìåö ïðèéòè ñíîâà!
    }
    else {
        ai_output(hero, self, "Info_FreemineOrc_EXIT_15_03"); //Ñïàñèáî. ß ïîéäó.
        ai_output(self, hero, "Info_FreemineOrc_EXIT_17_04"); //Äîáðàÿ äîðîãà,  íåçíàêîìåö!
    };
    ai_stopprocessinfos(self);
};

instance info_freemineorc_intro(c_info) {
    npc = freemineorc /*7774*/;
    condition = info_freemineorc_intro_condition;
    information = info_freemineorc_intro_info;
    important = true;
};

func int info_freemineorc_intro_condition() {
    return true;
};

func void info_freemineorc_intro_info() {
    ai_output(self, hero, "Info_FreemineOrc_INTRO_17_01"); //Òàððîê íóæíà ïîìîùü! Òàððîê ðàíåí!
};

instance info_freemineorc_waspassiert(c_info) {
    npc = freemineorc /*7774*/;
    nr = 0;
    condition = info_freemineorc_waspassiert_condition;
    information = info_freemineorc_waspassiert_info;
    description = "×òî çäåñü ïðîèçîøëî?";
};

func int info_freemineorc_waspassiert_condition() {
    if (npc_knowsinfo(hero, info_freemineorc_intro /*10692*/)) {
        return true;
    };
};

func void info_freemineorc_waspassiert_info() {
    ai_output(hero, self, "Info_FreemineOrc_WASPASSIERT_15_01"); //×òî çäåñü ïðîèçîøëî?
    ai_output(self, hero, "Info_FreemineOrc_WASPASSIERT_17_02"); //Òàððîê çàõâàòèòü ñèíèå ñîëäàòû. Âäðóã êðàñíûå ñîëäàòû ïîâñþäó.
    ai_output(self, hero, "Info_FreemineOrc_WASPASSIERT_17_03"); //Êðàñíûå ñîëäàòû óáèâàòü âñå.
    ai_output(self, hero, "Info_FreemineOrc_WASPASSIERT_17_04"); //Òàððîê áåæàòü ñþäà. Êðàñíûå ñîëäàòû íå õîäèòü ñþäà. Êðàñíûå ñîëäàòû áîÿòñÿ ÃÀÕ ËÞÃ.
    ai_output(self, hero, "Info_FreemineOrc_WASPASSIERT_17_05"); //Ïîæàëóéñòà, ïîìî÷ü, Òàððîê ðàíåí.
};

instance info_freemineorc_wastun(c_info) {
    npc = freemineorc /*7774*/;
    nr = 0;
    condition = info_freemineorc_wastun_condition;
    information = info_freemineorc_wastun_info;
    description = "×òî ÿ ìîãó äëÿ òåáÿ ñäåëàòü?";
};

func int info_freemineorc_wastun_condition() {
    if (npc_knowsinfo(hero, info_freemineorc_waspassiert /*10695*/)) {
        return true;
    };
};

func void info_freemineorc_wastun_info() {
    ai_output(hero, self, "Info_FreemineOrc_WASTUN_15_01"); //×òî ÿ ìîãó ñäåëàòü?
    ai_output(self, hero, "Info_FreemineOrc_WASTUN_17_02"); //Òàððîê íóæíà ñèëüíàÿ ëåêàðñòâà. Èíà÷å Òàððîê óìèðàòü.
    ai_output(hero, self, "Info_FreemineOrc_WASTUN_15_03"); //Êàêèå ëåêàðñòâà íóæíû?
    ai_output(self, hero, "Info_FreemineOrc_WASTUN_17_04"); //ÃÀÕ ËÞÃ îòðàâèòü Òàððîê. Òàððîê íóæíà ëåêàðñòâà!
    ai_output(self, hero, "Info_FreemineOrc_WASTUN_17_05"); //Ó Òàððîê áûòü ëåêàðñòâà, íî Òàððîê ïîòåðÿòü. Òàððîê íå íàéòè!
};

instance info_freemineorc_offer(c_info) {
    npc = freemineorc /*7774*/;
    nr = 0;
    condition = info_freemineorc_offer_condition;
    information = info_freemineorc_offer_info;
    description = "ß íàéäó òâîè ëåêàðñòâà!";
};

func int info_freemineorc_offer_condition() {
    if ((npc_knowsinfo(hero, info_freemineorc_wastun /*10698*/) && (!npc_knowsinfo(hero, info_freemineorc_givepotion /*10716*/))) && (!npc_hasitems(hero, orcmedicine))) {
        return true;
    };
};

func void info_freemineorc_offer_info() {
    ai_output(hero, self, "Info_FreemineOrc_OFFER_15_01"); //ß íàéäó òâîè ëåêàðñòâà!
    ai_output(self, hero, "Info_FreemineOrc_OFFER_17_02"); //Òàððîê î÷åíü ñëàáûé. Íåçíàêîìåö, òîðîïèñü, èëè Òàððîê óìèðàòü!
    ai_stopprocessinfos(self);
    b_story_foundorcslave();
};

instance info_freemineorc_crawler(c_info) {
    npc = freemineorc /*7774*/;
    nr = 0;
    condition = info_freemineorc_crawler_condition;
    information = info_freemineorc_crawler_info;
    description = "×òî òàêîå ÃÀÕ ËÞÃ?";
};

func int info_freemineorc_crawler_condition() {
    if (npc_knowsinfo(hero, info_freemineorc_waspassiert /*10695*/)) {
        return true;
    };
};

func void info_freemineorc_crawler_info() {
    ai_output(hero, self, "Info_FreemineOrc_CRAWLER_15_01"); //×òî òàêîå ÃÀÕ ËÞÃ?
    ai_output(self, hero, "Info_FreemineOrc_CRAWLER_17_02"); //Áûòü áîëüøîé çâåðè, õîäèòü íà ìíîãî íîãàõ.
    ai_output(self, hero, "Info_FreemineOrc_CRAWLER_17_03"); //ÃÀÕ ËÞÃ îïàñíîñòü! Åñò ëþäè è îðêè!
    ai_output(hero, self, "Info_FreemineOrc_CRAWLER_15_04"); //Òû, íàâåðíîå, èìååøü â âèäó ïîëçóíîâ!
};

instance info_freemineorc_tongue(c_info) {
    npc = freemineorc /*7774*/;
    nr = 0;
    condition = info_freemineorc_tongue_condition;
    information = info_freemineorc_tongue_info;
    description = "Òû ãîâîðèøü ïî-íàøåìó?";
};

func int info_freemineorc_tongue_condition() {
    if (npc_knowsinfo(hero, info_freemineorc_intro /*10692*/)) {
        return true;
    };
};

func void info_freemineorc_tongue_info() {
    ai_output(hero, self, "Info_FreemineOrc_TONGUE_15_01"); //Òû ãîâîðèøü ïî-íàøåìó?
    ai_output(self, hero, "Info_FreemineOrc_TONGUE_17_02"); //Òàððîê áûòü ðàáîì ó ëþäè ìíîãî âðåìÿ. Òàððîê õîðîøî ñëóøàòü.
};

instance info_freemineorc_searchpotion(c_info) {
    npc = freemineorc /*7774*/;
    nr = 0;
    condition = info_freemineorc_searchpotion_condition;
    information = info_freemineorc_searchpotion_info;
    permanent = true;
    description = "ß íå ìîãó íàéòè òâîè ëåêàðñòâà!";
};

func int info_freemineorc_searchpotion_condition() {
    if ((npc_knowsinfo(hero, info_freemineorc_offer /*10701*/) && (!npc_knowsinfo(hero, info_freemineorc_givepotion /*10716*/))) && (!npc_hasitems(hero, orcmedicine))) {
        return true;
    };
};

func void info_freemineorc_searchpotion_info() {
    ai_output(hero, self, "Info_FreemineOrc_SEARCHPOTION_15_01"); //ß íå ìîãó íàéòè òâîè ëåêàðñòâà!
    ai_output(self, hero, "Info_FreemineOrc_SEARCHPOTION_17_02"); //Íåçíàêîìåö èñêàòü åùå! Ëåêàðñòâà áûòü çäåñü!
    ai_output(self, hero, "Info_FreemineOrc_SEARCHPOTION_17_03"); //Òàððîê áåæàòü îò ÃÀÕ ËÞÃ! Òàððîê ñïðÿòàòü, êîãäà áåæàòü!
    ai_output(self, hero, "Info_FreemineOrc_SEARCHPOTION_17_04"); //Íåçíàêîìåö, èñêàòü â íèøå òîæå!
    ai_stopprocessinfos(self);
};

instance info_freemineorc_sucheulumulu(c_info) {
    npc = freemineorc /*7774*/;
    nr = 0;
    condition = info_freemineorc_sucheulumulu_condition;
    information = info_freemineorc_sucheulumulu_info;
    description = "Òû ñëó÷àéíî íå çíàåøü Óð-Øàêà, øàìàíà?";
};

func int info_freemineorc_sucheulumulu_condition() {
    if (npc_knowsinfo(hero, info_freemineorc_intro /*10692*/)) {
        return true;
    };
};

func void info_freemineorc_sucheulumulu_info() {
    ai_output(hero, self, "Info_FreemineOrc_SUCHEULUMULU_15_01"); //Òû ñëó÷àéíî íå çíàåøü Óð-Øàêà, øàìàíà?
    ai_output(self, hero, "Info_FreemineOrc_SUCHEULUMULU_17_02"); //Óð-Øàê áûòü ðàá, êàê Òàððîê. Óð-Øàê óáåãàòü! Óáåãàòü ìíîãî çèìà íàçàä!
    ai_output(hero, self, "Info_FreemineOrc_SUCHEULUMULU_15_03"); //Òâîé äðóã ñêàçàë, ÷òî òû ìîæåøü ñäåëàòü äëÿ ìåíÿ Óëó-Ìóëó.
    if (freemineorc_suchepotion == log_success) {
        ai_output(self, hero, "Info_FreemineOrc_SUCHEULUMULU_17_04"); //Òû ïîìîãàòü ìíå, òàê ÿ ïîìîãàòü òåáå!
    }
    else {
        ai_output(self, hero, "Info_FreemineOrc_SUCHEULUMULU_17_05"); //Òàððîê î÷åíü ñëàáûé. Íåò ëåêàðñòâà, Òàððîê óìèðàòü.
        ai_output(self, hero, "Info_FreemineOrc_SUCHEULUMULU_17_06"); //Íåçíàêîìåö ïðèíåñòè ëåêàðñòâà, òîãäà Òàððîê ïîìîãàòü!
    };
};

instance info_freemineorc_givepotion(c_info) {
    npc = freemineorc /*7774*/;
    nr = 0;
    condition = info_freemineorc_givepotion_condition;
    information = info_freemineorc_givepotion_info;
    description = "Âîò, ÿ íàøåë òâîè ëåêàðñòâà!";
};

func int info_freemineorc_givepotion_condition() {
    if (npc_knowsinfo(hero, info_freemineorc_wastun /*10698*/) && npc_hasitems(hero, orcmedicine)) {
        return true;
    };
};

func void info_freemineorc_givepotion_info() {
    ai_output(hero, self, "Info_FreemineOrc_GIVEPOTION_15_01"); //Âîò, ÿ íàøåë òâîè ëåêàðñòâà!
    b_giveinvitems(hero, self, orcmedicine /*4748*/, 1);
    equipitem(self, orcmedicine /*4748*/);
    if (c_bodystatecontains(self, bs_sit)) {
        ai_standup(self);
        ai_turntonpc(self, hero);
    };
    ai_useitemtostate(self, orcmedicine /*4748*/, 1);
    ai_useitemtostate(self, orcmedicine /*4748*/, -1);
    ai_output(self, hero, "Info_FreemineOrc_GIVEPOTION_17_02"); //Íåçíàêîìåö íå ïëîõîé, êàê äðóãèå ëþäè! Íåçíàêîìåö õîðîøèé!
    ai_output(self, hero, "Info_FreemineOrc_GIVEPOTION_17_03"); //Òàððîê äîëæåí áëàãîäàðèòü!
    ai_output(hero, self, "Info_FreemineOrc_GIVEPOTION_15_04"); //Òåïåðü òû ìîæåøü äàòü ìíå Óëó-Ìóëó?
    ai_output(self, hero, "Info_FreemineOrc_GIVEPOTION_17_05"); //Íåçíàêîìåö ïîìîãàòü Òàððîê, è Òàððîê ïîìîãàòü íåçíàêîìåö òîæå!
    ai_output(self, hero, "Info_FreemineOrc_GIVEPOTION_17_06"); //Íåçíàêîìåö íóæíî ÊÐÎÒÀÊ, ÕÀÇ-ÒÀÊ, ÄÂÀÕÊÀÐÐ è ÎÐÔ-ÀÍÒÀÊ.
    ai_output(self, hero, "Info_FreemineOrc_GIVEPOTION_17_07"); //Íåçíàêîìåö ïðèíîñèòü âñå, òîãäà Òàððîê äåëàòü Óëó-Ìóëó!
    if (!npc_knowsinfo(hero, info_freemineorc_offer /*10701*/)) {
        b_story_foundorcslave();
    };
    b_story_curedorc();
};

instance info_freemineorc_firewaran(c_info) {
    npc = freemineorc /*7774*/;
    nr = 0;
    condition = info_freemineorc_firewaran_condition;
    information = info_freemineorc_firewaran_info;
    description = "×òî òàêîå ÊÐÎÒÀÊ?";
};

func int info_freemineorc_firewaran_condition() {
    if (npc_knowsinfo(hero, info_freemineorc_givepotion /*10716*/)) {
        return true;
    };
};

func void info_freemineorc_firewaran_info() {
    ai_output(hero, self, "Info_FreemineOrc_FIREWARAN_15_01"); //×òî òàêîå ÊÐÎÒÀÊ?
    ai_output(self, hero, "Info_FreemineOrc_FIREWARAN_17_02"); //Áûòü ÿçûê îãíÿ! Áûòü ÿçûê ÿùåðèöà îãíÿ!
};

instance info_freemineorc_firewaran2(c_info) {
    npc = freemineorc /*7774*/;
    nr = 0;
    condition = info_freemineorc_firewaran2_condition;
    information = info_freemineorc_firewaran2_info;
    description = "Ãäå ìíå èñêàòü ýòó îãíåííóþ ÿùåðèöó?";
};

func int info_freemineorc_firewaran2_condition() {
    if ((npc_knowsinfo(hero, info_freemineorc_firewaran /*10719*/) && (!npc_hasitems(hero, itat_waran_01))) && (!npc_knowsinfo(hero, info_freemineorc_everyulumulu /*10746*/))) {
        return true;
    };
};

func void info_freemineorc_firewaran2_info() {
    ai_output(hero, self, "Info_FreemineOrc_FIREWARAN2_15_01"); //Ãäå ìíå èñêàòü ýòó îãíåííóþ ÿùåðèöó?
    ai_output(self, hero, "Info_FreemineOrc_FIREWARAN2_17_02"); //Îãíåííàÿ ÿùåðèöà æèòü äîìà. Äîìà Òàððîê. Íåçíàêîìåö õîðîøî èñêàòü!
    ai_output(self, hero, "Info_FreemineOrc_FIREWARAN2_17_03"); //Ìîæíî íàéòè åùå îãíåííàÿ ÿùåðèöà íà ïåñîê ó ìîðÿ.
    b_logentry(ch4_ulumulu, ch4_ulumulu_6);
};

instance info_freemineorc_shadowbeast(c_info) {
    npc = freemineorc /*7774*/;
    nr = 0;
    condition = info_freemineorc_shadowbeast_condition;
    information = info_freemineorc_shadowbeast_info;
    description = "×òî îçíà÷àåò ÕÀÇ-ÒÀÊ?";
};

func int info_freemineorc_shadowbeast_condition() {
    if (npc_knowsinfo(hero, info_freemineorc_givepotion /*10716*/)) {
        return true;
    };
};

func void info_freemineorc_shadowbeast_info() {
    ai_output(hero, self, "Info_FreemineOrc_SHADOWBEAST_Info_15_01"); //×òî îçíà÷àåò ÕÀÇ-ÒÀÊ?
    ai_output(self, hero, "Info_FreemineOrc_SHADOWBEAST_Info_17_02"); //Áûòü ðîã ìðàêîðèñà. Îñòðûé ðîã, êàê íîæ, òâåðäûé, êàê êàìåíü.
};

instance info_freemineorc_shadowbeast2(c_info) {
    npc = freemineorc /*7774*/;
    nr = 0;
    condition = info_freemineorc_shadowbeast2_condition;
    information = info_freemineorc_shadowbeast2_info;
    description = "Ãäå ìíå èñêàòü ìðàêîðèñîâ?";
};

func int info_freemineorc_shadowbeast2_condition() {
    if ((npc_knowsinfo(hero, info_freemineorc_shadowbeast /*10725*/) && (!npc_hasitems(hero, itat_shadow_02))) && (!npc_knowsinfo(hero, info_freemineorc_everyulumulu /*10746*/))) {
        return true;
    };
};

func void info_freemineorc_shadowbeast2_info() {
    ai_output(hero, self, "Info_FreemineOrc_SHADOWBEAST2_Info_15_01"); //Ãäå ìíå èñêàòü ìðàêîðèñîâ?
    ai_output(self, hero, "Info_FreemineOrc_SHADOWBEAST2_Info_17_02"); //Æèòü â ëåñ èëè ïåùåðà. Íå ëþáèòü ñâåò.
    ai_output(self, hero, "Info_FreemineOrc_SHADOWBEAST2_Info_17_03"); //Áûòü î÷åíü îïàñíûé. Íåçíàêîìåö, îñòîðîæíî!
    b_logentry(ch4_ulumulu, ch4_ulumulu_7);
};

instance info_freemineorc_swampshark(c_info) {
    npc = freemineorc /*7774*/;
    nr = 0;
    condition = info_freemineorc_swampshark_condition;
    information = info_freemineorc_swampshark_info;
    description = "ÄÂÀÕÊÀÐÐ? À ýòî ÷òî?";
};

func int info_freemineorc_swampshark_condition() {
    if (npc_knowsinfo(hero, info_freemineorc_givepotion /*10716*/)) {
        return true;
    };
};

func void info_freemineorc_swampshark_info() {
    ai_output(hero, self, "Info_FreemineOrc_SWAMPSHARK_15_01"); //ÄÂÀÕÊÀÐÐ? À ýòî ÷òî?
    ai_output(self, hero, "Info_FreemineOrc_SWAMPSHARK_17_02"); //Áûòü çóá áîëîòîæîðà. Êîãäà ýòîò çóá êóñàòü, æåðòâà íèêîãäà íå óáåãàòü.
};

instance info_freemineorc_swampshark2(c_info) {
    npc = freemineorc /*7774*/;
    nr = 0;
    condition = info_freemineorc_swampshark2_condition;
    information = info_freemineorc_swampshark2_info;
    description = "Ãäå ìíå èñêàòü áîëîòîæîðîâ?";
};

func int info_freemineorc_swampshark2_condition() {
    if ((npc_knowsinfo(hero, info_freemineorc_swampshark /*10731*/) && (!npc_hasitems(hero, itat_swampshark_02))) && (!npc_knowsinfo(hero, info_freemineorc_everyulumulu /*10746*/))) {
        return true;
    };
};

func void info_freemineorc_swampshark2_info() {
    ai_output(hero, self, "Info_FreemineOrc_SWAMPSHARK2_15_01"); //Ãäå ìíå èñêàòü áîëîòîæîðîâ?
    ai_output(self, hero, "Info_FreemineOrc_SWAMPSHARK2_17_02"); //Ìíîãî áîëîòîæîðîâ, ãäå Ëàãåðü ëþäåé. Òîò Ëàãåðü, ãäå áîëîòî, êîíå÷íî!
    b_logentry(ch4_ulumulu, ch4_ulumulu_8);
};

instance info_freemineorc_troll(c_info) {
    npc = freemineorc /*7774*/;
    nr = 0;
    condition = info_freemineorc_troll_condition;
    information = info_freemineorc_troll_info;
    description = "×òî òàêîå ÎÐÔ-ÀÍÒÀÊ?";
};

func int info_freemineorc_troll_condition() {
    if (npc_knowsinfo(hero, info_freemineorc_givepotion /*10716*/)) {
        return true;
    };
};

func void info_freemineorc_troll_info() {
    ai_output(hero, self, "Info_FreemineOrc_TROLL_15_01"); //×òî òàêîå ÎÐÔ-ÀÍÒÀÊ?
    ai_output(self, hero, "Info_FreemineOrc_TROLL_17_02"); //Áûòü çóá áîëüøîé òðîëëü! Äåëàòü áîëüøîé äûðêà â äîáû÷à!
};

instance info_freemineorc_troll2(c_info) {
    npc = freemineorc /*7774*/;
    nr = 0;
    condition = info_freemineorc_troll2_condition;
    information = info_freemineorc_troll2_info;
    description = "Ãäå ìíå íàéòè òðîëëåé?";
};

func int info_freemineorc_troll2_condition() {
    if ((npc_knowsinfo(hero, info_freemineorc_troll /*10737*/) && (!npc_hasitems(hero, itat_troll_02))) && (!npc_knowsinfo(hero, info_freemineorc_everyulumulu /*10746*/))) {
        return true;
    };
};

func void info_freemineorc_troll2_info() {
    ai_output(hero, self, "Info_FreemineOrc_TROLL2_15_01"); //Ãäå ìíå íàéòè òðîëëåé?
    ai_output(self, hero, "Info_FreemineOrc_TROLL2_17_02"); //Òðîëëè æèòü, ãäå ãîðû! Òðîëëè ëþáèòü ìíîãî ìåñòî!
    ai_output(self, hero, "Info_FreemineOrc_TROLL2_17_03"); //Íåçíàêîìåö èñêàòü â ãîðàõ íà ñåâåð! Íî áîÿòüñÿ êóëàêîâ òðîëëåé!
    ai_output(self, hero, "Info_FreemineOrc_TROLL2_17_04"); //Êîãäà êóëàê áèòü, íåçíàêîìåö ïàäàòü ñ ãîðû!
    b_logentry(ch4_ulumulu, ch4_ulumulu_9);
};

instance info_freemineorc_lookingulumulu(c_info) {
    npc = freemineorc /*7774*/;
    nr = 0;
    condition = info_freemineorc_lookingulumulu_condition;
    information = info_freemineorc_lookingulumulu_info;
    permanent = true;
    description = "ß ïîêà åùå íå ñîáðàë âñå, ÷òî íóæíî.";
};

func int info_freemineorc_lookingulumulu_condition() {
    if ((((((freemineorc_lookingulumulu == log_running) && ((((!npc_hasitems(hero, itat_waran_01)) || (!npc_hasitems(hero, itat_shadow_02))) || (!npc_hasitems(hero, itat_swampshark_02))) || (!npc_hasitems(hero, itat_troll_02)))) && npc_knowsinfo(hero, info_freemineorc_firewaran2 /*10722*/)) && npc_knowsinfo(hero, info_freemineorc_shadowbeast2 /*10728*/)) && npc_knowsinfo(hero, info_freemineorc_swampshark2 /*10734*/)) && npc_knowsinfo(hero, info_freemineorc_troll2 /*10740*/)) {
        return true;
    };
};

func void info_freemineorc_lookingulumulu_info() {
    ai_output(hero, self, "Info_FreemineOrc_LOOKINGULUMULU_15_01"); //ß ïîêà åùå íå ñîáðàë âñå, ÷òî íóæíî.
    ai_output(self, hero, "Info_FreemineOrc_LOOKINGULUMULU_17_02"); //Íåçíàêîìåö èñêàòü. Òàððîê æäàòü çäåñü!
    ai_stopprocessinfos(self);
};

instance info_freemineorc_everyulumulu(c_info) {
    npc = freemineorc /*7774*/;
    nr = 0;
    condition = info_freemineorc_everyulumulu_condition;
    information = info_freemineorc_everyulumulu_info;
    description = "ß ñîáðàë âñå, ÷òî íóæíî äëÿ Óëó-Ìóëó!";
};

func int info_freemineorc_everyulumulu_condition() {
    if (((((freemineorc_lookingulumulu == log_running) && npc_hasitems(hero, itat_waran_01)) && npc_hasitems(hero, itat_shadow_02)) && npc_hasitems(hero, itat_swampshark_02)) && npc_hasitems(hero, itat_troll_02)) {
        return true;
    };
};

func void info_freemineorc_everyulumulu_info() {
    ai_output(hero, self, "Info_FreemineOrc_EVERYULUMULU_15_01"); //ß ñîáðàë âñå, ÷òî íóæíî äëÿ Óëó-Ìóëó!
    ai_output(self, hero, "Info_FreemineOrc_EVERYULUMULU_17_02"); //Íåçíàêîìåö áûòü ñèëüíûé âîèí! Äàâàé âåùè! Òàððîê ãîòîâèòü ÓËÓ-ÌÓËÓ!
    ai_output(self, hero, "Info_FreemineOrc_EVERYULUMULU_17_03"); //Âîò! Íåçíàêîìåö íîñèòü ÓËÓ-ÌÓËÓ è áûòü ãîðäûé! Òàððîê òåïåðü ñïàòü!
    createinvitems(hero, itat_waran_01, 3);
    b_giveinvitems(hero, self, itat_waran_01 /*4078*/, 4);
    npc_removeinvitem(hero, itat_shadow_02 /*4083*/);
    npc_removeinvitem(hero, itat_swampshark_02 /*4089*/);
    npc_removeinvitem(hero, itat_troll_02 /*4086*/);
    npc_removeinvitems(self, itat_waran_01, 4);
    b_story_gotulumulu();
};

instance info_highpriest1(c_info) {
    npc = orc_priest_1 /*7776*/;
    nr = 1;
    condition = info_highpriest1_condition;
    information = info_highpriest1_info;
    important = true;
};

func int info_highpriest1_condition() {
    return true;
};

func void info_highpriest1_info() {
    b_selectweapon(self, other);
    ai_setwalkmode(self, npc_walk);
    ai_gotonpc(self, other);
    ai_output(self, other, "Info_HighPriest1_17_01"); //ÑÌÅÅÅÅÅÅÅÐÒÍÛÛÛÉ!
    ai_output(self, other, "Info_HighPriest1_17_02"); //ÊÀÊ ÎÑÌÅÅÅËÈËÑß ÒÛ ÏÎÒÐÅÂÎÆÈÒÜ ÌÅÍß???!!!
    ai_output(self, other, "Info_HighPriest1_17_03"); //ÃÎÒÎÂÜÑß ÓÌÅÐÅÒÜ!
    ai_output(other, self, "Info_HighPriest1_15_04"); //Ìû åùå ïîñìîòðèì, êîìó íóæíî ãîòîâèòüñÿ, òû, ñãíèâøèé êóñîê ìÿñà!
    b_logentry(ch4_entertemple, ch4_entertemple_5);
    ai_stopprocessinfos(self);
    npc_setattitude(self, att_hostile);
    npc_settempattitude(self, att_hostile);
    npc_settarget(self, hero);
    ai_startstate(self, zs_attack, 1, "");
};

instance info_highpriest2(c_info) {
    npc = orc_priest_2 /*7778*/;
    nr = 1;
    condition = info_highpriest2_condition;
    information = info_highpriest2_info;
    important = true;
};

func int info_highpriest2_condition() {
    return true;
};

func void info_highpriest2_info() {
    b_selectweapon(self, other);
    ai_setwalkmode(self, npc_walk);
    ai_gotonpc(self, other);
    ai_output(self, other, "Info_HighPriest2_17_01"); //ÍÅÂÅÐÍÛÉ Â ÕÐÀÌÅ ÏÎÂÅËÈÒÅËß!!!
    ai_output(self, other, "Info_HighPriest2_17_02"); //ÁÓÄÜ ÆÅ ÏÐÎÊËßÒ!
    ai_output(other, self, "Info_HighPriest2_15_03"); //Ïðîêëèíàé ÑÀÌ ÑÅÁß, ãíèëü!
    b_logentry(ch4_entertemple, ch4_entertemple_6);
    ai_stopprocessinfos(self);
    npc_setattitude(self, att_hostile);
    npc_settempattitude(self, att_hostile);
    npc_settarget(self, hero);
    ai_startstate(self, zs_attack, 1, "");
};

instance info_highpriest3(c_info) {
    npc = orc_priest_3 /*7780*/;
    nr = 1;
    condition = info_highpriest3_condition;
    information = info_highpriest3_info;
    important = true;
};

func int info_highpriest3_condition() {
    return 1;
};

func void info_highpriest3_info() {
    b_selectweapon(self, other);
    ai_setwalkmode(self, npc_walk);
    ai_gotonpc(self, other);
    ai_output(self, other, "Info_HighPriest3_17_01"); //ÑÌÅÅÅÅÅÅÅÐÒÍÛÛÛÉ!
    ai_output(self, other, "Info_HighPriest3_17_02"); //ÒÂÎÎÎÎÎÎÉ ÏÓÓÓÓÒÜ ÎÊÎÎÎÍ×ÈÒÑß ÇÄÅÅÅÑÜ!!
    ai_output(other, self, "Info_HighPriest3_15_03"); //Ïðåæäå ÿ òåáÿ îòïðàâëþ ïîïóòåøåñòâîâàòü!
    b_logentry(ch4_entertemple, ch4_entertemple_7);
    ai_stopprocessinfos(self);
    npc_setattitude(self, att_hostile);
    npc_settempattitude(self, att_hostile);
    npc_settarget(self, hero);
    ai_startstate(self, zs_attack, 1, "");
};

instance info_highpriest4(c_info) {
    npc = orc_priest_4 /*7782*/;
    nr = 1;
    condition = info_highpriest4_condition;
    information = info_highpriest4_info;
    important = true;
};

func int info_highpriest4_condition() {
    return 1;
};

func void info_highpriest4_info() {
    b_selectweapon(self, other);
    ai_setwalkmode(self, npc_walk);
    ai_gotonpc(self, other);
    ai_output(self, other, "Info_HighPriest4_17_01"); //ÒÂÎÎÎÉ ÄÎÎÎËÃÈÉ ÏÓÓÓÒÜ ÁÓÓÓÄÅÒ ÎÊÎÎÎÍ×ÅÍ ÇÄÅÅÅÅÑÜ!!!
    ai_output(self, other, "Info_HighPriest4_17_02"); //ÒÅÅÅÅËÎÎÎÎ ÒÂÎÎÎÎÅÅÅ ÑÃÎÎÎÐÈÒ Â ÎÃÍÅÅÅÅ!!!
    ai_output(other, self, "Info_HighPriest4_15_03"); //Ïðèçíàòüñÿ, ýòà èäåÿ ìíå íå ñëèøêîì ïî äóøå!
    b_logentry(ch4_entertemple, ch4_entertemple_8);
    ai_stopprocessinfos(self);
    npc_setattitude(self, att_hostile);
    npc_settempattitude(self, att_hostile);
    npc_settarget(self, hero);
    ai_startstate(self, zs_attack, 1, "");
};

instance info_highpriest5(c_info) {
    npc = orc_priest_5 /*7784*/;
    nr = 1;
    condition = info_highpriest5_condition;
    information = info_highpriest5_info;
    permanent = true;
    important = true;
};

func int info_highpriest5_condition() {
    if ((((encounteredhighpriest == false) || npc_hasitems(hero, mythrilklinge02)) || npc_hasitems(hero, urizielrune)) && (self.npctype != npctype_main)) {
        return true;
    };
};

func void info_highpriest5_info() {
    ai_setwalkmode(self, npc_walk);
    ai_gotonpc(self, other);
    if (npc_hasitems(hero, mythrilklinge02) || npc_hasitems(hero, urizielrune)) {
        ai_output(self, other, "Info_HighPriest5_17_04"); //ÓÓÓ ÒÅÅÅÁßßß ÅÅÅÑÒÜ ÌÎÎÎÙÍÎÅÅÅ ÎÐÓÓÓÆÈÅÅÅ!!!
        ai_output(self, other, "Info_HighPriest5_17_05"); //ßßßß ÎÑÒÀÀÀÍÎÂËÞÞÞ ÒÅÅÅÁßß!!!
        ai_stopprocessinfos(self);
        self.npctype = npctype_main;
        npc_setattitude(self, att_hostile);
        npc_settempattitude(self, att_hostile);
        npc_settarget(self, hero);
        ai_startstate(self, zs_attack, 1, "");
    }
    else {
        ai_output(self, other, "Info_HighPriest5_17_01"); //ÒÛÛÛ ÄÎÎÎËÆÅÍ ÏÎÂÅÐÍÓÓÓÒÜ ÍÀÇÀÀÀÀÄ!!!
        ai_output(self, other, "Info_HighPriest5_17_02"); //ÍÈÈÈÊÒÎÎÎ ÍÅ ÑÌÅÅÅÅÅÅÒ ÒÐÅÅÅÂÎÆÈÈÈÈÒÜ ÑÎÎÎÎÍ ÌÎÅÅÅÅÃÎ ÏÎÎÎÎÂÅËÈÈÈÈÒÅËß!!!
        ai_output(other, self, "Info_HighPriest5_15_03"); //Îøèáî÷êà: âàø ÑÏßÙÈÉ î÷åíü ñêîðî ïðîñíåòñÿ!
        ai_stopprocessinfos(self);
        b_story_encounteredhighpriest();
    };
};

instance info_highpriest5failed(c_info) {
    npc = orc_priest_5 /*7784*/;
    nr = 2;
    condition = info_highpriest5failed_condition;
    information = info_highpriest5failed_info;
    important = true;
};

func int info_highpriest5failed_condition() {
    if (((npc_knowsinfo(hero, info_highpriest5 /*10761*/) && (self.aivar[24] >= highpriest_maxhit)) && (!npc_hasitems(hero, mythrilklinge02))) && (!npc_hasitems(hero, urizielrune))) {
        return true;
    };
};

func void info_highpriest5failed_info() {
    ai_output(other, self, "Info_HighPriest5FAILED_15_01"); //×åðò! Íà íåì íè öàðàïèíû! Íóæåí äðóãîé...
    ai_output(self, other, "Info_HighPriest5FAILED_17_02"); //ÒÅÅÅÏÅÅÅÐÜ ÒÛÛÛ ÓÌÐÅÅÅØÜ!!!
    ai_output(other, self, "Info_HighPriest5FAILED_15_03"); //Ïîðà óáèðàòüñÿ îòñþäà, äà ïîáûñòðåå!
    ai_removeweapon(other);
    ai_turnaway(other, self);
    self.npctype = npctype_main;
    npc_setattitude(self, att_hostile);
    npc_settempattitude(self, att_hostile);
    b_logentry(ch4_entertemple, ch4_entertemple_9);
    b_givexp(xp_retreatfromlastpriest);
    ai_stopprocessinfos(self);
    npc_settarget(self, hero);
    ai_startstate(self, zs_attack, 1, "");
};

instance info_orcshaman_exit(c_info) {
    npc = orc_2200_shaman /*7786*/;
    nr = 999;
    condition = info_orcshaman_exit_condition;
    information = info_orcshaman_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_orcshaman_exit_condition() {
    return true;
};

func void info_orcshaman_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_orcshaman_thx(c_info) {
    npc = orc_2200_shaman /*7786*/;
    condition = info_orcshaman_thx_condition;
    information = info_orcshaman_thx_info;
    important = true;
};

func int info_orcshaman_thx_condition() {
    if (kapitel == 4) {
        return true;
    };
};

func void info_orcshaman_thx_info() {
    ai_output(self, hero, "Info_OrcShaman_THX_17_01"); //Äîëæåí áëàãîäàðèòü íåçíàêîìöà.
    ai_output(self, hero, "Info_OrcShaman_THX_17_02"); //Ïëîõèå îðêè õîòåëè óáèâàòü ìåíÿ.
    ai_output(self, hero, "Info_OrcShaman_THX_17_03"); //Ñòàðûå áðàòüÿ - òåïåðü âðàãè.
};

instance info_orcshaman_who(c_info) {
    npc = orc_2200_shaman /*7786*/;
    nr = 0;
    condition = info_orcshaman_who_condition;
    information = info_orcshaman_who_info;
    description = "Êàê òåáÿ çîâóò?";
};

func int info_orcshaman_who_condition() {
    if (npc_knowsinfo(hero, info_orcshaman_thx /*10770*/)) {
        return true;
    };
};

func void info_orcshaman_who_info() {
    self.name = name_orcshaman;
    ai_output(hero, self, "Info_OrcShaman_WHO_15_01"); //Êòî òû?
    ai_output(self, hero, "Info_OrcShaman_WHO_17_02"); //Èìÿ - Óð-Øàê.
    ai_output(self, hero, "Info_OrcShaman_WHO_17_03"); //Áûòü ñûíîì äóõîâ. Ëþäè çîâóò øàìàíîì.
};

instance info_orcshaman_tongue(c_info) {
    npc = orc_2200_shaman /*7786*/;
    nr = 0;
    condition = info_orcshaman_tongue_condition;
    information = info_orcshaman_tongue_info;
    description = "Îòêóäà òû çíàåøü íàø ÿçûê?";
};

func int info_orcshaman_tongue_condition() {
    if (npc_knowsinfo(hero, info_orcshaman_thx /*10770*/)) {
        return true;
    };
};

func void info_orcshaman_tongue_info() {
    ai_output(hero, self, "Info_OrcShaman_TONGUE_15_01"); //Îòêóäà òû çíàåøü íàø ÿçûê?
    ai_output(self, hero, "Info_OrcShaman_TONGUE_17_02"); //Óð-Øàê áûë ðàá ëþäåé â øàõòå.
    ai_output(self, hero, "Info_OrcShaman_TONGUE_17_03"); //Óáåæàë. Ìíîãî çèì íàçàä - óáåæàë.
};

instance info_orcshaman_mine(c_info) {
    npc = orc_2200_shaman /*7786*/;
    nr = 0;
    condition = info_orcshaman_mine_condition;
    information = info_orcshaman_mine_info;
    description = "Òû áûë ðàáîì â øàõòå? Â êàêîé øàõòå?";
};

func int info_orcshaman_mine_condition() {
    if (npc_knowsinfo(hero, info_orcshaman_tongue /*10776*/)) {
        return true;
    };
};

func void info_orcshaman_mine_info() {
    ai_output(hero, self, "Info_OrcShaman_MINE_15_01"); //Òû áûë ðàáîì â øàõòå? Â êàêîé øàõòå?
    ai_output(self, hero, "Info_OrcShaman_MINE_17_02"); //Øàõòà ïîä äåðåâíåé â Ëîùèíå.
};

instance info_orcshaman_why(c_info) {
    npc = orc_2200_shaman /*7786*/;
    nr = 0;
    condition = info_orcshaman_why_condition;
    information = info_orcshaman_why_info;
    description = "Ïî÷åìó òâîè áðàòüÿ íàïàëè íà òåáÿ?";
};

func int info_orcshaman_why_condition() {
    if (npc_knowsinfo(hero, info_orcshaman_thx /*10770*/)) {
        return true;
    };
};

func void info_orcshaman_why_info() {
    ai_output(hero, self, "Info_OrcShaman_WHY_15_01"); //Ïî÷åìó òâîè áðàòüÿ íàïàëè íà òåáÿ?
    ai_output(self, hero, "Info_OrcShaman_WHY_17_02"); //Óð-Øàêà íå ëþáÿò.
    ai_output(self, hero, "Info_OrcShaman_WHY_17_03"); //Çàïÿòíàë âåðó â ÊÐÓØÀÊÀ.
    ai_output(self, hero, "Info_OrcShaman_WHY_17_04"); //Ñ÷èòàþ ÊÐÓØÀÊÀ ïëîõèì äåìîíîì.
};

instance info_orcshaman_krushak(c_info) {
    npc = orc_2200_shaman /*7786*/;
    nr = 0;
    condition = info_orcshaman_krushak_condition;
    information = info_orcshaman_krushak_info;
    description = "Êòî ýòî - ÊÐÓØÀÊ?";
};

func int info_orcshaman_krushak_condition() {
    if (npc_knowsinfo(hero, info_orcshaman_why /*10782*/)) {
        return true;
    };
};

func void info_orcshaman_krushak_info() {
    ai_output(hero, self, "Info_OrcShaman_KRUSHAK_15_01"); //Êòî ýòî - ÊÐÓØÀÊ?
    ai_output(self, hero, "Info_OrcShaman_KRUSHAK_17_02"); //Ëþäè çîâóò ÑÏÀÒÜ.
    ai_output(hero, self, "Info_OrcShaman_KRUSHAK_15_03"); //Òû èìååøü â âèäó 'Ñïÿùèé'?
    ai_output(self, hero, "Info_OrcShaman_KRUSHAK_17_04"); //Äà, ëþäè ãîâîðÿò ÑÏßÙÈÉ!
};

instance info_orcshaman_sleeper(c_info) {
    npc = orc_2200_shaman /*7786*/;
    nr = 0;
    condition = info_orcshaman_sleeper_condition;
    information = info_orcshaman_sleeper_info;
    description = "×òî òåáå èçâåñòíî ïðî Ñïÿùåãî?";
};

func int info_orcshaman_sleeper_condition() {
    if (npc_knowsinfo(hero, info_orcshaman_krushak /*10785*/)) {
        return true;
    };
};

func void info_orcshaman_sleeper_info() {
    ai_output(hero, self, "Info_OrcShaman_SLEEPER_15_01"); //×òî òåáå èçâåñòíî ïðî Ñïÿùåãî?
    ai_output(self, hero, "Info_OrcShaman_SLEEPER_17_02"); //Áûòü ïÿòü áðàòüåâ. Ìíîãî çèì íàçàä!
    ai_output(self, hero, "Info_OrcShaman_SLEEPER_17_03"); //Áûòü ñûíîâüÿìè äóõîâ, êàê Óð-Øàê!
    ai_output(hero, self, "Info_OrcShaman_SLEEPER_15_04"); //Òû õî÷åøü ñêàçàòü - ïÿòü øàìàíîâ!
    ai_output(self, hero, "Info_OrcShaman_SLEEPER_17_05"); //Ïîçâàëè ÊÐÓØÀÊÀ!
    ai_output(self, hero, "Info_OrcShaman_SLEEPER_17_06"); //Õîòåëè ïîáåäèòü êëàí âðàãîâ!
    ai_output(self, hero, "Info_OrcShaman_SLEEPER_17_07"); //Ïÿòü áðàòüåâ ïîñòðîèëè õðàì ïîä çåìëåé äëÿ ÊÐÓØÀÊÀ!
    ai_output(hero, self, "Info_OrcShaman_SLEEPER_15_08"); //Ïîäçåìíûé õðàì Ñïÿùåãî! Âîò ÷òî èìåë â âèäó Êñàðäàñ, êîãäà ãîâîðèë, ÷òî âõîä â õðàì íàõîäèòñÿ â ãîðîäå îðêîâ!
};

instance info_orcshaman_curse(c_info) {
    npc = orc_2200_shaman /*7786*/;
    nr = 0;
    condition = info_orcshaman_curse_condition;
    information = info_orcshaman_curse_info;
    description = "×òî ñëó÷èëîñü â ïîäçåìíîì õðàìå?";
};

func int info_orcshaman_curse_condition() {
    if (npc_knowsinfo(hero, info_orcshaman_sleeper /*10788*/)) {
        return true;
    };
};

func void info_orcshaman_curse_info() {
    ai_output(hero, self, "Info_OrcShaman_CURSE_15_01"); //×òî ñëó÷èëîñü â ïîäçåìíîì õðàìå?
    ai_output(self, hero, "Info_OrcShaman_CURSE_17_02"); //Áðàòüÿ îòäàëè ñåðäöå ÊÐÓØÀÊÓ.
    ai_output(self, hero, "Info_OrcShaman_CURSE_17_03"); //Íî ÊÐÓØÀÊ áûòü ïëîõîé. ÊÐÓØÀÊ ïðîêëÿë âñåõ, êòî ñòðîèë õðàì.
    ai_output(self, hero, "Info_OrcShaman_CURSE_17_04"); //Ó áðàòüåâ íåò ñåðäöà, ÷òîáû áûòü ìåðòâûìè èëè æèâûìè. Ñòàëè è òåì, è äðóãèì.
    ai_output(self, hero, "Info_OrcShaman_CURSE_17_05"); //Òåïåðü ó ÊÐÓØÀÊÀ åñòü ñåðäöà áðàòüåâ. Â ñåðäöàõ åñòü ñèëà ÊÐÓØÀÊÀ.
    ai_output(hero, self, "Info_OrcShaman_CURSE_15_06"); //×òî ñòàëî ñî ñòðîèòåëÿìè õðàìà?
    ai_output(self, hero, "Info_OrcShaman_CURSE_17_07"); //ÊÐÓØÀÊ ïðîêëÿë âñåõ. Ñòðîèòåëåé òîæå. Âñå ñòàëè æèâûå è ìåðòâûå, è òî, è äðóãîå.
};

instance info_orcshaman_outside(c_info) {
    npc = orc_2200_shaman /*7786*/;
    nr = 0;
    condition = info_orcshaman_outside_condition;
    information = info_orcshaman_outside_info;
    description = "Íåóæåëè îñòàâøèåñÿ íà ïîâåðõíîñòè îðêè íå ïðåäïðèíÿëè íè÷åãî? ";
};

func int info_orcshaman_outside_condition() {
    if (npc_knowsinfo(hero, info_orcshaman_curse /*10791*/)) {
        return true;
    };
};

func void info_orcshaman_outside_info() {
    ai_output(hero, self, "Info_OrcShaman_OUTSIDE_15_01"); //Íåóæåëè îñòàâøèåñÿ íà ïîâåðõíîñòè îðêè íå ïðåäïðèíÿëè íè÷åãî?
    ai_output(self, hero, "Info_OrcShaman_OUTSIDE_17_02"); //Îíè çàïå÷àòàëè çàìîê. Áðàòüÿ ïîêëîíÿþòñÿ ÊÐÓØÀÊÓ.
    ai_output(self, hero, "Info_OrcShaman_OUTSIDE_17_03"); //ÊÐÓØÀÊ ïîëó÷àåò æåðòâó è íå ñòàíîâèòñÿ ïëîõîé.
    ai_output(self, hero, "Info_OrcShaman_OUTSIDE_17_04"); //Óð-Øàê äóìàë, ÷òî æåðòâà - ýòî ïëîõî. Ãîâîðèë áðàòüÿì, ÷òî ÊÐÓØÀÊ ïëîõîé.
    ai_output(self, hero, "Info_OrcShaman_OUTSIDE_17_05"); //Áðàòüÿ íå õîòåëè ñëóøàòü. Áðàòüÿ ñêàçàëè Óð-Øàêó: óõîäè. Áðàòüÿ óäàðèëè Óð-Øàêà.
};

instance info_orcshaman_intemple(c_info) {
    npc = orc_2200_shaman /*7786*/;
    nr = 0;
    condition = info_orcshaman_intemple_condition;
    information = info_orcshaman_intemple_info;
    description = "Ìíå íóæíî ïîïàñòü â ïîäçåìíûé õðàì!";
};

func int info_orcshaman_intemple_condition() {
    if (npc_knowsinfo(hero, info_orcshaman_outside /*10794*/)) {
        return true;
    };
};

func void info_orcshaman_intemple_info() {
    ai_output(hero, self, "Info_OrcShaman_INTEMPLE_15_01"); //Ìíå íóæíî ïîïàñòü â ïîäçåìíûé õðàì! Òû ìîæåøü ïðîâåñòè ìåíÿ òóäà?
    ai_output(self, hero, "Info_OrcShaman_INTEMPLE_17_02"); //Óð-Øàê ãîâîðèò ñïàñèáî íåçíàêîìöó. Íåçíàêîìåö ñïàñ Óð-Øàêà.
    ai_output(self, hero, "Info_OrcShaman_INTEMPLE_17_03"); //Íî âõîä â õðàì áûòü äîìà. Óð-Øàê íå ìîæåò èäòè äîìîé.
    ai_output(hero, self, "Info_OrcShaman_INTEMPLE_15_04"); //Ïîíèìàþ: òû äóìàåøü, ÷òî òåáÿ íå ïðîïóñòÿò â ãîðîä îðêîâ.
};

instance info_orcshaman_map(c_info) {
    npc = orc_2200_shaman /*7786*/;
    nr = 0;
    condition = info_orcshaman_map_condition;
    information = info_orcshaman_map_info;
    description = "Òû ìîæåøü ïîêàçàòü ìíå ãîðîä îðêîâ íà êàðòå?";
};

func int info_orcshaman_map_condition() {
    if (npc_knowsinfo(hero, info_orcshaman_intemple /*10797*/) && npc_hasitems(hero, itwrworldmap)) {
        return true;
    };
};

func void info_orcshaman_map_info() {
    ai_output(hero, self, "Info_OrcShaman_MAP_15_01"); //Òû ìîæåøü ïîêàçàòü ìíå ãîðîä îðêîâ íà êàðòå?
    ai_output(self, hero, "Info_OrcShaman_MAP_17_02"); //Äîì Óð-Øàêà áûòü òàì, ãäå êàðòà ïóñòàÿ.
    ai_output(self, hero, "Info_OrcShaman_MAP_17_03"); //Íåçíàêîìåö äàåò êàðòó, Óð-Øàê ðèñóåò êàðòó!
    ai_output(self, hero, "Info_OrcShaman_MAP_17_04"); //(ðèñóåò íà êàðòå)
    ai_output(hero, self, "Info_OrcShaman_MAP_15_05"); //Çäîðîâî! Òû õîðîøî ðèñóåøü! Ñïàñèáî!
    b_giveinvitems(hero, self, itwrworldmap /*4600*/, 1);
    npc_removeinvitem(self, itwrworldmap /*4600*/);
    createinvitem(self, itwrworldmap_orc);
    b_giveinvitems(self, hero, itwrworldmap_orc /*4744*/, 1);
};

instance info_orcshaman_fight(c_info) {
    npc = orc_2200_shaman /*7786*/;
    nr = 0;
    condition = info_orcshaman_fight_condition;
    information = info_orcshaman_fight_info;
    description = "È ïîõîæå, ïðîðûâàòüñÿ òóäà ïðèäåòñÿ ñ áîåì!";
};

func int info_orcshaman_fight_condition() {
    if (npc_knowsinfo(hero, info_orcshaman_intemple /*10797*/)) {
        return true;
    };
};

func void info_orcshaman_fight_info() {
    ai_output(hero, self, "Info_OrcShaman_FIGHT_15_01"); //È ïîõîæå, ïðîðûâàòüñÿ òóäà ïðèäåòñÿ ñ áîåì!
    ai_output(self, hero, "Info_OrcShaman_FIGHT_17_02"); //Äîìà áðàòüÿ î÷åíü ñèëüíûå! Áðàòüåâ áûòü îîîî÷åíü ìíîãî!
    ai_output(self, hero, "Info_OrcShaman_FIGHT_17_03"); //Íåçíàêîìåö, íå õîäè! Ìíîãî âîèíîâ! Íåçíàêîìåö óìðåò.
    ai_output(self, hero, "Info_OrcShaman_FIGHT_17_04"); //Äîìà áûòü äðóãèå ñûíîâüÿ äóõîâ. Íåçíàêîìåö çàãîðèòñÿ è óìðåò!
};

instance info_orcshaman_otherway(c_info) {
    npc = orc_2200_shaman /*7786*/;
    nr = 0;
    condition = info_orcshaman_otherway_condition;
    information = info_orcshaman_otherway_info;
    description = "Ëàäíî, ëàäíî. Íî ìíå äåéñòâèòåëüíî íóæíî ïîïàñòü â õðàì!";
};

func int info_orcshaman_otherway_condition() {
    if (npc_knowsinfo(hero, info_orcshaman_fight /*10803*/)) {
        return true;
    };
};

func void info_orcshaman_otherway_info() {
    ai_output(hero, self, "Info_OrcShaman_OTHERWAY_15_01"); //Ëàäíî, ëàäíî. Íî ìíå äåéñòâèòåëüíî íóæíî ïîïàñòü â õðàì!
    ai_output(self, hero, "Info_OrcShaman_OTHERWAY_17_02"); //Óð-Øàê çíàåò ïóòü! Íåçíàêîìåö îäåíåò ÓËÓ-ÌÓËÓ.
    ai_output(hero, self, "Info_OrcShaman_OTHERWAY_15_03"); //ÓËÓ-ÌÓËÓ??? ×òî òàêîå Óëó-Ìóëó?
    ai_output(self, hero, "Info_OrcShaman_OTHERWAY_17_04"); //Áûòü çíàêîì äðóæáû. Áðàòüÿ óâàæàþò ÓËÓ-ÌÓËÓ!
    ai_output(self, hero, "Info_OrcShaman_OTHERWAY_17_05"); //Íåçíàêîìåö îäåíåò ÓËÓ-ÌÓËÓ è íå óìðåò!
};

instance info_orcshaman_ulumulu(c_info) {
    npc = orc_2200_shaman /*7786*/;
    nr = 0;
    condition = info_orcshaman_ulumulu_condition;
    information = info_orcshaman_ulumulu_info;
    description = "Ãäå æå ÿ âîçüìó ýòó Óëó-Ìóëó?";
};

func int info_orcshaman_ulumulu_condition() {
    if (npc_knowsinfo(hero, info_orcshaman_otherway /*10806*/)) {
        return true;
    };
};

func void info_orcshaman_ulumulu_info() {
    ai_output(hero, self, "Info_OrcShaman_ULUMULU_15_01"); //Ãäå æå ÿ âîçüìó ýòó Óëó-Ìóëó?
    ai_output(self, hero, "Info_OrcShaman_ULUMULU_17_02"); //Íåçíàêîìåö ïîéäåò ê äðóãó Óð-Øàêà!
    ai_output(self, hero, "Info_OrcShaman_ULUMULU_17_03"); //Äðóã Óð-Øàêà äàñò íåçíàêîìöó ÓËÓ-ÌÓËÓ. Íåçíàêîìåö îäåíåò ÓËÓ-ÌÓËÓ è íå óìðåò!
    ai_output(hero, self, "Info_OrcShaman_ULUMULU_15_04"); //Äà-äà, 'íå óìðåò', ÿ ïîíÿë. Ãäå èñêàòü òâîåãî äðóãà?
    ai_output(self, hero, "Info_OrcShaman_ULUMULU_17_05"); //Äðóã Óð-Øàêà ó ëþäåé, â øàõòå. Äðóã íå óáåæàë ñ Óð-Øàêîì. Äðóã òîãäà áûë áîëåí.
    b_story_foundurshak();
    info_clearchoices(info_orcshaman_ulumulu /*10809*/);
    info_addchoice(info_orcshaman_ulumulu /*10809*/, "Òåáÿ äåðæàëè â Ñâîáîäíîé Øàõòå?", info_orcshaman_ulumulu_fm);
    info_addchoice(info_orcshaman_ulumulu /*10809*/, "Òû áûë ðàáîì â çàáðîøåííîé øàõòå?", info_orcshaman_ulumulu_vm);
    info_addchoice(info_orcshaman_ulumulu /*10809*/, "Òû áûë â ïëåíó íà Ñòàðîé Øàõòå?", info_orcshaman_ulumulu_am);
};

func void info_orcshaman_ulumulu_vm() {
    ai_output(hero, self, "Info_OrcShaman_ULUMULU_15_08"); //Òû áûë ðàáîì â çàáðîøåííîé øàõòå?
    ai_output(self, hero, "Info_OrcShaman_ULUMULU_17_09"); //Óð-Øàê íå çíàåò òàêîãî ñëîâà.
};

func void info_orcshaman_ulumulu_am() {
    ai_output(hero, self, "Info_OrcShaman_ULUMULU_15_10"); //Òû áûë â ïëåíó íà Ñòàðîé Øàõòå?
    ai_output(self, hero, "Info_OrcShaman_ULUMULU_17_11"); //Óð-Øàê íå ïîíèìàåò!
};

func void info_orcshaman_ulumulu_fm() {
    ai_output(hero, self, "Info_OrcShaman_ULUMULU_15_12"); //Òåáÿ äåðæàëè â Ñâîáîäíîé Øàõòå?
    ai_output(self, hero, "Info_OrcShaman_ULUMULU_17_13"); //Óð-Øàê áûòü ðàáîì â øàõòå ïîä äåðåâíåé, â Ëîùèíå.
    ai_output(self, hero, "Info_OrcShaman_ULUMULU_17_14"); //Óð-Øàê äóìàåò, ÷òî ëþäè íàçûâàëè åå òàê!
    info_clearchoices(info_orcshaman_ulumulu /*10809*/);
};

instance info_orcshaman_byebye(c_info) {
    npc = orc_2200_shaman /*7786*/;
    nr = 0;
    condition = info_orcshaman_byebye_condition;
    information = info_orcshaman_byebye_info;
    description = "Ñïàñèáî òåáå çà ïîìîùü!";
};

func int info_orcshaman_byebye_condition() {
    if (npc_knowsinfo(hero, info_orcshaman_ulumulu /*10809*/)) {
        return true;
    };
};

func void info_orcshaman_byebye_info() {
    ai_output(hero, self, "Info_OrcShaman_BYEBYE_15_01"); //Ñïàñèáî òåáå çà ïîìîùü!
    ai_output(self, hero, "Info_OrcShaman_BYEBYE_17_02"); //Óð-Øàê áëàãîäàðèò íåçíàêîìöà. Íåçíàêîìåö ñïàñ Óð-Øàêà. Íåçíàêîìåö è Óð-Øàê òåïåðü äðóçüÿ!
    ai_output(self, hero, "Info_OrcShaman_BYEBYE_17_03"); //Äðóã ïîëó÷èò ïîäàðîê. Âîçüìåò òàëèñìàí Óð-Øàêà. Òàëèñìàí çàùèòèò åãî îò äûõàíèÿ îãíåííûõ ÿùåðèö.
    ai_output(self, hero, "Info_OrcShaman_BYEBYE_17_04"); //Óð-øàê íå ìîæåò èäòè äîìîé. Óð-Øàê òåïåðü æèâåò çäåñü! Äðóã ïðèäåò, êîãäà íóæíà ïîìîùü!
    ai_output(hero, self, "Info_OrcShaman_BYEBYE_15_05"); //Ëîâëþ òåáÿ íà ñëîâå!
    b_story_friendofurshak();
    ai_stopprocessinfos(self);
};

instance info_orcshaman_friendlyhello(c_info) {
    npc = orc_2200_shaman /*7786*/;
    nr = 0;
    condition = info_orcshaman_friendlyhello_condition;
    information = info_orcshaman_friendlyhello_info;
    description = "Êàê äåëà, äðóæèùå?";
};

func int info_orcshaman_friendlyhello_condition() {
    if (npc_knowsinfo(hero, info_orcshaman_byebye /*10815*/) && friendofurshak) {
        return true;
    };
};

func void info_orcshaman_friendlyhello_info() {
    ai_output(hero, self, "Info_OrcShaman_FRIENDLYHELLO_15_01"); //Êàê äåëà, äðóæèùå?
    ai_output(self, hero, "Info_OrcShaman_FRIENDLYHELLO_17_02"); //Óð-Øàê áûòü çäîðîâ!
    ai_output(self, hero, "Info_OrcShaman_FRIENDLYHELLO_17_03"); //Óð-Øàê òåïåðü èùåò ñâîé ÓËÓ-ÌÓËÓ!
    ai_output(self, hero, "Info_OrcShaman_FRIENDLYHELLO_17_04"); //Ìîæåò áûòü Óð-Øàê âåðíåòñÿ ñî ñâîèì ÓËÓ-ÌÓËÓ äîìîé!
    ai_output(self, hero, "Info_OrcShaman_FRIENDLYHELLO_17_05"); //Äðóã ïðèøåë, êîãäà íóæíà ïîìîùü!
    ai_output(hero, self, "Info_OrcShaman_FRIENDLYHELLO_15_06"); //Âñåãî õîðîøåãî!
    ai_stopprocessinfos(self);
};

instance info_orcshaman_orccity(c_info) {
    npc = orc_2200_shaman /*7786*/;
    condition = info_orcshaman_orccity_condition;
    information = info_orcshaman_orccity_info;
    important = true;
};

func int info_orcshaman_orccity_condition() {
    if (npc_getdisttowp(hero, "SPAWN_OW_WARAN_ORC_01") < 1000) {
        return true;
    };
};

func void info_orcshaman_orccity_info() {
    b_fullstop(hero);
    ai_gotonpc(hero, self);
    ai_output(self, hero, "Info_OrcShaman_ORCCITY_17_01"); //Óð-Øàê ïðèâåòñòâóåò äðóãà!
    if (npc_hasitems(hero, ulumulu)) {
        ai_output(self, hero, "Info_OrcShaman_ORCCITY_17_02"); //Ó äðóãà åñòü ÓËÓ-ÌÓËÓ! Áûòü õîðîøèé!
        ai_output(self, hero, "Info_OrcShaman_ORCCITY_17_03"); //Äðóã íå çàáóäåò íåñòè ÓËÓ-ÌÓËÓ â ðóêå, êîãäà ïîéäåò ïî ìîñòó!
    }
    else {
        ai_output(self, hero, "Info_OrcShaman_ORCCITY_17_04"); //Ó äðóãà íåò ÓËÓ-ÌÓËÓ! Íåõîðîøî!
        ai_output(self, hero, "Info_OrcShaman_ORCCITY_17_05"); //Äðóã íå ïîéäåò ïî ìîñòó, èíà÷å óìðåò!
    };
};

instance info_orcshaman_youhere(c_info) {
    npc = orc_2200_shaman /*7786*/;
    nr = 0;
    condition = info_orcshaman_youhere_condition;
    information = info_orcshaman_youhere_info;
    description = "×òî òû äåëàåøü òàê áëèçêî îò ãîðîäà?";
};

func int info_orcshaman_youhere_condition() {
    if (npc_knowsinfo(hero, info_orcshaman_orccity /*10821*/)) {
        return true;
    };
};

func void info_orcshaman_youhere_info() {
    ai_output(hero, self, "Info_OrcShaman_YOUHERE_15_01"); //×òî òû äåëàåøü òàê áëèçêî îò ãîðîäà?
    ai_output(self, hero, "Info_OrcShaman_YOUHERE_17_02"); //Óð-Øàê ñìîòðèò íà áðàòüåâ äîìà!
    ai_output(self, hero, "Info_OrcShaman_YOUHERE_17_03"); //Óð-Øàê äóìàåò: ÊÐÓØÀÊ ñêîðî ïðîñíåòñÿ!
    ai_output(self, hero, "Info_OrcShaman_YOUHERE_17_04"); //Óð-Øàê æäåò çäåñü. Áóäåò ñðàæàòüñÿ, êîãäà ÊÐÓØÀÊ ïðîñíåòñÿ!
    ai_output(hero, self, "Info_OrcShaman_YOUHERE_15_05"); //Ñïÿùèé ñêîðî ïðîñíåòñÿ??? Íàäåþñü, òû îøèáñÿ!
    ai_output(hero, self, "Info_OrcShaman_YOUHERE_15_06"); //Ñóäÿ ïî òîìó, ÷òî ÿ óæå ñëûøë îá ýòîì äåìîíå, åìó ëó÷øå îñòàâàòüñÿ ñïÿùèì!
};

instance info_orcshaman_seal(c_info) {
    npc = orc_2200_shaman /*7786*/;
    nr = 0;
    condition = info_orcshaman_seal_condition;
    information = info_orcshaman_seal_info;
    description = "Òû ñêàçàë, ÷òî áðàòüÿ çàïå÷àòàëè õðàì!";
};

func int info_orcshaman_seal_condition() {
    if (npc_knowsinfo(hero, info_orcshaman_orccity /*10821*/)) {
        return true;
    };
};

func void info_orcshaman_seal_info() {
    ai_output(hero, self, "Info_OrcShaman_SEAL_15_01"); //Êîãäà ìû âñòðå÷àëèñü â ïðîøëûé ðàç, òû ñêàçàë, ÷òî áðàòüÿ çàïå÷àòàëè õðàì!
    ai_output(self, hero, "Info_OrcShaman_SEAL_17_02"); //Áðàòüÿ Óð-Øàêà çàïå÷àòàëè õðàì â çåìëå î÷åíü õîðîøî!
    ai_output(self, hero, "Info_OrcShaman_SEAL_17_03"); //Äðóã íå ìîæåò èäòè òóäà!
    ai_output(self, hero, "Info_OrcShaman_SEAL_17_04"); //Äðóã èñïîëüçóåò ìàãèþ áðàòüåâ, êîòîðûå ñûíîâüÿ äóõîâ, êàê Óð-Øàê!
};

instance info_orcshaman_scroll(c_info) {
    npc = orc_2200_shaman /*7786*/;
    nr = 0;
    condition = info_orcshaman_scroll_condition;
    information = info_orcshaman_scroll_info;
    description = "Ãäå ìíå èñêàòü ýòó ìàãèþ?";
};

func int info_orcshaman_scroll_condition() {
    if (npc_knowsinfo(hero, info_orcshaman_seal /*10827*/)) {
        return true;
    };
};

func void info_orcshaman_scroll_info() {
    ai_output(hero, self, "Info_OrcShaman_SCROLL_15_01"); //Ãäå ìíå èñêàòü ýòó ìàãèþ?
    ai_output(self, hero, "Info_OrcShaman_SCROLL_17_02"); //Äîëæåí èäòè â ïåùåðó áðàòüåâ, êîòîðûå ñûíîâüÿ äóõîâ, êàê Óð-Øàê!
    ai_output(self, hero, "Info_OrcShaman_SCROLL_17_03"); //Íî äðóã äîëæåí èñïîëüçîâàòü ìàãèþ îñòîðîæíî!
    ai_output(self, hero, "Info_OrcShaman_SCROLL_17_04"); //Áðàòüÿì Óð-Øàêà íå ïîíðàâèòñÿ! ÓËÓ-ÌÓËÓ íå ïîìîæåò, êîãäà äðóã èñïîëüçóåò ìàãèþ!
    b_logentry(ch4_entertemple, ch4_entertemple_10);
};

instance info_orcshaman_idol(c_info) {
    npc = orc_2200_shaman /*7786*/;
    nr = 0;
    condition = info_orcshaman_idol_condition;
    information = info_orcshaman_idol_info;
    description = "Åñòü êàêîé-íèáóäü äðóãîé ïóòü â õðàì?";
};

func int info_orcshaman_idol_condition() {
    if (npc_knowsinfo(hero, info_orcshaman_scroll /*10830*/) && (!orccity_sanctum_outergateopen)) {
        return true;
    };
};

func void info_orcshaman_idol_info() {
    if (npc_hasitems(hero, itmi_stuff_idol_sleeper_01)) {
        ai_output(self, hero, "Info_OrcShaman_IDOL_17_03"); //Äðóã íàøåë ñèìâîë íà êîëîííå!
        ai_output(self, hero, "Info_OrcShaman_IDOL_17_04"); //Òåïåðü äðóã ìîæåò îòêðûòü âðàòà õðàìà!
        b_logentry(ch4_entertemple, ch4_entertemple_11);
    }
    else {
        ai_output(self, hero, "Info_OrcShaman_IDOL_17_05"); //Òåïåðü äðóã äîëæåí âçÿòü ñèìâîë ó êîëîííû!
        ai_output(self, hero, "Info_OrcShaman_IDOL_17_06"); //Òåïåðü ñèìâîë îòêðûâàòü âðàòà õðàìà!
        b_logentry(ch4_entertemple, ch4_entertemple_12);
    };
};

instance org_801_lares_exit(c_info) {
    npc = org_801_lares /*7796*/;
    nr = 999;
    condition = org_801_lares_exit_condition;
    information = org_801_lares_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int org_801_lares_exit_condition() {
    return 1;
};

func void org_801_lares_exit_info() {
    ai_stopprocessinfos(self);
};

var int lares_vorbeigemogelt;

instance org_801_lares_youhere(c_info) {
    npc = org_801_lares /*7796*/;
    nr = 1;
    condition = org_801_lares_youhere_condition;
    information = org_801_lares_youhere_info;
    permanent = true;
    important = true;
};

func int org_801_lares_youhere_condition() {
    var c_npc roscoe;

    roscoe = hlp_getnpc(org_840_roscoe);
    if ((roscoe.aivar[29] == false) && (lares_vorbeigemogelt == false)) {
        return 1;
    };
};

func void org_801_lares_youhere_info() {
    var c_npc roscoe;

    roscoe = hlp_getnpc(org_840_roscoe);
    if ((npc_isinstate(roscoe, zs_magicsleep) || (npc_gettempattitude(roscoe, other) == att_friendly)) || npc_isdead(roscoe)) {
        ai_output(self, other, "ORG_801_Lares_YouHere_11_00"); //Êàê òû ñþäà ïîïàë? ×òî ñëó÷èëîñü ñ Ðîñêî?
        ai_output(other, self, "ORG_801_Lares_YouHere_15_01"); //Îí ïî÷åìó-òî íå çàõîòåë ìåíÿ îñòàíàâëèâàòü.
        ai_output(self, other, "ORG_801_Lares_YouHere_11_02"); //×òî òåáå íóæíî?
        roscoe.aivar[29] = true;
        lares_vorbeigemogelt = true;
        b_givexp(xp_cheatedintolareshut);
    }
    else {
        b_intruderalert(self, other);
        npc_settempattitude(self, att_hostile);
        ai_stopprocessinfos(self);
        npc_settarget(self, other);
        ai_startstate(self, zs_attack, 1, "");
    };
};

instance org_801_lares_wannajoin(c_info) {
    npc = org_801_lares /*7796*/;
    nr = 1;
    condition = org_801_lares_wannajoin_condition;
    information = org_801_lares_wannajoin_info;
    description = "ß õîòåë áû ïðèñîåäèíèòüñÿ ê âàøåé øàéêå.";
};

func int org_801_lares_wannajoin_condition() {
    if ((npc_gettrueguild(hero) == gil_none) && (kapitel < 2)) {
        return 1;
    };
};

func void org_801_lares_wannajoin_info() {
    ai_output(other, self, "ORG_801_Lares_WannaJoin_15_00"); //Õî÷ó ïðèñîåäèíèòüñÿ ê òâîåé øàéêå.
    ai_output(self, other, "ORG_801_Lares_WannaJoin_11_01"); //Â ñàìîì äåëå? Äà êòî òû âîîáùå òàêîé?
};

var int lares_bringlistback;

instance org_801_lares_bringlist(c_info) {
    npc = org_801_lares /*7796*/;
    nr = 2;
    condition = org_801_lares_bringlist_condition;
    information = org_801_lares_bringlist_info;
    description = "Ó ìåíÿ ñ ñîáîé ñïèñîê ïðèïàñîâ äëÿ Ñòàðîé Øàõòû.";
};

func int org_801_lares_bringlist_condition() {
    if (npc_knowsinfo(hero, org_801_lares_wannajoin /*10845*/) && npc_hasitems(hero, thelist)) {
        return 1;
    };
};

func void org_801_lares_bringlist_info() {
    ai_output(other, self, "ORG_801_Lares_BringList_15_00"); //Ó ìåíÿ ñ ñîáîé ñïèñîê ïðèïàñîâ äëÿ Ñòàðîé Øàõòû.
    ai_output(self, other, "ORG_801_Lares_BringList_11_01"); //Íåò! Ãëàçàì ñâîèì íå âåðþ! Äà, ïàðåíü, íàãëîñòè òåáå íå çàíèìàòü!
    ai_output(self, other, "ORG_801_Lares_BringList_11_02"); //Ïîêàæè ìíå åãî!
    ai_output(other, self, "ORG_801_Lares_BringList_15_03"); //Âîò îí...
    b_usefakescroll();
    ai_output(self, other, "ORG_801_Lares_BringList_11_04"); //Òî÷íî! È çíàåøü, êàê ìû ñ ýòèì ïîñòóïèì? Ìû íåìíîãî ïîäïðàâèì ñïèñîê, è òû îòíåñåøü åãî â Ñòàðûé Ëàãåðü!
    ai_output(self, other, "ORG_801_Lares_BringList_11_05"); //À çàòåì, êîãäà îíè äîñòàâÿò âñå â øàõòó, ìû îðãàíèçóåì íåáîëüøîé íàëåò è çàáåðåì äîáðî ñåáå! Ýòî íå çàéìåò è ìèíóòû... Õà! Âîò ñïèñîê. Òû çíàåøü, ÷òî äåëàòü.
    points_nc = points_nc + 10;
    lares_bringlistback = log_running;
    npc_removeinvitem(hero, thelist /*4566*/);
    createinvitem(hero, thelistnc);
    if (npc_gettrueguild(hero) == gil_none) {
        log_createtopic(ch1_joinnc, log_mission);
        log_settopicstatus(ch1_joinnc, log_running);
    };
    b_logentry(ch1_joinnc, ch1_joinnc_3);
    b_givexp(xp_givelisttolares);
};

instance org_801_lares_bringlistback(c_info) {
    npc = org_801_lares /*7796*/;
    nr = 2;
    condition = org_801_lares_bringlistback_condition;
    information = org_801_lares_bringlistback_info;
    description = "ß ïåðåäàë ñïèñîê Äèåãî.";
};

func int org_801_lares_bringlistback_condition() {
    if ((lares_bringlistback == log_running) && (diego_bringlist == log_success)) {
        return 1;
    };
};

func void org_801_lares_bringlistback_info() {
    ai_output(other, self, "ORG_801_Lares_BringListBack_15_00"); //ß ïåðåäàë ñïèñîê Äèåãî.
    ai_output(self, other, "ORG_801_Lares_BringListBack_11_01"); //Õîðîøî! ß ðàññòàâèë ñâîèõ ëþäåé íà ïóòè ê Ñòàðîé Øàõòå. Ñåé÷àñ ñòðàæíèêè Òîðóñà óæå äîëæíû áûòü ìåðòâû.
    points_nc = points_nc + 10;
    lares_bringlistback = log_success;
    b_logentry(ch1_joinnc, ch1_joinnc_4);
    b_givexp(xp_reportlistdeliverytolares);
};

instance org_801_lares_bringlistanteil(c_info) {
    npc = org_801_lares /*7796*/;
    nr = 2;
    condition = org_801_lares_bringlistanteil_condition;
    information = org_801_lares_bringlistanteil_info;
    description = "Òàê êîíâîé óæå ðàçáèò? À ãäå ìîÿ äîëÿ?";
};

func int org_801_lares_bringlistanteil_condition() {
    if (npc_knowsinfo(hero, org_801_lares_bringlistback /*10852*/)) {
        return 1;
    };
};

func void org_801_lares_bringlistanteil_info() {
    var c_npc gorn;

    ai_output(other, self, "ORG_801_Lares_BringListAnteil_15_00"); //Òàê êîíâîé óæå ðàçáèò? À ãäå ìîÿ äîëÿ?
    ai_output(self, other, "ORG_801_Lares_BringListAnteil_11_01"); //Ïîãîâîðè ñ Ãîðíîì. Îí îòäàñò òåáå òâîþ äîëþ.
    gorn = hlp_getnpc(pc_fighter);
    if (gorn.aivar[7] == true) {
        ai_output(other, self, "ORG_801_Lares_BringListAnteil_15_02"); //ß çíàþ Ãîðíà. Îí íå ÷ëåí øàéêè. Îí íàåìíèê è ðàáîòàåò íà ìàãîâ.
        ai_output(self, other, "ORG_801_Lares_BringListAnteil_11_03"); //Äà, âñå âåðíî.
        ai_output(other, self, "ORG_801_Lares_BringListAnteil_15_04"); //Òàê îí â äåëå?
        ai_output(self, other, "ORG_801_Lares_BringListAnteil_11_05"); //×åì ìåíüøå çíàåøü, òåì êðåï÷å ñïèøü. Ïðîñòî èäè ê íåìó è çàáåðè ñâîþ äîëþ.
    };
    b_logentry(ch1_joinnc, ch1_joinnc_5);
    gorn.aivar[7] = true;
};

instance org_801_lares_mordragsentme(c_info) {
    npc = org_801_lares /*7796*/;
    nr = 2;
    condition = org_801_lares_mordragsentme_condition;
    information = org_801_lares_mordragsentme_info;
    description = "Ìåíÿ ïðèñëàë Ìîðäðàã. Îí âåëåë ïåðåäàòü òåáå ýòî êîëüöî.";
};

func int org_801_lares_mordragsentme_condition() {
    if ((npc_knowsinfo(hero, org_801_lares_wannajoin /*10845*/) && npc_hasitems(hero, mordragsring)) && (kapitel < 2)) {
        return 1;
    };
};

func void org_801_lares_mordragsentme_info() {
    b_giveinvitems(other, self, mordragsring /*4541*/, 1);
    ai_output(other, self, "ORG_801_Lares_MordragSentMe_15_00"); //Ìåíÿ ïðèñëàë Ìîðäðàã. Îí âåëåë ïåðåäàòü òåáå ýòî êîëüöî.
    ai_output(self, other, "ORG_801_Lares_MordragSentMe_11_01"); //Äîðîãàÿ âåùèöà! Çäåñü ýòî îáû÷íîå äåëî: ïîëó÷èë ÷òî-òî - ïîäåëèñü ñ ãëàâàðåì øàéêè.
    ai_output(self, other, "ORG_801_Lares_MordragSentMe_11_02"); //Íî òî, ÷òî îí ïåðåäàë ýòî êîëüöî èìåííî ÷åðåç ÒÅÁß, óæå ãîâîðèò î ìíîãîì. Ïîõîæå, Ìîðäðàã òåáå äîâåðÿåò.
    ai_output(self, other, "ORG_801_Lares_MordragSentMe_11_03"); //ß õî÷ó, ÷òîáû òû ñõîäèë ê íåìó è ïåðåäàë åìó êîå-÷òî îò ìåíÿ.
    ai_output(self, other, "ORG_801_Lares_MordragSentMe_11_04"); //Ñêàæè åìó, ÷òî ìíå íóæåí ÷åëîâåê â Ëàãåðå Ñåêòàíòîâ. Îíè çàòåâàþò ÷òî-òî áîëüøîå - è ÿ õî÷ó çíàòü, ÷òî ïðîèñõîäèò.
    lares_informmordrag = log_running;
    if (npc_gettrueguild(hero) == gil_none) {
        log_createtopic(ch1_joinnc, log_mission);
        log_settopicstatus(ch1_joinnc, log_running);
    };
    b_logentry(ch1_joinnc, ch1_joinnc_6);
    b_givexp(xp_giveringtolares);
    points_nc = points_nc + 10;
};

instance org_801_lares_vorbeigemogelt(c_info) {
    npc = org_801_lares /*7796*/;
    nr = 2;
    condition = org_801_lares_vorbeigemogelt_condition;
    information = org_801_lares_vorbeigemogelt_info;
    description = "ß ñóìåë ïðîéòè ìèìî òâîèõ ñòðàæíèêîâ.";
};

func int org_801_lares_vorbeigemogelt_condition() {
    if (npc_knowsinfo(hero, org_801_lares_wannajoin /*10845*/) && (lares_vorbeigemogelt == true)) {
        return 1;
    };
};

func void org_801_lares_vorbeigemogelt_info() {
    ai_output(other, self, "ORG_801_Lares_Vorbeigemogelt_15_00"); //ß ñóìåë ïðîéòè ìèìî òâîèõ ñòðàæíèêîâ.
    ai_output(self, other, "ORG_801_Lares_Vorbeigemogelt_11_01"); //Âåðíî. Íî ýòîãî ìàëî.
    points_nc = points_nc + 10;
};

var int lares_get400ore;

instance org_801_lares_getkraut(c_info) {
    npc = org_801_lares /*7796*/;
    nr = 10;
    condition = org_801_lares_getkraut_condition;
    information = org_801_lares_getkraut_info;
    description = "×òî åùå ÿ ìîãó ñäåëàòü?";
};

func int org_801_lares_getkraut_condition() {
    if ((npc_knowsinfo(hero, org_801_lares_bringlist /*10849*/) || npc_knowsinfo(hero, org_801_lares_mordragsentme /*10859*/)) || npc_knowsinfo(hero, org_801_lares_vorbeigemogelt /*10862*/)) {
        return 1;
    };
};

func void org_801_lares_getkraut_info() {
    ai_output(other, self, "ORG_801_Lares_GetKraut_15_00"); //×òî åùå ÿ ìîãó ñäåëàòü?
    ai_output(self, other, "ORG_801_Lares_GetKraut_11_01"); //Èäîë Èñèäðî èç Ëàãåðÿ Ñåêòàíòîâ òàñêàåò ñ ñîáîé áîëîòíèêà êóñêîâ íà 400 ðóäû, íå ìåíüøå! Õî÷ó, ÷òîáû òû èçáàâèë åãî îò ýòîé òÿæêîé íîøè. Êàê òû ýòî ñäåëàåøü, ìåíÿ íå âîëíóåò.
    if ((baalisidro_dealerjob == log_running) || (baalisidro_dealerjob == log_success)) {
        ai_output(other, self, "ORG_801_Lares_GetKraut_15_02"); //Åñëè òû ãîâîðèøü î òîé áîëüøîé êó÷å áîëîòíèêà, òî îíà óæå ó ìåíÿ.
        ai_output(self, other, "ORG_801_Lares_GetKraut_11_03"); //Äà, áàøêîâèòûé òû ïàðåíü!
    };
    ai_output(self, other, "ORG_801_Lares_GetKraut_11_04"); //Åñëè áîëîòíèê ó òåáÿ, ïðîäàé åãî è ïðèíåñè ìíå 400 êóñêîâ ðóäû.
    ai_output(self, other, "ORG_801_Lares_GetKraut_11_05"); //Òîãäà ìîæíî áóäåò ïîãîâîðèòü è î ïðèåìå â øàéêó.
    lares_get400ore = log_running;
    if (npc_gettrueguild(hero) == gil_none) {
        log_createtopic(ch1_joinnc, log_mission);
        log_settopicstatus(ch1_joinnc, log_running);
    };
    b_logentry(ch1_joinnc, ch1_joinnc_7);
};

instance org_801_lares_400ore(c_info) {
    npc = org_801_lares /*7796*/;
    nr = 2;
    condition = org_801_lares_400ore_condition;
    information = org_801_lares_400ore_info;
    permanent = true;
    description = "400 êóñêîâ ðóäû ó ìåíÿ.";
};

func int org_801_lares_400ore_condition() {
    if ((lares_get400ore == log_running) && ((baalisidro_dealerjob == log_running) || (baalisidro_dealerjob == log_success))) {
        return 1;
    };
};

func void org_801_lares_400ore_info() {
    ai_output(other, self, "ORG_801_Lares_400Ore_15_00"); //400 êóñêîâ ðóäû ó ìåíÿ.
    if (npc_hasitems(other, itminugget) >= 400) {
        ai_output(self, other, "ORG_801_Lares_400Ore_11_01"); //Õîðîøî! Î÷åíü õîðîøî. Äóìàþ, ýòîãî äîëæíî áûòü äîñòàòî÷íî.
        lares_get400ore = log_success;
        points_nc = points_nc + 10;
        b_giveinvitems(other, self, itminugget /*4517*/, 400);
        b_logentry(ch1_joinnc, ch1_joinnc_8);
        b_givexp(xp_baalisidropaylares);
    }
    else {
        ai_output(self, other, "ORG_801_Lares_400Ore_NOORE_11_00"); //Ïåðåñ÷èòàé-êà åùå ðàç. Íàäåþñü, òû íå ñïóñòèë ïîëîâèíó ïî ïüÿíè?
    };
};

instance org_801_lares_reicht(c_info) {
    npc = org_801_lares /*7796*/;
    nr = 5;
    condition = org_801_lares_reicht_condition;
    information = org_801_lares_reicht_info;
    permanent = true;
    description = "Íó òàê êàê: ýòîãî äîñòàòî÷íî, ÷òîáû òû ïðèíÿë ìåíÿ â øàéêó?";
};

func int org_801_lares_reicht_condition() {
    if (((npc_knowsinfo(hero, org_801_lares_wannajoin /*10845*/) && (npc_knowsinfo(hero, org_801_lares_mordragsentme /*10859*/) || npc_knowsinfo(hero, org_801_lares_bringlist /*10849*/))) && (npc_gettrueguild(other) == gil_none)) && (kapitel < 2)) {
        return 1;
    };
};

func void org_801_lares_reicht_info() {
    var c_npc lester;

    ai_output(other, self, "ORG_801_Lares_Reicht_15_00"); //Íó òàê êàê: ýòîãî äîñòàòî÷íî, ÷òîáû òû ïðèíÿë ìåíÿ â øàéêó?
    if ((points_nc >= 30) && (hero.level >= 5)) {
        ai_output(self, other, "ORG_801_Lares_Reicht_AUFNAHME_11_00"); //ß áû ñêàçàë - äà!
        ai_output(self, other, "ORG_801_Lares_Reicht_AUFNAHME_11_01"); //È ó ìåíÿ äàæå åñòü äëÿ òåáÿ ïîäàðîê - äîñïåõè ïîëó÷øå òîãî, ÷òî òû ñåé÷àñ íîñèøü. Òû çàñëóæèë èõ!
        hero.guild = gil_org;
        npc_settrueguild(hero, gil_org);
        createinvitem(hero, org_armor_l);
        createinvitem(self, itamarrow);
        b_giveinvitems(self, hero, itamarrow /*4894*/, 1);
        npc_removeinvitem(hero, itamarrow /*4894*/);
        ai_equipbestarmor(hero);
        b_givexp(xp_becomebandit);
        b_logentry(ch1_joinnc, ch1_joinnc_9);
        log_settopicstatus(ch1_joinnc, log_success);
        log_createtopic(ch1_joinoc, log_mission);
        log_settopicstatus(ch1_joinoc, log_failed);
        b_logentry(ch1_joinoc, ch1_joinoc_9);
        log_createtopic(ch1_joinpsi, log_mission);
        log_settopicstatus(ch1_joinpsi, log_failed);
        b_logentry(ch1_joinpsi, ch1_joinpsi_16);
        log_settopicstatus(ch1_lostnek, log_failed);
        log_settopicstatus(ch1_fisknewdealer, log_failed);
        log_settopicstatus(ch1_kalomsrecipe, log_failed);
        log_settopicstatus(ch1_bringlist, log_failed);
        log_settopicstatus(ch1_mordragko, log_failed);
        lester = hlp_getnpc(pc_psionic);
        npc_exchangeroutine(lester, "START");
        lesterguide = 0;
        ai_continueroutine(lester);
    }
    else {
        if (npc_knowsinfo(hero, org_801_lares_mordragsentme /*10859*/)) {
            ai_output(self, other, "ORG_801_Lares_Reicht_11_02"); //Ìîðäðàã ãîâîðèë î òåáå.
        };
        if (npc_knowsinfo(hero, org_801_lares_bringlist /*10849*/)) {
            ai_output(self, other, "ORG_801_Lares_Reicht_11_03"); //Òû ñòàë çíàìåíèòûì ñ òåõ ïîð, êàê ïðèíåñ ñþäà òîò ñïèñîê.
        };
        ai_output(self, other, "ORG_801_Lares_Reicht_11_04"); //Íî òû åùå íå ãîòîâ. Çàíèìàéñÿ ñâîèìè äåëàìè.
        b_printguildcondition(5);
    };
};

instance org_801_lares_gotokalom(c_info) {
    npc = org_801_lares /*7796*/;
    nr = 10;
    condition = org_801_lares_gotokalom_condition;
    information = org_801_lares_gotokalom_info;
    description = "È ÷òî ÿ òåïåðü äîëæåí äåëàòü?";
};

func int org_801_lares_gotokalom_condition() {
    if (npc_gettrueguild(other) == gil_org) {
        return 1;
    };
};

func void org_801_lares_gotokalom_info() {
    var c_npc mordrag;

    ai_output(other, self, "ORG_801_Lares_GotoKalom_15_00"); //È ÷òî ÿ òåïåðü äîëæåí äåëàòü?
    ai_output(self, other, "ORG_801_Lares_GotoKalom_11_01"); //Òåïåðü òû ÷ëåí íàøåé øàéêè. Ìîæåøü äåëàòü âñå, ÷òî çàõî÷åøü.
    log_createtopic(ch1_gotopsicamp, log_mission);
    log_settopicstatus(ch1_gotopsicamp, log_running);
    b_logentry(ch1_gotopsicamp, ch1_gotopsicamp_2);
    if (lares_informmordrag == log_running) {
        ai_output(self, other, "ORG_801_Lares_GotoKalom_11_02"); //Åñëè äåéñòâèòåëüíî õî÷åøü ïîìî÷ü, îòïðàâëÿéñÿ ê Ìîðäðàãó è ïîìîãè åìó â äåëå ñ ñåêòàíòàìè.
        b_logentry(ch1_gotopsicamp, ch1_gotopsicamp_3);
    }
    mordrag = hlp_getnpc(org_826_mordrag);
    if (npc_isdead(mordrag)) {
        ai_output(self, other, "ORG_801_Lares_GotoKalom_11_03"); //Îäèí èç íàøèõ ëþäåé â Ñòàðîì Ëàãåðå, Ìîðäðàã, áûë óáèò. Ïåðåä ñìåðòüþ îí óñïåë ïîñëàòü íàì âåñòî÷êó. Â Ëàãåðå Ñåêòàíòîâ çàòåâàåòñÿ ÷òî-òî áîëüøîå.
        ai_output(self, other, "ORG_801_Lares_GotoKalom_11_04"); //Îòïðàâëÿéñÿ â Ëàãåðü Áðàòñòâà è âûÿñíè, ÷òî òàì ïðîèñõîäèò.
        b_logentry(ch1_gotopsicamp, ch1_gotopsicamp_4);
    }
    else {
        ai_output(self, other, "ORG_801_Lares_GotoKalom_11_05"); //Âåðíóëñÿ íàø ÷åëîâåê èç Ñòàðîãî Ëàãåðÿ - Ìîðäðàã.
        ai_output(self, other, "ORG_801_Lares_GotoKalom_11_06"); //Ïîãîâîðè ñ íèì. Ñêàæè, ÷òî ìíå íóæåí ñâîé ÷åëîâåê â Ëàãåðå Ñåêòàíòîâ. Áðàòñòâî çàòåâàåò ÷òî-òî áîëüøîå - è ÿ õî÷ó çíàòü, ÷òî ïðîèñõîäèò.
        ai_output(self, other, "ORG_801_Lares_GotoKalom_11_07"); //Ïîìîãè åìó.
        b_logentry(ch1_gotopsicamp, ch1_gotopsicamp_5);
        b_exchangeroutine(org_826_mordrag /*7830*/, "START");
        lares_informmordrag = log_running;
    };
};

instance org_801_lares_wherelearn(c_info) {
    npc = org_801_lares /*7796*/;
    nr = 20;
    condition = org_801_lares_wherelearn_condition;
    information = org_801_lares_wherelearn_info;
    description = "ß õîòåë áû ÷åìó-íèáóäü íàó÷èòüñÿ.";
};

func int org_801_lares_wherelearn_condition() {
    return true;
};

func void org_801_lares_wherelearn_info() {
    ai_output(other, self, "ORG_801_Lares_WhereLearn_Info_15_01"); //ß õîòåë áû ÷åìó-íèáóäü íàó÷èòüñÿ.
    ai_output(self, other, "ORG_801_Lares_WhereLearn_Info_11_02"); //Ìîãó ïîìî÷ü. Õî÷åøü óâåëè÷èòü ñèëó è ëîâêîñòü?
    log_createtopic(ge_teachernc, log_note);
    b_logentry(ge_teachernc, ge_teachernc_lares);
};

instance org_801_lares_teach(c_info) {
    npc = org_801_lares /*7796*/;
    nr = 20;
    condition = org_801_lares_teach_condition;
    information = org_801_lares_teach_info;
    permanent = true;
    description = "Êîíå÷íî, õî÷ó. ";
};

func int org_801_lares_teach_condition() {
    if (npc_knowsinfo(hero, org_801_lares_wherelearn /*10880*/)) {
        return true;
    };
};

func void org_801_lares_teach_info() {
    ai_output(other, self, "ORG_801_Lares_Teach_15_00"); //Äà, ÿ õî÷ó ñòàòü ëó÷øå.
    info_clearchoices(org_801_lares_teach /*10883*/);
    info_addchoice(org_801_lares_teach /*10883*/, dialog_back, org_801_lares_teach_back);
    info_addchoice(org_801_lares_teach /*10883*/, b_buildlearnstring(name_learnstrength_5, 5 * lpcost_attribute_strength, 0), org_801_lares_teach_str_5);
    info_addchoice(org_801_lares_teach /*10883*/, b_buildlearnstring(name_learnstrength_1, lpcost_attribute_strength, 0), org_801_lares_teach_str_1);
    info_addchoice(org_801_lares_teach /*10883*/, b_buildlearnstring(name_learndexterity_5, 5 * lpcost_attribute_dexterity, 0), org_801_lares_teach_dex_5);
    info_addchoice(org_801_lares_teach /*10883*/, b_buildlearnstring(name_learndexterity_1, lpcost_attribute_dexterity, 0), org_801_lares_teach_dex_1);
};

func void org_801_lares_teach_back() {
    info_clearchoices(org_801_lares_teach /*10883*/);
};

func void org_801_lares_teach_str_1() {
    b_buyattributepoints(other, atr_strength, lpcost_attribute_strength);
    info_clearchoices(org_801_lares_teach /*10883*/);
    info_addchoice(org_801_lares_teach /*10883*/, dialog_back, org_801_lares_teach_back);
    info_addchoice(org_801_lares_teach /*10883*/, b_buildlearnstring(name_learnstrength_5, 5 * lpcost_attribute_strength, 0), org_801_lares_teach_str_5);
    info_addchoice(org_801_lares_teach /*10883*/, b_buildlearnstring(name_learnstrength_1, lpcost_attribute_strength, 0), org_801_lares_teach_str_1);
    info_addchoice(org_801_lares_teach /*10883*/, b_buildlearnstring(name_learndexterity_5, 5 * lpcost_attribute_dexterity, 0), org_801_lares_teach_dex_5);
    info_addchoice(org_801_lares_teach /*10883*/, b_buildlearnstring(name_learndexterity_1, lpcost_attribute_dexterity, 0), org_801_lares_teach_dex_1);
};

func void org_801_lares_teach_str_5() {
    b_buyattributepoints(other, atr_strength, 5 * lpcost_attribute_strength);
    info_clearchoices(org_801_lares_teach /*10883*/);
    info_addchoice(org_801_lares_teach /*10883*/, dialog_back, org_801_lares_teach_back);
    info_addchoice(org_801_lares_teach /*10883*/, b_buildlearnstring(name_learnstrength_5, 5 * lpcost_attribute_strength, 0), org_801_lares_teach_str_5);
    info_addchoice(org_801_lares_teach /*10883*/, b_buildlearnstring(name_learnstrength_1, lpcost_attribute_strength, 0), org_801_lares_teach_str_1);
    info_addchoice(org_801_lares_teach /*10883*/, b_buildlearnstring(name_learndexterity_5, 5 * lpcost_attribute_dexterity, 0), org_801_lares_teach_dex_5);
    info_addchoice(org_801_lares_teach /*10883*/, b_buildlearnstring(name_learndexterity_1, lpcost_attribute_dexterity, 0), org_801_lares_teach_dex_1);
};

func void org_801_lares_teach_dex_1() {
    b_buyattributepoints(other, atr_dexterity, lpcost_attribute_dexterity);
    info_clearchoices(org_801_lares_teach /*10883*/);
    info_addchoice(org_801_lares_teach /*10883*/, dialog_back, org_801_lares_teach_back);
    info_addchoice(org_801_lares_teach /*10883*/, b_buildlearnstring(name_learnstrength_5, 5 * lpcost_attribute_strength, 0), org_801_lares_teach_str_5);
    info_addchoice(org_801_lares_teach /*10883*/, b_buildlearnstring(name_learnstrength_1, lpcost_attribute_strength, 0), org_801_lares_teach_str_1);
    info_addchoice(org_801_lares_teach /*10883*/, b_buildlearnstring(name_learndexterity_5, 5 * lpcost_attribute_dexterity, 0), org_801_lares_teach_dex_5);
    info_addchoice(org_801_lares_teach /*10883*/, b_buildlearnstring(name_learndexterity_1, lpcost_attribute_dexterity, 0), org_801_lares_teach_dex_1);
};

func void org_801_lares_teach_dex_5() {
    b_buyattributepoints(other, atr_dexterity, 5 * lpcost_attribute_dexterity);
    info_clearchoices(org_801_lares_teach /*10883*/);
    info_addchoice(org_801_lares_teach /*10883*/, dialog_back, org_801_lares_teach_back);
    info_addchoice(org_801_lares_teach /*10883*/, b_buildlearnstring(name_learnstrength_5, 5 * lpcost_attribute_strength, 0), org_801_lares_teach_str_5);
    info_addchoice(org_801_lares_teach /*10883*/, b_buildlearnstring(name_learnstrength_1, lpcost_attribute_strength, 0), org_801_lares_teach_str_1);
    info_addchoice(org_801_lares_teach /*10883*/, b_buildlearnstring(name_learndexterity_5, 5 * lpcost_attribute_dexterity, 0), org_801_lares_teach_dex_5);
    info_addchoice(org_801_lares_teach /*10883*/, b_buildlearnstring(name_learndexterity_1, lpcost_attribute_dexterity, 0), org_801_lares_teach_dex_1);
};

instance org_804_organisator_exit(c_info) {
    npc = org_804_organisator /*7798*/;
    nr = 999;
    condition = org_804_organisator_exit_condition;
    information = org_804_organisator_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int org_804_organisator_exit_condition() {
    if (npc_knowsinfo(hero, org_804_organisator_tolares /*10901*/)) {
        return 1;
    };
};

func void org_804_organisator_exit_info() {
    ai_stopprocessinfos(self);
};

instance org_804_organisator_greet(c_info) {
    npc = org_804_organisator /*7798*/;
    nr = 1;
    condition = org_804_organisator_greet_condition;
    information = org_804_organisator_greet_info;
    important = true;
};

func int org_804_organisator_greet_condition() {
    if (npc_getdisttonpc(self, hero) < zivilanquatschdist) {
        return 1;
    };
};

func void org_804_organisator_greet_info() {
    ai_output(self, other, "Org_804_Organisator_Greet_06_00"); //À ÒÛ êóäà ñîáðàëñÿ?
};

instance org_804_organisator_wayto(c_info) {
    npc = org_804_organisator /*7798*/;
    nr = 1;
    condition = org_804_organisator_wayto_condition;
    information = org_804_organisator_wayto_info;
    description = "À êóäà ìíå ÌÎÆÍÎ èäòè?";
};

func int org_804_organisator_wayto_condition() {
    return 1;
};

func void org_804_organisator_wayto_info() {
    var c_npc lares;

    ai_output(other, self, "Org_804_Organisator_WayTo_15_00"); //À êóäà ìíå ÌÎÆÍÎ èäòè?
    ai_output(self, other, "Org_804_Organisator_WayTo_06_01"); //Ê Ëàðñó.
    lares = hlp_getnpc(org_801_lares);
    lares.aivar[7] = true;
};

instance org_804_organisator_tolares(c_info) {
    npc = org_804_organisator /*7798*/;
    nr = 1;
    condition = org_804_organisator_tolares_condition;
    information = org_804_organisator_tolares_info;
    description = "ß õî÷ó âñòðåòèòüñÿ ñ Ëàðñîì.";
};

func int org_804_organisator_tolares_condition() {
    if (npc_knowsinfo(hero, org_804_organisator_wayto /*10897*/)) {
        return 1;
    };
};

func void org_804_organisator_tolares_info() {
    ai_output(other, self, "Org_804_Organisator_ToLares_15_00"); //ß õî÷ó óâèäåòü Ëàðñà.
    ai_output(self, other, "Org_804_Organisator_ToLares_06_01"); //Ñîìíåâàþñü, ÷òî îí çàõî÷åò ãîâîðèòü ñ òîáîé.
    ai_output(other, self, "Org_804_Organisator_ToLares_15_02"); //ß ñàì êàê-íèáóäü ðàçáåðóñü.
    ai_output(self, other, "Org_804_Organisator_ToLares_06_03"); //Íå áóäó òåáÿ îòãîâàðèâàòü.
    ai_stopprocessinfos(self);
};

instance org_804_organisator_perm(c_info) {
    npc = org_804_organisator /*7798*/;
    nr = 1;
    condition = org_804_organisator_perm_condition;
    information = org_804_organisator_perm_info;
    permanent = true;
    description = "Ìîãó ÿ óâèäåòü Ëàðñà?";
};

func int org_804_organisator_perm_condition() {
    if (npc_knowsinfo(hero, org_804_organisator_tolares /*10901*/)) {
        return 1;
    };
};

func void org_804_organisator_perm_info() {
    ai_output(other, self, "Org_804_Organisator_PERM_15_00"); //Ìîãó ÿ óâèäåòü Ëàðñà?
    ai_output(self, other, "Org_804_Organisator_PERM_06_01"); //Ðåøè ýòîò âîïðîñ ñ Ðîñêî.
    ai_stopprocessinfos(self);
};

const string org_804_checkpoint = "NC_HUT23_OUT";

instance info_org_804_firstwarn(c_info) {
    npc = org_804_organisator /*7798*/;
    nr = 2;
    condition = info_org_804_firstwarn_condition;
    information = info_org_804_firstwarn_info;
    permanent = true;
    important = true;
};

func int info_org_804_firstwarn_condition() {
    if ((((hero.aivar[27] == aiv_gps_begin) && ((other.guild == gil_grd) || (other.guild == gil_stt))) && (npc_getattitude(self, hero) != att_friendly)) && hlp_strcmp(npc_getnearestwp(self), self.wp)) {
        return true;
    };
};

func void info_org_804_firstwarn_info() {
    printglobals(pd_mission);
    ai_output(self, hero, "Info_Org_804_FirstWarn_Info_06_00"); //Ëþäÿì Ãîìåçà íåò ñþäà õîäà! Óõîäè!
    hero.aivar[28] = npc_getdisttowp(hero, org_804_checkpoint);
    hero.aivar[27] = aiv_gps_firstwarn;
    ai_stopprocessinfos(self);
};

instance info_org_804_lastwarn(c_info) {
    npc = org_804_organisator /*7798*/;
    nr = 1;
    condition = info_org_804_lastwarn_condition;
    information = info_org_804_lastwarn_info;
    permanent = true;
    important = true;
};

func int info_org_804_lastwarn_condition() {
    if (((((hero.aivar[27] == aiv_gps_firstwarn) && ((other.guild == gil_grd) || (other.guild == gil_stt))) && (npc_getattitude(self, hero) != att_friendly)) && (npc_getdisttowp(hero, org_804_checkpoint) < (hero.aivar[28] - 100))) && hlp_strcmp(npc_getnearestwp(self), self.wp)) {
        return true;
    };
};

func int info_org_804_lastwarn_info() {
    ai_output(self, hero, "Info_Org_804_LastWarn_06_00"); //Óáèðàéñÿ, ïîêà åùå ìîæåøü!
    hero.aivar[28] = npc_getdisttowp(hero, org_804_checkpoint);
    hero.aivar[27] = aiv_gps_lastwarn;
    ai_stopprocessinfos(self);
};

instance info_org_804_attack(c_info) {
    npc = org_804_organisator /*7798*/;
    nr = 1;
    condition = info_org_804_attack_condition;
    information = info_org_804_attack_info;
    permanent = true;
    important = true;
};

func int info_org_804_attack_condition() {
    if (((((hero.aivar[27] == aiv_gps_lastwarn) && ((other.guild == gil_grd) || (other.guild == gil_stt))) && (npc_getattitude(self, hero) != att_friendly)) && (npc_getdisttowp(hero, org_804_checkpoint) < (hero.aivar[28] - 100))) && hlp_strcmp(npc_getnearestwp(self), self.wp)) {
        return true;
    };
};

func int info_org_804_attack_info() {
    hero.aivar[28] = 0;
    hero.aivar[27] = aiv_gps_punish;
    b_fullstop(self);
    ai_stopprocessinfos(self);
    b_intruderalert(self, other);
    b_setattackreason(self, aiv_ar_intruder);
    npc_settarget(self, hero);
    ai_startstate(self, zs_attack, 1, "");
};

instance org_818_ratford_exit(c_info) {
    npc = org_818_ratford /*7814*/;
    nr = 999;
    condition = org_818_ratford_exit_condition;
    information = org_818_ratford_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int org_818_ratford_exit_condition() {
    return 1;
};

func void org_818_ratford_exit_info() {
    ai_stopprocessinfos(self);
};

instance org_818_ratford_wrongway(c_info) {
    npc = org_818_ratford /*7814*/;
    nr = 1;
    condition = org_818_ratford_wrongway_condition;
    information = org_818_ratford_wrongway_info;
    important = true;
};

func int org_818_ratford_wrongway_condition() {
    return 1;
};

func void org_818_ratford_wrongway_info() {
    ai_output(self, other, "Org_818_Ratford_WrongWay_07_00"); //Ýé, òû!
    ai_output(other, self, "Org_818_Ratford_WrongWay_15_01"); //×òî òåáå?
    ai_output(self, other, "Org_818_Ratford_WrongWay_07_02"); //Ïðîñòî õî÷ó ïðåäóïðåäèòü òåáÿ. Äàëüøå íà÷èíàþòñÿ íàøè îõîòíè÷üè óãîäüÿ.
};

instance org_818_ratford_whatgame(c_info) {
    npc = org_818_ratford /*7814*/;
    nr = 1;
    condition = org_818_ratford_whatgame_condition;
    information = org_818_ratford_whatgame_info;
    description = "À íà êîãî âû îõîòèòåñü?";
};

func int org_818_ratford_whatgame_condition() {
    return 1;
};

func void org_818_ratford_whatgame_info() {
    ai_output(other, self, "Org_818_Ratford_WhatGame_15_00"); //À íà êîãî âû îõîòèòåñü?
    ai_output(self, other, "Org_818_Ratford_WhatGame_07_01"); //Â îñíîâíîì, íà ïàäàëüùèêîâ. Ìíîãî ìÿñà - è íå òàê óæ ñëîæíî ñ íèìè ñïðàâèòüñÿ. Åñëè, êîíå÷íî, çíàåøü - êàê.
    ai_output(other, self, "Org_818_Ratford_WhatGame_15_02"); //Â ñàìîì äåëå? È êàê æå?
    ai_output(self, other, "Org_818_Ratford_WhatGame_07_03"); //Ñïðîñè ó ìîåãî ïðèÿòåëÿ Äðàêñà - îí çíàåò îá ýòîì áîëüøå, ÷åì êòî áû òî íè áûëî.
};

instance org_818_ratford_whydangerous(c_info) {
    npc = org_818_ratford /*7814*/;
    nr = 1;
    condition = org_818_ratford_whydangerous_condition;
    information = org_818_ratford_whydangerous_info;
    description = "Ïî÷åìó ýòî ìåñòî íàñòîëüêî îïàñíî?";
};

func int org_818_ratford_whydangerous_condition() {
    return 1;
};

func void org_818_ratford_whydangerous_info() {
    ai_output(other, self, "Org_818_Ratford_WhyDangerous_15_00"); //Ïî÷åìó ýòî ìåñòî íàñòîëüêî îïàñíî?
    ai_output(self, other, "Org_818_Ratford_WhyDangerous_07_01"); //Òû íîâåíüêèé, äà? Êàæäîå ìåñòî â êîëîíèè îïàñíî... òàê èëè èíà÷å.
    ai_output(self, other, "Org_818_Ratford_WhyDangerous_07_02"); //Áåçîïàñíû ëèøü äîðîãè ìåæäó Ëàãåðÿìè - äà è çäåñü ìîæíî íàáðåñòè íà âîëêîâ, êîòîðûå ïîñ÷èòàþò òåáÿ ëåãêîé äîáû÷åé.
    ai_output(self, other, "Org_818_Ratford_WhyDangerous_07_03"); //È òû äåéñòâèòåëüíî åþ ñòàíåøü, åñëè íå ïîäáåðåøü ñåáå íîðìàëüíîå îðóæèå è äîñïåõè.
};

instance org_818_ratford_woequipment(c_info) {
    npc = org_818_ratford /*7814*/;
    nr = 1;
    condition = org_818_ratford_woequipment_condition;
    information = org_818_ratford_woequipment_info;
    description = "Ãäå ìîæíî íàéòè õîðîøåå îðóæèå?";
};

func int org_818_ratford_woequipment_condition() {
    if (npc_knowsinfo(hero, org_818_ratford_whydangerous /*10926*/)) {
        return 1;
    };
};

func void org_818_ratford_woequipment_info() {
    ai_output(other, self, "Org_818_Ratford_WoEquipment_15_00"); //Ãäå ìîæíî íàéòè õîðîøåå îðóæèå?
    ai_output(self, other, "Org_818_Ratford_WoEquipment_07_01"); //Áëèæàéøåå ìåñòî - Ñòàðûé Ëàãåðü. Ïðîñòî èäè ïî òðîïèíêå - îíà ïðèâåäåò òåáÿ òóäà.
    ai_output(self, other, "Org_818_Ratford_WoEquipment_07_02"); //Íî â íàøåì Íîâîì Ëàãåðå ìîæíî äîñòàòü âåùè äåøåâëå - åñëè, êîíå÷íî, çíàåøü íóæíûõ ëþäåé.
    ai_output(self, other, "Org_818_Ratford_WoEquipment_07_03"); //Åñëè îêàæåøüñÿ â Ñòàðîì Ëàãåðå, ðàçûùè Ìîðäðàãà. Îí îäèí èç íàñ. Íåìíîãî ðóäû, è îí ïðîäàñò òåáå âñå, ÷òî íóæíî.
    log_createtopic(ge_traderoc, log_note);
    b_logentry(ge_traderoc, ge_traderoc_4);
};

instance org_818_ratford_morelocations(c_info) {
    npc = org_818_ratford /*7814*/;
    nr = 1;
    condition = org_818_ratford_morelocations_condition;
    information = org_818_ratford_morelocations_info;
    description = "Ðàññêàæè ìíå ÷òî-íèáóäü î êîëîíèè.";
};

func int org_818_ratford_morelocations_condition() {
    if (npc_knowsinfo(hero, org_818_ratford_whydangerous /*10926*/)) {
        return 1;
    };
};

func void org_818_ratford_morelocations_info() {
    ai_output(other, self, "Org_818_Ratford_MoreLocations_15_00"); //Ðàññêàæè ìíå ÷òî-íèáóäü î êîëîíèè.
    ai_output(self, other, "Org_818_Ratford_MoreLocations_07_01"); //Äëÿ òîãî ÷òîáû äîáðàòüñÿ îò îäíîãî Ëàãåðÿ äî äðóãîãî íóæíà êàðòà - ñýêîíîìèøü âðåìÿ è íå áóäåøü áåç òîëêó ïëóòàòü ïî äîðîãàì.
    ai_output(self, other, "Org_818_Ratford_MoreLocations_07_02"); //Òóïèê ìîæåò îêàçàòüñÿ îïàñíûì óùåëüåì, ãäå îáèòàþò òâàðè, êîòîðûõ ëó÷øå îáõîäèòü ñòîðîíîé.
    ai_output(self, other, "Org_818_Ratford_MoreLocations_07_03"); //Íå ïðèáëèæàéñÿ ê ñòàðûì ðàçâàëèíàì. Èõ çäåñü ìíîãî âîêðóã. Áîëüøèíñòâî èç íèõ - îáëîìêè óêðåïëåíèé âðåìåí ïåðâîé âîéíû ñ îðêàìè. Ïîïàäàþòñÿ è áðîøåííûå îðêñêèå íîðû.
    ai_output(self, other, "Org_818_Ratford_MoreLocations_07_04"); //Ñðåäè ðàçâàëèí ìîæíî âñòðåòèòü îðêîâ - à èíîãäà êîå-êîãî è ïîõóæå. ß ñòàðàþñü íå õîäèòü òóäà, îñîáåííî íî÷üþ.
    ai_output(self, other, "Org_818_Ratford_MoreLocations_07_05"); //È åùå îäèí ñîâåò: íå ñòîèò çàõîäèòü â ëåñ!
};

instance org_818_ratford_wokarte(c_info) {
    npc = org_818_ratford /*7814*/;
    nr = 1;
    condition = org_818_ratford_wokarte_condition;
    information = org_818_ratford_wokarte_info;
    description = "Ãäå ÿ ìîãó ðàçäîáûòü êàðòó?";
};

func int org_818_ratford_wokarte_condition() {
    if (npc_knowsinfo(hero, org_818_ratford_whydangerous /*10926*/)) {
        return 1;
    };
};

func void org_818_ratford_wokarte_info() {
    ai_output(other, self, "Org_818_Ratford_WoKarte_15_00"); //Ãäå ÿ ìîãó ðàçäîáûòü êàðòó?
    ai_output(self, other, "Org_818_Ratford_WoKarte_07_01"); //Ðàññïðîñè ëþäåé â Ñòàðîì Ëàãåðå. Ãäå-òî òàì äîëæåí æèòü êàðòîãðàô.
    ai_output(self, other, "Org_818_Ratford_WoKarte_07_02"); //Ìîæåò, òåáå äàæå óäàñòñÿ ñòÿíóòü ó íåãî îäíó èç êàðò. Åñëè ïîëó÷èòñÿ, ïðèõâàòè îäíó äëÿ ìåíÿ, ëàäíî?
    info_clearchoices(org_818_ratford_wokarte /*10935*/);
    info_addchoice(org_818_ratford_wokarte /*10935*/, "ß áû âçÿë ñòîëüêî, ñêîëüêî ñìîã óíåñòè.", org_818_ratford_wokarte_stehlen);
    info_addchoice(org_818_ratford_wokarte /*10935*/, "Çà÷åì? Ýòè êàðòû - ðàçâå îí íå ïðîäàåò èõ?", org_818_ratford_wokarte_kaufen);
};

func void org_818_ratford_wokarte_stehlen() {
    var c_npc lares;

    ai_output(other, self, "Org_818_Ratford_WoKarte_Stehlen_15_00"); //Åñëè ïðåäîñòàâèòñÿ âîçìîæíîñòü âçÿòü èõ, íå çàïëàòèâ, òî ÿ íàáåðó ñòîëüêî, ñêîëüêî ñìîãó óíåñòè.
    ai_output(self, other, "Org_818_Ratford_WoKarte_Stehlen_07_01"); //À òû íè÷åãî. Òåáå ñòîèò ïîäóìàòü î òîì, ÷òîáû ïðèñîåäèíèòüñÿ ê Íîâîìó Ëàãåðþ. Åñëè âäðóã îêàæåøüñÿ òàì, íàéäè Ëàðñà. Óâåðåí, îí ïîäûùåò òåáå ðàáîòó.
    lares = hlp_getnpc(org_801_lares);
    lares.aivar[7] = true;
    info_clearchoices(org_818_ratford_wokarte /*10935*/);
};

func void org_818_ratford_wokarte_kaufen() {
    ai_output(other, self, "Org_818_Ratford_WoKarte_Kaufen_15_00"); //Çà÷åì? Ýòè êàðòû - ðàçâå îí íå ïðîäàåò èõ?
    ai_output(self, other, "Org_818_Ratford_WoKarte_Kaufen_07_01"); //Íó, åñëè ó òåáÿ åñòü ÷åì çàïëàòèòü...
    info_clearchoices(org_818_ratford_wokarte /*10935*/);
};

instance org_818_ratford_thanks(c_info) {
    npc = org_818_ratford /*7814*/;
    nr = 888;
    condition = org_818_ratford_thanks_condition;
    information = org_818_ratford_thanks_info;
    description = "ß áëàãîäàðþ òåáÿ çà ïîìîùü.";
};

func int org_818_ratford_thanks_condition() {
    return 1;
};

func void org_818_ratford_thanks_info() {
    ai_output(other, self, "Org_818_Ratford_Thanks_15_00"); //Áëàãîäàðþ çà ïîìîùü.
    ai_output(self, other, "Org_818_Ratford_Thanks_07_01"); //Íå äóìàé, ÷òî âñå áóäóò òàêèìè æå äðóæåëþáíûìè, ïàðåíü.
    ai_output(self, other, "Org_818_Ratford_Thanks_07_02"); //Êàðìàíû ó íîâè÷êîâ îáû÷íî ïóñòû, íî êîå-êòî ìîã áû óáèòü òåáÿ äàæå ðàäè ïðîñòîé êèðêè.
    ai_output(other, self, "Org_818_Ratford_Thanks_15_04"); //ß áóäó èìåòü ýòî â âèäó.
};

instance org_819_drax_exit(c_info) {
    npc = org_819_drax /*7816*/;
    nr = 999;
    condition = org_819_drax_exit_condition;
    information = org_819_drax_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int org_819_drax_exit_condition() {
    return 1;
};

func void org_819_drax_exit_info() {
    ai_stopprocessinfos(self);
};

instance org_819_drax_hunthere(c_info) {
    npc = org_819_drax /*7816*/;
    nr = 1;
    condition = org_819_drax_hunthere_condition;
    information = org_819_drax_hunthere_info;
    description = "Òû âåäü îõîòíèê, òàê?";
};

func int org_819_drax_hunthere_condition() {
    return 1;
};

func void org_819_drax_hunthere_info() {
    ai_output(other, self, "Org_819_Drax_HuntHere_15_00"); //Òû âåäü îõîòíèê, òàê?
    ai_output(self, other, "Org_819_Drax_HuntHere_06_01"); //Ïîõîæå íà òî... à ÷òî òåáå íóæíî?
    ai_output(other, self, "Org_819_Drax_HuntHere_15_02"); //Ìíå î÷åíü ïðèãîäèëàñü áû ïàðà ñîâåòîâ.
    ai_output(self, other, "Org_819_Drax_HuntHere_06_03"); //ß ìîãó íàó÷èòü òåáÿ íåñêîëüêèì õèòðîñòÿì - íî âñå çäåñü èìååò ñâîþ öåíó.
    ai_output(other, self, "Org_819_Drax_HuntHere_15_04"); //È ñêîëüêî æå ýòî áóäåò ñòîèòü?
    ai_output(self, other, "Org_819_Drax_HuntHere_06_05"); //Äëÿ íà÷àëà - îäèí äîáðûé ãëîòîê ïèâà. À òàì ïîñìîòðèì.
};

var int drax_bierbekommen;

var int drax_lehrer_frei;

instance org_819_drax_scavenger(c_info) {
    npc = org_819_drax /*7816*/;
    nr = 1;
    condition = org_819_drax_scavenger_condition;
    information = org_819_drax_scavenger_info;
    permanent = true;
    description = "Âîò, ïåé ïèâî è ðàññêàæè ìíå îá îõîòå.";
};

func int org_819_drax_scavenger_condition() {
    if (npc_knowsinfo(hero, org_819_drax_hunthere /*10947*/) && (drax_bierbekommen == false)) {
        return 1;
    };
};

func void org_819_drax_scavenger_info() {
    if (npc_hasitems(other, itfobeer) >= 1) {
        b_giveinvitems(other, self, itfobeer /*4326*/, 1);
        ai_output(other, self, "Org_819_Drax_Scavenger_15_00"); //Âîò, ïåé ïèâî è ðàññêàæè ìíå îá îõîòå.
        if (c_bodystatecontains(self, bs_sit)) {
            ai_standup(self);
            ai_turntonpc(self, hero);
        };
        ai_useitem(self, itfobeer /*4326*/);
        ai_output(self, other, "Org_819_Drax_Scavenger_06_01"); //Ïàäàëüùèêàìè ìû íàçûâàåì ýòèõ áîëüøèõ ïòèö. Àòàêîâàòü èõ íóæíî ïîîäèíî÷êå. Äîâîëüíî ëåãêî âûìàíèòü îäíîãî ïàäàëüùèêà èç ñòàè.
        ai_output(self, other, "Org_819_Drax_Scavenger_06_02"); //Êîãäà òû ïîäîéäåøü ïîáëèæå, ïòèöà ñïåðâà çàáåñïîêîèòñÿ, à çàòåì ïîì÷èòñÿ íà òåáÿ. Òû äîëæåí óæå æäàòü åå ñ îðóæèåì â ðóêàõ.
        ai_output(self, other, "Org_819_Drax_Scavenger_06_03"); //Åñëè òåáå óäàñòñÿ íàíåñòè óäàð, ïðåæäå ÷åì òâàðü óêóñèò òåáÿ, íå îñòàíàâëèâàéñÿ, ïðîäîëæàé äðàòüñÿ - è òû îäåðæèøü ïîáåäó, íå ïîëó÷èâ íè åäèíîé öàðàïèíû.
        ai_output(self, other, "Org_819_Drax_Scavenger_06_04"); //Åñëè æå ÎÍÀ óäàðèò òåáÿ ïåðâîé... íó, íå ñòîèò äî ýòîãî äîâîäèòü.
        drax_bierbekommen = true;
    }
    else {
        ai_output(other, self, "Org_819_Drax_Scavenger_KEIN_BIER_15_00"); //Ó ìåíÿ áîëüøå íåò ïèâà.
        ai_output(self, other, "Org_819_Drax_Scavenger_KEIN_BIER_06_01"); //Íó òàê ñõîäè, ðàçäîáóäü åùå. Ýòî ëó÷øèé áåñïëàòíûé ñîâåò èç òåõ, ÷òî òû ïîëó÷èøü â áëèæàéøåå âðåìÿ. È ïî äîðîãå ïðèõâàòè íåìíîãî ðóäû!
        ai_output(self, other, "Org_819_Drax_Scavenger_KEIN_BIER_06_02"); //ß ìîãó åùå ìíîãî ÷åãî ïîðàññêàçàòü î ìåñòíûõ òâàðÿõ, íî íå çàäàðîì æå!
    };
    drax_lehrer_frei = true;
    log_createtopic(ge_teacherow, log_note);
    b_logentry(ge_teacherow, ge_teacherow_1);
};

instance org_819_drax_creatures(c_info) {
    npc = org_819_drax /*7816*/;
    nr = 1;
    condition = org_819_drax_creatures_condition;
    information = org_819_drax_creatures_info;
    permanent = true;
    description = "Ìîæåøü ëè òû ðàññêàçàòü ìíå åùå îá îõîòå?";
};

func int org_819_drax_creatures_condition() {
    if ((drax_lehrer_frei == true) && ((((knows_getteeth == false) || (knows_getfur == false)) || (knows_getclaws == false)) || (knows_gethide == false))) {
        return 1;
    };
};

func void org_819_drax_creatures_info() {
    ai_output(other, self, "Org_819_Drax_Creatures_15_00"); //Ìîæåøü ëè òû ðàññêàçàòü ìíå åùå îá îõîòå?
    if ((((knows_getteeth == false) || (knows_getfur == false)) || (knows_getclaws == false)) || (knows_gethide == false)) {
        ai_output(self, other, "Org_819_Drax_Creatures_06_01"); //Ìîãó - íî ïèâîì òû òóò óæå íå îòäåëàåøüñÿ.
        ai_output(self, other, "Org_819_Drax_Creatures_06_02"); //Åñëè çíàåøü êàê, òî ñ óáèòîé òâàðè ìîæíî ñíÿòü øêóðó, çàáðàòü êëûêè è êîãòè. Ýòî íå òàê-òî ïðîñòî, íî ïîäîáíûå òðîôåè âûñîêî öåíÿòñÿ.
        ai_output(self, other, "Org_819_Drax_Creatures_06_03"); //Ëþáîé òîðãîâåö ñ ðàäîñòüþ êóïèò èõ ó òåáÿ.
        info_clearchoices(org_819_drax_creatures /*10955*/);
        info_addchoice(org_819_drax_creatures /*10955*/, dialog_back, org_819_drax_creatures_back);
        info_addchoice(org_819_drax_creatures /*10955*/, "Òâîè ñîâåòû ñòîÿò íåäåøåâî.", org_819_drax_creatures_prettymuch);
        if (knows_getteeth == false) {
            info_addchoice(org_819_drax_creatures /*10955*/, "Äîáûâàòü êëûêè (1 åä. îáó÷åíèÿ, 50 êóñêîâ ðóäû)", org_819_drax_creatures_zahn);
        };
        if (knows_getfur == false) {
            info_addchoice(org_819_drax_creatures /*10955*/, "Äîáûâàòü ìåõ (1 åä. îáó÷åíèÿ, 100 êóñêîâ ðóäû)", org_819_drax_creatures_fell);
        };
        if (knows_getclaws == false) {
            info_addchoice(org_819_drax_creatures /*10955*/, "Äîáûâàòü êîãòè (1 åä. îáó÷åíèÿ, 50 êóñêîâ ðóäû)", org_819_drax_creatures_kralle);
        };
        if (knows_gethide == false) {
            info_addchoice(org_819_drax_creatures /*10955*/, "Äîáûâàòü êîæó (1 åä. îáó÷åíèÿ, 100 êóñêîâ ðóäû)", org_819_drax_creatures_haut);
        };
    }
    else {
        ai_output(self, other, "Org_819_Drax_Creatures_TaughtAll_06_00"); //Íó âîò, ÿ ðàññêàçàë âñå, ÷òî çíàë.
    };
};

func void org_819_drax_creatures_back() {
    info_clearchoices(org_819_drax_creatures /*10955*/);
};

func void org_819_drax_creatures_prettymuch() {
    ai_output(other, self, "Org_819_Drax_Creatures_PrettyMuch_15_00"); //Òâîè ñîâåòû ñòîÿò íåäåøåâî.
    ai_output(self, other, "Org_819_Drax_Creatures_PrettyMuch_06_01"); //Íî ñ èõ ïîìîùüþ òû çàðàáîòàåøü íåìàëî ðóäû.
    ai_output(self, other, "Org_819_Drax_Creatures_PrettyMuch_06_02"); //Òóøà çâåðÿ, êîòîðóþ òû íå óìååøü ðàçäåëûâàòü, ïðîñòî ñãíèåò áåç ïîëüçû.
    ai_output(self, other, "Org_819_Drax_Creatures_PrettyMuch_06_03"); //À òû ïîòåðÿåøü âîçìîæíîñòü çàäîðîãî ïðîäàòü åãî øêóðó. Âûõîäèò, òû ðèñêîâàë çðÿ.
    ai_output(self, other, "Org_819_Drax_Creatures_PrettyMuch_06_04"); //Íà òâîåì ìåñòå ÿ ïîñòàðàëñÿ áû íàó÷èòüñÿ âñåìó êàê ìîæíî áûñòðåå.
};

func void org_819_drax_creatures_zahn() {
    ai_output(other, self, "Org_819_Drax_Creatures_Zahn_15_00"); //Êàê äîáûâàþòñÿ êëûêè?
    if (npc_hasitems(other, itminugget) >= 50) {
        if (other.lp >= 1) {
            other.lp = other.lp - 1;
            b_giveinvitems(other, self, itminugget /*4517*/, 50);
            printscreen(print_learn_teeth, -1, -1, font_old_20, 2);
            ai_output(self, other, "Org_819_Drax_Creatures_Zahn_06_01"); //Ãëàâíîå - íå ñëîìàòü èõ. Ïîñòàâü íîæ ïðèìåðíî íà ñåðåäèíó çóáà, ó ñàìîãî îñíîâàíèÿ è, êàê ðû÷àãîì, âûêîâûðíè åãî.
            ai_output(self, other, "Org_819_Drax_Creatures_Zahn_06_02"); //Êëûêè åñòü ó âîëêîâ, ãëîðõîâ è ìðàêîðèñîâ.
            knows_getteeth = true;
            log_createtopic(ge_animaltrophies, log_note);
            b_logentry(ge_animaltrophies, ge_animaltrophies_teeth);
        }
        else {
            ai_output(self, other, "Org_819_Drax_Creatures_KEINE_LP_06_00"); //Òåáå íóæíî íàáðàòüñÿ îïûòà, èíà÷å ìîé ñîâåò îêàæåòñÿ áåñïîëåçíûì äëÿ òåáÿ.
            printscreen(print_notenoughskillpoints, -1, -1, font_old_20, 2);
        };
    }
    else {
        ai_output(self, other, "Org_819_Drax_Creatures_KEIN_ERZ_06_00"); //Ïðåæäå ïîêàæè ðóäó. Êàê ÿ óæå ãîâîðèë, âñå çäåñü èìååò ñâîþ öåíó.
    };
};

func void org_819_drax_creatures_fell() {
    ai_output(other, self, "Org_819_Drax_Creatures_Fell_15_00"); //Êàê ñíÿòü øêóðó?
    if (npc_hasitems(other, itminugget) >= 100) {
        if (other.lp >= 1) {
            other.lp = other.lp - 1;
            b_giveinvitems(other, self, itminugget /*4517*/, 100);
            printscreen(print_learn_fur, -1, -1, font_old_20, 2);
            ai_output(self, other, "Org_819_Drax_Creatures_Fell_06_01"); //Íà÷èíàòü ñëåäóåò ñ çàäíåé ÷àñòè òóøè, äâèãàÿñü ê ãîëîâå. Ãëàâíîå - ïîäöåïèòü åå, äàëüøå âñå áóäåò ëåãêî. Ìåõ ñòîèò î÷åíü äîðîãî.
            ai_output(self, other, "Org_819_Drax_Creatures_Fell_06_02"); //Îäåæäó äåëàþò èç øêóðû âîëêà èëè ìðàêîðèñà. Ïðèñìîòðåâøèñü ê ìåõó, òû ïîéìåøü, ãîäèòñÿ îí íà ÷òî-íèáóäü èëè íåò.
            knows_getfur = true;
            log_createtopic(ge_animaltrophies, log_note);
            b_logentry(ge_animaltrophies, ge_animaltrophies_fur);
        }
        else {
            ai_output(self, other, "Org_819_Drax_Creatures_KEINE_LP_06_01"); //Ó òåáÿ íå õâàòèò îïûòà, ÷òîáû âîñïîëüçîâàòüñÿ ìîèì ñîâåòîì.
            printscreen(print_notenoughskillpoints, -1, -1, font_old_20, 2);
        };
    }
    else {
        ai_output(self, other, "Org_819_Drax_Creatures_KEIN_ERZ_06_01"); //Ïðåæäå ïîêàæè ðóäó. Êàê ÿ óæå ãîâîðèë, âñå çäåñü èìååò ñâîþ öåíó.
    };
};

func void org_819_drax_creatures_kralle() {
    ai_output(other, self, "Org_819_Drax_Creatures_Kralle_15_00"); //Êàê äîáûâàþòñÿ êîãòè?
    if (npc_hasitems(other, itminugget) >= 50) {
        if (other.lp >= 1) {
            other.lp = other.lp - 1;
            b_giveinvitems(other, self, itminugget /*4517*/, 50);
            printscreen(print_learn_claws, -1, -1, font_old_20, 2);
            ai_output(self, other, "Org_819_Drax_Creatures_Kralle_06_01"); //Íà ñàìîì äåëå ýòî î÷åíü ïðîñòî - åñëè òû çíàåøü, ÷òî è êàê äåëàòü. Íóæíî ïðîñòî îòîãíóòü êîãîòü âïåðåä - òîëüêî íå íàçàä, è ÍÅ ÏÛÒÀÉÑß åãî âûäåðãèâàòü!
            ai_output(self, other, "Org_819_Drax_Creatures_Kralle_06_02"); //Ðàçóìååòñÿ, â äåëî èäóò äàëåêî íå âñå êîãòè. ×àùå âñåãî ìû äîáûâàåì èõ ó ÿùåðèö.
            knows_getclaws = true;
            log_createtopic(ge_animaltrophies, log_note);
            b_logentry(ge_animaltrophies, ge_animaltrophies_claws);
        }
        else {
            ai_output(self, other, "Org_819_Drax_Creatures_KEINE_LP_06_02"); //Ñïåðâà íàáåðèñü îïûòà, èíà÷å ìîé ñîâåò òåáå íå ïðèãîäèòñÿ.
            printscreen(print_notenoughskillpoints, -1, -1, font_old_20, 2);
        };
    }
    else {
        ai_output(self, other, "Org_819_Drax_Creatures_KEIN_ERZ_06_02"); //Ïðåæäå ïîêàæè ðóäó. Êàê ÿ óæå ãîâîðèë, âñå çäåñü èìååò ñâîþ öåíó.
    };
};

func void org_819_drax_creatures_haut() {
    ai_output(other, self, "Org_819_Drax_Creatures_Haut_15_00"); //À åñëè ÿ çàõî÷ó ñíÿòü øêóðó ñ ðåïòèëèè?
    if (npc_hasitems(other, itminugget) >= 100) {
        if (other.lp >= 1) {
            other.lp = other.lp - 1;
            b_giveinvitems(other, self, itminugget /*4517*/, 100);
            printscreen(print_learn_skin, -1, -1, font_old_20, 2);
            ai_output(self, other, "Org_819_Drax_Creatures_Haut_06_01"); //Äëÿ ýòîé öåëè ïîäõîäÿò ðàçâå ÷òî øíûãè äà áîëîòîæîðû.
            ai_output(self, other, "Org_819_Drax_Creatures_Haut_06_02"); //Íóæíî ïîäðåçàòü øêóðó ïî êðàÿì, è äàëüøå îíà ñëåçåò ñàìà. Âîò è âñÿ íàóêà.
            knows_gethide = true;
            log_createtopic(ge_animaltrophies, log_note);
            b_logentry(ge_animaltrophies, ge_animaltrophies_skin);
        }
        else {
            ai_output(self, other, "Org_819_Drax_Creatures_KEINE_LP_06_03"); //Ñïåðâà íàáåðèñü îïûòà, èíà÷å ìîé ñîâåò òåáå íå ïðèãîäèòñÿ.
            printscreen(print_notenoughskillpoints, -1, -1, font_old_20, 2);
        };
    }
    else {
        ai_output(self, other, "Org_819_Drax_Creatures_KEIN_ERZ_06_03"); //Ïðåæäå ïîêàæè ðóäó. Êàê ÿ óæå ãîâîðèë, âñå çäåñü èìååò ñâîþ öåíó.
    };
};

instance org_825_organisator_exit(c_info) {
    npc = org_825_organisator /*7828*/;
    nr = 999;
    condition = org_825_organisator_exit_condition;
    information = org_825_organisator_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int org_825_organisator_exit_condition() {
    return 1;
};

func void org_825_organisator_exit_info() {
    ai_stopprocessinfos(self);
};

instance org_825_organisator_perm(c_info) {
    npc = org_825_organisator /*7828*/;
    nr = 1;
    condition = org_825_organisator_perm_condition;
    information = org_825_organisator_perm_info;
    permanent = true;
    description = "×òî âû îõðàíÿåòå?";
};

func int org_825_organisator_perm_condition() {
    return 1;
};

func void org_825_organisator_perm_info() {
    ai_output(other, self, "Org_825_Organisator_PERM_15_00"); //×òî âû îõðàíÿåòå?
    ai_output(self, other, "Org_825_Organisator_PERM_07_01"); //Ìû ñëåäèì çà òåì, ÷òîáû íèêòî èç ëþäåé Ëè è Ãîìåçà íå ïðèáëèæàëñÿ ê Ëàðñó.
    ai_stopprocessinfos(self);
};

var int mordragko_playerchoseorebarons;

var int mordragko_playerchosethorus;

var int mordragko_hauab;

var int mordragko_stayatnc;

instance org_826_mordrag_exit(c_info) {
    npc = org_826_mordrag /*7830*/;
    nr = 999;
    condition = org_826_mordrag_exit_condition;
    information = org_826_mordrag_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int org_826_mordrag_exit_condition() {
    return 1;
};

func void org_826_mordrag_exit_info() {
    ai_stopprocessinfos(self);
};

instance org_826_mordrag_greet(c_info) {
    npc = org_826_mordrag /*7830*/;
    nr = 1;
    condition = org_826_mordrag_greet_condition;
    information = org_826_mordrag_greet_info;
    important = true;
};

func int org_826_mordrag_greet_condition() {
    if (npc_getdisttonpc(self, hero) < zivilanquatschdist) {
        return 1;
    };
};

func void org_826_mordrag_greet_info() {
    ai_output(self, other, "Org_826_Mordrag_Greet_11_00"); //Ýé, íîâåíüêèé! Ìåíÿ çîâóò Ìîðäðàã. Çàïîìíè ýòî èìÿ - ó ìåíÿ òû ìîæåøü êóïèòü âñå, ÷òî òåáå íóæíî, è ïî õîðîøåé öåíå!
};

var int mordrag_traded;

instance org_826_mordrag_trade(c_info) {
    npc = org_826_mordrag /*7830*/;
    nr = 800;
    condition = org_826_mordrag_trade_condition;
    information = org_826_mordrag_trade_info;
    permanent = true;
    trade = true;
    description = "Ïîêàæè ìíå, ÷òî ó òåáÿ åñòü.";
};

func int org_826_mordrag_trade_condition() {
    return 1;
};

func void org_826_mordrag_trade_info() {
    ai_output(other, self, "Org_826_Mordrag_Trade_15_00"); //Ïîêàæè ìíå, ÷òî ó òåáÿ åñòü.
    ai_output(self, other, "Org_826_Mordrag_Trade_11_01"); //Âûáèðàé...
    if (mordrag_traded == 0) {
        log_createtopic(ge_traderoc, log_note);
        b_logentry(ge_traderoc, ge_traderoc_5);
        mordrag_traded = 1;
    };
};

instance org_826_mordrag_courier(c_info) {
    npc = org_826_mordrag /*7830*/;
    nr = 3;
    condition = org_826_mordrag_courier_condition;
    information = org_826_mordrag_courier_info;
    permanent = true;
    description = "Òû äåéñòâèòåëüíî îäèí èç ãîíöîâ ìàãîâ?";
};

func int org_826_mordrag_courier_condition() {
    if (thorus_mordragmagemessenger) {
        return 1;
    };
};

func void org_826_mordrag_courier_info() {
    ai_output(other, self, "Org_826_Mordrag_Courier_15_00"); //Òû äåéñòâèòåëüíî îäèí èç ãîíöîâ ìàãîâ?
    ai_output(self, other, "Org_826_Mordrag_Courier_11_01"); //À ÷òî åñëè òàê?
    ai_output(other, self, "Org_826_Mordrag_Courier_15_02"); //ß äîëæåí ïîãîâîðèòü ñ ìàãàìè. Ìíå íåîáõîäèìî ïðîáðàòüñÿ â çàìîê.
    ai_output(self, other, "Org_826_Mordrag_Courier_11_03"); //Êóðüåðû íîñÿò ïå÷àòü, êîòîðàÿ ñëóæèò ïðîïóñêîì â çàìîê. Åñëè òû ñòàíåøü îäíèì èç íàñ, òû òîæå ïîëó÷èøü åå.
};

instance org_826_mordrag_problem(c_info) {
    npc = org_826_mordrag /*7830*/;
    nr = 3;
    condition = org_826_mordrag_problem_condition;
    information = org_826_mordrag_problem_info;
    description = "Ó òåáÿ åñòü ïðîáëåìà.";
};

func int org_826_mordrag_problem_condition() {
    if ((thorus_mordragko == log_running) && (!npc_knowsinfo(hero, org_826_mordrag_hauab /*11009*/))) {
        return 1;
    };
};

func void org_826_mordrag_problem_info() {
    ai_output(other, self, "Org_826_Mordrag_Problem_15_00"); //Ó òåáÿ åñòü ïðîáëåìà.
    ai_output(self, other, "Org_826_Mordrag_Problem_11_01"); //Äà? À ó êîãî èõ íåò?
    ai_output(other, self, "Org_826_Mordrag_Problem_15_02"); //Åñòü ëþäè, êîòîðûå õîòÿò èçáàâèòüñÿ îò òåáÿ.
    ai_output(self, other, "Org_826_Mordrag_Problem_11_03"); //Â ñàìîì äåëå? Òîãäà ñêàæè èì, ÷òî ñàìî ïî ñåáå èõ æåëàíèå íå èñïîëíèòñÿ.
    ai_output(other, self, "Org_826_Mordrag_Problem_15_04"); //À ïî÷åìó òû óâåðåí, ÷òî îíè íå ïðèñëàëè äëÿ ýòîãî ìåíÿ?
    ai_output(self, other, "Org_826_Mordrag_Problem_11_05"); //Ïîòîìó ÷òî òû ìíå êàæåøüñÿ óìíûì ïàðíåì. Òû äîëæåí ïîíèìàòü, ÷òî åñòü â êîëîíèè áîëåå âûãîäíûå äåëà, ÷åì ðàáîòà íà Ãîìåçà.
    ai_output(self, other, "Org_826_Mordrag_Problem_11_06"); //Íàì, â Íîâîì Ëàãåðå, íóæíû ðàçóìíûå ëþäè, è òàì íèêòî íå áóäåò òåáå ïðèêàçûâàòü.
};

instance org_826_mordrag_ncinfo(c_info) {
    npc = org_826_mordrag /*7830*/;
    nr = 3;
    condition = org_826_mordrag_ncinfo_condition;
    information = org_826_mordrag_ncinfo_info;
    description = "Ðàññêàæè ìíå î Íîâîì Ëàãåðå.";
};

func int org_826_mordrag_ncinfo_condition() {
    if ((npc_knowsinfo(hero, org_826_mordrag_problem /*10987*/) || npc_knowsinfo(hero, org_826_mordrag_courier /*10984*/)) && (!npc_knowsinfo(hero, org_826_mordrag_hauab /*11009*/))) {
        return 1;
    };
};

func void org_826_mordrag_ncinfo_info() {
    ai_output(other, self, "Org_826_Mordrag_NCInfo_15_00"); //Ðàññêàæè ìíå î Íîâîì Ëàãåðå.
    ai_output(self, other, "Org_826_Mordrag_NCInfo_11_01"); //Ýòî ñàìûé ñâîáîäíûé Ëàãåðü âî âñåé êîëîíèè. Íèêàêèõ Áàðîíîâ èëè Ãóðó - òàì òû äåëàåøü òî, ÷òî õî÷åøü.
    ai_output(self, other, "Org_826_Mordrag_NCInfo_11_02"); //È ó íàñ åñòü ñâîÿ øàõòà. Ïðàâäà, äîáûòóþ â íåé ðóäó ìû íå îòäàåì ýòîìó ïðîêëÿòîìó êîðîëþ!
    ai_output(other, self, "Org_826_Mordrag_NCInfo_15_03"); //È êàê âû åå èñïîëüçóåòå?
    ai_output(self, other, "Org_826_Mordrag_NCInfo_11_04"); //Íàøè ìàãè ðàçðàáîòàëè ïëàí, êàê ìîæíî âûáðàòüñÿ îòñþäà. Ìû ñîáèðàåì ðóäó äëÿ åãî îñóùåñòâëåíèÿ.
    ai_output(self, other, "Org_826_Mordrag_NCInfo_11_05"); //Âîò ÷òî ÿ òåáå ñêàæó, ïàðåíü: ïîêà Ãîìåç è åãî ëþäè áåçäåëüíè÷àþò, ìû òðóäèìñÿ âî èìÿ ñâîáîäû!
};

instance org_826_mordrag_joinnewcamp(c_info) {
    npc = org_826_mordrag /*7830*/;
    nr = 3;
    condition = org_826_mordrag_joinnewcamp_condition;
    information = org_826_mordrag_joinnewcamp_info;
    description = "À åñëè ÿ çàõî÷ó ïðèñîåäèíèòüñÿ ê Íîâîìó Ëàãåðþ...";
};

func int org_826_mordrag_joinnewcamp_condition() {
    if ((npc_knowsinfo(hero, org_826_mordrag_problem /*10987*/) || npc_knowsinfo(hero, org_826_mordrag_courier /*10984*/)) && (!npc_knowsinfo(hero, org_826_mordrag_hauab /*11009*/))) {
        return 1;
    };
};

func void org_826_mordrag_joinnewcamp_info() {
    ai_output(other, self, "Org_826_Mordrag_JoinNewcamp_15_00"); //À åñëè ÿ çàõî÷ó ïðèñîåäèíèòüñÿ ê Íîâîìó Ëàãåðþ... òû ïîìîæåøü ìíå?
    ai_output(self, other, "Org_826_Mordrag_JoinNewcamp_11_01"); //Åñëè òû ýòî ñåðüåçíî, ìû ìîæåì îòïðàâèòüñÿ òóäà ïðÿìî ñåé÷àñ. ß îòâåäó òåáÿ ê Ëàðñó - îí ó íàñ çà ãëàâíîãî.
    ai_output(self, other, "Org_826_Mordrag_JoinNewcamp_11_02"); //Íî åñëè òû ïî-ïðåæíåìó õî÷åøü âûøâûðíóòü ìåíÿ èç Ëàãåðÿ... ÷òî æ, äàâàé, äåéñòâóé!
};

instance org_826_mordrag_gotonewcamp(c_info) {
    npc = org_826_mordrag /*7830*/;
    nr = 3;
    condition = org_826_mordrag_gotonewcamp_condition;
    information = org_826_mordrag_gotonewcamp_info;
    description = "Ìû ïîéäåì â Íîâûé Ëàãåðü.";
};

func int org_826_mordrag_gotonewcamp_condition() {
    if (npc_knowsinfo(hero, org_826_mordrag_joinnewcamp /*10993*/) && (!npc_knowsinfo(hero, org_826_mordrag_hauab /*11009*/))) {
        return 1;
    };
};

func void org_826_mordrag_gotonewcamp_info() {
    ai_output(other, self, "Org_826_Mordrag_GotoNewcamp_15_00"); //Ìû ïîéäåì â Íîâûé Ëàãåðü.
    ai_output(self, other, "Org_826_Mordrag_GotoNewcamp_11_01"); //Õîðîøî! Èäè çà ìíîé.
    mordrag_gotonc_day = wld_getday();
    ai_stopprocessinfos(self);
    npc_setpermattitude(self, att_friendly);
    if (npc_gettrueguild(hero) == gil_none) {
        log_createtopic(ch1_joinnc, log_mission);
        log_settopicstatus(ch1_joinnc, log_running);
    };
    b_logentry(ch1_joinnc, ch1_joinnc_10);
    self.aivar[36] = true;
    npc_exchangeroutine(self, "GUIDE");
};

instance org_826_mordrag_atnewcamp(c_info) {
    npc = org_826_mordrag /*7830*/;
    nr = 3;
    condition = org_826_mordrag_atnewcamp_condition;
    information = org_826_mordrag_atnewcamp_info;
    important = true;
};

func int org_826_mordrag_atnewcamp_condition() {
    if (npc_knowsinfo(hero, org_826_mordrag_gotonewcamp /*10996*/) && hlp_strcmp(npc_getnearestwp(self), "OW_PATH_07_21")) {
        self.flags = 0;
        return 1;
    };
};

func void org_826_mordrag_atnewcamp_info() {
    var c_npc lares;

    if (mordrag_gotonc_day > (wld_getday() - 2)) {
        ai_output(self, other, "Org_826_Mordrag_AtNewcamp_11_00"); //Íó, âîò ìû è ïðèøëè.
    }
    else {
        ai_output(self, other, "Org_826_Mordrag_AtNewcamp_LATE_11_00"); //ß óæ äóìàë, ÷òî íå äîæäóñü òåáÿ. Íåâàæíî - íàêîíåö-òî ìû çäåñü!
    };
    ai_output(self, other, "Org_826_Mordrag_AtNewcamp_11_01"); //Çà ýòèìè âîðîòàìè íàõîäèòñÿ Íîâûé Ëàãåðü. Ïîãîâîðè ñ Ëàðñîì - îí ïîìîæåò òåáå. Îòäàøü åìó ýòî êîëüöî.
    ai_output(self, other, "Org_826_Mordrag_AtNewcamp_11_02"); //Ïîíàäîáèòñÿ ñåðüåçíûé äîâîä, ÷òîáû Ëàðñ ïðèíÿë òåáÿ. Ýòà äîðîãàÿ áåçäåëóøêà áóäåò äëÿ òåáÿ ïðîïóñêîì.
    ai_output(self, other, "Org_826_Mordrag_AtNewcamp_11_03"); //Ïîäóìàâ, ÿ ðåøèë îñòàòüñÿ çäåñü íà íåêîòîðîå âðåìÿ. ß óæå çàðàáîòàë äîñòàòî÷íî, à â Ñòàðîì Ëàãåðå ñåé÷àñ ñòàíîâèòñÿ æàðêîâàòî.
    ai_output(self, other, "Org_826_Mordrag_AtNewcamp_11_04"); //Åñëè ïîíàäîáëþñü, òû ñìîæåøü íàéòè ìåíÿ â áàðå - ýòî äîì íà áåðåãó îçåðà. Áåðåãè ñåáÿ!
    ai_output(other, self, "Org_826_Mordrag_AtNewcamp_15_05"); //Óâèäèìñÿ!
    createinvitems(self, mordragsring, 1);
    b_giveinvitems(self, other, mordragsring /*4541*/, 1);
    b_givexp(xp_arrivedwithmordrag);
    b_logentry(ch1_joinnc, ch1_joinnc_11);
    lares = hlp_getnpc(org_801_lares);
    lares.aivar[7] = true;
    mordragko_stayatnc = true;
    self.aivar[36] = false;
    ai_stopprocessinfos(self);
    npc_exchangeroutine(self, "START");
};

instance org_826_mordrag_fight(c_info) {
    npc = org_826_mordrag /*7830*/;
    nr = 3;
    condition = org_826_mordrag_fight_condition;
    information = org_826_mordrag_fight_info;
    description = "Â ýòîì Ëàãåðå åñòü ìåñòî òîëüêî äëÿ îäíîãî èç íàñ!";
};

func int org_826_mordrag_fight_condition() {
    if (((thorus_mordragko == log_running) && (!npc_knowsinfo(hero, org_826_mordrag_gotonewcamp /*10996*/))) && (!npc_knowsinfo(hero, org_826_mordrag_hauab /*11009*/))) {
        return 1;
    };
};

func void org_826_mordrag_fight_info() {
    ai_output(other, self, "Org_826_Mordrag_Fight_15_00"); //Â ýòîì Ëàãåðå îñòàíåòñÿ òîëüêî îäèí èç íàñ!
    ai_output(self, other, "Org_826_Mordrag_Fight_11_01"); //Ïðîøó ïðîùåíèÿ?
    info_clearchoices(org_826_mordrag_fight /*11003*/);
    info_addchoice(org_826_mordrag_fight /*11003*/, "ß ñêàçàë, âûìåòàéñÿ îòñþäà!", info_mordrag_fight_getaway);
    info_addchoice(org_826_mordrag_fight /*11003*/, "Çäåñü íåò ìåñòà òåì, êòî êðàäåò ó Áàðîíîâ!", info_mordrag_fight_orebarons);
    info_addchoice(org_826_mordrag_fight /*11003*/, "Ìåíÿ ïîñëàë Òîðóñ. Îí õî÷åò èçáàâèòüñÿ îò òåáÿ ðàç è íàâñåãäà.", info_mordrag_fight_thorus);
};

func void info_mordrag_fight_getaway() {
    ai_output(other, self, "Info_Mordrag_Fight_GetAway_15_00"); //ß ñêàçàë, âûìåòàéñÿ îòñþäà!
    ai_output(self, other, "Info_Mordrag_Fight_GetAway_11_01"); //Áîëüøèå ñëîâà ìàëåíüêîãî ÷åëîâåêà...
    ai_stopprocessinfos(self);
    npc_settarget(self, other);
    ai_startstate(self, zs_attack, 1, "");
};

func void info_mordrag_fight_orebarons() {
    ai_output(other, self, "Info_Mordrag_Fight_OreBarons_15_00"); //Çäåñü íåò ìåñòà òåì, êòî êðàäåò ó Áàðîíîâ!
    ai_output(self, other, "Info_Mordrag_Fight_OreBarons_11_01"); //À, òàê òû îá ýòîì! ×òî æå òû ñðàçó íå ñêàçàë?..
    mordragko_playerchoseorebarons = true;
    ai_stopprocessinfos(self);
    npc_settarget(self, other);
    ai_startstate(self, zs_attack, 1, "");
};

func void info_mordrag_fight_thorus() {
    ai_output(other, self, "Info_Mordrag_Fight_Thorus_15_00"); //Ìåíÿ ïîñëàë Òîðóñ. Îí õî÷åò èçáàâèòüñÿ îò òåáÿ ðàç è íàâñåãäà.
    ai_output(self, other, "Info_Mordrag_Fight_Thorus_11_01"); //Â ñàìîì äåëå? Òîðóñ? Õ-ì, ýòî âñå, ÷òî ÿ õîòåë çíàòü...
    mordragko_playerchosethorus = true;
    ai_stopprocessinfos(self);
    npc_settarget(self, other);
    ai_startstate(self, zs_attack, 1, "");
};

instance org_826_mordrag_hauab(c_info) {
    npc = org_826_mordrag /*7830*/;
    nr = 3;
    condition = org_826_mordrag_hauab_condition;
    information = org_826_mordrag_hauab_info;
    important = true;
};

func int org_826_mordrag_hauab_condition() {
    if ((self.aivar[19] >= 1) && (!npc_knowsinfo(hero, org_826_mordrag_gotonewcamp /*10996*/))) {
        return 1;
    };
};

func void org_826_mordrag_hauab_info() {
    ai_output(other, self, "Org_826_HauAb_GotoNewcamp_15_00"); //Óáèðàéñÿ!..
    ai_stopprocessinfos(self);
    mordragko_hauab = true;
    b_logentry(ch1_mordragko, ch1_mordragko_6);
    npc_exchangeroutine(self, "Start");
};

instance org_826_mordrag_gotokalom(c_info) {
    npc = org_826_mordrag /*7830*/;
    nr = 2;
    condition = org_826_mordrag_gotokalom_condition;
    information = org_826_mordrag_gotokalom_info;
    description = "Ó ìåíÿ ïîñëàíèå îò Ëàðñà.";
};

func int org_826_mordrag_gotokalom_condition() {
    if ((npc_gettrueguild(other) != gil_org) && (lares_informmordrag == log_running)) {
        return 1;
    };
};

func void org_826_mordrag_gotokalom_info() {
    ai_output(other, self, "Org_826_Mordrag_GotoKalom_15_00"); //Ó ìåíÿ ïîñëàíèå îò Ëàðñà.
    ai_output(self, other, "Org_826_Mordrag_GotoKalom_11_01"); //Ãîâîðè.
    ai_output(other, self, "Org_826_Mordrag_GotoKalom_15_02"); //Ëàðñ õî÷åò çíàòü, ÷òî ïðîèñõîäèò â Ëàãåðå Ñåêòàíòîâ. Îí ïîðó÷èë ýòî çàäàíèå òåáå.
    ai_output(self, other, "Org_826_Mordrag_GotoKalom_11_03"); //Ìíå êàæåòñÿ, âñå ýòî êàê-òî ðàçðåøèòñÿ ñàìî ñîáîé...
    b_logentry(ch1_joinnc, ch1_joinnc_12);
};

var int mordrag_gotokalom;

var int mordrag_reportedmcqballs;

instance org_826_mordrag_gotokalomnow(c_info) {
    npc = org_826_mordrag /*7830*/;
    nr = 2;
    condition = org_826_mordrag_gotokalomnow_condition;
    information = org_826_mordrag_gotokalomnow_info;
    description = "Ëàðñ âåëåë ìíå ïîìî÷ü òåáå â äåëå ñåêòàíòîâ.";
};

func int org_826_mordrag_gotokalomnow_condition() {
    if ((npc_gettrueguild(other) == gil_org) && npc_knowsinfo(hero, org_801_lares_gotokalom /*10876*/)) {
        return true;
    };
};

func void org_826_mordrag_gotokalomnow_info() {
    ai_output(other, self, "Org_826_Mordrag_GotoKalomNOW_15_00"); //Ëàðñ âåëåë ìíå ïîìî÷ü òåáå â äåëå ñåêòàíòîâ.
    ai_output(self, other, "Org_826_Mordrag_GotoKalomNOW_11_01"); //Âèäèøü... ß çíàë, ÷òî ìíå íå ïðèäåòñÿ çàíèìàòüñÿ ýòèì ñàìîìó.
    ai_output(other, self, "Org_826_Mordrag_GotoKalomNOW_15_02"); //Òû õî÷åøü, ÷òîáû ÿ ñäåëàë âñå îò íà÷àëà äî êîíöà?
    ai_output(self, other, "Org_826_Mordrag_GotoKalomNOW_11_03"); //ß óâåðåí, òû ñïðàâèøüñÿ. Ñëóøàé: î÷åíü âàæíî âûÿñíèòü ïðàâäó â ýòîé èñòîðèè ñ Öåðåìîíèåé.
    ai_output(self, other, "Org_826_Mordrag_GotoKalomNOW_11_04"); //ß çíàþ, ÷òî  ïðèäóðêè ñîáèðàþòñÿ ïðèçûâàòü äóõà. Ëè÷íî ÿ íå âåðþ âî âñå ýòè ðîññêàçíè î Ñïÿùåì, íî ÿñíî îäíî:
    ai_output(self, other, "Org_826_Mordrag_GotoKalomNOW_11_05"); //Ãóðó îáëàäàþò áîëüøîé ñèëîé. Ìû äîëæíû çíàòü î òîì, ÷òî ïðîèñõîäèò. Òû ñëåäèøü çà ìîåé ìûñëüþ?
    b_logentry(ch1_gotopsicamp, ch1_gotopsicamp_6);
    b_givexp(xp_assistmordrag);
    lares_informmordrag = log_success;
    mordrag_gotokalom = log_running;
    info_clearchoices(org_826_mordrag_gotokalomnow /*11017*/);
    info_addchoice(org_826_mordrag_gotokalomnow /*11017*/, "Òû ìîæåøü ãîâîðèòü áîëåå êîíêðåòíî?", org_826_mordrag_gotokalomnow_precise);
    info_addchoice(org_826_mordrag_gotokalomnow /*11017*/, "Ïîñìîòðèì, ÷òî ìíå óäàñòñÿ ñäåëàòü.", org_826_mordrag_gotokalomnow_doit);
};

func void org_826_mordrag_gotokalomnow_precise() {
    ai_output(other, self, "Org_826_Mordrag_GotoKalomNOW_Precise_15_00"); //Òû ìîæåøü ãîâîðèòü áîëåå êîíêðåòíî?
    ai_output(self, other, "Org_826_Mordrag_GotoKalomNOW_Precise_11_01"); //Ïîîáùàéñÿ ñ Ëåñòåðîì. Îäíàæäû ÿ äîâîëüíî äîëãî æèë â Ëàãåðå Ñåêòàíòîâ, è  òîãäà îí ïîìîãàë ìíå. Ëåñòåð - íàø ÷åëîâåê.
    b_logentry(ch1_gotopsicamp, ch1_gotopsicamp_7);
};

func void org_826_mordrag_gotokalomnow_doit() {
    ai_output(other, self, "Org_826_Mordrag_GotoKalomNOW_DoIt_15_00"); //Ïîñìîòðèì, ÷òî ìíå óäàñòñÿ ñäåëàòü.
    ai_output(self, other, "Org_826_Mordrag_GotoKalomNOW_DoIt_11_01"); //Êàê òîëüêî òû óçíàåøü îá èõ ïëàíàõ, íåìåäëåííî âîçâðàùàéñÿ.
    info_clearchoices(org_826_mordrag_gotokalomnow /*11017*/);
    ai_stopprocessinfos(self);
};

instance org_826_mordrag_running(c_info) {
    npc = org_826_mordrag /*7830*/;
    nr = 2;
    condition = org_826_mordrag_running_condition;
    information = org_826_mordrag_running_info;
    permanent = true;
    description = "Ïî ïîâîäó ñåêòàíòîâ...";
};

func int org_826_mordrag_running_condition() {
    if (mordrag_gotokalom == log_running) {
        return 1;
    };
};

func void org_826_mordrag_running_info() {
    ai_output(other, self, "Org_826_Mordrag_RUNNING_15_00"); //Ïî ïîâîäó ñåêòàíòîâ...
    ai_output(self, other, "Org_826_Mordrag_RUNNING_11_01"); //×òî?
    if (((corangar_sendtonc == false) && (((corkalom_bringmcqballs == log_running) || (corkalom_bringmcqballs == log_success)) || (npc_hasitems(other, itat_crawlerqueen) >= 1))) && (mordrag_reportedmcqballs == false)) {
        ai_output(other, self, "Org_826_Mordrag_RUNNING_15_06"); //Îíè ïîïûòàëèñü óêðåïèòü ñâîé äóõ è ïðèçâàòü Ñïÿùåãî ñ ïîìîùüþ ýëèêñèðà, ïîëó÷åííîãî èç ÿèö ïîëçóíîâ.
        ai_output(self, other, "Org_826_Mordrag_RUNNING_11_07"); //×òî çà áðåä! Ýòè ïðèäóðêè äåéñòâèòåëüíî âåðÿò âî âñå ýòî, òàê âåäü?
        if ((corkalom_bringmcqballs == log_success) || (npc_hasitems(other, itat_crawlerqueen) >= 1)) {
            ai_output(other, self, "Mis_2_PSI_Kalom_BringMCQEggs_Success_15_01"); //ß íàøåë ÿéöà èç êëàäêè êîðîëåâû ïîëçóíîâ.
            ai_output(self, other, "Org_826_Mordrag_RUNNING_11_09"); //Äà íó?! Òû õî÷åøü ñêàçàòü, ÷òî ïîáûâàë íà ýòîì ñáîðèùå?
        };
        ai_output(other, self, "Org_826_Mordrag_RUNNING_15_10"); //Ïîñìîòðèì íà ðåçóëüòàò.
        ai_output(self, other, "Org_826_Mordrag_RUNNING_11_11"); //Âåðíî. Äàé çíàòü, êîãäà Ãóðó çàêîí÷àò âûñòàâëÿòü ñåáÿ èäèîòàìè.
        b_givexp(xp_reporttomordrag);
        mordrag_reportedmcqballs = true;
    }
    else if (corangar_sendtonc == true) {
        ai_output(other, self, "Org_826_Mordrag_RUNNING_15_04"); //Ñîñòîÿëàñü Âåëèêàÿ Öåðåìîíèÿ.
        ai_output(other, self, "Info_Cronos_YBERION_15_01"); //Þ`Áåðèîí, ãëàâà Ëàãåðÿ Ñåêòàíòîâ, ìåðòâ!
        ai_output(self, other, "Info_Diego_Brief_11_01"); //Ïðàâäà...?
        ai_output(other, self, "Info_Cronos_SLEEPER_15_01"); //Ãóðó âûÿñíèëè, ÷òî âñå ýòî âðåìÿ îíè ìîëèëèñü çëîìó äåìîíó!
        ai_output(other, self, "Info_Cronos_KALOM_15_01"); //Êîð Ãàëîì ïîêèíóë Áðàòñòâî âìåñòå ñ íåñêîëüêèìè ôàíàòèêàìè-Ñòðàæàìè!
        ai_output(other, self, "Info_Cronos_KALOM_15_02"); //Îí õî÷åò ñàì íàéòè Ñïÿùåãî è ïðîáóäèòü åãî âî ÷òî áû òî íè ñòàëî.
        ai_output(self, other, "Org_826_Mordrag_GotoKalom_11_03"); //Ìíå êàæåòñÿ, âñå ýòî êàê-òî ðàçðåøèòñÿ ñàìî ñîáîé...
        ai_output(self, other, "Info_Diego_OtherCamps_11_05"); //Íà òâîåì ìåñòå ÿ áû íå ñòàë òðàòèòü âðåìÿ íà ýòèõ ñóìàñáðîäîâ.
        if (saturas_bringfoci == false) {
            ai_output(other, self, "Info_Cronos_NEWS_15_01"); //Ó ìåíÿ âàæíîå ïîñëàíèå äëÿ Ñàòóðàñà!
            ai_output(self, other, "Org_826_Mordrag_RUNNING_11_03"); //Çàéìèñü äåëîì.
        };
        mordrag_gotokalom = log_success;
        b_givexp(xp_reporttomordrag);
        log_settopicstatus(ch1_gotopsicamp, log_success);
        b_logentry(ch1_gotopsicamp, ch1_gotopsicamp_8);
    }
    else {
        ai_output(other, self, "Org_826_Mordrag_RUNNING_15_02"); //Ïîêà íè÷åãî íîâîãî.
        ai_output(self, other, "Org_826_Mordrag_RUNNING_11_03"); //Çàéìèñü äåëîì.
    };
};

instance info_org_829_exit(c_info) {
    npc = org_829_organisator /*7836*/;
    nr = 999;
    condition = info_org_829_exit_condition;
    information = info_org_829_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_org_829_exit_condition() {
    return 1;
};

func void info_org_829_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_org_829_hello(c_info) {
    npc = org_829_organisator /*7836*/;
    nr = 1;
    condition = info_org_829_hello_condition;
    information = info_org_829_hello_info;
    description = "Êàê äåëà?";
};

func int info_org_829_hello_condition() {
    return 1;
};

func void info_org_829_hello_info() {
    ai_output(other, self, "Info_ORG_829_Hello_15_00"); //Êàê æèçíü?
    ai_output(self, other, "Info_ORG_829_Hello_06_01"); //Íåïëîõî, íî ó ìåíÿ çàêîí÷èëîñü êóðåâî.
};

var int org_829_gotjoint;

instance info_org_829_offerjoint(c_info) {
    npc = org_829_organisator /*7836*/;
    nr = 1;
    condition = info_org_829_offerjoint_condition;
    information = info_org_829_offerjoint_info;
    permanent = true;
    description = "Ó ìåíÿ åñòü áîëîòíèê - áóäåøü?";
};

func int info_org_829_offerjoint_condition() {
    if (npc_knowsinfo(hero, info_org_829_hello /*11028*/) && (org_829_gotjoint == false)) {
        return 1;
    };
};

func void info_org_829_offerjoint_info() {
    ai_output(other, self, "Info_ORG_829_OfferJoint_15_00"); //Ó ìåíÿ åñòü áîëîòíèê - áóäåøü?
    if (((npc_hasitems(other, itmijoint_1) > 0) || (npc_hasitems(other, itmijoint_2) > 0)) || (npc_hasitems(other, itmijoint_3) > 0)) {
        if (npc_hasitems(other, itmijoint_1)) {
            b_giveinvitems(other, self, itmijoint_1 /*4511*/, 1);
        }
        else if (npc_hasitems(other, itmijoint_2)) {
            b_giveinvitems(other, self, itmijoint_2 /*4513*/, 1);
        }
        else {
            if (npc_hasitems(other, itmijoint_3)) {
                b_giveinvitems(other, self, itmijoint_3 /*4515*/, 1);
            };
        };
        ai_output(self, other, "Info_ORG_829_OfferJoint_06_01"); //Êîíå÷íî! Òû èç Ëàãåðÿ Ñåêòàíòîâ èëè êàê?
        nc_joints_verteilt = nc_joints_verteilt + 1;
        org_829_gotjoint = true;
    }
    else {
        ai_output(self, other, "Info_ORG_829_OfferJoint_No_Joint_06_00"); //Ýé, ïàðåíü! Êîí÷àé ðæàòü, õîðîøî? Ìíå ýòî íå íðàâèòñÿ!
    };
};

instance info_org_829_specialinfo(c_info) {
    npc = org_829_organisator /*7836*/;
    nr = 1;
    condition = info_org_829_specialinfo_condition;
    information = info_org_829_specialinfo_info;
    description = "ß çäåñü íåäàâíî. Ïîìîæåøü ñîâåòîì?";
};

func int info_org_829_specialinfo_condition() {
    if (org_829_gotjoint == true) {
        return 1;
    };
};

func void info_org_829_specialinfo_info() {
    ai_output(other, self, "Info_ORG_829_SpecialInfo_15_00"); //ß çäåñü íåäàâíî. Ïîìîæåøü ñîâåòîì?
    ai_output(self, other, "Info_ORG_829_SpecialInfo_06_01"); //Êîíå÷íî! Êîãäà äîáåðåøüñÿ äî Ëàãåðÿ, ïîãîâîðè ñ Ãîðíîì. Îí îäèí èç íàåìíèêîâ íà ñëóæáå ó ìàãîâ, íî ïàðåíü ÷òî íàäî. Íà ñàìîì äåëå, îí îäèí èç íàøèõ.
    ai_output(other, self, "Info_ORG_829_SpecialInfo_15_02"); //Íàøèõ'?
    ai_output(self, other, "Info_ORG_829_SpecialInfo_06_03"); //Èç òåõ, êòî âíå çàêîíà, êîíå÷íî. Îäèí èç âîðîâ. 'Íàäåðåì çàäíèöó Áàðîíàì'... è âñå òàêîå.
};

instance info_org_829_perm(c_info) {
    npc = org_829_organisator /*7836*/;
    nr = 1;
    condition = info_org_829_perm_condition;
    information = info_org_829_perm_info;
    permanent = true;
    description = "Êàêîé îí - ýòîò Ëàãåðü?";
};

func int info_org_829_perm_condition() {
    if (org_829_gotjoint == true) {
        return 1;
    };
};

func void info_org_829_perm_info() {
    ai_output(other, self, "Info_ORG_829_PERM_15_00"); //Êàêîé îí - ýòîò Ëàãåðü?
    ai_output(self, other, "Info_ORG_829_PERM_06_01"); //Ïðîùå ïîéòè òóäà è ïîñìîòðåòü ñîáñòâåííûìè ãëàçàìè.
};

instance info_org_830_exit(c_info) {
    npc = org_830_organisator /*7838*/;
    nr = 999;
    condition = info_org_830_exit_condition;
    information = info_org_830_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_org_830_exit_condition() {
    return 1;
};

func void info_org_830_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_org_830_hello(c_info) {
    npc = org_830_organisator /*7838*/;
    nr = 1;
    condition = info_org_830_hello_condition;
    information = info_org_830_hello_info;
    description = "Ïðèâåò! ß çäåñü íîâåíüêèé.";
};

func int info_org_830_hello_condition() {
    return 1;
};

func void info_org_830_hello_info() {
    ai_output(other, self, "Info_ORG_830_Hello_15_00"); //Ïðèâåò! ß çäåñü íîâåíüêèé.
    ai_output(self, other, "Info_ORG_830_Hello_13_01"); //È ÷òî ñ òîãî?
};

instance info_org_830_what(c_info) {
    npc = org_830_organisator /*7838*/;
    nr = 1;
    condition = info_org_830_what_condition;
    information = info_org_830_what_info;
    description = "×åì òû çàíèìàåøüñÿ?";
};

func int info_org_830_what_condition() {
    if (npc_knowsinfo(hero, info_org_830_hello /*11044*/)) {
        return 1;
    };
};

func void info_org_830_what_info() {
    ai_output(other, self, "Info_ORG_830_What_15_00"); //×òî òû äåëàåøü?
    ai_output(self, other, "Info_ORG_830_What_13_01"); //À íà ÷òî ýòî, ïî-òâîåìó, ïîõîæå? Êóðþ, ðàçóìååòñÿ.
    ai_output(self, other, "Info_ORG_830_What_13_02"); //Òîëüêî íå äóìàé, ÷òî ÿ ïîçâîëþ òåáå çàòÿíóòüñÿ!
};

instance info_org_830_aufhalten(c_info) {
    npc = org_830_organisator /*7838*/;
    nr = 2;
    condition = info_org_830_aufhalten_condition;
    information = info_org_830_aufhalten_info;
    description = "Ðàçâå òû íå ïîïûòàåøüñÿ îñòàíîâèòü ìåíÿ? Ñïðîñèòü î ÷åì-íèáóäü?";
};

func int info_org_830_aufhalten_condition() {
    if (npc_knowsinfo(hero, info_org_830_hello /*11044*/)) {
        return 1;
    };
};

func void info_org_830_aufhalten_info() {
    ai_output(other, self, "Info_ORG_830_Aufhalten_15_00"); //Ðàçâå òû íå ïîïûòàåøüñÿ îñòàíîâèòü ìåíÿ? Ñïðîñèòü î ÷åì-íèáóäü?
    ai_output(self, other, "Info_ORG_830_Aufhalten_13_01"); //Íå-à. Ñëèøêîì ìíîãî âîçíè. Ïîòîì, îò òàêèõ êàê òû âñå ðàâíî íå ñòîèò æäàòü íåïðèÿòíîñòåé.
};

instance info_org_830_perm(c_info) {
    npc = org_830_organisator /*7838*/;
    nr = 3;
    condition = info_org_830_perm_condition;
    information = info_org_830_perm_info;
    permanent = true;
    description = "Êàê òàì, âíóòðè?";
};

func int info_org_830_perm_condition() {
    if (npc_knowsinfo(hero, info_org_830_hello /*11044*/)) {
        return 1;
    };
};

func void info_org_830_perm_info() {
    ai_output(other, self, "Info_ORG_830_Perm_15_00"); //Êàê òàì, âíóòðè?
    ai_output(self, other, "Info_ORG_830_Perm_13_01"); //Êàê âñåãäà - âñå òèõî, ñïîêîéíî, íåñêîëüêî äðàê.
};

instance dia_org_833_buster(c_info) {
    npc = org_833_buster /*7844*/;
    condition = dia_org_833_buster_condition;
    information = dia_org_833_buster_info;
    important = true;
};

func int dia_org_833_buster_condition() {
    if (npc_gettalentskill(hero, npc_talent_acrobat) == 0) {
        return true;
    };
};

func void dia_org_833_buster_info() {
    ai_output(self, other, "DIA_ORG_833_Buster_02_01"); //Ïîõîæå, òû íå ñëèøêîì ïðîâîðåí. ß ìîãó ïîìî÷ü òåáå.
};

instance dia_org_833_buster_exit(c_info) {
    npc = org_833_buster /*7844*/;
    nr = 999;
    condition = dia_org_833_buster_exit_condition;
    information = dia_org_833_buster_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_org_833_buster_exit_condition() {
    return 1;
};

func void dia_org_833_buster_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_org_833_buster3(c_info) {
    npc = org_833_buster /*7844*/;
    nr = 0;
    condition = dia_org_833_buster3_condition;
    information = dia_org_833_buster3_info;
    permanent = true;
    description = "Òû ìîæåøü ìíå ïîìî÷ü?";
};

func int dia_org_833_buster3_condition() {
    if (npc_knowsinfo(hero, dia_org_833_buster /*11056*/) && (npc_gettalentskill(hero, npc_talent_acrobat) == 0)) {
        return true;
    };
};

func void dia_org_833_buster3_info() {
    ai_output(other, self, "DIA_Wedge_Lehrer_15_00"); //×åìó òû ìîæåøü ìåíÿ íàó÷èòü?
    ai_output(self, other, "DIA_ORG_833_Buster3_02_01"); //ß ìîãó îáó÷èòü òåáÿ êîíòðîëþ íàä òåëîì. Ýòî èñêóññòâî íàçûâàåòñÿ ÀÊÐÎÁÀÒÈÊÀ.
    info_clearchoices(dia_org_833_buster3 /*11062*/);
    info_addchoice(dia_org_833_buster3 /*11062*/, dialog_back, dia_org_833_buster_back);
    info_addchoice(dia_org_833_buster3 /*11062*/, b_buildlearnstring(name_learnacrobat, lpcost_talent_acrobat, 0), dia_org_833_buster_train1);
    log_createtopic(ge_teachernc, log_note);
    b_logentry(ge_teachernc, ge_teachernc_buster);
};

func void dia_org_833_buster_train1() {
    ai_output(other, self, "DIA_BaalIsidro_TRADE_15_00"); //Ïîêàæè ìíå, ÷òî ó òåáÿ åñòü.
    info_clearchoices(dia_org_833_buster3 /*11062*/);
    if (b_giveskill(other, npc_talent_acrobat, 1, lpcost_talent_acrobat)) {
        ai_output(self, other, "DIA_ORG_833_Buster3_02_02"); //Êîãäà òû êîíòðîëèðóåøü ñâîå òåëî, òû ìîæåøü ïðûãàòü ãîðàçäî äàëüøå.
        ai_output(self, other, "DIA_ORG_833_Buster3_02_03"); //ß íàó÷ó òåáÿ îòêàòûâàòüñÿ â ñòîðîíó, ïîêàæó, êàê ïðèçåìëÿòüñÿ ïîñëå ïàäåíèÿ. Íî íå ñòîèò çàáûâàòü, ÷òî òû âñå-òàêè íå áåññìåðòíûé!
        ai_output(self, other, "DIA_ORG_833_Buster3_02_04"); //Àêðîáàòèêà òàêæå î÷åíü ïîëåçíà â áîþ. Òû ñìîæåøü áûñòðî ìåíÿòü äèñòàíöèþ ìåæäó ñîáîé è ïðîòèâíèêîì. Íó, ñ áîãîì!
    };
};

func void dia_org_833_buster_back() {
    info_clearchoices(dia_org_833_buster3 /*11062*/);
};

instance dia_roscoe_exit(c_info) {
    npc = org_840_roscoe /*7854*/;
    nr = 999;
    condition = dia_roscoe_exit_condition;
    information = dia_roscoe_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_roscoe_exit_condition() {
    return 1;
};

func void dia_roscoe_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_roscoe_bringlist(c_info) {
    npc = org_840_roscoe /*7854*/;
    nr = 1;
    condition = dia_roscoe_bringlist_condition;
    information = dia_roscoe_bringlist_info;
    description = "Ó ìåíÿ ñïèñîê ïðèïàñîâ äëÿ Ñòàðîé Øàõòû.";
};

func int dia_roscoe_bringlist_condition() {
    if (npc_hasitems(other, thelist) >= 1) {
        return 1;
    };
};

func void dia_roscoe_bringlist_info() {
    ai_output(other, self, "DIA_Roscoe_BringList_15_00"); //Ó ìåíÿ ñïèñîê ïðèïàñîâ äëÿ Ñòàðîé Øàõòû.
    ai_output(self, other, "DIA_Roscoe_BringList_10_01"); //Íåäóðíî. Ãäå òû åãî âçÿë?
    ai_output(other, self, "DIA_Roscoe_BringList_15_02"); //Åãî ìíå äàë ßí.
    ai_output(self, other, "DIA_Roscoe_BringList_10_03"); //Òû õðàáðûé ïàðåíü! Òåáÿ ïðèñëàëè, ÷òîáû èñïûòàòü ìåíÿ, âåðíî? Òîðóñ óæå ñõîäèò ñ óìà, ÿ óâåðåí.
    ai_output(other, self, "DIA_Roscoe_BringList_15_04"); //Ìíå ïðèêàçàë Äèåãî.
    ai_output(self, other, "DIA_Roscoe_BringList_10_05"); //Äèåãî äåëàåò òî, ÷òî ïðèêàçûâàåò åìó Òîðóñ. Îí áû óìåð îò ñìåõà, åñëè áû óçíàë, ÷òî òû áûë çäåñü.
    ai_output(other, self, "DIA_Roscoe_BringList_15_06"); //Òàê ÿ ìîãó çàéòè èëè íåò?
    ai_output(self, other, "DIA_Roscoe_BringList_10_07"); //Äà çàõîäè! Ëàðñ íå ïîâåðèò ñâîèì ãëàçàì.
    self.aivar[29] = true;
};

instance dia_roscoe_mordrag(c_info) {
    npc = org_840_roscoe /*7854*/;
    nr = 2;
    condition = dia_roscoe_mordrag_condition;
    information = dia_roscoe_mordrag_info;
    description = "Ìåíÿ ïðèñëàë Ìîðäðàã. ";
};

func int dia_roscoe_mordrag_condition() {
    if (npc_hasitems(hero, mordragsring)) {
        return 1;
    };
};

func void dia_roscoe_mordrag_info() {
    ai_output(other, self, "DIA_Roscoe_Mordrag_15_00"); //Ìåíÿ ïðèñëàë Ìîðäðàã.
    ai_output(self, other, "DIA_Roscoe_Mordrag_10_01"); //Äàâíåíüêî åãî çäåñü íå áûëî. Ïîõîæå, îí ïåðåìåòíóëñÿ ê Ñòàðîìó Ëàãåðþ.
    ai_output(other, self, "DIA_Roscoe_Mordrag_15_02"); //Ìû ïðèøëè ñþäà âìåñòå.
    ai_output(self, other, "DIA_Roscoe_Mordrag_10_03"); //Ìîðäðàã âåðíóëñÿ? Åñëè âñòðåòèøü åãî, ñêàæè, ÷òî åãî ðàçûñêèâàåò Ëàðñ.
    ai_output(other, self, "DIA_Roscoe_Mordrag_15_04"); //Ìîðäðàã ïåðåäàë ìíå êîå-÷òî äëÿ Ëàðñà.
    ai_output(self, other, "DIA_Roscoe_Mordrag_10_05"); //×òî èìåííî?
    ai_output(other, self, "DIA_Roscoe_Mordrag_15_06"); //Êîëüöî.
    ai_output(self, other, "DIA_Roscoe_Mordrag_10_07"); //Äîðîãàÿ øòóêîâèíà... Ëàäíî, òû ìîæåøü óâèäåòüñÿ ñ íèì.
    self.aivar[29] = true;
};

instance dia_roscoe_wannajoin(c_info) {
    npc = org_840_roscoe /*7854*/;
    nr = 2;
    condition = dia_roscoe_wannajoin_condition;
    information = dia_roscoe_wannajoin_info;
    description = "ß õîòåë áû ïðèñîåäèíèòüñÿ ê âàøåé øàéêå.";
};

func int dia_roscoe_wannajoin_condition() {
    if ((((!npc_knowsinfo(hero, dia_roscoe_mordrag /*11073*/)) && (!npc_knowsinfo(hero, dia_roscoe_bringlist /*11070*/))) && (npc_gettrueguild(hero) == gil_none)) && (oldheroguild == 0)) {
        return 1;
    };
};

func void dia_roscoe_wannajoin_info() {
    ai_output(other, self, "DIA_Roscoe_WannaJoin_15_00"); //ß õîòåë áû ïðèñîåäèíèòüñÿ ê âàøåé øàéêå.
    ai_output(self, other, "DIA_Roscoe_WannaJoin_10_01"); //Ìíîãèå õîòÿò ïðèñîåäèíèòüñÿ ê íàì. Åñëè õî÷åøü ïðîéòè ÷åðåç ýòè âîðîòà, òåáå ïðèäåòñÿ ïðåäëîæèòü íå÷òî îñîáåííîå.
};

instance dia_roscoe_comeagain(c_info) {
    npc = org_840_roscoe /*7854*/;
    nr = 2;
    condition = dia_roscoe_comeagain_condition;
    information = dia_roscoe_comeagain_info;
    important = true;
};

func int dia_roscoe_comeagain_condition() {
    if (((npc_hasitems(other, thelist) >= 1) && npc_knowsinfo(hero, org_801_lares_mordragsentme /*10859*/)) || (npc_knowsinfo(hero, org_826_mordrag_atnewcamp /*10999*/) && npc_knowsinfo(hero, org_801_lares_bringlist /*10849*/))) {
        return 1;
    };
};

func void dia_roscoe_comeagain_info() {
    ai_output(self, other, "DIA_Roscoe_ComeAgain_10_00"); //Ñíîâà òû.
};

const string roscoe_checkpoint = "NC_HUT22_IN_MOVEMENT";

instance info_roscoe_firstwarn(c_info) {
    npc = org_840_roscoe /*7854*/;
    nr = 2;
    condition = info_roscoe_firstwarn_condition;
    information = info_roscoe_firstwarn_info;
    permanent = true;
    important = true;
};

func int info_roscoe_firstwarn_condition() {
    if ((((hero.aivar[27] == aiv_gps_begin) && (self.aivar[29] == false)) && (npc_getattitude(self, hero) != att_friendly)) && hlp_strcmp(npc_getnearestwp(self), self.wp)) {
        return true;
    };
};

func void info_roscoe_firstwarn_info() {
    printglobals(pd_mission);
    ai_output(self, hero, "Info_Roscoe_FirstWarn_Info_10_00"); //Êóäà ñîáðàëñÿ?
    ai_output(hero, self, "Info_Roscoe_FirstWarn_Info_15_01"); //ß õî÷ó âñòðåòèòüñÿ ñ Ëàðñîì.
    ai_output(self, hero, "Info_Roscoe_FirstWarn_Info_10_02"); //Ëàðñ çäåñü, íî ïîíàäîáèòñÿ âåñêèé ïîâîä, ÷òîáû îòîðâàòü åãî îò äåë.
    hero.aivar[28] = npc_getdisttowp(hero, roscoe_checkpoint);
    hero.aivar[27] = aiv_gps_firstwarn;
};

instance info_roscoe_lastwarn(c_info) {
    npc = org_840_roscoe /*7854*/;
    nr = 1;
    condition = info_roscoe_lastwarn_condition;
    information = info_roscoe_lastwarn_info;
    permanent = true;
    important = true;
};

func int info_roscoe_lastwarn_condition() {
    if (((((hero.aivar[27] == aiv_gps_firstwarn) && (npc_getattitude(self, hero) != att_friendly)) && (self.aivar[29] == false)) && (npc_getdisttowp(hero, roscoe_checkpoint) < (hero.aivar[28] - 100))) && hlp_strcmp(npc_getnearestwp(self), self.wp)) {
        return true;
    };
};

func int info_roscoe_lastwarn_info() {
    ai_output(self, hero, "Info_Roscoe_LastWarn_10_00"); //Òû ÷òî, îãëîõ?
    hero.aivar[28] = npc_getdisttowp(hero, roscoe_checkpoint);
    hero.aivar[27] = aiv_gps_lastwarn;
    ai_stopprocessinfos(self);
};

instance info_roscoe_attack(c_info) {
    npc = org_840_roscoe /*7854*/;
    nr = 1;
    condition = info_roscoe_attack_condition;
    information = info_roscoe_attack_info;
    permanent = true;
    important = true;
};

func int info_roscoe_attack_condition() {
    if (((((hero.aivar[27] == aiv_gps_lastwarn) && (npc_getattitude(self, hero) != att_friendly)) && (self.aivar[29] == false)) && (npc_getdisttowp(hero, roscoe_checkpoint) < (hero.aivar[28] - 100))) && hlp_strcmp(npc_getnearestwp(self), self.wp)) {
        return true;
    };
};

func int info_roscoe_attack_info() {
    hero.aivar[28] = 0;
    hero.aivar[27] = aiv_gps_punish;
    b_fullstop(self);
    ai_stopprocessinfos(self);
    b_intruderalert(self, other);
    b_setattackreason(self, aiv_ar_intruder);
    npc_settarget(self, hero);
    ai_startstate(self, zs_attack, 1, "");
};

instance dia_silas_exit(c_info) {
    npc = org_841_silas /*7856*/;
    nr = 999;
    condition = dia_silas_exit_condition;
    information = dia_silas_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_silas_exit_condition() {
    return 1;
};

func void dia_silas_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_silas_hehler(c_info) {
    npc = org_841_silas /*7856*/;
    nr = 1;
    condition = dia_silas_hehler_condition;
    information = dia_silas_hehler_info;
    description = "Êàê äåëà?";
};

func int dia_silas_hehler_condition() {
    return 1;
};

func void dia_silas_hehler_info() {
    ai_output(other, self, "DIA_Silas_Hehler_15_00"); //Êàê æèçíü?
    ai_output(self, other, "DIA_Silas_Hehler_06_01"); //Çäîðîâî! Ìû ñìåíÿëè íàø ðèñîâûé øíàïñ íà ðóäó.
    ai_output(self, other, "DIA_Silas_Hehler_06_02"); //Íó, è ðóäû ïîëó÷èëè äîñòàòî÷íî. À ãäå íàøèì ïàðíÿì òðàòèòü åå, êàê íå çäåñü?
};

instance dia_silas_trade(c_info) {
    npc = org_841_silas /*7856*/;
    nr = 1;
    condition = dia_silas_trade_condition;
    information = dia_silas_trade_info;
    permanent = true;
    trade = true;
    description = "ß õî÷ó ïèòü.";
};

func int dia_silas_trade_condition() {
    return 1;
};

func void dia_silas_trade_info() {
    ai_output(other, self, "DIA_Silas_Trade_15_00"); //ß õî÷ó ïèòü.
    ai_output(self, other, "DIA_Silas_Trade_06_01"); //Íåò ïðîáëåì, åñëè ó òåáÿ åñòü äåíüãè.
};

instance dia_shrike_exit(c_info) {
    npc = org_842_shrike /*7858*/;
    nr = 999;
    condition = dia_shrike_exit_condition;
    information = dia_shrike_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_shrike_exit_condition() {
    return 1;
};

func void dia_shrike_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_shrike_hello(c_info) {
    npc = org_842_shrike /*7858*/;
    nr = 1;
    condition = dia_shrike_hello_condition;
    information = dia_shrike_hello_info;
    description = "Êàê äåëà?";
};

func int dia_shrike_hello_condition() {
    return 1;
};

func void dia_shrike_hello_info() {
    ai_output(other, self, "DIA_Shrike_Hello_15_00"); //Êàê æèçíü?
    ai_output(self, other, "DIA_Shrike_Hello_07_01"); //Ïðîâàëèâàé!
    ai_stopprocessinfos(self);
};

instance dia_shrike_getlost(c_info) {
    npc = org_842_shrike /*7858*/;
    nr = 1;
    condition = dia_shrike_getlost_condition;
    information = dia_shrike_getlost_info;
    description = "Ïðîâàëèâàé.";
};

func int dia_shrike_getlost_condition() {
    if (self.aivar[19] && (gorn_shrikeshut == log_running)) {
        return 1;
    };
};

func void dia_shrike_getlost_info() {
    ai_output(other, self, "DIA_Shrike_GetLost_15_00"); //Ïðîâàëèâàé.
    ai_output(self, other, "DIA_Shrike_GetLost_07_01"); //Ïîãîâîðèì ïîçæå.
    log_createtopic(ch1_shrikeshut, log_mission);
    log_settopicstatus(ch1_shrikeshut, log_running);
    b_logentry(ch1_shrikeshut, ch1_shrikeshut_1);
    b_givexp(xp_kickedshrike);
    ai_stopprocessinfos(self);
    npc_exchangeroutine(self, "start");
};

instance org_843_sharky_exit(c_info) {
    npc = org_843_sharky /*7861*/;
    nr = 999;
    condition = org_843_sharky_exit_condition;
    information = org_843_sharky_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int org_843_sharky_exit_condition() {
    return 1;
};

func void org_843_sharky_exit_info() {
    ai_stopprocessinfos(self);
};

instance org_843_sharky_fisk(c_info) {
    npc = org_843_sharky /*7861*/;
    nr = 2;
    condition = org_843_sharky_fisk_condition;
    information = org_843_sharky_fisk_info;
    description = "Ôèñêó èç Ñòàðîãî Ëàãåðÿ íóæåí íîâûé êîìïàíüîí.";
};

func int org_843_sharky_fisk_condition() {
    if (fisk_getnewhehler == log_running) {
        return true;
    };
};

func void org_843_sharky_fisk_info() {
    ai_output(other, self, "Org_843_Sharky_Fisk_Info_15_00"); //Ôèñêó èç Ñòàðîãî Ëàãåðÿ íóæåí íîâûé êîìïàíüîí.
    ai_output(self, other, "Org_843_Sharky_Fisk_Info_10_01"); //À ïî÷åìó òû ðàññêàçûâàåøü îá ýòîì ìíå?
    ai_output(other, self, "Org_843_Sharky_Fisk_Info_15_02"); //Äóìàë, ÷òî òû çàõî÷åøü ïîëó÷èòü íåìíîãî ðóäû.
    ai_output(self, other, "Org_843_Sharky_Fisk_Info_10_03"); //Ïî÷åìó áû è íåò... Ïåðåäàé Ôèñêó, ÷òî ñëåäóþùèå íåñêîëüêî äíåé îí ìîæåò ðàññ÷èòûâàòü íà ìåíÿ.
};

instance org_843_sharky_trade(c_info) {
    npc = org_843_sharky /*7861*/;
    nr = 0;
    condition = org_843_sharky_trade_condition;
    information = org_843_sharky_trade_info;
    permanent = true;
    trade = true;
    description = "Ìíå êîå-÷òî íóæíî...";
};

func int org_843_sharky_trade_condition() {
    if (npc_knowsinfo(hero, org_843_sharky_greet /*11119*/)) {
        return true;
    };
};

func void org_843_sharky_trade_info() {
    ai_output(other, self, "Org_843_Sharky_TRADE_Info_15_01"); //Ìíå êîå-÷òî íóæíî...
};

instance org_843_sharky_greet(c_info) {
    npc = org_843_sharky /*7861*/;
    nr = 0;
    condition = org_843_sharky_greet_condition;
    information = org_843_sharky_greet_info;
    description = "Ýé, êàê äåëà?";
};

func int org_843_sharky_greet_condition() {
    return true;
};

func void org_843_sharky_greet_info() {
    ai_output(other, self, "Org_843_Sharky_GREET_Info_15_01"); //Ýé, êàê äåëà?
    ai_output(self, other, "Org_843_Sharky_GREET_Info_10_02"); //Õî÷åøü êóïèòü ÷òî-íèáóäü?
    log_createtopic(ge_tradernc, log_note);
    b_logentry(ge_tradernc, ge_tradernc_5);
};

instance dia_lefty_exit(c_info) {
    npc = org_844_lefty /*7863*/;
    nr = 999;
    condition = dia_lefty_exit_condition;
    information = dia_lefty_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_lefty_exit_condition() {
    return 1;
};

func void dia_lefty_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_lefty_firstatnight(c_info) {
    npc = org_844_lefty /*7863*/;
    nr = 1;
    condition = dia_lefty_firstatnight_condition;
    information = dia_lefty_firstatnight_info;
    description = "×åì òû çàíèìàåøüñÿ?";
};

func int dia_lefty_firstatnight_condition() {
    if (wld_istime(19, 0, 8, 0) && (!npc_knowsinfo(hero, dia_lefty_first /*11128*/))) {
        return 1;
    };
};

func void dia_lefty_firstatnight_info() {
    ai_output(other, self, "DIA_Aidan_Hello_15_00"); //×åì òû çàíèìàåøüñÿ?
    ai_output(self, other, "DIA_846_Hello_07_01"); //ß ðàáîòàþ íà Ëîðäà.
    ai_output(other, self, "DIA_Ricelord_Arbeit_15_00"); //À ó òåáÿ åñòü äëÿ ìåíÿ ðàáîòà?
    ai_output(self, other, "DIA_Shrike_GetLost_07_01"); //Ïîãîâîðèì ïîçæå.
    ai_stopprocessinfos(self);
};

instance dia_lefty_first(c_info) {
    npc = org_844_lefty /*7863*/;
    nr = 1;
    condition = dia_lefty_first_condition;
    information = dia_lefty_first_info;
    important = true;
};

func int dia_lefty_first_condition() {
    if (wld_istime(8, 0, 19, 0) && (self.aivar[19] == false)) {
        return 1;
    };
};

func void dia_lefty_first_info() {
    ai_output(self, other, "DIA_Lefty_First_07_00"); //Ýé! Íîâåíüêèé? Ìû èùåì ÷åëîâåêà, ÷òîáû îí îòíåñ âîäó êðåñòüÿíàì íà ðèñîâûå ïîëÿ.
    ai_output(self, other, "DIA_Lefty_First_07_01"); //Òåáå ñåé÷àñ íóæíî îáçàâîäèòüñÿ íîâûìè äðóçüÿìè. ×òî ñêàæåøü?
    log_createtopic(ch1_carrywater, log_mission);
    log_settopicstatus(ch1_carrywater, log_running);
    b_logentry(ch1_carrywater, ch1_carrywater_3);
    info_clearchoices(dia_lefty_first /*11128*/);
    info_addchoice(dia_lefty_first /*11128*/, "Â äðóãîé ðàç.", dia_lefty_first_later);
    info_addchoice(dia_lefty_first /*11128*/, "Ñàì òàùè âîäó ñâîèì êðåñòüÿíàì!", dia_lefty_first_never);
    info_addchoice(dia_lefty_first /*11128*/, "Áóäó ðàä ïîìî÷ü.", dia_lefty_first_yes);
};

func void dia_lefty_first_yes() {
    ai_output(other, self, "DIA_Lefty_First_Yes_15_00"); //Áóäó ðàä ïîìî÷ü.
    ai_output(self, other, "DIA_Lefty_First_Yes_07_01"); //Îòëè÷íî! Îòïðàâëÿéñÿ ê Ëîðäó. Îí äàñò òåáå âîäó è ðàññêàæåò âñå, ÷òî íóæíî.
    lefty_workday = b_setdaytolerance();
    lefty_mission = log_running;
    an_bauern_verteilt = 0;
    b_logentry(ch1_carrywater, ch1_carrywater_4);
    info_clearchoices(dia_lefty_first /*11128*/);
};

func void dia_lefty_first_never() {
    ai_output(other, self, "DIA_Lefty_First_Never_15_00"); //Ñàì òàùè âîäó ñâîèì êðåñòüÿíàì!
    ai_output(self, other, "DIA_Lefty_First_Never_07_01"); //Õàìèòü äðóçüÿì - ýòî ïëîõî. ß íàó÷ó òåáÿ õîðîøèì ìàíåðàì!
    lefty_workday = b_setdaytolerance();
    lefty_mission = log_failed;
    b_logentry(ch1_carrywater, ch1_carrywater_5);
    info_clearchoices(dia_lefty_first /*11128*/);
    ai_stopprocessinfos(self);
    npc_settarget(self, other);
    ai_startstate(self, zs_attack, 1, "");
};

func void dia_lefty_first_later() {
    ai_output(other, self, "DIA_Lefty_First_Later_15_00"); //Ìîæåò áûòü ïîçæå...
    ai_output(self, other, "DIA_Lefty_First_Later_07_01"); //Ïîçæå' áóäåò óæå ïîçäíî. Òâîÿ ïîìîùü ìíå íóæíà ÑÅÉ×ÀÑ. Òû õî÷åøü ìíå ïîìî÷ü èëè íåò?
};

var int carriedwaterforlefty;

instance dia_lefty_workday(c_info) {
    npc = org_844_lefty /*7863*/;
    nr = 1;
    condition = dia_lefty_workday_condition;
    information = dia_lefty_workday_info;
    permanent = true;
    important = true;
};

func int dia_lefty_workday_condition() {
    if (((wld_istime(8, 0, 19, 0) || (lefty_mission == log_success)) && (self.aivar[19] == false)) && ((lefty_workday <= (wld_getday() - 1)) || (lefty_mission == log_success))) {
        return 1;
    };
};

func void dia_lefty_workday_info() {
    ai_output(self, other, "DIA_Lefty_WorkDay_07_00"); //Ýé, òû!
    if (lefty_mission == log_failed) {
        ai_output(self, other, "DIA_Lefty_WorkDay_NextChance_07_00"); //Òåáå ïîâåçëî! ß äàþ òåáå åùå îäèí øàíñ.
        ai_output(self, other, "DIA_Lefty_WorkDay_NextChance_07_01"); //Ïîñòàðàéñÿ íå îáëàæàòüñÿ íà ýòîò ðàç! Îòïðàâëÿéñÿ ê Ëîðäó, çàáèðàé âîäó è òàùè åå êðåñòüÿíàì. Óñåê?
        lefty_workday = b_setdaytolerance();
        lefty_mission = log_running;
        an_bauern_verteilt = 0;
        b_logentry(ch1_carrywater, ch1_carrywater_6);
        ai_stopprocessinfos(self);
    }
    else if ((lefty_mission == log_running) || (lefty_workday <= (wld_getday() - 1))) {
        ai_output(self, other, "DIA_Lefty_WorkDay_StillRunning_07_00"); //ß æå âåëåë òåáå îòíåñòè âîäó êðåñòüÿíàì!
        ai_output(self, other, "DIA_Lefty_WorkDay_StillRunning_07_01"); //Íå ëþáëþ ëþäåé, êîòîðûå ðàçäàþò îáåùàíèÿ, à ïîòîì íå âûïîëíÿþò èõ!
        lefty_workday = b_setdaytolerance();
        lefty_mission = log_failed;
        b_logentry(ch1_carrywater, ch1_carrywater_7);
        ai_stopprocessinfos(self);
        npc_settarget(self, other);
        ai_startstate(self, zs_attack, 1, "");
    }
    else {
        if (lefty_mission == log_success) {
            ai_output(self, other, "DIA_Lefty_WorkDay_SUCCESS_07_00"); //Õîðîøî! Êîå äëÿ ÷åãî òû âñå-òàêè ãîäèøüñÿ.
            lefty_workday = b_setdaytolerance() + 1;
            lefty_mission = log_running;
            an_bauern_verteilt = 0;
            ricelord_askedforwater = false;
            if (!carriedwaterforlefty) {
                ai_output(self, other, "DIA_Lefty_WorkDay_SUCCESS_07_01"); //Äóìàþ, ýòî äåëî êàê ðàç äëÿ òåáÿ. Òåïåðü òû áóäåøü ðàçíîñèòü âîäó êàæäûé äåíü. È õâàòèò îòäûõàòü - èäè, çàéìèñü äåëîì!
                b_logentry(ch1_carrywater, ch1_carrywater_8);
                b_givexp(xp_leftycarriedwater);
                carriedwaterforlefty = true;
            };
            ai_stopprocessinfos(self);
        };
    };
};

instance dia_lefty_neveragain(c_info) {
    npc = org_844_lefty /*7863*/;
    nr = 1;
    condition = dia_lefty_neveragain_condition;
    information = dia_lefty_neveragain_info;
    permanent = true;
    description = "Òåïåðü òû ìîæåøü íîñèòü ýòó âîäó ñàì.";
};

func int dia_lefty_neveragain_condition() {
    if ((lefty_mission == log_running) && (self.aivar[19] == false)) {
        return 1;
    };
};

func void dia_lefty_neveragain_info() {
    ai_output(other, self, "DIA_Lefty_NeverAgain_15_00"); //Òåïåðü òû ìîæåøü íîñèòü ýòó âîäó ñàì.
    ai_output(self, other, "DIA_Lefty_NeverAgain_07_01"); //Î? Íàøåë ñåáå äåëî ïîëó÷øå?
    ai_output(self, other, "DIA_Lefty_NeverAgain_07_02"); //Äóìàþ, ñòîèò íàïîìíèòü òåáå, êòî èç íàñ ãëàâíûé!
    ai_stopprocessinfos(self);
    npc_settarget(self, other);
    ai_startstate(self, zs_attack, 1, "");
};

var int leftywasbeaten;

instance dia_lefty_perm(c_info) {
    npc = org_844_lefty /*7863*/;
    nr = 1;
    condition = dia_lefty_perm_condition;
    information = dia_lefty_perm_info;
    permanent = true;
    description = "Êàê äåëà, äðóã ìîé?";
};

func int dia_lefty_perm_condition() {
    if (self.aivar[19] == true) {
        return 1;
    };
};

func void dia_lefty_perm_info() {
    ai_output(other, self, "DIA_Lefty_PERM_15_00"); //Êàê äåëà, äðóã ìîé?
    ai_output(self, other, "DIA_Lefty_PERM_07_01"); //Îõ, ïàðåíü! ×òî òåáå íóæíî?
    if (!leftywasbeaten) {
        b_logentry(ch1_carrywater, ch1_carrywater_9);
        log_settopicstatus(ch1_carrywater, log_success);
        b_givexp(xp_leftyconfronted);
        leftywasbeaten = true;
    };
    info_clearchoices(dia_lefty_perm /*11142*/);
    info_addchoice(dia_lefty_perm /*11142*/, "Ïðîñòî õîòåë ïðîâåäàòü òåáÿ.", dia_lefty_perm_nothing);
    info_addchoice(dia_lefty_perm /*11142*/, "Ïîõîæå, êðåñòüÿíå õîòÿò ïèòü.", dia_lefty_perm_durstig);
    info_addchoice(dia_lefty_perm /*11142*/, "Ó ìåíÿ áûë ïàðøèâûé äåíü... ", dia_lefty_perm_aufsmaul);
};

func void dia_lefty_perm_aufsmaul() {
    ai_output(other, self, "DIA_Lefty_PERM_AufsMaul_15_00"); //Ó ìåíÿ áûë ïàðøèâûé äåíü, è ÿ ïðîñòî õî÷ó íåìíîãî ðàññëàáèòüñÿ... ïðîñòî ïîñòîÿòü òàê ìèíóòêó-äðóãóþ.
    b_say(self, other, "$YOUWANNAFOOLME");
    info_clearchoices(dia_lefty_perm /*11142*/);
    ai_stopprocessinfos(self);
    npc_settarget(self, other);
    ai_startstate(self, zs_attack, 1, "");
};

func void dia_lefty_perm_durstig() {
    ai_output(other, self, "DIA_Lefty_PERM_Durstig_15_00"); //Ïîõîæå, êðåñòüÿíå õîòÿò ïèòü.
    ai_output(self, other, "DIA_Lefty_PERM_Durstig_07_01"); //ß ðàçáåðóñü... Íå âîëíóéñÿ.
    ai_stopprocessinfos(self);
};

func void dia_lefty_perm_nothing() {
    ai_output(other, self, "DIA_Lefty_PERM_Nothing_15_00"); //Ïðîñòî õîòåë ïðîâåäàòü òåáÿ.
    ai_stopprocessinfos(self);
};

instance dia_845_exit(c_info) {
    npc = org_845_schlaeger /*7865*/;
    nr = 999;
    condition = dia_845_exit_condition;
    information = dia_845_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_845_exit_condition() {
    return 1;
};

func void dia_845_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_845_hello(c_info) {
    npc = org_845_schlaeger /*7865*/;
    nr = 1;
    condition = dia_845_hello_condition;
    information = dia_845_hello_info;
    description = "×åì òû çàíèìàåøüñÿ?";
};

func int dia_845_hello_condition() {
    return 1;
};

func void dia_845_hello_info() {
    var c_npc lefty;

    ai_output(other, self, "DIA_845_Hello_15_00"); //×åì òû çàíèìàåøüñÿ?
    ai_output(self, other, "DIA_845_Hello_13_01"); //ß ðàáîòàþ íà Ëîðäà.
    lefty = hlp_getnpc(org_844_lefty);
    if (!npc_isdead(lefty)) {
        ai_output(self, other, "DIA_845_Hello_13_02"); //Åñëè òåáå ÷òî-íèáóäü íóæíî, ñïðîñè Ëåôòè.
    };
};

instance dia_846_exit(c_info) {
    npc = org_846_schlaeger /*7867*/;
    nr = 999;
    condition = dia_846_exit_condition;
    information = dia_846_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_846_exit_condition() {
    return 1;
};

func void dia_846_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_846_hello(c_info) {
    npc = org_846_schlaeger /*7867*/;
    nr = 1;
    condition = dia_846_hello_condition;
    information = dia_846_hello_info;
    description = "×åì òû çàíèìàåøüñÿ?";
};

func int dia_846_hello_condition() {
    return 1;
};

func void dia_846_hello_info() {
    var c_npc lefty;

    ai_output(other, self, "DIA_846_Hello_15_00"); //×åì òû çàíèìàåøüñÿ?
    ai_output(self, other, "DIA_846_Hello_07_01"); //ß ðàáîòàþ íà Ëîðäà.
    lefty = hlp_getnpc(org_844_lefty);
    if (!npc_isdead(lefty)) {
        ai_output(self, other, "DIA_846_Hello_07_02"); //Åñëè òåáå ÷òî-íèáóäü íóæíî, ñïðîñè Ëåôòè.
    };
};

instance dia_wedge_exit(c_info) {
    npc = org_850_wedge /*7869*/;
    nr = 999;
    condition = dia_wedge_exit_condition;
    information = dia_wedge_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_wedge_exit_condition() {
    return true;
};

func void dia_wedge_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_wedge_psst(c_info) {
    npc = org_850_wedge /*7869*/;
    nr = 1;
    condition = dia_wedge_psst_condition;
    information = dia_wedge_psst_info;
    important = true;
};

func int dia_wedge_psst_condition() {
    if ((npc_getdisttonpc(hero, self) < 900) && wld_istime(8, 0, 23, 30)) {
        return true;
    };
};

func void dia_wedge_psst_info() {
    ai_output(self, other, "DIA_Wedge_Psst_05_00"); //Ø-øøø... ýé, òû!
    ai_output(other, self, "DIA_Wedge_Psst_15_01"); //Êòî?.. ß?
    ai_output(self, other, "DIA_Wedge_Psst_05_02"); //Òû, òû... Èäè ñþäà!
    ai_stopprocessinfos(self);
};

instance dia_wedge_hello(c_info) {
    npc = org_850_wedge /*7869*/;
    nr = 0;
    condition = dia_wedge_hello_condition;
    information = dia_wedge_hello_info;
    description = "È ÷òî òåáå îò ìåíÿ íóæíî?";
};

func int dia_wedge_hello_condition() {
    if (npc_knowsinfo(hero, dia_wedge_psst /*11165*/)) {
        return true;
    };
};

func void dia_wedge_hello_info() {
    ai_output(other, self, "DIA_Wedge_Hello_15_00"); //×òî òåáå íóæíî?
    ai_output(self, other, "DIA_Wedge_Hello_05_01"); //Òû íîâåíüêèé, äà? Ýòî ñðàçó çàìåòíî.
    ai_output(self, other, "DIA_Wedge_Hello_05_02"); //Òåáå ïðåäñòîèò ìíîãîìó íàó÷èòüñÿ. Åñëè õî÷åøü, ÿ ìîãó êîå î ÷åì ðàññêàçàòü.
    ai_output(self, other, "DIA_Wedge_Hello_05_03"); //È âñåãäà ñìîòðè, ñ êåì òû ðàçãîâàðèâàåøü. Ê ïðèìåðó, Áóò÷ - âîí òîò òèï ó êîñòðà... Äåðæèñü îò íåãî ïîäàëüøå!
};

instance dia_wedge_warnsofbutch(c_info) {
    npc = org_850_wedge /*7869*/;
    nr = 0;
    condition = dia_wedge_warnsofbutch_condition;
    information = dia_wedge_warnsofbutch_info;
    description = "À ÷òî òàêîãî ñ ýòèì Áóò÷åì?";
};

func int dia_wedge_warnsofbutch_condition() {
    if (npc_knowsinfo(hero, dia_wedge_hello /*11168*/)) {
        return true;
    };
};

func void dia_wedge_warnsofbutch_info() {
    ai_output(other, self, "DIA_Wedge_WarnsOfButch_15_00"); //À ÷òî òàêîãî ñ ýòèì Áóò÷åì?
    ai_output(self, other, "DIA_Wedge_WarnsOfButch_05_01"); //Ó íåãî åñòü äóðíàÿ ïðèâû÷êà áèòü âñåõ íîâè÷êîâ. Òàê ÷òî òåáå íå ñòîèò ïîïàäàòüñÿ åìó íà ãëàçà.
};

instance dia_wedge_lehrer(c_info) {
    npc = org_850_wedge /*7869*/;
    nr = 700;
    condition = dia_wedge_lehrer_condition;
    information = dia_wedge_lehrer_info;
    permanent = true;
    description = "×åìó òû ìîæåøü ìåíÿ íàó÷èòü?";
};

func int dia_wedge_lehrer_condition() {
    if (npc_knowsinfo(hero, dia_wedge_hello /*11168*/)) {
        return true;
    };
};

func void dia_wedge_lehrer_info() {
    if (log_wedgelearn == false) {
        log_createtopic(ge_teachernc, log_note);
        b_logentry(ge_teachernc, ge_teachernc_wedge);
        log_wedgelearn = true;
    };
    ai_output(other, self, "DIA_Wedge_Lehrer_15_00"); //×åìó òû ìîæåøü ìåíÿ íàó÷èòü?
    ai_output(self, other, "DIA_Wedge_Lehrer_05_01"); //Íó, à ÷òî òû õî÷åøü óçíàòü?
    info_clearchoices(dia_wedge_lehrer /*11174*/);
    info_addchoice(dia_wedge_lehrer /*11174*/, dialog_back, dia_wedge_lehrer_back);
    if (npc_gettalentskill(hero, npc_talent_pickpocket) == 1) {
        info_addchoice(dia_wedge_lehrer /*11174*/, b_buildlearnstring(name_learnpickpocket_2, lpcost_talent_pickpocket_2, 0), dia_wedge_lehrer_pickpocket2);
    };
    if (npc_gettalentskill(hero, npc_talent_pickpocket) == 0) {
        info_addchoice(dia_wedge_lehrer /*11174*/, b_buildlearnstring(name_learnpickpocket_1, lpcost_talent_pickpocket_1, 0), dia_wedge_lehrer_pickpocket);
    };
    if (npc_gettalentskill(hero, npc_talent_picklock) == 1) {
        info_addchoice(dia_wedge_lehrer /*11174*/, b_buildlearnstring(name_learnpicklock_2, lpcost_talent_picklock_2, 0), dia_wedge_lehrer_lockpick2);
    };
    if (npc_gettalentskill(hero, npc_talent_picklock) == 0) {
        info_addchoice(dia_wedge_lehrer /*11174*/, b_buildlearnstring(name_learnpicklock_1, lpcost_talent_picklock_1, 0), dia_wedge_lehrer_lockpick);
    };
    if (npc_gettalentskill(hero, npc_talent_sneak) == 0) {
        info_addchoice(dia_wedge_lehrer /*11174*/, b_buildlearnstring(name_learnsneak, lpcost_talent_sneak, 0), dia_wedge_lehrer_schleichen);
    };
};

func void dia_wedge_lehrer_schleichen() {
    ai_output(other, self, "DIA_Wedge_Lehrer_Schleichen_15_00"); //ß õî÷ó íàó÷èòüñÿ ïåðåäâèãàòüñÿ áåç øóìà.
    if (b_giveskill(other, npc_talent_sneak, 1, lpcost_talent_sneak)) {
        ai_output(self, other, "DIA_Wedge_Lehrer_Schleichen_05_01"); //Òóò ãëàâíîå - ñîõðàíÿòü ðàâíîâåñèå. È åùå òåáå íóæíî íàó÷èòüñÿ êîíòðîëèðîâàòü äûõàíèå.
        ai_output(self, other, "DIA_Wedge_Lehrer_Schleichen_05_02"); //Âûáèðàåøü ïðàâèëüíóþ ïîçó, è íèêòî íå óñëûøèò òâîèõ øàãîâ.
    };
};

func void dia_wedge_lehrer_lockpick() {
    ai_output(other, self, "DIA_Wedge_Lehrer_Lockpick_15_00"); //Êàê íàó÷èòüñÿ ðàáîòàòü ñ îòìû÷êîé?
    if (b_giveskill(other, npc_talent_picklock, 1, lpcost_talent_picklock_1)) {
        ai_output(self, other, "DIA_Wedge_Lehrer_Lockpick_05_01"); //Î÷åíü ïîëåçíîå óìåíèå, âåðíî? Ýòî íå òàê óæ ñëîæíî äëÿ íîâè÷êà.
        ai_output(self, other, "DIA_Wedge_Lehrer_Lockpick_05_02"); //Ïðåæäå âñåãî íóæíî ñëåäèòü çà òåì, ÷òîáû íå ñëîìàòü îòìû÷êó.
        ai_output(self, other, "DIA_Wedge_Lehrer_Lockpick_05_03"); //Â áóäóùåì, êîãäà ó òåáÿ áóäåò ïîáîëüøå òåðïåíèÿ è îïûòà, êó÷à îòìû÷åê òåáå ïðîñòî íå ïîíàäîáèòñÿ.
    };
};

func void dia_wedge_lehrer_lockpick2() {
    ai_output(other, self, "DIA_Wedge_Lehrer_Lockpick2_15_00"); //Ðàáîòà âçëîìùèêà ìíå ïî äóøå. ß õî÷ó ñòàòü ýêñïåðòîì!
    if (b_giveskill(other, npc_talent_picklock, 2, lpcost_talent_picklock_2)) {
        ai_output(self, other, "DIA_Wedge_Lehrer_Lockpick2_05_01"); //Êîãäà ïîäíàáåðåøüñÿ îïûòà, íà÷íåøü ÷óâñòâîâàòü ìîìåíò, êîãäà îòìû÷êà ãîòîâà âîò-âîò ñëîìàòüñÿ. Ó íåå òîãäà çâóê ìåíÿåòñÿ!
        ai_output(self, other, "DIA_Wedge_Lehrer_Lockpick2_05_02"); //Äóìàþ, ó òåáÿ ïîëó÷èòñÿ. Ïðèó÷àé ñåáÿ âñëóøèâàòüñÿ â òèõîå ïîùåëêèâàíèå çàìêà, è â áóäóùåì òû ñáåðåæåøü ñåáå êó÷ó îòìû÷åê.
        ai_output(self, other, "DIA_Wedge_Lehrer_Lockpick2_05_03"); //Ó íàñòîÿùåãî ïðîôåññèîíàëà âñåãäà åñòü øàíñ îòêðûòü ñóíäóê, íå èñïîðòèâ ïðè ýòîì èíñòðóìåíò.
    };
};

func void dia_wedge_lehrer_pickpocket() {
    ai_output(other, self, "DIA_Wedge_Lehrer_PICKPOCKET_15_00"); //ß õî÷ó ñòàòü îïûòíûì êàðìàííèêîì.
    if (npc_gettalentskill(other, npc_talent_sneak) == 1) {
        if (b_giveskill(other, npc_talent_pickpocket, 1, lpcost_talent_pickpocket_1)) {
            ai_output(self, other, "DIA_Wedge_Lehrer_PICKPOCKET_05_01"); //Ñîáèðàåøüñÿ èçáàâëÿòü íàðîä îò åãî ñáåðåæåíèé? Õîðîøî.
            ai_output(self, other, "DIA_Wedge_Lehrer_PICKPOCKET_05_02"); //ß ïîìîãó óëó÷øèòü òâîè íàâûêè, íî øàíñ, ÷òî òåáÿ ïîéìàþò, âñå ðàâíî âåëèê.
            ai_output(self, other, "DIA_Wedge_Lehrer_PICKPOCKET_05_03"); //Ðèñêîâàòü ñòîèò ëèøü â òîì ñëó÷àå, êîãäà êðîìå òâîåé æåðòâû íèêîãî íåò ïîáëèçîñòè.
            ai_output(self, other, "DIA_Wedge_Lehrer_PICKPOCKET_05_04"); //Òîëüêî ýêñïåðò ìîæåò øàðèòü ïî êàðìàíàì òàê, ÷òî ÷åëîâåê íè÷åãî íå çàìåòèò.
        };
    }
    else {
        ai_output(self, other, "DIA_Wedge_lehrer_Pickpocket_05_05"); //Çàáóäü îá ýòîì! Òû íèêîãäà íå ñòàíåøü îïûòíûì âîðîì, ïîêà íå íàó÷èøüñÿ áåñøóìíî ïåðåäâèãàòüñÿ.
    };
};

func void dia_wedge_lehrer_pickpocket2() {
    ai_output(other, self, "DIA_Wedge_Lehrer_Pickpocket2_15_00"); //Ðàáîòà êàðìàííèêà ìíå ïî äóøå. ß õî÷ó ñòàòü ýêñïåðòîì!
    if (b_giveskill(other, npc_talent_pickpocket, 2, lpcost_talent_pickpocket_2)) {
        ai_output(self, other, "DIA_Wedge_Lehrer_Pickpocket2_05_01"); //Äóìàþ, òû óæå äîñòàòî÷íî îïûòåí, ÷òîáû ïîñòè÷ü ïîñëåäíèå òîíêîñòè ýòîãî ðåìåñëà.
        ai_output(self, other, "DIA_Wedge_Lehrer_Pickpocket2_05_02"); //Íî òû äîëæåí çíàòü, ÷òî âðåìÿ îò âðåìåíè ïîïàäàþòñÿ äàæå ëó÷øèå èç ëó÷øèõ.
        ai_output(self, other, "DIA_Wedge_Lehrer_Pickpocket2_05_03"); //Ñ÷àñòëèâî îñòàâàòüñÿ!
    };
};

func void dia_wedge_lehrer_back() {
    info_clearchoices(dia_wedge_lehrer /*11174*/);
};

instance dia_butch_exit(c_info) {
    npc = org_851_butch /*7871*/;
    nr = 999;
    condition = dia_butch_exit_condition;
    information = dia_butch_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_butch_exit_condition() {
    return true;
};

func void dia_butch_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_butch_hello(c_info) {
    npc = org_851_butch /*7871*/;
    nr = 1;
    condition = dia_butch_hello_condition;
    information = dia_butch_hello_info;
    description = "Ïðèâåò. Òû êòî?";
};

func int dia_butch_hello_condition() {
    return 1;
};

func void dia_butch_hello_info() {
    ai_output(other, self, "DIA_Butch_Hello_15_00"); //Ïðèâåò. Òû êòî?
    ai_output(self, other, "DIA_Butch_Hello_13_01"); //Íå òâîåãî óìà äåëî! Íå íðàâèòñÿ ìíå òâîÿ ðîæà!
    ai_stopprocessinfos(self);
};

instance dia_org_855_wolf_exit(c_info) {
    npc = org_855_wolf /*7873*/;
    nr = 999;
    condition = dia_org_855_wolf_exit_condition;
    information = dia_org_855_wolf_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_org_855_wolf_exit_condition() {
    return 1;
};

func void dia_org_855_wolf_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_wolf_hello(c_info) {
    npc = org_855_wolf /*7873*/;
    nr = 1;
    condition = dia_wolf_hello_condition;
    information = dia_wolf_hello_info;
    description = "Êàê òåáÿ çîâóò?";
};

func int dia_wolf_hello_condition() {
    return 1;
};

func void dia_wolf_hello_info() {
    ai_output(other, self, "DIA_Wolf_Hello_15_00"); //Êòî òû?
    ai_output(self, other, "DIA_Wolf_Hello_09_01"); //ß - Âîëê. ß äåëàþ äîñïåõè.
    log_createtopic(ge_tradernc, log_note);
    b_logentry(ge_tradernc, ge_tradernc_6);
};

instance dia_wolf_greetorg(c_info) {
    npc = org_855_wolf /*7873*/;
    nr = 1;
    condition = dia_wolf_greetorg_condition;
    information = dia_wolf_greetorg_info;
    important = true;
};

func int dia_wolf_greetorg_condition() {
    if (npc_gettrueguild(hero) == gil_org) {
        return true;
    };
};

func void dia_wolf_greetorg_info() {
    ai_output(self, other, "DIA_Wolf_GreetORG_09_00"); //Ýé! Òåïåðü òû îäèí èç íàñ, ìàëûø!
};

instance org_855_wolf_trade(c_info) {
    npc = org_855_wolf /*7873*/;
    nr = 800;
    condition = org_855_wolf_trade_condition;
    information = org_855_wolf_trade_info;
    permanent = true;
    trade = true;
    description = dialog_trade;
};

func int org_855_wolf_trade_condition() {
    return 1;
};

func void org_855_wolf_trade_info() {
    ai_output(other, self, "Org_855_Wolf_TRADE_15_00"); //Òû áåðåøü â îïëàòó ÷òî-íèáóäü, ïîìèìî ðóäû?
    ai_output(self, other, "Org_855_Wolf_TRADE_09_01"); //ß ïîêóïàþ ó îõîòíèêîâ ìåõà è øêóðû. Åñëè ó òåáÿ åñòü ÷òî-íèáóäü, ïîêàæè.
};

instance org_855_wolf_wherehunter(c_info) {
    npc = org_855_wolf /*7873*/;
    nr = 900;
    condition = org_855_wolf_wherehunter_condition;
    information = org_855_wolf_wherehunter_info;
    permanent = true;
    description = "Êàê äîáûâàþòñÿ ýòè ñàìûå ìåõà è øêóðû?";
};

func int org_855_wolf_wherehunter_condition() {
    return 1;
};

func void org_855_wolf_wherehunter_info() {
    ai_output(other, self, "Org_855_Wolf_WhereHunter_15_00"); //Êàê äîáûâàþòñÿ ýòè ñàìûå ìåõà è øêóðû?
    ai_output(self, other, "Org_855_Wolf_WhereHunter_09_01"); //Ïî ïóòè â Íîâûé Ëàãåðü òû âñòðåòèøü Ýéäàíà. Îí ìîæåò ïîêàçàòü òåáå, êàê ñíèìàòü øêóðû ñ óáèòûõ æèâîòíûõ.
    ai_output(self, other, "Org_855_Wolf_WhereHunter_09_02"); //Ðýòôîðä è Äðàêñ áðîäÿò ê ñåâåðó îò Ñòàðîãî Ëàãåðÿ. Ýòî ïî ïóòè ê òîðãó.
};

instance dia_wolf_sellarmor(c_info) {
    npc = org_855_wolf /*7873*/;
    nr = 700;
    condition = dia_wolf_sellarmor_condition;
    information = dia_wolf_sellarmor_info;
    permanent = true;
    description = "Ìíå íóæíû õîðîøèå äîñïåõè.";
};

func int dia_wolf_sellarmor_condition() {
    if (npc_knowsinfo(hero, dia_wolf_hello /*11192*/) && (!npc_knowsinfo(hero, info_wolf_armorfinished /*11246*/))) {
        return 1;
    };
};

func void dia_wolf_sellarmor_info() {
    ai_output(other, self, "DIA_Wolf_SellArmor_15_00"); //Ìíå íóæíû õîðîøèå äîñïåõè.
    if ((npc_gettrueguild(other) == gil_org) || (npc_gettrueguild(other) == gil_sld)) {
        ai_output(self, other, "DIA_Wolf_SellArmor_09_01"); //Òû òåïåðü îäèí èç íàñ, è ÿ ìîãó ïðîäàòü òåáå âñå, ÷òî ïîæåëàåøü.
        info_clearchoices(dia_wolf_sellarmor /*11204*/);
        info_addchoice(dia_wolf_sellarmor /*11204*/, dialog_back, dia_wolf_sellarmor_back);
        info_addchoice(dia_wolf_sellarmor /*11204*/, b_buildbuyarmorstring(name_wolfbandits, value_org_armor_m), dia_wolf_sellarmor_m);
        info_addchoice(dia_wolf_sellarmor /*11204*/, b_buildbuyarmorstring(name_wolfheavybandits, value_org_armor_h), dia_wolf_sellarmor_h);
    }
    else {
        ai_output(self, other, "DIA_Wolf_SellArmor_WRONGGUILD_09_00"); //Ïðîñòè, ïàðåíü, ÿ íå ìîãó íè÷åãî òåáå ïðîäàòü. Ëàðñ óáüåò ìåíÿ, åñëè óçíàåò, ÷òî ÿ ïðîäàë äîñïåõè ÷óæàêó.
    };
};

func void dia_wolf_sellarmor_back() {
    info_clearchoices(dia_wolf_sellarmor /*11204*/);
};

func void dia_wolf_sellarmor_m() {
    ai_output(other, self, "DIA_Wolf_SellArmor_M_15_01"); //Ìíå íóæíû ñðåäíèå äîñïåõè.
    if (npc_hasitems(hero, itminugget) < value_org_armor_m) {
        ai_output(self, other, "DIA_Wolf_SellArmor_M_09_02"); //Íåò ðóäû - íåò äîñïåõîâ.
    }
    else {
        ai_output(self, other, "DIA_Wolf_SellArmor_M_09_03"); //Ýòî íàäåæíûå äîñïåõè. Êîíå÷íî, îí íå òàê õîðîø, êàê òîò, ÷òî ñåé÷àñ íà ìíå, íî îí íàäåæíî çàùèòèò òåáÿ.
        b_giveinvitems(hero, self, itminugget /*4517*/, value_org_armor_m);
        createinvitem(hero, org_armor_m);
        createinvitem(self, itamarrow);
        b_giveinvitems(self, hero, itamarrow /*4894*/, 1);
        npc_removeinvitem(hero, itamarrow /*4894*/);
    };
};

func void dia_wolf_sellarmor_h() {
    ai_output(other, self, "DIA_Wolf_SellArmor_H_15_01"); //Òû ìîæåøü ïðîäàòü ìíå òÿæåëûå äîñïåõè?
    if (npc_hasitems(hero, itminugget) < value_org_armor_h) {
        ai_output(self, other, "DIA_Wolf_SellArmor_H_09_02"); //Íåò ðóäû - íåò äîñïåõîâ.
    }
    else {
        ai_output(self, other, "DIA_Wolf_SellArmor_H_09_03"); //Ýòè äîñïåõè çàùèòÿò òåáÿ îò ëþáîé îïàñíîñòè! ß ñàì íîøó òî÷íî òàêèå æå è, êàê âèäèøü, äî ñèõ ïîð åùå æèâ - âî ìíîãîì áëàãîäàðÿ ýòîé áðîíå.
        b_giveinvitems(hero, self, itminugget /*4517*/, value_org_armor_h);
        createinvitem(hero, org_armor_h);
        createinvitem(self, itamarrow);
        b_giveinvitems(self, hero, itamarrow /*4894*/, 1);
        npc_removeinvitem(hero, itamarrow /*4894*/);
    };
};

instance org_855_wolf_trainoffer(c_info) {
    npc = org_855_wolf /*7873*/;
    nr = 100;
    condition = org_855_wolf_trainoffer_condition;
    information = org_855_wolf_trainoffer_info;
    description = "ß õî÷ó íàó÷èòüñÿ ñòðåëÿòü èç ëóêà.";
};

func int org_855_wolf_trainoffer_condition() {
    if (npc_gettalentskill(hero, npc_talent_bow) != 2) {
        return true;
    };
};

func void org_855_wolf_trainoffer_info() {
    ai_output(other, self, "ORG_855_Wolf_TRAINOFFER_Info_15_01"); //ß õî÷ó íàó÷èòüñÿ ñòðåëÿòü èç ëóêà.
    ai_output(self, other, "ORG_855_Wolf_TRAINOFFER_Info_09_02"); //ß ìîãó íàó÷èòü òåáÿ, íî íå çàäàðîì. Â êîíöå êîíöîâ, ìíå òîæå íóæíî åñòü.
    ai_output(other, self, "ORG_855_Wolf_TRAINOFFER_Info_15_03"); //Ñêîëüêî?
    ai_output(self, other, "ORG_855_Wolf_TRAINOFFER_Info_09_04"); //Ëþáîé óðîê îáîéäåòñÿ òåáå â 50 êóñêîâ ðóäû. ß íå òîðãóþñü.
    log_createtopic(ge_teachernc, log_note);
    b_logentry(ge_teachernc, ge_teachernc_wolf1);
};

instance org_855_wolf_train(c_info) {
    npc = org_855_wolf /*7873*/;
    nr = 100;
    condition = org_855_wolf_train_condition;
    information = org_855_wolf_train_info;
    description = b_buildlearnstring(name_learnbow_1, lpcost_talent_bow_1, 50);
};

func int org_855_wolf_train_condition() {
    if (npc_knowsinfo(hero, org_855_wolf_trainoffer /*11210*/) && (npc_gettalentskill(hero, npc_talent_bow) == 0)) {
        return true;
    };
};

func void org_855_wolf_train_info() {
    ai_output(other, self, "ORG_855_Wolf_TRAIN_Info_15_01"); //Íàó÷è ìåíÿ ñòðåëÿòü èç ëóêà.
    if (npc_hasitems(hero, itminugget) >= 50) {
        if (b_giveskill(hero, npc_talent_bow, 1, lpcost_talent_bow_1)) {
            ai_output(self, other, "ORG_855_Wolf_TRAIN_Info_09_02"); //Òî÷íîñòü ñòðåëüáû çàâèñèò îò òâîåé ëîâêîñòè. ×åì âûøå ëîâêîñòü - òåì òî÷íåå ñòðåëû ëåòÿò â öåëü.
            ai_output(self, other, "ORG_855_Wolf_TRAIN_Info_09_03"); //Íó à òâîé íàâûê îïðåäåëÿåò ðàññòîÿíèå, ñ êîòîðîãî òû ñìîæåøü ïîðàçèòü ìèøåíü. Äëÿ òîãî ÷òîáû ñòàòü õîðîøèì ëó÷íèêîì, òû äîëæåí ðàçâèâàòü è òî, è äðóãîå.
            b_giveinvitems(hero, self, itminugget /*4517*/, 50);
        };
    };
};

instance org_855_wolf_trainagain(c_info) {
    npc = org_855_wolf /*7873*/;
    nr = 100;
    condition = org_855_wolf_trainagain_condition;
    information = org_855_wolf_trainagain_info;
    description = b_buildlearnstring(name_learnbow_2, lpcost_talent_bow_2, 50);
};

func int org_855_wolf_trainagain_condition() {
    if (npc_knowsinfo(hero, org_855_wolf_trainoffer /*11210*/) && (npc_gettalentskill(hero, npc_talent_bow) == 1)) {
        return true;
    };
};

func void org_855_wolf_trainagain_info() {
    ai_output(other, self, "ORG_855_Wolf_TRAINAGAIN_Info_15_01"); //ß õî÷ó ïîâûñèòü íàâûê âëàäåíèÿ ëóêîì.
    if (npc_hasitems(hero, itminugget) >= 50) {
        if (b_giveskill(hero, npc_talent_bow, 2, lpcost_talent_bow_2)) {
            ai_output(self, other, "ORG_855_Wolf_TRAINAGAIN_Info_09_02"); //Òåáÿ óæå ìîæíî íàçâàòü õîðîøèì îõîòíèêîì. Ïðèøëî âðåìÿ íàó÷èòüñÿ òîìó, ÷åãî òû åùå íå çíàåøü.
            ai_output(self, other, "ORG_855_Wolf_TRAINAGAIN_Info_09_03"); //Äëÿ òîãî ÷òîáû ñòàòü õîðîøèì ëó÷íèêîì, îäíîé ëîâêîñòè ìàëî. Âàæíî ïîíÿòü, èç ÷åãî ñêëàäûâàåòñÿ õîðîøèé âûñòðåë.
            ai_output(self, other, "ORG_855_Wolf_TRAINAGAIN_Info_09_04"); //Òóò ìíîãîå ïðèõîäèòñÿ ó÷èòûâàòü: çîðêèé âçãëÿä è íàòÿæåíèå òåòèâû, ïîëåò ñòðåëû è ðàññòîÿíèå äî ìèøåíè. È ãëàâíîå, âñåãäà áûòü íà÷åêó!
            ai_output(self, other, "ORG_855_Wolf_TRAINAGAIN_Info_09_05"); //Òû óæå î÷åíü õîðîøî îñâîèë òåõíèêó. Îñòàëîñü íàéòè ïðèìåíåíèå íîâûì çíàíèÿì è íàâûêàì.
            b_giveinvitems(hero, self, itminugget /*4517*/, 50);
        };
    };
};

instance org_855_wolf_teach(c_info) {
    npc = org_855_wolf /*7873*/;
    nr = 100;
    condition = org_855_wolf_teach_condition;
    information = org_855_wolf_teach_info;
    permanent = true;
    description = "Òû ìîæåøü ÷åìó-íèáóäü íàó÷èòü ìåíÿ?";
};

func int org_855_wolf_teach_condition() {
    if (c_npcbelongstonewcamp(other)) {
        return true;
    };
};

func void org_855_wolf_teach_info() {
    ai_output(other, self, "ORG_855_Wolf_Teach_15_00"); //Òû ìîæåøü ìåíÿ ÷åìó-íèáóäü íàó÷èòü?
    ai_output(self, other, "ORG_855_Wolf_Teach_09_01"); //Óñïåõ îõîòû âî ìíîãîì çàâèñèò îò ëîâêîñòè.
    if (log_wolftrain == false) {
        log_createtopic(ge_teachernc, log_note);
        b_logentry(ge_teachernc, ge_teachernc_wolf2);
        log_wolftrain = true;
    };
    info_clearchoices(org_855_wolf_teach /*11219*/);
    info_addchoice(org_855_wolf_teach /*11219*/, dialog_back, org_855_wolf_teach_back);
    info_addchoice(org_855_wolf_teach /*11219*/, b_buildlearnstring(name_learndexterity_5, 5 * lpcost_attribute_dexterity, 0), org_855_wolf_teach_dex_5);
    info_addchoice(org_855_wolf_teach /*11219*/, b_buildlearnstring(name_learndexterity_1, lpcost_attribute_dexterity, 0), org_855_wolf_teach_dex_1);
};

func void org_855_wolf_teach_back() {
    info_clearchoices(org_855_wolf_teach /*11219*/);
};

func void org_855_wolf_teach_dex_1() {
    b_buyattributepoints(other, atr_dexterity, lpcost_attribute_dexterity);
    info_clearchoices(org_855_wolf_teach /*11219*/);
    info_addchoice(org_855_wolf_teach /*11219*/, dialog_back, org_855_wolf_teach_back);
    info_addchoice(org_855_wolf_teach /*11219*/, b_buildlearnstring(name_learndexterity_5, 5 * lpcost_attribute_dexterity, 0), org_855_wolf_teach_dex_5);
    info_addchoice(org_855_wolf_teach /*11219*/, b_buildlearnstring(name_learndexterity_1, lpcost_attribute_dexterity, 0), org_855_wolf_teach_dex_1);
};

func void org_855_wolf_teach_dex_5() {
    b_buyattributepoints(other, atr_dexterity, 5 * lpcost_attribute_dexterity);
    info_clearchoices(org_855_wolf_teach /*11219*/);
    info_addchoice(org_855_wolf_teach /*11219*/, dialog_back, org_855_wolf_teach_back);
    info_addchoice(org_855_wolf_teach /*11219*/, b_buildlearnstring(name_learndexterity_5, 5 * lpcost_attribute_dexterity, 0), org_855_wolf_teach_dex_5);
    info_addchoice(org_855_wolf_teach /*11219*/, b_buildlearnstring(name_learndexterity_1, lpcost_attribute_dexterity, 0), org_855_wolf_teach_dex_1);
};

instance info_wolf_good(c_info) {
    npc = org_855_wolf /*7873*/;
    nr = 0;
    condition = info_wolf_good_condition;
    information = info_wolf_good_info;
    description = "Ãîðí ñêàçàë, ÷òî òû õîòåë ñðî÷íî ïîãîâîðèòü ñî ìíîé.";
};

func int info_wolf_good_condition() {
    if (gorn_gotowolf) {
        return true;
    };
};

func void info_wolf_good_info() {
    ai_output(hero, self, "Info_Wolf_GOOD_15_01"); //Ãîðí ñêàçàë, ÷òî òû õîòåë ñðî÷íî ïîãîâîðèòü ñî ìíîé.
    ai_output(self, hero, "Info_Wolf_GOOD_09_02"); //Ðàä, ÷òî òû çàáåæàë, ïðåæäå ÷åì óéòè.
    if (!npc_knowsinfo(hero, info_gorn_fmcentrance /*11498*/)) {
        ai_output(hero, self, "Info_Wolf_GOOD_15_03"); //Ïðåæäå ÷åì óéòè êóäà?
        ai_output(self, hero, "Info_Wolf_GOOD_09_04"); //Â íàøó Íå-Òàêóþ-Óæ-Ñâîáîäíóþ Øàõòó.
    };
};

instance info_wolf_speak(c_info) {
    npc = org_855_wolf /*7873*/;
    nr = 0;
    condition = info_wolf_speak_condition;
    information = info_wolf_speak_info;
    description = "Êàê æèçíü?";
};

func int info_wolf_speak_condition() {
    if (npc_knowsinfo(hero, info_wolf_good /*11225*/)) {
        return true;
    };
};

func void info_wolf_speak_info() {
    ai_output(hero, self, "Info_Wolf_SPEAK_15_01"); //À â ÷åì äåëî?
    ai_output(self, hero, "Info_Wolf_SPEAK_09_02"); //Äà, ó ìåíÿ ïîÿâèëàñü èäåÿ, êàê ñäåëàòü àáñîëþòíî íîâûå äîñïåõè.
    ai_output(hero, self, "Info_Wolf_SPEAK_15_03"); //Äà, ó ìåíÿ ïîÿâèëàñü èäåÿ, êàê ñäåëàòü àáñîëþòíî íîâûå äîñïåõè.
    ai_output(self, hero, "Info_Wolf_SPEAK_09_04"); //Ïëàñòèíû ïàíöèðÿ ïîëçóíîâ - ñàìûé ïðî÷íûé ìàòåðèàë èç âñåõ, ÷òî ìíå ïðèõîäèëîñü âèäåòü.
    ai_output(self, hero, "Info_Wolf_SPEAK_09_05"); //ß, ðàçóìååòñÿ, ãîâîðþ íå î òåõ ìàëåíüêèõ áåççàùèòíûõ òâàðÿõ, ÷òî îáèòàþò â øàõòå ó Ãîìåçà...
    ai_output(self, hero, "Info_Wolf_SPEAK_09_06"); //... ÍÅÅÅÒ. Äðóãèå. Êóäà áîëåå îïàñíûå, â íàøåé øàõòå.
    ai_output(self, hero, "Info_Wolf_SPEAK_09_07"); //Ïàíöèðè ó ýòèõ òâàðåé ïðàêòè÷åñêè íåïðîáèâàåìûå!
    ai_output(self, hero, "Info_Wolf_SPEAK_09_08"); //Åñëè áû òû ïðèíåñ ìíå íåñêîëüêî òàêèõ ïëàñòèíîê, ÿ áû ñäåëàë èç íèõ äîñïåõè.
};

instance info_wolf_skin(c_info) {
    npc = org_855_wolf /*7873*/;
    nr = 0;
    condition = info_wolf_skin_condition;
    information = info_wolf_skin_info;
    description = "Êàê ñíÿòü ýòè ïëàñòèíû ñ ïîëçóíîâ?";
};

func int info_wolf_skin_condition() {
    if (npc_knowsinfo(hero, info_wolf_speak /*11228*/)) {
        return true;
    };
};

func void info_wolf_skin_info() {
    ai_output(hero, self, "Info_Wolf_SKIN_15_01"); //Êàê ñíÿòü ýòè ïëàñòèíû ñ ïîëçóíîâ?
    ai_output(self, hero, "Info_Wolf_SKIN_09_02"); //Ýòî äîâîëüíî ëåãêî. ×åðíûå ïëàñòèíû êðåïÿòñÿ ê òåëó òîëüêî ïî êðàÿì.
    ai_output(self, hero, "Info_Wolf_SKIN_09_03"); //Áåðåøü ëþáîé îñòðûé êëèíîê è âûðåçàåøü ïëàñòèíó ïî êîíòóðó.
    ai_output(hero, self, "Info_Wolf_SKIN_15_04"); //Ëàäíî, ïîíÿë! Ïîéäó îõîòèòüñÿ íà ïîëçóíîâ!
    knows_getmcplates = true;
    printscreen(print_learn_crawlerplates, -1, -1, font_old_20, 3);
    log_createtopic(ch4_mcplatearmor, log_mission);
    log_settopicstatus(ch4_mcplatearmor, log_running);
    b_logentry(ch4_mcplatearmor, ch4_mcplatearmor_1);
    log_createtopic(ge_animaltrophies, log_note);
    b_logentry(ge_animaltrophies, ge_animaltrophies_crawlerplates);
    ai_stopprocessinfos(self);
};

instance info_wolf_profit(c_info) {
    npc = org_855_wolf /*7873*/;
    nr = 0;
    condition = info_wolf_profit_condition;
    information = info_wolf_profit_info;
    description = "Íî òîëüêî íå ãîâîðè, ÷òî òû äåëàåøü äîñïåõè çàäàðîì!";
};

func int info_wolf_profit_condition() {
    if (npc_knowsinfo(hero, info_wolf_speak /*11228*/)) {
        return true;
    };
};

func void info_wolf_profit_info() {
    ai_output(hero, self, "Info_Wolf_PROFIT_15_01"); //Íî òîëüêî íå ãîâîðè, ÷òî òû ñîáèðàåøüñÿ ñäåëàòü äëÿ ìåíÿ íîâûå äîñïåõè çàäàðîì!
    ai_output(self, hero, "Info_Wolf_PROFIT_09_02"); //Íå ñîâñåì... Åñëè ìíå óäàñòñÿ ñäåëàòü èç ýòèõ ïëàñòèí õîðîøèå äîñïåõè, ÿ... î÷åíü ñêîðî... î÷åíü ìíîãî... ëàäíî, çàáóäü îá ýòîì!
};

instance info_wolf_mcplatesfew(c_info) {
    npc = org_855_wolf /*7873*/;
    nr = 0;
    condition = info_wolf_mcplatesfew_condition;
    information = info_wolf_mcplatesfew_info;
    description = "ß äîáûë íåñêîëüêî ïëàñòèí!";
};

func int info_wolf_mcplatesfew_condition() {
    if (((knows_getmcplates && (!mcplatesdelivered)) && (npc_hasitems(hero, itat_crawler_02) > 0)) && (npc_hasitems(hero, itat_crawler_02) < 15)) {
        return true;
    };
};

func void info_wolf_mcplatesfew_info() {
    ai_output(hero, self, "Info_Wolf_MCPLATESFEW_15_01"); //ß äîáûë íåñêîëüêî ïëàñòèí!
    ai_output(self, hero, "Info_Wolf_MCPLATESFEW_09_02"); //Ýòîãî íåäîñòàòî÷íî! Èõ íå õâàòèò íà äîñïåõè.
    ai_output(self, hero, "Info_Wolf_MCPLATESFEW_09_03"); //Äîáóäü åùå íåñêîëüêî ïëàñòèí!
};

instance info_wolf_mcplatesenough(c_info) {
    npc = org_855_wolf /*7873*/;
    nr = 0;
    condition = info_wolf_mcplatesenough_condition;
    information = info_wolf_mcplatesenough_info;
    description = "ß äîáûë öåëóþ êó÷ó ýòèõ ïëàñòèí!";
};

func int info_wolf_mcplatesenough_condition() {
    if (knows_getmcplates && (npc_hasitems(hero, itat_crawler_02) >= 15)) {
        return true;
    };
};

func void info_wolf_mcplatesenough_info() {
    ai_output(hero, self, "Info_Wolf_MCPLATESENOUGH_15_01"); //ß äîáûë öåëóþ êó÷ó ýòèõ ïëàñòèí!
    ai_output(self, hero, "Info_Wolf_MCPLATESENOUGH_09_02"); //Íåâåðîÿòíî! ß íåìåäëåííî ïðèñòóïàþ ê ðàáîòå!
    ai_output(hero, self, "Info_Wolf_MCPLATESENOUGH_15_03"); //Ñêîëüêî âðåìåíè ýòî çàéìåò?
    ai_output(self, hero, "Info_Wolf_MCPLATESENOUGH_09_04"); //Íå èìåþ íè ìàëåéøåãî ïîíÿòèÿ. Ýòî æå íîâîå äåëî, ïðèÿòåëü!
    ai_output(self, hero, "Info_Wolf_MCPLATESENOUGH_09_05"); //Çàáåãàé ñþäà, êîãäà áóäåøü ïîáëèçîñòè!
    mcplatesdelivered = true;
    b_logentry(ch4_mcplatearmor, ch4_mcplatearmor_2);
    b_givexp(xp_deliveredmcplates);
    b_giveinvitems(hero, self, itat_crawler_02 /*4080*/, 15);
    ai_stopprocessinfos(self);
};

instance info_wolf_armorinwork(c_info) {
    npc = org_855_wolf /*7873*/;
    nr = 0;
    condition = info_wolf_armorinwork_condition;
    information = info_wolf_armorinwork_info;
    permanent = true;
    description = "Êàê ïðîäâèãàåòñÿ èçãîòîâëåíèå äîñïåõîâ?";
};

func int info_wolf_armorinwork_condition() {
    if ((mcplatesdelivered == true) && (freemineorc_lookingulumulu != log_success)) {
        return true;
    };
};

func void info_wolf_armorinwork_info() {
    ai_output(hero, self, "Info_Wolf_ARMORINWORK_15_01"); //Êàê ïðîäâèãàåòñÿ èçãîòîâëåíèå äîñïåõîâ?
    ai_output(self, hero, "Info_Wolf_ARMORINWORK_09_02"); //Ýòî çàéìåò åùå íåìíîãî âðåìåíè, äðóæèùå! Ýòè ïëàñòèíû ñëèøêîì ïðî÷íûå. ß äî ñèõ ïîð íå ïðèäóìàë, êàê ñêðåïèòü èõ âìåñòå.
    ai_output(self, hero, "Info_Wolf_ARMORINWORK_09_03"); //Äàé ìíå åùå íåìíîãî âðåìåíè, è ÿ ÷òî-íèáóäü îáÿçàòåëüíî ïðèäóìàþ!
    ai_stopprocessinfos(self);
};

instance info_wolf_armorfinished(c_info) {
    npc = org_855_wolf /*7873*/;
    nr = 0;
    condition = info_wolf_armorfinished_condition;
    information = info_wolf_armorfinished_info;
    description = "Êàê ïðîäâèãàåòñÿ èçãîòîâëåíèå äîñïåõîâ?";
};

func int info_wolf_armorfinished_condition() {
    if ((mcplatesdelivered == true) && (freemineorc_lookingulumulu == log_success)) {
        return true;
    };
};

func void info_wolf_armorfinished_info() {
    ai_output(hero, self, "Info_Wolf_ARMORFINISHED_15_01"); //Êàê ïðîäâèãàåòñÿ èçãîòîâëåíèå äîñïåõîâ?
    ai_output(self, hero, "Info_Wolf_ARMORFINISHED_09_02"); //ß íàêîíåö-òî íàøåë ñïîñîá, êàê ñêðåïèòü ïëàñòèíû!
    ai_output(hero, self, "Info_Wolf_ARMORFINISHED_15_03"); //Èíûìè ñëîâàìè - äîñïåõè ãîòîâû?
    ai_output(self, hero, "Info_Wolf_ARMORFINISHED_09_04"); //Äà, ïðèÿòåëü. Âîò îíè. Ëó÷øèå äîñïåõè âî âñåì Ëàãåðå.
    ai_output(hero, self, "Info_Wolf_ARMORFINISHED_15_05"); //Ñïàñèáî! Ñ ìåíÿ ïðè÷èòàåòñÿ!
    ai_output(self, hero, "Info_Wolf_ARMORFINISHED_09_06"); //Äà ëàäíî òåáå! ß â íàêëàäå íå îñòàíóñü.
    b_logentry(ch4_mcplatearmor, ch4_mcplatearmor_3);
    log_settopicstatus(ch4_mcplatearmor, log_success);
    b_givexp(xp_gormcplatearmor);
    createinvitem(self, crw_armor_h);
    b_giveinvitems(self, hero, crw_armor_h /*4151*/, 1);
};

instance org_855_wolf_sellbow(c_info) {
    npc = org_855_wolf /*7873*/;
    nr = 0;
    condition = org_855_wolf_sellbow_condition;
    information = org_855_wolf_sellbow_info;
    description = "Ãäå ìîæíî êóïèòü õîðîøèé ëóê?";
};

func int org_855_wolf_sellbow_condition() {
    return true;
};

func void org_855_wolf_sellbow_info() {
    ai_output(other, self, "Org_855_Wolf_SELLBOW_Info_15_01"); //Ãäå ìîæíî êóïèòü õîðîøèé ëóê?
    ai_output(self, other, "Org_855_Wolf_SELLBOW_Info_09_02"); //Òû ïðèøåë òóäà, êóäà íóæíî. ß ïîäáåðó äëÿ òåáÿ îòëè÷íûé ëóê - åñëè ó òåáÿ åñòü ðóäà, êîíå÷íî.
    log_createtopic(ge_tradernc, log_note);
    b_logentry(ge_tradernc, ge_tradernc_7);
};

instance dia_aidan_exit(c_info) {
    npc = org_859_aidan /*7882*/;
    nr = 999;
    condition = dia_aidan_exit_condition;
    information = dia_aidan_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_aidan_exit_condition() {
    return 1;
};

func void dia_aidan_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_aidan_hello(c_info) {
    npc = org_859_aidan /*7882*/;
    nr = 1;
    condition = dia_aidan_hello_condition;
    information = dia_aidan_hello_info;
    description = "×åì òû çàíèìàåøüñÿ?";
};

func int dia_aidan_hello_condition() {
    return 1;
};

func void dia_aidan_hello_info() {
    ai_output(other, self, "DIA_Aidan_Hello_15_00"); //×åì òû çàíèìàåøüñÿ?
    ai_output(self, other, "DIA_Aidan_Hello_13_01"); //ß îõîòíèê. Æèâó òåì, ÷òî ïðîäàþ êëûêè äà øêóðû.
    ai_output(other, self, "DIA_Aidan_Hello_15_02"); //Çà ýòî õîðîøî ïëàòÿò?
    ai_output(self, other, "DIA_Aidan_Hello_13_03"); //Åñëè âñå äåëàåøü ïðàâèëüíî, ìîæíî ñîðâàòü íåïëîõîé êóø. Ãëàâíîå - íàó÷èòüñÿ ðàçäåëûâàòü äîáû÷ó.
    log_createtopic(ge_teacherow, log_note);
    b_logentry(ge_teacherow, ge_teacherow_2);
};

instance org_859_aidan_creatures(c_info) {
    npc = org_859_aidan /*7882*/;
    nr = 1;
    condition = org_859_aidan_creatures_condition;
    information = org_859_aidan_creatures_info;
    permanent = true;
    description = "ß õî÷ó íàó÷èòüñÿ ðàçäåëûâàòü äîáû÷ó.";
};

func int org_859_aidan_creatures_condition() {
    if (npc_knowsinfo(hero, dia_aidan_hello /*11255*/) && ((((knows_getteeth == false) || (knows_getfur == false)) || (knows_getclaws == false)) || (knows_gethide == false))) {
        return 1;
    };
};

func void org_859_aidan_creatures_info() {
    ai_output(other, self, "Org_859_Aidan_Creatures_15_00"); //ß õî÷ó íàó÷èòüñÿ ðàçäåëûâàòü äîáû÷ó.
    if ((((knows_getteeth == false) || (knows_getfur == false)) || (knows_getclaws == false)) || (knows_gethide == false)) {
        ai_output(self, other, "Org_859_Aidan_Creatures_13_01"); //×òî òû õî÷åøü óçíàòü?
        info_clearchoices(org_859_aidan_creatures /*11258*/);
        info_addchoice(org_859_aidan_creatures /*11258*/, dialog_back, org_859_aidan_creatures_back);
        if (knows_getteeth == false) {
            info_addchoice(org_859_aidan_creatures /*11258*/, "Äîáûâàòü êëûêè (1 åä. îáó÷åíèÿ, 50 êóñêîâ ðóäû)", org_859_aidan_creatures_zahn);
        };
        if (knows_getfur == false) {
            info_addchoice(org_859_aidan_creatures /*11258*/, "Äîáûâàòü ìåõ (1 åä. îáó÷åíèÿ, 100 êóñêîâ ðóäû)", org_859_aidan_creatures_fell);
        };
        if (knows_getclaws == false) {
            info_addchoice(org_859_aidan_creatures /*11258*/, "Äîáûâàòü êîãòè (1 åä. îáó÷åíèÿ, 50 êóñêîâ ðóäû)", org_859_aidan_creatures_kralle);
        };
        if (knows_gethide == false) {
            info_addchoice(org_859_aidan_creatures /*11258*/, "Äîáûâàòü êîæó (1 åä. îáó÷åíèÿ, 100 êóñêîâ ðóäû)", org_859_aidan_creatures_haut);
        };
    }
    else {
        ai_output(self, other, "Org_859_Aidan_Creatures_TaughtAll_13_00"); //ß íàó÷èë òåáÿ âñåìó, ÷òî çíàë ñàì.
    };
};

func void org_859_aidan_creatures_back() {
    info_clearchoices(org_859_aidan_creatures /*11258*/);
};

func void org_859_aidan_creatures_zahn() {
    ai_output(other, self, "Org_859_Aidan_Creatures_Zahn_15_00"); //Êàê äîáûâàþòñÿ êëûêè?
    if (npc_hasitems(other, itminugget) >= 50) {
        if (other.lp >= 1) {
            other.lp = other.lp - 1;
            b_giveinvitems(other, self, itminugget /*4517*/, 50);
            printscreen(print_learn_teeth, -1, -1, font_old_20, 2);
            ai_output(self, other, "Org_859_Aidan_Creatures_Zahn_13_01"); //Ãëàâíîå - íå ñëîìàòü èõ. Ïîñòàâü íîæ ïðèìåðíî íà ñåðåäèíó çóáà è îñòîðîæíî âûòàùè åãî.
            ai_output(self, other, "Org_859_Aidan_Creatures_Zahn_13_02"); //Êëûêè åñòü ó âîëêîâ, ãëîðõîâ è ìðàêîðèñîâ.
            knows_getteeth = true;
            log_createtopic(ge_animaltrophies, log_note);
            b_logentry(ge_animaltrophies, ge_animaltrophies_teeth);
        }
        else {
            ai_output(self, other, "Org_859_Aidan_Creatures_KEINE_LP_13_00"); //Ñïåðâà íàáåðèñü îïûòà, èíà÷å ìîé ñîâåò òåáå íå ïðèãîäèòñÿ.
            printscreen(print_notenoughskillpoints, -1, -1, font_old_20, 2);
        };
    }
    else {
        ai_output(self, other, "Org_859_Aidan_Creatures_KEIN_ERZ_13_00"); //Ïðåæäå ïîêàæè ðóäó. Êàê ÿ óæå ãîâîðèë, âñå çäåñü èìååò ñâîþ öåíó.
    };
};

func void org_859_aidan_creatures_fell() {
    ai_output(other, self, "Org_859_Aidan_Creatures_Fell_15_00"); //Êàê ñíÿòü øêóðó?
    if (npc_hasitems(other, itminugget) >= 100) {
        if (other.lp >= 1) {
            other.lp = other.lp - 1;
            b_giveinvitems(other, self, itminugget /*4517*/, 100);
            printscreen(print_learn_fur, -1, -1, font_old_20, 2);
            ai_output(self, other, "Org_859_Aidan_Creatures_Fell_13_01"); //Íà÷èíàòü ñëåäóåò ñ çàäíåé ÷àñòè òóøè, äâèãàÿñü ê ãîëîâå. Ãëàâíîå - ïîäöåïèòü åå, äàëüøå âñå áóäåò ëåãêî. Ìåõ ñòîèò î÷åíü äîðîãî.
            ai_output(self, other, "Org_859_Aidan_Creatures_Fell_13_02"); //Îäåæäó äåëàþò èç øêóðû âîëêà èëè ìðàêîðèñà. Ïðèñìîòðåâøèñü ê ìåõó, òû ïîéìåøü, ãîäèòñÿ îí íà ÷òî-íèáóäü èëè íåò.
            knows_getfur = true;
            log_createtopic(ge_animaltrophies, log_note);
            b_logentry(ge_animaltrophies, ge_animaltrophies_fur);
        }
        else {
            ai_output(self, other, "Org_859_Aidan_Creatures_KEINE_LP_13_00"); //Ñïåðâà íàáåðèñü îïûòà, èíà÷å ìîé ñîâåò òåáå íå ïðèãîäèòñÿ.
            printscreen(print_notenoughskillpoints, -1, -1, font_old_20, 2);
        };
    }
    else {
        ai_output(self, other, "Org_859_Aidan_Creatures_KEIN_ERZ_13_00"); //Ïðåæäå ïîêàæè ðóäó. Êàê ÿ óæå ãîâîðèë, âñå çäåñü èìååò ñâîþ öåíó.
    };
};

func void org_859_aidan_creatures_kralle() {
    ai_output(other, self, "Org_859_Aidan_Creatures_Kralle_15_00"); //Ïîêàæè ìíå, êàê äîáûâàþòñÿ êîãòè.
    if (npc_hasitems(other, itminugget) >= 50) {
        if (other.lp >= 1) {
            other.lp = other.lp - 1;
            b_giveinvitems(other, self, itminugget /*4517*/, 50);
            printscreen(print_learn_claws, -1, -1, font_old_20, 2);
            ai_output(self, other, "Org_859_Aidan_Creatures_Kralle_13_01"); //Íà ñàìîì äåëå ýòî î÷åíü ïðîñòî - åñëè òû çíàåøü, ÷òî è êàê äåëàòü. Íóæíî ïðîñòî îòîãíóòü êîãîòü âïåðåä - òîëüêî íå íàçàä, è ÍÅ ÏÛÒÀÉÑß åãî âûäåðãèâàòü!
            ai_output(self, other, "Org_859_Aidan_Creatures_Kralle_13_02"); //Ðàçóìååòñÿ, â äåëî èäóò äàëåêî íå âñå êîãòè. ×àùå âñåãî ìû äîáûâàåì èõ ó ÿùåðèö.
            knows_getclaws = true;
            log_createtopic(ge_animaltrophies, log_note);
            b_logentry(ge_animaltrophies, ge_animaltrophies_claws);
        }
        else {
            ai_output(self, other, "Org_859_Aidan_Creatures_KEINE_LP_13_00"); //Ñïåðâà íàáåðèñü îïûòà, èíà÷å ìîé ñîâåò òåáå íå ïðèãîäèòñÿ.
            printscreen(print_notenoughskillpoints, -1, -1, font_old_20, 2);
        };
    }
    else {
        ai_output(self, other, "Org_859_Aidan_Creatures_KEIN_ERZ_13_00"); //Ïðåæäå ïîêàæè ðóäó. Êàê ÿ óæå ãîâîðèë, âñå çäåñü èìååò ñâîþ öåíó.
    };
};

func void org_859_aidan_creatures_haut() {
    ai_output(other, self, "Org_859_Aidan_Creatures_Haut_15_00"); //À åñëè ÿ çàõî÷ó ñíÿòü øêóðó ñ ðåïòèëèè?
    if (npc_hasitems(other, itminugget) >= 100) {
        if (other.lp >= 1) {
            other.lp = other.lp - 1;
            b_giveinvitems(other, self, itminugget /*4517*/, 100);
            printscreen(print_learn_skin, -1, -1, font_old_20, 2);
            ai_output(self, other, "Org_859_Aidan_Creatures_Haut_13_01"); //Äëÿ ýòîãî ïîäõîäÿò ðàçâå ÷òî øíûãè äà áîëîòîæîðû.
            ai_output(self, other, "Org_859_Aidan_Creatures_Haut_13_02"); //Íóæíî ïîäðåçàòü øêóðó ïî êðàÿì, è äàëüøå îíà ñëåçåò ñàìà. Âîò è âñÿ íàóêà.
            knows_gethide = true;
            log_createtopic(ge_animaltrophies, log_note);
            b_logentry(ge_animaltrophies, ge_animaltrophies_skin);
        }
        else {
            ai_output(self, other, "Org_859_Aidan_Creatures_KEINE_LP_13_00"); //Ñïåðâà íàáåðèñü îïûòà, èíà÷å ìîé ñîâåò òåáå íå ïðèãîäèòñÿ.
            printscreen(print_notenoughskillpoints, -1, -1, font_old_20, 2);
        };
    }
    else {
        ai_output(self, other, "Org_859_Aidan_Creatures_KEIN_ERZ_13_00"); //Ïðåæäå ïîêàæè ðóäó. Êàê ÿ óæå ãîâîðèë, âñå çäåñü èìååò ñâîþ öåíó.
    };
};

instance info_renyu_exit(c_info) {
    npc = org_860_renyu /*7884*/;
    nr = 999;
    condition = info_renyu_exit_condition;
    information = info_renyu_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_renyu_exit_condition() {
    return 1;
};

func void info_renyu_exit_info() {
    ai_stopprocessinfos(self);
};

instance org_860_renyu_getlost(c_info) {
    npc = org_860_renyu /*7884*/;
    nr = 1;
    condition = org_860_renyu_getlost_condition;
    information = org_860_renyu_getlost_info;
    permanent = true;
    important = true;
};

func int org_860_renyu_getlost_condition() {
    if (npc_isinstate(self, zs_talk)) {
        return true;
    };
};

func void org_860_renyu_getlost_info() {
    ai_output(self, other, "Org_860_Renyu_GetLost_Info_06_00"); //Ïðîâàëèâàé!
    ai_stopprocessinfos(self);
};

instance org_861_killian_exit(c_info) {
    npc = org_861_killian /*7887*/;
    nr = 999;
    condition = org_861_killian_exit_condition;
    information = org_861_killian_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int org_861_killian_exit_condition() {
    return true;
};

func void org_861_killian_exit_info() {
    ai_stopprocessinfos(self);
};

instance org_861_killian_getlost(c_info) {
    npc = org_861_killian /*7887*/;
    nr = 1;
    condition = org_861_killian_getlost_condition;
    information = org_861_killian_getlost_info;
    permanent = true;
    important = true;
};

func int org_861_killian_getlost_condition() {
    if (npc_isinstate(self, zs_talk)) {
        return true;
    };
};

func void org_861_killian_getlost_info() {
    ai_output(self, other, "Org_861_Killian_GetLost_Info_13_00"); //Ïðîâàëèâàé!
    ai_stopprocessinfos(self);
};

instance info_jacko_exit(c_info) {
    npc = org_862_jacko /*7890*/;
    nr = 999;
    condition = info_jacko_exit_condition;
    information = info_jacko_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_jacko_exit_condition() {
    return 1;
};

func void info_jacko_exit_info() {
    ai_stopprocessinfos(self);
};

instance org_862_jacko_goaway(c_info) {
    npc = org_862_jacko /*7890*/;
    nr = 1;
    condition = org_862_jacko_goaway_condition;
    information = org_862_jacko_goaway_info;
    permanent = true;
    important = true;
};

func int org_862_jacko_goaway_condition() {
    if (((npc_getdisttowp(hero, "LOCATION_23_CAVE_1_IN") < 500) && (kalom_drugmonopol != log_running)) && (kalom_drugmonopol != log_success)) {
        return true;
    };
};

func void org_862_jacko_goaway_info() {
    ai_output(self, other, "ORG_862_Jacko_GoAway_Info_06_00"); //Êàêîãî ÷åðòà òåáå çäåñü íóæíî?
    ai_stopprocessinfos(self);
    npc_settarget(self, other);
    ai_startstate(self, zs_attack, 1, "");
};

instance org_862_jacko_guard(c_info) {
    npc = org_862_jacko /*7890*/;
    nr = 1;
    condition = org_862_jacko_guard_condition;
    information = org_862_jacko_guard_info;
    important = true;
};

func int org_862_jacko_guard_condition() {
    if (kalom_drugmonopol == log_running) {
        return true;
    };
};

func void org_862_jacko_guard_info() {
    ai_output(self, other, "ORG_862_Jacko_GUARD_Info_06_00"); //Ìû ñáèëèñü ñ ïóòè, òàê?
    ai_output(other, self, "ORG_862_Jacko_GUARD_Info_15_01"); //Êîð Ãàëîìó èçâåñòíî î âàøåé ìàëåíüêîé çàòåå.
    ai_output(self, other, "ORG_862_Jacko_GUARD_Info_06_02"); //×òî? Ïî÷åìó òû çäåñü?
    b_logentry(ch1_drugmonopol, ch1_drugmonopol_3);
    info_clearchoices(org_862_jacko_guard /*11284*/);
    info_addchoice(org_862_jacko_guard /*11284*/, "ß çäåñü, äëÿ òîãî ÷òîáû ïðåäóïðåäèòü âàñ.", org_862_jacko_guard_templer);
    info_addchoice(org_862_jacko_guard /*11284*/, "Îêàçàëàñü ëè ýòà èíôîðìàöèÿ ïîëåçíîé äëÿ òåáÿ?", org_862_jacko_guard_infowert);
    info_addchoice(org_862_jacko_guard /*11284*/, "ß çäåñü äëÿ òîãî, ÷òîáû ïîëîæèòü êîíåö ýòîìó äåëó.", org_862_jacko_guard_angriff);
};

func void org_862_jacko_guard_templer() {
    ai_output(other, self, "ORG_862_Jacko_GUARD_Templer_Info_15_00"); //ß çäåñü äëÿ òîãî, ÷òîáû ïðåäóïðåäèòü âàñ. Êîð Ãàëîì ïîñëàë ïÿòåðûõ Ñòðàæåé ïî âàøåìó ñëåäó.
    ai_output(self, other, "ORG_862_Jacko_GUARD_Templer_Info_06_01"); //×òî?! Ýòîãî íå ìîæåò áûòü!
    ai_output(other, self, "ORG_862_Jacko_GUARD_Templer_Info_15_02"); //Îíè áóäóò çäåñü ñ ìèíóòû íà ìèíóòó.
    ai_output(self, other, "ORG_862_Jacko_GUARD_Templer_Info_06_03"); //Ïðîêëÿòüå! Ìû äîëæíû óõîäèòü!
    info_clearchoices(org_862_jacko_guard /*11284*/);
    b_logentry(ch1_drugmonopol, ch1_drugmonopol_4);
    b_givexp(xp_jackoretired);
    npc_exchangeroutine(self, "ARBEITSLOS");
    b_exchangeroutine(org_861_killian /*7887*/, "ARBEITSLOS");
    b_exchangeroutine(org_860_renyu /*7884*/, "ARBEITSLOS");
    stooges_fled = true;
    ai_stopprocessinfos(self);
};

func void org_862_jacko_guard_infowert() {
    ai_output(other, self, "ORG_862_Jacko_GUARD_InfoWert_Info_15_00"); //Ìíå õîòåëîñü áû çíàòü, îêàçàëàñü ëè ýòà èíôîðìàöèÿ ïîëåçíîé äëÿ òåáÿ.
    ai_output(self, other, "ORG_862_Jacko_GUARD_InfoWert_Info_06_01"); //Àõ, âîò îíî ÷òî... Õîðîøî. Óñëóãà çà óñëóãó. Âîò âñÿ ðóäà, ÷òî ÿ çàõâàòèë ñ ñîáîé.
    ai_output(self, other, "ORG_862_Jacko_GUARD_InfoWert_Info_06_02"); //Íàì ïîðà óõîäèòü. È òåáå òîæå íå ñòîèò çäåñü çàäåðæèâàòüñÿ.
    b_giveinvitems(self, other, itminugget /*4517*/, 95);
    npc_exchangeroutine(self, "ARBEITSLOS");
    b_exchangeroutine(org_861_killian /*7887*/, "ARBEITSLOS");
    b_exchangeroutine(org_860_renyu /*7884*/, "ARBEITSLOS");
    stooges_fled = true;
    b_logentry(ch1_drugmonopol, ch1_drugmonopol_5);
    b_givexp(xp_jackoretired);
    info_clearchoices(org_862_jacko_guard /*11284*/);
    ai_stopprocessinfos(self);
};

func void org_862_jacko_guard_angriff() {
    var c_npc killian;
    var c_npc renyu;

    ai_output(other, self, "ORG_862_Jacko_GUARD_Angriff_Info_15_00"); //ß çäåñü äëÿ òîãî, ÷òîáû ïîëîæèòü êîíåö ýòîìó äåëó.
    ai_output(self, other, "ORG_862_Jacko_GUARD_Angriff_Info_06_01"); //Ýé, ïàðíè! Ïîäîéäèòå ñþäà íà ìèíóòó!
    info_clearchoices(org_862_jacko_guard /*11284*/);
    ai_stopprocessinfos(self);
    npc_settarget(self, hero);
    ai_startstate(self, zs_attack, 1, "");
    npc_setpermattitude(self, att_hostile);
    npc_settempattitude(self, att_hostile);
    killian = hlp_getnpc(org_861_killian);
    npc_settarget(killian, hero);
    ai_startstate(killian, zs_attack, 0, "");
    npc_setpermattitude(killian, att_hostile);
    npc_settempattitude(killian, att_hostile);
    renyu = hlp_getnpc(org_860_renyu);
    npc_settarget(renyu, hero);
    ai_startstate(renyu, zs_attack, 0, "");
    npc_setpermattitude(renyu, att_hostile);
    npc_settempattitude(renyu, att_hostile);
};

instance org_862_jacko_banditencamp(c_info) {
    npc = org_862_jacko /*7890*/;
    nr = 1;
    condition = org_862_jacko_banditencamp_condition;
    information = org_862_jacko_banditencamp_info;
    permanent = true;
    description = "Âîò, çíà÷èò, êóäà âû çàáðàëèñü.";
};

func int org_862_jacko_banditencamp_condition() {
    if ((kalom_drugmonopol == log_success) && hlp_strcmp(npc_getnearestwp(self), "LOCATION_11_08")) {
        return true;
    };
};

func void org_862_jacko_banditencamp_info() {
    ai_output(other, self, "ORG_862_Jacko_Banditencamp_15_00"); //Âîò, çíà÷èò, êóäà âû çàáðàëèñü.
    ai_output(self, other, "ORG_862_Jacko_Banditencamp_06_01"); //Ìû åäâà óøëè. Ñòðàæè-ñåêòàíòû óáèëè áû íàñ.
    ai_stopprocessinfos(self);
};

instance org_873_cipher_exit(c_info) {
    npc = org_873_cipher /*7932*/;
    nr = 999;
    condition = org_873_cipher_exit_condition;
    information = org_873_cipher_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int org_873_cipher_exit_condition() {
    return true;
};

func void org_873_cipher_exit_info() {
    ai_stopprocessinfos(self);
};

instance org_873_cipher_hello(c_info) {
    npc = org_873_cipher /*7932*/;
    nr = 1;
    condition = org_873_cipher_hello_condition;
    information = org_873_cipher_hello_info;
    description = "Êàê æèçíü?";
};

func int org_873_cipher_hello_condition() {
    return 1;
};

func void org_873_cipher_hello_info() {
    ai_output(other, self, "DIA_Cipher_Hello_15_00"); //Êàê äåëà?
    ai_output(self, other, "DIA_Cipher_Hello_12_01"); //Ìû åùå ðàç êðåïêî íàñîëèëè Ãîìåçó.
    ai_output(self, other, "DIA_Cipher_Hello_12_02"); //Òðè óáèòûõ ñòðàæíèêà è êó÷à äîáðà íà ïðîäàæó. Çà ýòî ÿ âûïüþ!
    ai_output(other, self, "DIA_Cipher_Hello_15_03"); //ÂÛ ïîñòîÿííî ñîâåðøàåòå íàáåãè íà Ñòàðûé Ëàãåðü?
    ai_output(self, other, "DIA_Cipher_Hello_12_04"); //Íåò, òîëüêî êîãäà äåëî òîãî ñòîèò.
};

instance org_873_cipher_fisk(c_info) {
    npc = org_873_cipher /*7932*/;
    nr = 1;
    condition = org_873_cipher_fisk_condition;
    information = org_873_cipher_fisk_info;
    permanent = true;
    description = "Ôèñêó èç Ñòàðîãî Ëàãåðÿ íóæåí êîìïàíüîí.";
};

func int org_873_cipher_fisk_condition() {
    if (fisk_getnewhehler == log_running) {
        return 1;
    };
};

func void org_873_cipher_fisk_info() {
    ai_output(other, self, "DIA_Cipher_Fisk_15_00"); //Ôèñêó èç Ñòàðîãî Ëàãåðÿ íóæåí êîìïàíüîí.
    ai_output(self, other, "DIA_Cipher_Fisk_12_01"); //Ìåíÿ ýòî íå èíòåðåñóåò.
    ai_output(self, other, "DIA_Cipher_Fisk_12_02"); //Íî ýòî âïîëíå ìîæåò çàèíòåðåñîâàòü Øàðêè. Ñïðîñè åãî ïðè âñòðå÷å.
};

var int cipher_trade;

instance org_873_cipher_frombalor(c_info) {
    npc = org_873_cipher /*7932*/;
    nr = 1;
    condition = org_873_cipher_frombalor_condition;
    information = org_873_cipher_frombalor_info;
    permanent = true;
    description = "×òî ó âàñ åñòü?";
};

func int org_873_cipher_frombalor_condition() {
    if (npc_knowsinfo(hero, org_873_cipher_hello /*11298*/) && (cipher_trade == false)) {
        return 1;
    };
};

func void org_873_cipher_frombalor_info() {
    ai_output(other, self, "DIA_Cipher_FromBalor_15_00"); //×òî ó âàñ åñòü?
    ai_output(self, other, "DIA_Cipher_FromBalor_12_01"); //Äàâàé èçìåíèì âîïðîñ. ×òî åñòü ó ÒÅÁß? ß çàíèìàþñü òîëüêî êðóïíûìè ñäåëêàìè.
    if (balor_tellsncdealer == true) {
        ai_output(other, self, "DIA_Cipher_FromBalor_15_02"); //Áýëîð ãîâîðèë,  òåáå íóæåí áîëîòíèê.
        ai_output(self, other, "DIA_Cipher_FromBalor_12_03"); //Ììììì. Õî÷åøü îáìåíÿòü åãî?
        cipher_trade = true;
    }
    else {
        ai_output(other, self, "DIA_Cipher_FromBalor_15_04"); //Â ýòîì ÿ òåáå íå ïîìîùíèê.
        ai_output(self, other, "DIA_Cipher_FromBalor_12_05"); //Òîãäà âîçâðàùàéñÿ, êîãäà òû ñìîæåøü ìíå ïîìî÷ü.
    };
};

instance org_873_cipher_trade(c_info) {
    npc = org_873_cipher /*7932*/;
    nr = 1;
    condition = org_873_cipher_trade_condition;
    information = org_873_cipher_trade_info;
    permanent = true;
    trade = true;
    description = "Ïðåäëàãàþ ñäåëêó.";
};

func int org_873_cipher_trade_condition() {
    if (cipher_trade == true) {
        return 1;
    };
};

func void org_873_cipher_trade_info() {
    ai_output(other, self, "DIA_Cipher_TRADE_15_00"); //Ïðåäëàãàþ ñäåëêó.
    ai_output(self, other, "DIA_Cipher_TRADE_12_01"); //×òî òåáå íóæíî?
};

instance dia_org_875_exit(c_info) {
    npc = org_875_tuersteher /*7937*/;
    nr = 999;
    condition = dia_org_875_exit_condition;
    information = dia_org_875_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_org_875_exit_condition() {
    return 1;
};

func void dia_org_875_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_org_875_perm(c_info) {
    npc = org_875_tuersteher /*7937*/;
    nr = 1;
    condition = dia_org_875_perm_condition;
    information = dia_org_875_perm_info;
    permanent = true;
    description = "Âû ïðîïóñêàåòå òîëüêî âîðîâ è ðóäîêîïîâ? ";
};

func int dia_org_875_perm_condition() {
    return 1;
};

func void dia_org_875_perm_info() {
    ai_output(other, self, "DIA_Org_875_PERM_15_00"); //Âû ïðîïóñêàåòå òîëüêî âîðîâ è ðóäîêîïîâ?
    ai_output(self, other, "DIA_Org_875_PERM_13_01"); //Ïðîòèâ áðàòüåâ èç ñåêòû ìû òîæå íè÷åãî íå èìååì.
    ai_output(self, other, "DIA_Org_875_PERM_13_02"); //Íî êðîìå íèõ çäåñü íå ïðîéäåò íèêòî.
};

instance dia_org_876_exit(c_info) {
    npc = org_876_tuersteher /*7939*/;
    nr = 999;
    condition = dia_org_876_exit_condition;
    information = dia_org_876_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_org_876_exit_condition() {
    return 1;
};

func void dia_org_876_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_org_876_amsfb(c_info) {
    npc = org_876_tuersteher /*7939*/;
    nr = 1;
    condition = dia_org_876_amsfb_condition;
    information = dia_org_876_amsfb_info;
    permanent = true;
    description = "ß ðóäîêîï! È ÿ õî÷ó ïèòü!";
};

func int dia_org_876_amsfb_condition() {
    if ((self.aivar[29] == false) && (npc_getattitude(self, hero) != att_friendly)) {
        return true;
    };
};

func void dia_org_876_amsfb_info() {
    var c_item myarmor;

    ai_output(other, self, "DIA_Org_876_AmSfb_15_00"); //ß ðóäîêîï! È ÿ õî÷ó ïèòü!
    myarmor = npc_getequippedarmor(hero);
    if (hlp_isitem(myarmor, sfb_armor_l /*4131*/)) {
        ai_output(self, other, "DIA_Org_876_AmSfb_06_01"); //Äà, òû ïîõîæ íà ýòèõ âîíþ÷èõ êðûñ... Ïðîõîäè!
        self.aivar[29] = true;
        ai_stopprocessinfos(self);
    }
    else {
        ai_output(self, other, "DIA_Org_876_AmSfb_NOSFB_06_00"); //Òû íå ïîõîæ íà ýòèõ ñêðåáêîâ. ÒÀÊ òû ñþäà íå ïðîéäåøü, ïðèÿòåëü.
    };
};

instance dia_org_876_bribe(c_info) {
    npc = org_876_tuersteher /*7939*/;
    nr = 1;
    condition = dia_org_876_bribe_condition;
    information = dia_org_876_bribe_info;
    permanent = true;
    description = "À ÷òî òû ñêàæåøü ïî ïîâîäó íåáîëüøîé ïëàòû çà âõîä?";
};

func int dia_org_876_bribe_condition() {
    if ((self.aivar[29] == false) && (npc_getattitude(self, hero) != att_friendly)) {
        return 1;
    };
};

func void dia_org_876_bribe_info() {
    ai_output(other, self, "DIA_Org_876_Bribe_15_00"); //À ÷òî òû ñêàæåøü ïî ïîâîäó íåáîëüøîé ïëàòû çà âõîä?
    ai_output(self, other, "DIA_Org_876_Bribe_06_01"); //Ýòî çàâèñèò îò òîãî, ÷òî òû ïîíèìàåøü ïîä 'íåáîëüøîé ïëàòîé'.
    info_clearchoices(dia_org_876_bribe /*11324*/);
    info_addchoice(dia_org_876_bribe /*11324*/, "Ñîòíè êóñêîâ ðóäû äîëæíî áûòü äîñòàòî÷íî.", dia_org_876_bribe_100erz);
    info_addchoice(dia_org_876_bribe /*11324*/, "×òî òû ñêàæåøü ïî ïîâîäó ïÿòèäåñÿòè êóñêîâ?", dia_org_876_bribe_50erz);
    info_addchoice(dia_org_876_bribe /*11324*/, "Ó ìåíÿ åñòü äåñÿòü êóñêîâ ðóäû - âîò.", dia_org_876_bribe_10erz);
};

func void dia_org_876_bribe_10erz() {
    ai_output(other, self, "DIA_Org_876_Bribe_10Erz_15_00"); //Ó ìåíÿ åñòü äåñÿòü êóñêîâ ðóäû - âîò.
    if (npc_hasitems(other, itminugget) >= 10) {
        ai_output(self, other, "DIA_Org_876_Bribe_10Erz_06_01"); //Äåñÿòü êóñêîâ, à? Çà ýòî ÿ ïîçâîëþ òåáå ïîïðîáîâàòü åùå ðàç.
        b_giveinvitems(other, self, itminugget /*4517*/, 10);
    }
    else {
        ai_output(self, other, "DIA_Org_876_Bribe_10Erz_06_02"); //È ãäå îíè? ß íå âèæó äåñÿòè êóñêîâ.
    };
    ai_stopprocessinfos(self);
};

func void dia_org_876_bribe_50erz() {
    ai_output(other, self, "DIA_Org_876_Bribe_50Erz_15_00"); //×òî òû ñêàæåøü ïî ïîâîäó ïÿòèäåñÿòè êóñêîâ?
    if (npc_hasitems(other, itminugget) >= 50) {
        ai_output(self, other, "DIA_Org_876_Bribe_50Erz_06_01"); //Ýòî ïðèìåðíî ïîëîâèíà òîãî, ÷òî ÿ íàçûâàþ 'íåìíîãî ðóäû'.
    }
    else {
        ai_output(self, other, "DIA_Org_876_Bribe_50Erz_06_02"); //Íó è ãäå îíè? ß íå âèæó ïÿòèäåñÿòè êóñêîâ.
    };
    ai_stopprocessinfos(self);
};

func void dia_org_876_bribe_100erz() {
    ai_output(other, self, "DIA_Org_876_Bribe_100Erz_15_00"); //Ñîòíè êóñêîâ ðóäû äîëæíî áûòü äîñòàòî÷íî.
    if (npc_hasitems(other, itminugget) >= 100) {
        ai_output(self, other, "DIA_Org_876_Bribe_100Erz_06_01"); //Òû ïðàâ. Ïðîõîäè.
        self.aivar[29] = true;
        b_giveinvitems(other, self, itminugget /*4517*/, 100);
    }
    else {
        ai_output(self, other, "DIA_Org_876_Bribe_100Erz_06_02"); //Âåðíî. Òîëüêî íå ïîõîæå, ÷òîáû ó òåáÿ áûëà ýòà ñîòíÿ.
    };
    ai_stopprocessinfos(self);
};

instance dia_org_876_perm(c_info) {
    npc = org_876_tuersteher /*7939*/;
    nr = 1;
    condition = dia_org_876_perm_condition;
    information = dia_org_876_perm_info;
    permanent = true;
    description = "Êàê èäóò äåëà ñî øíàïñîì?";
};

func int dia_org_876_perm_condition() {
    if ((self.aivar[29] == true) || (npc_getattitude(self, hero) == att_friendly)) {
        return 1;
    };
};

func void dia_org_876_perm_info() {
    ai_output(other, self, "DIA_Org_876_PERM_15_00"); //Êàê èäóò äåëà ñî øíàïñîì?
    ai_output(self, other, "DIA_Org_876_PERM_06_01"); //Çàõîäè è ñïðîñè Ñèëàñà. ÌÛ íè íà ÷òî íå ìîæåì ïîæàëîâàòüñÿ.
};

instance dia_org_876_scsld(c_info) {
    npc = org_876_tuersteher /*7939*/;
    nr = 1;
    condition = dia_org_876_scsld_condition;
    information = dia_org_876_scsld_info;
    important = true;
};

func int dia_org_876_scsld_condition() {
    if (((other.guild == gil_sld) || (other.guild == gil_kdw)) || (other.guild == gil_kdf)) {
        return 1;
    };
};

func void dia_org_876_scsld_info() {
    ai_output(self, other, "DIA_Org_876_ScSld_06_00"); //Ñòîé! Òû çíàåøü ïðàâèëà. Ïðîéòè ìîãóò òîëüêî ðóäîêîïû è âîðû!
    ai_output(other, self, "DIA_Org_876_ScSld_15_01"); //Óæ íå õî÷åøü ëè òû îñòàíîâèòü ìåíÿ?
    ai_output(self, other, "DIA_Org_876_ScSld_06_02"); //Íåò... Ëàäíî, èäè...
    self.aivar[29] = true;
};

instance dia_org_876_scsekte(c_info) {
    npc = org_876_tuersteher /*7939*/;
    nr = 1;
    condition = dia_org_876_scsekte_condition;
    information = dia_org_876_scsekte_info;
    important = true;
};

func int dia_org_876_scsekte_condition() {
    if ((other.guild == gil_nov) || (other.guild == gil_tpl)) {
        return 1;
    };
};

func void dia_org_876_scsekte_info() {
    ai_output(self, other, "DIA_Org_876_ScSekte_06_00"); //Îáû÷íî ìû ïðîïóñêàåì òîëüêî ñâîèõ, íî òàêæå íè÷åãî íå èìååì ïðîòèâ ÷ëåíîâ Áðàòñòâà.
    ai_output(self, other, "DIA_Org_876_ScSekte_06_01"); //Îñîáåííî êîãäà ó íèõ ñ ñîáîé åñòü äîáðîå êóðåâî!
    self.aivar[29] = true;
};

var int org_876_gotjoint;

instance dia_org_876_gibkraut(c_info) {
    npc = org_876_tuersteher /*7939*/;
    nr = 1;
    condition = dia_org_876_gibkraut_condition;
    information = dia_org_876_gibkraut_info;
    permanent = true;
    description = "Ó ìåíÿ ñ ñîáîé åñòü íåñêîëüêî ñòåáëåé. Âîò, óãîùàéñÿ.";
};

func int dia_org_876_gibkraut_condition() {
    if (npc_knowsinfo(hero, dia_org_876_scsekte /*11336*/) && (org_876_gotjoint == false)) {
        return 1;
    };
};

func void dia_org_876_gibkraut_info() {
    ai_output(other, self, "DIA_Org_876_GibKraut_15_00"); //Ó ìåíÿ ñ ñîáîé åñòü íåñêîëüêî ñòåáëåé. Âîò, óãîùàéñÿ.
    if (((npc_hasitems(other, itmijoint_1) > 0) || (npc_hasitems(other, itmijoint_2) > 0)) || (npc_hasitems(other, itmijoint_3) > 0)) {
        if (npc_hasitems(other, itmijoint_1)) {
            b_giveinvitems(other, self, itmijoint_1 /*4511*/, 1);
        }
        else if (npc_hasitems(other, itmijoint_2)) {
            b_giveinvitems(other, self, itmijoint_2 /*4513*/, 1);
        }
        else {
            if (npc_hasitems(other, itmijoint_3)) {
                b_giveinvitems(other, self, itmijoint_3 /*4515*/, 1);
            };
        };
        ai_output(self, other, "DIA_Org_876_GibKraut_06_01"); //Âñåãäà áóäåì ðàäû òåáå, ïàðåíü!
        self.aivar[29] = true;
        nc_joints_verteilt = nc_joints_verteilt + 1;
        org_876_gotjoint = true;
    }
    else {
        ai_output(other, self, "DIA_Org_876_GibKraut_KEIN_15_00"); //Îé... Ïîãîäè-êà. Êàæåòñÿ, ó ìåíÿ óæå íè÷åãî íå îñòàëîñü.
        ai_output(self, other, "DIA_Org_876_GibKraut_KEIN_06_00"); //Êðóòî. Â ñëåäóþùèé ðàç ïîäóìàé è îáî ìíå.
        self.aivar[29] = true;
    };
};

const string org_876_checkpoint = "NC_TAVERN_BAR";

instance info_org_876_firstwarn(c_info) {
    npc = org_876_tuersteher /*7939*/;
    nr = 2;
    condition = info_org_876_firstwarn_condition;
    information = info_org_876_firstwarn_info;
    permanent = true;
    important = true;
};

func int info_org_876_firstwarn_condition() {
    if ((((hero.aivar[27] == aiv_gps_begin) && (self.aivar[29] == false)) && (npc_getattitude(self, hero) != att_friendly)) && hlp_strcmp(npc_getnearestwp(self), self.wp)) {
        return true;
    };
};

func void info_org_876_firstwarn_info() {
    printglobals(pd_mission);
    ai_output(self, hero, "Info_Org_876_FirstWarn_Info_06_00"); //À êóäà ýòî ÒÛ ñîáðàëñÿ?
    ai_output(hero, self, "Info_Org_876_FirstWarn_Info_15_01"); //Íó, òóäà.
    ai_output(self, hero, "Info_Org_876_FirstWarn_Info_06_02"); //Çàáóäü îá ýòîì! Â áàð Ñèëàñà ïðîïóñêàþò òîëüêî ðóäîêîïîâ è âîðîâ.
    hero.aivar[28] = npc_getdisttowp(hero, org_876_checkpoint);
    hero.aivar[27] = aiv_gps_firstwarn;
};

instance info_org_876_lastwarn(c_info) {
    npc = org_876_tuersteher /*7939*/;
    nr = 1;
    condition = info_org_876_lastwarn_condition;
    information = info_org_876_lastwarn_info;
    permanent = true;
    important = true;
};

func int info_org_876_lastwarn_condition() {
    if (((((hero.aivar[27] == aiv_gps_firstwarn) && (self.aivar[29] == false)) && (npc_getattitude(self, hero) != att_friendly)) && (npc_getdisttowp(hero, org_876_checkpoint) < (hero.aivar[28] - 100))) && hlp_strcmp(npc_getnearestwp(self), self.wp)) {
        return true;
    };
};

func int info_org_876_lastwarn_info() {
    ai_output(self, hero, "Info_Org_876_LastWarn_06_00"); //Òû îãëîõ èëè êàê, ïðèÿòåëü?!
    hero.aivar[28] = npc_getdisttowp(hero, org_876_checkpoint);
    hero.aivar[27] = aiv_gps_lastwarn;
    ai_stopprocessinfos(self);
};

instance info_org_876_attack(c_info) {
    npc = org_876_tuersteher /*7939*/;
    nr = 1;
    condition = info_org_876_attack_condition;
    information = info_org_876_attack_info;
    permanent = true;
    important = true;
};

func int info_org_876_attack_condition() {
    if (((((hero.aivar[27] == aiv_gps_lastwarn) && (npc_getattitude(self, hero) != att_friendly)) && (self.aivar[29] == false)) && (npc_getdisttowp(hero, org_876_checkpoint) < (hero.aivar[28] - 100))) && hlp_strcmp(npc_getnearestwp(self), self.wp)) {
        return true;
    };
};

func int info_org_876_attack_info() {
    hero.aivar[28] = 0;
    hero.aivar[27] = aiv_gps_punish;
    b_fullstop(self);
    ai_stopprocessinfos(self);
    b_intruderalert(self, other);
    b_setattackreason(self, aiv_ar_intruder);
    npc_settarget(self, hero);
    ai_startstate(self, zs_attack, 1, "");
};

instance info_erpresser(c_info) {
    npc = org_888_erpresser /*7941*/;
    nr = 1;
    condition = info_erpresser_condition;
    information = info_erpresser_info;
    permanent = true;
    important = true;
};

func int info_erpresser_condition() {
    var c_npc mordrag;

    mordrag = hlp_getnpc(org_826_mordrag);
    if (((((npc_getattitude(self, other) != att_friendly) && (!c_npcbelongstonewcamp(other))) && (self.aivar[4] == false)) && (self.aivar[19] == false)) && (npc_getdisttonpc(self, mordrag) > hai_dist_watch)) {
        return 1;
    };
};

func void info_erpresser_info() {
    ai_output(self, other, "Info_Erpresser_Info_13_01"); //Âîò ÷òî, ïàðåíü, åñëè õî÷åøü ïðîéòè, òåáå ïðèäåòñÿ çàïëàòèòü 10 êóñêîâ ðóäû. Èëè íà÷íóòñÿ ñïëîøíûå íåïðèÿòíîñòè, óñåê?
    info_clearchoices(info_erpresser /*11353*/);
    info_addchoice(info_erpresser /*11353*/, "Íó, ïî÷åìó áû òåáå íå ïîäîéòè ñþäà è íå çàáðàòü ñâîþ ðóäó?", info_erpresser_choice_aufsmaul);
    info_addchoice(info_erpresser /*11353*/, "Òðè êóñêà ðóäû? Íå òàê óæ ìíîãî. Âîò...", info_erpresser_choice_zahlen);
};

func void info_erpresser_choice_aufsmaul() {
    var c_npc coerpresser;

    ai_output(other, self, "Info_Erpresser_Choice_AufsMaul_15_01"); //Íó, ïî÷åìó áû òåáå íå ïîäîéòè ñþäà è íå çàáðàòü ñâîþ ðóäó?
    ai_output(self, other, "Info_Erpresser_Choice_AufsMaul_13_02"); //Ñïàñèáî, ïàðåíü. Âûðó÷èë.
    self.aivar[4] = 2;
    ai_stopprocessinfos(self);
    npc_settarget(self, other);
    ai_startstate(self, zs_attack, 1, "");
    coerpresser = hlp_getnpc(org_889_coerpresser);
    if ((npc_getdisttonpc(self, coerpresser) < hai_dist_watch) && (!npc_isdead(coerpresser))) {
        ai_waittillend(coerpresser, self);
        npc_settarget(coerpresser, other);
        ai_startstate(coerpresser, zs_attack, 1, "");
    };
};

func void info_erpresser_choice_zahlen() {
    var c_npc coerpresser;

    if (npc_hasitems(other, itminugget) >= 10) {
        ai_output(other, self, "Info_Erpresser_Choice_Zahlen_15_01"); //Âîò, 10 êóñêîâ.
        ai_output(self, other, "Info_Erpresser_Choice_Zahlen_13_02"); //Âîò äîñàäà.
        b_giveinvitems(other, self, itminugget /*4517*/, 10);
        self.aivar[4] = 1;
        ai_stopprocessinfos(self);
    }
    else {
        ai_output(other, self, "Info_Erpresser_Choice_Zahlen_15_03"); //Ó-ìì... Êàæåòñÿ, ó ìåíÿ ñåé÷àñ íåò 10 êóñêîâ...
        ai_output(self, other, "Info_Erpresser_Choice_Zahlen_13_04"); //Êàêàÿ æàëîñòü...
        self.aivar[4] = 2;
        ai_stopprocessinfos(self);
        npc_settarget(self, other);
        ai_startstate(self, zs_attack, 1, "");
        coerpresser = hlp_getnpc(org_889_coerpresser);
        if ((npc_getdisttonpc(self, coerpresser) < hai_dist_watch) && (!npc_isdead(coerpresser))) {
            ai_waittillend(coerpresser, self);
            npc_settarget(coerpresser, other);
            ai_startstate(coerpresser, zs_attack, 1, "");
        };
    };
};

instance info_bereitserpresst(c_info) {
    npc = org_888_erpresser /*7941*/;
    nr = 1;
    condition = info_bereitserpresst_condition;
    information = info_bereitserpresst_info;
    permanent = true;
    important = true;
};

func int info_bereitserpresst_condition() {
    if ((self.aivar[4] == 1) && npc_isinstate(self, zs_talk)) {
        return 1;
    };
};

func void info_bereitserpresst_info() {
    ai_output(self, other, "Info_BereitsErpresst_Info_13_02"); //Òû çàïëàòèë. Ìîæåøü ïðîéòè, ïîêà ÿ íå ïåðåäóìàë.
};

instance info_bereitsaufsmaul(c_info) {
    npc = org_888_erpresser /*7941*/;
    nr = 1;
    condition = info_bereitsaufsmaul_condition;
    information = info_bereitsaufsmaul_info;
    permanent = true;
    important = true;
};

func int info_bereitsaufsmaul_condition() {
    if (((self.aivar[4] == 2) && (self.aivar[19] == false)) && npc_isinstate(self, zs_talk)) {
        return 1;
    };
};

func void info_bereitsaufsmaul_info() {
    ai_output(self, other, "Info_BereitsAufsMaul_Info_13_02"); //Èñ÷åçíè, ïîêà ÿ íå íà÷èñòèë òâîþ òóïóþ ðîæó!
};

instance info_exit(c_info) {
    npc = org_888_erpresser /*7941*/;
    nr = 999;
    condition = info_exit_condition;
    information = info_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_exit_condition() {
    return 1;
};

func void info_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_gorn_exit(c_info) {
    npc = pc_fighter /*7949*/;
    nr = 999;
    condition = info_gorn_exit_condition;
    information = info_gorn_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_gorn_exit_condition() {
    return 1;
};

func void info_gorn_exit_info() {
    if (self.aivar[36]) {
        ai_output(self, other, "Info_Gorn_EXIT_09_01"); //Çàùèùàéñÿ!
    }
    else {
        ai_output(self, other, "Info_Gorn_EXIT_09_02"); //Óâèäèìñÿ.
    };
    ai_stopprocessinfos(self);
};

instance dia_gorn_first(c_info) {
    npc = pc_fighter /*7949*/;
    nr = 1;
    condition = dia_gorn_first_condition;
    information = dia_gorn_first_info;
    important = true;
};

func int dia_gorn_first_condition() {
    if (kapitel < 3) {
        return 1;
    };
};

func void dia_gorn_first_info() {
    ai_output(self, other, "DIA_Gorn_First_09_00"); //Ýé. Íîâûå ëèöà.
    ai_output(other, self, "DIA_Gorn_First_15_01"); //Òû êòî?
    ai_output(self, other, "DIA_Gorn_First_09_02"); //ß - Ãîðí, íàåìíèê íà ñëóæáå ó ìàãîâ.
};

instance dia_gorn_leben(c_info) {
    npc = pc_fighter /*7949*/;
    nr = 2;
    condition = dia_gorn_leben_condition;
    information = dia_gorn_leben_info;
    description = "È â ÷åì çàêëþ÷àþòñÿ òâîè îáÿçàííîñòè?";
};

func int dia_gorn_leben_condition() {
    if (npc_knowsinfo(hero, dia_gorn_first /*11373*/)) {
        return 1;
    };
};

func void dia_gorn_leben_info() {
    ai_output(other, self, "DIA_Gorn_Leben_15_00"); //È â ÷åì çàêëþ÷àþòñÿ òâîè îáÿçàííîñòè?
    ai_output(self, other, "DIA_Gorn_Leben_09_01"); //Ëè çàêëþ÷èë ñ ìàãàìè ñäåëêó. Îí íàíÿë ëó÷øèõ áîéöîâ â êîëîíèè - òî åñòü íàñ.
    ai_output(self, other, "DIA_Gorn_Leben_09_02"); //Ìû îõðàíÿåì ìàãîâ è çàáîòèìñÿ î òîì, ÷òîáû ðóäîêîïû ìîãëè ðàáîòàòü ñïîêîéíî.
    ai_output(self, other, "DIA_Gorn_Leben_09_03"); //Ìàãè äîëæíû ïîçàáîòèòüñÿ î òîì, ÷òîáû ðàíî èëè ïîçäíî âñå ìû ñìîãëè óáðàòüñÿ îòñþäà. À åùå ìû ïîëó÷àåì ìàëóþ òîëèêó ðóäû â êà÷åñòâå ïëàòû çà ñëóæáó.
};

var int gorn_shrikeshut;

instance dia_gorn_hut(c_info) {
    npc = pc_fighter /*7949*/;
    nr = 3;
    condition = dia_gorn_hut_condition;
    information = dia_gorn_hut_info;
    description = "Ìîæíî ãäå-íèáóäü çäåñü îñòàíîâèòüñÿ?";
};

func int dia_gorn_hut_condition() {
    if (npc_knowsinfo(hero, dia_gorn_first /*11373*/)) {
        return 1;
    };
};

func void dia_gorn_hut_info() {
    ai_output(other, self, "DIA_Gorn_Hut_15_00"); //Ìîæíî ãäå-íèáóäü çäåñü îñòàíîâèòüñÿ - òàê, ÷òîáû íå ïðèøëîñü íèêîãî âûêèäûâàòü èç äîìà?
    ai_output(self, other, "DIA_Gorn_Hut_09_01"); //Íå äóìàþ. Íî åñëè òàê óæ ïðèñïè÷èëî, ïîãîâîðè ñî Øðàéêîì.
    ai_output(self, other, "DIA_Gorn_Hut_09_02"); //Îí çàíÿë äîì íàïðîòèâ, ðÿäîì ñî âõîäîì â ïåùåðó. Äîì áûë ïóñòîé - íî ïðèíàäëåæàë-òî îí íàì.
    ai_output(other, self, "DIA_Gorn_Hut_15_03"); //Íàì?
    ai_output(self, other, "DIA_Gorn_Hut_09_04"); //Íó, íàì, íàåìíèêàì. Íàåìíèêè è âîðû æèâóò ðàçäåëüíî, è íè îäèí èç øàéêè Ëàðñà íå äîëæåí ïîÿâëÿòüñÿ ïî ýòó ñòîðîíó îò áîëüøîé äûðû.
    ai_output(self, other, "DIA_Gorn_Hut_09_05"); //Íà ñàìîì äåëå, ðàçíèöû íèêàêîé. Íî Øðàéê íèêîãî è íå ñïðàøèâàë. À âîðàì íåëüçÿ ïîçâîëÿòü äåëàòü âñå, ÷òî çàáëàãîðàññóäèòñÿ, èíà÷å îíè íàãëåþò!
    log_createtopic(ch1_shrikeshut, log_mission);
    log_settopicstatus(ch1_shrikeshut, log_running);
    b_logentry(ch1_shrikeshut, ch1_shrikeshut_2);
    gorn_shrikeshut = log_running;
};

instance dia_gorn_hutfree(c_info) {
    npc = pc_fighter /*7949*/;
    nr = 3;
    condition = dia_gorn_hutfree_condition;
    information = dia_gorn_hutfree_info;
    description = "Øðàéê ïåðååõàë â äðóãîé äîì.";
};

func int dia_gorn_hutfree_condition() {
    var c_npc shrike;

    shrike = hlp_getnpc(org_842_shrike);
    if ((npc_knowsinfo(hero, dia_shrike_getlost /*11107*/) || npc_isdead(shrike)) && npc_knowsinfo(hero, dia_gorn_hut /*11380*/)) {
        return 1;
    };
};

func void dia_gorn_hutfree_info() {
    ai_output(other, self, "DIA_Gorn_HutFree_15_00"); //Øðàéê ïåðååõàë â äðóãîé äîì.
    ai_output(self, other, "DIA_Gorn_HutFree_09_01"); //Õîðîøî. Òîðëîô òîëüêî ÷òî ñêàçàë ìíå, ÷òî õî÷åò ïåðåãîâîðèòü ñ ïàðíåì.
    gorn_shrikeshut = log_success;
    log_settopicstatus(ch1_shrikeshut, log_success);
    b_logentry(ch1_shrikeshut, ch1_shrikeshut_3);
    b_givexp(xp_reportedkickedshrike);
};

instance dia_gorn_becomesld(c_info) {
    npc = pc_fighter /*7949*/;
    nr = 5;
    condition = dia_gorn_becomesld_condition;
    information = dia_gorn_becomesld_info;
    description = "×òî íóæíî ñäåëàòü, ÷òîáû ïðèñîåäèíèòüñÿ ê Íîâîìó Ëàãåðþ?";
};

func int dia_gorn_becomesld_condition() {
    if (npc_knowsinfo(hero, dia_gorn_first /*11373*/) && (npc_gettrueguild(hero) == gil_none)) {
        return 1;
    };
};

func void dia_gorn_becomesld_info() {
    ai_output(other, self, "DIA_Gorn_BecomeSLD_15_00"); //×òî íóæíî ñäåëàòü äëÿ òîãî, ÷òîáû ïðèñîåäèíèòüñÿ ê Íîâîìó Ëàãåðþ?
    ai_output(self, other, "DIA_Gorn_BecomeSLD_09_01"); //Ïðåæäå ÷åì ãîâîðèòü îá ýòîì ñ Ëè, òû äîëæåí íàó÷èòüñÿ õîðîøî äðàòüñÿ - íåâàæíî, êàêèì îðóæèåì.
    ai_output(self, other, "DIA_Gorn_BecomeSLD_09_02"); //Ïîìèìî ýòîãî, òû äîëæåí çíàòü âñå ïðî çäåøíþþ æèçíü è åå çàêîíû.
    ai_output(self, other, "DIA_Gorn_BecomeSLD_09_03"); //Åñëè òû íå ñîáèðàåøüñÿ ïîÿâëÿòüñÿ â äðóãèõ Ëàãåðÿõ, ñòîèò ïîïðîáîâàòü ïðèñîåäèíèòüñÿ ê âîðîâñêîé øàéêå, ïðåæäå ÷åì ïûòàòüñÿ ñòàòü íàåìíèêîì.
};

var int gorn_trade;

instance dia_gorn_trade(c_info) {
    npc = pc_fighter /*7949*/;
    nr = 800;
    condition = dia_gorn_trade_condition;
    information = dia_gorn_trade_info;
    permanent = true;
    trade = true;
    description = dialog_trade;
};

func int dia_gorn_trade_condition() {
    if (npc_knowsinfo(hero, dia_gorn_duhehler /*11394*/) && (kapitel < 3)) {
        return 1;
    };
};

func void dia_gorn_trade_info() {
    ai_output(other, self, "DIA_Gorn_TRADE_15_00"); //Ñêîëüêî ó òåáÿ ýòîãî äîáðà?
    ai_output(self, other, "DIA_Gorn_TRADE_09_01"); //Ïîëíî. Õî÷åøü êóïèòü?
};

instance dia_gorn_duhehler(c_info) {
    npc = pc_fighter /*7949*/;
    nr = 1;
    condition = dia_gorn_duhehler_condition;
    information = dia_gorn_duhehler_info;
    description = "Çà÷åì òû ó÷àñòâîâàë â íàëåòå?";
};

func int dia_gorn_duhehler_condition() {
    if (npc_knowsinfo(hero, org_801_lares_bringlistanteil /*10855*/)) {
        return 1;
    };
};

func void dia_gorn_duhehler_info() {
    ai_output(other, self, "DIA_Gorn_DuHehler_15_00"); //Çà÷åì òû ó÷àñòâîâàë â íàëåòå?
    ai_output(self, other, "DIA_Gorn_DuHehler_09_01"); //Êòî ñêàçàë, ÷òî ÿ ó÷àñòâîâàë?
    ai_output(other, self, "DIA_Gorn_DuHehler_15_02"); //Åñëè ýòî íå òàê, îòêóäà ó òåáÿ ñòîëüêî òîâàðà?
    ai_output(self, other, "DIA_Gorn_DuHehler_09_03"); //Íå äóìàåøü æå òû, ÷òî âñå ýòî - ÎÄÈÍ óëîâ?
    ai_output(other, self, "DIA_Gorn_DuHehler_15_04"); //Òàê òû ïîñòîÿííî ó÷àñòâóåøü â íàëåòàõ?
    ai_output(self, other, "DIA_Gorn_DuHehler_09_05"); //Åñëè è òàê, òåáå ÿ îá ýòîì íå ñêàæó. Ëè ýòî íå ïîíðàâèòñÿ.
    ai_output(other, self, "DIA_Gorn_DuHehler_15_06"); //Ïîíÿòíî.
    createinvitems(self, itfoapple, 21);
    b_giveinvitems(self, other, itfoapple /*4302*/, 21);
    npc_removeinvitems(other, itfoapple, 21);
    createinvitems(other, itmw_1h_lightguardssword_03, 1);
    createinvitems(other, itfoapple, 5);
    createinvitems(other, itfoloaf, 5);
    createinvitems(other, itfocheese, 5);
    createinvitems(other, itfobeer, 5);
};

instance info_gorn_ncwait(c_info) {
    npc = pc_fighter /*7949*/;
    nr = 1;
    condition = info_gorn_ncwait_condition;
    information = info_gorn_ncwait_info;
    important = true;
};

func int info_gorn_ncwait_condition() {
    if (npc_getdisttowp(self, "NC_PATH52") < 1000) {
        return true;
    };
};

func void info_gorn_ncwait_info() {
    ai_gotonpc(self, hero);
    ai_output(self, other, "Info_Gorn_NCWAIT_09_01"); //À-à, ýòî òû! Ìîé äðóã Ëåñòåð èç Áîëîòíîãî Ëàãåðÿ ðàññêàçàë ìíå î òâîèõ ïîäâèãàõ.
    ai_output(self, other, "Info_Gorn_NCWAIT_09_02"); //Ñîâñåì íåïëîõî äëÿ ÷åëîâåêà, êîòîðûé ïîÿâèëñÿ çäåñü íå òàê óæ äàâíî.
    ai_output(other, self, "Info_Gorn_NCWAIT_15_03"); //Äà, íî íåñêîëüêî ðàç ÿ áûë ñîâñåì áëèçîê ê òîìó, ÷òîáû îòïðàâèòüñÿ íà êîðì ÷åðâÿì.
};

instance info_gorn_mages(c_info) {
    npc = pc_fighter /*7949*/;
    nr = 0;
    condition = info_gorn_mages_condition;
    information = info_gorn_mages_info;
    description = "Ó ìåíÿ âàæíîå ïîñëàíèå äëÿ ìàãîâ Âîäû!";
};

func int info_gorn_mages_condition() {
    if (npc_knowsinfo(hero, info_gorn_ncwait /*11397*/)) {
        return true;
    };
};

func void info_gorn_mages_info() {
    ai_output(other, self, "Info_Gorn_MAGES_15_01"); //Ó ìåíÿ âàæíîå ïîñëàíèå äëÿ ìàãîâ Âîäû!
    ai_output(self, other, "Info_Gorn_MAGES_09_02"); //Òîãäà òåáå íóæíî ïîãîâîðèòü ñ Ñàòóðàñîì. Îí ãëàâíûé ñðåäè âîäÿíûõ ìàãîâ, âñå äíè ïðîâîäèò çà êàêèìè-òî ïèñüìåíàìè èëè ÷åì-òî åùå.
    ai_output(self, other, "Info_Gorn_MAGES_09_03"); //Íî ñòðàæíèêè íà âåðõíåì óðîâíå íå ïðîïóñòÿò òåáÿ ê íåìó, êàêèì áû âàæíûì íè áûëî òâîå ïîñëàíèå.
    ai_output(other, self, "Info_Gorn_MAGES_15_04"); //Íå çàìîëâèøü çà ìåíÿ ñëîâå÷êî?
    ai_output(self, other, "Info_Gorn_MAGES_09_05"); //ß - íåò, íî òû ìîæåøü ïîëó÷èòü ðàçðåøåíèå ó Êðîíîñà, õðàíèòåëÿ ðóäû.
};

instance info_gorn_cronos(c_info) {
    npc = pc_fighter /*7949*/;
    nr = 0;
    condition = info_gorn_cronos_condition;
    information = info_gorn_cronos_info;
    description = "Ãäå ìíå èñêàòü ýòîãî 'õðàíèòåëÿ ðóäû'?";
};

func int info_gorn_cronos_condition() {
    if (npc_knowsinfo(hero, info_gorn_mages /*11400*/)) {
        return true;
    };
};

func void info_gorn_cronos_info() {
    var c_npc cronos;

    ai_output(other, self, "Info_Gorn_CRONOS_15_01"); //Ãäå ìíå èñêàòü ýòîãî 'õðàíèòåëÿ ðóäû'?
    ai_output(self, other, "Info_Gorn_CRONOS_09_01a"); //Åñëè ïîéäåøü îòñþäà, çà äàìáîé óâèäèøü áîëüøóþ ïåùåðó.
    ai_output(self, other, "Info_Gorn_CRONOS_09_02"); //Êðîíîñ îáû÷íî ñòîèò ó ðåøåòêè âîçëå æåëåçíîé ãîðû.
    ai_output(self, other, "Info_Gorn_CRONOS_09_03"); //Íî íàø õðàíèòåëü - äîâîëüíî âûñîêîìåðíûé òèï. Òåáå ïðèäåòñÿ óáåäèòü åãî â òîì, ÷òî òâîå ïîñëàíèå äåéñòâèòåëüíî âàæíî.
    cronos = hlp_getnpc(kdw_604_cronos);
    cronos.aivar[7] = true;
    b_logentry(ch3_escapeplannc, ch3_escapeplannc_6);
    npc_exchangeroutine(self, "start");
};

instance info_gorn_ruinwait(c_info) {
    npc = pc_fighter /*7949*/;
    nr = 2;
    condition = info_gorn_ruinwait_condition;
    information = info_gorn_ruinwait_info;
    important = true;
};

func int info_gorn_ruinwait_condition() {
    if (npc_getdisttowp(self, "OW_PATH_ABYSS_4") < 1000) {
        return 1;
    };
};

func void info_gorn_ruinwait_info() {
    ai_gotonpc(self, hero);
    ai_output(self, other, "Info_Gorn_RUINWAIT_09_01"); //Ïðèâåò, ñàëàãà! Êàê âèäèøü, ýòîò ìèð òåñåí, è êîëîíèÿ íå ÿâëÿåòñÿ èñêëþ÷åíèåì.
    ai_output(self, other, "Info_Gorn_RUINWAIT_09_02"); //Âñå âðåìÿ íàòûêàåøüñÿ íà ñâîèõ çíàêîìûõ.
};

instance info_gorn_ruinwhat(c_info) {
    npc = pc_fighter /*7949*/;
    nr = 0;
    condition = info_gorn_ruinwhat_condition;
    information = info_gorn_ruinwhat_info;
    description = "×åì òû çàíèìàåøüñÿ?";
};

func int info_gorn_ruinwhat_condition() {
    if (npc_knowsinfo(hero, info_gorn_ruinwait /*11407*/)) {
        return 1;
    };
};

func void info_gorn_ruinwhat_info() {
    ai_output(other, self, "Info_Gorn_RUINWHAT_15_01"); //×òî òû çäåñü äåëàåøü?
    ai_output(self, other, "Info_Gorn_RUINWHAT_09_02"); //À-à, ïûòàþñü ïîéìàòü çà õâîñò îäíó ñòàðóþ ëåãåíäó.
    ai_output(other, self, "Info_Gorn_RUINWHAT_15_03"); //Ëåãåíäó?
    ai_output(self, other, "Info_Gorn_RUINWHAT_09_04"); //Äà, ìîé ïðèÿòåëü èç Ñòàðîãî Ëàãåðÿ, Ìèëüòåí, ãîâîðèë ìíå, ÷òî êîãäà-òî çäåñü æèëè ìîíàõè.
    ai_output(self, other, "Info_Gorn_RUINWHAT_09_05"); //Êîíå÷íî, ýòî áûëî çàäîëãî äî òîãî, êàê ïîÿâèëñÿ Áàðüåð.
    ai_output(self, other, "Info_Gorn_RUINWHAT_09_06"); //Ãîâîðÿò, îíè ìîëèëèñü áîãó, êîòîðûé äàðîâàë èì ñïîñîáíîñòü ïðåâðàùàòüñÿ â æèâîòíûõ.
    ai_output(self, other, "Info_Gorn_RUINWHAT_09_07"); //Óâåðåí, ñî ñòàðûõ âðåìåí çäåñü äîëæíà áûëà ñîõðàíèòüñÿ êó÷à ñîêðîâèù.
    if (!npc_knowsinfo(hero, info_gorn_ruinfocus /*11413*/)) {
        ai_output(self, other, "Info_Gorn_RUINWHAT_09_08"); //×òî ïðèâåëî òåáÿ ñþäà?
    };
};

instance info_gorn_ruinfocus(c_info) {
    npc = pc_fighter /*7949*/;
    nr = 0;
    condition = info_gorn_ruinfocus_condition;
    information = info_gorn_ruinfocus_info;
    description = "ß èùó þíèòîð.";
};

func int info_gorn_ruinfocus_condition() {
    if (npc_knowsinfo(hero, info_gorn_ruinwait /*11407*/)) {
        return 1;
    };
};

func void info_gorn_ruinfocus_info() {
    ai_output(other, self, "Info_Gorn_RUINFOCUS_15_01"); //ß èùó þíèòîð.
    ai_output(other, self, "Info_Gorn_RUINFOCUS_15_02"); //Îí äîëæåí áûòü ãäå-òî çäåñü.
    ai_output(self, other, "Info_Gorn_RUINFOCUS_09_03"); //Ýòà øòóêà ìîæåò áûòü â ðóèíàõ ñòàðîãî ìîíàñòûðÿ ïî òó ñòîðîíó óùåëüÿ.
};

instance info_gorn_ruinjoin(c_info) {
    npc = pc_fighter /*7949*/;
    nr = 0;
    condition = info_gorn_ruinjoin_condition;
    information = info_gorn_ruinjoin_info;
    description = "Ìû ìîãëè áû ïîéòè âìåñòå.";
};

func int info_gorn_ruinjoin_condition() {
    if (npc_knowsinfo(hero, info_gorn_ruinfocus /*11413*/) && npc_knowsinfo(hero, info_gorn_ruinwhat /*11410*/)) {
        return 1;
    };
};

func void info_gorn_ruinjoin_info() {
    ai_output(other, self, "Info_Gorn_RUINJOIN_15_01"); //Ìû ìîãëè áû ïîéòè âìåñòå.
    ai_output(self, other, "Info_Gorn_RUINJOIN_09_02"); //Õîðîøàÿ èäåÿ. Òóò ïîëíî ãëîðõîâ.
    ai_output(self, other, "Info_Gorn_RUINJOIN_09_03"); //Îäèí ãëîðõ - íå ïðîáëåìà äëÿ îïûòíîãî îõîòíèêà, íî, ê ñîæàëåíèþ, ÷àùå âñåãî îíè îõîòÿòñÿ ñòàÿìè.
    ai_output(self, other, "Info_Gorn_RUINJOIN_09_04"); //À ñòàÿ ãëîðõîâ áåç òðóäà ïîðâåò íà òðÿïêè ñàìîãî îïûòíîãî âîèíà.
    ai_output(other, self, "Info_Gorn_RUINJOIN_15_05"); //Òàê ìû èäåì âìåñòå?
    ai_output(self, other, "Info_Gorn_RUINJOIN_09_06"); //Äà, íî ïðåæäå ÷åì èäòè, ÿ õî÷ó îñìîòðåòü óùåëüå. Íå ëþáëþ îñòàâëÿòü âðàãà çà ñïèíîé.
    ai_output(self, other, "Info_Gorn_RUINJOIN_09_07"); //Èäåì, ÿ íàøåë äîðîãó.
    log_createtopic(ch3_monasteryruin, log_mission);
    log_settopicstatus(ch3_monasteryruin, log_running);
    b_logentry(ch3_monasteryruin, ch3_monasteryruin_2);
    b_logentry(ch3_monasteryruin, ch3_monasteryruin_3);
    self.aivar[36] = true;
    ai_stopprocessinfos(self);
    npc_exchangeroutine(self, "RuinAbyss");
};

instance info_gorn_ruinabyss(c_info) {
    npc = pc_fighter /*7949*/;
    condition = info_gorn_ruinabyss_condition;
    information = info_gorn_ruinabyss_info;
    important = true;
};

func int info_gorn_ruinabyss_condition() {
    if (npc_knowsinfo(hero, info_gorn_ruinjoin /*11416*/) && (npc_getdisttowp(self, "OW_ABYSS_TO_CAVE_MOVE6") < 1000)) {
        return 1;
    };
};

func void info_gorn_ruinabyss_info() {
    ai_gotonpc(self, hero);
    ai_output(self, other, "Info_Gorn_RUINABYSS_09_01"); //Âîò ýòî ÿ íàçûâàþ óäà÷åé. Ïîõîæå, ýòó ïåùåðó èñïîëüçîâàëè êàê ñêëàä.
    ai_output(self, other, "Info_Gorn_RUINABYSS_09_02"); //Ïî÷åìó áû òåáå íå ïîéòè âïåðåä? Õî÷ó óáåäèòüñÿ, ÷òî íèêòî íå áóäåò ïîäæèäàòü íàñ íà îáðàòíîì ïóòè.
    b_logentry(ch3_monasteryruin, ch3_monasteryruin_4);
    ai_stopprocessinfos(self);
    npc_exchangeroutine(self, "RuinFollow");
};

instance info_gorn_ruinleave(c_info) {
    npc = pc_fighter /*7949*/;
    condition = info_gorn_ruinleave_condition;
    information = info_gorn_ruinleave_info;
    important = true;
};

func int info_gorn_ruinleave_condition() {
    if ((npc_knowsinfo(hero, info_gorn_ruinjoin /*11416*/) && (npc_getdisttowp(hero, "OW_PATH_175_MEATBUG") > 15000)) && (!npc_knowsinfo(hero, info_gorn_ruingate /*11437*/))) {
        return 1;
    };
};

func void info_gorn_ruinleave_info() {
    ai_gotonpc(self, hero);
    ai_output(self, other, "Info_Gorn_RUINLEAVE_09_01"); //Êàæåòñÿ, òû ïîòåðÿë èíòåðåñ ê ìîíàñòûðñêèì ðóèíàì.
    ai_output(self, other, "Info_Gorn_RUINLEAVE_09_02"); //ß ïîéäó îäèí.
    ai_output(self, other, "Info_Gorn_RUINLEAVE_09_03"); //Åñëè ïåðåäóìàåøü, ñòóïàé ñëåäîì.
    self.aivar[36] = false;
    npc_exchangeroutine(self, "RuinWall");
    ai_stopprocessinfos(self);
};

instance info_gorn_ruinwall(c_info) {
    npc = pc_fighter /*7949*/;
    condition = info_gorn_ruinwall_condition;
    information = info_gorn_ruinwall_info;
    important = true;
};

func int info_gorn_ruinwall_condition() {
    if ((npc_knowsinfo(hero, info_gorn_ruinjoin /*11416*/) || npc_knowsinfo(hero, info_gorn_ruinleave /*11422*/)) && (npc_getdisttowp(hero, "OW_PATH_175_GATE1") < 1000)) {
        return 1;
    };
};

func void info_gorn_ruinwall_info() {
    ai_gotonpc(self, hero);
    ai_output(self, other, "Info_Gorn_RUINWALL_09_01"); //Ýòè ÷åðòîâû âîðîòà! Ãîâîðÿò, ÷òî åùå íèêîìó â êîëîíèè íå óäàâàëîñü îòêðûòü èõ.
    ai_output(self, other, "Info_Gorn_RUINWALL_09_02"); //Òîëüêî ýòèì ìåëêèì òâàðÿì óäàåòñÿ áåç òðóäà ïðîíèêàòü âî âíóòðåííèé äâîð.
    b_logentry(ch3_monasteryruin, ch3_monasteryruin_5);
    ai_stopprocessinfos(self);
    npc_exchangeroutine(self, "RuinWall");
};

instance info_gorn_ruinwallwhat(c_info) {
    npc = pc_fighter /*7949*/;
    nr = 0;
    condition = info_gorn_ruinwallwhat_condition;
    information = info_gorn_ruinwallwhat_info;
    permanent = true;
    description = "×òî òåïåðü?";
};

func int info_gorn_ruinwallwhat_condition() {
    if (npc_knowsinfo(hero, info_gorn_ruinwall /*11425*/) && (!npc_knowsinfo(hero, info_gorn_ruingate /*11437*/))) {
        return true;
    };
};

func void info_gorn_ruinwallwhat_info() {
    ai_output(other, self, "Info_Gorn_RUINWALLWHAT_15_01"); //×òî ñëó÷èëîñü?
    ai_output(self, other, "Info_Gorn_RUINWALLWHAT_09_02"); //Íóæíî íàéòè ñïîñîá, êàê ïåðåáðàòüñÿ ÷åðåç âîðîòà.
};

instance info_gorn_ruinledge(c_info) {
    npc = pc_fighter /*7949*/;
    condition = info_gorn_ruinledge_condition;
    information = info_gorn_ruinledge_info;
    important = true;
};

func int info_gorn_ruinledge_condition() {
    if ((npc_knowsinfo(hero, info_gorn_ruinjoin /*11416*/) && (!npc_knowsinfo(hero, info_gorn_ruinsuccess /*11443*/))) && (npc_getdisttowp(hero, "OW_MONSTER_NAVIGATE_02") < 1000)) {
        return 1;
    };
};

func void info_gorn_ruinledge_info() {
    ai_gotonpc(self, hero);
    ai_output(self, other, "Info_Gorn_RUINLEDGE_09_01"); //Âèäèøü ýòó ïëîùàäêó, âîí òàì? Íî îíà âûñîêî, íå çàáðàòüñÿ.
    ai_output(self, other, "Info_Gorn_RUINLEDGE_09_02"); //Ïðèäåòñÿ ïîèñêàòü äðóãîé ïóòü.
    ai_stopprocessinfos(self);
};

instance info_gorn_ruinplatform(c_info) {
    npc = pc_fighter /*7949*/;
    condition = info_gorn_ruinplatform_condition;
    information = info_gorn_ruinplatform_info;
    important = true;
};

func int info_gorn_ruinplatform_condition() {
    if ((npc_knowsinfo(hero, info_gorn_ruinjoin /*11416*/) && (!npc_knowsinfo(hero, info_gorn_ruinsuccess /*11443*/))) && (npc_getdisttowp(hero, "OW_PATH_176_TEMPELFOCUS4") < 300)) {
        return 1;
    };
};

func void info_gorn_ruinplatform_info() {
    ai_gotonpc(self, hero);
    ai_output(self, other, "Info_Gorn_RUINPLATFORM_09_01"); //Ïîõîæå íà êàêîé-òî ïüåäåñòàë.
    ai_output(self, other, "Info_Gorn_RUINPLATFORM_09_02"); //Ïîõîæå, òîò àðòåôàêò, êîòîðûé òû èùåøü, ëåæàë çäåñü.
    ai_stopprocessinfos(self);
};

instance info_gorn_ruingate(c_info) {
    npc = pc_fighter /*7949*/;
    condition = info_gorn_ruingate_condition;
    information = info_gorn_ruingate_info;
    important = true;
};

func int info_gorn_ruingate_condition() {
    if ((npc_knowsinfo(hero, info_gorn_ruinjoin /*11416*/) || npc_knowsinfo(hero, info_gorn_ruinleave /*11422*/)) && monasteryruin_gateopen) {
        return true;
    };
};

func void info_gorn_ruingate_info() {
    ai_gotonpc(self, hero);
    ai_output(self, other, "Info_Gorn_RUINGATE_09_01"); //Òû âñå-òàêè îòêðûë ýòè âîðîòà! Õèòðîå çàêëèíàíèå!
    ai_output(other, self, "Info_Gorn_RUINGATE_15_02"); //Èäåì äàëüøå.
    b_logentry(ch3_monasteryruin, ch3_monasteryruin_6);
    b_logentry(ch3_monasteryruin, ch3_monasteryruin_7);
    self.aivar[36] = true;
    npc_exchangeroutine(self, "RuinFollowInside");
    ai_stopprocessinfos(self);
};

instance info_gorn_ruinleaveinside(c_info) {
    npc = pc_fighter /*7949*/;
    condition = info_gorn_ruinleaveinside_condition;
    information = info_gorn_ruinleaveinside_info;
    important = true;
};

func int info_gorn_ruinleaveinside_condition() {
    if ((npc_knowsinfo(hero, info_gorn_ruingate /*11437*/) && (npc_getdisttowp(hero, "OW_PATH_ABYSS_CROSS_6") < 1000)) && (!npc_hasitems(hero, focus_4))) {
        return true;
    };
};

func void info_gorn_ruinleaveinside_info() {
    ai_gotonpc(self, hero);
    ai_output(self, other, "Info_Gorn_RUINLEAVEINSIDE_09_01"); //Êàæåòñÿ, òû ïîòåðÿë èíòåðåñ ê ìîíàñòûðñêèì ðóèíàì.
    ai_output(self, other, "Info_Gorn_RUINLEAVEINSIDE_09_02"); //ß ïîéäó îäèí.
    ai_output(self, other, "Info_Gorn_RUINLEAVEINSIDE_09_03"); //Åñëè ïåðåäóìàåøü, ñòóïàé ñëåäîì.
    self.aivar[36] = false;
    npc_exchangeroutine(self, "RuinStay");
    ai_stopprocessinfos(self);
};

instance info_gorn_ruinsuccess(c_info) {
    npc = pc_fighter /*7949*/;
    condition = info_gorn_ruinsuccess_condition;
    information = info_gorn_ruinsuccess_info;
    important = true;
};

func int info_gorn_ruinsuccess_condition() {
    if (npc_knowsinfo(hero, info_gorn_ruinjoin /*11416*/) && npc_hasitems(hero, focus_4)) {
        return true;
    };
};

func void info_gorn_ruinsuccess_info() {
    ai_gotonpc(self, hero);
    ai_output(self, other, "Info_Gorn_RUINSUCCESS_09_01"); //Òû âñå-òàêè íàøåë ñâîé àðòåôàêò!
    ai_output(other, self, "Info_Gorn_RUINSUCCESS_15_02"); //Àãà. ß äîëæåí îòíåñòè åãî ìàãàì Âîäû.
    ai_output(self, other, "Info_Gorn_RUINSUCCESS_09_03"); //ß ñîñòàâëþ òåáå êàìïàíèþ åùå íà êàêîå-òî âðåìÿ.
    b_logentry(ch3_monasteryruin, ch3_monasteryruin_8);
    ai_stopprocessinfos(self);
    npc_exchangeroutine(self, "RuinYard");
    wld_insertnpc(youngtroll /*6849*/, "OW_PATH_176");
};

instance info_gorn_ruintroll(c_info) {
    npc = pc_fighter /*7949*/;
    condition = info_gorn_ruintroll_condition;
    information = info_gorn_ruintroll_info;
    important = true;
};

func int info_gorn_ruintroll_condition() {
    if (npc_knowsinfo(hero, info_gorn_ruinsuccess /*11443*/) && (npc_getdisttowp(hero, "OW_PATH_SNAPPER04_SPAWN01") < 1000)) {
        return true;
    };
};

func void info_gorn_ruintroll_info() {
    ai_gotonpc(self, hero);
    ai_output(self, other, "Info_Gorn_RUINTROLL_09_01"); //Î, ×ÅÐÒ!!! ×òî ýòî çà òâàðü òàì?
    ai_output(other, self, "Info_Gorn_RUINTROLL_15_02"); //Îòêóäà âçÿëîñü ÝÒÎ?
    ai_output(self, other, "Info_Gorn_RUINTROLL_09_03"); //Ïîõîæå íà îäíîãî èç ýòèõ íåóÿçâèìûõ òðîëëåé, òîëüêî ðàçìåðîì ïîìåíüøå!
    ai_output(self, other, "Info_Gorn_RUINTROLL_09_04"); //×òî áû ýòî íè áûëî, åñëè ìû õîòèì óáðàòüñÿ îòñþäà, íàì ïðèäåòñÿ ðàçäåëàòüñÿ ñ ýòîé òâàðüþ.
    ai_stopprocessinfos(self);
    ai_drawweapon(self);
    ai_setwalkmode(self, npc_run);
};

instance info_gorn_ruinvictory(c_info) {
    npc = pc_fighter /*7949*/;
    condition = info_gorn_ruinvictory_condition;
    information = info_gorn_ruinvictory_info;
    important = true;
};

func int info_gorn_ruinvictory_condition() {
    var c_npc ytroll;

    ytroll = hlp_getnpc(youngtroll);
    if (npc_knowsinfo(hero, info_gorn_ruintroll /*11446*/) && npc_isdead(ytroll)) {
        return true;
    };
};

func void info_gorn_ruinvictory_info() {
    ai_gotonpc(self, hero);
    ai_output(self, other, "Info_Gorn_RUINVICTORY_09_01"); //Íåïðîñòàÿ ðàáîòåíêà.
    ai_output(other, self, "Info_Gorn_RUINVICTORY_15_02"); //Óô! Ñ ÷óäîâèùåì ìû ðàçîáðàëèñü, íî åñëè ýòî áûë âñåãî ëèøü ÌÎËÎÄÎÉ òðîëëü...
    ai_output(self, other, "Info_Gorn_RUINVICTORY_09_03"); //òîãäà íàì ëó÷øå íå ïîïàäàòüñÿ íà ãëàçà åãî ðîäèòåëÿì, âåðíî?
    ai_output(other, self, "Info_Gorn_RUINVICTORY_15_04"); //×òî-òî âðîäå òîãî.
    ai_output(self, other, "Info_Gorn_RUINVICTORY_09_05"); //Çäåñü íàøè ïóòè ðàñõîäÿòñÿ. ß åùå íåíàäîëãî îñòàíóñü - õî÷ó îñìîòðåòü îêðåñòíîñòè.
    ai_output(self, other, "Info_Gorn_RUINVICTORY_09_06"); //Íî äóìàþ, ìû åùå âñòðåòèìñÿ. Óâèäèìñÿ, äðóã ìîé!
    b_logentry(ch3_monasteryruin, ch3_monasteryruin_9);
    b_logentry(ch3_monasteryruin, ch3_monasteryruin_10);
    self.aivar[36] = false;
    npc_exchangeroutine(self, "RuinStay");
    ai_stopprocessinfos(self);
};

instance info_gorn_diegomilten(c_info) {
    npc = pc_fighter /*7949*/;
    nr = 0;
    condition = info_gorn_diegomilten_condition;
    information = info_gorn_diegomilten_info;
    description = "Âîçëå Ñòàðîãî Ëàãåðÿ ÿ âñòðåòèë Äèåãî è Ìèëüòåíà!";
};

func int info_gorn_diegomilten_condition() {
    if (npc_knowsinfo(hero, info_diego_ocfavor /*11923*/)) {
        return true;
    };
};

func void info_gorn_diegomilten_info() {
    ai_output(hero, self, "Info_Gorn_DIEGOMILTEN_15_01"); //Âîçëå Ñòàðîãî Ëàãåðÿ ÿ âñòðåòèë Äèåãî è Ìèëüòåíà!
    ai_output(self, hero, "Info_Gorn_DIEGOMILTEN_09_02"); //Õîðîøèå íîâîñòè!
    ai_output(hero, self, "Info_Gorn_DIEGOMILTEN_15_03"); //Îíè õîòÿò âñòðåòèòüñÿ ñ òîáîé è ñ Ëåñòåðîì. Òàì æå, ãäå è âñåãäà.
    ai_output(self, hero, "Info_Gorn_DIEGOMILTEN_09_04"); //Ñïàñèáî. Â íàøè âðåìåíà íåò íè÷åãî öåííåå äðóçåé.
    ai_output(self, hero, "Info_Gorn_DIEGOMILTEN_09_05"); //Òû óæå ïî÷òè ñòàë îäíèì èç íàñ. Íà òåáÿ ìîæíî ïîëîæèòüñÿ!
    b_givexp(xp_messageforgorn);
    if (warned_gorn_or_lester == false) {
        warned_gorn_or_lester = true;
    }
    else {
        b_logentry(ch4_4friends, ch4_4friends_1);
        log_settopicstatus(ch4_4friends, log_success);
    };
};

instance info_gorn_freemine(c_info) {
    npc = pc_fighter /*7949*/;
    nr = 0;
    condition = info_gorn_freemine_condition;
    information = info_gorn_freemine_info;
    description = "×òî ïðîèñõîäèò â Ñâîáîäíîé Øàõòå?";
};

func int info_gorn_freemine_condition() {
    if (npc_knowsinfo(hero, info_saturas_ambush /*10130*/) && (!findxardas)) {
        return true;
    };
};

func void info_gorn_freemine_info() {
    ai_output(hero, self, "Info_Gorn_FREEMINE_15_01"); //×òî ïðîèñõîäèò â Ñâîáîäíîé Øàõòå?
    ai_output(self, hero, "Info_Gorn_FREEMINE_09_02"); //Ïîñëå òîãî êàê ÿ âåðíóëñÿ ñ ìîíàñòûðñêèõ ðóèí, ÿ çàõîòåë çàãëÿíóòü ê Îêèëó, õîçÿèíó Ñâîáîäíîé Øàõòû.
    ai_output(self, hero, "Info_Gorn_FREEMINE_09_03"); //Íî òàì ÿ íàøåë òîëüêî òðóïû...
    ai_output(self, hero, "Info_Gorn_FREEMINE_09_04"); //ß âèäåë, êàê ñòðàæíèêè ñòðîÿò óêðåïëåíèÿ íåïîäàëåêó îò âõîäà â øàõòó.
    ai_output(hero, self, "Info_Gorn_FREEMINE_15_05"); //Êàê ìîãëè äâà äåñÿòêà ñòðàæíèêîâ ñïðàâèòüñÿ ñî âñåìè íàåìíèêàìè?
    ai_output(self, hero, "Info_Gorn_FREEMINE_09_06"); //Ýòî ïîõîæå íà çàñàäó. Íèêòî íå îæèäàë àòàêè ñî ñòîðîíû ãîð.
    ai_output(self, hero, "Info_Gorn_FREEMINE_09_07"); //Òû æå çíàåøü: âíåçàïíîñòü óâåëè÷èâàåò ñèëó íàïàäàþùèõ.
};

instance info_gorn_guardnc(c_info) {
    npc = pc_fighter /*7949*/;
    nr = 0;
    condition = info_gorn_guardnc_condition;
    information = info_gorn_guardnc_info;
    description = "×òî òû òåïåðü ñîáèðàåøüñÿ äåëàòü?";
};

func int info_gorn_guardnc_condition() {
    if (npc_knowsinfo(hero, info_saturas_ambush /*10130*/)) {
        return true;
    };
};

func void info_gorn_guardnc_info() {
    ai_output(hero, self, "Info_Gorn_GUARDNC_15_01"); //×òî òû òåïåðü ñîáèðàåøüñÿ äåëàòü?
    ai_output(self, hero, "Info_Gorn_GUARDNC_09_02"); //Ïðèäåòñÿ ïåðåñìîòðåòü âñþ íàøó ñèñòåìó îáîðîíû. Íà ýòî ïîòðåáóåòñÿ âðåìÿ.
    ai_output(self, hero, "Info_Gorn_GUARDNC_09_03"); //Äî òåõ ïîð ïîêà íå ïîäòÿíåòñÿ Ëè ñî ñâîèìè ðåáÿòàìè, ÿ ïðèñîåäèíþñü ê îòðÿäó Êîðäà.
    ai_output(hero, self, "Info_Gorn_GUARDNC_15_04"); //Íå ñîáèðàåòåñü â êîíòðàòàêó?
    ai_output(self, hero, "Info_Gorn_GUARDNC_09_05"); //Ïîêà åùå íåò, íî äàé ñðîê.
    ai_output(self, hero, "Info_Gorn_GUARDNC_09_06"); //Åñëè ÿ òåáå çà÷åì-òî ïîíàäîáëþñü, èäè îòñþäà ïî íàïðàâëåíèþ ê øàõòå. ß áóäó òàì, íà ñòðàæå.
    b_story_cordspost();
    ai_stopprocessinfos(self);
};

instance info_gorn_guardncrunning(c_info) {
    npc = pc_fighter /*7949*/;
    nr = 0;
    condition = info_gorn_guardncrunning_condition;
    information = info_gorn_guardncrunning_info;
    permanent = true;
    description = "Êàê äåëà?";
};

func int info_gorn_guardncrunning_condition() {
    if (npc_knowsinfo(hero, info_gorn_guardnc /*11459*/) && (!urshak_spokeofulumulu)) {
        return true;
    };
};

func void info_gorn_guardncrunning_info() {
    ai_output(hero, self, "Info_Gorn_GUARDNCRUNNING_15_01"); //Êàê äåëà?
    ai_output(self, hero, "Info_Gorn_GUARDNCRUNNING_09_02"); //Âñå òèõî. Ñâîáîäíàÿ Øàõòà ñëîâíî âûìåðëà.
    ai_output(self, hero, "Info_Gorn_GUARDNCRUNNING_09_03"); //Ëè ïî-ïðåæíåìó çàíÿò îðãàíèçàöèåé îáîðîíû.
};

instance info_gorn_post(c_info) {
    npc = pc_fighter /*7949*/;
    condition = info_gorn_post_condition;
    information = info_gorn_post_info;
    important = true;
};

func int info_gorn_post_condition() {
    if (urshak_spokeofulumulu) {
        return true;
    };
};

func void info_gorn_post_info() {
    ai_gotonpc(self, hero);
    ai_output(self, hero, "Info_Gorn_POST_09_01"); //Òû êàê ðàç âîâðåìÿ! Ìû ãîòîâèìñÿ ê êîíòðàòàêå.
    ai_output(self, hero, "Info_Gorn_POST_09_02"); //Ïåðâûé øàã - îòâîåâàòü Ñâîáîäíóþ Øàõòó.
};

instance info_gorn_takeback(c_info) {
    npc = pc_fighter /*7949*/;
    nr = 0;
    condition = info_gorn_takeback_condition;
    information = info_gorn_takeback_info;
    description = "Òû ïëàíèðóåøü çàõâàòèòü åå ñ îòðÿäîì èç ÷åòûðåõ ÷åëîâåê?";
};

func int info_gorn_takeback_condition() {
    if (npc_knowsinfo(hero, info_gorn_post /*11465*/)) {
        return true;
    };
};

func void info_gorn_takeback_info() {
    var int guild;

    ai_output(hero, self, "Info_Gorn_TAKEBACK_15_01"); //Òû ïëàíèðóåøü çàõâàòèòü åå ñ îòðÿäîì èç ÷åòûðåõ ÷åëîâåê? Ãäå âñå íàåìíèêè?
    ai_output(self, hero, "Info_Gorn_TAKEBACK_09_02"); //Àòàêîâàòü â ëîá íå ãîäèòñÿ. Ëþäè Ãîìåçà ñëèøêîì õîðîøî ïîäãîòîâèëèñü ê ýòîìó!
    ai_output(self, hero, "Info_Gorn_TAKEBACK_09_03"); //Íî ìû ñîáèðàåìñÿ ïðîäåëàòü âñå íåçàìåòíî. Áóäåì ñíèìàòü âðàãîâ îäíîãî çà äðóãèì - ýòî ìîæåò ñðàáîòàòü.
    ai_output(self, hero, "Info_Gorn_TAKEBACK_09_04"); //Ëè ïðîñèë ìåíÿ ïåðåäàòü òåáå êîå-÷òî.
    guild = npc_gettrueguild(hero);
    if (guild == gil_sld) {
        ai_output(self, hero, "Info_Gorn_TAKEBACK_09_05"); //Òû áûë èçáðàí äëÿ ýòîãî çàäàíèÿ êàê îäèí èç ëó÷øèõ íàåìíèêîâ.
    }
    else if (guild == gil_kdw) {
        ai_output(self, hero, "Info_Gorn_TAKEBACK_09_06"); //Òû áûë èçáðàí äëÿ ýòîãî çàäàíèÿ êàê îïûòíûé âîèí è îäèí èç ìàãîâ Êðóãà Âîäû.
    }
    else if (guild == gil_org) {
        ai_output(self, hero, "Info_Gorn_TAKEBACK_09_07"); //Òû áûë èçáðàí äëÿ ýòîãî çàäàíèÿ êàê îäèí èç ëó÷øèõ âîðîâ.
    }
    else {
        ai_output(self, hero, "Info_Gorn_TAKEBACK_09_08"); //Íåñìîòðÿ íà òî ÷òî òû íå îäèí èç íàñ, òû íå ðàç ïîìîãàë íàøåìó Ëàãåðþ è âñåöåëî äîêàçàë ñâîþ ïðåäàííîñòü.
        ai_output(self, hero, "Info_Gorn_TAKEBACK_09_09"); //Ìû äàåì òåáå øàíñ âûïîëíèòü åùå îäíî çàäàíèå!
    };
    ai_output(self, hero, "Info_Gorn_TAKEBACK_09_10"); //ß ïîéäó ñ òîáîé. Âìåñòå ìû ñìîæåì ñäåëàòü ýòî!
};

instance info_gorn_second(c_info) {
    npc = pc_fighter /*7949*/;
    nr = 0;
    condition = info_gorn_second_condition;
    information = info_gorn_second_info;
    description = "Ýòî ïåðâûé øàã. À âòîðîé?";
};

func int info_gorn_second_condition() {
    if (npc_knowsinfo(hero, info_gorn_post /*11465*/)) {
        return true;
    };
};

func void info_gorn_second_info() {
    ai_output(hero, self, "Info_Gorn_SECOND_15_01"); //Ýòî ïåðâûé øàã. À âòîðîé?
    ai_output(self, hero, "Info_Gorn_SECOND_09_02"); //Êàê òîëüêî øàõòà ñíîâà áóäåò ó íàñ, ìû íà÷íåì èñêàòü ïðîõîä â ãîðàõ, êîòîðûì âîñïîëüçîâàëèñü ëþäè Ãîìåçà.
    ai_output(self, hero, "Info_Gorn_SECOND_09_03"); //Êîãäà ýòîò ïóòü áóäåò îòðåçàí, ñèòóàöèÿ ñíîâà áóäåò ó íàñ ïîä êîíòðîëåì.
    ai_output(hero, self, "Info_Gorn_SECOND_15_04"); //Ïîíèìàþ.
};

instance info_gorn_whyme(c_info) {
    npc = pc_fighter /*7949*/;
    nr = 0;
    condition = info_gorn_whyme_condition;
    information = info_gorn_whyme_info;
    description = "Ïî÷åìó âû âûáðàëè èìåííî ìåíÿ?";
};

func int info_gorn_whyme_condition() {
    if (npc_knowsinfo(hero, info_gorn_takeback /*11468*/)) {
        return true;
    };
};

func void info_gorn_whyme_info() {
    ai_output(hero, self, "Info_Gorn_WHYME_15_01"); //Ïî÷åìó âû âûáðàëè èìåííî ìåíÿ?
    ai_output(self, hero, "Info_Gorn_WHYME_09_02"); //Òû óæå íå ðàç äîêàçûâàë, ÷òî òåáå ïðèñóùè îäíîâðåìåííî è òðåçâîñòü óìà, è áåñøàáàøíàÿ õðàáðîñòü!
    ai_output(self, hero, "Info_Gorn_WHYME_09_03"); //Ïîìèìî ýòîãî, òû çíàåøü Ñòàðûé Ëàãåðü è åãî ñòðàæíèêîâ ëó÷øå, ÷åì êòî-ëèáî èç íàñ.
    ai_output(self, hero, "Info_Gorn_WHYME_09_04"); //Òû ëó÷øå âñåõ ìîæåøü ñïðàâèòüñÿ ñ ýòèì íåïðîñòûì çàäàíèåì.
};

instance info_gorn_kickbutt(c_info) {
    npc = pc_fighter /*7949*/;
    nr = 0;
    condition = info_gorn_kickbutt_condition;
    information = info_gorn_kickbutt_info;
    description = "Ëàäíî, ïîéäåì ïîêàæåì, íà ÷òî ñïîñîáíû ñâîáîäíûå ëþäè!";
};

func int info_gorn_kickbutt_condition() {
    if (npc_knowsinfo(hero, info_gorn_whyme /*11475*/) && (!npc_knowsinfo(hero, info_gorn_myway /*11481*/))) {
        return true;
    };
};

func void info_gorn_kickbutt_info() {
    ai_output(hero, self, "Info_Gorn_KICKBUTT_15_01"); //Ëàäíî, ïîéäåì ïîêàæåì íåïðîøåííûì ãîñòÿì, íà ÷òî ñïîñîáíû ñâîáîäíûå ëþäè!
    ai_output(self, hero, "Info_Gorn_KICKBUTT_09_02"); //Íè÷åãî äðóãîãî ÿ îò òåáÿ è íå îæèäàë!
    ai_output(self, hero, "Info_Gorn_KICKBUTT_09_03"); //Âîò, âîçüìè ýòîò êëþ÷. Îí îò äâåðè êàðàóëüíîé ó âõîäà â øàõòó.
    b_story_gornjoins();
};

instance info_gorn_myway(c_info) {
    npc = pc_fighter /*7949*/;
    nr = 0;
    condition = info_gorn_myway_condition;
    information = info_gorn_myway_info;
    description = "Ïî÷åìó áû è íåò. Ìíå æå âñå ðàâíî íóæíî ïîïàñòü â øàõòó!";
};

func int info_gorn_myway_condition() {
    if (npc_knowsinfo(hero, info_gorn_whyme /*11475*/) && (!npc_knowsinfo(hero, info_gorn_kickbutt /*11478*/))) {
        return true;
    };
};

func void info_gorn_myway_info() {
    ai_output(hero, self, "Info_Gorn_MYWAY_15_01"); //Ïî÷åìó áû è íåò. Ìíå æå âñå ðàâíî íóæíî ïîïàñòü â øàõòó!
    ai_output(self, hero, "Info_Gorn_MYWAY_09_02"); //Ïîíèìàþ, ÷òî ó òåáÿ íà òî åñòü ÑÂÎÈ ïðè÷èíû, íî âñå-òàêè ÿ ðàä, ÷òî ìû âìåñòå!
    ai_output(self, hero, "Info_Gorn_MYWAY_09_03"); //Âîò, âîçüìè ýòîò êëþ÷. Îí îò äâåðè êàðàóëüíîé ó âõîäà â øàõòó.
    b_story_gornjoins();
};

instance info_gorn_wolf(c_info) {
    npc = pc_fighter /*7949*/;
    condition = info_gorn_wolf_condition;
    information = info_gorn_wolf_info;
    important = true;
};

func int info_gorn_wolf_condition() {
    if (gorn_joinedforfm && (npc_getdisttowp(hero, "OW_PATH_076") < 500)) {
        return true;
    };
};

func void info_gorn_wolf_info() {
    ai_gotonpc(self, hero);
    ai_output(self, hero, "Info_Gorn_WOLF_09_01"); //Äà, ÷óòü íå çàáûë!
    ai_output(self, hero, "Info_Gorn_WOLF_09_02"); //Äî îòõîäà ñ òîáîé õîòåë ïîãîâîðèòü îäèí èç âîðîâ, Âîëê.
    info_clearchoices(info_gorn_wolf /*11484*/);
    info_addchoice(info_gorn_wolf /*11484*/, "Îí ìîæåò ïîäîæäàòü, ó íàñ ñåé÷àñ åñòü äåëà ïîâàæíåå.", info_gorn_wolf_fm);
    info_addchoice(info_gorn_wolf /*11484*/, "Òîãäà ÿ ëó÷øå ïîéäó ê íåìó.", info_gorn_wolf_wolf);
    b_logentry(ch4_ulumulu, ch4_ulumulu_10);
    gorn_gotowolf = true;
};

func void info_gorn_wolf_fm() {
    ai_output(hero, self, "Info_Gorn_WOLF_15_04"); //Îí ìîæåò ïîäîæäàòü, ó íàñ ñåé÷àñ åñòü äåëà ïîâàæíåå.
    ai_output(self, hero, "Info_Gorn_WOLF_09_05"); //Êàê ñêàæåøü!
    ai_stopprocessinfos(self);
};

func void info_gorn_wolf_wolf() {
    ai_output(hero, self, "Info_Gorn_WOLF_15_06"); //Òîãäà ÿ ëó÷øå ïîéäó ê íåìó.
    ai_output(self, hero, "Info_Gorn_WOLF_09_07"); //Õîðîøî. ß áóäó æäàòü òåáÿ çäåñü.
    gorn_joinedforfm = false;
    self.aivar[36] = false;
    npc_exchangeroutine(self, "GuardNC");
    ai_stopprocessinfos(self);
};

instance info_gorn_leaveforpost(c_info) {
    npc = pc_fighter /*7949*/;
    condition = info_gorn_leaveforpost_condition;
    information = info_gorn_leaveforpost_info;
    permanent = true;
    important = true;
};

func int info_gorn_leaveforpost_condition() {
    if ((gorn_joinedforfm && (npc_getdisttowp(hero, "OW_PATH_074") < 2000)) && (freemineorc_lookingulumulu != log_running)) {
        return true;
    };
};

func void info_gorn_leaveforpost_info() {
    ai_gotonpc(self, hero);
    if (npc_knowsinfo(hero, info_gorn_wolf /*11484*/)) {
        ai_output(self, hero, "Info_Gorn_LEAVEFORPOST_09_01"); //Ïîõîæå, òû âñå-òàêè õî÷åøü ïîãîâîðèòü ñ Âîëêîì!
    }
    else {
        ai_output(self, hero, "Info_Gorn_LEAVEFORPOST_09_02"); //Íå òóäà! Ìû äîëæíû èäòè ê øàõòå!
    };
    ai_output(self, hero, "Info_Gorn_LEAVEFORPOST_09_03"); //ß áóäó æäàòü òåáÿ ó ïîñòà.
    gorn_joinedforfm = false;
    self.aivar[36] = false;
    npc_exchangeroutine(self, "GuardNC");
    ai_stopprocessinfos(self);
};

instance info_gorn_rejoinforfm(c_info) {
    npc = pc_fighter /*7949*/;
    nr = 0;
    condition = info_gorn_rejoinforfm_condition;
    information = info_gorn_rejoinforfm_info;
    permanent = true;
    description = "Îòïðàâëÿåìñÿ â øàõòó!";
};

func int info_gorn_rejoinforfm_condition() {
    if (((npc_knowsinfo(hero, info_gorn_myway /*11481*/) || npc_knowsinfo(hero, info_gorn_kickbutt /*11478*/)) && (npc_getdisttowp(hero, "OW_PATH_075_GUARD4") < 1000)) && (!gorn_joinedforfm)) {
        return true;
    };
};

func void info_gorn_rejoinforfm_info() {
    ai_output(hero, self, "Info_Gorn_REJOINFORFM_15_01"); //Îòïðàâëÿåìñÿ â øàõòó!
    ai_output(self, hero, "Info_Gorn_REJOINFORFM_09_02"); //Íàñòàëî âðåìÿ âûáèòü îòòóäà ñòðàæíèêîâ!
    ai_output(self, hero, "Info_Gorn_REJOINFORFM_09_03"); //Èäè âïåðåä, ÿ ïîéäó ñëåäîì!
    gorn_joinedforfm = true;
    self.aivar[36] = true;
    npc_exchangeroutine(self, "FollowToFMC");
    ai_stopprocessinfos(self);
};

instance info_gorn_razor(c_info) {
    npc = pc_fighter /*7949*/;
    condition = info_gorn_razor_condition;
    information = info_gorn_razor_info;
    important = true;
};

func int info_gorn_razor_condition() {
    if (gorn_joinedforfm && (npc_getdisttowp(hero, "OW_PATH_3000") < 1000)) {
        return true;
    };
};

func void info_gorn_razor_info() {
    ai_gotonpc(self, hero);
    ai_output(self, hero, "Info_Gorn_RAZOR_09_01"); //ÁÅÐÅÃÈÑÜ!!!
    ai_output(self, hero, "Info_Gorn_RAZOR_09_02"); //Îíè îõîòÿòñÿ ñòàÿìè, êàê è ãëîðõè, íî èõ óêóñû áóäóò ïîñòðàøíåå!
    ai_output(self, hero, "Info_Gorn_RAZOR_09_03"); //Ìû äîëæíû èçáàâèòüñÿ îò íèõ. Òû ìåíÿ çíàåøü, ÿ íå ëþáëþ îñòàâëÿòü âðàãà çà ñïèíîé.
    ai_stopprocessinfos(self);
};

instance info_gorn_fmcentrance(c_info) {
    npc = pc_fighter /*7949*/;
    condition = info_gorn_fmcentrance_condition;
    information = info_gorn_fmcentrance_info;
    important = true;
};

func int info_gorn_fmcentrance_condition() {
    if (gorn_joinedforfm && (npc_getdisttowp(hero, "FMC_ENTRANCE") < 1000)) {
        return true;
    };
};

func void info_gorn_fmcentrance_info() {
    ai_gotonpc(self, hero);
    ai_output(self, hero, "Info_Gorn_FMCENTRANCE_09_01"); //Ïîñòîé-êà, òû âèäèøü ýòè òåëà?
    ai_output(self, hero, "Info_Gorn_FMCENTRANCE_09_02"); //Èäè êî âõîäó â øàõòó, à ÿ îñòàíóñü çäåñü è ïðîñëåæó çà òåì, ÷òîáû íèêòî íå íàïàë ñçàäè.
    ai_output(self, hero, "Info_Gorn_FMCENTRANCE_09_03"); //ß ïîäîéäó, êîãäà òû ñïóñòèøüñÿ.
    npc_exchangeroutine(self, "WaitFMC");
    ai_stopprocessinfos(self);
};

instance info_gorn_fmgate(c_info) {
    npc = pc_fighter /*7949*/;
    condition = info_gorn_fmgate_condition;
    information = info_gorn_fmgate_info;
    important = true;
};

func int info_gorn_fmgate_condition() {
    if ((gorn_joinedforfm && (!fm_gateopen)) && (npc_getdisttowp(hero, "FMC_FM_ENTRANCE") < 1000)) {
        return true;
    };
};

func void info_gorn_fmgate_info() {
    ai_gotonpc(self, hero);
    ai_output(self, hero, "Info_Gorn_FMGATE_09_01"); //ß óñëûøàë çâóêè áîÿ è ñðàçó ïîøåë çà òîáîé.
    ai_output(hero, self, "Info_Gorn_FMGATE_15_02"); //Ñòàðûé çíàêîìûé... Íî ýòîò ñ÷åò óæå îïëà÷åí.
    ai_output(self, hero, "Info_Gorn_FMGATE_09_03"); //Õîðîøî. Îòêðûâàé âîðîòà, ÿ ïðèêðîþ.
    npc_exchangeroutine(self, "WaitFM");
    ai_stopprocessinfos(self);
};

instance info_gorn_afterfm(c_info) {
    npc = pc_fighter /*7949*/;
    condition = info_gorn_afterfm_condition;
    information = info_gorn_afterfm_info;
    important = true;
};

func int info_gorn_afterfm_condition() {
    if (freemineorc_lookingulumulu) {
        return true;
    };
};

func void info_gorn_afterfm_info() {
    ai_gotonpc(self, hero);
    ai_output(self, hero, "Info_Gorn_AFTERFM_09_01"); //Îõ, ïàðåíü. Ýòî áûë íåïðîñòîé áîé.
    ai_output(self, hero, "Info_Gorn_AFTERFM_09_02"); //Íèêîãäà áû íå ïîäóìàë, ÷òî ëþäè Ãîìåçà ñïîñîáíû òàê äðàòüñÿ.
    ai_output(hero, self, "Info_Gorn_AFTERFM_15_03"); //Ãëàâíîå - ýòî òî, ÷òî ìû âñå-òàêè âûáèëè èõ èç øàõòû.
    ai_output(self, hero, "Info_Gorn_AFTERFM_09_04"); //ß îñòàíóñü çäåñü è ïðîñëåæó, ÷òîáû îíè íå âåðíóëèñü.
    ai_stopprocessinfos(self);
    b_story_leftfm();
    lee_freeminereport = 1;
};

instance info_gorn_fmwatch(c_info) {
    npc = pc_fighter /*7949*/;
    nr = 0;
    condition = info_gorn_fmwatch_condition;
    information = info_gorn_fmwatch_info;
    permanent = true;
    description = "Êàê îáñòàíîâêà?";
};

func int info_gorn_fmwatch_condition() {
    if (npc_knowsinfo(hero, info_gorn_afterfm /*11504*/)) {
        return true;
    };
};

func void info_gorn_fmwatch_info() {
    ai_output(hero, self, "Info_Gorn_FMWATCH_15_01"); //Êàê îáñòàíîâêà?
    ai_output(self, hero, "Info_Gorn_FMWATCH_09_02"); //Âñå òèõî. Ñâîáîäíàÿ Øàõòà ñëîâíî âûìåðëà.
    ai_output(self, hero, "Info_Gorn_FMWATCH_09_03"); //Íî äîëãî ýòî íå ïðîäëèòñÿ, åñëè Ëè íå ïîøëåò ñþäà ïîäêðåïëåíèå.
    ai_output(self, hero, "Info_Gorn_FMWATCH_09_04"); //Íó à ïîêà ÿ ïîïðîáóþ ðàñïîëîæèòüñÿ ïîóäîáíåå.
};

instance info_gorn_foundulumulu(c_info) {
    npc = pc_fighter /*7949*/;
    condition = info_gorn_foundulumulu_condition;
    information = info_gorn_foundulumulu_info;
    important = true;
};

func int info_gorn_foundulumulu_condition() {
    if (freemineorc_lookingulumulu == log_success) {
        return true;
    };
};

func void info_gorn_foundulumulu_info() {
    ai_gotonpc(self, hero);
    ai_output(self, hero, "Info_Gorn_FOUNDULUMULU_09_01"); //Çàáàâíàÿ ó òåáÿ øòóêîâèíà. Ïîõîæå, ýòî îðî÷üÿ ðàáîòà.
    ai_output(self, hero, "Info_Gorn_FOUNDULUMULU_09_02"); //Òåáå åãî äàë ðàá èç øàõòû?
    ai_output(hero, self, "Info_Gorn_FOUNDULUMULU_15_03"); //Ýòî îðêñêèé çíàê äðóæáû. Ñ íèì ÿ õî÷ó âîéòè â ãîðîä îðêîâ.
    ai_output(self, hero, "Info_Gorn_FOUNDULUMULU_09_04"); //Íàäåþñü, ÷òî îðêè ïîéìóò ýòîò... ÇÍÀÊ!
    ai_stopprocessinfos(self);
    b_kapitelwechsel(5);
};

instance info_gornfm_exit(c_info) {
    npc = pc_fighterfm /*7964*/;
    nr = 999;
    condition = info_gornfm_exit_condition;
    information = info_gornfm_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_gornfm_exit_condition() {
    return 1;
};

func void info_gornfm_exit_info() {
    if (self.aivar[36]) {
        ai_output(self, other, "Info_GornFM_EXIT_09_01"); //Çàùèùàéñÿ!
    }
    else {
        ai_output(self, other, "Info_GornFM_EXIT_09_02"); //Óâèäèìñÿ.
    };
    ai_stopprocessinfos(self);
};

instance info_gornfm_wait(c_info) {
    npc = pc_fighterfm /*7964*/;
    nr = 0;
    condition = info_gornfm_wait_condition;
    information = info_gornfm_wait_info;
    permanent = true;
    description = "Íèêóäà íå óõîäè, ÿ ïîñìîòðþ, ÷òî òàì ïðîèñõîäèò!";
};

func int info_gornfm_wait_condition() {
    if (self.aivar[36] == true) {
        return true;
    };
};

func void info_gornfm_wait_info() {
    ai_output(hero, self, "Info_GornFM_WAIT_15_01"); //Íèêóäà íå óõîäè, ÿ ïîñìîòðþ, ÷òî òàì ïðîèñõîäèò!
    ai_output(self, hero, "Info_GornFM_WAIT_09_02"); //Õîðîøî. ß áóäó æäàòü ó âõîäà â øàõòó è ïðîñëåæó çà òåì, ÷òîáû âñå áûëî òèõî.
    self.aivar[36] = false;
    npc_exchangeroutine(self, "wait");
};

instance info_gornfm_follow(c_info) {
    npc = pc_fighterfm /*7964*/;
    nr = 0;
    condition = info_gornfm_follow_condition;
    information = info_gornfm_follow_info;
    permanent = true;
    description = "Èäåì, ìíå íóæíà òâîÿ ïîìîùü.";
};

func int info_gornfm_follow_condition() {
    if (self.aivar[36] == false) {
        return true;
    };
};

func void info_gornfm_follow_info() {
    ai_output(hero, self, "Info_GornFM_FOLLOW_15_01"); //Èäåì, ìíå íóæíà òâîÿ ïîìîùü.
    ai_output(self, hero, "Info_GornFM_FOLLOW_09_02"); //Íàêîíåö-òî ìû äâèãàåìñÿ! Èäè ïåðâûì, ÿ ïîéäó ñçàäè.
    self.aivar[36] = true;
    npc_exchangeroutine(self, "follow");
};

instance dia_milten_exit(c_info) {
    npc = pc_mage /*7979*/;
    nr = 999;
    condition = dia_milten_exit_condition;
    information = dia_milten_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_milten_exit_condition() {
    return 1;
};

func void dia_milten_exit_info() {
    if (self.aivar[36]) {
        ai_output(self, hero, "DIA_Milten_EXIT_02_00"); //Èäåì.
    }
    else {
        ai_output(self, hero, "DIA_Milten_EXIT_02_01"); //Óâèäèìñÿ.
    };
    ai_stopprocessinfos(self);
};

instance dia_milten_first(c_info) {
    npc = pc_mage /*7979*/;
    nr = 1;
    condition = dia_milten_first_condition;
    information = dia_milten_first_info;
    important = true;
};

func int dia_milten_first_condition() {
    if (((corkalom_bringmcqballs != log_success) && (!npc_knowsinfo(hero, grd_200_thorus_wannabemage /*8886*/))) && (npc_getdisttonpc(self, other) <= zivilanquatschdist)) {
        return 1;
    };
};

func void dia_milten_first_info() {
    ai_output(self, other, "DIA_Milten_First_02_00"); //Òû íå äîëæåí ïåðåñòóïàòü ýòîò ïîðîã äî òåõ ïîð, ïîêà íå ïîëó÷èøü ðàçðåøåíèå îò ãîñïîäèíà Êîððèñòî.
};

instance dia_milten_hello(c_info) {
    npc = pc_mage /*7979*/;
    nr = 1;
    condition = dia_milten_hello_condition;
    information = dia_milten_hello_info;
    description = "ß èùó Âåðõîâíîãî Ìàãà Êðóãà Îãíÿ.";
};

func int dia_milten_hello_condition() {
    if ((saturas_bringfoci == false) && (!npc_knowsinfo(hero, dia_milten_gotocorristo /*11531*/))) {
        return 1;
    };
};

func void dia_milten_hello_info() {
    ai_output(other, self, "DIA_Milten_Hello_15_00"); //ß èùó Âåðõîâíîãî Ìàãà Êðóãà Îãíÿ.
    ai_output(self, other, "DIA_Milten_Hello_02_01"); //Ýòî Êîððèñòî. Çà÷åì îí òåáå íóæåí?
};

instance dia_milten_gotocorristo(c_info) {
    npc = pc_mage /*7979*/;
    nr = 1;
    condition = dia_milten_gotocorristo_condition;
    information = dia_milten_gotocorristo_info;
    important = true;
};

func int dia_milten_gotocorristo_condition() {
    if (((corkalom_bringmcqballs == log_success) || npc_knowsinfo(hero, grd_200_thorus_wannabemage /*8886*/)) && (npc_gettrueguild(hero) == gil_stt)) {
        return 1;
    };
};

func void dia_milten_gotocorristo_info() {
    if ((npc_hasitems(other, itwr_fire_letter_01) >= 1) || (npc_hasitems(other, itwr_fire_letter_02) >= 1)) {
        b_say(self, other, "$HeyYou");
        ai_output(other, self, "DIA_Milten_Hello_15_00"); //ß èùó Âåðõîâíîãî Ìàãà Êðóãà Îãíÿ.
        ai_output(self, other, "DIA_Milten_Hello_02_01"); //Ýòî Êîððèñòî. Çà÷åì îí òåáå íóæåí?
        ai_output(other, self, "DIA_Milten_Letter_15_00"); //Ó ìåíÿ ïèñüìî äëÿ Âåðõîâíîãî Ìàãà Êðóãà Îãíÿ.
        ai_output(self, other, "DIA_Milten_Letter_02_03"); //Ïîêàæè ìíå ýòî ïèñüìî.
        ai_output(other, self, "DIA_Milten_Letter_Give_15_00"); //Âîò îíî.
        b_givexp(xp_xardasletter);
        if (npc_hasitems(other, itwr_fire_letter_01)) {
            b_giveinvitems(other, self, itwr_fire_letter_01 /*4616*/, 1);
        }
        else {
            if (npc_hasitems(other, itwr_fire_letter_02)) {
                b_giveinvitems(other, self, itwr_fire_letter_02 /*4622*/, 1);
            };
        };
        ai_output(other, self, "GUR_1200_Yberion_EARN_Info_15_01"); //À êàê íàñ÷åò íåáîëüøîé íàãðàäû?
        ai_output(self, hero, "Info_Milten_SHSEAL_02_05"); //Â ýòîì áîëüøå íåò íåîáõîäèìîñòè.
    };
    ai_output(self, other, "DIA_Milten_GotoCorristo_02_01"); //Ìû ñëûøàëè î òâîèõ ïîäâèãàõ â Ñòàðîé Øàõòå. Áåç ïîëçóíîâ äîáû÷à ðóäû èäåò ãîðàçäî ñïîêîéíåå.
    ai_output(self, other, "DIA_Milten_GotoCorristo_02_02"); //Êîððèñòî òîæå ñëûøàë î òåáå. Îí õî÷åò ïîãîâîðèòü ñ òîáîé. Èäè ê íåìó.
};

var int milten_hasletter;

instance dia_milten_letter(c_info) {
    npc = pc_mage /*7979*/;
    nr = 1;
    condition = dia_milten_letter_condition;
    information = dia_milten_letter_info;
    description = "Ó ìåíÿ åñòü ïèñüìî Âåðõîâíîìó Ìàãó Êðóãà Îãíÿ.";
};

func int dia_milten_letter_condition() {
    if (((npc_knowsinfo(hero, dia_milten_hello /*11528*/) && ((npc_hasitems(other, itwr_fire_letter_01) >= 1) || (npc_hasitems(other, itwr_fire_letter_02) >= 1))) && (kapitel < 4)) && (saturas_bringfoci == false)) {
        return 1;
    };
};

func void dia_milten_letter_info() {
    ai_output(other, self, "DIA_Milten_Letter_15_00"); //Ó ìåíÿ ïèñüìî äëÿ Âåðõîâíîãî Ìàãà Êðóãà Îãíÿ.
    ai_output(self, other, "DIA_Milten_Letter_02_01"); //Òû ãîíåö èç Âíåøíåãî Ìèðà?
    ai_output(other, self, "DIA_Milten_Letter_15_02"); //Äà. Îäèí èç ìàãîâ äàë ìíå ýòî ïèñüìî, ïðåæäå ÷åì ìåíÿ çàáðîñèëè â êîëîíèþ.
    ai_output(self, other, "DIA_Milten_Letter_02_03"); //Ïîêàæè ìíå ýòî ïèñüìî.
    info_clearchoices(dia_milten_letter /*11535*/);
    info_addchoice(dia_milten_letter /*11535*/, "Ïðåæäå ÿ õî÷ó ïîëó÷èòü ñâîþ íàãðàäó.", dia_milten_letter_no);
    info_addchoice(dia_milten_letter /*11535*/, "Âîò îíî.", dia_milten_letter_give);
};

func void dia_milten_letter_give() {
    ai_output(other, self, "DIA_Milten_Letter_Give_15_00"); //Âîò îíî.
    b_usefakescroll();
    b_givexp(xp_xardasletter);
    ai_output(self, other, "DIA_Milten_Letter_Give_02_03"); //Ýòî ïèñüìî àäðåñîâàíî Êñàðäàñó!
    ai_output(other, self, "DIA_Milten_Letter_Give_15_04"); //È ÷òî â ýòîì òàêîãî?
    ai_output(self, other, "DIA_Milten_Letter_Give_02_05"); //Êñàðäàñ îñòàâèë ñëóæåíèå Èííîñó ìíîãî ëåò íàçàä. Îí óøåë îòñþäà è ïîñâÿòèë ñâîþ æèçíü ÷åðíîé ìàãèè.
    ai_output(self, other, "DIA_Milten_Letter_Give_02_06"); //Îí æèâåò â áàøíå â öåíòðå çåìåëü îðêîâ è çàíèìàåòñÿ òîëüêî ñâîèìè èññëåäîâàíèÿìè.
    ai_output(self, other, "DIA_Milten_Letter_Give_02_07"); //Îí ñêàçàë, ÷òî âûÿñíèò ñàì, ÷òî ïîøëî íå òàê ïðè âîçâåäåíèè Áàðüåðà.
    ai_output(self, other, "DIA_Milten_Letter_Give_02_08"); //Æäè çäåñü. ß ñêîðî âåðíóñü.
    ai_stopprocessinfos(self);
    ai_gotowp(self, "OCC_CHAPEL_STAIRCASE_TOP");
    ai_gotowp(self, "OCC_CHAPEL_ENTRANCE");
    if (npc_hasitems(other, itwr_fire_letter_01)) {
        b_giveinvitems(other, self, itwr_fire_letter_01 /*4616*/, 1);
    }
    else {
        if (npc_hasitems(other, itwr_fire_letter_02)) {
            b_giveinvitems(other, self, itwr_fire_letter_02 /*4622*/, 1);
        };
    };
    milten_hasletter = true;
    npc_setrefusetalk(self, 10);
};

func void dia_milten_letter_no() {
    ai_output(other, self, "DIA_Milten_Letter_NO_15_00"); //Ïðåæäå ÿ õî÷ó ïîëó÷èòü ñâîþ íàãðàäó.
    ai_output(self, other, "DIA_Milten_Letter_NO_02_01"); //Êîððèñòî ïðèêàæåò Òîððåçó âûäàòü åå òåáå, êàê òîëüêî ïîëó÷èò ïèñüìî.
    ai_output(self, other, "DIA_Milten_Letter_NO_02_02"); //ß ñëóæèòåëü Èííîñà, ÿ íèêîãäà íå ëãó. Òåïåðü òû ìîæåøü îòäàòü ìíå ïèñüìî.
    info_clearchoices(dia_milten_letter /*11535*/);
    info_addchoice(dia_milten_letter /*11535*/, "ß áû ïðåäïî÷åë ñàì îòäàòü ïèñüìî Òîððåçó.", dia_milten_letter_no_again);
    info_addchoice(dia_milten_letter /*11535*/, "Âîò îíî.", dia_milten_letter_give);
};

func void dia_milten_letter_no_again() {
    ai_output(other, self, "DIA_Milten_Letter_NO_AGAIN_15_00"); //ß áû ïðåäïî÷åë ñàì îòäàòü ïèñüìî Òîððåçó.
    ai_output(self, other, "DIA_Milten_Letter_NO_AGAIN_02_01"); //Ñìîãó ëè ÿ òåáÿ ïåðåóáåäèòü?
    ai_output(other, self, "DIA_Milten_Letter_NO_AGAIN_15_02"); //Íåò. ß õî÷ó ïîëó÷èòü ñâîþ íàãðàäó.
    ai_output(self, other, "DIA_Milten_Letter_NO_AGAIN_02_03"); //Õîðîøî. Åñëè òû ýòîãî õî÷åøü. Æäè çäåñü.
    info_clearchoices(dia_milten_letter /*11535*/);
    ai_stopprocessinfos(self);
    ai_gotowp(self, "OCC_CHAPEL_STAIRCASE_TOP");
    ai_gotowp(self, "OCC_CHAPEL_ENTRANCE");
    milten_hasletter = false;
    npc_setrefusetalk(self, 10);
};

instance dia_milten_comesback(c_info) {
    npc = pc_mage /*7979*/;
    nr = 1;
    condition = dia_milten_comesback_condition;
    information = dia_milten_comesback_info;
    important = true;
};

func int dia_milten_comesback_condition() {
    if ((npc_knowsinfo(hero, dia_milten_letter /*11535*/) && (npc_refusetalk(self) == false)) && (kapitel <= 3)) {
        return 1;
    };
};

func void dia_milten_comesback_info() {
    if (milten_hasletter == false) {
        ai_output(self, other, "DIA_Milten_ComesBack_02_00"); //Êîððèñòî îãîð÷èëî èçâåñòèå î òîì, ÷òî òû íå äîâåðÿåøü ñëóæèòåëÿì Èííîñà.
        ai_output(self, other, "DIA_Milten_ComesBack_02_01"); //Íî îí ïîçâîëèë òåáå âñòðåòèòüñÿ ñ Òîððåçîì è ïîëó÷èòü îáû÷íóþ íàãðàäó.
    }
    else {
        ai_output(self, other, "DIA_Milten_ComesBack_02_02"); //Êîððèñòî áûë â ïîëíîì âîñòîðãå. Îí ñêàçàë, ÷òî òû ìîæåøü âñòðåòèòüñÿ ñ Òîððåçîì è âûáðàòü ñåáå íàãðàäó.
    };
};

instance dia_milten_wotorrez(c_info) {
    npc = pc_mage /*7979*/;
    nr = 1;
    condition = dia_milten_wotorrez_condition;
    information = dia_milten_wotorrez_info;
    description = "Ãäå ìíå èñêàòü Òîððåçà?";
};

func int dia_milten_wotorrez_condition() {
    if (npc_knowsinfo(hero, dia_milten_comesback /*11541*/) && (saturas_bringfoci == false)) {
        return 1;
    };
};

func void dia_milten_wotorrez_info() {
    ai_output(other, self, "DIA_Milten_WoTorrez_15_00"); //Ãäå ìíå èñêàòü Òîððåçà?
    ai_output(self, other, "DIA_Milten_WoTorrez_02_01"); //Âåñü äåíü îí ñòîèò ïåðåä õðàìîì.
    ai_output(self, other, "DIA_Milten_WoTorrez_02_02"); //Íî÷è æå îí ïðîâîäèò â ñâîåé êåëüå. Ïîñêîëüêó ëèøü ìàãè ìîãóò âîéòè â õðàì, òåáå ïðèäåòñÿ ïîãîâîðèòü ñ íèì äíåì.
};

instance dia_milten_nocheinbrief(c_info) {
    npc = pc_mage /*7979*/;
    nr = 2;
    condition = dia_milten_nocheinbrief_condition;
    information = dia_milten_nocheinbrief_info;
    description = "Ó ìåíÿ ïèñüìî îò ìàãîâ Âîäû.";
};

func int dia_milten_nocheinbrief_condition() {
    if (((cronos_messenger == log_running) && (kapitel <= 3)) && (npc_hasitems(other, cronos_brief) >= 1)) {
        return 1;
    };
};

func void dia_milten_nocheinbrief_info() {
    ai_output(other, self, "DIA_Milten_NochEinBrief_15_00"); //Ó ìåíÿ ïèñüìî îò ìàãîâ Âîäû.
    ai_output(self, other, "DIA_Milten_NochEinBrief_02_01"); //À! Î÷åíü õîðîøî! ß ïåðåäàì åãî Êîððèñòî.
    ai_output(self, other, "DIA_Milten_NochEinBrief_02_02"); //Êîãäà âåðíåøüñÿ â Íîâûé Ëàãåðü, ìàãè Âîäû âîçíàãðàäÿò òåáÿ çà òðóäû.
    cronos_messenger = log_success;
    b_giveinvitems(other, self, cronos_brief /*4554*/, 1);
};

instance dia_milten_perm(c_info) {
    npc = pc_mage /*7979*/;
    nr = 1;
    condition = dia_milten_perm_condition;
    information = dia_milten_perm_info;
    description = "Ðàññêàæè ìíå î ìàãàõ Îãíÿ.";
};

func int dia_milten_perm_condition() {
    if (npc_knowsinfo(hero, dia_milten_comesback /*11541*/) && (kapitel <= 3)) {
        return 1;
    };
};

func void dia_milten_perm_info() {
    ai_output(other, self, "DIA_Milten_PERM_15_00"); //Ðàññêàæè ìíå î ìàãàõ Îãíÿ.
    ai_output(self, other, "DIA_Milten_PERM_02_01"); //Êðóã Îãíÿ îáðåòàåò ñâîþ ñèëó ñ áëàãîñëîâåíèÿ Èííîñà. Áîã ñâåòà è èñòèíû áëàãîâîëèò íàì.
    ai_output(self, other, "DIA_Milten_PERM_02_02"); //Ìàãè ñ÷èòàþò ñåáÿ èçáðàííûìè - íó è êî âñåì îñòàëüíûì îòíîñÿòñÿ ñîîòâåòñòâåííî.
    ai_output(self, other, "DIA_Milten_PERM_02_03"); //Ìíå ïîâåçëî, ÷òî ìåíÿ ïðèíÿëè. Êîððèñòî ñäåëàë ìåíÿ ñâîèì ó÷åíèêîì. Ïî-ìîåìó, îí ïðîñòî õîòåë íåìíîãî ðàçâëå÷üñÿ.
    ai_output(self, other, "DIA_Milten_PERM_02_04"); //Ñ òåõ ïîð ÿ åæåäíåâíî ñîâåðøåíñòâóþ ñâîè ìàãè÷åñêèå íàâûêè, ÷òîáû áûòü äîïóùåííûì â ñëåäóþùèé Êðóã.
};

instance dia_milten_wannamage(c_info) {
    npc = pc_mage /*7979*/;
    nr = 2;
    condition = dia_milten_wannamage_condition;
    information = dia_milten_wannamage_info;
    permanent = true;
    description = "ß òîæå õî÷ó ñòàòü ó÷åíèêîì ìàãà, êàê òû.";
};

func int dia_milten_wannamage_condition() {
    if (npc_knowsinfo(hero, dia_milten_perm /*11550*/) && (corkalom_bringmcqballs != log_success)) {
        return 1;
    };
};

func void dia_milten_wannamage_info() {
    ai_output(other, self, "DIA_Milten_WannaMage_15_00"); //ß òîæå õî÷ó ñòàòü ó÷åíèêîì ìàãà, êàê òû.
    ai_output(self, other, "DIA_Milten_WannaMage_02_01"); //Êîððèñòî âûáðàë ìåíÿ, ïîòîìó ÷òî ÿ ïîìîãàë Áàðîíàì.
    ai_output(self, other, "DIA_Milten_WannaMage_02_02"); //Äî òåõ ïîð, ïîêà òû íå ñäåëàåøü ÷òî-íèáóäü èñêëþ÷èòåëüíîå, îí è ðàçãîâàðèâàòü íå çàõî÷åò î òâîåì îáó÷åíèè.
    ai_output(self, other, "DIA_Milten_WannaMage_02_03"); //Ïîìèìî ýòîãî, òû äîëæåí ïðèíàäëåæàòü ê Ñòàðîìó Ëàãåðþ. Ñîìíåâàþñü, ÷òî Êîððèñòî âîçüìåò ñåáå â ó÷åíèêè ÷åëîâåêà èç äðóãîé ÷àñòè êîëîíèè.
};

instance info_milten_shwait(c_info) {
    npc = pc_mage /*7979*/;
    condition = info_milten_shwait_condition;
    information = info_milten_shwait_info;
    important = true;
};

func int info_milten_shwait_condition() {
    if (npc_getdisttowp(hero, "OW_PATH_274") < 1000) {
        return 1;
    };
};

func void info_milten_shwait_info() {
    ai_gotonpc(self, hero);
    ai_output(self, hero, "Info_Milten_SHWAIT_02_01"); //Ïðèâåòñòâóþ! Ìîé äðóã Ëåñòåð èç Áîëîòíîãî Ëàãåðÿ ðàññêàçàë ìíå î òåáå.
    ai_output(self, hero, "Info_Milten_SHWAIT_02_02"); //ß ïîðàæåí. Òû ñòàë î÷åíü ñèëüíûì.
    ai_output(hero, self, "Info_Milten_SHWAIT_15_03"); //Ñòàðàþñü.
    ai_output(self, hero, "Info_Milten_SHWAIT_02_04"); //Àõ, äà. Êàê âñåãäà îòêðîâåíåí, äà?
};

instance info_milten_shgorn(c_info) {
    npc = pc_mage /*7979*/;
    nr = 0;
    condition = info_milten_shgorn_condition;
    information = info_milten_shgorn_info;
    description = "ß âèäåë Ãîðíà.";
};

func int info_milten_shgorn_condition() {
    if (npc_knowsinfo(hero, info_milten_shwait /*11556*/) && npc_knowsinfo(hero, info_gorn_ruinsuccess /*11443*/)) {
        return true;
    };
};

func void info_milten_shgorn_info() {
    ai_output(hero, self, "Info_Milten_SHGORN_15_01"); //ß âèäåë Ãîðíà.
    ai_output(self, hero, "Info_Milten_SHGORN_02_02"); //Â ñàìîì äåëå? È ãäå?
    ai_output(hero, self, "Info_Milten_SHGORN_15_03"); //Â ðàçðóøåííîì ìîíàñòûðå ó ìîðÿ. Ìû ñ íèì âäâîåì îáûñêèâàëè ðàçâàëèíû â ïîèñêàõ ñîêðîâèù.
    ai_output(self, hero, "Info_Milten_SHGORN_02_04"); //Óâåðåí, ÷òî îí ðàññêàæåò ìíå îáî âñåì, êîãäà ìû âñòðåòèìñÿ âíîâü.
};

instance info_milten_shlester(c_info) {
    npc = pc_mage /*7979*/;
    nr = 0;
    condition = info_milten_shlester_condition;
    information = info_milten_shlester_info;
    description = "Ìû ñ Ëåñòåðîì îñìîòðåëè ôîðò â ãîðàõ.";
};

func int info_milten_shlester_condition() {
    if (npc_knowsinfo(hero, info_milten_shwait /*11556*/) && npc_knowsinfo(hero, pc_psionic_finish /*11771*/)) {
        return true;
    };
};

func void info_milten_shlester_info() {
    ai_output(hero, self, "Info_Milten_SHLESTER_15_01"); //Ìû ñ Ëåñòåðîì îñìîòðåëè ôîðò â ãîðàõ.
    ai_output(self, hero, "Info_Milten_SHLESTER_02_02"); //Îí ãîâîðèë ìíå îá ýòîì. Ïîõîæå, òåáå ìîæíî äîâåðÿòü.
    ai_output(hero, self, "Info_Milten_SHLESTER_15_03"); //Òàê ãäå æå âû ÷åòâåðî óæå âñòðå÷àëèñü?
    ai_output(self, hero, "Info_Milten_SHLESTER_02_04"); //Î, çäåñü è òàì - â ñàìûõ ðàçíûõ ìåñòàõ.
};

instance info_milten_shyou(c_info) {
    npc = pc_mage /*7979*/;
    nr = 0;
    condition = info_milten_shyou_condition;
    information = info_milten_shyou_info;
    description = "×åì òû çàíèìàåøüñÿ?";
};

func int info_milten_shyou_condition() {
    if (npc_knowsinfo(hero, info_milten_shwait /*11556*/)) {
        return 1;
    };
};

func void info_milten_shyou_info() {
    ai_output(hero, self, "Info_Milten_SHYOU_15_01"); //×òî òû çäåñü äåëàåøü?
    ai_output(self, hero, "Info_Milten_SHYOU_02_02"); //Íåïîäàëåêó îòñþäà íàõîäèòñÿ äðåâíåå êàìåííîå êîëüöî, â öåíòðå êîòîðîãî åñòü âõîä â ïîäçåìåëüå.
    ai_output(hero, self, "Info_Milten_SHYOU_15_03"); //×òî-òî âðîäå ñêëåïà?
    ai_output(self, hero, "Info_Milten_SHYOU_02_04"); //Äà, ÷òî-òî âðîäå.
    ai_output(self, hero, "Info_Milten_SHYOU_02_05"); //Ìíå íóæíî êîå-÷òî äîáûòü èç ýòîãî ñêëåïà.
};

instance info_milten_shme(c_info) {
    npc = pc_mage /*7979*/;
    nr = 0;
    condition = info_milten_shme_condition;
    information = info_milten_shme_info;
    description = "ß èùó þíèòîð. ";
};

func int info_milten_shme_condition() {
    if (npc_knowsinfo(hero, info_milten_shwait /*11556*/) && (!npc_knowsinfo(hero, info_milten_shaccept /*11589*/))) {
        return 1;
    };
};

func void info_milten_shme_info() {
    ai_output(hero, self, "Info_Milten_SHME_15_01"); //ß èùó þíèòîð. Îí äîëæåí áûòü ãäå-òî çäåñü.
    ai_output(self, hero, "Info_Milten_SHME_02_02"); //Ïîõîæå, íàì îáîèì íóæíî ïîïàñòü â îäíî è òî æå ìåñòî.
};

instance info_milten_shproblem(c_info) {
    npc = pc_mage /*7979*/;
    nr = 0;
    condition = info_milten_shproblem_condition;
    information = info_milten_shproblem_info;
    description = "Ïî÷åìó òû ñàì íå ñïóñòèøüñÿ â ýòîò ñêëåï?";
};

func int info_milten_shproblem_condition() {
    if (npc_knowsinfo(hero, info_milten_shyou /*11565*/)) {
        return true;
    };
};

func void info_milten_shproblem_info() {
    ai_output(hero, self, "Info_Milten_SHPROBLEM_15_01"); //Ïî÷åìó òû ñàì íå ñïóñòèøüñÿ â ýòîò ñêëåï è íå çàáåðåøü òî, ÷òî òåáå íóæíî?
    ai_output(self, hero, "Info_Milten_SHPROBLEM_02_02"); //À, äîëãàÿ èñòîðèÿ. Ñëèøêîì ìíîãîå ïðèäåòñÿ ðàññêàçûâàòü, ÷òîáû îáúÿñíèòü.
    ai_output(hero, self, "Info_Milten_SHPROBLEM_15_03"); //Âàëÿé, ÿ íå òîðîïëþñü.
    ai_output(self, hero, "Info_Milten_SHPROBLEM_02_04"); //Õîðîøî! Ïîñëå ñîòâîðåíèÿ ìàãè÷åñêîãî Áàðüåðà, ïîðàáîòèâøåãî âñåõ íàñ...
    ai_output(self, hero, "Info_Milten_SHPROBLEM_02_05"); //... îäèí èç ìàãîâ óêðûë òàì ìàãè÷åñêèé àðòåôàêò.
};

instance info_milten_shfocus(c_info) {
    npc = pc_mage /*7979*/;
    nr = 0;
    condition = info_milten_shfocus_condition;
    information = info_milten_shfocus_info;
    description = "Òàê ýòî îäèí èç ïÿòè êàìíåé-þíèòîðîâ?";
};

func int info_milten_shfocus_condition() {
    if (npc_knowsinfo(hero, info_milten_shproblem /*11571*/)) {
        return true;
    };
};

func void info_milten_shfocus_info() {
    ai_output(hero, self, "Info_Milten_SHFOCUS_15_01"); //Òàê ýòî îäèí èç ïÿòè êàìíåé-þíèòîðîâ?
    ai_output(self, hero, "Info_Milten_SHFOCUS_02_02"); //Òî÷íî! Òàê òû óæå çíàåøü èñòîðèþ îá ýòèõ ïÿòè êàìíÿõ?
    ai_output(hero, self, "Info_Milten_SHFOCUS_15_03"); //Òîëüêî íå ãîâîðè ìíå, ÷òî òåáå òîæå íóæåí þíèòîð!
    ai_output(self, hero, "Info_Milten_SHFOCUS_02_04"); //Íåò, þíèòîð ìíå íå íóæåí, íî çàòî ÿ èùó òàëèñìàí îðêîâ.
};

instance info_milten_shseal(c_info) {
    npc = pc_mage /*7979*/;
    nr = 0;
    condition = info_milten_shseal_condition;
    information = info_milten_shseal_info;
    description = "Àðòåôàêò áûë çàìóðîâàí â ñêëåïå?";
};

func int info_milten_shseal_condition() {
    if (npc_knowsinfo(hero, info_milten_shproblem /*11571*/)) {
        return true;
    };
};

func void info_milten_shseal_info() {
    ai_output(hero, self, "Info_Milten_SHSEAL_15_01"); //Àðòåôàêò áûë çàìóðîâàí â ñêëåïå?
    ai_output(self, hero, "Info_Milten_SHSEAL_02_02"); //Äà. Åãî çàùèùàåò ìîãóùåñòâåííàÿ ìàãèÿ. Ïåðâûé èç âîðîâ, êòî ïîïûòàåòñÿ ñòÿíóòü þíèòîð...
    ai_output(self, hero, "Info_Milten_SHSEAL_02_03"); //... áóäåò ïðîêëÿò è îáðå÷åí â îáëèêå íåæèòè îõðàíÿòü ãðîáíèöó îò äðóãèõ âîðîâ... Âå÷íî.
    ai_output(hero, self, "Info_Milten_SHSEAL_15_04"); //Êàê îáîéòè ýòî çàêëÿòüå?
    ai_output(self, hero, "Info_Milten_SHSEAL_02_05"); //Â ýòîì áîëüøå íåò íåîáõîäèìîñòè.
    ai_output(self, hero, "Info_Milten_SHSEAL_02_06"); //Íåñêîëüêî ëåò íàçàä îäèí èç Áàðîíîâ, ðàçâëåêàâøèõñÿ îõîòîé íà îðêîâ, ðåøèë çàãëÿíóòü â ãðîáíèöó.
    ai_output(self, hero, "Info_Milten_SHSEAL_02_07"); //È òåïåðü ÎÍ ñòåðåæåò òàì ñîêðîâèùà.
};

instance info_milten_shtalisman(c_info) {
    npc = pc_mage /*7979*/;
    nr = 0;
    condition = info_milten_shtalisman_condition;
    information = info_milten_shtalisman_info;
    description = "×òî ýòî çà òàëèñìàí?";
};

func int info_milten_shtalisman_condition() {
    if (npc_knowsinfo(hero, info_milten_shfocus /*11574*/)) {
        return true;
    };
};

func void info_milten_shtalisman_info() {
    ai_output(hero, self, "Info_Milten_SHTALISMAN_15_01"); //×òî ýòî çà òàëèñìàí?
    ai_output(self, hero, "Info_Milten_SHTALISMAN_02_02"); //ß äóìàþ, ïîñëåäíèé âëàäåëåö èñïîëüçîâàë åãî äëÿ çàùèòû îò çëîáíûõ îðêîâ.
    ai_output(self, hero, "Info_Milten_SHTALISMAN_02_03"); //Åñëè ÿ ïðàâ, ýòîò òàëèñìàí ìîæåò îêàçàòüñÿ î÷åíü ïîëåçíûì.
};

instance info_milten_shoffer(c_info) {
    npc = pc_mage /*7979*/;
    nr = 0;
    condition = info_milten_shoffer_condition;
    information = info_milten_shoffer_info;
    description = "Ìû ìîæåì îñìîòðåòü ýòó ãðîáíèöó âìåñòå.";
};

func int info_milten_shoffer_condition() {
    if (npc_knowsinfo(hero, info_milten_shseal /*11577*/) && npc_knowsinfo(hero, info_milten_shtalisman /*11580*/)) {
        return true;
    };
};

func void info_milten_shoffer_info() {
    ai_output(hero, self, "Info_Milten_SHOFFER_15_01"); //Ìû ìîæåì îñìîòðåòü ýòó ãðîáíèöó âìåñòå. Òû çàáåðåøü òàëèñìàí, à ÿ íàéäó þíèòîð.
    ai_output(self, hero, "Info_Milten_SHOFFER_02_02"); //Âñå ýòî õîðîøî, íî åñòü îäíà ïðîáëåìà...
    ai_output(hero, self, "Info_Milten_SHOFFER_15_03"); //Ïðîáëåìà?
    ai_output(self, hero, "Info_Milten_SHOFFER_02_04"); //Äà. Òîò, êòî îõðàíÿåò ýòó ãðîáíèöó.
    ai_output(hero, self, "Info_Milten_SHOFFER_15_05"); //Äóìàþ, ìîæíî ïðîñòî ïîðóáèòü åãî íà êóñêè.
    ai_output(self, hero, "Info_Milten_SHOFFER_02_06"); //Ýòî íå òàê-òî ïðîñòî. Êàæåòñÿ, îí íå âïîëíå ïîääàåòñÿ îáû÷íîìó îðóæèþ.
    ai_output(hero, self, "Info_Milten_SHOFFER_15_07"); //Íî ó òåáÿ, êàê ÿ ïîíèìàþ, óæå åñòü ïëàí.
    ai_output(self, hero, "Info_Milten_SHOFFER_02_08"); //Õ-ì... íó... ïëàí-òî åñòü, íî îäíîìó ìíå íå ñïðàâèòüñÿ.
};

instance info_milten_shoffer2(c_info) {
    npc = pc_mage /*7979*/;
    nr = 0;
    condition = info_milten_shoffer2_condition;
    information = info_milten_shoffer2_info;
    description = "Ðàññêàçûâàé!";
};

func int info_milten_shoffer2_condition() {
    if (npc_knowsinfo(hero, info_milten_shoffer /*11583*/)) {
        return true;
    };
};

func void info_milten_shoffer2_info() {
    ai_output(hero, self, "Info_Milten_SHOFFER2_15_01"); //Ðàññêàçûâàé!
    ai_output(self, hero, "Info_Milten_SHOFFER2_02_02"); //Ó ìåíÿ åñòü ñâèòîê ñ î÷åíü ìîùíûì çàêëèíàíèåì.
    ai_output(self, hero, "Info_Milten_SHOFFER2_02_03"); //Îíî ñïîñîáíî óíè÷òîæèòü ëþáóþ íåæèòü.
    ai_output(hero, self, "Info_Milten_SHOFFER2_15_04"); //Íî òîãäà ìû çàïðîñòî ñìîæåì îñìîòðåòü ãðîáíèöó!
    ai_output(self, hero, "Info_Milten_SHOFFER2_02_05"); //Ì-ì-ì... Íó... Íå ñîâñåì. Ñ íåêîòîðûõ ïîð òàì îáèòàåò íå òîëüêî ñòðàæ.
    ai_output(self, hero, "Info_Milten_SHOFFER2_02_06"); //Âñå òå ãðàáèòåëè, ÷òî áûëè ïîñëå íåãî... è îêàçàëèñü ñòîëü æå íåâåçó÷èìè.
    ai_output(self, hero, "Info_Milten_SHOFFER2_02_07"); //ß óæå îäèí ðàç ñïóñêàëñÿ òóäà è åäâà íå ïîãèá. Îäíîìó òàì íå ñïðàâèòüñÿ.
};

instance info_milten_shaccept(c_info) {
    npc = pc_mage /*7979*/;
    nr = 0;
    condition = info_milten_shaccept_condition;
    information = info_milten_shaccept_info;
    description = "Äàé ìíå ýòîò ñâèòîê, è ìû ïîéäåì òóäà âìåñòå!";
};

func int info_milten_shaccept_condition() {
    if (npc_knowsinfo(hero, info_milten_shoffer2 /*11586*/)) {
        return true;
    };
};

func void info_milten_shaccept_info() {
    ai_output(hero, self, "Info_Milten_SHACCEPT_15_01"); //Äàé ìíå ýòîò ñâèòîê, è ìû ïîéäåì òóäà âìåñòå!
    ai_output(self, hero, "Info_Milten_SHACCEPT_02_02"); //Õîðîøî! ß íàäåÿëñÿ, ÷òî òû ýòî ñêàæåøü!
    ai_output(self, hero, "Info_Milten_SHACCEPT_02_03"); //Íî ó íàñ âñåãî îäèí ñâèòîê. Íåîáõîäèìî ïðèáåðå÷ü åãî äëÿ ñòðàæà.
    ai_output(self, hero, "Info_Milten_SHACCEPT_02_04"); //Ñ îñòàëüíîé íåæèòüþ ïðèäåòñÿ ñðàæàòüñÿ îáû÷íûì îðóæèåì.
    ai_output(hero, self, "Info_Milten_SHACCEPT_15_05"); //Ïîíÿòíî. Êàê ïðîéòè ê êðóãó êàìíåé?
    ai_output(self, hero, "Info_Milten_SHACCEPT_02_06"); //Èäè çà ìíîé.
    log_createtopic(ch3_stonehenge, log_mission);
    log_settopicstatus(ch3_stonehenge, log_running);
    b_logentry(ch3_stonehenge, ch3_stonehenge_2);
    b_logentry(ch3_stonehenge, ch3_stonehenge_3);
    createinvitem(self, itarscrolldestroyundead);
    b_giveinvitems(self, hero, itarscrolldestroyundead /*4205*/, 1);
    self.aivar[36] = true;
    npc_exchangeroutine(self, "SHGuide");
    ai_stopprocessinfos(self);
};

instance info_milten_sharrived(c_info) {
    npc = pc_mage /*7979*/;
    condition = info_milten_sharrived_condition;
    information = info_milten_sharrived_info;
    important = true;
};

func int info_milten_sharrived_condition() {
    if (npc_knowsinfo(hero, info_milten_shaccept /*11589*/) && (npc_getdisttowp(hero, "OW_PATH_3_STONES") < 500)) {
        return true;
    };
};

func void info_milten_sharrived_info() {
    ai_gotonpc(self, hero);
    ai_output(self, hero, "Info_Milten_SHARRIVED_02_01"); //Âîò ìû è ïðèøëè. Ýòîò òóííåëü âåäåò ïðÿìèêîì â ãðîáíèöó.
    ai_output(hero, self, "Info_Milten_SHARRIVED_15_02"); //Íó, ïîéäåì íàíåñåì âèçèò ñòðàæó!
    self.aivar[36] = true;
    npc_exchangeroutine(self, "SHFollow");
    ai_stopprocessinfos(self);
};

instance info_milten_shheal(c_info) {
    npc = pc_mage /*7979*/;
    nr = 0;
    condition = info_milten_shheal_condition;
    information = info_milten_shheal_info;
    description = "ß ðàíåí. Ïîìîãè ìíå!";
};

func int info_milten_shheal_condition() {
    if (((npc_knowsinfo(hero, info_milten_shaccept /*11589*/) && (!npc_knowsinfo(hero, info_milten_shsuccess /*11615*/))) && (hero.attribute[atr_hitpoints] /*0*/ < ((hero.attribute[atr_hitpoints_max] /*1*/ * 7) / 10))) && (npc_hasitems(hero, itfo_potion_health_02) == 0)) {
        return true;
    };
};

func void info_milten_shheal_info() {
    ai_output(hero, self, "Info_Milten_SHHEAL_15_01"); //ß ðàíåí. Ïîìîãè ìíå!
    if (npc_hasitems(self, itfo_potion_health_02) > 0) {
        ai_output(self, hero, "Info_Milten_SHHEAL_02_02"); //Âîçüìè öåëåáíûé ýëèêñèð.
        b_giveinvitems(self, hero, itfo_potion_health_02 /*4829*/, 1);
    }
    else {
        ai_output(self, hero, "Info_Milten_SHHEAL_02_03"); //Ó ìåíÿ áîëüøå íåò öåëåáíûõ ýëèêñèðîâ.
    };
    ai_stopprocessinfos(self);
};

instance info_milten_shrunning(c_info) {
    npc = pc_mage /*7979*/;
    nr = 0;
    condition = info_milten_shrunning_condition;
    information = info_milten_shrunning_info;
    permanent = true;
    description = "Ñòðàæ âñå åùå æèâ!";
};

func int info_milten_shrunning_condition() {
    var int keeperfound;

    npc_perceiveall(self);
    keeperfound = wld_detectnpc(self, zombiethekeeper /*6872*/, NOFUNC, -1);
    if (npc_knowsinfo(hero, info_milten_shaccept /*11589*/) && (keeperfound && (!npc_isdead(other)))) {
        return true;
    };
};

func void info_milten_shrunning_info() {
    ai_output(hero, self, "Info_Milten_SHRUNNING_15_01"); //Ñòðàæ âñå åùå æèâ!
    ai_output(self, hero, "Info_Milten_SHRUNNING_02_02"); //Òàê óíè÷òîæü åãî çàêëèíàíèåì!
};

instance info_milten_shscroll(c_info) {
    npc = pc_mage /*7979*/;
    nr = 0;
    condition = info_milten_shscroll_condition;
    information = info_milten_shscroll_info;
    description = "ß èñïîëüçîâàë ìàãè÷åñêèé ñâèòîê.";
};

func int info_milten_shscroll_condition() {
    var int keeperfound;

    npc_perceiveall(self);
    keeperfound = wld_detectnpc(self, zombiethekeeper /*6872*/, NOFUNC, -1);
    if ((((keeperfound && (!npc_isdead(other))) && npc_knowsinfo(hero, info_milten_shaccept /*11589*/)) && (npc_hasitems(hero, itarscrolldestroyundead) == 0)) && (npc_hasitems(hero, itarrunedestroyundead) == 0)) {
        return true;
    };
};

func void info_milten_shscroll_info() {
    ai_output(hero, self, "Info_Milten_SHSCROLL_15_01"); //ß ïîòðàòèë çàêëèíàíèå - íî íå íà ñòðàæà!
    ai_output(self, hero, "Info_Milten_SHSCROLL_02_02"); //Òîëüêî íå ýòî! Ïðèäóìàé, êàê åùå ìîæíî ïîáåäèòü åãî!
    ai_output(self, hero, "Info_Milten_SHSCROLL_02_03"); //Ìîæåò áûòü ìû ñìîæåì êóïèòü åùå îäèí ñâèòîê èëè êàêóþ-íèáóäü ðóíó â îäíîì èç Ëàãåðåé?
    ai_output(self, hero, "Info_Milten_SHSCROLL_02_04"); //ß áóäó æäàòü òåáÿ òàì, ãäå ìû âñòðåòèëèñü â ïðîøëûé ðàç.
    self.aivar[36] = false;
    ai_stopprocessinfos(self);
    npc_exchangeroutine(self, "SHWait");
};

instance info_milten_shnewscroll(c_info) {
    npc = pc_mage /*7979*/;
    nr = 0;
    condition = info_milten_shnewscroll_condition;
    information = info_milten_shnewscroll_info;
    description = "ß äîñòàë åùå îäèí ñâèòîê ñ Çàêëèíàíèåì Óæàñ Ìåðòâûõ!";
};

func int info_milten_shnewscroll_condition() {
    if ((npc_knowsinfo(hero, info_milten_shscroll /*11602*/) && (!npc_knowsinfo(hero, info_milten_shsuccess /*11615*/))) && ((npc_hasitems(hero, itarscrolldestroyundead) > 0) || (npc_hasitems(hero, itarrunedestroyundead) > 0))) {
        return true;
    };
};

func void info_milten_shnewscroll_info() {
    ai_output(hero, self, "Info_Milten_SHNEWSCROLL_15_01"); //ß äîñòàë åùå îäèí ñâèòîê ñ Çàêëèíàíèåì Óæàñ Ìåðòâûõ!
    ai_output(self, hero, "Info_Milten_SHNEWSCROLL_02_02"); //Õîðîøî. Çíà÷èò, ìû ìîæåì åùå ðàç íàâåäàòüñÿ â ãîñòè ê ñòðàæó.
    ai_output(self, hero, "Info_Milten_SHNEWSCROLL_02_03"); //Èäè âïåðåä, ÿ ïîéäó çà òîáîé.
    self.aivar[36] = true;
    ai_stopprocessinfos(self);
    npc_exchangeroutine(self, "SHFollow");
};

instance info_milten_shleave(c_info) {
    npc = pc_mage /*7979*/;
    condition = info_milten_shleave_condition;
    information = info_milten_shleave_info;
    permanent = true;
    important = true;
};

func int info_milten_shleave_condition() {
    if (((npc_knowsinfo(hero, info_milten_shaccept /*11589*/) && (!npc_knowsinfo(hero, info_milten_shsuccess /*11615*/))) && (npc_getdisttowp(hero, "OW_PATH_3_STONES") > 10000)) && (self.aivar[36] == true)) {
        return true;
    };
};

func void info_milten_shleave_info() {
    ai_gotonpc(self, hero);
    ai_output(self, hero, "Info_Milten_SHLEAVE_02_01"); //Ïîõîæå, ãðîáíèöà òåáÿ áîëüøå íå èíòåðåñóåò.
    ai_output(self, hero, "Info_Milten_SHLEAVE_02_02"); //Åñëè âñå-òàêè ïåðåäóìàåøü, òû ìîæåøü íàéòè ìåíÿ òàì, ãäå ìû âñòðåòèëèñü ñ òîáîé â ïðîøëûé ðàç.
    self.aivar[36] = false;
    npc_exchangeroutine(self, "SHWait");
    ai_stopprocessinfos(self);
};

instance info_milten_shcontinue(c_info) {
    npc = pc_mage /*7979*/;
    nr = 0;
    condition = info_milten_shcontinue_condition;
    information = info_milten_shcontinue_info;
    permanent = true;
    description = "Êàê òû äóìàåøü, ñòîèò íàì åùå ðàçîê íàâåäàòüñÿ ê ñòðàæó?";
};

func int info_milten_shcontinue_condition() {
    if ((((self.aivar[36] == false) && npc_knowsinfo(hero, info_milten_shaccept /*11589*/)) && (!npc_knowsinfo(hero, info_milten_shsuccess /*11615*/))) && (npc_getdisttowp(hero, "OW_PATH_3_STONES") < dia_scatty_joinoc_info.kirgo /*9000*/)) {
        return true;
    };
};

func void info_milten_shcontinue_info() {
    ai_gotonpc(self, hero);
    ai_output(hero, self, "Info_Milten_SHCONTINUE_15_01"); //Êàê òû äóìàåøü, ìîæåò áûòü, íàì ñòîèò åùå ðàçîê íàâåäàòüñÿ ê ñòðàæó?
    ai_output(self, hero, "Info_Milten_SHCONTINUE_02_02"); //ß ãîòîâ. Èäè âïåðåä, ÿ ïîéäó ñëåäîì.
    self.aivar[36] = true;
    npc_exchangeroutine(self, "SHFollow");
    ai_stopprocessinfos(self);
};

instance info_milten_shsuccess(c_info) {
    npc = pc_mage /*7979*/;
    condition = info_milten_shsuccess_condition;
    information = info_milten_shsuccess_info;
    important = true;
};

func int info_milten_shsuccess_condition() {
    if (npc_knowsinfo(hero, info_milten_shaccept /*11589*/) && npc_hasitems(hero, itmi_orctalisman)) {
        return true;
    };
};

func void info_milten_shsuccess_info() {
    ai_gotonpc(self, hero);
    ai_output(self, hero, "Info_Milten_SHSUCCESS_02_01"); //Õîðîøî. Òåïåðü ó òåáÿ åñòü òàëèñìàí.
    ai_output(hero, self, "Info_Milten_SHSUCCESS_15_02"); //Âîò îí, äåðæè. Êàê ìû è äîãîâîðèëèñü.
    ai_output(self, hero, "Info_Milten_SHSUCCESS_02_03"); //Ñïàñèáî, äðóã. ß íèêîãäà íå çàáûâàþ òåõ, êòî ïîìîã ìíå.
    ai_output(self, hero, "Info_Milten_SHSUCCESS_02_04"); //ß âîçâðàùàþñü â Ñòàðûé Ëàãåðü. Ìîæåò áûòü, ìû òàì åùå âñòðåòèìñÿ.
    b_giveinvitems(hero, self, itmi_orctalisman /*4719*/, 1);
    b_logentry(ch3_stonehenge, ch3_stonehenge_4);
    b_logentry(ch3_stonehenge, ch3_stonehenge_5);
    self.aivar[36] = false;
    npc_exchangeroutine(self, "ReturnToOC");
    ai_stopprocessinfos(self);
};

instance info_milten_ocwarn(c_info) {
    npc = pc_mage /*7979*/;
    condition = info_milten_ocwarn_condition;
    information = info_milten_ocwarn_info;
    important = true;
};

func int info_milten_ocwarn_condition() {
    if (kapitel == 4) {
        return true;
    };
};

func void info_milten_ocwarn_info() {
    ai_gotonpc(self, hero);
    ai_output(self, hero, "Info_Milten_OCWARN_02_01"); //Îíè... Îíè âñå ìåðòâû... Âñå ÌÅÐÒÂÛ. ß íå ìîã èì ïîìî÷ü... ß áûë... Ìåíÿ òàì íå áûëî... ß...
    if (npc_knowsinfo(hero, info_diego_ocretreat /*11920*/)) {
        ai_output(hero, self, "Info_Milten_OCWARN_15_02"); //Óñïîêîéñÿ, Ìèëüòåí, ÿ óæå âñòðåòèë Äèåãî íà äðóãîì êîíöå Ëàãåðÿ.
        ai_output(self, hero, "Info_Milten_OCWARN_02_03"); //Òîãäà òû äîëæåí çíàòü... ×òî ñêàçàë Äèåãî?
        ai_output(hero, self, "Info_Milten_OCWARN_15_04"); //Åñëè ÿ ñìîãó íàéòè Ãîðíà è Ëåñòåðà, ÿ ïðåäóïðåæó èõ è îòïðàâëþ òåáå íàâñòðå÷ó.
        ai_output(self, hero, "Info_Milten_OCWARN_02_05"); //Óäà÷è! Áóäü îñòîðîæåí!
        b_logentry(ch4_firemages, ch4_firemages_9);
        ai_stopprocessinfos(self);
    }
    else {
        ai_output(hero, self, "Info_Milten_OCWARN_15_06"); //Óñïîêîéñÿ, Ìèëüòåí, ÷òî ñëó÷èëîñü?
        ai_output(self, hero, "Info_Milten_OCWARN_02_07"); //Âñå ìàãè Îãíÿ ìåðòâû! Âñå, êðîìå ìåíÿ, è ÿ òîæå áûë íà âîëîñîê îò ñìåðòè.
        ai_output(hero, self, "Info_Milten_OCWARN_15_08"); //Ëó÷øå ðàññêàæè ìíå âñå ïî ïîðÿäêó, ñ ñàìîãî íà÷àëà.
        ai_output(self, hero, "Info_Milten_OCWARN_02_09"); //Ëàäíî. Ñïîêîéíî, Ìèëüòåí, ñïîêîéíî...
        ai_output(self, hero, "Info_Milten_OCWARN_02_10"); //Âñå íà÷àëîñü ñ òîãî, ÷òî îáðóøèëàñü Ñòàðàÿ Øàõòà...
        ai_output(hero, self, "Info_Milten_OCWARN_15_11"); //Ñòàðàÿ Øàõòà ÎÁÐÓØÈËÀÑÜ???
        ai_output(self, hero, "Info_Milten_OCWARN_02_12"); //Äà. Âñå ïðîèçîøëî î÷åíü áûñòðî. Íèêòî íå óöåëåë.
        ai_output(self, hero, "Info_Milten_OCWARN_02_13"); //Âõîä â øàõòó áëîêèðîâàëè ñòðàæíèêè.
    };
};

instance info_milten_ocmine(c_info) {
    npc = pc_mage /*7979*/;
    nr = 0;
    condition = info_milten_ocmine_condition;
    information = info_milten_ocmine_info;
    description = "Êàê ìîãëà îáðóøèòüñÿ öåëàÿ øàõòà?";
};

func int info_milten_ocmine_condition() {
    if (npc_knowsinfo(hero, info_milten_ocwarn /*11618*/) && (!npc_knowsinfo(hero, info_diego_ocretreat /*11920*/))) {
        return true;
    };
};

func void info_milten_ocmine_info() {
    ai_output(hero, self, "Info_Milten_OCMINE_15_01"); //Êàê ìîãëà îáðóøèòüñÿ öåëàÿ øàõòà?
    ai_output(self, hero, "Info_Milten_OCMINE_02_02"); //Ïîíÿòèÿ íå èìåþ. Òå èç ðóäîêîïîâ, êòî áûë â òîò ìîìåíò ó âõîäà, ïîòîì ãîâîðèëè, ÷òî íà÷àëîñü ÷òî-òî âðîäå çåìëåòðÿñåíèÿ, à ïîòîì èç òóííåëÿ âûðâàëîñü îãðîìíîå îáëàêî ïûëè.
    ai_output(hero, self, "Info_Milten_OCMINE_15_03"); //Òû áûë òàì?
    ai_output(self, hero, "Info_Milten_OCMINE_02_04"); //Äà. Òàì ÿ è óçíàë, ÷òî øàõòà îáðóøèëàñü.
};

instance info_milten_ockdw(c_info) {
    npc = pc_mage /*7979*/;
    nr = 0;
    condition = info_milten_ockdw_condition;
    information = info_milten_ockdw_info;
    description = "×òî òû ãîâîðèë ïî ïîâîäó ìàãîâ Îãíÿ?";
};

func int info_milten_ockdw_condition() {
    if (npc_knowsinfo(hero, info_milten_ocwarn /*11618*/) && (!npc_knowsinfo(hero, info_diego_ocretreat /*11920*/))) {
        return true;
    };
};

func void info_milten_ockdw_info() {
    ai_output(hero, self, "Info_Milten_OCKDW_15_01"); //×òî òû ãîâîðèë ïî ïîâîäó ìàãîâ Îãíÿ?
    ai_output(self, hero, "Info_Milten_OCKDW_02_02"); //ß çíàþ òîëüêî, ÷òî âñêîðå ïîñëå òîãî, êàê øàõòà îáðóøèëàñü, èõ âñåõ óáèëè Áàðîíû.
    ai_output(self, hero, "Info_Milten_OCKDW_02_03"); //Êîãäà ÿ âåðíóëñÿ îò ãðîáíèöû, ñòðàæíèêè ó âîðîò âíåçàïíî íàïàëè íà ìåíÿ.
    ai_output(self, hero, "Info_Milten_OCKDW_02_04"); //Îíè íàçûâàëè ìåíÿ 'ïðåäàòåëåì'. Ìíå åäâà óäàëîñü óéòè.
};

instance info_milten_ocwhy(c_info) {
    npc = pc_mage /*7979*/;
    nr = 0;
    condition = info_milten_ocwhy_condition;
    information = info_milten_ocwhy_info;
    description = "Çà÷åì Áàðîíàì ïîíàäîáèëîñü óáèâàòü ìàãîâ? Ýòî æå ãëóïî...";
};

func int info_milten_ocwhy_condition() {
    if (npc_knowsinfo(hero, info_milten_ockdw /*11624*/)) {
        return true;
    };
};

func void info_milten_ocwhy_info() {
    ai_output(hero, self, "Info_Milten_OCWHY_15_01"); //Çà÷åì Áàðîíàì ïîíàäîáèëîñü óáèâàòü ìàãîâ? Ýòî æå ãëóïî...
    ai_output(self, hero, "Info_Milten_OCWHY_02_02"); //Òû ïðàâ. Íî ó ìåíÿ íå áûëî øàíñà ñïðîñèòü îá ýòîì ó ñòðàæíèêîâ. Îíè ñðàçó æå âçÿëèñü çà ìå÷è.
    ai_output(self, hero, "Info_Milten_OCWHY_02_03"); //Âîçìîæíî, Äèåãî ÷òî-òî çíàåò. Êàê ðàç â òî âðåìÿ îí áûë â Ëàãåðå.
};

instance info_milten_ocyou(c_info) {
    npc = pc_mage /*7979*/;
    nr = 0;
    condition = info_milten_ocyou_condition;
    information = info_milten_ocyou_info;
    description = "Òåáå íóæíî ñïðÿòàòüñÿ. Ãäå-íèáóäü ïîäàëüøå îòñþäà.";
};

func int info_milten_ocyou_condition() {
    if (npc_knowsinfo(hero, info_milten_ockdw /*11624*/)) {
        return true;
    };
};

func void info_milten_ocyou_info() {
    ai_output(hero, self, "Info_Milten_OCYOU_15_01"); //Òåáå íóæíî ñïðÿòàòüñÿ. Ãäå-íèáóäü ïîäàëüøå îòñþäà.
    ai_output(self, hero, "Info_Milten_OCYOU_02_02"); //Íåò. Ìû ñ Äèåãî äîãîâîðèëèñü ïðèãëÿäûâàòü çà âîðîòàìè è ïðåäóïðåæäàòü íàøèõ äðóçåé èç äðóãèõ Ëàãåðåé - îíè âåäü íè÷åãî íå ïîäîçðåâàþò!
    if (!npc_knowsinfo(hero, info_diego_ocstory /*11908*/)) {
        ai_output(self, hero, "Info_Milten_OCYOU_02_03"); //Ïîæàëóéñòà, ïîãîâîðè ñ Äèåãî!
    }
    else {
        b_logentry(ch4_firemages, ch4_firemages_10);
    };
};

instance info_milten_ocdiego(c_info) {
    npc = pc_mage /*7979*/;
    nr = 0;
    condition = info_milten_ocdiego_condition;
    information = info_milten_ocdiego_info;
    description = "Ãäå èñêàòü Äèåãî?";
};

func int info_milten_ocdiego_condition() {
    if ((npc_knowsinfo(hero, info_milten_ocwhy /*11627*/) && npc_knowsinfo(hero, info_milten_ocyou /*11630*/)) && (!npc_knowsinfo(hero, info_diego_ocstory /*11908*/))) {
        return true;
    };
};

func void info_milten_ocdiego_info() {
    ai_output(hero, self, "Info_Milten_OCDIEGO_15_01"); //Ãäå èñêàòü Äèåãî?
    ai_output(self, hero, "Info_Milten_OCDIEGO_02_02"); //Îí ñêðûâàåòñÿ ó âòîðûõ âîðîò, íà äðóãîì êîíöå Ëàãåðÿ.
    ai_output(self, hero, "Info_Milten_OCDIEGO_02_03"); //Ïîæàëóéñòà, ïîãîâîðè ñ íèì!
    b_logentry(ch4_firemages, ch4_firemages_11);
    b_logentry(ch4_firemages, ch4_firemages_12);
};

instance info_milten_loadsword(c_info) {
    npc = pc_mage /*7979*/;
    condition = info_milten_loadsword_condition;
    information = info_milten_loadsword_info;
    important = true;
};

func int info_milten_loadsword_condition() {
    if (loadsword) {
        return true;
    };
};

func void info_milten_loadsword_info() {
    ai_gotonpc(self, hero);
    ai_output(self, hero, "Info_Milten_LOADSWORD_02_01"); //Ïðèâåòñòâóþ òåáÿ, ìîé äðóã. Ìíîãî âîäû óòåêëî ñ òåõ ïîð, êàê ìû âèäåëèñü ïîñëåäíèé ðàç.
    ai_output(hero, self, "Info_Milten_LOADSWORD_15_02"); //Ïðèâåò, Ìèëüòåí. Äà, ñ òåõ ïîð ìíîãîå èçìåíèëîñü.
    ai_output(hero, self, "Info_Milten_LOADSWORD_15_03"); //ß áû ñ óäîâîëüñòâèåì ðàññêàçàë òåáå îáî âñåì, íî ñåé÷àñ ÿ ñïåøó - âðåìÿ ïîäæèìàåò.
};

instance info_milten_loadsword1(c_info) {
    npc = pc_mage /*7979*/;
    nr = 0;
    condition = info_milten_loadsword1_condition;
    information = info_milten_loadsword1_info;
    description = "Ìèëüòåí, ìíå íóæíà òâîÿ ïîìîùü!";
};

func int info_milten_loadsword1_condition() {
    if (npc_knowsinfo(hero, info_milten_loadsword /*11636*/)) {
        return 1;
    };
};

func void info_milten_loadsword1_info() {
    ai_output(hero, self, "Info_Milten_LOADSWORD1_15_01"); //Ìèëüòåí, ìíå íóæíà òâîÿ ïîìîùü!
    ai_output(self, hero, "Info_Milten_LOADSWORD1_02_02"); //×òî ñëó÷èëîñü? ×åì ÿ ìîãó òåáå ïîìî÷ü?
    ai_output(hero, self, "Info_Milten_LOADSWORD1_15_03"); //Íàì íóæíî ãäå-òî ïîãîâîðèòü.
    ai_output(self, hero, "Info_Milten_LOADSWORD1_02_04"); //Õîðîøî. Èäè çà ìíîé.
    npc_exchangeroutine(self, "LSAway");
    ai_stopprocessinfos(self);
};

instance info_milten_lsaway(c_info) {
    npc = pc_mage /*7979*/;
    condition = info_milten_lsaway_condition;
    information = info_milten_lsaway_info;
    important = true;
};

func int info_milten_lsaway_condition() {
    if (npc_knowsinfo(hero, info_milten_loadsword1 /*11639*/) && (npc_getdisttowp(hero, "NC_KDW04_IN") < 500)) {
        return true;
    };
};

func void info_milten_lsaway_info() {
    ai_gotonpc(self, hero);
    ai_output(self, hero, "Info_Milten_LSAWAY_02_01"); //Òåïåðü ðàññêàçûâàé, ÷òî ñòðÿñëîñü?
    ai_output(hero, self, "Info_Milten_LSAWAY_15_02"); //Ìíå íóæíî âîñïîëüçîâàòüñÿ ñèëîé æåëåçíîé ãîðû, è ÿ íå äóìàþ, ÷òî ìíå ñòîèò îáðàùàòüñÿ ñ òàêîé ïðîñüáîé ê äðóãèì ìàãàì Âîäû.
    ai_output(self, hero, "Info_Milten_LSAWAY_02_03"); //Òû øóòèøü?
    ai_output(hero, self, "Info_Milten_LSAWAY_15_04"); //Äëÿ øóòîê íåò âðåìåíè. ß ñåðüåçåí, êàê íèêîãäà.
    ai_output(hero, self, "Info_Milten_LSAWAY_15_05"); //ß âèäåëñÿ ñ íåêðîìàíòîì Êñàðäàñîì.
    ai_output(hero, self, "Info_Milten_LSAWAY_15_06"); //ß äåéñòâóþ ïî åãî ïðèêàçó.
    ai_output(self, hero, "Info_Milten_LSAWAY_02_07"); //ÊÑÀÐÄÀÑ??? Òû ìåíÿ ïóãàåøü!
    ai_output(self, hero, "Info_Milten_LSAWAY_02_08"); //Íèêòî íå ðàçãîâàðèâàë ñ íèì ñ òåõ ñàìûõ ïîð, êàê îí ïîêèíóë Ñòàðûé Ëàãåðü.
    ai_output(hero, self, "Info_Milten_LSAWAY_15_09"); //ß âèäåëñÿ ñ íèì!
    ai_output(self, hero, "Info_Milten_LSAWAY_02_10"); //Çà÷åì òåáå ïîíàäîáèëàñü ñèëà æåëåçíîé ãîðû?
    ai_output(hero, self, "Info_Milten_LSAWAY_15_11"); //ß õî÷ó ïåðåäàòü åå ýòîìó ìå÷ó.
    ai_output(self, hero, "Info_Milten_LSAWAY_02_12"); //Óõ òû! Âîò ýòî êëèíîê!
    ai_output(hero, self, "Info_Milten_LSAWAY_15_13"); //Åãî èìÿ - ÓÐÈÇÅËÜ!
};

instance info_milten_loadsword4(c_info) {
    npc = pc_mage /*7979*/;
    nr = 0;
    condition = info_milten_loadsword4_condition;
    information = info_milten_loadsword4_info;
    description = "Ýòî çàêëèíàíèå ìíå äàë Êñàðäàñ!";
};

func int info_milten_loadsword4_condition() {
    if (npc_knowsinfo(hero, info_milten_lsaway /*11642*/)) {
        return 1;
    };
};

func void info_milten_loadsword4_info() {
    ai_output(hero, self, "Info_Milten_LOADSWORD4_15_01"); //Êñàðäàñ äàë ìíå çàêëèíàíèå äëÿ ïåðåíîñà ñèëû.
    ai_output(hero, self, "Info_Milten_LOADSWORD4_15_02"); //Òåáå íóæíî áóäåò ïðî÷åñòü åãî, êîãäà ÿ ïîäíåñó ìå÷ ê æåëåçíîé ãîðå.
    b_usefakescroll();
    ai_output(self, hero, "Info_Milten_LOADSWORD4_02_03"); //Ì-ìì. Ì-ìì... Íó, åñëè ìíå íóæíî òîëüêî ïðî÷åñòü çàêëèíàíèå...
    ai_output(self, hero, "Info_Milten_LOADSWORD4_02_04"); //Íî ó íàñ âîçíèêíóò ïðîáëåìû ñ Ñàòóðàñîì è äðóãèìè ìàãàìè!
};

instance info_milten_lsrisk(c_info) {
    npc = pc_mage /*7979*/;
    nr = 0;
    condition = info_milten_lsrisk_condition;
    information = info_milten_lsrisk_info;
    description = "Ïðèäåòñÿ ðèñêíóòü!";
};

func int info_milten_lsrisk_condition() {
    if (npc_knowsinfo(hero, info_milten_loadsword4 /*11645*/)) {
        return true;
    };
};

func void info_milten_lsrisk_info() {
    ai_output(hero, self, "Info_Milten_LSRISK_15_01"); //Ïðèäåòñÿ ðèñêíóòü!
    ai_output(hero, self, "Info_Milten_LSRISK_15_02"); //Ýòî íà ñàìîì äåëå Î×ÅÍÜ, Î×ÅÍÜ âàæíî!
    ai_output(hero, self, "Info_Milten_LSRISK_15_03"); //Âàæíî äëÿ ÂÑÅÕ æèòåëåé êîëîíèè.
    ai_output(self, hero, "Info_Milten_LSRISK_02_04"); //ß íå ïîíèìàþ...
    ai_output(hero, self, "Info_Milten_LSRISK_15_05"); //Òàê ìû ñìîæåì âûáðàòüñÿ îòñþäà! Òû äîëæåí ìíå äîâåðÿòü!
    ai_output(self, hero, "Info_Milten_LSRISK_02_06"); //Íó, õîðîøî. Ïîñëå âñåãî òîãî, ÷òî òû äëÿ íàñ ñäåëàë, ÿ íå ìîãó îòíîñèòüñÿ ê òåáå èíà÷å êàê ñ ïîëíûì äîâåðèåì.
    ai_output(self, hero, "Info_Milten_LSRISK_02_07"); //Ïîìèìî ýòîãî, ïîõîæå, è Êñàðäàñ òåáå äîâåðÿåò.
    ai_output(self, hero, "Info_Milten_LSRISK_02_08"); //Âñòðåòèìñÿ âîçëå æåëåçíîé ãîðû, è... Íèêîìó íå ãîâîðè îá ýòîì!
    ai_output(hero, self, "Info_Milten_LSRISK_15_09"); //Õîðîøî, ÿ áóäó æäàòü òåáÿ ó æåëåçíîé ãîðû. Äî âñòðå÷è!
    b_logentry(ch5_uriziel, ch5_uriziel_7);
    npc_exchangeroutine(self, "LSOreHeap");
    b_exchangeroutine(sld_725_soeldner /*8075*/, "loadsword");
    b_exchangeroutine(sld_726_soeldner /*8078*/, "loadsword");
    ai_stopprocessinfos(self);
};

instance info_milten_lsoreheap(c_info) {
    npc = pc_mage /*7979*/;
    condition = info_milten_lsoreheap_condition;
    information = info_milten_lsoreheap_info;
    important = true;
};

func int info_milten_lsoreheap_condition() {
    if (npc_knowsinfo(hero, info_milten_lsrisk /*11648*/) && (npc_getdisttowp(hero, "NC_PATH41") < 500)) {
        return true;
    };
};

func void info_milten_lsoreheap_info() {
    ai_output(self, hero, "Info_Milten_LSOREHEAP_02_01"); //Òû ïðèíåñ ìå÷ è çàêëèíàíèå?
};

instance info_milten_lsnow(c_info) {
    npc = pc_mage /*7979*/;
    nr = 0;
    condition = info_milten_lsnow_condition;
    information = info_milten_lsnow_info;
    description = "Âîò, äåðæè çàêëèíàíèå!";
};

func int info_milten_lsnow_condition() {
    if (((npc_knowsinfo(hero, info_milten_lsoreheap /*11651*/) && npc_hasitems(hero, mythrilklinge01)) && npc_hasitems(hero, scroll4milten)) && (npc_getdisttowp(hero, "NC_PATH41") < 1000)) {
        return true;
    };
};

func void info_milten_lsnow_info() {
    ai_output(hero, self, "Info_Milten_LSNOW_15_01"); //Âîò, äåðæè çàêëèíàíèå!
    ai_output(hero, self, "Info_Milten_LSNOW_15_02"); //Òû ãîòîâ?
    ai_output(self, hero, "Info_Milten_LSNOW_02_03"); //Åñëè òîëüêî êòî-íèáóäü ìîæåò áûòü ãîòîâ ê ýòîìó...
    ai_output(hero, self, "Info_Milten_LSNOW_15_04"); //Ïîåõàëè!
    b_giveinvitems(hero, self, scroll4milten /*4765*/, 1);
    npc_removeinvitem(hero, mythrilklinge01 /*4762*/);
    startchapterssix = true;
    ai_stopprocessinfos(self);
};

instance info_milten_chaptersix(c_info) {
    npc = pc_mage /*7979*/;
    condition = info_milten_chaptersix_condition;
    information = info_milten_chaptersix_info;
    important = true;
};

func int info_milten_chaptersix_condition() {
    if (npc_knowsinfo(hero, info_milten_lsnow /*11654*/) && startchapterssix) {
        return true;
    };
};

func void info_milten_chaptersix_info() {
    ai_stopprocessinfos(self);
    b_kapitelwechsel(6);
};

instance info_milten_lsdone(c_info) {
    npc = pc_mage /*7979*/;
    condition = info_milten_lsdone_condition;
    information = info_milten_lsdone_info;
    important = true;
};

func int info_milten_lsdone_condition() {
    if (kapitel == 6) {
        return true;
    };
};

func void info_milten_lsdone_info() {
    ai_output(self, hero, "Info_Milten_LSDONE_02_01"); //Ãîòîâî!
    ai_output(hero, self, "Info_Milten_LSDONE_15_02"); //Íåâåðîÿòíî! Îáû÷íûé ñåðûé êàìåíü òåïåðü ñâåòèòñÿ ñèíèì!
    if (hero.attribute[atr_strength] /*4*/ >= 30) {
        set_urizel_in_righthand();
        ai_equipbestmeleeweapon(hero);
        ai_readymeleeweapon(hero);
        ai_playani(hero, "T_1HSINSPECT");
        ai_removeweapon(hero);
    };
    ai_output(self, hero, "Info_Milten_LSDONE_02_03"); //Ïîõîæå, ó íàñ ïîëó÷èëîñü! Ìàãè÷åñêàÿ ñèëà âñåé ýòîé ðóäû òåïåðü çàêëþ÷åíà â îäíîì ñòàðîì ìå÷å.
    ai_output(self, hero, "Info_Milten_LSDONE_02_04"); //Íî êàæåòñÿ, ìû ïðèâëåêëè ê ñåáå ñëèøêîì ìíîãî âíèìàíèÿ.
    ai_output(self, hero, "Info_Milten_LSDONE_02_05"); //Òåáå ïðèäåòñÿ âîñïîëüçîâàòüñÿ Çàêëèíàíèåì Ïîðòàë, äëÿ òîãî ÷òîáû óáðàòüñÿ îòñþäà!
    ai_output(hero, self, "Info_Milten_LSDONE_15_06"); //À êàê æå òû?
    ai_output(self, hero, "Info_Milten_LSDONE_02_07"); //Îáî ìíå íå âîëíóéñÿ, ÿ ÷òî-íèáóäü ïðèäóìàþ. Óõîäè!
    b_story_urizielloaded();
    ai_stopprocessinfos(self);
};

instance pc_psionic_exit(c_info) {
    npc = pc_psionic /*7989*/;
    nr = 999;
    condition = pc_psionic_exit_condition;
    information = pc_psionic_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int pc_psionic_exit_condition() {
    return 1;
};

func void pc_psionic_exit_info() {
    if (self.aivar[36]) {
        ai_output(self, hero, "Info_Lester_EXIT_05_01"); //Èäåì!
    }
    else {
        ai_output(self, hero, "Info_Lester_EXIT_05_02"); //Äà õðàíèò òåáÿ Ñïÿùèé!
    };
    ai_stopprocessinfos(self);
};

instance dia_lester_sakrileg(c_info) {
    npc = pc_psionic /*7989*/;
    nr = 1;
    condition = dia_lester_sakrileg_condition;
    information = dia_lester_sakrileg_info;
    important = true;
};

func int dia_lester_sakrileg_condition() {
    if (baalnamib_sakrileg == true) {
        return 1;
    };
};

func void dia_lester_sakrileg_info() {
    ai_output(self, other, "DIA_Lester_Sakrileg_05_00"); //Òû îáðàòèëñÿ ê Ãóðó! Íèêîãäà áîëüøå íå äåëàé ýòîãî! Ýòî áîëüøîé ãðåõ! Åñëè ãîñïîäèí çàõî÷åò ïîãîâîðèòü ñ òîáîé, îí ÑÀÌ îáðàòèòñÿ ê òåáå.
};

instance dia_lester_hallo(c_info) {
    npc = pc_psionic /*7989*/;
    nr = 1;
    condition = dia_lester_hallo_condition;
    information = dia_lester_hallo_info;
    description = "Êàê òåáÿ çîâóò?";
};

func int dia_lester_hallo_condition() {
    if (kapitel < 3) {
        return true;
    };
};

func void dia_lester_hallo_info() {
    ai_output(other, self, "DIA_Lester_Hallo_15_00"); //Êòî òû?
    ai_output(self, other, "DIA_Lester_Hallo_05_01"); //Ìåíÿ çîâóò Ëåñòåð. ß çàíèìàþñü ïðèáûâàþùèìè ñþäà ÷óæåçåìöàìè.
    if (baalnamib_sakrileg == false) {
        ai_output(self, other, "DIA_Lester_Hallo_05_02"); //Õîðîøî, ÷òî òû íå çàãîâîðèë ñ Èäîëîì Íàìèáîì. Ïîñòîðîííèì íå ïîçâîëåíî îáðàùàòüñÿ ê Ãóðó.
    };
};

instance dia_lester_wannatalktomaster(c_info) {
    npc = pc_psionic /*7989*/;
    nr = 2;
    condition = dia_lester_wannatalktomaster_condition;
    information = dia_lester_wannatalktomaster_info;
    description = "Íî ÿ õî÷ó ïîãîâîðèòü ñ òâîèì ãîñïîäèíîì.";
};

func int dia_lester_wannatalktomaster_condition() {
    if (((npc_knowsinfo(hero, dia_lester_hallo /*11669*/) || npc_knowsinfo(hero, dia_lester_sakrileg /*11666*/)) && (npc_gettrueguild(hero) == gil_none)) && (!npc_knowsinfo(hero, dia_lester_showhallo /*11693*/))) {
        return 1;
    };
};

func void dia_lester_wannatalktomaster_info() {
    ai_output(other, self, "DIA_Lester_WannaTalkToMaster_15_00"); //Íî ÿ õî÷ó ïîãîâîðèòü ñ òâîèì ãîñïîäèíîì.
    ai_output(self, other, "DIA_Lester_WannaTalkToMaster_05_01"); //Ëó÷øå çàáóäü îá ýòîì! Óâåðåí, ÷òî ÿ ñìîãó ïîìî÷ü òåáå íå õóæå.
};

instance dia_lester_campinfo(c_info) {
    npc = pc_psionic /*7989*/;
    nr = 2;
    condition = dia_lester_campinfo_condition;
    information = dia_lester_campinfo_info;
    permanent = true;
    description = "Ðàññêàæè ìíå îá ýòîì Ëàãåðå.";
};

func int dia_lester_campinfo_condition() {
    if (npc_knowsinfo(hero, dia_lester_hallo /*11669*/) && (kapitel < 3)) {
        return 1;
    };
};

func void dia_lester_campinfo_info() {
    ai_output(other, self, "DIA_Lester_CampInfo_15_00"); //Ðàññêàæè ìíå îá ýòîì Ëàãåðå.
    ai_output(self, other, "DIA_Lester_CampInfo_05_01"); //×òî òû õî÷åøü óçíàòü?
    info_clearchoices(dia_lester_campinfo /*11675*/);
    info_addchoice(dia_lester_campinfo /*11675*/, dialog_back, dia_lester_campinfo_back);
    info_addchoice(dia_lester_campinfo /*11675*/, "Ðàññêàæè ìíå î ãèëüäèÿõ.", dia_lester_campinfo_gil);
    info_addchoice(dia_lester_campinfo /*11675*/, "Ðàññêàæè ìíå î Ñïÿùåì.", dia_lester_campinfo_sleeper);
    info_addchoice(dia_lester_campinfo /*11675*/, "Ðàññêàæè ìíå î áîëîòíèêå.", dia_lester_campinfo_herb);
};

func void dia_lester_campinfo_back() {
    info_clearchoices(dia_lester_campinfo /*11675*/);
};

func void dia_lester_campinfo_gil() {
    ai_output(other, self, "DIA_Lester_CampInfo_GIL_15_00"); //Ðàññêàæè ìíå î ãèëüäèÿõ.
    ai_output(self, other, "DIA_Lester_CampInfo_GIL_05_01"); //Âåðõîâíóþ ãèëüäèþ ïðåäñòàâëÿþò Ãóðó. Â íèõ æèâåò äóõ íàøåãî Ëàãåðÿ, èì äàðîâàíà âåëèêàÿ ñèëà. Ñëåäîì èäóò Ñòðàæè. Èõ ñèëà íàõîäèò ïðèìåíåíèå â áîÿõ âî ñëàâó Ñïÿùåãî.
    ai_output(self, other, "DIA_Lester_CampInfo_GIL_05_02"); //Ñòðàæè ñëàâÿòñÿ íåóêðîòèìîé ñèëîé äóõà. ÁÎÉÑß âñòàòü ó íèõ íà ïóòè! ß æå ÿâëÿþñü ïîñëóøíèêîì. Ìû ìîëèìñÿ Ñïÿùåìó è âûïîëíÿåì âñþ ðàáîòó ïî Ëàãåðþ.
    ai_output(self, other, "DIA_Lester_CampInfo_GIL_05_03"); //Íåêîòîðûì ïîñëóøíèêàì óäàåòñÿ ñòàòü Ãóðó, íî äëÿ òîãî ÷òîáû äîñòè÷ü ýòîãî, íåîáõîäèìî ó÷èòüñÿ äîëãèå ãîäû.
};

func void dia_lester_campinfo_sleeper() {
    ai_output(other, self, "DIA_Lester_CampInfo_SLEEPER_15_00"); //Ðàññêàæè ìíå î Ñïÿùåì.
    ai_output(self, other, "DIA_Lester_CampInfo_SLEEPER_05_01"); //Ñïÿùèé - áîæåñòâåííîå ñóùåñòâî. Îí äàðóåò ëþäÿì âèäåíèÿ - ïðàâäà, ýòîé ÷åñòè óäîñòàèâàþòñÿ ëèøü Ãóðó.
    ai_output(self, other, "DIA_Lester_CampInfo_SLEEPER_05_02"); //Ìû ìîëèìñÿ åìó, è îí íèñïîøëåò íàì ñâîáîäó.
    ai_output(other, self, "DIA_Lester_CampInfo_SLEEPER_15_03"); //È òû âåðèøü âî âñå ýòî?
    ai_output(self, other, "DIA_Lester_CampInfo_SLEEPER_05_04"); //Ïîñëóøàé, ÿ ïðîáûë çäåñü óæå äâà ãîäà. Çíàåøü ëè òû, êàêîâî ýòî - ïðîæèòü ÄÂÀ ÃÎÄÀ âíóòðè Áàðüåðà?
    ai_output(self, other, "DIA_Lester_CampInfo_SLEEPER_05_05"); //Òû ïðîñòî íå ïðåäñòàâëÿåøü, âî ÷òî ÿ ãîòîâ ïîâåðèòü, ðàäè òîãî ÷òîáû óáðàòüñÿ îòñþäà!
};

func void dia_lester_campinfo_herb() {
    ai_output(other, self, "DIA_Lester_CampInfo_HERB_15_00"); //Ðàññêàæè ìíå î áîëîòíèêå.
    ai_output(self, other, "DIA_Lester_CampInfo_HERB_05_01"); //Áîëîòíèê ðàñòåò íà áîëîòàõ - ýòî âñå çíàþò. Ðàçóìååòñÿ, ïðåæäå ÷åì êóðèòü, åãî íóæíî îáðàáîòàòü äîëæíûì îáðàçîì. Ýòèì êàê ðàç çàíèìàþòñÿ ïîñëóøíèêè.
    ai_output(self, other, "DIA_Lester_CampInfo_HERB_05_02"); //Áîëîòíèê ðàññëàáëÿåò òåëî è óñïîêàèâàåò ñîçíàíèå, ïîìîãàåò ñîñðåäîòî÷èòüñÿ íà ãëàâíîì è ñïîñîáñòâóåò ïîçíàíèþ èñòèíû.
    ai_output(self, other, "DIA_Lester_CampInfo_HERB_05_03"); //Ìû îáìåíèâàåì åãî íà òîâàðû èç Ñòàðîãî Ëàãåðÿ è íàíèìàåì ñ åãî ïîìîùüþ íîâûõ ëþäåé.
    ai_output(self, other, "DIA_Lester_CampInfo_HERB_05_04"); //Êîíå÷íî, êòî-òî ïðèñîåäèíÿåòñÿ ê íàì òîëüêî èç-çà áîëîòíèêà. ×òî æ, ïî êðàéíåé ìåðå, îíè ïîìîãàþò íàì â ðàáîòå ïî Ëàãåðþ.
};

instance dia_lester_wannajoin(c_info) {
    npc = pc_psionic /*7989*/;
    nr = 2;
    condition = dia_lester_wannajoin_condition;
    information = dia_lester_wannajoin_info;
    description = "ß õî÷ó ñòàòü ÷ëåíîì Áðàòñòâà!";
};

func int dia_lester_wannajoin_condition() {
    if (npc_knowsinfo(hero, dia_lester_hallo /*11669*/) && (npc_gettrueguild(hero) == gil_none)) {
        return 1;
    };
};

func void dia_lester_wannajoin_info() {
    ai_output(other, self, "DIA_Lester_WannaJoin_15_00"); //ß õî÷ó ñòàòü ÷ëåíîì Áðàòñòâà!
    ai_output(self, other, "DIA_Lester_WannaJoin_05_01"); //Ãîòîâ òû ê ýòîìó èëè íåò, áóäåò ðåøàòü Êîð Ãàëîì.
    ai_output(self, other, "DIA_Lester_WannaJoin_05_02"); //Íî îí ïðèñëóøèâàåòñÿ è ê ìíåíèþ äðóãèõ Ãóðó - Èäîëà Íàìèáà, íàïðèìåð.
    ai_output(self, other, "DIA_Lester_WannaJoin_05_03"); //Òû äîëæåí äîêàçàòü ñâîþ ïðåäàííîñòü, è ðàíî èëè ïîçäíî êòî-òî èç Ãóðó íàïðàâèò òåáÿ ê Êîð Ãàëîìó.
};

instance dia_lester_howproofworthy(c_info) {
    npc = pc_psionic /*7989*/;
    nr = 2;
    condition = dia_lester_howproofworthy_condition;
    information = dia_lester_howproofworthy_info;
    description = "Íî ÷òî ÿ ìîãó ñäåëàòü, åñëè íèêòî èç Ãóðó íå ãîâîðèò ñî ìíîé?";
};

func int dia_lester_howproofworthy_condition() {
    if (npc_knowsinfo(hero, dia_lester_wannajoin /*11682*/) && (npc_gettrueguild(hero) == gil_none)) {
        return 1;
    };
};

func void dia_lester_howproofworthy_info() {
    ai_output(other, self, "DIA_Lester_HowProofWorthy_15_00"); //Íî ÷òî ÿ ìîãó ñäåëàòü, åñëè íèêòî èç Ãóðó íå æåëàåò ñî ìíîé ðàçãîâàðèâàòü?
    ai_output(self, other, "DIA_Lester_HowProofWorthy_05_01"); //Òåáå òîëüêî òàê êàæåòñÿ. Ãóðó íàáëþäàþò çà âñåì, ÷òî ïðîèñõîäèò â Ëàãåðå.
    ai_output(self, other, "DIA_Lester_HowProofWorthy_05_02"); //Åñëè îíè ðåøàò, ÷òî òû äîñòîèí ñòàòü ÷ëåíîì Áðàòñòâà, îíè çàãîâîðÿò ñ òîáîé.
    ai_output(self, other, "DIA_Lester_HowProofWorthy_05_03"); //Òåáå ïðèäåòñÿ æäàòü ïîäõîäÿùåãî ñëó÷àÿ, ÷òîáû äîêàçàòü èì ñâîþ ïðåäàííîñòü.
    log_createtopic(ch1_joinpsi, log_mission);
    log_settopicstatus(ch1_joinpsi, log_running);
    b_logentry(ch1_joinpsi, ch1_joinpsi_17);
};

var int lester_show;

instance dia_lester_weitweg(c_info) {
    npc = pc_psionic /*7989*/;
    nr = 2;
    condition = dia_lester_weitweg_condition;
    information = dia_lester_weitweg_info;
    description = "Êàê çàñòàâèòü òâîåãî ãîñïîäèíà çàãîâîðèòü ñî ìíîé?";
};

func int dia_lester_weitweg_condition() {
    var c_npc namib;

    namib = hlp_getnpc(gur_1204_baalnamib);
    if (((npc_getdisttonpc(other, namib) > 1000) && (baalnamib_ansprechbar == false)) && (npc_gettrueguild(hero) == gil_none)) {
        return 1;
    };
};

func void dia_lester_weitweg_info() {
    ai_output(other, self, "DIA_Lester_WeitWeg_15_00"); //Êàê çàñòàâèòü òâîåãî ãîñïîäèíà çàãîâîðèòü ñî ìíîé?
    ai_output(self, other, "DIA_Lester_WeitWeg_05_01"); //Íóæíî çíàòü, ÷òî îí õî÷åò îò òåáÿ óñëûøàòü.
    ai_output(other, self, "DIA_Lester_WeitWeg_15_02"); //È ÷òî æå?
    ai_output(self, other, "DIA_Lester_WeitWeg_05_03"); //Ñëóøàé. Êîãäà â ñëåäóþùèé ðàç óâèäèøü íàñ âìåñòå, çàãîâîðè ñî ìíîé.
    ai_output(self, other, "DIA_Lester_WeitWeg_05_04"); //Èäîë Íàìèá áåñïîêîèòñÿ èç-çà òîãî, ÷òî ìíîãèå ïîñëóøíèêè ìîëÿòñÿ íå òîëüêî Ñïÿùåìó, íî è ñâîèì ñòàðûì áîãàì.
    ai_output(self, other, "DIA_Lester_WeitWeg_05_05"); //Òû ñêàæåøü ìíå, ÷òî îòðåêñÿ îò ñòàðûõ áîãîâ, è ÷òî îòíûíå òû áóäåøü ìîëèòüñÿ òîëüêî Ñïÿùåìó.
    ai_output(self, other, "DIA_Lester_WeitWeg_05_06"); //Êîãäà ÿ ñïðîøó, ïî÷åìó òû ðåøèë òàê ïîñòóïèòü, îòâåòèøü, ÷òî òåáå áûëî âèäåíèå, â êîòîðîì Ñïÿùèé ïðèçâàë òåáÿ.
    ai_output(self, other, "DIA_Lester_WeitWeg_05_07"); //Åãî ýòî çàèíòåðåñóåò. Òû ñïðàâèøüñÿ?
    ai_output(other, self, "DIA_Lester_WeitWeg_15_08"); //Áåç ïðîáëåì.
    b_logentry(ch1_joinpsi, ch1_joinpsi_18);
    lester_show = true;
};

instance dia_lester_showhallo(c_info) {
    npc = pc_psionic /*7989*/;
    nr = 1;
    condition = dia_lester_showhallo_condition;
    information = dia_lester_showhallo_info;
    important = true;
};

func int dia_lester_showhallo_condition() {
    var c_npc namib;

    namib = hlp_getnpc(gur_1204_baalnamib);
    if ((((npc_getdisttonpc(other, namib) < 500) && (baalnamib_ansprechbar == false)) && (lester_show == true)) && (npc_gettrueguild(hero) == gil_none)) {
        return 1;
    };
};

func void dia_lester_showhallo_info() {
    ai_output(self, other, "DIA_Lester_ShowHallo_05_00"); //À-À! ÐÀÄ ÂÈÄÅÒÜ ÒÅÁß ÑÍÎÂÀ. ÊÀÊ ÒÂÎÈ ÄÅËÀ?
};

instance dia_lester_show(c_info) {
    npc = pc_psionic /*7989*/;
    nr = 1;
    condition = dia_lester_show_condition;
    information = dia_lester_show_info;
    description = "ß ÎÒÐÅÊÑß ÎÒ ÑÒÀÐÛÕ ÁÎÃÎÂ.";
};

func int dia_lester_show_condition() {
    var c_npc namib;

    namib = hlp_getnpc(gur_1204_baalnamib);
    if (((npc_getdisttonpc(other, namib) < 500) && (baalnamib_ansprechbar == false)) && (lester_show == true)) {
        return 1;
    };
};

func void dia_lester_show_info() {
    ai_output(other, self, "DIA_Lester_Show_15_00"); //ß ÎÒÐÅÊÑß ÎÒ ÑÒÀÐÛÕ ÁÎÃÎÂ.
    ai_output(self, other, "DIA_Lester_Show_05_01"); //Â ÑÀÌÎÌ ÄÅËÅ? ÏÎ×ÅÌÓ ÒÛ ÐÅØÈË ÒÀÊ ÏÎÑÒÓÏÈÒÜ?
    ai_output(other, self, "DIA_Lester_Show_15_02"); //ÌÍÅ ÁÛËÎ ÂÈÄÅÍÈÅ: ÑÏßÙÈÉ ÃÎÂÎÐÈË ÑÎ ÌÍÎÉ.
    ai_output(self, other, "DIA_Lester_Show_05_03"); //×ÒÎ ÎÍ ÑÊÀÇÀË?
    ai_output(other, self, "DIA_Lester_Show_15_04"); //ÎÍ ÑÊÀÇÀË: ÈÄÈ Â ËÀÃÅÐÜ ÍÀ ÁÎËÎÒÀÕ È ÑÒÀÍÜ ×ËÅÍÎÌ ÁÐÀÒÑÒÂÀ.
    ai_output(self, other, "DIA_Lester_Show_05_05"); //ÒÛ ÑÊÀÇÎ×ÍÎ ÁÎÃÀÒ, ÍÅÇÍÀÊÎÌÅÖ: ÍÅÌÍÎÃÈÌ ËÞÄßÌ ÑÏßÙÈÉ ÄÀÐÓÅÒ ÒÀÊÓÞ ÍÀÃÐÀÄÓ.
    baalnamib_ansprechbar = true;
    ai_stopprocessinfos(self);
};

instance dia_lester_guideoffer(c_info) {
    npc = pc_psionic /*7989*/;
    nr = 5;
    condition = dia_lester_guideoffer_condition;
    information = dia_lester_guideoffer_info;
    description = "Êàê îðèåíòèðîâàòüñÿ çäåñü, â Ëàãåðå?";
};

func int dia_lester_guideoffer_condition() {
    if (npc_knowsinfo(hero, dia_lester_hallo /*11669*/) && (kapitel < 3)) {
        return 1;
    };
};

func void dia_lester_guideoffer_info() {
    ai_output(other, self, "DIA_Lester_GuideOffer_15_00"); //Êàê îðèåíòèðîâàòüñÿ çäåñü, â Ëàãåðå?
    ai_output(self, other, "DIA_Lester_GuideOffer_05_01"); //ß ìîãó ïîêàçàòü òåáå îñíîâíûå ìåñòà.
};

instance pc_psionic_soon(c_info) {
    npc = pc_psionic /*7989*/;
    nr = 0;
    condition = pc_psionic_soon_condition;
    information = pc_psionic_soon_info;
    permanent = true;
    description = "Ìû óæå ïðèøëè?";
};

func int pc_psionic_soon_condition() {
    if ((npc_knowsinfo(hero, dia_lester_guideoffer /*11701*/) && (kapitel < 3)) && (lesterguide >= 1)) {
        return true;
    };
};

func void pc_psionic_soon_info() {
    ai_output(other, self, "PC_Psionic_SOON_Info_15_01"); //Ìû óæå ïðèøëè?
    ai_output(self, other, "PC_Psionic_SOON_Info_05_02"); //Åñëè òû áóäåøü êàæäóþ ìèíóòó îñòàíàâëèâàòü ìåíÿ, ìû íèêîãäà òóäà íå äîáåðåìñÿ.
    ai_stopprocessinfos(self);
};

instance pc_psionic_change(c_info) {
    npc = pc_psionic /*7989*/;
    nr = 0;
    condition = pc_psionic_change_condition;
    information = pc_psionic_change_info;
    permanent = true;
    description = "ß ïåðåäóìàë.";
};

func int pc_psionic_change_condition() {
    if ((npc_knowsinfo(hero, dia_lester_guideoffer /*11701*/) && (kapitel < 3)) && (lesterguide >= 1)) {
        return true;
    };
};

func void pc_psionic_change_info() {
    ai_output(other, self, "PC_Psionic_CHANGE_Info_15_01"); //ß ïåðåäóìàë.
    ai_output(self, other, "PC_Psionic_CHANGE_Info_05_02"); //Åñëè ÷òî, òû çíàåøü, ãäå ìåíÿ íàéòè.
    ai_stopprocessinfos(self);
    lesterguide = 0;
    npc_exchangeroutine(self, "START");
};

instance pc_psionic_guidefirst(c_info) {
    npc = pc_psionic /*7989*/;
    nr = 5;
    condition = pc_psionic_guidefirst_condition;
    information = pc_psionic_guidefirst_info;
    permanent = true;
    description = "Ãäå íàõîäèòñÿ...";
};

func int pc_psionic_guidefirst_condition() {
    if ((npc_knowsinfo(hero, dia_lester_guideoffer /*11701*/) && (kapitel < 3)) && (lesterguide == 0)) {
        return true;
    };
};

func void pc_psionic_guidefirst_info() {
    ai_output(other, self, "PC_Psionic_GUIDEFIRST_Info_15_01"); //Ãäå íàõîäèòñÿ...
    info_clearchoices(pc_psionic_guidefirst /*11710*/);
    info_addchoice(pc_psionic_guidefirst /*11710*/, dialog_back, pc_psionic_guidefirst_back);
    info_addchoice(pc_psionic_guidefirst /*11710*/, "... âõîä â Ëàãåðü?", pc_psionic_guidefirst_maingate);
    info_addchoice(pc_psionic_guidefirst /*11710*/, "... êóçíèöà?", pc_psionic_guidefirst_smith);
    info_addchoice(pc_psionic_guidefirst /*11710*/, "... õðàì?", pc_psionic_guidefirst_tempel);
    info_addchoice(pc_psionic_guidefirst /*11710*/, "... îáèòåëü íàñòàâíèêîâ?", pc_psionic_guidefirst_train);
    info_addchoice(pc_psionic_guidefirst /*11710*/, "... ëàáîðàòîðèÿ?", pc_psionic_guidefirst_herb);
};

func void pc_psionic_guidefirst_maingate() {
    npc_clearaiqueue(self);
    info_clearchoices(pc_psionic_guidefirst /*11710*/);
    lesterguide = 0;
    ai_stopprocessinfos(self);
    npc_exchangeroutine(self, "START");
};

func void pc_psionic_guidefirst_smith() {
    ai_output(other, self, "PC_Psionic_GUIDEFIRST_SMITH_Info_15_01"); //... êóçíèöà.
    ai_output(self, other, "PC_Psionic_GUIDEFIRST_SMITH_Info_05_02"); //Èäè çà ìíîé!
    lesterguide = 1;
    ai_stopprocessinfos(self);
    npc_exchangeroutine(self, "GUIDETOSMITH");
};

func void pc_psionic_guidefirst_tempel() {
    ai_output(other, self, "PC_Psionic_GUIDEFIRST_TEMPEL_Info_15_01"); //... õðàì.
    ai_output(self, other, "PC_Psionic_GUIDEFIRST_TEMPEL_Info_05_02"); //Èäè çà ìíîé!
    lesterguide = 2;
    ai_stopprocessinfos(self);
    npc_exchangeroutine(self, "GUIDETOTEMPEL");
};

func void pc_psionic_guidefirst_train() {
    ai_output(other, self, "PC_Psionic_GUIDEFIRST_TRAIN_Info_15_01"); //... íàñòàâíèêè.
    ai_output(self, other, "PC_Psionic_GUIDEFIRST_TARIN_Info_05_02"); //Èäè çà ìíîé!
    lesterguide = 3;
    ai_stopprocessinfos(self);
    npc_exchangeroutine(self, "GUIDETOTRAIN");
};

func void pc_psionic_guidefirst_herb() {
    ai_output(other, self, "PC_Psionic_GUIDEFIRST_HERB_Info_15_01"); //... ëàáîðàòîðèÿ.
    ai_output(self, other, "PC_Psionic_GUIDEFIRST_HERB_Info_05_02"); //Èäè çà ìíîé!
    lesterguide = 4;
    ai_stopprocessinfos(self);
    npc_exchangeroutine(self, "GUIDETOHERB");
};

func void pc_psionic_guidefirst_back() {
    info_clearchoices(pc_psionic_guidefirst /*11710*/);
};

instance pc_psionic_train(c_info) {
    npc = pc_psionic /*7989*/;
    condition = pc_psionic_train_condition;
    information = pc_psionic_train_info;
    permanent = true;
    important = true;
};

func int pc_psionic_train_condition() {
    if ((npc_getdisttowp(self, "PSI_PATH_9_4") < 500) && (lesterguide == 3)) {
        return true;
    };
};

func void pc_psionic_train_info() {
    ai_output(self, other, "PC_Psionic_TRAIN_Info_05_01"); //Çäåñü òû íàéäåøü Èäîëà Êàäàðà. Îí îáó÷àåò ïîñëóøíèêîâ.
    ai_pointat(self, "PSI_PATH_9_14");
    ai_stoppointat(self);
    ai_output(self, other, "PC_Psionic_TRAIN_Info_05_02"); //Ïîäíèìàéñÿ ïî ëåñòíèöå ê òðåíèðîâî÷íîé ïëîùàäêå Ñòðàæåé. ß áóäó æäàòü òåáÿ çäåñü. Åñëè îïîçäàåøü, èùè ìåíÿ ó âõîäà â Ëàãåðü - ÿ áóäó òàì ñ Èäîëîì Íàìèáîì.
    lesterguide = 0;
    npc_exchangeroutine(self, "START");
    ai_stopprocessinfos(self);
    ta_beginoverlay(self);
    ta_stay(0, 0, 0, 55, "PSI_PATH_9_4");
    ta_endoverlay(self);
};

instance pc_psionic_tempel(c_info) {
    npc = pc_psionic /*7989*/;
    condition = pc_psionic_tempel_condition;
    information = pc_psionic_tempel_info;
    permanent = true;
    important = true;
};

func int pc_psionic_tempel_condition() {
    if ((npc_getdisttowp(self, "PSI_TEMPLE_NOVIZE_PR") < 600) && (lesterguide == 2)) {
        return true;
    };
};

func void pc_psionic_tempel_info() {
    ai_output(self, other, "PC_Psionic_TEMPEL_Info_05_01"); //Ýòî õðàì. ß ïîäîæäó òåáÿ, íî åñëè òû çàäåðæèøüñÿ íàäîëãî, ìíå ïðèäåòñÿ âåðíóòüñÿ ê Èäîëó Íàìèáó.
    lesterguide = 0;
    npc_exchangeroutine(self, "START");
    ai_stopprocessinfos(self);
    ta_beginoverlay(self);
    ta_stay(0, 0, 1, 0, "PSI_TEMPLE_NOVIZE_PR");
    ta_endoverlay(self);
};

instance pc_psionic_smith(c_info) {
    npc = pc_psionic /*7989*/;
    condition = pc_psionic_smith_condition;
    information = pc_psionic_smith_info;
    permanent = true;
    important = true;
};

func int pc_psionic_smith_condition() {
    if ((npc_getdisttowp(self, "PSI_SMITH_IN") < 900) && (lesterguide == 1)) {
        return 1;
    };
};

func void pc_psionic_smith_info() {
    ai_output(self, other, "PC_Psionic_SMITH_Info_05_01"); //Ýòî êóçíèöà. ß ìîãó æäàòü òåáÿ íå áîëüøå ÷àñà, ïîòîì ìíå ïðèäåòñÿ óéòè.
    lesterguide = 0;
    npc_exchangeroutine(self, "START");
    ai_stopprocessinfos(self);
    ta_beginoverlay(self);
    ta_stay(0, 0, 1, 0, "PSI_SMITH_IN");
    ta_endoverlay(self);
};

instance pc_psionic_herb(c_info) {
    npc = pc_psionic /*7989*/;
    condition = pc_psionic_herb_condition;
    information = pc_psionic_herb_info;
    permanent = true;
    important = true;
};

func int pc_psionic_herb_condition() {
    if ((npc_getdisttowp(self, "PSI_WALK_06") < 800) && (lesterguide == 4)) {
        return true;
    };
};

func void pc_psionic_herb_info() {
    ai_output(self, other, "PC_Psionic_HERB_Info_05_01"); //Åñëè ïîäíèìåøüñÿ ïî ýòîé ëåñòíèöå, òî ïîïàäåøü ê Êîð Ãàëîìó, àëõèìèêó. Âíèçó æèâåò Ôîðòóíî, îí òîðãóåò áîëîòíèêîì.
    ai_output(self, other, "PC_Psionic_HERB_Info_05_02"); //ß áóäó æäàòü òåáÿ çäåñü. Òîëüêî íå äîëãî, à òî ìíå íóæíî óõîäèòü.
    lesterguide = 0;
    npc_exchangeroutine(self, "START");
    ai_stopprocessinfos(self);
    ta_beginoverlay(self);
    ta_stay(0, 0, 1, 0, "PSI_32_HUT_EX");
    ta_endoverlay(self);
};

instance pc_psionic_send(c_info) {
    npc = pc_psionic /*7989*/;
    condition = pc_psionic_send_condition;
    information = pc_psionic_send_info;
    important = true;
};

func int pc_psionic_send_condition() {
    if (((npc_gettrueguild(hero) != gil_none) && (yberion_bringfocus != log_running)) && (yberion_bringfocus != log_success)) {
        return 1;
    };
};

func void pc_psionic_send_info() {
    ai_gotonpc(self, hero);
    if (npc_knowsinfo(hero, dia_lester_hallo /*11669*/)) {
        ai_output(self, other, "PC_Psionic_SEND_Info_05_00"); //Êàê õîðîøî, ÷òî òû çäåñü. Ó ìåíÿ äëÿ òåáÿ åñòü íîâîñòè.
        ai_output(other, self, "PC_Psionic_SEND_Info_15_01"); //Õîðîøèå íîâîñòè, ÿ íàäåþñü.
    };
    ai_output(self, other, "PC_Psionic_SEND_Info_05_02"); //Ó Áðàòñòâà åñòü áîëüøèå ïëàíû.
    ai_output(other, self, "PC_Psionic_SEND_Info_15_03"); //Ïëàíû? Êàêèå? Âûðâàòüñÿ íà ñâîáîäó?
    ai_output(self, other, "PC_Psionic_SEND_Info_05_04"); //Ãóðó ïûòàþòñÿ ïðèçâàòü ñïÿùåãî. Íî íåîáõîäèìî íå÷òî, ÷òî îáúåäèíèò èõ óñèëèÿ.
    ai_output(other, self, "PC_Psionic_SEND_Info_15_05"); //Äà, è...
    ai_output(self, other, "PC_Psionic_SEND_Info_05_06"); //Èì íóæåí ìàãè÷åñêèé àðòåôàêò, íàçûâàåìûé þíèòîð.
    b_kapitelwechsel(2);
};

instance pc_psionic_brotherhood_todo(c_info) {
    npc = pc_psionic /*7989*/;
    nr = 0;
    condition = pc_psionic_brotherhood_todo_condition;
    information = pc_psionic_brotherhood_todo_info;
    description = "Íî êàêîå îòíîøåíèå ýòî èìååò êî ìíå?";
};

func int pc_psionic_brotherhood_todo_condition() {
    if (npc_knowsinfo(hero, pc_psionic_send /*11731*/)) {
        return true;
    };
};

func void pc_psionic_brotherhood_todo_info() {
    var c_npc yberion;

    ai_output(other, self, "PC_Psionic_BROTHERHOOD_TODO_15_01"); //Íî êàêîå îòíîøåíèå ýòî èìååò êî ìíå?
    ai_output(self, other, "PC_Psionic_BROTHERHOOD_TODO_05_02"); //Ïîãîâîðè ñ Þ`Áåðèîíîì. Îí ñàìûé ìîãóùåñòâåííûé ÷åëîâåê â Áðàòñòâå. Èñïîëüçóé ýòó âîçìîæíîñòü, ÷òîáû çàâîåâàòü åãî ðàñïîëîæåíèå.
    ai_output(other, self, "PC_Psionic_BROTHERHOOD_TODO_15_03"); //Ãäå ìíå åãî èñêàòü?
    ai_output(self, other, "PC_Psionic_BROTHERHOOD_TODO_05_04"); //Îòïðàâëÿéñÿ â õðàì. Îí ðåäêî ïîêèäàåò åãî. Âîçìîæíî, îí ÷óâñòâóåò ñåáÿ áëèæå ê Ñïÿùåìó ñðåäè õîëîäíûõ êàìíåé.
    log_createtopic(ch2_focus, log_mission);
    log_settopicstatus(ch2_focus, log_running);
    b_logentry(ch2_focus, ch2_focus_6);
    yberion = hlp_getnpc(gur_1200_yberion);
    yberion.aivar[7] = true;
};

instance pc_psionic_followme(c_info) {
    npc = pc_psionic /*7989*/;
    condition = pc_psionic_followme_condition;
    information = pc_psionic_followme_info;
    important = true;
};

func int pc_psionic_followme_condition() {
    if ((npc_getdisttowp(hero, "LOCATION_19_01") < 400) && (npc_getdisttonpc(hero, pc_psionic) < 400)) {
        return true;
    };
};

func void pc_psionic_followme_info() {
    ai_gotonpc(self, hero);
    ai_output(self, other, "PC_Psionic_FOLLOWME_Info_05_01"); //Ýé, ÷òî òû çäåñü äåëàåøü?
    ai_output(other, self, "PC_Psionic_FOLLOWME_Info_15_02"); //ß çäåñü ïî ïðèêàçó ìàãîâ Âîäû. ß èùó ìàãè÷åñêèå êàìíè, íàçûâàåìûå òàêæå þíèòîðàìè.
    ai_output(self, other, "PC_Psionic_FOLLOWME_Info_05_03"); //Òû èùåøü þíèòîðû? Õðàáðûé ïàðåíü.
    ai_output(other, self, "PC_Psionic_FOLLOWME_Info_15_04"); //Ñàòóðàñ è äðóãèå ìàãè èç Íîâîãî Ëàãåðÿ õîòÿò èñïîëüçîâàòü èõ äëÿ òîãî, ÷òîáû âçîðâàòü Áàðüåð è îñâîáîäèòü íàñ èç çàòî÷åíèÿ.
    ai_output(self, other, "PC_Psionic_FOLLOWME_Info_05_05"); //ß ïîâåðþ â ýòî, òîëüêî êîãäà óâèæó ñâîèìè ñîáñòâåííûìè ãëàçàìè.
    ai_output(other, self, "PC_Psionic_FOLLOWME_Info_15_06"); //Ìîãó ñêàçàòü òî æå ñàìîå. Íî êàê òû îêàçàëñÿ çäåñü?
    ai_output(self, other, "PC_Psionic_FOLLOWME_Info_05_07"); //ß òóò ðàçìûøëÿþ, íå çãëÿíóòü ëè ìíå â ñòàðûé ôîðò â ãîðàõ.
    ai_output(self, other, "PC_Psionic_FOLLOWME_Info_05_08"); //Çíàåøü... Ìíå áû âåñüìà ïðèãîäèëñÿ îäèí äîêóìåíò... Ñ äðóãîé ñòîðîíû, îòïðàâëÿòüñÿ òóäà îäíîìó äîâîëüíî îïàñíî.
};

instance pc_psionic_golem(c_info) {
    npc = pc_psionic /*7989*/;
    nr = 0;
    condition = pc_psionic_golem_condition;
    information = pc_psionic_golem_info;
    description = "Êàê òû ñóìåë ìèíîâàòü ýòó æèâóþ ãîðó?";
};

func int pc_psionic_golem_condition() {
    if (npc_knowsinfo(hero, pc_psionic_followme /*11738*/) && (!npc_knowsinfo(hero, pc_psionic_finish /*11771*/))) {
        return true;
    };
};

func void pc_psionic_golem_info() {
    ai_output(other, self, "PC_Psionic_NORMAL_Info_15_01"); //Êàê òû ñóìåë ìèíîâàòü ýòó æèâóþ ãîðó?
    ai_output(self, other, "PC_Psionic_NORMAL_Info_05_02"); //ß ìíîãîìó íàó÷èëñÿ ó Ãóðó. Ìíå ïîìîæåò ìàãèÿ.
};

instance pc_psionic_story(c_info) {
    npc = pc_psionic /*7989*/;
    nr = 0;
    condition = pc_psionic_story_condition;
    information = pc_psionic_story_info;
    description = "×òî çà äîêóìåíò òû ðàçûñêèâàåøü?";
};

func int pc_psionic_story_condition() {
    if (npc_knowsinfo(hero, pc_psionic_followme /*11738*/)) {
        return true;
    };
};

func void pc_psionic_story_info() {
    ai_output(other, self, "PC_Psionic_STORY_Info_15_01"); //×òî çà äîêóìåíò òû ðàçûñêèâàåøü?
    ai_output(self, other, "PC_Psionic_STORY_Info_05_02"); //Ìíîãî ëåò íàçàä â ôîðòå æèë ïðàâèòåëü ýòèõ çåìåëü. Îí âëàäåë çåìëåé è âñåìè øàõòàìè.
    ai_output(self, other, "PC_Psionic_STORY_Info_05_03"); //Ðàçóìååòñÿ, ó íåãî áûë äîêóìåíò, ïîäòâåðæäàþùèé ïðàâî âëàäåíèÿ - êàê è ó ëþáîãî àðèñòîêðàòà. Ýòó áóìàãó ÿ è õî÷ó îòûñêàòü.
    ai_output(other, self, "PC_Psionic_STORY_Info_15_04"); //Íî çäåñü, âíóòðè Áàðüåðà, îò íåå íå áóäåò íèêàêîãî ïðîêà.
    ai_output(self, other, "PC_Psionic_STORY_Info_05_05"); //Âåðíî. Íî åñëè ìàãàì Âîäû óäàñòñÿ óíè÷òîæèòü Áàðüåð, ýòîò äîêóìåíò âíîâü îáðåòåò ñâîþ öåíó.
};

instance pc_psionic_comewithme(c_info) {
    npc = pc_psionic /*7989*/;
    nr = 0;
    condition = pc_psionic_comewithme_condition;
    information = pc_psionic_comewithme_info;
    description = "Ìû ìîãëè áû çàãëÿíóòü â ôîðò âìåñòå!";
};

func int pc_psionic_comewithme_condition() {
    if (npc_knowsinfo(hero, pc_psionic_story /*11744*/) && npc_knowsinfo(hero, pc_psionic_golem /*11741*/)) {
        return true;
    };
};

func void pc_psionic_comewithme_info() {
    ai_output(other, self, "PC_Psionic_COMEWITHME_Info_15_01"); //Ìû ìîãëè áû çàãëÿíóòü â ôîðò âìåñòå!
    ai_output(self, other, "PC_Psionic_COMEWITHME_Info_05_02"); //Õîðîøàÿ èäåÿ. Èäè âïåðåä, ÿ áóäó ðÿäîì.
    log_createtopic(ch3_fortress, log_mission);
    log_settopicstatus(ch3_fortress, log_running);
    b_logentry(ch3_fortress, ch3_fortress_2);
    self.aivar[36] = true;
    npc_exchangeroutine(self, "FORTRESSFOLLOW");
    ai_stopprocessinfos(self);
};

instance pc_psionic_fokusplace(c_info) {
    npc = pc_psionic /*7989*/;
    condition = pc_psionic_fokusplace_condition;
    information = pc_psionic_fokusplace_info;
    important = true;
};

func int pc_psionic_fokusplace_condition() {
    if (npc_getdisttowp(hero, "LOCATION_19_03_PATH_RUIN7") < 400) {
        return true;
    };
};

func void pc_psionic_fokusplace_info() {
    ai_gotonpc(self, hero);
    ai_output(self, other, "PC_Psionic_FOKUSPLACE_Info_05_01"); //Ïîõîæå, òâîé þíèòîð òàì, íàâåðõó.
    ai_output(other, self, "PC_Psionic_FOKUSPLACE_Info_15_02"); //Äà, äåéñòâèòåëüíî ïîõîæå. Õ-ì... Äîáðàòüñÿ äî íåãî íå òàê-òî ëåãêî...
    ai_stopprocessinfos(self);
    b_logentry(ch3_fortress, ch3_fortress_3);
    wld_insertnpc(harpie /*6763*/, "LOCATION_19_03_ENTRANCE_HARPYE");
    wld_insertnpc(harpie /*6763*/, "LOCATION_19_03_ENTRANCE_HARPYE2");
    wld_insertnpc(harpie /*6763*/, "LOCATION_19_03_ENTRANCE_HARPYE3");
};

instance pc_psionic_comeback(c_info) {
    npc = pc_psionic /*7989*/;
    condition = pc_psionic_comeback_condition;
    information = pc_psionic_comeback_info;
    important = true;
};

func int pc_psionic_comeback_condition() {
    if (((npc_getdisttowp(hero, "PATH_TO_PLATEAU04_BRIDGE2") < 600) && npc_knowsinfo(hero, pc_psionic_followme /*11738*/)) && (!npc_hasitems(hero, focus_3))) {
        return true;
    };
};

func void pc_psionic_comeback_info() {
    ai_gotonpc(self, hero);
    ai_output(self, other, "PC_Psionic_COMEBACK_Info_05_01"); //Êóäà òû? Ìû åùå íå çàêîí÷èëè ïîèñêè.
    self.aivar[36] = false;
    npc_exchangeroutine(self, "FORTRESSWAIT");
    ai_stopprocessinfos(self);
};

instance pc_psionic_iamhurt(c_info) {
    npc = pc_psionic /*7989*/;
    nr = 0;
    condition = pc_psionic_iamhurt_condition;
    information = pc_psionic_iamhurt_info;
    description = "ß ðàíåí. Òû ìîæåøü ìíå ïîìî÷ü?";
};

func int pc_psionic_iamhurt_condition() {
    if ((hero.attribute[atr_hitpoints] /*0*/ < (hero.attribute[atr_hitpoints_max] /*1*/ / 2)) && npc_knowsinfo(hero, pc_psionic_followme /*11738*/)) {
        return true;
    };
};

func void pc_psionic_iamhurt_info() {
    ai_output(other, self, "PC_Psionic_IAMHURT_Info_15_01"); //ß ðàíåí. Òû ìîæåøü ìíå ïîìî÷ü?
    ai_output(self, other, "PC_Psionic_IAMHURT_Info_05_02"); //Âîçüìè öåëåáíûé ýëèêñèð.
    createinvitem(self, itfo_potion_health_02);
    b_giveinvitems(self, hero, itfo_potion_health_02 /*4829*/, 1);
};

instance pc_psionic_urkunde(c_info) {
    npc = pc_psionic /*7989*/;
    nr = 0;
    condition = pc_psionic_urkunde_condition;
    information = pc_psionic_urkunde_info;
    description = "ß íàøåë òâîþ áóìàãó.";
};

func int pc_psionic_urkunde_condition() {
    if (npc_hasitems(hero, itwr_urkunde_01) && npc_knowsinfo(hero, pc_psionic_story /*11744*/)) {
        return true;
    };
};

func void pc_psionic_urkunde_info() {
    ai_output(other, self, "PC_Psionic_URKUNDE_Info_15_01"); //ß íàøåë òâîþ áóìàãó.
    ai_output(self, other, "PC_Psionic_URKUNDE_Info_05_02"); //Îòëè÷íî! Âîçüìè ýòè ñâèòêè. Îíè ïîìîãóò òåáå äîáðàòüñÿ äî þíèòîðà.
    ai_output(self, other, "PC_Psionic_URKUNDE_Info_05_03"); //ß áóäó æäàòü òåáÿ âíèçó, ó ïüåäåñòàëà.
    b_logentry(ch3_fortress, ch3_fortress_4);
    createinvitems(self, itarscrolltelekinesis, 4);
    b_giveinvitems(self, hero, itarscrolltelekinesis /*4211*/, 4);
    b_giveinvitems(hero, self, itwr_urkunde_01 /*4710*/, 1);
    npc_exchangeroutine(self, "WaitAtFocus");
    ai_stopprocessinfos(self);
};

instance pc_psionic_tip(c_info) {
    npc = pc_psionic /*7989*/;
    nr = 0;
    condition = pc_psionic_tip_condition;
    information = pc_psionic_tip_info;
    description = "Êàê äîáðàòüñÿ äî þíèòîðà?";
};

func int pc_psionic_tip_condition() {
    if (npc_knowsinfo(hero, pc_psionic_urkunde /*11759*/) && (!npc_hasitems(hero, focus_3))) {
        return true;
    };
};

func void pc_psionic_tip_info() {
    ai_output(other, self, "PC_Psionic_TIP_Info_15_01"); //Êàê äîáðàòüñÿ äî þíèòîðà?
    ai_output(self, other, "PC_Psionic_TIP_Info_05_02"); //Ãîñïîäèí Þ`Áåðèîí îäíàæäû ñêàçàë: 'Íåâåæäà ïåðåäâèãàåò ïðåäìåòû ðóêàìè, à ìàñòåð - ñèëîé ñâîåãî äóõà'.
};

instance pc_psionic_leave(c_info) {
    npc = pc_psionic /*7989*/;
    condition = pc_psionic_leave_condition;
    information = pc_psionic_leave_info;
    important = true;
};

func int pc_psionic_leave_condition() {
    if (((!npc_hasitems(hero, focus_3)) && (!npc_hasitems(self, itwr_urkunde_01))) && (npc_getdisttowp(hero, "PATH_TO_PLATEAU04_BRIDGE2") < 900)) {
        return true;
    };
};

func void pc_psionic_leave_info() {
    ai_gotonpc(self, hero);
    ai_output(self, other, "PC_Psionic_LEAVE_Info_05_01"); //ß îñòàíóñü çäåñü è ïîèùó áóìàãó.
    self.aivar[36] = false;
    npc_exchangeroutine(self, "BOOK");
    ai_stopprocessinfos(self);
};

instance pc_psionic_balkon(c_info) {
    npc = pc_psionic /*7989*/;
    condition = pc_psionic_balkon_condition;
    information = pc_psionic_balkon_info;
    important = true;
};

func int pc_psionic_balkon_condition() {
    if ((!npc_hasitems(self, itwr_urkunde_01)) && (npc_getdisttowp(hero, "LOCATION_19_03_PEMTAGRAM2") < 1000)) {
        return true;
    };
};

func void pc_psionic_balkon_info() {
    ai_gotonpc(self, hero);
    ai_output(self, other, "PC_Psionic_BALKON_Info_05_01"); //Ïîéäó ïîèùó íàâåðõó.
    ai_stopprocessinfos(self);
    npc_exchangeroutine(self, "BALKON");
};

instance pc_psionic_finish(c_info) {
    npc = pc_psionic /*7989*/;
    condition = pc_psionic_finish_condition;
    information = pc_psionic_finish_info;
    important = true;
};

func int pc_psionic_finish_condition() {
    if (npc_hasitems(hero, focus_3) && npc_knowsinfo(hero, pc_psionic_urkunde /*11759*/)) {
        return true;
    };
};

func void pc_psionic_finish_info() {
    ai_output(self, other, "PC_Psionic_FINISH_Info_05_01"); //Òåïåðü ìû îáà íàøëè òî, ÷òî õîòåëè. ß îñòàíóñü çäåñü è áóäó èçó÷àòü ñòàðûå êíèãè.
    ai_output(other, self, "PC_Psionic_FINISH_Info_15_02"); //Ìû åùå âñòðåòèìñÿ.
    b_logentry(ch3_fortress, ch3_fortress_5);
    self.aivar[36] = false;
    npc_exchangeroutine(self, "BOOK");
    ai_stopprocessinfos(self);
};

instance pc_psionic_chestclosed(c_info) {
    npc = pc_psionic /*7989*/;
    nr = 0;
    condition = pc_psionic_chestclosed_condition;
    information = pc_psionic_chestclosed_info;
    description = "Íàøåë ÷òî-íèáóäü?";
};

func int pc_psionic_chestclosed_condition() {
    if (((!npc_hasitems(hero, focus_3)) && (!npc_hasitems(self, itwr_urkunde_01))) && (npc_getdisttowp(hero, "LOCATION_19_03_SECOND_ETAGE_BALCON") < 500)) {
        return true;
    };
};

func void pc_psionic_chestclosed_info() {
    ai_output(other, self, "PC_Psionic_CHESTCLOSED_Info_15_01"); //Íàøåë ÷òî-íèáóäü?
    ai_output(self, other, "PC_Psionic_CHESTCLOSED_Info_05_02"); //Ýòîò ñóíäóê çàêðûò. Ìîæåò áûòü ìû ñìîæåì íàéòè êëþ÷ â ôîðòå.
    ai_output(self, other, "PC_Psionic_CHESTCLOSED_Info_05_03"); //Åùå íå íàøåë ñâîþ áóìàãó?
    ai_output(other, self, "PC_Psionic_CHESTCLOSED_Info_15_04"); //Íåò, ïîêà åùå íåò...
    ai_output(self, other, "PC_Psionic_CHESTCLOSED_Info_05_05"); //Òû óæå áûë â áèáëèîòåêå?
    ai_stopprocessinfos(self);
};

instance pc_psionic_comeagain(c_info) {
    npc = pc_psionic /*7989*/;
    nr = 0;
    condition = pc_psionic_comeagain_condition;
    information = pc_psionic_comeagain_info;
    description = "Äàâàé îñìîòðèì ôîðò âìåñòå.";
};

func int pc_psionic_comeagain_condition() {
    if (npc_knowsinfo(hero, pc_psionic_leave /*11765*/) && (!npc_hasitems(hero, focus_3))) {
        return true;
    };
};

func void pc_psionic_comeagain_info() {
    ai_output(other, self, "PC_Psionic_COMEAGAIN_Info_15_01"); //Äàâàé îñìîòðèì ôîðò âìåñòå.
    ai_output(self, other, "PC_Psionic_COMEAGAIN_Info_05_02"); //Õîðîøî, èäè ïåðâûì.
    self.aivar[36] = true;
    npc_exchangeroutine(self, "FORTRESSFOLLOW");
    ai_stopprocessinfos(self);
};

instance info_lester_diegomilten(c_info) {
    npc = pc_psionic /*7989*/;
    nr = 0;
    condition = info_lester_diegomilten_condition;
    information = info_lester_diegomilten_info;
    description = "Âîçëå Ñòàðîãî Ëàãåðÿ ÿ âñòðåòèë Äèåãî è Ìèëüòåíà!";
};

func int info_lester_diegomilten_condition() {
    if (npc_knowsinfo(hero, info_diego_ocfavor /*11923*/)) {
        return true;
    };
};

func void info_lester_diegomilten_info() {
    ai_output(hero, self, "Info_SFB_1_DieLage_15_00"); //Êàê äåëà?
    ai_output(self, hero, "PC_Psionic_FOLLOWME_Info_05_01"); //Ýé, ÷òî òû çäåñü äåëàåøü?
    ai_output(hero, self, "Info_Saturas_COLLAPSE_15_01"); //Ñòàðóþ Øàõòó çàëèëî âîäîé, è îíà îáðóøèëàñü!
    ai_output(self, hero, "DIA_Fingers_BecomeShadow_05_01"); //È ÷òî ñ òîãî?
    ai_output(hero, self, "Info_Xardas_KDW_15_01"); //Âñå ìàãè Îãíÿ ìåðòâû.
    ai_output(hero, self, "Info_Xardas_KDW_15_02"); //Èõ óáèë Ãîìåç.
    b_say(self, hero, "$GetThingsRight");
    ai_output(hero, self, "Info_Gorn_DIEGOMILTEN_15_01"); //Âîçëå Ñòàðîãî Ëàãåðÿ ÿ âñòðåòèë Äèåãî è Ìèëüòåíà!
    ai_output(hero, self, "Info_lester_DIEGOMILTEN_15_01"); //Îíè õîòÿò âñòðåòèòüñÿ ñ òîáîé è ñ Ëåñòåðîì. Òàì æå, ãäå è âñåãäà.
    b_say(self, hero, "$YeahWellDone");
    ai_output(other, self, "Info_Gorn_RUINWALLWHAT_15_01"); //×òî ñëó÷èëîñü?
    ai_output(self, hero, "Info_lester_DIEGOMILTEN_05_02"); //ß îñòàíóñü çäåñü è áóäó èçó÷àòü ñòàðûå êíèãè.
    ai_output(hero, self, "KDW_600_Saturas_OATH_Info_15_06"); //Óõ... ß íå ïîíèìàþ...
    ai_output(self, hero, "PC_Psionic_TIP_Info_05_02"); //Ãîñïîäèí Þ`Áåðèîí îäíàæäû ñêàçàë: 'Íåâåæäà ïåðåäâèãàåò ïðåäìåòû ðóêàìè, à ìàñòåð - ñèëîé ñâîåãî äóõà'.
    ai_output(hero, self, "Info_Grd_6_DasLager_WasIstAerger_15_04"); //Ëàäíî, ëàäíî, ÿ âñå ïîíÿë.
    ai_output(self, hero, "DIA_Fingers_Lehrer_Pickpocket2_05_03"); //Áåðåãè ñåáÿ.
    ai_output(hero, self, "Info_FreemineOrc_EXIT_15_03"); //Ñïàñèáî. ß ïîéäó.
    ai_output(self, hero, "Info_Lester_EXIT_05_02"); //Äà õðàíèò òåáÿ Ñïÿùèé!
    b_givexp(xp_messageforgorn);
    if (warned_gorn_or_lester == false) {
        warned_gorn_or_lester = true;
    }
    else {
        b_logentry(ch4_4friends, ch4_4friends_1);
        log_settopicstatus(ch4_4friends, log_success);
    };
    ai_stopprocessinfos(self);
};

var int diego_after_gamestart;

instance info_diego_gamestart(c_info) {
    npc = pc_thief /*8001*/;
    nr = 1;
    condition = info_diego_gamestart_condition;
    information = info_diego_gamestart_info;
    important = true;
};

func int info_diego_gamestart_condition() {
    if (kapitel < 2) {
        return true;
    };
};

func void info_diego_gamestart_info() {
    ai_output(self, hero, "Info_Diego_Gamestart_11_00"); //Ìåíÿ çîâóò Äèåãî.
    ai_output(hero, self, "Info_Diego_Gamestart_15_01"); //ß...
    ai_output(self, hero, "Info_Diego_Gamestart_11_02"); //ß íå õî÷ó çíàòü, êòî òû òàêîé. Òû òîëüêî ÷òî ïîÿâèëñÿ çäåñü. ß ïðèñìàòðèâàþ çà íîâè÷êàìè. Ýòî âñå.
    ai_output(self, hero, "Info_Diego_Gamestart_11_03"); //Åñëè òû õî÷åøü ïîæèòü åùå íåìíîãî, òåáå ïðèäåòñÿ ïîãîâîðèòü ñî ìíîé. Íî êîíå÷íî, ÿ íå ñîáèðàþñü ìåøàòü òåáå ïîêîí÷èòü ñ ñîáîé. Òàê ÷òî òû äóìàåøü?
    b_kapitelwechsel(1);
};

instance info_diego_exit_gamestart(c_info) {
    npc = pc_thief /*8001*/;
    nr = 999;
    condition = info_diego_exit_gamestart_condition;
    information = info_diego_exit_gamestart_info;
    description = dialog_ende;
};

func int info_diego_exit_gamestart_condition() {
    return 1;
};

func void info_diego_exit_gamestart_info() {
    ai_output(hero, self, "Info_Diego_EXIT_Gamestart_15_00"); //ß áëàãîäàðþ òåáÿ çà ïîìîùü.
    if (!npc_knowsinfo(hero, info_diego_kolonie /*11802*/)) {
        ai_output(self, hero, "Info_Diego_EXIT_Gamestart_11_01"); //Ýòî òâîå ðåøåíèå. Ðàä áûë ïîçíàêîìèòüñÿ.
    }
    else {
        ai_output(self, hero, "Info_Diego_EXIT_Gamestart_11_02"); //Ìû âñòðåòèìñÿ â Ñòàðîì Ëàãåðå.
    };
    ai_stopprocessinfos(self);
    if (kapitel < 2) {
        npc_exchangeroutine(self, "Start");
        diego_after_gamestart = true;
    };
};

instance info_diego_exit_later(c_info) {
    npc = pc_thief /*8001*/;
    nr = 999;
    condition = info_diego_exit_later_condition;
    information = info_diego_exit_later_info;
    permanent = true;
    description = dialog_ende;
};

func int info_diego_exit_later_condition() {
    if (npc_knowsinfo(hero, info_diego_exit_gamestart /*11787*/)) {
        return 1;
    };
};

func void info_diego_exit_later_info() {
    if (self.aivar[36]) {
        ai_output(self, hero, "Info_Diego_EXIT_11_01"); //Èäåì.
    }
    else {
        ai_output(hero, self, "Info_Diego_EXIT_15_00"); //Áåðåãè ñåáÿ.
    };
    ai_stopprocessinfos(self);
};

instance info_diego_brief(c_info) {
    npc = pc_thief /*8001*/;
    nr = 10;
    condition = info_diego_brief_condition;
    information = info_diego_brief_info;
    description = "Ó ìåíÿ åñòü ïèñüìî Âåðõîâíîìó Ìàãó Êðóãà Îãíÿ.";
};

func int info_diego_brief_condition() {
    if (kapitel < 2) {
        return true;
    };
};

func void info_diego_brief_info() {
    ai_output(hero, self, "Info_Diego_Brief_15_00"); //Ó ìåíÿ åñòü ïèñüìî Âåðõîâíîìó Ìàãó Êðóãà Îãíÿ.
    ai_output(self, hero, "Info_Diego_Brief_11_01"); //Ïðàâäà...?
    ai_output(hero, self, "Info_Diego_Brief_15_02"); //Åãî îòäàë ìíå êàêîé-òî ìàã, ïåðåä òåì êàê ñòðàæíèêè ñáðîñèëè ìåíÿ ñî ñêàëû.
    ai_output(self, hero, "Info_Diego_Brief_11_03"); //Òåáå ïîâåçëî, ÷òî áîëüøå ÿ íå ìîãó ïîêàçûâàòüñÿ íà ãëàçà ìàãàì. Ëþáîé äðóãîé ñ ðàäîñòüþ ïåðåðåçàë áû òåáå ãëîòêó çà ýòî ïèñüìî.
    ai_output(self, hero, "Info_Diego_Brief_11_04"); //Ìàãè õîðîøî ïëàòÿò ñâîèì ãîíöàì, à áîëüøèíñòâî ëþäåé çäåñü íå èìååò çà äóøîé è ãðîøà.
    ai_output(self, hero, "Info_Diego_Brief_11_05"); //Íà òâîåì ìåñòå ÿ áû äåðæàë ðîò íà çàìêå äî òåõ ïîð, ïîêà íå âñòðåòèë áû êîãî-íèáóäü èç ìàãîâ. Ïðàâäà, òåáå íà ýòî íå ñòîèò íàäåÿòüñÿ.
    ai_output(hero, self, "Info_Diego_Brief_15_06"); //Ïî÷åìó?
    ai_output(self, hero, "Info_Diego_Brief_11_07"); //Ìàãè æèâóò â Ñòàðîì Ëàãåðå, íî òîëüêî ëþäÿì Ãîìåçà äîçâîëåíî âõîäèòü â èõ çàìîê.
};

instance info_diego_warumgeholfen(c_info) {
    npc = pc_thief /*8001*/;
    nr = 5;
    condition = info_diego_warumgeholfen_condition;
    information = info_diego_warumgeholfen_info;
    description = "Ïî÷åìó òû ïîìîãàåøü ìíå?";
};

func int info_diego_warumgeholfen_condition() {
    if ((!diego_after_gamestart) && (kapitel < 2)) {
        return 1;
    };
};

func void info_diego_warumgeholfen_info() {
    ai_output(hero, self, "Info_Diego_WarumGeholfen_15_00"); //Ïî÷åìó òû ïîìîãàåøü ìíå?
    ai_output(self, hero, "Info_Diego_WarumGeholfen_11_01"); //Ïîòîìó ÷òî òåáå íóæíà áûëà ìîÿ ïîìîùü. Áóëëèò ñî ñâîèìè ïàðíÿìè ìîã çàïðîñòî óáèòü òåáÿ.
    ai_output(self, hero, "Info_Diego_WarumGeholfen_11_02"); //À ÿ íå ìîã ïðîñòî ñòîÿòü â ñòîðîíå è ñìîòðåòü. ß ïðîäåëàë ýòîò äîëãèé ïóòü äëÿ òîãî, ÷òîáû ñäåëàòü òåáå îäíî ïðåäëîæåíèå.
    ai_output(hero, self, "Info_Diego_WarumGeholfen_15_03"); //Ïðåäëîæåíèå?
    ai_output(self, hero, "Info_Diego_WarumGeholfen_11_04"); //Äà. ß äóìàþ, ïîñëå çíàêîìñòâà ñ øàéêîé Áóëëèòà òû ïîíÿë, ÷òî òåáå íóæíà çàùèòà.
    ai_output(self, hero, "Info_Diego_WarumGeholfen_11_05"); //Êàæäûé, êòî ïîïàäàåò ñþäà, èìååò âûáîð. Â êîëîíèè åñòü òðè Ëàãåðÿ, è òû äîëæåí áóäåøü ïðèñîåäèíèòüñÿ ê îäíîìó èç íèõ.
    ai_output(self, hero, "Info_Diego_WarumGeholfen_11_06"); //ß çäåñü äëÿ òîãî, ÷òîáû ïîêàçàòü íîâè÷êàì, ÷òî Ñòàðûé Ëàãåðü - ëó÷øåå ìåñòî äëÿ íèõ.
};

instance info_diego_bullit(c_info) {
    npc = pc_thief /*8001*/;
    nr = 5;
    condition = info_diego_bullit_condition;
    information = info_diego_bullit_info;
    description = "À ãäå ñåé÷àñ Áóëëèò?";
};

func int info_diego_bullit_condition() {
    if (npc_knowsinfo(hero, info_diego_warumgeholfen /*11796*/) && (!diego_after_gamestart)) {
        return 1;
    };
};

func void info_diego_bullit_info() {
    ai_output(hero, self, "Info_Diego_Bullit_15_02"); //À ãäå ñåé÷àñ Áóëëèò?
    ai_output(self, hero, "Info_Diego_Bullit_11_03"); //Âìåñòå ñ îñòàëüíûìè òàùèò ïðèïàñû èç âíåøíåãî ìèðà â Ëàãåðü. Òû âñòðåòèøü åãî òàì.
    ai_output(self, hero, "Info_Diego_Bullit_11_04"); //Íî åñëè òû õî÷åøü ñðàçèòüñÿ ñ íèì, áóäü îñòîðîæåí. Áóëëèò - íåïëîõîé áîåö.
};

instance info_diego_kolonie(c_info) {
    npc = pc_thief /*8001*/;
    nr = 1;
    condition = info_diego_kolonie_condition;
    information = info_diego_kolonie_info;
    description = "Õîðîøî, ÷òî ÿ äîëæåí óçíàòü îá ýòîì ìåñòå?";
};

func int info_diego_kolonie_condition() {
    if (kapitel < 2) {
        return true;
    };
};

func void info_diego_kolonie_info() {
    ai_output(hero, self, "Info_Diego_Kolonie_15_00"); //Õîðîøî, ÷òî ÿ äîëæåí óçíàòü îá ýòîì ìåñòå?
    ai_output(self, hero, "Info_Diego_Kolonie_11_01"); //Ìû íàçûâàåì åãî êîëîíèåé. Òû óæå çíàåøü, ÷òî ìû äîáûâàåì ðóäó äëÿ êîðîëÿ.
    ai_output(self, hero, "Info_Diego_Kolonie_11_02"); //Ïî êðàéíåé ìåðå, â Ñòàðîì Ëàãåðå...
    ai_output(self, hero, "Info_Diego_Kolonie_11_03"); //Âíóòðè Áàðüåðà åñòü òðè Ëàãåðÿ. Ñòàðûé Ëàãåðü - ñàìûé áîëüøîé. Îí áûë ïåðâûì.
};

instance info_diego_barriere(c_info) {
    npc = pc_thief /*8001*/;
    nr = 3;
    condition = info_diego_barriere_condition;
    information = info_diego_barriere_info;
    description = "Ðàññêàæè ìíå ïðî Áàðüåð.";
};

func int info_diego_barriere_condition() {
    if (npc_knowsinfo(hero, info_diego_kolonie /*11802*/) && (diego_after_gamestart == true)) {
        return 1;
    };
};

func void info_diego_barriere_info() {
    ai_output(hero, self, "Info_Diego_Barriere_15_00"); //Ðàññêàæè ìíå ïðî Áàðüåð.
    ai_output(self, hero, "Info_Diego_Barriere_11_01"); //Òóò íå÷åãî ðàññêàçûâàòü. Äëÿ ëþäåé îí íåïðîíèöàåì.
    ai_output(hero, self, "Info_Diego_Barriere_15_02"); //È ÷òî áóäåò, åñëè ÿ ïðîñòî ïîïðîáóþ óéòè îòñþäà?
    ai_output(self, hero, "Info_Diego_Barriere_11_03"); //Ïîñëåäíèé, êòî ïûòàëñÿ âûáðàòüñÿ íàðóæó, î÷åíü áûñòðî ïðåâðàòèëñÿ â ïîêîéíèêà. Ýòà ÷åðòîâà øòóêîâèíà ëåãêî âïóñêàåò òåáÿ âíóòðü è äåðæèò òåáÿ çäåñü äî êîíöà òâîèõ äíåé.
    ai_output(hero, self, "Info_Diego_Barriere_15_04"); //Åñëè åñòü ñïîñîá âûáðàòüñÿ íàðóæó, ÿ íàéäó åãî.
    ai_output(self, hero, "Info_Diego_Barriere_11_05"); //Òû óæå òîðîïèøüñÿ óáðàòüñÿ îòñþäà, à? À âåäü òû òîëüêî ÷òî ïðèáûë!
};

instance info_diego_othercamps(c_info) {
    npc = pc_thief /*8001*/;
    nr = 2;
    condition = info_diego_othercamps_condition;
    information = info_diego_othercamps_info;
    description = "À äðóãèå äâà Ëàãåðÿ?";
};

func int info_diego_othercamps_condition() {
    if ((npc_knowsinfo(hero, info_diego_kolonie /*11802*/) && (diego_after_gamestart == true)) && (npc_gettrueguild(hero) == gil_none)) {
        return 1;
    };
};

func void info_diego_othercamps_info() {
    ai_output(hero, self, "Info_Diego_OtherCamps_15_00"); //À äðóãèå äâà Ëàãåðÿ?
    ai_output(self, hero, "Info_Diego_OtherCamps_11_01"); //Îíè ðàçäåëèëèñü, ïûòàÿñü îñóùåñòâèòü ñâîè áåçóìíûå ïëàíû ïîáåãà.
    ai_output(self, hero, "Info_Diego_OtherCamps_11_02"); //Íîâûé Ëàãåðü íàõîäèòñÿ â çàïàäíîé ÷àñòè êîëîíèè. Îíè äóìàþò, ÷òî ñìîãóò ïðîñòî âçîðâàòü Áàðüåð, åñëè ñîáåðóò äîñòàòî÷íî ìíîãî ðóäû.
    ai_output(self, hero, "Info_Diego_OtherCamps_11_03"); //Åñòü åùå ñåêòà áåçóìöåâ íà âîñòîêå. Îíè âûñòðîèëè Ëàãåðü ïîñðåäè áîëîòà è ìîëÿòñÿ ñâîåìó èäîëó, ÷òîáû îí îñâîáîäèë èõ.
    ai_output(self, hero, "Info_Diego_OtherCamps_11_04"); //Ïîêà îí èì íè÷åì íå ïîìîã.
    ai_output(self, hero, "Info_Diego_OtherCamps_11_05"); //Íà òâîåì ìåñòå ÿ áû íå ñòàë òðàòèòü âðåìÿ íà ýòèõ ñóìàñáðîäîâ.
};

instance info_diego_oldcamp(c_info) {
    npc = pc_thief /*8001*/;
    nr = 1;
    condition = info_diego_oldcamp_condition;
    information = info_diego_oldcamp_info;
    description = "Ðàññêàæè ìíå î Ñòàðîì Ëàãåðå.";
};

func int info_diego_oldcamp_condition() {
    if (npc_knowsinfo(hero, info_diego_kolonie /*11802*/) && (diego_after_gamestart == true)) {
        return 1;
    };
};

func void info_diego_oldcamp_info() {
    ai_output(hero, self, "Info_Diego_OldCamp_15_00"); //Ðàññêàæè ìíå î Ñòàðîì Ëàãåðå.
    ai_output(self, hero, "Info_Diego_OldCamp_11_01"); //Ýòî ñàìûé áîëüøîé è ñèëüíûé èç òðåõ Ëàãåðåé. Ãîìåç è åãî ëþäè êîíòðîëèðóþò Ñòàðûé Ëàãåðü - à çíà÷èò è âñå ïîñòàâêè ðóäû.
    ai_output(self, hero, "Info_Diego_OldCamp_11_02"); //Ðàç â ìåñÿö êîðîëü ïðèñûëàåò íàì âñå, ÷òî ìû íè ïîïðîñèì. Ìû äåðæèì ñòàðèêà â êóëàêå, ïîíÿòíî?
    ai_output(self, hero, "Info_Diego_OldCamp_11_03"); //Îí ïðèñûëàåò íàì âèíî, õëåá, ìÿñî, îðóæèå... âñå.
    if (npc_gettrueguild(hero) == gil_none) {
        ai_output(self, hero, "Info_Diego_OldCamp_11_04"); //Òû òîæå ìîæåøü ðàññ÷èòûâàòü íà ÷àñòü äîáû÷è. Âñå ÷òî òåáå íóæíî - ýòî ïðèñîåäèíèòüñÿ ê ëþäÿì Ãîìåçà.
    };
};

instance info_diego_whosgomez(c_info) {
    npc = pc_thief /*8001*/;
    nr = 3;
    condition = info_diego_whosgomez_condition;
    information = info_diego_whosgomez_info;
    description = "Êòî òàêîé Ãîìåç?";
};

func int info_diego_whosgomez_condition() {
    if (npc_knowsinfo(hero, info_diego_oldcamp /*11811*/) || npc_knowsinfo(hero, info_diego_brief /*11793*/)) {
        return 1;
    };
};

func void info_diego_whosgomez_info() {
    ai_output(hero, self, "Info_Diego_WhosGomez_15_00"); //Êòî òàêîé Ãîìåç?
    ai_output(self, hero, "Info_Diego_WhosGomez_11_01"); //Ãîìåç - ñàìûé âëèÿòåëüíûé èç Áàðîíîâ. Îí ïðàâèò Ñòàðûì Ëàãåðåì íà ïðàâàõ ñàìîãî ñèëüíîãî ÷åëîâåêà â êîëîíèè.
};

instance info_diego_joinoldcamp(c_info) {
    npc = pc_thief /*8001*/;
    nr = 4;
    condition = info_diego_joinoldcamp_condition;
    information = info_diego_joinoldcamp_info;
    description = "Ïðåäïîëîæèì, ÿ õî÷ó ñòàòü îäíèì èç åãî ëþäåé.";
};

func int info_diego_joinoldcamp_condition() {
    if (((npc_knowsinfo(hero, info_diego_oldcamp /*11811*/) || npc_knowsinfo(hero, info_diego_brief /*11793*/)) && (!c_npcbelongstooldcamp(hero))) && (npc_gettrueguild(hero) == gil_none)) {
        return true;
    };
};

func void info_diego_joinoldcamp_info() {
    var c_npc thorus;

    ai_output(hero, self, "Info_Diego_JoinOldcamp_15_00"); //Ïðåäïîëîæèì, ÿ õî÷ó ñòàòü îäíèì èç åãî ëþäåé. ×òî ìíå íóæíî äåëàòü?
    ai_output(self, hero, "Info_Diego_JoinOldcamp_11_01"); //Âîçëå âîðîò çàìêà òû íàéäåøü ÷åëîâåêà ïî èìåíè Òîðóñ. Ñêàæè åìó, ÷òî òåáÿ ïîñëàë Äèåãî.
    thorus = hlp_getnpc(grd_200_thorus);
    thorus.aivar[7] = true;
    log_createtopic(ch1_joinoc, log_mission);
    log_settopicstatus(ch1_joinoc, log_running);
    b_logentry(ch1_joinoc, ch1_joinoc_19);
};

instance info_diego_waytooldcamp(c_info) {
    npc = pc_thief /*8001*/;
    nr = 4;
    condition = info_diego_waytooldcamp_condition;
    information = info_diego_waytooldcamp_info;
    description = "Êàê äîáðàòüñÿ äî Ñòàðîãî Ëàãåðÿ?";
};

func int info_diego_waytooldcamp_condition() {
    if (npc_knowsinfo(hero, info_diego_kolonie /*11802*/) && (!diego_after_gamestart)) {
        return 1;
    };
};

func void info_diego_waytooldcamp_info() {
    ai_output(hero, self, "Info_Diego_WayToOldcamp_15_00"); //Êàê äîáðàòüñÿ äî Ñòàðîãî Ëàãåðÿ?
    ai_output(self, hero, "Info_Diego_WayToOldcamp_11_01"); //Äîðîãà âûâåäåò òåáÿ ñàìà. Ñòàðûé Ëàãåðü - áëèæàéøåå ïîñåëåíèå, êîòîðîå âñòðåòèòñÿ òåáå íà ïóòè.
    ai_output(self, hero, "Info_Diego_WayToOldcamp_11_02"); //Íà ïîäñòóïàõ ê Ëàãåðþ áðîäèò íåìàëî äèêèõ òâàðåé. Íóæíî áûòü áåçóìöåì, ÷òîáû ðàçãóëèâàòü îêðåñò áåç îðóæèÿ.
};

instance info_diego_wowaffe(c_info) {
    npc = pc_thief /*8001*/;
    nr = 4;
    condition = info_diego_wowaffe_condition;
    information = info_diego_wowaffe_info;
    description = "À ãäå ìíå âçÿòü îðóæèå?";
};

func int info_diego_wowaffe_condition() {
    if (npc_knowsinfo(hero, info_diego_waytooldcamp /*11821*/) && (!diego_after_gamestart)) {
        return 1;
    };
};

func void info_diego_wowaffe_info() {
    ai_output(hero, self, "Info_Diego_WoWaffe_15_00"); //À ãäå ìíå âçÿòü îðóæèå?
    ai_output(self, hero, "Info_Diego_WoWaffe_11_01"); //Êîãäà äîáåðåøüñÿ äî Ñòàðîé Øàõòû, âíèìàòåëüíî ïîñìîòðè âîêðóã. Óâåðåí, òû íàéäåøü ÷òî-íèáóäü ïîëåçíîå.
    ai_output(self, hero, "Info_Diego_WoWaffe_11_02"); //Øàõòó ëåãêî íàéòè - îíà íàõîäèòñÿ â äâóõ äåñÿòêàõ øàãîâ îòñþäà.
};

instance info_diego_thorussays(c_info) {
    npc = pc_thief /*8001*/;
    nr = 1;
    condition = info_diego_thorussays_condition;
    information = info_diego_thorussays_info;
    description = "ß ïîãîâîðèë ñ Òîðóñîì.";
};

func int info_diego_thorussays_condition() {
    if (npc_knowsinfo(hero, info_thorus_diegosentme /*8799*/)) {
        return 1;
    };
};

func void info_diego_thorussays_info() {
    ai_output(hero, self, "Info_Diego_ThorusSays_15_00"); //ß ïîãîâîðèë ñ Òîðóñîì.
    ai_output(self, hero, "Info_Diego_ThorusSays_11_01"); //È ÷òî îí ñêàçàë?
    ai_output(hero, self, "Info_Diego_ThorusSays_15_02"); //Îí ñêàçàë, ÷òî åñëè ÒÛ äàøü ñâîå ñîãëàñèå, ÿ ñìîãó ïðèñîåäèíèòüñÿ ê Ñòàðîìó Ëàãåðþ.
    ai_output(self, hero, "Info_Diego_ThorusSays_11_03"); //Ïîõîæå, ÿ íàøåë ñåáå íîâóþ ðàáîòåíêó.
    ai_output(hero, self, "Info_Diego_ThorusSays_15_04"); //Ìû ìîæåì íà÷àòü ïðÿìî ñåé÷àñ?
    ai_output(self, hero, "Info_Diego_ThorusSays_11_05"); //Ïðåæäå âñåãî òåáå íóæíî êîå-÷òî ïîíÿòü.
};

instance info_diego_rules(c_info) {
    npc = pc_thief /*8001*/;
    nr = 10;
    condition = info_diego_rules_condition;
    information = info_diego_rules_info;
    description = "×òî íóæíî çíàòü, äëÿ òîãî ÷òîáû ïðèñîåäèíèòüñÿ â âàøåìó Ëàãåðþ?";
};

func int info_diego_rules_condition() {
    if (npc_knowsinfo(hero, info_diego_thorussays /*11827*/)) {
        return 1;
    };
};

func void info_diego_rules_info() {
    ai_output(hero, self, "Info_Diego_Rules_15_00"); //×òî íóæíî çíàòü, äëÿ òîãî ÷òîáû ïðèñîåäèíèòüñÿ â âàøåìó Ëàãåðþ?
    ai_output(self, hero, "Info_Diego_Rules_11_01"); //Åñëè õî÷åøü ñòàòü îäíèì èç íàñ, ïðåæäå âñåãî òû äîëæåí ïîêàçàòü ñåáÿ ïîëåçíûì.
    ai_output(self, hero, "Info_Diego_Rules_11_02"); //Âî Âíåøíåì Êîëüöå åñòü íåñêîëüêî î÷åíü âëèÿòåëüíûõ ëþäåé - â îñíîâíîì, Ïðèçðàêè. Åñëè ñóìååøü ïðîèçâåñòè íà íèõ âïå÷àòëåíèå - ñ÷èòàé, ïîëäåëà ñäåëàíî.
    ai_output(self, hero, "Info_Diego_Rules_11_03"); //Çàòåì òåáÿ æäåò èñïûòàíèå âåðû: òû äîëæåí áóäåøü äîêàçàòü, ÷òî èñêðåííå ïðåäàí ýòîìó Ëàãåðþ.
    ai_output(self, hero, "Info_Diego_Rules_11_04"); //Ïîìèìî ýòîãî, íîâè÷êàì ïðèõîäèòñÿ ìíîãîìó ó÷èòüñÿ. ×åì áîëüøå òû áóäåøü çíàòü, òåì öåííåå òû áóäåøü äëÿ íàøåãî Ëàãåðÿ.
    b_logentry(ch1_joinoc, ch1_joinoc_20);
};

instance info_diego_celebs(c_info) {
    npc = pc_thief /*8001*/;
    nr = 10;
    condition = info_diego_celebs_condition;
    information = info_diego_celebs_info;
    description = "Ãäå èñêàòü ýòèõ âëèÿòåëüíûõ ëþäåé?";
};

func int info_diego_celebs_condition() {
    if (npc_knowsinfo(hero, info_diego_rules /*11830*/)) {
        return 1;
    };
};

func void info_diego_celebs_info() {
    ai_output(hero, self, "Info_Diego_Celebs_15_00"); //Ãäå èñêàòü ýòèõ âëèÿòåëüíûõ ëþäåé?
    ai_output(self, hero, "Info_Diego_Celebs_11_01"); //Íó, îäíîãî èç íèõ òû âèäèøü ïåðåä ñîáîé. Åñòü åùå Òîðóñ... Òû åãî óæå çíàåøü.
    ai_output(self, hero, "Info_Diego_Celebs_11_02"); //×òî äî îñòàëüíûõ... Èõ òåáå ïðèäåòñÿ ïîèñêàòü ñàìîìó. Åñëè òû íå ñìîæåøü ñïðàâèòüñÿ ñ ýòèì, òî òåáå íå÷åãî äåëàòü ñðåäè íàñ.
    ai_output(self, hero, "Info_Diego_Celebs_11_03"); //Ïîãóëÿé ïî Âíåøíåìó Êîëüöó, ïîãîâîðè ñ ëþäüìè, è òû ïîéìåøü, êòî åñòü êòî.
};

instance info_diego_teachers(c_info) {
    npc = pc_thief /*8001*/;
    nr = 10;
    condition = info_diego_teachers_condition;
    information = info_diego_teachers_info;
    description = "Êòî ìîæåò ñòàòü ìîèì íàñòàâíèêîì?";
};

func int info_diego_teachers_condition() {
    if (npc_knowsinfo(hero, info_diego_rules /*11830*/)) {
        return 1;
    };
};

func void info_diego_teachers_info() {
    ai_output(hero, self, "Info_Diego_Teachers_15_00"); //Êòî ìîæåò ñòàòü ìîèì íàñòàâíèêîì?
    ai_output(self, hero, "Info_Diego_Teachers_11_01"); //Íà÷íè ñ Ôèíãåðñà. Îí ó íàñ ñàìûé îïûòíûé.
    ai_output(self, hero, "Info_Diego_Teachers_11_02"); //À ïîòîì, åñëè ïîñìîòðèøü ïî ñòîðîíàì, óâèäèøü, ÷òî ìíîãèå ìîãóò òåáÿ ÷åìó-íèáóäü íàó÷èòü.
    ai_output(hero, self, "Info_Diego_Teachers_15_03"); //Ãäå æèâåò Ôèíãåðñ?
    ai_output(self, hero, "Info_Diego_Teachers_11_04"); //Î, åãî äîì íàäåæíî óêðûò îò ïîñòîðîííèõ ãëàç. Äîì Ôèíãåðñà íàõîäèòñÿ ó ñòåíû çàìêà. Íà÷íè îòñþäà è èäè ïî íàïðàâëåíèþ ê àðåíå.
    ai_output(self, hero, "Info_Diego_Teachers_11_05"); //Êîãäà îêàæåøüñÿ ó âîðîò, ïîâåðíè íàëåâî è ñïóñêàéñÿ âíèç ïî íàïðàâëåíèþ ê àðåíå.
    if (fingers_canteach == false) {
        log_createtopic(ge_teacheroc, log_note);
        b_logentry(ge_teacheroc, ge_teacheroc_fingers2);
    };
};

var int diego_merke_str;

var int diego_merke_dex;

instance info_diego_teach(c_info) {
    npc = pc_thief /*8001*/;
    nr = 100;
    condition = info_diego_teach_condition;
    information = info_diego_teach_info;
    permanent = true;
    description = "Òû ìîæåøü ÷åìó-íèáóäü íàó÷èòü ìåíÿ?";
};

func int info_diego_teach_condition() {
    if (npc_knowsinfo(hero, info_diego_teachers /*11836*/)) {
        return 1;
    };
};

func void info_diego_teach_info() {
    if (log_diegotrain == false) {
        log_createtopic(ge_teacheroc, log_note);
        b_logentry(ge_teacheroc, ge_teacheroc_diego);
        log_diegotrain = true;
    };
    ai_output(hero, self, "Info_Diego_Teach_15_00"); //À òû ìîæåøü ìåíÿ ÷åìó-íèáóäü íàó÷èòü?
    ai_output(self, hero, "Info_Diego_Teach_11_01"); //Äà. ß ìîãó ïîêàçàòü òåáå, êàê óâåëè÷èòü ñèëó èëè ïîâûñèòü ëîâêîñòü.
    diego_merke_str = hero.attribute[atr_strength] /*4*/;
    diego_merke_dex = hero.attribute[atr_dexterity] /*5*/;
    info_clearchoices(info_diego_teach /*11841*/);
    info_addchoice(info_diego_teach /*11841*/, dialog_back, info_diego_teach_back);
    info_addchoice(info_diego_teach /*11841*/, b_buildlearnstring(name_learnstrength_5, 5 * lpcost_attribute_strength, 0), info_diego_teach_str_5);
    info_addchoice(info_diego_teach /*11841*/, b_buildlearnstring(name_learnstrength_1, lpcost_attribute_strength, 0), info_diego_teach_str_1);
    info_addchoice(info_diego_teach /*11841*/, b_buildlearnstring(name_learndexterity_5, 5 * lpcost_attribute_dexterity, 0), info_diego_teach_dex_5);
    info_addchoice(info_diego_teach /*11841*/, b_buildlearnstring(name_learndexterity_1, lpcost_attribute_dexterity, 0), info_diego_teach_dex_1);
};

func void info_diego_teach_back() {
    if (diego_merke_str < hero.attribute[atr_strength] /*4*/) {
        ai_output(self, hero, "Info_Diego_Teach_BACK_11_00"); //Âèäèøü - òû ñòàë íàìíîãî ñèëüíåå.
    };
    if (diego_merke_dex < hero.attribute[atr_dexterity] /*5*/) {
        ai_output(self, hero, "Info_Diego_Teach_BACK_11_01"); //Òåïåðü òû áóäåøü òî÷íåå ñòðåëÿòü èç ëóêà è àðáàëåòà.
    };
    ai_output(self, hero, "Info_Diego_Teach_BACK_11_02"); //Âîçâðàùàéñÿ ñêîðåå - òåáå åùå ìíîãîìó ïðåäñòîèò íàó÷èòüñÿ!
    info_clearchoices(info_diego_teach /*11841*/);
};

func void info_diego_teach_str_1() {
    b_buyattributepoints(hero, atr_strength, lpcost_attribute_strength);
    info_clearchoices(info_diego_teach /*11841*/);
    info_addchoice(info_diego_teach /*11841*/, dialog_back, info_diego_teach_back);
    info_addchoice(info_diego_teach /*11841*/, b_buildlearnstring(name_learnstrength_5, 5 * lpcost_attribute_strength, 0), info_diego_teach_str_5);
    info_addchoice(info_diego_teach /*11841*/, b_buildlearnstring(name_learnstrength_1, lpcost_attribute_strength, 0), info_diego_teach_str_1);
    info_addchoice(info_diego_teach /*11841*/, b_buildlearnstring(name_learndexterity_5, 5 * lpcost_attribute_dexterity, 0), info_diego_teach_dex_5);
    info_addchoice(info_diego_teach /*11841*/, b_buildlearnstring(name_learndexterity_1, lpcost_attribute_dexterity, 0), info_diego_teach_dex_1);
};

func void info_diego_teach_str_5() {
    b_buyattributepoints(hero, atr_strength, 5 * lpcost_attribute_strength);
    info_clearchoices(info_diego_teach /*11841*/);
    info_addchoice(info_diego_teach /*11841*/, dialog_back, info_diego_teach_back);
    info_addchoice(info_diego_teach /*11841*/, b_buildlearnstring(name_learnstrength_5, 5 * lpcost_attribute_strength, 0), info_diego_teach_str_5);
    info_addchoice(info_diego_teach /*11841*/, b_buildlearnstring(name_learnstrength_1, lpcost_attribute_strength, 0), info_diego_teach_str_1);
    info_addchoice(info_diego_teach /*11841*/, b_buildlearnstring(name_learndexterity_5, 5 * lpcost_attribute_dexterity, 0), info_diego_teach_dex_5);
    info_addchoice(info_diego_teach /*11841*/, b_buildlearnstring(name_learndexterity_1, lpcost_attribute_dexterity, 0), info_diego_teach_dex_1);
};

func void info_diego_teach_dex_1() {
    b_buyattributepoints(hero, atr_dexterity, lpcost_attribute_dexterity);
    info_clearchoices(info_diego_teach /*11841*/);
    info_addchoice(info_diego_teach /*11841*/, dialog_back, info_diego_teach_back);
    info_addchoice(info_diego_teach /*11841*/, b_buildlearnstring(name_learnstrength_5, 5 * lpcost_attribute_strength, 0), info_diego_teach_str_5);
    info_addchoice(info_diego_teach /*11841*/, b_buildlearnstring(name_learnstrength_1, lpcost_attribute_strength, 0), info_diego_teach_str_1);
    info_addchoice(info_diego_teach /*11841*/, b_buildlearnstring(name_learndexterity_5, 5 * lpcost_attribute_dexterity, 0), info_diego_teach_dex_5);
    info_addchoice(info_diego_teach /*11841*/, b_buildlearnstring(name_learndexterity_1, lpcost_attribute_dexterity, 0), info_diego_teach_dex_1);
};

func void info_diego_teach_dex_5() {
    b_buyattributepoints(hero, atr_dexterity, 5 * lpcost_attribute_dexterity);
    info_clearchoices(info_diego_teach /*11841*/);
    info_addchoice(info_diego_teach /*11841*/, dialog_back, info_diego_teach_back);
    info_addchoice(info_diego_teach /*11841*/, b_buildlearnstring(name_learnstrength_5, 5 * lpcost_attribute_strength, 0), info_diego_teach_str_5);
    info_addchoice(info_diego_teach /*11841*/, b_buildlearnstring(name_learnstrength_1, lpcost_attribute_strength, 0), info_diego_teach_str_1);
    info_addchoice(info_diego_teach /*11841*/, b_buildlearnstring(name_learndexterity_5, 5 * lpcost_attribute_dexterity, 0), info_diego_teach_dex_5);
    info_addchoice(info_diego_teach /*11841*/, b_buildlearnstring(name_learndexterity_1, lpcost_attribute_dexterity, 0), info_diego_teach_dex_1);
};

var int diego_bringlist;

instance info_diego_bringlist_offer(c_info) {
    npc = pc_thief /*8001*/;
    nr = 10;
    condition = info_diego_bringlist_offer_condition;
    information = info_diego_bringlist_offer_info;
    description = "×òî òàêîå èñïûòàíèå âåðû?";
};

func int info_diego_bringlist_offer_condition() {
    if (npc_knowsinfo(hero, info_diego_rules /*11830*/)) {
        return 1;
    };
};

func void info_diego_bringlist_offer_info() {
    var c_npc ian;

    ai_output(hero, self, "Info_Diego_BringList_Offer_15_00"); //×òî òàêîå èñïûòàíèå âåðû?
    ai_output(self, hero, "Info_Diego_BringList_Offer_11_01"); //Òû äîëæåí îòïðàâèòüñÿ â Ñòàðóþ Øàõòó. Òàì òû âñòðåòèøü îäíîãî ïàðíÿ, åãî çîâóò ßí. Îí äàñò òåáå ñïèñîê.
    ai_output(self, hero, "Info_Diego_BringList_Offer_11_02"); //Ýòî î÷åíü âàæíàÿ áóìàãà - ñïèñîê âñåõ ïðèïàñîâ, êîòîðûå íóæíû äëÿ íîðìàëüíîé ðàáîòû øàõòû.
    ai_output(self, hero, "Info_Diego_BringList_Offer_11_03"); //Ðóäîêîïû ïîëó÷àò èõ ñî ñëåäóþùèì êàðàâàíîì.
    ai_output(hero, self, "Info_Diego_BringList_Offer_15_04"); //Áåç ïðîáëåì!
    ai_output(self, hero, "Info_Diego_BringList_Offer_11_05"); //Íåò, ïðîáëåìà âñå-òàêè åñòü. Ýòîò ñïèñîê íå äîëæåí ïîïàñòü â ðóêè áàíäèòîâ èç Íîâîãî Ëàãåðÿ!
    ai_output(self, hero, "Info_Diego_BringList_Offer_11_06"); //Êàê ÿ óæå ãîâîðèë, ýòî î÷åíü âàæíî. Åñëè òû õîðîøî ñïðàâèøüñÿ, òîãäà ìû ïîéäåì äàëüøå.
    diego_bringlist = log_running;
    log_createtopic(ch1_bringlist, log_mission);
    log_settopicstatus(ch1_bringlist, log_running);
    b_logentry(ch1_bringlist, ch1_bringlist_2);
    ian = hlp_getnpc(stt_301_ian);
    createinvitem(stt_301_ian, thelist);
};

instance info_diego_ianpassword(c_info) {
    npc = pc_thief /*8001*/;
    nr = 1;
    condition = info_diego_ianpassword_condition;
    information = info_diego_ianpassword_info;
    description = "Åñëè ýòîò ñïèñîê íàñòîëüêî âàæåí, ïî÷åìó ßí îòäàñò åãî ÌÍÅ?";
};

func int info_diego_ianpassword_condition() {
    if (npc_knowsinfo(hero, info_diego_bringlist_offer /*11850*/)) {
        return 1;
    };
};

func void info_diego_ianpassword_info() {
    ai_output(hero, self, "Info_Diego_IanPassword_Info_15_01"); //Åñëè ýòîò ñïèñîê íàñòîëüêî âàæåí, ïî÷åìó òû äóìàåøü, ÷òî ßí îòäàñò åãî ÌÍÅ?
    ai_output(self, hero, "Info_Diego_IanPassword_Info_11_02"); //Ïîòîìó ÷òî òû ñêàæåøü åìó, ÷òî òåáÿ ïðèñëàë Äèåãî.
    ai_output(hero, self, "Info_Diego_IanPassword_Info_15_03"); //ß ñêàæó.
    b_logentry(ch1_bringlist, ch1_bringlist_3);
};

instance info_diego_maptooldmine(c_info) {
    npc = pc_thief /*8001*/;
    nr = 1;
    condition = info_diego_maptooldmine_condition;
    information = info_diego_maptooldmine_info;
    description = "Ãäå íàõîäèòñÿ Ñòàðàÿ Øàõòà? ";
};

func int info_diego_maptooldmine_condition() {
    if (npc_knowsinfo(hero, info_diego_bringlist_offer /*11850*/)) {
        return 1;
    };
};

func void info_diego_maptooldmine_info() {
    ai_output(hero, self, "Info_Diego_MapToOldMine_Info_15_00"); //Ãäå íàõîäèòñÿ Ñòàðàÿ Øàõòà?
    ai_output(self, hero, "Info_Diego_MapToOldMine_Info_11_01"); //Çàéäè ê Ãðåõýìó. Îí ó íàñ çàíèìàåòñÿ êàðòàìè. Ñêàæè, ÷òî ÿ ïîñëàë òåáÿ è ÷òî òåáå íóæíà êàðòà. Íà íåé òû íàéäåøü ïóòü ê øàõòå.
    ai_output(self, hero, "Info_Diego_MapToOldMine_Info_11_02"); //Îí æèâåò ñëåâà îò ñåâåðíûõ âîðîò.
    b_logentry(ch1_bringlist, ch1_bringlist_4);
};

instance info_diego_bringlist_success(c_info) {
    npc = pc_thief /*8001*/;
    nr = 1;
    condition = info_diego_bringlist_success_condition;
    information = info_diego_bringlist_success_info;
    description = "ß ïîëó÷èë ñïèñîê îò ßíà.";
};

func int info_diego_bringlist_success_condition() {
    if ((diego_bringlist == log_running) && (npc_hasitems(hero, thelist) || npc_hasitems(hero, thelistnc))) {
        return 1;
    };
};

func void info_diego_bringlist_success_info() {
    ai_output(hero, self, "Info_Diego_BringList_Success_15_00"); //ß ïîëó÷èë ñïèñîê îò ßíà.
    if (npc_hasitems(hero, thelist)) {
        b_giveinvitems(hero, self, thelist /*4566*/, 1);
        b_logentry(ch1_bringlist, ch1_bringlist_5);
    }
    else {
        if (npc_hasitems(hero, thelistnc)) {
            b_giveinvitems(hero, self, thelistnc /*4579*/, 1);
            b_logentry(ch1_bringlist, ch1_bringlist_6);
        };
    };
    b_usefakescroll();
    ai_output(self, hero, "Info_Diego_BringList_Success_11_01"); //Îòëè÷íî! Òû õîðîøî íà÷àë, ïàðåíü!
    diego_bringlist = log_success;
    b_givexp(xp_diegobringlist);
    log_settopicstatus(ch1_bringlist, log_success);
    points_oc = points_oc + 5;
};

var int diego_gomezaudience;

instance info_diego_joinanalyze(c_info) {
    npc = pc_thief /*8001*/;
    nr = 800;
    condition = info_diego_joinanalyze_condition;
    information = info_diego_joinanalyze_info;
    permanent = true;
    description = "×òî ãîâîðÿò îáî ìíå â Ëàãåðå?";
};

func int info_diego_joinanalyze_condition() {
    if ((npc_knowsinfo(hero, info_diego_rules /*11830*/) && (npc_gettrueguild(hero) == gil_none)) && (oldheroguild == 0)) {
        return 1;
    };
};

func void info_diego_joinanalyze_info() {
    var c_npc mordrag;

    ai_output(hero, self, "Info_Diego_JoinAnalyze_15_00"); //×òî ãîâîðÿò îáî ìíå â Ëàãåðå?
    ai_output(self, hero, "Info_Diego_JoinAnalyze_11_01"); //Íó, ÿ ïîãîâîðèë ñ íåñêîëüêèìè ëþäüìè...
    ai_output(hero, self, "Info_Diego_JoinAnalyze_15_02"); //È?
    points_oc = 0;
    if (scatty_chargekirgo == log_success) {
        ai_output(self, hero, "Info_Diego_JoinAnalyze_Scatty_11_01"); //Ñêàòòè ñêàçàë, ÷òî òû ïîáåäèë Êèðãî.
        points_oc = points_oc + 2;
    }
    else if (scatty_chargekirgo == log_failed) {
        ai_output(self, hero, "Info_Diego_JoinAnalyze_Scatty_11_02"); //Ñêàòòè ñêàçàë, ÷òî Êèðãî ïîáèë òåáÿ. Êàæåòñÿ, îí áûë ñëåãêà ðàçî÷àðîâàí.
        points_oc = points_oc - 1;
    }
    else {
        if (scatty_chargekirgo == log_running) {
            ai_output(self, hero, "Info_Diego_JoinAnalyze_Scatty_11_03"); //Ñêàòòè ñêàçàë, ÷òî îí õî÷åò ïîñìîòðåòü, ñìîæåøü ëè òû ïîòÿãàòüñÿ ñ Êèðãî.
        };
    };
    if (scatty_chargekharim == log_failed) {
        ai_output(self, hero, "Info_Diego_JoinAnalyze_Scatty_11_04"); //Íî åìó ïîíðàâèëîñü òî, ÷òî òû íå ïîáîÿëñÿ äðàòüñÿ ñ Õàðèìîì - ïóñòü äàæå òû è ïðîèãðàë.
        points_oc = points_oc + 2;
    }
    else if (scatty_chargekharim == log_success) {
        ai_output(self, hero, "Info_Diego_JoinAnalyze_Scatty_11_05"); //Íî îí áûë â ïîëíîì âîñòîðãå îò òîãî, ÷òî òåáå óäàëîñü ïîáåäèòü Õàðèìà. Îí òîëüêî îá ýòîì è ãîâîðèò.
        points_oc = points_oc + 5;
    }
    else {
        if (scatty_chargekharim == log_running) {
            ai_output(self, hero, "Info_Diego_JoinAnalyze_Scatty_11_06"); //È îí î÷åíü õî÷åò ïîñìîòðåòü, êàê òû áóäåøü äðàòüñÿ ñ Õàðèìîì.
        };
    };
    if (whistler_buymysword == log_success) {
        ai_output(self, hero, "Info_Diego_JoinAnalyze_Whistler_11_01"); //Óèñòëåð ðàññêàçàë ìíå î Ôèñêå... Çíàåøü, íà òâîåì ìåñòå ÿ áû çàáðàë ðóäó è ñìîòàëñÿ. Íî êàê áû òî íè áûëî, òåïåðü îí î òåáå î÷åíü âûñîêîãî ìíåíèÿ.
        points_oc = points_oc + 3;
    }
    else if ((whistler_buymysword == log_failed) || ((whistler_buymysword == log_running) && (whistler_buymysword_day <= (wld_getday() - 2)))) {
        ai_output(self, hero, "Info_Diego_JoinAnalyze_Whistler_11_02"); //ß ïîãîâîðèë ñ Óèñòëåðîì. Òû ñïåð ó íåãî ðóäó, íàãëåö! Äîëæåí ïðèçíàòü, ÷òî â õðàáðîñòè òåáå íå îòêàæåøü!
        points_oc = points_oc + 2;
    }
    else {
        if (whistler_buymysword == log_running) {
            ai_output(self, hero, "Info_Diego_JoinAnalyze_Whistler_11_03"); //Óèñòëåð âñå åùå æäåò ñâîé ìå÷. Òåáå ñòîèò ïîáûñòðåå ðåøèòü, õî÷åøü òû îòäàâàòü åãî èëè íåò, â ïðîòèâíîì ñëó÷àå îí íàâåðíÿêà ïîäóìàåò, ÷òî òû ïîïðîñòó ñìîòàëñÿ ñ åãî ðóäîé!
        };
    };
    if (sly_lostnek == log_success) {
        ai_output(self, hero, "Info_Diego_JoinAnalyze_Sly_11_01"); //Ñëàé ðàññêàçàë ìíå, ÷òî òû íàøåë Íåêà. Ïîõîæå, îí òîáîé äîâîëåí.
        points_oc = points_oc + 4;
    }
    else {
        if (sly_lostnek == log_running) {
            ai_output(self, hero, "Info_Diego_JoinAnalyze_Sly_11_02"); //Ìíå êàæåòñÿ, Ñëàé íåïðàâ íàñ÷åò Íåêà. Êîíå÷íî, ýòîò ïàðåíü áûë íàñòîÿùåé çàíîçîé â çàäíèöå, íî âñå æå ÿ íå äóìàþ, ÷òî îí ïåðåøåë â Íîâûé Ëàãåðü.
        };
    };
    if (fingers_learnt == log_running) {
        ai_output(self, hero, "Info_Diego_JoinAnalyze_Fingers_11_01"); //ß óæå ïîñûëàë òåáÿ ê Ôèíãåðñó - îí äåéñòâèòåëüíî ìîæåò òåáÿ ÷åìó-íèáóäü íàó÷èòü!
    }
    else {
        if (fingers_learnt == log_success) {
            ai_output(self, hero, "Info_Diego_JoinAnalyze_Fingers_11_02"); //Ôèíãåðñ ðàññêàçàë ìíå, ÷òî òû óæå êîå-÷åìó íàó÷èëñÿ, íî îí ñ÷èòàåò, ÷òî òåáå åùå íóæíî îòòà÷èâàòü ñâîè íàâûêè.
            points_oc = points_oc + 3;
        };
    };
    if (dexter_getkalomsrecipe == log_running) {
        ai_output(self, hero, "Info_Diego_JoinAnalyze_Dexter_11_01"); //ß äîëæåí ïîãîâîðèòü ñ Äåêñåðîì. Îí èñïîëüçóåò òåáÿ äëÿ ñâîèõ ñîáñòâåííûõ íóæä.
        ai_output(self, hero, "Info_Diego_JoinAnalyze_Dexter_11_02"); //Ñ äðóãîé ñòîðîíû, êàñàòåëüíî èñïûòàíèÿ íåò íèêàêèõ ïðàâèë. Åñëè òû ñïðàâèøüñÿ ñ ÝÒÈÌ çàäàíèåì, ýòî áóäåò áîëüøèì øàãîì âïåðåä.
    }
    else {
        if (dexter_getkalomsrecipe == log_success) {
            ai_output(self, hero, "Info_Diego_JoinAnalyze_Dexter_11_03"); //Òû äåéñòâèòåëüíî ñóìåë äîáûòü ýòîò ðåöåïò ó Êîð Ãàëîìà! Äåêñòåð óäèâëåí, äà è ÿ òîæå. Ìîëîäåö!
            points_oc = points_oc + 5;
        };
    };
    if (thorus_mordragko == log_running) {
        ai_output(self, hero, "Info_Diego_JoinAnalyze_Thorus_11_01"); //Ïî ïîâîäó Ìîðäðàãà - òî åùå äåëüöå. Îí íå òàêîé óæ ïëîõîé âîèí. Òåáå íóæíî òðåíèðîâàòüñÿ, åñëè òû äåéñòâèòåëüíî õî÷åøü ïîáåäèòü åãî.
    }
    else if (thorus_mordragko == log_success) {
        ai_output(self, hero, "Info_Diego_JoinAnalyze_Thorus_11_02"); //Òîðóñ ñêàçàë, ÷òî íàì íóæíû òàêèå, êàê òû. Ýòî õîðîøèé çíàê.
        points_oc = points_oc + 5;
    }
    else {
        if (thorus_mordragko == log_failed) {
            ai_output(self, hero, "Info_Diego_JoinAnalyze_Thorus_11_03"); //Òîðóñ ÷óòü íå ëîïíóë îò ÿðîñòè. Êàê òû óìóäðèëñÿ ïðîâàëèòü ÒÀÊÎÅ äåëî?!
            points_oc = points_oc - 5;
        };
    };
    mordrag = hlp_getnpc(org_826_mordrag);
    if (fisk_getnewhehler == log_success) {
        ai_output(self, hero, "Info_Diego_JoinAnalyze_Fisk_11_01"); //Ôèñê ñêàçàë ìíå, ÷òî òû åãî óäèâèë. Â ëþáîì ñëó÷àå, îí áóäåò íà òâîåé ñòîðîíå.
        points_oc = points_oc + 5;
    }
    else {
        if (((mordragko_hauab == true) || (mordragko_stayatnc == true)) || npc_isdead(mordrag)) {
            ai_output(self, hero, "Info_Diego_JoinAnalyze_Fisk_11_02"); //Ñàì ïîíèìàåøü, Ôèñê òåïåðü îò òåáÿ íå â âîñòîðãå. Íà òâîåì ìåñòå ÿ áû áûñòðåíüêî ïîäûñêàë êîãî-íèáóäü íà çàìåíó Ìîðäðàãó.
        };
    };
    if (points_oc > 15) {
        ai_output(self, hero, "Info_Diego_Points_11_00"); //Ìíîãèå â ýòîì Ëàãåðå óæå ãîòîâû ïîääåðæàòü òåáÿ.
        if (hero.level >= 5) {
            if (diego_bringlist == log_success) {
                ai_output(self, hero, "Info_Diego_Points_11_01"); //È òû âûäåðæàë èñïûòàíèå. Èäè ê Òîðóñó. ß óæå âñå åìó ðàññêàçàë. Îí ïðîïóñòèò òåáÿ ê Ãîìåçó.
                diego_gomezaudience = true;
                log_settopicstatus(ch1_joinoc, log_success);
                b_logentry(ch1_joinoc, ch1_joinoc_21);
            }
            else {
                ai_output(self, hero, "Info_Diego_Points_11_02"); //Íî òåáå åùå íóæíî ïðîéòè èñïûòàíèå.
            };
        }
        else {
            ai_output(self, hero, "Info_Diego_Teach_BACK_11_02"); //Âîçâðàùàéñÿ ñêîðåå - òåáå åùå ìíîãîìó ïðåäñòîèò íàó÷èòüñÿ!
            b_printguildcondition(5);
        };
    }
    else if (points_oc > 10) {
        ai_output(self, hero, "Info_Diego_Points_11_10"); //Â èòîãå ìîæíî ñêàçàòü, íå òàê óæ ïëîõî äëÿ íîâè÷êà.
    }
    else {
        if (points_oc >= 0) {
            ai_output(self, hero, "Info_Diego_Points_11_20"); //Çàéìèñü äåëîì! Òåáå åùå ìíîãîå íóæíî óñïåòü, åñëè òû õî÷åøü äîáèòüñÿ ÷åãî-íèáóäü â ýòîì Ëàãåðå.
        };
    };
};

instance info_diego_whattosaytogomez(c_info) {
    npc = pc_thief /*8001*/;
    nr = 1;
    condition = info_diego_whattosaytogomez_condition;
    information = info_diego_whattosaytogomez_info;
    description = "×òî ìíå ãîâîðèòü, êîãäà ÿ âñòðå÷óñü ñ Ãîìåçîì?";
};

func int info_diego_whattosaytogomez_condition() {
    if (diego_gomezaudience == true) {
        return 1;
    };
};

func void info_diego_whattosaytogomez_info() {
    ai_output(hero, self, "Info_Diego_WhatToSayToGomez_Info_15_00"); //×òî ìíå ãîâîðèòü, êîãäà ÿ âñòðå÷óñü ñ Ãîìåçîì?
    ai_output(self, hero, "Info_Diego_WhatToSayToGomez_Info_11_01"); //Â ñâîèõ ðåøåíèÿõ Ãîìåç ðóêîâîäñòâóåòñÿ èíñòèíêòîì. Îí òàêèå âåùè ÷óâñòâóåò. Ïîñìîòðèò íà òâîþ ôèçèîíîìèþ è ðåøèò, ïðèíèìàòü òåáÿ èëè íåò.
    ai_output(self, hero, "Info_Diego_WhatToSayToGomez_Info_11_02"); //Äàëüøå òû áóäåøü äåéñòâîâàòü ñàì, òàê ÷òî ñîáåðèñü. Óäà÷è òåáå!
};

instance pc_thief_armor(c_info) {
    npc = pc_thief /*8001*/;
    nr = 0;
    condition = pc_thief_armor_condition;
    information = pc_thief_armor_info;
    permanent = true;
    description = b_buildbuyarmorstring(name_diegoheavyshadows, value_stt_armor_h);
};

func int pc_thief_armor_condition() {
    if ((npc_gettrueguild(hero) == gil_stt) && (!npc_hasitems(hero, stt_armor_h))) {
        return true;
    };
};

func void pc_thief_armor_info() {
    ai_output(hero, self, "PC_Thief_ARMOR_Info_15_01"); //À ÿ ìîãó ïîëó÷èòü òàêèå æå äîñïåõè, êàê ó òåáÿ?
    if (npc_hasitems(hero, itminugget) >= value_stt_armor_h) {
        ai_output(self, hero, "PC_Thief_ARMOR_Info_11_02"); //À ðóäû ó òåáÿ õâàòèò?
        createinvitem(hero, stt_armor_h);
        b_giveinvitems(hero, self, itminugget /*4517*/, value_stt_armor_h);
        createinvitem(self, itamarrow);
        b_giveinvitems(self, hero, itamarrow /*4894*/, 1);
        npc_removeinvitem(hero, itamarrow /*4894*/);
    }
    else {
        ai_output(self, hero, "PC_Thief_ARMOR_Info_11_03"); //Áóäåò ðóäà - áóäóò è äîñïåõè.
    };
};

instance pc_thief_meetagain(c_info) {
    npc = pc_thief /*8001*/;
    condition = pc_thief_meetagain_condition;
    information = pc_thief_meetagain_info;
    important = true;
};

func int pc_thief_meetagain_condition() {
    if ((kapitel == 3) && (npc_getdisttowp(self, "OW_PATH_190") < 700)) {
        return true;
    };
};

func void pc_thief_meetagain_info() {
    ai_gotonpc(self, hero);
    ai_output(self, hero, "PC_Thief_MEETAGAIN_Info_11_00"); //Ýé, ÿ óæ íå íàäåÿëñÿ óâèäåòü òåáÿ æèâûì.
    ai_output(hero, self, "PC_Thief_MEETAGAIN_Info_15_01"); //Ïîðîé ÿ è ñàì óæå íå íàäåÿëñÿ.
    ai_output(self, hero, "PC_Thief_MEETAGAIN_Info_11_02"); //Ìíîãî ÷åãî ïðîèçîøëî ñ òåõ ïîð, êàê ìû âèäåëèñü â ïîñëåäíèé ðàç. ß ñëûøàë, òû âíåñ áîëüøîé âêëàä â ïîñëåäíþþ Öåðåìîíèþ.
    ai_output(hero, self, "PC_Thief_MEETAGAIN_Info_15_03"); //Âñå-òî òû çíàåøü.
    ai_output(self, hero, "PC_Thief_MEETAGAIN_Info_11_04"); //Äàæå áîëüøå, ÷åì òû äóìàåøü... Òåïåðü òû èùåøü þíèòîð?
    ai_output(hero, self, "PC_Thief_MEETAGAIN_Info_15_05"); //Äà. Îäèí èç íèõ äîëæåí áûòü ãäå-òî çäåñü.
    ai_output(self, hero, "PC_Thief_MEETAGAIN_Info_11_06"); //ß çíàþ, ãäå åãî èñêàòü. Íî åñòü îäíà ïðîáëåìà.
    ai_output(hero, self, "PC_Thief_MEETAGAIN_Info_15_07"); //Ïîíÿòíî. Ñêîëüêî òû õî÷åøü?
    ai_output(self, hero, "PC_Thief_MEETAGAIN_Info_11_08"); //Íå çðÿ ÿ òåáÿ ó÷èë. Íî ñåé÷àñ äåëî íå â ýòîì.
    ai_output(hero, self, "PC_Thief_MEETAGAIN_Info_15_09"); //Íå â ýòîì? Òàê â ÷åì æå òîãäà ïðîáëåìà?
    ai_output(self, hero, "PC_Thief_MEETAGAIN_Info_11_10"); //Ïðîáëåìà òîííû íà òðè âåñîì.
    ai_output(self, hero, "PC_Thief_MEETAGAIN_Info_11_11"); //Èäåì. Òû ñàì âñå óâèäèøü.
    self.aivar[36] = true;
    npc_exchangeroutine(self, "GuideTroll");
    log_createtopic(ch3_trollcanyon, log_mission);
    log_settopicstatus(ch3_trollcanyon, log_running);
    b_logentry(ch3_trollcanyon, ch3_trollcanyon_2);
    b_logentry(ch3_trollcanyon, ch3_trollcanyon_3);
    ai_stopprocessinfos(self);
};

instance pc_thief_showfocus(c_info) {
    npc = pc_thief /*8001*/;
    condition = pc_thief_showfocus_condition;
    information = pc_thief_showfocus_info;
    important = true;
};

func int pc_thief_showfocus_condition() {
    if (npc_knowsinfo(hero, pc_thief_meetagain /*11874*/) && (npc_getdisttowp(self, "LOCATION_12_01") < 1000)) {
        return true;
    };
};

func void pc_thief_showfocus_info() {
    ai_gotonpc(self, hero);
    ai_output(self, hero, "PC_Thief_SHOWFOCUS_Info_11_01"); //Ïî ëåâóþ ñòîðîíó óùåëüÿ ðàñïîëîæåí âõîä â ïåùåðó, ãäå õðàíèòñÿ þíèòîð.
    ai_output(hero, self, "PC_Thief_SHOWFOCUS_Info_15_02"); //Ïîíÿòíî. Íî ïðåæäå íàì íóæíî èçáàâèòüñÿ îò ýòîé òâàðè.
    ai_output(self, hero, "PC_Thief_SHOWFOCUS_Info_11_03"); //×òîáû ïîáåäèòü òðîëëÿ, òåáå ïðèäåòñÿ îòûñêàòü ó íåãî ñëàáîå ìåñòî... èëè ïðèäóìàòü ÷òî-íèáóäü åùå.
    ai_output(self, hero, "PC_Thief_SHOWFOCUS_Info_11_04"); //ß îòâëåêó åãî.
    b_logentry(ch3_trollcanyon, ch3_trollcanyon_4);
    npc_exchangeroutine(self, "WaitAtWheel");
    ai_drawweapon(self);
    ai_stopprocessinfos(self);
};

instance pc_thief_aftertroll(c_info) {
    npc = pc_thief /*8001*/;
    condition = pc_thief_aftertroll_condition;
    information = pc_thief_aftertroll_info;
    important = true;
};

func int pc_thief_aftertroll_condition() {
    var int trollfound;

    npc_perceiveall(self);
    trollfound = wld_detectnpc(self, troll /*6848*/, NOFUNC, -1);
    if (npc_knowsinfo(hero, pc_thief_showfocus /*11877*/) && ((trollfound && (npc_isdead(other) || npc_isinstate(other, zs_magicshrink))) || (npc_getdisttowp(hero, "LOCATION_12_14_WHEEL") < 1000))) {
        return true;
    };
};

func void pc_thief_aftertroll_info() {
    ai_gotonpc(self, hero);
    ai_output(self, hero, "PC_Thief_AFTERTROLL_Info_11_01"); //Ïðîñòî ôàíòàñòèêà! Äà, òû äàðîì âðåìåíè íå òåðÿë! ×òî æ, èäåì çà þíèòîðîì.
    ai_output(self, hero, "PC_Thief_AFTERTROLL_Info_11_02"); //ß ïðèñìîòðþ çà òåì, ÷òîáû áîëüøå íå áûëî íèêàêèõ íåïðèÿòíûõ ñþðïðèçîâ.
    b_logentry(ch3_trollcanyon, ch3_trollcanyon_5);
    ai_stopprocessinfos(self);
};

instance pc_thief_wheel(c_info) {
    npc = pc_thief /*8001*/;
    condition = pc_thief_wheel_condition;
    information = pc_thief_wheel_info;
    important = true;
};

func int pc_thief_wheel_condition() {
    if (npc_knowsinfo(hero, pc_thief_aftertroll /*11880*/) && (troll_wheel == 1)) {
        return true;
    };
};

func void pc_thief_wheel_info() {
    ai_output(self, hero, "PC_Thief_WHEEL_Info_11_01"); //Ïîõîæå, çàêëèíèëî.
    ai_output(self, hero, "PC_Thief_WHEEL_Info_11_02"); //Äàé-êà ïîñìîòðþ, ìîæåò áûòü, óäàñòñÿ èñïðàâèòü.
    ai_stopprocessinfos(self);
    ai_gotowp(self, "LOCATION_12_14_WHEEL");
    ai_aligntowp(self);
    ai_playani(self, "T_PLUNDER");
};

instance pc_thief_fixwheel(c_info) {
    npc = pc_thief /*8001*/;
    condition = pc_thief_fixwheel_condition;
    information = pc_thief_fixwheel_info;
    important = true;
};

func int pc_thief_fixwheel_condition() {
    if (npc_knowsinfo(hero, pc_thief_wheel /*11884*/)) {
        return true;
    };
};

func void pc_thief_fixwheel_info() {
    ai_output(self, hero, "PC_Thief_FIXWHEEL_Info_11_01"); //Âîò è çàðàáîòàëà.
    troll_wheel = 2;
    b_logentry(ch3_trollcanyon, ch3_trollcanyon_6);
    npc_exchangeroutine(self, "WaitAtFocus");
    ai_stopprocessinfos(self);
};

instance pc_thief_waitatfocus(c_info) {
    npc = pc_thief /*8001*/;
    condition = pc_thief_waitatfocus_condition;
    information = pc_thief_waitatfocus_info;
    important = true;
};

func int pc_thief_waitatfocus_condition() {
    if (npc_knowsinfo(hero, pc_thief_fixwheel /*11887*/) && (npc_getdisttowp(hero, "LOCATION_12_03") < 1000)) {
        return true;
    };
};

func void pc_thief_waitatfocus_info() {
    ai_gotonpc(self, hero);
    ai_output(self, hero, "PC_Thief_WAITATFOCUS_Info_11_01"); //Çàáåðè þíèòîð. ß áóäó æäàòü òåáÿ çäåñü.
    ai_stopprocessinfos(self);
};

instance pc_thief_gotit(c_info) {
    npc = pc_thief /*8001*/;
    condition = pc_thief_gotit_condition;
    information = pc_thief_gotit_info;
    important = true;
};

func int pc_thief_gotit_condition() {
    if (npc_hasitems(hero, focus_2)) {
        return true;
    };
};

func void pc_thief_gotit_info() {
    ai_gotonpc(self, hero);
    ai_output(self, hero, "PC_Thief_GOTIT_Info_11_01"); //Íàøåë þíèòîð? Ìîëîäåö.
    ai_output(self, hero, "PC_Thief_GOTIT_Info_11_02"); //Äóìàþ, òåïåðü ìíå ïîðà âîçâðàùàòüñÿ â Ñòàðûé Ëàãåðü. Óäà÷è òåáå!
    ai_output(hero, self, "PC_Thief_GOTIT_Info_15_03"); //Áóäü îñòîðîæåí.
    ai_output(self, hero, "PC_Thief_GOTIT_Info_11_04"); //Ìû åùå âñòðåòèìñÿ.
    b_logentry(ch3_trollcanyon, ch3_trollcanyon_7);
    b_logentry(ch3_trollcanyon, ch3_trollcanyon_8);
    self.aivar[36] = false;
    npc_exchangeroutine(self, "start");
};

instance info_diego_ocwarn(c_info) {
    npc = pc_thief /*8001*/;
    condition = info_diego_ocwarn_condition;
    information = info_diego_ocwarn_info;
    important = true;
};

func int info_diego_ocwarn_condition() {
    if (kapitel == 4) {
        return true;
    };
};

func void info_diego_ocwarn_info() {
    ai_gotonpc(self, hero);
    ai_output(self, hero, "Info_Diego_OCWARN_11_01"); //Ýé... Ò-ñññ... Òèøå!
    if (npc_knowsinfo(hero, info_milten_ocwarn /*11618*/)) {
        ai_output(hero, self, "Info_Diego_OCWARN_15_02"); //Ïðèâåò, Äèåãî! ß âñòðåòèë Ìèëüòåíà íà äðóãîì êîíöå Ëàãåðÿ.
        ai_output(self, hero, "Info_Diego_OCWARN_11_03"); //Òîãäà òû óæå çíàåøü, ÷òî çäåñü ïðîèçîøëî.
        ai_output(self, hero, "Info_Diego_OCWARN_11_04"); //À ñëûøàë ëè òû î ãîòîâÿùåìñÿ íàïàäåíèè íà Ñâîáîäíóþ Øàõòó?
    }
    else {
        ai_output(hero, self, "Info_Diego_OCWARN_15_05"); //Ïðèâåò, Äèåãî! ×òî ýòî çà èãðà â ïðÿòêè?
        ai_output(self, hero, "Info_Diego_OCWARN_11_06"); //Òû ðàçâå åùå íå ñëûøàë?
        ai_output(hero, self, "Info_Diego_OCWARN_15_07"); //Ñëûøàë ÷òî?
        ai_output(self, hero, "Info_Diego_OCWARN_11_08"); //Ñòàðàÿ Øàõòà îáðóøèëàñü, ïåðåáèëè âñåõ ìàãîâ Îãíÿ, è ãîòîâèòñÿ íàïàäåíèå íà Ñâîáîäíóþ Øàõòó.
        ai_output(hero, self, "Info_Diego_OCWARN_15_09"); //×ÒÎÎÎ??? Î ÷åì òû ãîâîðèøü?
    };
};

instance info_diego_ocmine(c_info) {
    npc = pc_thief /*8001*/;
    nr = 0;
    condition = info_diego_ocmine_condition;
    information = info_diego_ocmine_info;
    description = "Êàê ìîãëà îáðóøèòüñÿ Ñòàðàÿ Øàõòà?";
};

func int info_diego_ocmine_condition() {
    if (npc_knowsinfo(hero, info_diego_ocwarn /*11896*/)) {
        return true;
    };
};

func void info_diego_ocmine_info() {
    ai_output(hero, self, "Info_Diego_OCMINE_15_01"); //Êàê ìîãëà îáðóøèòüñÿ Ñòàðàÿ Øàõòà?
    ai_output(self, hero, "Info_Diego_OCMINE_11_02"); //Îäèí èç óöåëåâøèõ ðóäîêîïîâ ãîâîðèò, ÷òî îíè íàòêíóëèñü íà ïîäçåìíóþ ðåêó íà íèæíåì óðîâíå.
    ai_output(self, hero, "Info_Diego_OCMINE_11_03"); //Êîãäà âîäà õëûíóëà â øàõòó, ñëîìàëàñü îäíà èç ïîäïîðîê, è âåðõíèé óðîâåíü îáðóøèëñÿ.
    ai_output(self, hero, "Info_Diego_OCMINE_11_04"); //Óöåëåëà ëèøü ãîðñòêà ëþäåé.
};

instance info_diego_ockdf(c_info) {
    npc = pc_thief /*8001*/;
    nr = 0;
    condition = info_diego_ockdf_condition;
    information = info_diego_ockdf_info;
    description = "×òî ñëó÷èëîñü ñ ìàãàìè Îãíÿ?";
};

func int info_diego_ockdf_condition() {
    if (npc_knowsinfo(hero, info_diego_ocwarn /*11896*/) && (!npc_knowsinfo(hero, info_diego_ocfm /*11905*/))) {
        return true;
    };
};

func void info_diego_ockdf_info() {
    ai_output(hero, self, "Info_Diego_OCKDF_15_01"); //×òî ñëó÷èëîñü ñ ìàãàìè Îãíÿ?
    ai_output(self, hero, "Info_Diego_OCKDF_11_02"); //Ýòî äîëãàÿ èñòîðèÿ.
};

instance info_diego_ocfm(c_info) {
    npc = pc_thief /*8001*/;
    nr = 0;
    condition = info_diego_ocfm_condition;
    information = info_diego_ocfm_info;
    description = "Íàïàäåíèå íà Ñâîáîäíóþ Øàõòó?";
};

func int info_diego_ocfm_condition() {
    if (npc_knowsinfo(hero, info_diego_ocwarn /*11896*/) && (!npc_knowsinfo(hero, info_diego_ockdf /*11902*/))) {
        return true;
    };
};

func void info_diego_ocfm_info() {
    ai_output(hero, self, "Info_Diego_OCFM_15_01"); //Íàïàäåíèå íà Ñâîáîäíóþ Øàõòó?
    ai_output(self, hero, "Info_Diego_OCFM_11_02"); //Ýòî äîëãàÿ èñòîðèÿ.
};

instance info_diego_ocstory(c_info) {
    npc = pc_thief /*8001*/;
    nr = 0;
    condition = info_diego_ocstory_condition;
    information = info_diego_ocstory_info;
    description = "Ïðîñòî ñêàæè!";
};

func int info_diego_ocstory_condition() {
    if (npc_knowsinfo(hero, info_diego_ocfm /*11905*/) || npc_knowsinfo(hero, info_diego_ockdf /*11902*/)) {
        return true;
    };
};

func void info_diego_ocstory_info() {
    ai_output(hero, self, "Info_Diego_OCSTORY_15_01"); //Ðàññêàæè ìíå. Ýòî óæå íå ïåðâàÿ äîëãàÿ èñòîðèÿ èç òåõ, ÷òî ìíå ïðèõîäèëîñü ñëûøàòü.
    ai_output(self, hero, "Info_Diego_OCSTORY_11_02"); //Íó, õîðîøî. Ïî ñ÷àñòüþ ÿ îêàçàëñÿ â îñîáíÿêå Áàðîíîâ, êîãäà ïðèøëî ñîîáùåíèå î òîì, ÷òî øàõòà îáðóøèëàñü.
    ai_output(self, hero, "Info_Diego_OCSTORY_11_03"); //Êîãäà Ãîìåç óñëûøàë ýòî, îí ÷óòü ñ óìà íå ñîøåë.
    ai_output(hero, self, "Info_Diego_OCSTORY_15_04"); //Åùå áû. Òîò, êòî êîíòðîëèðóåò äîáû÷ó ðóäû, ïî ñóòè âëàäååò âñåé êîëîíèåé.
    ai_output(self, hero, "Info_Diego_OCSTORY_11_05"); //Âåðíî. Ïîñêîëüêó èñòî÷íèê äîõîäà èññÿê, òîâàðû èç âíåøíåãî ìèðà òîæå ïåðåñòàíóò ïîñòóïàòü.
    ai_output(self, hero, "Info_Diego_OCSTORY_11_06"); //Åñëè îí áûñòðî íå íàéäåò íîâûé èñòî÷íèê äîõîäà,  íà íåãî íèêòî íå áóäåò ðàáîòàòü.
    ai_output(hero, self, "Info_Diego_OCSTORY_15_07"); //È çà÷åì ïîíàäîáèëîñü íàïàäàòü íà Ñâîáîäíóþ Øàõòó?
    ai_output(self, hero, "Info_Diego_OCSTORY_11_08"); //Åñëè áûòü ÷åñòíûì, ýòî åäèíñòâåííû øàíñ Ãîìåçà óäåðæàòü âëàñòü â ñâîèõ ðóêàõ.
    ai_output(self, hero, "Info_Diego_OCSTORY_11_09"); //Ïàðó ÷àñîâ íàçàä ê Ñâîáîäíîé Øàõòå îòïðàâèëè äâà äåñÿòêà ñòðàæíèêîâ.
    b_story_fmtaken();
};

instance info_diego_ocwarnnc(c_info) {
    npc = pc_thief /*8001*/;
    nr = 0;
    condition = info_diego_ocwarnnc_condition;
    information = info_diego_ocwarnnc_info;
    description = "Ýòî êàêîå-òî áåçóìèå! ß äîëæåí ïðåäóïðåäèòü Íîâûé Ëàãåðü!";
};

func int info_diego_ocwarnnc_condition() {
    if (npc_knowsinfo(hero, info_diego_ocstory /*11908*/)) {
        return true;
    };
};

func void info_diego_ocwarnnc_info() {
    ai_output(hero, self, "Info_Diego_OCWARNNC_15_01"); //Ýòî êàêîå-òî áåçóìèå! ß äîëæåí ïðåäóïðåäèòü Íîâûé Ëàãåðü!
    ai_output(self, hero, "Info_Diego_OCWARNNC_11_02"); //Òîãäà òåáå íóæíî òîðîïèòüñÿ! Îíè óæå ïî÷òè äîáðàëèñü äî Ñâîáîäíîé Øàõòû.
    ai_output(hero, self, "Info_Diego_OCWARNNC_15_03"); //Íî èì íå ïðîðâàòüñÿ ÷åðåç óêðåïëåíèÿ Íîâîãî Ëàãåðÿ!
    ai_output(self, hero, "Info_Diego_OCWARNNC_11_04"); //À ýòî èì è íå íóæíî. Íåñêîëüêî ìåñÿöåâ íàçàä îíè íàøëè ïóòü, êîòîðûé âåäåò ÷åðåç ãîðû ïðÿìî ê Ñâîáîäíîé Øàõòå, - è íèêòî î íåì íå çíàåò.
};

instance info_diego_ocguards(c_info) {
    npc = pc_thief /*8001*/;
    nr = 0;
    condition = info_diego_ocguards_condition;
    information = info_diego_ocguards_info;
    description = "Âîðîòà çàêðûòû, è ïåðåä íèìè ñòîÿò ñòðàæíèêè.";
};

func int info_diego_ocguards_condition() {
    if (npc_knowsinfo(hero, info_diego_ocstory /*11908*/)) {
        return true;
    };
};

func void info_diego_ocguards_info() {
    ai_output(hero, self, "Info_Diego_OCGUARDS_15_01"); //Âîðîòà çàêðûòû, è ïåðåä íèìè ñòîÿò ñòðàæíèêè.
    ai_output(self, hero, "Info_Diego_OCGUARDS_11_02"); //Äåðæèñü îò íèõ ïîäàëüøå. Îíè óáüþò âñÿêîãî, êòî ïîäîéäåò ê Ëàãåðþ.
    ai_output(self, hero, "Info_Diego_OCGUARDS_11_03"); //Îíè áîÿòñÿ, ÷òî êòî-íèáóäü çàõî÷åò îòîìñòèòü çà íàïàäåíèå íà Ñâîáîäíóþ Øàõòó.
};

instance info_diego_ocmurder(c_info) {
    npc = pc_thief /*8001*/;
    nr = 0;
    condition = info_diego_ocmurder_condition;
    information = info_diego_ocmurder_info;
    description = "Íî ÷òî ñëó÷èëîñü ñ ìàãàìè Îãíÿ?";
};

func int info_diego_ocmurder_condition() {
    if (npc_knowsinfo(hero, info_diego_ocstory /*11908*/)) {
        return true;
    };
};

func void info_diego_ocmurder_info() {
    ai_output(hero, self, "Info_Diego_OCMURDER_15_01"); //Íî ÷òî ñëó÷èëîñü ñ ìàãàìè Îãíÿ?
    ai_output(self, hero, "Info_Diego_OCMURDER_11_02"); //Êîððèñòî è îñòàëüíûå ìàãè îñòàâàëèñü åäèíñòâåííûìè â Ëàãåðå, êòî ñîõðàíèë ðàññóäîê â ïîäîáíîé ñèòóàöèè.
    ai_output(self, hero, "Info_Diego_OCMURDER_11_03"); //Îíè çàïðåòèëè íàïàäàòü íà Ñâîáîäíóþ Øàõòó è ïîòðåáîâàëè ñâÿçàòüñÿ ñ äâóìÿ îñòàëüíûìè Ëàãåðÿìè.
    ai_output(hero, self, "Info_Diego_OCMURDER_15_04"); //Îíè ÇÀÏÐÅÒÈËÈ Ãîìåçó íàïàäàòü íà Ñâîáîäíóþ Øàõòó?
    ai_output(self, hero, "Info_Diego_OCMURDER_11_05"); //Íó äà. Êîððèñòî íå äîëæåí áûë áûòü íàñòîëüêî ñàìîóâåðåííûì. Ãîìåç ïåðåñòàë äîâåðÿòü ìàãàì è ïðåäàòåëüñêè óáèë èõ âñåõ.
};

instance info_diego_ocretreat(c_info) {
    npc = pc_thief /*8001*/;
    nr = 0;
    condition = info_diego_ocretreat_condition;
    information = info_diego_ocretreat_info;
    description = "×òî âû ñ Ìèëüòåíîì òåïåðü ñîáèðàåòåñü äåëàòü?";
};

func int info_diego_ocretreat_condition() {
    if (npc_knowsinfo(hero, info_diego_ocmurder /*11917*/)) {
        return true;
    };
};

func void info_diego_ocretreat_info() {
    ai_output(hero, self, "Info_Diego_OCRETREAT_15_01"); //×òî âû ñ Ìèëüòåíîì òåïåðü ñîáèðàåòåñü äåëàòü?
    ai_output(self, hero, "Info_Diego_OCRETREAT_11_02"); //Ìû åùå íåìíîãî ïîáóäåì çäåñü. Íóæíî ïðåäóïðåäèòü íàøèõ äðóçåé, ÷òîáû îíè íå íàòêíóëèñü íåíàðîêîì íà ñòðàæó.
    ai_output(self, hero, "Info_Diego_OCRETREAT_11_03"); //Òû áû ìîã îêàçàòü íàì óñëóãó.
};

instance info_diego_ocfavor(c_info) {
    npc = pc_thief /*8001*/;
    nr = 0;
    condition = info_diego_ocfavor_condition;
    information = info_diego_ocfavor_info;
    description = "Ñ÷èòàé, ÷òî âñå óæå ñäåëàíî! ×òî òåáå íóæíî?";
};

func int info_diego_ocfavor_condition() {
    if (npc_knowsinfo(hero, info_diego_ocretreat /*11920*/)) {
        return true;
    };
};

func void info_diego_ocfavor_info() {
    ai_output(hero, self, "Info_Diego_OCFAVOR_15_01"); //Ñ÷èòàé, ÷òî âñå óæå ñäåëàíî! ×òî òåáå íóæíî?
    ai_output(self, hero, "Info_Diego_OCFAVOR_11_02"); //Ðàçûùè Ëåñòåðà è Ãîðíà. Íóæíî ðàññêàçàòü èì î òîì, ÷òî çäåñü ïðîèñõîäèò.
    ai_output(self, hero, "Info_Diego_OCFAVOR_11_03"); //Ñêàæè èì, ÷òî ìû ÷åòâåðî âñòðå÷àåìñÿ òàì æå, ãäå è âñåãäà.
    ai_output(hero, self, "Info_Diego_OCFAVOR_15_04"); //Åñëè ÿ íàéäó èõ ðàíüøå, ÷åì òû, ÿ ïðåäóïðåæó èõ è îòïðàâëþ âàì íàâñòðå÷ó.
    ai_output(self, hero, "Info_Diego_OCFAVOR_11_05"); //Ñïàñèáî, äðóã! Òû îòëè÷íûé ïàðåíü! Íàäåþñü, ìû åùå âñòðåòèìñÿ.
    log_createtopic(ch4_4friends, log_mission);
    log_settopicstatus(ch4_4friends, log_running);
    b_logentry(ch4_4friends, ch4_4friends_3);
};

instance dia_senyan_exit(c_info) {
    npc = sfb_1000_senyan /*8012*/;
    nr = 999;
    condition = dia_senyan_exit_condition;
    information = dia_senyan_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_senyan_exit_condition() {
    return 1;
};

func void dia_senyan_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_senyan_hello(c_info) {
    npc = sfb_1000_senyan /*8012*/;
    nr = 1;
    condition = dia_senyan_hello_condition;
    information = dia_senyan_hello_info;
    description = "Òû ñî Ñâîáîäíîé Øàõòû, âåðíî?";
};

func int dia_senyan_hello_condition() {
    return 1;
};

func void dia_senyan_hello_info() {
    ai_output(other, self, "DIA_Senyan_Hello_15_00"); //Òû ñî Ñâîáîäíîé Øàõòû, âåðíî?
    ai_output(self, other, "DIA_Senyan_Hello_01_01"); //Âåðíî. Êàê òû óçíàë?
    ai_stopprocessinfos(self);
};

instance dia_senyan_justtalk(c_info) {
    npc = sfb_1000_senyan /*8012*/;
    nr = 1;
    condition = dia_senyan_justtalk_condition;
    information = dia_senyan_justtalk_info;
    permanent = true;
    description = "ß õîòåë áû ïîãîâîðèòü ñ òîáîé.";
};

func int dia_senyan_justtalk_condition() {
    if (npc_knowsinfo(hero, dia_senyan_hello /*11929*/)) {
        return 1;
    };
};

func void dia_senyan_justtalk_info() {
    ai_output(other, self, "DIA_Senyan_JustTalk_15_00"); //ß õîòåë áû ïîãîâîðèòü ñ òîáîé.
    ai_output(self, other, "DIA_Senyan_JustTalk_01_01"); //ß çäåñü íå äëÿ òîãî, ÷òîáû ðàçãîâàðèâàòü.
    ai_stopprocessinfos(self);
};

instance dia_sfb_1001_exit(c_info) {
    npc = sfb_1001_schuerfer /*8014*/;
    nr = 999;
    condition = dia_sfb_1001_exit_condition;
    information = dia_sfb_1001_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_sfb_1001_exit_condition() {
    return 1;
};

func void dia_sfb_1001_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_sfb_1001_hello(c_info) {
    npc = sfb_1001_schuerfer /*8014*/;
    nr = 1;
    condition = dia_sfb_1001_hello_condition;
    information = dia_sfb_1001_hello_info;
    permanent = true;
    description = "Êàê äåëà íà øàõòå?";
};

func int dia_sfb_1001_hello_condition() {
    return 1;
};

func void dia_sfb_1001_hello_info() {
    ai_output(other, self, "DIA_Sfb_1001_Hello_15_00"); //Êàê äåëà íà øàõòå?
    ai_output(self, other, "DIA_Sfb_1001_Hello_02_01"); //Ñàìîå ñëîæíîå ïîçàäè. Åùå ïàðà íåäåëü, è ó íàñ áóäåò äîñòàòî÷íî ðóäû.
    ai_stopprocessinfos(self);
};

instance info_swiney_exit(c_info) {
    npc = sfb_1037_swiney /*8030*/;
    nr = 999;
    condition = info_swiney_exit_condition;
    information = info_swiney_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_swiney_exit_condition() {
    return 1;
};

func void info_swiney_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_swiney_hello(c_info) {
    npc = sfb_1037_swiney /*8030*/;
    nr = 1;
    condition = info_swiney_hello_condition;
    information = info_swiney_hello_info;
    description = "Êàê òåáÿ çîâóò?";
};

func int info_swiney_hello_condition() {
    return 1;
};

func void info_swiney_hello_info() {
    ai_output(other, self, "Info_Swiney_Hello_15_00"); //Êòî òû?
    ai_output(self, other, "Info_Swiney_Hello_09_01"); //ß ëó÷øèé ñïåöèàëèñò-ïðîõîä÷èê â ýòîé ÷åðòîâîé êîëîíèè, ìîé ìàëü÷èê.
    ai_output(self, other, "Info_Swiney_Hello_09_02"); //Òîëüêî áëàãîäàðÿ ìíå ïîëîâèíà ïàðíåé òàì, â øàõòå, íå ïîãèáëà ïîä çàâàëàìè. Îíè ñëèøêîì ãëóïû, ÷òîáû çíàòü, ãäå íå ñòîèò ðàçìàõèâàòü êèðêîé.
};

instance info_swiney_schuerfer(c_info) {
    npc = sfb_1037_swiney /*8030*/;
    nr = 1;
    condition = info_swiney_schuerfer_condition;
    information = info_swiney_schuerfer_info;
    description = "ß õî÷ó ñòàòü ðóäîêîïîì!";
};

func int info_swiney_schuerfer_condition() {
    if (npc_knowsinfo(hero, info_swiney_hello /*11944*/)) {
        return 1;
    };
};

func void info_swiney_schuerfer_info() {
    ai_output(other, self, "Info_Swiney_Schuerfer_15_00"); //ß õî÷ó ñòàòü ðóäîêîïîì!
    ai_output(self, other, "Info_Swiney_Schuerfer_09_01"); //Â ñàìîì äåëå? Òîëüêî íå äóìàé, ÷òî ýòî òàêîå óæ òåïëîå ìåñòå÷êî. Òðè ïîðöèè ðèñà â äåíü, îñòàëüíûå ïëþñû òåáå ïðèäåòñÿ èñêàòü ñàìîìó.
    ai_output(self, other, "Info_Swiney_Schuerfer_09_02"); //Òû âîîáùå çíàåøü, ïî÷åìó ìû ýòèì çàíèìàåìñÿ? Ìû äåëàåì ýòó ðàáîòó äëÿ òîãî, ÷òîáû îäíàæäû âûéòè íà ñâîáîäó.
    ai_output(self, other, "Info_Swiney_Schuerfer_09_03"); //Âñÿ äîáûòàÿ ðóäà ñîáèðàåòñÿ â îäíó áîëüøóþ æåëåçíóþ ãîðó. Ðàç â ìåñÿö êàæäûé èç ðàáî÷èõ ïîëó÷àåò ïî 50 êóñêîâ, ÷òîáû îòòÿíóòüñÿ ïî ïîëíîé.
    ai_output(self, other, "Info_Swiney_Schuerfer_09_04"); //Ýòî îñíîâíîå, ÷òî òåáå íóæíî çíàòü.
    ai_output(self, other, "Info_Swiney_Schuerfer_09_05"); //Ó òåáÿ åñòü õîòü êàêîé-íèáóäü îïûò â òàêîãî ðîäà äåëàõ?
    info_clearchoices(info_swiney_schuerfer /*11947*/);
    info_addchoice(info_swiney_schuerfer /*11947*/, "Íåò.", info_swiney_schuerfer_nein);
    info_addchoice(info_swiney_schuerfer /*11947*/, "Äà.", info_swiney_schuerfer_ja);
};

func void info_swiney_schuerfer_ja() {
    ai_output(other, self, "Info_Swiney_Schuerfer_Ja_15_00"); //Äà.
    ai_output(self, other, "Info_Swiney_Schuerfer_Ja_09_01"); //Õîðîøî. Òîãäà òû ñàì çíàåøü, ÷åãî íóæíî îñòåðåãàòüñÿ. Âîò òâîÿ ðàáî÷àÿ îäåæäà. Êèðêó òåáå ïðèäåòñÿ íàéòè ñàìîìó. Ïðèÿòíîãî îòäûõà!
    createinvitem(hero, sfb_armor_l);
    createinvitem(self, itamarrow);
    b_giveinvitems(self, hero, itamarrow /*4894*/, 1);
    npc_removeinvitem(hero, itamarrow /*4894*/);
    ai_equipbestarmor(hero);
    info_clearchoices(info_swiney_schuerfer /*11947*/);
};

func void info_swiney_schuerfer_nein() {
    ai_output(other, self, "Info_Swiney_Schuerfer_Nein_15_00"); //Íåò.
    ai_output(self, other, "Info_Swiney_Schuerfer_Nein_09_01"); //Ðàçóìååòñÿ, íåò! Íó ïî÷åìó âñåãäà ÿ? Ëàäíî. Ñëóøàé âíèìàòåëüíî. Òû áåðåøü ðàáî÷óþ îäåæäó è íàäåâàåøü åå - ïðÿìî çäåñü.
    createinvitem(hero, sfb_armor_l);
    createinvitem(self, itamarrow);
    b_giveinvitems(self, hero, itamarrow /*4894*/, 1);
    npc_removeinvitem(hero, itamarrow /*4894*/);
    ai_equipbestarmor(hero);
    ai_output(self, other, "Info_Swiney_Schuerfer_Nein_09_02"); //Áåç ýòîãî òû îñòàíåøüñÿ êàëåêîé íà âñþ æèçíü, åñëè êóñîê ïîðîäû ñâàëèòñÿ òåáå, ê ïðèìåðó, íà íîãó. È ïîëüçû îò òåáÿ áóäåò êóäà êàê ìåíüøå.
    ai_output(self, other, "Info_Swiney_Schuerfer_Nein_09_03"); //Çäåñü ãäå-òî íåïîäàëåêó âàëÿëàñü êèðêà.
    ai_output(self, other, "Info_Swiney_Schuerfer_Nein_09_04"); //Ïðàâäà, ñ íåé òû ìíîãî íå íàðàáîòàåøü, òàê ÷òî...
    info_clearchoices(info_swiney_schuerfer /*11947*/);
};

instance info_swiney_perm(c_info) {
    npc = sfb_1037_swiney /*8030*/;
    nr = 1;
    condition = info_swiney_perm_condition;
    information = info_swiney_perm_info;
    permanent = true;
    description = "Ñêîëüêî ðóäû âû óæå ñîáðàëè?";
};

func int info_swiney_perm_condition() {
    if (npc_knowsinfo(hero, info_swiney_schuerfer /*11947*/)) {
        return 1;
    };
};

func void info_swiney_perm_info() {
    ai_output(other, self, "Info_Swiney_PERM_15_00"); //Ñêîëüêî ðóäû âû óæå ñîáðàëè?
    ai_output(self, other, "Info_Swiney_PERM_09_01"); //Ìàãè ãîâîðÿò, ÷òî íóæíî åùå ñîâñåì íåìíîãî. Ñõîäè â Íîâûé Ëàãåðü è ïîñìîòðè íà æåëåçíóþ ãîðó.
    ai_stopprocessinfos(self);
};

instance sld_700_lee_exit(c_info) {
    npc = sld_700_lee /*8046*/;
    nr = 999;
    condition = sld_700_lee_exit_condition;
    information = sld_700_lee_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int sld_700_lee_exit_condition() {
    return true;
};

func void sld_700_lee_exit_info() {
    ai_stopprocessinfos(self);
};

instance sld_700_lee_greet(c_info) {
    npc = sld_700_lee /*8046*/;
    nr = 1;
    condition = sld_700_lee_greet_condition;
    information = sld_700_lee_greet_info;
    description = "Òû êîìàíäóåøü íàåìíèêàìè, âåðíî?";
};

func int sld_700_lee_greet_condition() {
    return 1;
};

func void sld_700_lee_greet_info() {
    ai_output(other, self, "DIA_Lee_Greet_15_00"); //Òû êîìàíäóåøü íàåìíèêàìè, âåðíî?
    ai_output(self, other, "DIA_Lee_Greet_08_01"); //Âåðíî, ïàðåíü!
};

instance sld_700_lee_define(c_info) {
    npc = sld_700_lee /*8046*/;
    nr = 1;
    condition = sld_700_lee_define_condition;
    information = sld_700_lee_define_info;
    description = "×åì çàíèìàþòñÿ íàåìíèêè íà ñëóæáå ó ìàãîâ?";
};

func int sld_700_lee_define_condition() {
    if (npc_knowsinfo(hero, sld_700_lee_greet /*11958*/)) {
        return 1;
    };
};

func void sld_700_lee_define_info() {
    ai_output(other, self, "DIA_Lee_Define_15_00"); //×åì çàíèìàþòñÿ íàåìíèêè íà ñëóæáå ó ìàãîâ?
    ai_output(self, other, "DIA_Lee_Define_08_01"); //Âñå î÷åíü ïðîñòî. Íàøà çàäà÷à: îõðàíÿòü ðóäó è çàùèùàòü ìàãîâ.
    ai_output(self, other, "DIA_Lee_Define_08_02"); //Èíîãäà ìàãè äàþò êîìó-òî èç íàøèõ îñîáîå çàäàíèå.
};

instance sld_700_lee_mitmachen(c_info) {
    npc = sld_700_lee /*8046*/;
    nr = 2;
    condition = sld_700_lee_mitmachen_condition;
    information = sld_700_lee_mitmachen_info;
    description = "ß õî÷ó ïðèñîåäèíèòüñÿ ê âàì!";
};

func int sld_700_lee_mitmachen_condition() {
    if ((npc_knowsinfo(hero, sld_700_lee_greet /*11958*/) && (npc_gettrueguild(hero) == gil_none)) && (oldheroguild == 0)) {
        return 1;
    };
};

func void sld_700_lee_mitmachen_info() {
    ai_output(other, self, "DIA_Lee_Mitmachen_15_00"); //ß õî÷ó ïðèñîåäèíèòüñÿ ê âàì!
    ai_output(self, other, "DIA_Lee_Mitmachen_08_01"); //Íàãëîñòè òåáå íå çàíèìàòü? Òû ÷òî æå, äóìàåøü, ÿ ïðèíèìàþ ëþáîãî, êòî îá ýòîì ïîïðîñèò?
    ai_output(self, other, "DIA_Lee_Mitmachen_08_02"); //Ïîæèâè â Ëàãåðå, à òàì ïîñìîòðèì. ß áóäó ïðèãëÿäûâàòü çà òîáîé!
};

var int lee_sldpossible;

instance sld_700_lee_nowready(c_info) {
    npc = sld_700_lee /*8046*/;
    nr = 700;
    condition = sld_700_lee_nowready_condition;
    information = sld_700_lee_nowready_info;
    permanent = true;
    description = "ß õî÷ó ñòàòü íàåìíèêîì íà ñëóæáå ó ìàãîâ.";
};

func int sld_700_lee_nowready_condition() {
    if ((npc_gettrueguild(hero) == gil_org) && (npc_knowsinfo(hero, sld_700_lee_mitmachen /*11964*/) || (hero.level >= 10))) {
        return 1;
    };
};

func void sld_700_lee_nowready_info() {
    ai_output(other, self, "DIA_Lee_NowReady_15_00"); //ß õî÷ó ñòàòü íàåìíèêîì íà ñëóæáå ó ìàãîâ. Òåïåðü òû ãîòîâ ïðèíÿòü ìåíÿ?
    if (corkalom_bringmcqballs == log_success) {
        ai_output(self, other, "Sld_700_Lee_BECOMESLD_Info_08_01"); //Òî, ÷òî òû ñäåëàë äëÿ ëþäåé â Ñòàðîé Øàõòå, ãîâîðèò ñàìî çà ñåáÿ.
        ai_output(self, other, "Sld_700_Lee_BECOMESLD_Info_08_02"); //ß ñ ðàäîñòüþ ïîçâîëþ òåáå ïðèñîåäèíèòüñÿ ê íàì.
        if (hero.level < 10) {
            ai_output(self, other, "Sld_700_Lee_BECOMESLD_Info_08_03"); //Òû åùå íå ãîòîâ ñòàòü íàåìíèêîì. Òåáå íóæíî íàáðàòüñÿ îïûòà.
            ai_stopprocessinfos(self);
            b_printguildcondition(10);
        }
        else {
            if (hero.level >= 10) {
                ai_output(self, other, "Sld_700_Lee_BECOMESLD_Info_08_04"); //ß äàì òåáå øàíñ. ×òî ñêàæåøü?
                lee_sldpossible = true;
            };
        };
    }
    else if (hero.level < 10) {
        ai_output(self, other, "DIA_Lee_NowReady_08_01"); //Ó òåáÿ åùå íåäîñòàòî÷íî îïûòà. Ñîâåðøåíñòâóé ñâîè íàâûêè.
        b_printguildcondition(10);
    }
    else {
        if (hero.level >= 10) {
            ai_output(self, other, "Sld_700_Lee_BECOMESLD_Info_08_04"); //ß äàì òåáå øàíñ. ×òî ñêàæåøü?
            lee_sldpossible = true;
        };
    };
};

instance sld_700_lee_becomesldnow(c_info) {
    npc = sld_700_lee /*8046*/;
    nr = 0;
    condition = sld_700_lee_becomesldnow_condition;
    information = sld_700_lee_becomesldnow_info;
    description = "ß õî÷ó ñòàòü íàåìíèêîì.";
};

func int sld_700_lee_becomesldnow_condition() {
    if ((lee_sldpossible == true) && (hero.level >= 10)) {
        return true;
    };
};

func void sld_700_lee_becomesldnow_info() {
    ai_output(other, self, "Sld_700_Lee_BECOMESLDNOW_Info_15_01"); //ß õî÷ó ñòàòü íàåìíèêîì.
    ai_output(self, other, "Sld_700_Lee_BECOMESLDNOW_Info_08_02"); //Ïðàâèëüíûé âûáð. Òû îá ýòîì íå ïîæàëååøü.
    ai_output(self, other, "Sld_700_Lee_BECOMESLDNOW_Info_08_03"); //Îòâåòü ìíå âîò íà êàêîé âîïðîñ. Ïî÷åìó òû ðåøèë ïðèñîåäèíèòüñÿ ê íàì, à íå ê Ñòàðîìó Ëàãåðþ èëè ê Ëàãåðþ Áðàòñòâà?
    log_createtopic(ge_becomemercenary, log_note);
    b_logentry(ge_becomemercenary, ge_becomemercenary_2);
    info_clearchoices(sld_700_lee_becomesldnow /*11971*/);
    info_addchoice(sld_700_lee_becomesldnow /*11971*/, "Äðóãèå Ëàãåðÿ òîãî íå ñòîÿò.", sld_700_lee_becomesldnow_noother);
    info_addchoice(sld_700_lee_becomesldnow /*11971*/, "ß ñ ñàìîãî íà÷àëà æàæäàë ñâîáîäû.", sld_700_lee_becomesldnow_freedom);
    info_addchoice(sld_700_lee_becomesldnow /*11971*/, "Ïðîñòî òàê ïîëó÷èëîñü.", sld_700_lee_becomesldnow_justbecause);
};

func void sld_700_lee_becomesldnow_noother() {
    ai_output(other, self, "Sld_700_Lee_BECOMESLDNOW_NOOTHER_15_01"); //Äðóãèå Ëàãåðÿ íè÷åãî íå ñòîÿò.
    ai_output(self, other, "Sld_700_Lee_BECOMESLDNOW_NOOTHER_08_02"); //Åäèíñòâåííîå, ÷òî õîòü ÷åãî-òî çäåñü ñòîèò - ýòî íàäåæäà íà ñâîáîäó. Äîáðî ïîæàëîâàòü â íàøè ðÿäû, ÍÀÅÌÍÈÊ!
    createinvitem(self, sld_armor_l);
    b_giveinvitems(self, hero, sld_armor_l /*4135*/, 1);
    ai_equipbestarmor(hero);
    npc_settrueguild(hero, gil_sld);
    hero.guild = gil_sld;
    ai_stopprocessinfos(self);
};

func void sld_700_lee_becomesldnow_freedom() {
    ai_output(other, self, "Sld_700_Lee_BECOMESLDNOW_FREEDOM_15_01"); //ß ñ ñàìîãî íà÷àëà æàæäàë ñâîáîäû.
    ai_output(self, other, "Sld_700_Lee_BECOMESLDNOW_FREEDOM_08_02"); //Ìû îòâîþåì åå. Äîáðî ïîæàëîâàòü â íàøè ðÿäû, ÍÀÅÌÍÈÊ!
    createinvitem(self, sld_armor_l);
    b_giveinvitems(self, hero, sld_armor_l /*4135*/, 1);
    ai_equipbestarmor(hero);
    npc_settrueguild(hero, gil_sld);
    hero.guild = gil_sld;
    ai_stopprocessinfos(self);
};

func void sld_700_lee_becomesldnow_justbecause() {
    ai_output(other, self, "Sld_700_Lee_BECOMESLDNOW_JUSTBECAUSE_15_01"); //Ïðîñòî òàê ñëîæèëîñü.
    ai_output(self, other, "Sld_700_Lee_BECOMESLDNOW_JUSTBECAUSE_08_02"); //Íàäåþñü, ÷òî ìû íå çàñòðÿíåì çäåñü íàâå÷íî. Äîáðî ïîæàëîâàòü â íàøè ðÿäû, ÍÀÅÌÍÈÊ!
    createinvitem(self, sld_armor_l);
    b_giveinvitems(self, hero, sld_armor_l /*4135*/, 1);
    ai_equipbestarmor(hero);
    npc_settrueguild(hero, gil_sld);
    hero.guild = gil_sld;
    ai_stopprocessinfos(self);
};

instance sld_700_lee_damnpast(c_info) {
    npc = sld_700_lee /*8046*/;
    condition = sld_700_lee_damnpast_condition;
    information = sld_700_lee_damnpast_info;
    important = true;
};

func int sld_700_lee_damnpast_condition() {
    if (((saturas_bringfoci == 5) && (npc_getdisttonpc(hero, self) < 1000)) && (npc_getdisttowp(self, "NC_DAM") < 1000)) {
        return true;
    };
};

func void sld_700_lee_damnpast_info() {
    var c_npc homer;

    ai_output(self, other, "Sld_700_Lee_DAMNPAST_Info_08_01"); //Áûëè âðåìåíà, êîãäà æèçíü ìîÿ áûëà ñîâñåì äðóãîé.
    ai_output(self, other, "Sld_700_Lee_DAMNPAST_Info_08_02"); //ß áûë îäíèì èç ëó÷øèõ ãåíåðàëîâ â ñòðàíå.
    ai_output(self, other, "Sld_700_Lee_DAMNPAST_Info_08_03"); //Âñþ ñâîþ æèçíü ÿ ñðàæàëñÿ çà ñâîþ ñòðàíó.
    ai_output(self, other, "Sld_700_Lee_DAMNPAST_Info_08_04"); //Êîðîëü ïðèñëóøèâàëñÿ ê ìîèì ñîâåòàì, è çà ýòî çíàòü íå ëþáèëà ìåíÿ. Îíè ïîíèìàëè, ÷òî ÿ ïðåäñòàâëÿþ óãðîçó äëÿ èõ ãðÿçíûõ äåëèøåê.
    ai_output(self, other, "Sld_700_Lee_DAMNPAST_Info_08_05"); //ß íåäîîöåíèë èõ âåðîëîìñòâà. Äëÿ òîãî, ÷òîáû óíè÷òîæèòü ìåíÿ, îíè ïîñìåëè ïîäíÿòü ðóêó íà æåíó êîðîëÿ.
    ai_output(self, other, "Sld_700_Lee_DAMNPAST_Info_08_06"); //ß áûë îáâèíåí â óáèéñòâå, è ó Ðîáàðà ïðîñòî íå îñòàâàëîñü âûáîðà.
    ai_output(self, other, "Sld_700_Lee_DAMNPAST_Info_08_07"); //Òî, ÷òî ÿ ñäåëàë íà áëàãî ñòðàíû, ñïàñëî ìåíÿ îò âèñåëèöû. Íî îíè óêðàëè ó ìåíÿ ñâîáîäó.
    ai_output(self, other, "Sld_700_Lee_DAMNPAST_Info_08_08"); //Íàñòàíåò äåíü, êîãäà ÿ ñêèíó îêîâû. Òîãäà ÿ âåðíóñü è îòîìùó ñâîèì âðàãàì.
    ai_aligntowp(self);
    ai_output(self, other, "Sld_700_Lee_DAMNPAST_Info_08_09"); //ß îòîìùó.
    npc_exchangeroutine(self, "START");
    homer = hlp_getnpc(bau_935_homer);
    npc_exchangeroutine(homer, "START");
    ai_continueroutine(homer);
};

instance sld_700_lee_fmtaken(c_info) {
    npc = sld_700_lee /*8046*/;
    nr = 1;
    condition = sld_700_lee_fmtaken_condition;
    information = sld_700_lee_fmtaken_info;
    permanent = true;
    description = "×òî òû äóìàåøü ïî ïîâîäó øàõòû?";
};

func int sld_700_lee_fmtaken_condition() {
    if (fmtaken) {
        return true;
    };
};

func void sld_700_lee_fmtaken_info() {
    ai_output(other, self, "DIA_Lee_FMTaken_15_00"); //×òî òû äóìàåøü ïî ïîâîäó øàõòû?
    if (lee_freeminereport == 0) {
        ai_output(self, other, "DIA_Lee_FMTaken_08_01"); //Îíè çàøëè ñëèøêîì äàëåêî è åùå ïîæàëåþò îá ýòîì.
    }
    else {
        ai_output(hero, self, "Info_Lee_now_freeminefree_15_01"); //Áîëüøå îíè íå áóäóò óãðîçîé!
        ai_output(self, hero, "Sld_700_Lee_CHANGESIDE_Info_08_02"); //Òû ìíîãîå ñäåëàë äëÿ íàøåãî Ëàãåðÿ. Ìíå íóæíû òàêèå ëþäè, êàê òû.
        ai_output(hero, self, "Info_FreemineOrc_EXIT_15_03"); //Ñïàñèáî. ß ïîéäó.
        ai_output(self, hero, "Info_CorAngar_TELEPORT_08_01"); //Ìèíóòó!
        ai_output(self, hero, "Info_CorAngar_TELEPORT_08_03"); //Ïðèìè ýòó ìàãè÷åñêóþ ðóíó â çíàê áëàãîäàðíîñòè çà òâîè äîáðûå äåëà.
        ai_output(hero, self, "Info_CorAngar_TELEPORT_15_05"); //Áëàãîäàðþ òåáÿ!
        ai_output(hero, self, "Info_Exit_Info_15_01"); //Óâèäèìñÿ.
        b_logentry(ch4_bannedfromoc, ch4_bannedfromoc_12);
        b_giveinvitems(self, other, itarrunefirestorm /*4164*/, 1);
        b_givexp(500);
        lee_freeminereport = 0;
    };
};

instance sld_700_lee_changeside(c_info) {
    npc = sld_700_lee /*8046*/;
    nr = 0;
    condition = sld_700_lee_changeside_condition;
    information = sld_700_lee_changeside_info;
    description = "Ìåíÿ âûãíàëè èç Ñòàðîãî Ëàãåðÿ è ÿ õî÷ó ïðèñîåäèíèòüñÿ ê âàì!";
};

func int sld_700_lee_changeside_condition() {
    if (npc_knowsinfo(hero, kdw_600_saturas_gotolee /*10143*/)) {
        return true;
    };
};

func void sld_700_lee_changeside_info() {
    ai_output(other, self, "Sld_700_Lee_CHANGESIDE_Info_15_01"); //Ìåíÿ âûãíàëè èç Ñòàðîãî Ëàãåðÿ è ÿ õî÷ó ïðèñîåäèíèòüñÿ ê âàì!
    ai_output(self, other, "Sld_700_Lee_CHANGESIDE_Info_08_02"); //Òû ìíîãîå ñäåëàë äëÿ íàøåãî Ëàãåðÿ. Ìíå íóæíû òàêèå ëþäè, êàê òû.
    ai_output(self, other, "Sld_700_Lee_CHANGESIDE_Info_08_03"); //Áóäó êðàòîê. Äîáðî ïîæàëîâàòü â Íîâûé Ëàãåðü, ÍÀÅÌÍÈÊ!
    ai_output(self, other, "Sld_700_Lee_CHANGESIDE_Info_08_04"); //Âîçüìè ýòè äîñïåõè. ß ðàä, ÷òî òû òåïåðü ñ íàìè.
    createinvitem(self, sld_armor_m);
    b_giveinvitems(self, hero, sld_armor_m /*4136*/, 1);
    npc_getinvitembyslot(hero, inv_armor, 2);
    if (hlp_getinstanceid(item) == sld_armor_m /*4136*/) {
        ai_equiparmor(hero, item /*1258*/);
    };
    npc_settrueguild(hero, gil_sld);
    hero.guild = gil_sld;
    b_logentry(ch4_bannedfromoc, ch4_bannedfromoc_13);
    log_createtopic(ge_teachernc, log_note);
    b_logentry(ge_teachernc, ge_teachernc_lee);
};

instance sld_700_lee_armor(c_info) {
    npc = sld_700_lee /*8046*/;
    nr = 0;
    condition = sld_700_lee_armor_condition;
    information = sld_700_lee_armor_info;
    permanent = true;
    description = "Ìíå íóæíû õîðîøèå äîñïåõè.";
};

func int sld_700_lee_armor_condition() {
    if (npc_gettrueguild(hero) == gil_sld) {
        return true;
    };
};

func void sld_700_lee_armor_info() {
    ai_output(other, self, "Sld_700_Lee_ARMOR_Info_15_01"); //Ìíå íóæíû õîðîøèå äîñïåõè.
    ai_output(self, other, "Sld_700_Lee_ARMOR_Info_08_02"); //Òû ïðåæäå äîëæåí èõ çàñëóæèòü. Íå ãîâîðÿ óæå î òîì, ÷òî õîðîøèå äîñïåõè ñòîÿò íåäåøåâî.
    info_clearchoices(sld_700_lee_armor /*11987*/);
    info_addchoice(sld_700_lee_armor /*11987*/, dialog_back, sld_700_lee_armor_back);
    info_addchoice(sld_700_lee_armor /*11987*/, b_buildbuyarmorstring(name_leemercs, value_sld_armor_m), sld_700_lee_armor_m);
    info_addchoice(sld_700_lee_armor /*11987*/, b_buildbuyarmorstring(name_leeheavymercs, value_sld_armor_h), sld_700_lee_armor_h);
};

func void sld_700_lee_armor_back() {
    info_clearchoices(sld_700_lee_armor /*11987*/);
};

func void sld_700_lee_armor_m() {
    ai_output(other, self, "Sld_700_Lee_ARMOR_M_Info_08_01"); //Ìíå íóæíû ñðåäíèå äîñïåõè.
    if (kapitel < 3) {
        ai_output(self, other, "Sld_700_Lee_ARMOR_M_Info_08_02"); //Äëÿ ýòîãî ó òåáÿ åùå íåäîñòàòî÷íî îïûòà. Ïðèõîäè ïîçæå.
    }
    else if (npc_hasitems(hero, itminugget) < value_sld_armor_m) {
        ai_output(self, other, "Sld_700_Lee_ARMOR_M_Info_08_03"); //Áåç ðóäû òû åãî âñå ðàâíî íå ïîëó÷èøü.
    }
    else {
        ai_output(self, other, "Sld_700_Lee_ARMOR_M_Info_08_04"); //Ýòî äîáðûå äîñïåõè. Îíè íàäåæíî çàùèòÿò òåáÿ.
        b_giveinvitems(hero, self, itminugget /*4517*/, value_sld_armor_m);
        createinvitem(hero, sld_armor_m);
        createinvitem(self, itamarrow);
        b_giveinvitems(self, hero, itamarrow /*4894*/, 1);
        npc_removeinvitem(hero, itamarrow /*4894*/);
    };
};

func void sld_700_lee_armor_h() {
    ai_output(other, self, "Sld_700_Lee_ARMOR_H_Info_08_01"); //Ìíå íóæíû òÿæåëûå äîñïåõè.
    if (kapitel < 4) {
        ai_output(self, other, "Sld_700_Lee_ARMOR_H_Info_08_02"); //Äëÿ ýòîãî ó òåáÿ åùå íåäîñòàòî÷íî îïûòà. Ïðèõîäè ïîçæå.
    }
    else if (npc_hasitems(hero, itminugget) < value_sld_armor_h) {
        ai_output(self, other, "Sld_700_Lee_ARMOR_H_Info_08_03"); //Áåç ðóäû òû åãî âñå ðàâíî íå ïîëó÷èøü.
    }
    else {
        ai_output(self, other, "Sld_700_Lee_ARMOR_H_Info_08_04"); //Ýòè äîñïåõè - ëó÷øèå èç òåõ, ÷òî ìîæíî îòûñêàòü âíóòðè Áàðüåðà. È ïîâåðü ìíå, îíè ñòîèò êàæäîãî ïîòðà÷åííîãî ñàìîðîäêà.
        b_giveinvitems(hero, self, itminugget /*4517*/, value_sld_armor_h);
        createinvitem(hero, sld_armor_h);
        createinvitem(self, itamarrow);
        b_giveinvitems(self, hero, itamarrow /*4894*/, 1);
        npc_removeinvitem(hero, itamarrow /*4894*/);
    };
};

instance sld_700_lee_teach(c_info) {
    npc = sld_700_lee /*8046*/;
    nr = 10;
    condition = sld_700_lee_teach_condition;
    information = sld_700_lee_teach_info;
    permanent = true;
    description = "Òû ìîæåøü ÷åìó-íèáóäü íàó÷èòü ìåíÿ?";
};

func int sld_700_lee_teach_condition() {
    if (npc_gettrueguild(hero) == gil_sld) {
        return true;
    };
};

func void sld_700_lee_teach_info() {
    ai_output(other, self, "Sld_700_Lee_Teach_15_00"); //Òû ìîæåøü ÷åìó-íèáóäü íàó÷èòü ìåíÿ?
    ai_output(self, other, "Sld_700_Lee_Teach_08_01"); //ß ìîãó ïîìî÷ü òåáå ñòàòü áîëåå ñèëüíûì è ëîâêèì.
    info_clearchoices(sld_700_lee_teach /*11993*/);
    info_addchoice(sld_700_lee_teach /*11993*/, dialog_back, sld_700_lee_teach_back);
    info_addchoice(sld_700_lee_teach /*11993*/, b_buildlearnstring(name_learnstrength_5, 5 * lpcost_attribute_strength, 0), sld_700_lee_teach_str_5);
    info_addchoice(sld_700_lee_teach /*11993*/, b_buildlearnstring(name_learnstrength_1, lpcost_attribute_strength, 0), sld_700_lee_teach_str_1);
    info_addchoice(sld_700_lee_teach /*11993*/, b_buildlearnstring(name_learndexterity_5, 5 * lpcost_attribute_dexterity, 0), sld_700_lee_teach_dex_5);
    info_addchoice(sld_700_lee_teach /*11993*/, b_buildlearnstring(name_learndexterity_1, lpcost_attribute_dexterity, 0), sld_700_lee_teach_dex_1);
};

func void sld_700_lee_teach_back() {
    info_clearchoices(sld_700_lee_teach /*11993*/);
};

func void sld_700_lee_teach_str_1() {
    b_buyattributepoints(other, atr_strength, lpcost_attribute_strength);
    info_clearchoices(sld_700_lee_teach /*11993*/);
    info_addchoice(sld_700_lee_teach /*11993*/, dialog_back, sld_700_lee_teach_back);
    info_addchoice(sld_700_lee_teach /*11993*/, b_buildlearnstring(name_learnstrength_5, 5 * lpcost_attribute_strength, 0), sld_700_lee_teach_str_5);
    info_addchoice(sld_700_lee_teach /*11993*/, b_buildlearnstring(name_learnstrength_1, lpcost_attribute_strength, 0), sld_700_lee_teach_str_1);
    info_addchoice(sld_700_lee_teach /*11993*/, b_buildlearnstring(name_learndexterity_5, 5 * lpcost_attribute_dexterity, 0), sld_700_lee_teach_dex_5);
    info_addchoice(sld_700_lee_teach /*11993*/, b_buildlearnstring(name_learndexterity_1, lpcost_attribute_dexterity, 0), sld_700_lee_teach_dex_1);
};

func void sld_700_lee_teach_str_5() {
    b_buyattributepoints(other, atr_strength, 5 * lpcost_attribute_strength);
    info_clearchoices(sld_700_lee_teach /*11993*/);
    info_addchoice(sld_700_lee_teach /*11993*/, dialog_back, sld_700_lee_teach_back);
    info_addchoice(sld_700_lee_teach /*11993*/, b_buildlearnstring(name_learnstrength_5, 5 * lpcost_attribute_strength, 0), sld_700_lee_teach_str_5);
    info_addchoice(sld_700_lee_teach /*11993*/, b_buildlearnstring(name_learnstrength_1, lpcost_attribute_strength, 0), sld_700_lee_teach_str_1);
    info_addchoice(sld_700_lee_teach /*11993*/, b_buildlearnstring(name_learndexterity_5, 5 * lpcost_attribute_dexterity, 0), sld_700_lee_teach_dex_5);
    info_addchoice(sld_700_lee_teach /*11993*/, b_buildlearnstring(name_learndexterity_1, lpcost_attribute_dexterity, 0), sld_700_lee_teach_dex_1);
};

func void sld_700_lee_teach_dex_1() {
    b_buyattributepoints(other, atr_dexterity, lpcost_attribute_dexterity);
    info_clearchoices(sld_700_lee_teach /*11993*/);
    info_addchoice(sld_700_lee_teach /*11993*/, dialog_back, sld_700_lee_teach_back);
    info_addchoice(sld_700_lee_teach /*11993*/, b_buildlearnstring(name_learnstrength_5, 5 * lpcost_attribute_strength, 0), sld_700_lee_teach_str_5);
    info_addchoice(sld_700_lee_teach /*11993*/, b_buildlearnstring(name_learnstrength_1, lpcost_attribute_strength, 0), sld_700_lee_teach_str_1);
    info_addchoice(sld_700_lee_teach /*11993*/, b_buildlearnstring(name_learndexterity_5, 5 * lpcost_attribute_dexterity, 0), sld_700_lee_teach_dex_5);
    info_addchoice(sld_700_lee_teach /*11993*/, b_buildlearnstring(name_learndexterity_1, lpcost_attribute_dexterity, 0), sld_700_lee_teach_dex_1);
};

func void sld_700_lee_teach_dex_5() {
    b_buyattributepoints(other, atr_dexterity, 5 * lpcost_attribute_dexterity);
    info_clearchoices(sld_700_lee_teach /*11993*/);
    info_addchoice(sld_700_lee_teach /*11993*/, dialog_back, sld_700_lee_teach_back);
    info_addchoice(sld_700_lee_teach /*11993*/, b_buildlearnstring(name_learnstrength_5, 5 * lpcost_attribute_strength, 0), sld_700_lee_teach_str_5);
    info_addchoice(sld_700_lee_teach /*11993*/, b_buildlearnstring(name_learnstrength_1, lpcost_attribute_strength, 0), sld_700_lee_teach_str_1);
    info_addchoice(sld_700_lee_teach /*11993*/, b_buildlearnstring(name_learndexterity_5, 5 * lpcost_attribute_dexterity, 0), sld_700_lee_teach_dex_5);
    info_addchoice(sld_700_lee_teach /*11993*/, b_buildlearnstring(name_learndexterity_1, lpcost_attribute_dexterity, 0), sld_700_lee_teach_dex_1);
};

instance sld_700_lee_zweihand1(c_info) {
    npc = sld_700_lee /*8046*/;
    nr = 0;
    condition = sld_700_lee_zweihand1_condition;
    information = sld_700_lee_zweihand1_info;
    permanent = true;
    description = b_buildlearnstring(name_learn2h_1, lpcost_talent_2h_1, 0);
};

func int sld_700_lee_zweihand1_condition() {
    if ((npc_gettalentskill(hero, npc_talent_2h) < 1) && ((npc_gettrueguild(hero) == gil_sld) || ((npc_gettrueguild(hero) == gil_kdw) && (kapitel >= 4)))) {
        return true;
    };
};

func void sld_700_lee_zweihand1_info() {
    ai_output(other, self, "Sld_700_Lee_ZWEIHAND1_Info_15_01"); //ß õî÷ó íàó÷èòüñÿ âëàäåòü äâóðó÷íûì ìå÷îì.
    if (b_giveskill(other, npc_talent_2h, 1, lpcost_talent_2h_1)) {
        ai_output(self, other, "Sld_700_Lee_ZWEIHAND1_Info_08_02"); //Õîðîøî, íà÷íåì ñ ñàìîãî ïðîñòîãî.
        ai_output(self, other, "Sld_700_Lee_ZWEIHAND1_Info_08_03"); //Äåðæè ìå÷ ãîðèçîíòàëüíî. Òåáå ïîíàäîáèòñÿ áîëüøîé çàìàõ, ÷òîáû àòàêîâàòü ïðîòèâíèêà òÿæåëûì îðóæèåì.
        ai_output(self, other, "Sld_700_Lee_ZWEIHAND1_Info_08_04"); //Ïîäíèìè ðóêó è áåé âåðòèêàëüíî âíèç. Îáû÷íî ýòîãî äîñòàòî÷íî, ÷òîáû èçáàâèòüñÿ îò ëþáîãî âðàãà.
        ai_output(self, other, "Sld_700_Lee_ZWEIHAND1_Info_08_05"); //Èñïîëüçóé èíåðöèþ äâèæåíèÿ, ÷òîáû âåðíóòüñÿ â èñõîäíóþ ïîçèöèþ.
        ai_output(self, other, "Sld_700_Lee_ZWEIHAND1_Info_08_06"); //Äâóðó÷íûé ìå÷ ïðîñòî èäåàëåí äëÿ áîêîâûõ óäàðîâ, ÷òîáû äåðæàòü ïðîòèâíèêà íà ðàññòîÿíèè.
        ai_output(self, other, "Sld_700_Lee_ZWEIHAND1_Info_08_07"); //Ïîæàëóé, íà÷íåì ñ ýòîãî. Ïîïðîáóé.
    };
};

instance sld_700_lee_zweihand2(c_info) {
    npc = sld_700_lee /*8046*/;
    nr = 0;
    condition = sld_700_lee_zweihand2_condition;
    information = sld_700_lee_zweihand2_info;
    permanent = true;
    description = b_buildlearnstring(name_learn2h_2, lpcost_talent_2h_2, 0);
};

func int sld_700_lee_zweihand2_condition() {
    if ((npc_gettalentskill(hero, npc_talent_2h) == 1) && ((npc_gettrueguild(hero) == gil_sld) || ((npc_gettrueguild(hero) == gil_kdw) && (kapitel >= 4)))) {
        return true;
    };
};

func void sld_700_lee_zweihand2_info() {
    ai_output(other, self, "Sld_700_Lee_ZWEIHAND2_Info_15_01"); //ß õî÷ó áîëüøå óçíàòü î äâóðó÷íîì ìå÷å.
    if (b_giveskill(other, npc_talent_2h, 2, lpcost_talent_2h_2)) {
        ai_output(self, other, "Sld_700_Lee_ZWEIHAND2_Info_08_02"); //Ïðåæäå âñåãî, ñìåíè èñõîäíóþ ñòîéêó. Äåðæè ìå÷ âåðòèêàëüíî, âîçüìèñü çà ðóêîÿòü îáåèìè ðóêàìè è îòâåäè åãî â ñòîðîíó.
        ai_output(self, other, "Sld_700_Lee_ZWEIHAND2_Info_08_03"); //Òåïåðü áûñòðî îòâîäè åãî âíèç è äåëàé çàìàõ îò ïëå÷à. À òåïåðü - ðóáÿùèé óäàð âïðàâî!
        ai_output(self, other, "Sld_700_Lee_ZWEIHAND2_Info_08_04"); //Ó ïðîòèâíèêà íå áóäåò íè åäèíîãî øàíñà.
        ai_output(self, other, "Sld_700_Lee_ZWEIHAND2_Info_08_05"); //Èç ýòîãî æå ïîëîæåíèÿ ìîæíî íàíåñòè ðåçêèé êîëþùèé óäàð âïåðåä, ÷òîáû îòîãíàòü âðàãà.
        ai_output(self, other, "Sld_700_Lee_ZWEIHAND2_Info_08_06"); //Ðàçâåðíèñü, ÷òîáû ïðèäàòü ìå÷ó äîëæíûé ðàçãîí, - è åùå îäèí ðóáÿùèé óäàð!
        ai_output(self, other, "Sld_700_Lee_ZWEIHAND2_Info_08_07"); //Åñëè ýòîãî îêàæåòñÿ íåäîñòàòî÷íî, ìå÷ ïî èíåðöèè ëåãêî âåðíåòñÿ â èñõîäíîå ïîëîæåíèå.
        ai_output(self, other, "Sld_700_Lee_ZWEIHAND2_Info_08_08"); //Çàêîí÷èâ ñåðèþ, ïåðåõîäè â áëîê è æäè ìîìåíòà, ÷òîáû àòàêîâàòü ñíîâà.
        ai_output(self, other, "Sld_700_Lee_ZWEIHAND2_Info_08_09"); //Ñåêðåò óñïåõà êðîåòñÿ â ÷åðåäîâàíèè óäàðîâ è áîåâûõ ñòîåê.
    };
};

instance sld_701_orik_exit(c_info) {
    npc = sld_701_orik /*8050*/;
    nr = 999;
    condition = sld_701_orik_exit_condition;
    information = sld_701_orik_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int sld_701_orik_exit_condition() {
};

func void sld_701_orik_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_sld_702_exit(c_info) {
    npc = sld_702_soeldner /*8052*/;
    nr = 999;
    condition = dia_sld_702_exit_condition;
    information = dia_sld_702_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_sld_702_exit_condition() {
    return 1;
};

func void dia_sld_702_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_sld_702_first(c_info) {
    npc = sld_702_soeldner /*8052*/;
    nr = 1;
    condition = dia_sld_702_first_condition;
    information = dia_sld_702_first_info;
    important = true;
};

func int dia_sld_702_first_condition() {
    if (npc_getdisttonpc(self, other) <= zivilanquatschdist) {
        return 1;
    };
};

func void dia_sld_702_first_info() {
    ai_output(self, other, "DIA_Sld_702_First_04_00"); //Òû õîòü çíàåøü, êóäà íàïðàâëÿåøüñÿ?
    ai_output(other, self, "DIA_Sld_702_First_15_01"); //Êóäà?
    ai_output(self, other, "DIA_Sld_702_First_04_02"); //Òû èäåøü ê íàøåìó ïðåäâîäèòåëþ Ëè.
};

instance dia_sld_702_perm(c_info) {
    npc = sld_702_soeldner /*8052*/;
    nr = 1;
    condition = dia_sld_702_perm_condition;
    information = dia_sld_702_perm_info;
    permanent = true;
    description = "×òî íóæíî ñäåëàòü, ÷òîáû òû ïðîïóñòèë ìåíÿ ê íåìó?";
};

func int dia_sld_702_perm_condition() {
    return 1;
};

func void dia_sld_702_perm_info() {
    ai_output(other, self, "DIA_Sld_702_PERM_15_00"); //×òî íóæíî ñäåëàòü, ÷òîáû òû ïðîïóñòèë ìåíÿ ê íåìó?
    ai_output(self, other, "DIA_Sld_702_PERM_04_01"); //Íè÷åãî!
    ai_output(self, other, "DIA_Sld_702_PERM_04_02"); //Çäåñü íå Ñòàðûé Ëàãåðü, äà è Ëè ñîâñåì íå òàêîé, êàê Ãîìåç.
    ai_output(self, other, "DIA_Sld_702_PERM_04_03"); //Åìó íå íóæíà àðìèÿ ãîëîâîðåçîâ çà ñïèíîé. Îí ñàì ñïîñîáåí çàùèòèòü ñåáÿ.
    ai_output(self, other, "DIA_Sld_702_PERM_04_04"); //ÌÛ çäåñü ëèøü çàòåì, ÷òîáû ïîìîãàòü åìó.
};

instance dia_sld_709_cord_exit(c_info) {
    npc = sld_709_cord /*8066*/;
    nr = 999;
    condition = dia_sld_709_cord_exit_condition;
    information = dia_sld_709_cord_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_sld_709_cord_exit_condition() {
    return 1;
};

func void dia_sld_709_cord_exit_info() {
    ai_stopprocessinfos(self);
};

instance sld_709_cord_trainoffer(c_info) {
    npc = sld_709_cord /*8066*/;
    nr = 0;
    condition = sld_709_cord_trainoffer_condition;
    information = sld_709_cord_trainoffer_info;
    description = "ß õîòåë áû ïîòðåíèðîâàòüñÿ ñ îäíîðó÷íûì îðóæèåì.";
};

func int sld_709_cord_trainoffer_condition() {
    if (npc_gettalentskill(hero, npc_talent_1h) < 2) {
        return true;
    };
};

func void sld_709_cord_trainoffer_info() {
    ai_output(other, self, "SLD_709_Cord_TRAINOFFER_Info_15_01"); //ß õîòåë áû ïîòðåíèðîâàòüñÿ ñ îäíîðó÷íûì îðóæèåì.
    ai_output(self, other, "SLD_709_Cord_TRAINOFFER_Info_14_02"); //Õîðîøî. Íî íå çàäàðîì. Ýòî îáîéäåòñÿ òåáå â 30 êóñêîâ ðóäû.
    log_createtopic(ge_teachernc, log_note);
    b_logentry(ge_teachernc, ge_teachernc_cord);
};

instance sld_709_cord_train(c_info) {
    npc = sld_709_cord /*8066*/;
    nr = 0;
    condition = sld_709_cord_train_condition;
    information = sld_709_cord_train_info;
    permanent = true;
    description = b_buildlearnstring(name_learn1h_1, lpcost_talent_1h_1, 30);
};

func int sld_709_cord_train_condition() {
    if (npc_knowsinfo(hero, sld_709_cord_trainoffer /*12022*/) && (npc_gettalentskill(hero, npc_talent_1h) < 1)) {
        return true;
    };
};

func void sld_709_cord_train_info() {
    ai_output(other, self, "SLD_709_Cord_TRAIN_Info_15_00"); //ß õîòåë áû ïîòðåíèðîâàòüñÿ ñ îäíîðó÷íûì îðóæèåì.
    if (npc_hasitems(hero, itminugget) >= 30) {
        if (b_giveskill(hero, npc_talent_1h, 1, lpcost_talent_1h_1)) {
            ai_output(self, other, "SLD_709_Cord_TRAIN_14_01"); //Õîðîøàÿ ìûñëü! Íî ïðåæäå ÷åì çàíèìàòüñÿ òåõíèêîé, òåáå íóæíî íàó÷èòüñÿ ïðàâèëüíî äåðæàòü îðóæèå.
            ai_output(self, other, "SLD_709_Cord_TRAIN_14_02"); //Íîâè÷êè ÷àñòî äåðæàòñÿ çà ðóêîÿòü äâóìÿ ðóêàìè. Ýòî íåïðàâèëüíî, ê ýòîìó ëó÷øå íå ïðèâûêàòü.
            ai_output(self, other, "SLD_709_Cord_TRAIN_14_03"); //Âîçüìèñü çà ðóêîÿòü îäíîé ðóêîé. Ëåçâèå ââåðõ, è íå äåðæè åãî íåïîäâèæíî.
            ai_output(self, other, "SLD_709_Cord_TRAIN_14_04"); //Îðóæèå äîëæíî ñòàòü ïðîäîëæåíèåì òâîåé ðóêè, âïèñûâàòüñÿ â òâîè äâèæåíèÿ. Ýòî ïîìîæåò óñêîðèòü àòàêó.
            ai_output(self, other, "SLD_709_Cord_TRAIN_14_05"); //Åñëè çàïîìíèøü âñå, î ÷åì ÿ òåáå ãîâîðèë, òâîè óäàðû ñòàíóò áîëåå èçÿùíûìè è áûñòðûìè.
            b_practicecombat("NC_WATERFALL_TOP01");
            ai_output(self, other, "SLD_709_Cord_TRAIN_14_06"); //Äà, è âîò åùå ÷òî: íåêîòîðûå óäàðû êóäà ýôôåêòèâíåå îñòàëüíûõ. Ó íîâè÷êà íå òàê ìíîãî øàíñîâ ïîâòîðèòü èõ.
            ai_output(self, other, "SLD_709_Cord_TRAIN_14_07"); //Íî ÷åì áîëüøå òû áóäåøü òðåíèðîâàòüñÿ, òåì ëó÷øå îíè ó òåáÿ áóäóò ïîëó÷àòüñÿ.
            b_giveinvitems(hero, self, itminugget /*4517*/, 30);
        };
    }
    else {
        ai_output(self, other, "KDF_402_Corristo_HEAVYARMOR_Info_14_03"); //Äëÿ ýòîãî ó òåáÿ íåäîñòàòî÷íî ðóäû.
    };
};

instance sld_709_cord_trainagain(c_info) {
    npc = sld_709_cord /*8066*/;
    nr = 0;
    condition = sld_709_cord_trainagain_condition;
    information = sld_709_cord_trainagain_info;
    permanent = true;
    description = b_buildlearnstring(name_learn1h_2, lpcost_talent_1h_2, 50);
};

func int sld_709_cord_trainagain_condition() {
    if (npc_knowsinfo(hero, sld_709_cord_trainoffer /*12022*/) && (npc_gettalentskill(hero, npc_talent_1h) == 1)) {
        return true;
    };
};

func void sld_709_cord_trainagain_info() {
    ai_output(other, self, "SLD_709_Cord_TRAINAGAIN_Info_15_01"); //Ðàññêàæè ìíå åùå ÷òî-íèáóäü ïðî îäíîðó÷íîå îðóæèå.
    if (npc_hasitems(hero, itminugget) >= 50) {
        if (b_giveskill(hero, npc_talent_1h, 2, lpcost_talent_1h_2)) {
            ai_output(self, other, "SLD_709_Cord_TRAINAGAIN_Info_14_02"); //Ëàäíî, òû óæå çíàåøü ãëàâíîå. Åñëè äåðæàòü êëèíîê íåìíîãî íèæå, ïåðâûé óäàð ïîëó÷èòñÿ áîëåå ñèëüíûì.
            ai_output(self, other, "SLD_709_Cord_TRAINAGAIN_Info_14_03"); //Ðóáÿùèé óäàð, ïîìíèøü? Ëàäíî, òåïåðü î òîì, êàê íóæíî äâèãàòüñÿ. Íàíîñèøü äâà óäàðà è ðàçâîðà÷èâàåøüñÿ - âðàã íàâåðíÿêà ðàñòåðÿåòñÿ, à òû îêàæåøüñÿ â âûãîäíîì ïîëîæåíèè.
            ai_output(self, other, "SLD_709_Cord_TRAINAGAIN_Info_14_04"); //Åùå îäèí âçìàõ êëèíêîì ñïðàâà íàëåâî...
            b_practicecombat("NC_WATERFALL_TOP01");
            ai_output(self, other, "SLD_709_Cord_TRAINAGAIN_Info_14_05"); //...è âîçâðàùàåøüñÿ â èñõîäíóþ ñòîéêó. Ãëàâíîå, íå çàáûâàé òðåíèðîâàòüñÿ. Èäè, îòðàáàòûâàé òåõíèêó áîÿ äëÿ îäíîé ðóêè.
            b_giveinvitems(hero, self, itminugget /*4517*/, 50);
        };
    }
    else {
        ai_output(self, other, "KDF_402_Corristo_HEAVYARMOR_Info_14_03"); //Äëÿ ýòîãî ó òåáÿ íåäîñòàòî÷íî ðóäû.
    };
};

const string sld_723_checkpoint = "NC_PLACE02";

instance info_sld_723_firstwarn(c_info) {
    npc = sld_723_soeldner /*8073*/;
    nr = 1;
    condition = info_sld_723_firstwarn_condition;
    information = info_sld_723_firstwarn_info;
    permanent = true;
    important = true;
};

func int info_sld_723_firstwarn_condition() {
    if (((hero.aivar[27] == aiv_gps_begin) && (self.aivar[29] == false)) && hlp_strcmp(npc_getnearestwp(self), self.wp)) {
        return true;
    };
};

func void info_sld_723_firstwarn_info() {
    printglobals(pd_mission);
    ai_output(self, hero, "Info_SLD_723_FirstWarn_11_01"); //ÑÒÎÉ! Ïðåæäå ÷åì ÿ ïðîïóùó òåáÿ, òû äîëæåí íàçâàòü ïàðîëü!
    hero.aivar[28] = npc_getdisttowp(hero, sld_723_checkpoint);
    hero.aivar[27] = aiv_gps_firstwarn;
    if (npc_knowsinfo(hero, info_cronos_sleeper /*10263*/)) {
        info_clearchoices(info_sld_723_firstwarn /*12032*/);
        info_addchoice(info_sld_723_firstwarn /*12032*/, "ß çäåñü ñ ðàçðåøåíèÿ Êðîíîñà!", info_sld_723_parole_cronos);
        info_addchoice(info_sld_723_firstwarn /*12032*/, "×åðò, ÿ çàáûë åãî!", info_sld_723_parole_forgot);
        info_addchoice(info_sld_723_firstwarn /*12032*/, "Ïàðîëü: 'ÒÅÐÈÀÍÒÐÎÕ'.", info_sld_723_parole_false2);
        info_addchoice(info_sld_723_firstwarn /*12032*/, "Ïàðîëü: 'ÒÅÒÐÈÀÍÄÎÕ'.", info_sld_723_parole_true);
        info_addchoice(info_sld_723_firstwarn /*12032*/, "Ïàðîëü: 'ÒÅÒÐÈÄÀÍÎÕ'.", info_sld_723_parole_false1);
    }
    else {
        ai_stopprocessinfos(self);
    };
};

func void info_sld_723_parole_cronos() {
    ai_output(hero, self, "Info_SLD_723_Parole_CRONOS_15_01"); //ß çäåñü ñ ðàçðåøåíèÿ Êðîíîñà!
    ai_output(self, hero, "Info_SLD_723_Parole_CRONOS_11_02"); //Åñëè áû ýòî áûëî òàê, òî îí íàçâàë áû òåáå ïàðîëü. Óáèðàéñÿ îòñþäà, ëæåö!
    ai_stopprocessinfos(self);
};

func void info_sld_723_parole_forgot() {
    ai_output(hero, self, "Info_SLD_723_Parole_FORGOT_15_01"); //×åðò, ÿ çàáûë åãî!
    ai_output(self, hero, "Info_SLD_723_Parole_FORGOT_11_02"); //Âîçâðàùàéñÿ, êîãäà âñïîìíèøü, è íå òðàòü ïîïóñòó ìîå âðåìÿ!
    ai_stopprocessinfos(self);
};

func void info_sld_723_parole_false1() {
    ai_output(hero, self, "Info_SLD_723_Parole_FALSE1_15_01"); //Ïàðîëü: 'ÒÅÒÐÈÄÀÍÎÕ'.
    ai_output(self, hero, "Info_SLD_723_Parole_FALSE1_11_02"); //ÍÅÂÅÐÍÎ!
    ai_stopprocessinfos(self);
};

func void info_sld_723_parole_false2() {
    ai_output(hero, self, "Info_SLD_723_Parole_FALSE2_15_01"); //Ïàðîëü: 'ÒÅÐÈÀÍÒÐÎÕ'.
    ai_output(self, hero, "Info_SLD_723_Parole_FALSE2_11_02"); //ÍÅÂÅÐÍÎ!
    ai_stopprocessinfos(self);
};

func void info_sld_723_parole_true() {
    var c_npc guard;

    ai_output(hero, self, "Info_SLD_723_Parole_TRUE_15_01"); //Ïàðîëü: 'ÒÅÒÐÈÀÍÄÎÕ'.
    ai_output(self, hero, "Info_SLD_723_Parole_TRUE_11_02"); //Âåðíî. Òû ìîæåøü ïðîéòè.
    ai_stopprocessinfos(self);
    guard = hlp_getnpc(sld_732_soeldner);
    hero.aivar[27] = aiv_gps_begin;
    self.aivar[29] = true;
    guard.aivar[29] = true;
    b_givexp(xp_saycorrectparole);
};

instance info_sld_723_lastwarn(c_info) {
    npc = sld_723_soeldner /*8073*/;
    nr = 2;
    condition = info_sld_723_lastwarn_condition;
    information = info_sld_723_lastwarn_info;
    permanent = true;
    important = true;
};

func int info_sld_723_lastwarn_condition() {
    if ((((hero.aivar[27] == aiv_gps_firstwarn) && (self.aivar[29] == false)) && (npc_getdisttowp(hero, sld_723_checkpoint) < (hero.aivar[28] - 100))) && hlp_strcmp(npc_getnearestwp(self), self.wp)) {
        return true;
    };
};

func int info_sld_723_lastwarn_info() {
    ai_output(self, hero, "Info_SLD_723_LastWarn_11_01"); //ÍÈ ØÀÃÓ ÄÀËÜØÅ! Ïîâòîðÿòü íå áóäó!
    hero.aivar[28] = npc_getdisttowp(hero, sld_723_checkpoint);
    hero.aivar[27] = aiv_gps_lastwarn;
    ai_stopprocessinfos(self);
};

instance info_sld_723_attack(c_info) {
    npc = sld_723_soeldner /*8073*/;
    nr = 3;
    condition = info_sld_723_attack_condition;
    information = info_sld_723_attack_info;
    permanent = true;
    important = true;
};

func int info_sld_723_attack_condition() {
    if ((((hero.aivar[27] == aiv_gps_lastwarn) && (self.aivar[29] == false)) && (npc_getdisttowp(hero, sld_723_checkpoint) < (hero.aivar[28] - 100))) && hlp_strcmp(npc_getnearestwp(self), self.wp)) {
        return true;
    };
};

func int info_sld_723_attack_info() {
    hero.aivar[28] = 0;
    hero.aivar[27] = aiv_gps_punish;
    b_fullstop(self);
    ai_stopprocessinfos(self);
    b_intruderalert(self, other);
    b_setattackreason(self, aiv_ar_intruder);
    npc_settarget(self, hero);
    ai_startstate(self, zs_attack, 1, "");
};

instance info_sld_723_parole(c_info) {
    npc = sld_723_soeldner /*8073*/;
    nr = 10;
    condition = info_sld_723_parole_condition;
    information = info_sld_723_parole_info;
    permanent = true;
    description = "(íàçâàòü ïàðîëü)";
};

func int info_sld_723_parole_condition() {
    if (npc_knowsinfo(hero, info_cronos_sleeper /*10263*/) && (self.aivar[29] == false)) {
        return true;
    };
};

func int info_sld_723_parole_info() {
    info_clearchoices(info_sld_723_parole /*12047*/);
    info_addchoice(info_sld_723_parole /*12047*/, "ß çäåñü ñ ðàçðåøåíèÿ Êðîíîñà!", info_sld_723_parole_cronos);
    info_addchoice(info_sld_723_parole /*12047*/, "×åðò, ÿ çàáûë åãî!", info_sld_723_parole_forgot);
    info_addchoice(info_sld_723_parole /*12047*/, "Ïàðîëü: 'ÒÅÐÈÀÍÒÐÎÕ'.", info_sld_723_parole_false2);
    info_addchoice(info_sld_723_parole /*12047*/, "Ïàðîëü: 'ÒÅÒÐÈÀÍÄÎÕ'.", info_sld_723_parole_true);
    info_addchoice(info_sld_723_parole /*12047*/, "Ïàðîëü: 'ÒÅÒÐÈÄÀÍÎÕ'.", info_sld_723_parole_false1);
};

instance dia_jarvis_exit(c_info) {
    npc = sld_728_jarvis /*8083*/;
    nr = 999;
    condition = dia_jarvis_exit_condition;
    information = dia_jarvis_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_jarvis_exit_condition() {
    return 1;
};

func void dia_jarvis_exit_info() {
    ai_output(self, other, "DIA_Jarvis_EXIT_08_00"); //Ýé, ñçàäè!
    ai_stopprocessinfos(self);
};

instance dia_jarvis_first(c_info) {
    npc = sld_728_jarvis /*8083*/;
    nr = 1;
    condition = dia_jarvis_first_condition;
    information = dia_jarvis_first_info;
    important = true;
};

func int dia_jarvis_first_condition() {
    return 1;
};

func void dia_jarvis_first_info() {
    ai_output(self, other, "DIA_Jarvis_First_08_00"); //Òû ñîáèðàåøüñÿ ïðîéòè ÷åðåç ýòè âîðîòà?
    ai_output(other, self, "DIA_Jarvis_First_15_01"); //À òû ñîáèðàåøüñÿ îñòàíîâèòü ìåíÿ?
    ai_output(self, other, "DIA_Jarvis_First_08_02"); //Íåò, íî òû äîëæåí çíàòü, ÷òî òåáÿ òàì îæèäàåò. Ýòî òåáå íå Ñòàðûé Ëàãåðü, äà è ñ ñåêòîé áîëîòíûõ ïðèäóðêîâ ó íàñ ìàëî îáùåãî.
    ai_output(other, self, "DIA_Jarvis_First_15_03"); //Òàê ÷òî æå ìåíÿ òàì îæèäàåò?
    ai_output(self, other, "DIA_Jarvis_First_08_04"); //Çäåñü íåò íè îõðàííèêîâ, íè Ñòðàæåé, ÷òîáû ïðèñìàòðèâàòü çà ïîðÿäêîì. Çäåñü êàæäûé ñàì çà ñåáÿ. Âìåñòå äåðæèìñÿ òîëüêî ìû, íàåìíèêè.
};

instance dia_jarvis_sldinfo(c_info) {
    npc = sld_728_jarvis /*8083*/;
    nr = 1;
    condition = dia_jarvis_sldinfo_condition;
    information = dia_jarvis_sldinfo_info;
    description = "×åì çàíèìàþòñÿ íàåìíèêè?";
};

func int dia_jarvis_sldinfo_condition() {
    if (npc_knowsinfo(hero, dia_jarvis_first /*12053*/)) {
        return 1;
    };
};

func void dia_jarvis_sldinfo_info() {
    ai_output(other, self, "DIA_Jarvis_SldInfo_15_00"); //×åì çàíèìàþòñÿ íàåìíèêè?
    ai_output(self, other, "DIA_Jarvis_SldInfo_08_01"); //Ìû - íàåìíèêè íà ñëóæáå ó ìàãîâ Âîäû.
    ai_output(self, other, "DIA_Jarvis_SldInfo_08_02"); //Íàøà ãëàâíàÿ öåëü - âûðâàòüñÿ îòñþäà. Ìû ìíîãî ðàáîòàåì è íå ñîáèðàåìñÿ ðàññëàáëÿòüñÿ, êàê òå òèïû èç Ñòàðîãî Ëàãåðÿ, ÷òî æèâóò çà ñ÷åò ðóäîêîïîâ.
    ai_output(self, other, "DIA_Jarvis_SldInfo_08_03"); //Ìû âñå ïîä÷èíÿåìñÿ Ëè. Îí âåëèêèé ÷åëîâåê. Îí îäèí èç òåõ, êòî ïîääåðæèâàåò ïîðÿäîê â ýòîì ÷åðòîâîì Ëàãåðå.
};

instance dia_jarvis_magier(c_info) {
    npc = sld_728_jarvis /*8083*/;
    nr = 2;
    condition = dia_jarvis_magier_condition;
    information = dia_jarvis_magier_info;
    description = "×åì çàíèìàþòñÿ ìàãè?";
};

func int dia_jarvis_magier_condition() {
    if (npc_knowsinfo(hero, dia_jarvis_sldinfo /*12056*/)) {
        return 1;
    };
};

func void dia_jarvis_magier_info() {
    ai_output(other, self, "DIA_Jarvis_Magier_15_00"); //×åì çàíèìàþòñÿ ìàãè?
    ai_output(self, other, "DIA_Jarvis_Magier_08_01"); //Îíè èçó÷àþò ìàãè÷åñêèå ñâîéñòâà ðóäû, êîòîðóþ 'ñêðåáêè' äîáûâàþò â øàõòå.
    ai_output(self, other, "DIA_Jarvis_Magier_08_02"); //Íàñêîëüêî ìíå èçâåñòíî, îíè ñîáèðàþòñÿ âçîðâàòü âñþ ÷åðòîâó ãîðó ðóäû, ÷òîáû óíè÷òîæèòü Áàðüåð è âûáðàòüñÿ îòñþäà.
    ai_output(other, self, "DIA_Jarvis_Magier_15_03"); //Ýòî äîëæíî áûòü îïàñíî.
    ai_output(self, other, "DIA_Jarvis_Magier_08_04"); //Îíè ãîâîðÿò, ÷òî ìû íå äîëæíû âîëíîâàòüñÿ.
};

instance dia_jarvis_erzhaufen(c_info) {
    npc = sld_728_jarvis /*8083*/;
    nr = 2;
    condition = dia_jarvis_erzhaufen_condition;
    information = dia_jarvis_erzhaufen_info;
    description = "Ó âàñ áîëüøèå çàïàñû ðóäû?";
};

func int dia_jarvis_erzhaufen_condition() {
    if (npc_knowsinfo(hero, dia_jarvis_magier /*12059*/)) {
        return 1;
    };
};

func void dia_jarvis_erzhaufen_info() {
    ai_output(other, self, "DIA_Jarvis_Erzhaufen_15_00"); //Ó âàñ áîëüøèå çàïàñû ðóäû?
    ai_output(self, other, "DIA_Jarvis_Erzhaufen_08_01"); //Ìîæíî ñêàçàòü è òàê. Ìû íàçûâàåì èõ æåëåçíîé ãîðîé. Íà íåå ìîæíî êóïèòü äàæå æåíó êîðîëÿ.
    ai_output(self, other, "DIA_Jarvis_Erzhaufen_08_02"); //Íî ìû íå ñîáèðàåìñÿ îòäàâàòü ñâîþ ðóäó ýòîìó ñòàðîìó ïåðäóíó. Ìû õîòèì ÂÛÁÐÀÒÜÑß ÎÒÑÞÄÀ!
};

instance dia_jarvis_wohaufen(c_info) {
    npc = sld_728_jarvis /*8083*/;
    nr = 2;
    condition = dia_jarvis_wohaufen_condition;
    information = dia_jarvis_wohaufen_info;
    description = "Ãäå íàõîäèòñÿ ýòà æåëåçíàÿ ãîðà?";
};

func int dia_jarvis_wohaufen_condition() {
    if (npc_knowsinfo(hero, dia_jarvis_erzhaufen /*12062*/)) {
        return 1;
    };
};

func void dia_jarvis_wohaufen_info() {
    ai_output(other, self, "DIA_Jarvis_WoHaufen_15_00"); //Ãäå íàõîäèòñÿ ýòà æåëåçíàÿ ãîðà?
    ai_output(self, other, "DIA_Jarvis_WoHaufen_08_01"); //Íèêîãäà íå âèäåë öåëóþ ãîðó ðóäû, à? Â öåíòðå ïåùåðû åñòü áîëüøàÿ äûðà - ðóäó ñáðàñûâàþò òóäà.
    ai_output(self, other, "DIA_Jarvis_WoHaufen_08_02"); //Íî áëèçêî ê íåé òåáå âñå ðàâíî íå ïîäîáðàòüñÿ. È ìàãè, è íàøè ëþäè - âñå îõðàíÿþò ðóäó è äíåì, è íî÷üþ.
    ai_output(other, self, "DIA_Jarvis_WoHaufen_15_03"); //Äà ÿ ïðîñòî ñïðîñèë.
};

instance dia_jarvis_rest(c_info) {
    npc = sld_728_jarvis /*8083*/;
    nr = 3;
    condition = dia_jarvis_rest_condition;
    information = dia_jarvis_rest_info;
    description = "×òî íàñ÷åò îñòàëüíûõ ëþäåé?";
};

func int dia_jarvis_rest_condition() {
    if (npc_knowsinfo(hero, dia_jarvis_first /*12053*/)) {
        return 1;
    };
};

func void dia_jarvis_rest_info() {
    ai_output(other, self, "DIA_Jarvis_Rest_15_00"); //×òî íàñ÷åò îñòàëüíûõ ëþäåé?
    ai_output(self, other, "DIA_Jarvis_Rest_08_01"); //Îäíî æóëüå - âñå, áåç èñêëþ÷åíèÿ. Íà Ëàãåðü èì íàïëåâàòü ñ âûñîêîãî õîëìà. ß áû ñêîðåå ïîðó÷èë êàêîìó-íèáóäü êðåñòüÿíèíó îõðàíÿòü ýòè âîðîòà, ÷åì êîìó-íèáóäü èç íèõ.
};

instance dia_jarvis_perm(c_info) {
    npc = sld_728_jarvis /*8083*/;
    nr = 10;
    condition = dia_jarvis_perm_condition;
    information = dia_jarvis_perm_info;
    permanent = true;
    description = "Êàê èäóò äåëà?";
};

func int dia_jarvis_perm_condition() {
    if (npc_knowsinfo(hero, dia_jarvis_magier /*12059*/)) {
        return 1;
    };
};

func void dia_jarvis_perm_info() {
    ai_output(other, self, "DIA_Jarvis_PERM_15_00"); //Êàê èäóò äåëà?
    ai_output(self, other, "DIA_Jarvis_PERM_08_01"); //Ñêðåáêè ïî-ïðåæíåìó äîáûâàþò ðóäó. Êîãäà îíè íàáåðóò äîñòàòî÷íî, ìû âçîðâåì âñþ æåëåçíóþ ãîðó.
};

instance sld_728_jarvis_aufnahmesoldier(c_info) {
    npc = sld_728_jarvis /*8083*/;
    condition = sld_728_jarvis_aufnahmesoldier_condition;
    information = sld_728_jarvis_aufnahmesoldier_info;
    important = true;
};

func int sld_728_jarvis_aufnahmesoldier_condition() {
    if (((npc_gettrueguild(hero) == gil_org) && ((npc_hasitems(hero, itat_crawlerqueen) >= 1) || (corkalom_bringmcqballs == log_success))) && (npc_getdisttonpc(hero, self) < 1000)) {
        return true;
    };
};

func void sld_728_jarvis_aufnahmesoldier_info() {
    ai_gotonpc(hero, self);
    ai_output(self, other, "Sld_728_Jarvis_AUFNAHMESOLDIER_Info_08_01"); //Ýé, ÿ ñëûøàë, òû çàäàë æàðó ïîëçóíàì â øàõòå!
    ai_output(self, other, "Sld_728_Jarvis_AUFNAHMESOLDIER_Info_08_02"); //Äóìàþ, Ëè ñ ðàäîñòüþ ïðèìåò òåáÿ â ðÿäû íàåìíèêîâ. Ïðîñòî ïîãîâîðè ñ íèì.
    self.flags = 0;
    log_createtopic(ge_becomemercenary, log_note);
    b_logentry(ge_becomemercenary, ge_becomemercenary_1);
};

instance info_kharim_exit(c_info) {
    npc = sld_729_kharim /*8085*/;
    nr = 999;
    condition = info_kharim_exit_condition;
    information = info_kharim_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_kharim_exit_condition() {
    return 1;
};

func void info_kharim_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_kharim_what(c_info) {
    npc = sld_729_kharim /*8085*/;
    nr = 1;
    condition = info_kharim_what_condition;
    information = info_kharim_what_info;
    description = "ß çäåñü íîâåíüêèé. Êòî òû?";
};

func int info_kharim_what_condition() {
    return 1;
};

func void info_kharim_what_info() {
    ai_output(other, self, "Info_Kharim_What_15_00"); //ß çäåñü íîâåíüêèé. Êòî òû?
    ai_output(self, other, "Info_Kharim_What_09_01"); //Ìåíÿ çîâóò Õàðèì. Òåáÿ, äîëæíî áûòü, òîëüêî ÷òî çàøâûðíóëè ñþäà - èíà÷å òû áû îáî ìíå ñëûøàë.
    ai_output(self, other, "Info_Kharim_What_09_02"); //ß ëó÷øèé áîåö èç âñåõ, ÷òî êîãäà-ëèáî áûëè â ýòîì ÷åðòîâîì Ëàãåðå!
};

var int kharim_charged;

instance info_kharim_charge(c_info) {
    npc = sld_729_kharim /*8085*/;
    nr = 2;
    condition = info_kharim_charge_condition;
    information = info_kharim_charge_info;
    permanent = true;
    description = "ß âûçûâàþ òåáÿ íà áîé! Èäåì íà àðåíó!";
};

func int info_kharim_charge_condition() {
    if (((npc_knowsinfo(hero, dia_scatty_joinoc /*8997*/) && npc_knowsinfo(hero, info_kharim_what /*12080*/)) && (kharim_charged != true)) && (kapitel <= 1)) {
        return 1;
    };
};

func void info_kharim_charge_info() {
    ai_output(other, self, "Info_Kharim_Charge_15_00"); //ß âûçûâàþ òåáÿ íà áîé! Èäåì íà àðåíó!
    ai_output(self, other, "Info_Kharim_Charge_09_01"); //ÒÛ?! Äà ÿ ñîæðó òåáÿ íà çàâòðàê, ìàëûø!
    ai_output(self, other, "Info_Kharim_Charge_09_02"); //Îêàæè ñåáå óñëóãó è ïðîâàëèâàé, ïîêà åùå íå ïîçäíî.
    info_clearchoices(info_kharim_charge /*12084*/);
    info_addchoice(info_kharim_charge /*12084*/, "Ëàäíî, ëàäíî, çàáóäü îá ýòîì.", info_kharim_charge_back);
    info_addchoice(info_kharim_charge /*12084*/, "Çíà÷èò, òû áîèøüñÿ äðàêè, òðóñ?!", info_kharim_charge_insult);
};

func void info_kharim_charge_back() {
    ai_output(other, self, "Info_Kharim_Charge_BACK_15_00"); //Ëàäíî, ëàäíî, çàáóäü îá ýòîì.
    ai_stopprocessinfos(self);
};

func void info_kharim_charge_insult() {
    ai_output(other, self, "Info_Kharim_Charge_Insult_15_00"); //Çíà÷èò, òû áîèøüñÿ äðàêè, òðóñ?!
    ai_output(self, other, "Info_Kharim_Charge_Insult_09_01"); //Íè÷åãî ïîëó÷øå ïðèäóìàòü íå ìîã?
    info_clearchoices(info_kharim_charge /*12084*/);
    info_addchoice(info_kharim_charge /*12084*/, "Òû çäåñü òîëüêî çàòåì, ÷òîáû ïîöåëîâàòü Ãîìåçà â çàäíèöó!", info_kharim_charge_insult_gomezass);
    info_addchoice(info_kharim_charge /*12084*/, "Êàê íàñ÷åò ýòîãî: òâîÿ ìàòü áûëà ïîõîæà íà îâöó...", info_kharim_charge_insult_goats);
    info_addchoice(info_kharim_charge /*12084*/, "Íå ìîãó ïðèäóìàòü íè÷åãî òàêîãî, ÷òî òû áû ñìîã ïîíÿòü.", info_kharim_charge_insult_stupid);
    info_addchoice(info_kharim_charge /*12084*/, "...íî ïîòîì ÿ óâèäåë òâîþ îòâðàòèòåëüíóþ ðîæó.", info_kharim_charge_insult_face);
    info_addchoice(info_kharim_charge /*12084*/, "Ëàäíî, ëàäíî, çàáóäü îá ýòîì.", info_kharim_charge_back);
};

func void info_kharim_charge_insult_goats() {
    ai_output(other, self, "Info_Kharim_Charge_Insult_Goats_15_00"); //Êàê íàñ÷åò ýòîãî: òâîÿ ìàòü ïîõîæà íà îâöó...
    ai_output(self, other, "Info_Kharim_Charge_Insult_Goats_09_01"); //Äà, äóìàþ, òàê îíî è åñòü...
};

func void info_kharim_charge_insult_gomezass() {
    ai_output(other, self, "Info_Kharim_Charge_Insult_GomezAss_15_00"); //Òû çäåñü òîëüêî çàòåì, ÷òîáû ïîëó÷èòü øàíñ ïîöåëîâàòü ñâîåãî äðàãîöåííîãî Ãîìåçà â çàäíèöó!
    ai_output(self, other, "Info_Kharim_Charge_Insult_GomezAss_09_01"); //×ÒÎ!?! Àõ òû, ÷åðâÿê íàâîçíûé! Òû íè÷åãî î íàñ íå çíàåøü! Â Íîâîì Ëàãåðå ÍÅÒ âñåãî ýòîãî äåðüìà!
    ai_output(self, other, "Info_Kharim_Charge_Insult_GomezAss_09_02"); //È ïîìèìî âñåãî ïðî÷åãî, ÿ çäåñü òîëüêî ïî îäíîé ïðè÷èíå: ÷òîáû áûëà âîçìîæíîñòü âûáèâàòü äóðü èç òàêèõ çàäíèö, êàê òû!
    ai_output(self, other, "Info_Kharim_Charge_Insult_GomezAss_09_03"); //Ñ óäîâîëüñòâèåì ñäåëàþ ýòî è ñ ÒÎÁÎÉ. Ïóñòü íàñ ðàññóäèò àðåíà!
    kharim_charged = true;
    info_clearchoices(info_kharim_charge /*12084*/);
    ai_stopprocessinfos(self);
    npc_exchangeroutine(self, "GUIDE");
};

func void info_kharim_charge_insult_stupid() {
    ai_output(other, self, "Info_Kharim_Charge_Insult_Stupid_15_00"); //Ïîäóìàé-êà âîò î ÷åì... Õîòÿ íåò, íå ìîãó ïðèäóìàòü íè÷åãî òàêîãî, ÷òî òû áû ñìîã ïîíÿòü.
    ai_output(self, other, "Info_Kharim_Charge_Insult_Stupid_09_01"); //À òû ïîïûòàéñÿ.
};

func void info_kharim_charge_insult_face() {
    ai_output(other, self, "Info_Kharim_Charge_Insult_Face_15_00"); //Ñïåðâà ÿ õîòåë ñêàçàòü ÷òî-íèáóäü ïî ïîâîäó òâîèõ òîíåíüêèõ ðó÷îíîê, íî ïîòîì ÿ óâèäåë òâîþ îòâðàòèòåëüíóþ ðîæó.
    ai_output(self, other, "Info_Kharim_Charge_Insult_Face_09_01"); //ß äàì òåáå åùå îäèí øàíñ ÈÑ×ÅÇÍÓÒÜ ÎÒÑÞÄÀ!
};

instance info_kharim_inarena(c_info) {
    npc = sld_729_kharim /*8085*/;
    nr = 1;
    condition = info_kharim_inarena_condition;
    information = info_kharim_inarena_info;
    important = true;
};

func int info_kharim_inarena_condition() {
    if ((kharim_charged == true) && (npc_getdisttowp(hero, "OCR_ARENABATTLE_TRAIN") < 500)) {
        return 1;
    };
};

func void info_kharim_inarena_info() {
    if (kapitel <= 1) {
        ai_output(self, other, "Info_Kharim_InArena_09_00"); //Áîëü - ýòî âîïðîñ ñèëû äóõà!
        ai_stopprocessinfos(self);
        npc_exchangeroutine(self, "START");
        npc_settarget(self, other);
        ai_startstate(self, zs_attack, 1, "");
    }
    else {
        b_say(self, other, "$LetsForgetOurLittleFight");
        ai_stopprocessinfos(self);
        npc_exchangeroutine(self, "START");
    };
};

const string sld_732_checkpoint = "NC_PLACE02";

instance info_sld_732_firstwarn(c_info) {
    npc = sld_732_soeldner /*8092*/;
    nr = 1;
    condition = info_sld_732_firstwarn_condition;
    information = info_sld_732_firstwarn_info;
    permanent = true;
    important = true;
};

func int info_sld_732_firstwarn_condition() {
    if (((hero.aivar[27] == aiv_gps_begin) && (self.aivar[29] == false)) && hlp_strcmp(npc_getnearestwp(self), self.wp)) {
        return true;
    };
};

func void info_sld_732_firstwarn_info() {
    printglobals(pd_mission);
    ai_output(self, hero, "Info_SLD_732_FirstWarn_08_01"); //ÑÒÎÉ! Ïðåæäå ÷åì ÿ ïðîïóùó òåáÿ, òû äîëæåí íàçâàòü ïàðîëü!
    hero.aivar[28] = npc_getdisttowp(hero, sld_732_checkpoint);
    hero.aivar[27] = aiv_gps_firstwarn;
    if (npc_knowsinfo(hero, info_cronos_sleeper /*10263*/)) {
        info_clearchoices(info_sld_732_firstwarn /*12097*/);
        info_addchoice(info_sld_732_firstwarn /*12097*/, "ß çäåñü ñ ðàçðåøåíèÿ Êðîíîñà!", info_sld_732_parole_cronos);
        info_addchoice(info_sld_732_firstwarn /*12097*/, "×åðò, ÿ çàáûë åãî!", info_sld_732_parole_forgot);
        info_addchoice(info_sld_732_firstwarn /*12097*/, "Ïàðîëü: 'ÒÅÐÈÀÍÒÐÎÕ'.", info_sld_732_parole_false2);
        info_addchoice(info_sld_732_firstwarn /*12097*/, "Ïàðîëü: 'ÒÅÒÐÈÀÍÄÎÕ'.", info_sld_732_parole_true);
        info_addchoice(info_sld_732_firstwarn /*12097*/, "Ïàðîëü: 'ÒÅÒÐÈÄÀÍÎÕ'.", info_sld_732_parole_false1);
    }
    else {
        ai_stopprocessinfos(self);
    };
};

func void info_sld_732_parole_cronos() {
    ai_output(hero, self, "Info_SLD_732_Parole_CRONOS_15_01"); //ß çäåñü ñ ðàçðåøåíèÿ Êðîíîñà!
    ai_output(self, hero, "Info_SLD_732_Parole_CRONOS_08_02"); //Åñëè áû ýòî áûëî òàê, òî îí íàçâàë áû òåáå ïàðîëü. Óáèðàéñÿ îòñþäà, ëæåö!
    ai_stopprocessinfos(self);
};

func void info_sld_732_parole_forgot() {
    ai_output(hero, self, "Info_SLD_732_Parole_FORGOT_15_01"); //×åðò, ÿ çàáûë åãî!
    ai_output(self, hero, "Info_SLD_732_Parole_FORGOT_08_02"); //Âîçâðàùàéñÿ, êîãäà âñïîìíèøü, è íå òðàòü ïîïóñòó ìîå âðåìÿ!
    ai_stopprocessinfos(self);
};

func void info_sld_732_parole_false1() {
    ai_output(hero, self, "Info_SLD_732_Parole_FALSE1_15_01"); //Ïàðîëü: 'ÒÅÒÐÈÄÀÍÎÕ'.
    ai_output(self, hero, "Info_SLD_732_Parole_FALSE1_08_02"); //ÍÅÂÅÐÍÎ!
    ai_stopprocessinfos(self);
};

func void info_sld_732_parole_false2() {
    ai_output(hero, self, "Info_SLD_732_Parole_FALSE2_15_01"); //Ïàðîëü: 'ÒÅÐÈÀÍÒÐÎÕ'.
    ai_output(self, hero, "Info_SLD_732_Parole_FALSE2_08_02"); //ÍÅÂÅÐÍÎ!
    ai_stopprocessinfos(self);
};

func void info_sld_732_parole_true() {
    var c_npc guard;

    ai_output(hero, self, "Info_SLD_732_Parole_TRUE_15_01"); //Ïàðîëü: 'ÒÅÒÐÈÀÍÄÎÕ'.
    ai_output(self, hero, "Info_SLD_732_Parole_TRUE_08_02"); //Âåðíî. Òû ìîæåøü ïðîéòè.
    ai_stopprocessinfos(self);
    guard = hlp_getnpc(sld_723_soeldner);
    hero.aivar[27] = aiv_gps_begin;
    self.aivar[29] = true;
    guard.aivar[29] = true;
    b_givexp(xp_saycorrectparole);
};

instance info_sld_732_lastwarn(c_info) {
    npc = sld_732_soeldner /*8092*/;
    nr = 2;
    condition = info_sld_732_lastwarn_condition;
    information = info_sld_732_lastwarn_info;
    permanent = true;
    important = true;
};

func int info_sld_732_lastwarn_condition() {
    if ((((hero.aivar[27] == aiv_gps_firstwarn) && (self.aivar[29] == false)) && (npc_getdisttowp(hero, sld_732_checkpoint) < (hero.aivar[28] - 100))) && hlp_strcmp(npc_getnearestwp(self), self.wp)) {
        return true;
    };
};

func int info_sld_732_lastwarn_info() {
    ai_output(self, hero, "Info_SLD_732_LastWarn_08_01"); //ÍÈ ØÀÃÓ ÄÀËÜØÅ! Ïîâòîðÿòü íå áóäó!
    hero.aivar[28] = npc_getdisttowp(hero, sld_732_checkpoint);
    hero.aivar[27] = aiv_gps_lastwarn;
    ai_stopprocessinfos(self);
};

instance info_sld_732_attack(c_info) {
    npc = sld_732_soeldner /*8092*/;
    nr = 3;
    condition = info_sld_732_attack_condition;
    information = info_sld_732_attack_info;
    permanent = true;
    important = true;
};

func int info_sld_732_attack_condition() {
    if ((((hero.aivar[27] == aiv_gps_lastwarn) && (self.aivar[29] == false)) && (npc_getdisttowp(hero, sld_732_checkpoint) < (hero.aivar[28] - 100))) && hlp_strcmp(npc_getnearestwp(self), self.wp)) {
        return true;
    };
};

func int info_sld_732_attack_info() {
    hero.aivar[28] = 0;
    hero.aivar[27] = aiv_gps_punish;
    b_fullstop(self);
    ai_stopprocessinfos(self);
    b_intruderalert(self, other);
    b_setattackreason(self, aiv_ar_intruder);
    npc_settarget(self, hero);
    ai_startstate(self, zs_attack, 1, "");
};

instance info_sld_732_parole(c_info) {
    npc = sld_732_soeldner /*8092*/;
    nr = 10;
    condition = info_sld_732_parole_condition;
    information = info_sld_732_parole_info;
    permanent = true;
    description = "(íàçâàòü ïàðîëü)";
};

func int info_sld_732_parole_condition() {
    if (npc_knowsinfo(hero, info_cronos_sleeper /*10263*/) && (self.aivar[29] == false)) {
        return true;
    };
};

func int info_sld_732_parole_info() {
    info_clearchoices(info_sld_732_parole /*12112*/);
    info_addchoice(info_sld_732_parole /*12112*/, "ß çäåñü ñ ðàçðåøåíèÿ Êðîíîñà!", info_sld_732_parole_cronos);
    info_addchoice(info_sld_732_parole /*12112*/, "×åðò, ÿ çàáûë åãî!", info_sld_732_parole_forgot);
    info_addchoice(info_sld_732_parole /*12112*/, "Ïàðîëü: 'ÒÅÐÈÀÍÒÐÎÕ'.", info_sld_732_parole_false2);
    info_addchoice(info_sld_732_parole /*12112*/, "Ïàðîëü: 'ÒÅÒÐÈÀÍÄÎÕ'.", info_sld_732_parole_true);
    info_addchoice(info_sld_732_parole /*12112*/, "Ïàðîëü: 'ÒÅÒÐÈÄÀÍÎÕ'.", info_sld_732_parole_false1);
};

instance dia_torlof_exit(c_info) {
    npc = sld_737_torlof /*8102*/;
    nr = 999;
    condition = dia_torlof_exit_condition;
    information = dia_torlof_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_torlof_exit_condition() {
    return 1;
};

func void dia_torlof_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_torlof_hallo(c_info) {
    npc = sld_737_torlof /*8102*/;
    nr = 1;
    condition = dia_torlof_hallo_condition;
    information = dia_torlof_hallo_info;
    description = "Êàê òåáÿ çîâóò?";
};

func int dia_torlof_hallo_condition() {
    return 1;
};

func void dia_torlof_hallo_info() {
    ai_output(other, self, "DIA_Torlof_Hallo_15_00"); //Êàê òåáÿ çîâóò?
    ai_output(self, other, "DIA_Torlof_Hallo_04_01"); //Ìåíÿ çîâóò Òîðëîô.
    ai_output(self, other, "DIA_Torlof_Hallo_04_02"); //ß ñëóæèë ñòàðøèì ïîìîùíèêîì íà âîåííîì êîðàáëå è ïðèíÿë ó÷àñòèå â ìÿòåæå.
    ai_output(self, other, "DIA_Torlof_Hallo_04_03"); //Íè÷åãî èç ýòîé çàòåè íå âûøëî. Áîëüøàÿ ÷àñòü êîìàíäû îêàçàëàñü íà ñòîðîíå êàïèòàíà.
    ai_output(self, other, "DIA_Torlof_Hallo_04_04"); //Òàê ÿ ïîïàë ñþäà.
};

instance dia_torlof_mitmachen(c_info) {
    npc = sld_737_torlof /*8102*/;
    nr = 2;
    condition = dia_torlof_mitmachen_condition;
    information = dia_torlof_mitmachen_info;
    permanent = true;
    description = "ß õî÷ó ïðèñîåäèíèòüñÿ ê âàì!";
};

func int dia_torlof_mitmachen_condition() {
    if ((npc_gettrueguild(hero) == gil_none) || (npc_gettrueguild(hero) == gil_org)) {
        return 1;
    };
};

func void dia_torlof_mitmachen_info() {
    ai_output(other, self, "DIA_Torlof_Mitmachen_15_00"); //ß õî÷ó ïðèñîåäèíèòüñÿ ê âàì!
    ai_output(self, other, "DIA_Torlof_Mitmachen_04_01"); //Ëè íå ïðèìåò òåáÿ â îòðÿä, ïîêà íå óçíàåò, ÷åãî òû ñòîèøü.
    ai_output(self, other, "DIA_Torlof_Mitmachen_04_02"); //À äî òåõ ïîð òåáå ëó÷øå ïîääåðæèâàòü õîðîøèå îòíîøåíèÿ ñ Ëàðñîì è åãî øàéêîé.
    ai_output(self, other, "DIA_Torlof_Mitmachen_04_03"); //Åñëè íóæåí ñîâåò, ÿ ñêàæó òåáå âîò ÷òî: äîáóäü ÷òî-íèáóäü âàæíîå èç Ñòàðîãî Ëàãåðÿ èëè Ñòàðîé Øàõòû.
    ai_output(self, other, "DIA_Torlof_Mitmachen_04_04"); //Êàê òîëüêî ýòè ïàðíè ïîéìóò, ÷òî òû òîæå ïðîòèâ Ãîìåçà, ïðîáëåì ó òåáÿ ñòàíåò çíà÷èòåëüíî ìåíüøå.
    ai_output(other, self, "DIA_Torlof_Mitmachen_15_05"); //È êàê ýòî ïðîâåðíóòü?
    ai_output(self, other, "DIA_Torlof_Mitmachen_04_06"); //Ñíà÷àëà òåáå ïðèäåòñÿ çàâîåâàòü èõ ÄÎÂÅÐÈÅ - è òîëüêî ïîòîì îãðàáèòü.
};

instance dia_sld_751_soeldner_intro(c_info) {
    npc = sld_751_soeldner /*8108*/;
    condition = dia_sld_751_soeldner_intro_condition;
    information = dia_sld_751_soeldner_intro_info;
    important = true;
};

func int dia_sld_751_soeldner_intro_condition() {
    if (npc_getdisttonpc(self, hero) < 300) {
        return 1;
    };
};

func void dia_sld_751_soeldner_intro_info() {
    ai_output(self, other, "DIA_SLD_751_Soeldner_INTRO_INFO_01_01"); //À, ïîñåòèòåëü! Ñìîòðè, ÷òîáû âñå áûëî òèõî, èëè òû îá ýòîì êðóïíî ïîæàëååøü!
};

instance dia_sld_751_soeldner_exit_1(c_info) {
    npc = sld_751_soeldner /*8108*/;
    nr = 999;
    condition = dia_sld_751_soeldner_exit_1_condition;
    information = dia_sld_751_soeldner_exit_1_info;
    description = dialog_ende;
};

func int dia_sld_751_soeldner_exit_1_condition() {
    return 1;
};

func void dia_sld_751_soeldner_exit_1_info() {
    ai_output(other, self, "DIA_SLD_751_Soeldner_EXIT_1_INFO_15_01"); //ß ëó÷øå ïîéäó.
    ai_output(self, other, "DIA_SLD_751_Soeldner_EXIT_1_INFO_01_02"); //Íàäåþñü, ìû ïîíèìàåì äðóã äðóãà.
    ai_stopprocessinfos(self);
};

instance dia_sld_751_soeldner_exit_2(c_info) {
    npc = sld_751_soeldner /*8108*/;
    nr = 999;
    condition = dia_sld_751_soeldner_exit_2_condition;
    information = dia_sld_751_soeldner_exit_2_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_sld_751_soeldner_exit_2_condition() {
    if (npc_knowsinfo(hero, dia_sld_751_soeldner_exit_1 /*12127*/)) {
        return 1;
    };
};

func void dia_sld_751_soeldner_exit_2_info() {
    ai_output(other, self, "DIA_SLD_751_Soeldner_EXIT_2_INFO_15_01"); //Ìíå ïîðà èäòè.
    ai_output(self, other, "DIA_SLD_751_Soeldner_EXIT_2_INFO_01_02"); //Íó, èäè.
    ai_stopprocessinfos(self);
};

instance dia_sld_751_soeldner_umsehen(c_info) {
    npc = sld_751_soeldner /*8108*/;
    nr = 0;
    condition = dia_sld_751_soeldner_umsehen_condition;
    information = dia_sld_751_soeldner_umsehen_info;
    description = "ß ïðîñòî õîòåë íåìíîãî îãëÿäåòüñÿ.";
};

func int dia_sld_751_soeldner_umsehen_condition() {
    return 1;
};

func void dia_sld_751_soeldner_umsehen_info() {
    ai_output(other, self, "DIA_SLD_751_Soeldner_UMSEHEN_INFO_15_01"); //ß áû õîòåë íåìíîãî îãëÿäåòüñÿ.
    ai_output(self, other, "DIA_SLD_751_Soeldner_UMSEHEN_INFO_01_02"); //Òîëüêî ïîñòàðàéñÿ íå îòäàâèòü êîìó-íèáóäü ëþáèìóþ ìîçîëü.
};

instance dia_sld_751_soeldner_inmine(c_info) {
    npc = sld_751_soeldner /*8108*/;
    nr = 0;
    condition = dia_sld_751_soeldner_inmine_condition;
    information = dia_sld_751_soeldner_inmine_info;
    description = "ß õî÷ó çàéòè â øàõòó.";
};

func int dia_sld_751_soeldner_inmine_condition() {
    return 1;
};

func void dia_sld_751_soeldner_inmine_info() {
    ai_output(other, self, "DIA_SLD_751_Soeldner_INMINE_INFO_15_01"); //ß õî÷ó çàãëÿíóòü â øàõòó.
    ai_output(self, other, "DIA_SLD_751_Soeldner_INMINE_INFO_01_02"); //Íå äóìàþ, ÷òî òåáå ýòî óäàñòñÿ, íî ïîïðîáóé ïîãîâîðèòü ñ Îêèëîì.
};

instance dia_sld_752_okyl_intro(c_info) {
    npc = sld_752_okyl /*8110*/;
    condition = dia_sld_752_okyl_intro_condition;
    information = dia_sld_752_okyl_intro_info;
    important = true;
};

func int dia_sld_752_okyl_intro_condition() {
    if (npc_getdisttonpc(self, hero) < 250) {
        return 1;
    };
};

func void dia_sld_752_okyl_intro_info() {
    ai_output(self, other, "DIA_SLD_752_OKYL_INTRO_INFO_11_01"); //Ýé, òû! Òû âåäü íå èç ìîèõ ëþäåé! ×òî òû çäåñü äåëàåøü?
};

instance dia_sld_752_okyl_exit(c_info) {
    npc = sld_752_okyl /*8110*/;
    nr = 999;
    condition = dia_sld_752_okyl_exit_condition;
    information = dia_sld_752_okyl_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_sld_752_okyl_exit_condition() {
    return 1;
};

func void dia_sld_752_okyl_exit_info() {
    ai_output(other, self, "DIA_SLD_752_OKYL_EXIT_INFO_15_01"); //Ìíå ïîðà èäòè.
    ai_output(self, other, "DIA_SLD_752_OKYL_EXIT_INFO_11_02"); //Âîò è èäè ñåáå.
    ai_stopprocessinfos(self);
};

instance dia_sld_752_okyl_umsehen(c_info) {
    npc = sld_752_okyl /*8110*/;
    nr = 0;
    condition = dia_sld_752_okyl_umsehen_condition;
    information = dia_sld_752_okyl_umsehen_info;
    description = "ß áû õîòåë íåìíîãî îãëÿäåòüñÿ.";
};

func int dia_sld_752_okyl_umsehen_condition() {
    return 1;
};

func void dia_sld_752_okyl_umsehen_info() {
    ai_output(other, self, "DIA_SLD_752_OKYL_UMSEHEN_INFO_15_01"); //ß áû õîòåë íåìíîãî îãëÿäåòüñÿ.
    ai_output(self, other, "DIA_SLD_752_OKYL_UMSEHEN_INFO_11_02"); //Òîëüêî çàïîìíè: çäåñü, â Ëîùèíå, íàì íå íóæíû íåïðèÿòíîñòè. Çàáóäåøü îá ýòîì - è îêàæåøüñÿ íà ïîëìåòðà ïîä çåìëåé áûñòðåå, ÷åì ðàññ÷èòûâàåøü.
};

instance dia_sld_752_okyl_werbistdu(c_info) {
    npc = sld_752_okyl /*8110*/;
    nr = 0;
    condition = dia_sld_752_okyl_werbistdu_condition;
    information = dia_sld_752_okyl_werbistdu_info;
    description = "Êàê òåáÿ çîâóò?";
};

func int dia_sld_752_okyl_werbistdu_condition() {
    return 1;
};

func void dia_sld_752_okyl_werbistdu_info() {
    ai_output(other, self, "DIA_SLD_752_OKYL_WERBISTDU_INFO_15_01"); //Êàê òåáÿ çîâóò?
    ai_output(self, other, "DIA_SLD_752_OKYL_WERBISTDU_INFO_11_02"); //ß Îêèë. Çäåñü, â Ëîùèíå, ÿ ãëàâíûé.
};

instance dia_sld_752_okyl_inmine(c_info) {
    npc = sld_752_okyl /*8110*/;
    nr = 0;
    condition = dia_sld_752_okyl_inmine_condition;
    information = dia_sld_752_okyl_inmine_info;
    description = "ß ïðîñòî õîòåë çàãëÿíóòü â øàõòó.";
};

func int dia_sld_752_okyl_inmine_condition() {
    return 1;
};

func void dia_sld_752_okyl_inmine_info() {
    ai_output(other, self, "DIA_SLD_752_OKYL_INMINE_INFO_15_01"); //ß ïðîñòî õîòåë çàãëÿíóòü â øàõòó.
    ai_output(self, other, "DIA_SLD_752_OKYL_INMINE_INFO_11_02"); //À, ïðîñòî ïîáðîäèòü ïî øàõòå.
    ai_output(self, other, "DIA_SLD_752_OKYL_INMINE_INFO_11_03"); //Ïîõîæå, òû äåéñòâèòåëüíî íè ÷åðòà íå ïîíèìàåøü. ÍÈÊÒÎ íå ïîïàäåò â øàõòó áåç ìîåãî ðàçðåøåíèÿ!
    ai_output(self, other, "DIA_SLD_752_OKYL_INMINE_INFO_11_04"); //È çàïîìíè: ñóíåøü áåç ñïðîñà ñâîé íîñ â øàõòó èëè â êàðàóëêó - òû ïîêîéíèê!
};

instance dia_sld_752_okyl_permit(c_info) {
    npc = sld_752_okyl /*8110*/;
    nr = 0;
    condition = dia_sld_752_okyl_permit_condition;
    information = dia_sld_752_okyl_permit_info;
    description = "Íó òàê ìíå ìîæíî çàéòè?";
};

func int dia_sld_752_okyl_permit_condition() {
    if (npc_knowsinfo(hero, dia_sld_752_okyl_inmine /*12151*/)) {
        return 1;
    };
};

func void dia_sld_752_okyl_permit_info() {
    ai_output(other, self, "DIA_SLD_752_OKYL_PERMIT_INFO_15_01"); //Íó òàê ìíå ìîæíî çàéòè?
    ai_output(self, other, "DIA_SLD_752_OKYL_PERMIT_INFO_11_02"); //ß òåáÿ äàæå íå çíàþ. Ïî÷åìó ÿ äîëæåí ïðîïóñêàòü òåáÿ â øàõòó?
    ai_output(self, other, "DIA_SLD_752_OKYL_PERMIT_INFO_11_03"); //È âîîáùå, ïðîâàëèâàé, ó ìåíÿ åñòü äåëà.
    ai_stopprocessinfos(self);
};

var int sld_753_baloro_sc_choice;

var int sld_753_baloro_sc_wills_wissen;

var int sld_753_baloro_sc_besorgt_den_kram;

instance dia_sld_753_baloro(c_info) {
    npc = sld_753_baloro /*8112*/;
    condition = dia_sld_753_baloro_condition;
    information = dia_sld_753_baloro_intro_info;
    important = true;
};

func int dia_sld_753_baloro_condition() {
    return 1;
};

func void dia_sld_753_baloro_intro_info() {
    ai_output(self, other, "DIA_SLD_753_Baloro_Intro_08_01"); //Ýé, òû! ×òî çà äåëà?
};

instance dia_sld_753_baloro_wasmeinstdu(c_info) {
    npc = sld_753_baloro /*8112*/;
    nr = 0;
    condition = dia_sld_753_baloro_wasmeinstdu_condition;
    information = dia_sld_753_baloro_wasmeinstdu_info;
    description = "Ïðèâåò!";
};

func int dia_sld_753_baloro_wasmeinstdu_condition() {
    return 1;
};

func void dia_sld_753_baloro_wasmeinstdu_info() {
    ai_output(other, self, "DIA_SLD_753_Baloro_Wasmeinstdu_Info_15_01"); //Ïðèâåò!
    ai_output(self, other, "DIA_SLD_753_Baloro_Wasmeinstdu_Info_08_02"); //Òû ðàñõàæèâàåøü çäåñü, êàê áóäòî èùåøü ÷òî-òî!
    ai_output(other, self, "DIA_SLD_753_Baloro_Wasmeinstdu_Info_15_03"); //Â ñàìîì äåëå? Ì-ì, ìîæåò áûòü, òû è ïðàâ.
    ai_output(self, other, "DIA_SLD_753_Baloro_Wasmeinstdu_Info_08_04"); //Íó, çäîðîâî! Ñïðîñè ìåíÿ - ìîæåò áûòü ÿ ñìîãó ïîìî÷ü!
};

instance dia_sld_753_baloro_worumgehts(c_info) {
    npc = sld_753_baloro /*8112*/;
    nr = 0;
    condition = dia_sld_753_baloro_worumgehts_condition;
    information = dia_sld_753_baloro_worumgehts_info;
    description = "×òî òû èìååøü â âèäó?";
};

func int dia_sld_753_baloro_worumgehts_condition() {
    if (npc_knowsinfo(hero, dia_sld_753_baloro_wasmeinstdu /*12163*/) && (sld_753_baloro_sc_choice == 0)) {
        return 1;
    };
};

func void dia_sld_753_baloro_worumgehts_info() {
    ai_output(other, self, "DIA_SLD_753_Baloro_Worumgehts_Info_15_01"); //×òî òû èìååøü â âèäó?
    ai_output(self, other, "DIA_SLD_753_Baloro_Worumgehts_Info_08_01"); //×òî òåáå íóæíî?
    ai_output(other, self, "DIA_SLD_753_Baloro_Worumgehts_Info_15_02"); //Êàê íàñ÷åò õîðîøåãî ìÿ÷à, òÿæåëûõ äîñïåõîâ è äîïóñêà â øàõòó?
    ai_output(self, other, "DIA_SLD_753_Baloro_Worumgehts_Info_08_02"); //Äà ëàäíî! Ýòî âñå åðóíäà!
    ai_output(self, other, "DIA_SLD_753_Baloro_Worumgehts_Info_08_03"); //À êàê íàñ÷åò îðóæèÿ, êîòîðûì ìîæíî ïîáåäèòü ëþáîãî âðàãà. Óâèäèøü - ãëàçà íà ëîá ïîëåçóò îò èçóìëåíèÿ!
    ai_output(self, other, "DIA_SLD_753_Baloro_Worumgehts_Info_08_04"); //ß ïðîøó âñåãî ëèøü î ìà-àëåíüêîé óñëóãå. Ïîìîæåøü ìíå - è îíî áóäåò òâîèì. ×òî ñêàæåøü?
    info_clearchoices(dia_sld_753_baloro_worumgehts /*12166*/);
    info_addchoice(dia_sld_753_baloro_worumgehts /*12166*/, "ß äîëæåí ïîëó÷èòü åãî.", dia_sld_753_baloro_worumgehts_ja);
    info_addchoice(dia_sld_753_baloro_worumgehts /*12166*/, "ß åìó íå âåðþ.", dia_sld_753_baloro_exit_info);
};

func void dia_sld_753_baloro_worumgehts_ja() {
    ai_output(other, self, "DIA_SLD_753_Baloro_Worumgehts_ja_15_05"); //×òî ìíå íóæíî ñäåëàòü?
    ai_output(self, other, "DIA_SLD_753_Baloro_Worumgehts_ja_08_03"); //Âñå î÷åíü ïðîñòî!
    ai_output(self, other, "DIA_SLD_753_Baloro_Worumgehts_ja_08_04"); //Ïðèíåñè ìíå 5 ÿáëîê, 2 áóòûëêè ðèñîâîãî øíàïñà, 5 áóòûëîê ïèâà, 3 áóõàíêè õëåáà, 2 êóñêà ñûðà è 2 ãðîçäè âèíîãðàäà - âîò è âñå, î ÷åì ÿ ïðîøó!
    ai_output(self, other, "DIA_SLD_753_Baloro_Worumgehts_ja_08_05"); //Ïîâåðü ìíå, òû íå ïîæàëååøü. ß óæå ãîâîðèë òåáå, ÷òî ýòèì îðóæèåì ìîæíî ïîáåäèòü ëþáîãî âðàãà?
    info_clearchoices(dia_sld_753_baloro_worumgehts /*12166*/);
    info_addchoice(dia_sld_753_baloro_worumgehts /*12166*/, "ß äîëæåí ïîëó÷èòü åãî.", dia_sld_753_baloro_worumgehts_jaklar);
    info_addchoice(dia_sld_753_baloro_worumgehts /*12166*/, "Ìàëûé îáèæàåòñÿ.", dia_sld_753_baloro_exit_info);
};

func void dia_sld_753_baloro_worumgehts_jaklar() {
    ai_output(other, self, "DIA_SLD_753_Baloro_Worumgehts_ja_15_06"); //Ëàäíî! Ïîñìîòðèì, ÷òî ÿ ñìîãó äëÿ òåáÿ ñäåëàòü!
    ai_output(self, other, "DIA_SLD_753_Baloro_Worumgehts_ja_08_06"); //Îòëè÷íî! Íî ïîòîðîïèñü!
    ai_output(self, other, "DIA_SLD_753_Baloro_Worumgehts_ja_08_07"); //È íå çàáóäü: 5 ÿáëîê, 2 áóòûëêè ðèñîâîãî øíàïñà, 5 áóòûëîê ïèâà, 3 áóõàíêè õëåáà, 2 êóñêà ñûðà è 2 ãðîçäè âèíîãðàäà! Çàïîìíèë?
    ai_output(other, self, "DIA_SLD_753_Baloro_Worumgehts_ja_15_07"); //Êîíå÷íî!
    sld_753_baloro_sc_besorgt_den_kram = log_running;
    log_createtopic(baloros_waffe, log_mission);
    log_settopicstatus(baloros_waffe, log_running);
    b_logentry(baloros_waffe, baloros_waffe_1);
    ai_stopprocessinfos(self);
};

instance dia_sld_753_baloro_habsnichtdabei(c_info) {
    npc = sld_753_baloro /*8112*/;
    nr = 0;
    condition = dia_sld_753_baloro_habsnichtdabei_condition;
    information = dia_sld_753_baloro_habsnichtdabei_info;
    permanent = true;
    description = "ß åùå íå âñå äîñòàë! ";
};

func int dia_sld_753_baloro_habsnichtdabei_condition() {
    if (sld_753_baloro_sc_besorgt_den_kram == log_running) {
        return 1;
    };
};

func void dia_sld_753_baloro_habsnichtdabei_info() {
    ai_output(other, self, "DIA_SLD_753_Baloro_habsnichtdabei_Info_15_01"); //ß åùå íå âñå äîñòàë! Òàê ìíîãî âñåãî. Êàê òàì, åùå ðàç?
    ai_output(self, other, "DIA_SLD_753_Baloro_habsnichtdabei_Info_08_01"); //Ëàäíî, ïîâòîðÿþ ìåäëåííî. Ìíå íóæíî...
    ai_output(self, other, "DIA_SLD_753_Baloro_habsnichtdabei_Info_08_02"); //5 ÿáëîê, 2 áóòûëêè ðèñîâîãî øíàïñà, 5 áóòûëîê ïèâà, 3 áóõàíêè õëåáà, 2 êóñêà ñûðà è 2 ãðîçäè âèíîãðàäà. Íà ýòîò ðàç çàïîìíèë?
    ai_output(other, self, "DIA_SLD_753_Baloro_habsnichtdabei_Info_15_02"); //Õîðîøî! Êîíå÷íî! ß ïîñòàðàþñü ïîáûñòðåå!
    ai_stopprocessinfos(self);
};

instance dia_sld_753_baloro_habsdabei(c_info) {
    npc = sld_753_baloro /*8112*/;
    nr = 0;
    condition = dia_sld_753_baloro_habsdabei_condition;
    information = dia_sld_753_baloro_habsdabei_info;
    description = "Òåïåðü ÿ äîñòàë âñå, ÷òî íóæíî! ";
};

func int dia_sld_753_baloro_habsdabei_condition() {
    if (((((((((sld_753_baloro_sc_besorgt_den_kram == log_running) && npc_knowsinfo(hero, dia_sld_753_baloro_worumgehts /*12166*/)) && (sld_753_baloro_sc_choice == 0)) && (npc_hasitems(other, itfoapple) >= 5)) && (npc_hasitems(other, itfobooze) >= 2)) && (npc_hasitems(other, itfobeer) >= 5)) && (npc_hasitems(other, itfoloaf) >= 3)) && (npc_hasitems(other, itfocheese) >= 2)) && (npc_hasitems(other, itfo_wineberrys_01) >= 2)) {
        return 1;
    };
};

func void dia_sld_753_baloro_habsdabei_info() {
    ai_output(other, self, "DIA_SLD_753_Baloro_habsdabei_Info_15_01"); //Òåïåðü ÿ äîñòàë âñå, ÷òî íóæíî! È ãäå òâîå ñóïåðîðóæèå?
    ai_output(self, other, "DIA_SLD_753_Baloro_habsdabei_Info_08_01"); //Ñíà÷àëà ïîêàæè, ÷òî òû ïðèíåñ!
    createinvitems(other, itfoapple, 14);
    b_giveinvitems(other, self, itfoapple /*4302*/, 19);
    npc_removeinvitems(other, itfobooze, 2);
    npc_removeinvitems(other, itfobeer, 5);
    npc_removeinvitems(other, itfoloaf, 3);
    npc_removeinvitems(other, itfocheese, 2);
    npc_removeinvitems(other, itfo_wineberrys_01, 2);
    npc_removeinvitems(self, itfoapple, 14);
    createinvitems(self, itfobooze, 2);
    createinvitems(self, itfobeer, 5);
    createinvitems(self, itfoloaf, 3);
    createinvitems(self, itfocheese, 2);
    createinvitems(self, itfo_wineberrys_01, 2);
    ai_output(other, self, "DIA_SLD_753_Baloro_habsdabei_Info_15_02"); //Âîò, çäåñü âñå, ÷òî òû çàêàçûâàë!
    ai_output(self, other, "DIA_SLD_753_Baloro_habsdabei_Info_08_02"); //Äà, êðóòî!
    ai_output(other, self, "DIA_SLD_753_Baloro_habsdabei_Info_15_03"); //Òåïåðü òû äàâàé, ÷òî îáåùàë!
    ai_output(self, other, "DIA_SLD_753_Baloro_habsdabei_Info_08_03"); //Äà ëàäíî, çàáóäü îá ýòîì!
    ai_output(other, self, "DIA_SLD_753_Baloro_habsdabei_Info_15_04"); //×ÒÎ???
    ai_output(self, other, "DIA_SLD_753_Baloro_habsdabei_Info_08_04"); //Òû ÷òî, è â ñàìîì äåëå ïîâåðèë, ÷òî ÿ òåáå ÷òî-òî îòäàì âçàìåí? Åñëè òû íàñòîëüêî ãëóï, òåáÿ ïðîñòî íåëüçÿ áûëî íå íàäóòü!
    ai_output(self, other, "DIA_SLD_753_Baloro_habsdabei_Info_08_05"); //Íåïîíÿòíî âîîáùå, êàê òû åùå æèâ! Åñëè áóäåøü âåðèòü âñåìó, ÷òî òåáå ãîâîðÿò, äîëãî òû çäåñü íå ïðîòÿíåøü!
    ai_output(self, other, "DIA_SLD_753_Baloro_habsdabei_Info_08_06"); //Íî ýòî íå âàæíî. Òåïåðü ó íàñ åñòü âñå äëÿ õîðîøåé âå÷åðèíêè! Áîëüøîå ñïàñèáî! Ìîæåò áûòü, ìû åùå êîãäà-íèáóäü âñòðåòèìñÿ. Õà, õà, õà!
    sld_753_baloro_sc_besorgt_den_kram = log_success;
    b_givexp(300);
    b_logentry(baloros_waffe, baloros_waffe_2);
    log_settopicstatus(baloros_waffe, log_success);
    ai_stopprocessinfos(self);
};

instance dia_sld_753_baloro_letztes_wort(c_info) {
    npc = sld_753_baloro /*8112*/;
    nr = 0;
    condition = dia_sld_753_baloro_letztes_wort_condition;
    information = dia_sld_753_baloro_letztes_wort_info;
    description = "Ýé, ïàðåíü! Òû íå äîëæåí òàê ïîñòóïàòü! ";
};

func int dia_sld_753_baloro_letztes_wort_condition() {
    if (sld_753_baloro_sc_besorgt_den_kram == log_success) {
        return 1;
    };
};

func void dia_sld_753_baloro_letztes_wort_info() {
    ai_output(other, self, "DIA_SLD_753_Baloro_letztes_Wort_Info_15_01"); //Ýé, ïàðåíü! Òû íå äîëæåí òàê ïîñòóïàòü!
    ai_output(self, other, "DIA_SLD_753_Baloro_letztes_Wort_Info_08_01"); //×åãî òåáå åùå íóæíî? Ïðîâàëèâàé! Èäè, äåéñòâóé åùå êîìó-íèáóäü íà íåðâû - òîëüêî íå ìíå. Óñåê?
    sld_753_baloro_sc_wills_wissen = 1;
    ai_stopprocessinfos(self);
};

instance dia_sld_753_baloro_sc_wills_wissen(c_info) {
    npc = sld_753_baloro /*8112*/;
    nr = 0;
    condition = dia_sld_753_baloro_sc_wills_wissen_condition;
    information = dia_sld_753_baloro_sc_wills_wissen_info;
    description = "Ïîõîæå, ìíå âñå-òàêè ïðèäåòñÿ òåáå âðåçàòü!";
};

func int dia_sld_753_baloro_sc_wills_wissen_condition() {
    if (sld_753_baloro_sc_wills_wissen == 1) {
        return 1;
    };
};

func void dia_sld_753_baloro_attack() {
    ai_stopprocessinfos(self);
    npc_settarget(self, hero);
    ai_startstate(self, zs_attack, 1, "");
};

func void dia_sld_753_baloro_sc_wills_wissen_info() {
    ai_output(other, self, "DIA_SLD_753_Baloro_SC_wills_wissen_Info_15_01"); //Ïîõîæå, ìíå âñå-òàêè ïðèäåòñÿ òåáå âðåçàòü!
    ai_output(self, other, "DIA_SLD_753_Baloro_SC_wills_wissen_Info_08_01"); //Ìû ñëàâíî ïîâåñåëèëèñü. À òåïåðü ïðîâàëèâàé, ïàðåíü!
    ai_output(other, self, "DIA_SLD_753_Baloro_SC_wills_wissen_Info_15_02"); //Ïîõîæå, òû ìåíÿ íå ïîíÿë!
    ai_output(self, other, "DIA_SLD_753_Baloro_SC_wills_wissen_Info_08_02"); //Íó ëàäíî. Òû ñàì íàïðîñèëñÿ! À ÿ ïðåäóïðåæäàë!
    dia_sld_753_baloro_attack();
};

instance dia_sld_753_baloro_exit(c_info) {
    npc = sld_753_baloro /*8112*/;
    nr = 999;
    condition = dia_sld_753_baloro_exit_condition;
    information = dia_sld_753_baloro_exit_info;
    permanent = true;
    description = "Ìíå ïîðà èäòè.";
};

func int dia_sld_753_baloro_exit_condition() {
    if ((sld_753_baloro_sc_wills_wissen == 0) && (sld_753_baloro_sc_besorgt_den_kram == 0)) {
        return 1;
    };
};

func void dia_sld_753_baloro_exit_info() {
    if (npc_knowsinfo(hero, dia_sld_753_baloro_wasmeinstdu /*12163*/) && (sld_753_baloro_sc_choice == 0)) {
        ai_output(other, self, "DIA_SLD_753_Baloro_Exit_Info_15_01"); //Íåò, íåò! Çàáóäü! Ìíå ýòî íå íóæíî!
        ai_output(self, other, "DIA_SLD_753_Baloro_Exit_Info_08_02"); //Íó è õîðîøî. Êàê ñêàæåøü! ß äàë òåáå øàíñ.
        sld_753_baloro_sc_choice = 1;
    }
    else {
        ai_output(other, self, "DIA_SLD_753_Baloro_Exit_Info_15_03"); //Èçâèíè, íåò âðåìåíè ïîáîëòàòü ñ òîáîé åùå!
        ai_output(self, other, "DIA_SLD_753_Baloro_Exit_Info_08_04"); //À, òàê òû çàíÿòîé ÷åëîâåê! Íó, åùå óâèäèìñÿ!
    };
    ai_stopprocessinfos(self);
};

instance dia_sld_753_baloro_angebotdochannehmen(c_info) {
    npc = sld_753_baloro /*8112*/;
    nr = 0;
    condition = dia_sld_753_baloro_angebotdochannehmen_condition;
    information = dia_sld_753_baloro_angebotdochannehmen_info;
    description = "Çíàåøü, ÿ òóò ïîäóìàë... Ìîæåò, âåðíåìñÿ ê òâîåìó ïðåäëîæåíèþ?";
};

func int dia_sld_753_baloro_angebotdochannehmen_condition() {
    if (sld_753_baloro_sc_choice == 1) {
        return 1;
    };
};

func void dia_sld_753_baloro_angebotdochannehmen_info() {
    ai_output(other, self, "DIA_SLD_753_Baloro_Angebotdochannehmen_Info_15_01"); //Çíàåøü, ÿ òóò ïîäóìàë... Ìîæåò, âåðíåìñÿ ê òâîåìó ïðåäëîæåíèþ?
    ai_output(self, other, "DIA_SLD_753_Baloro_Angebotdochannehmen_Info_08_01"); //Íåò, òåïåðü óæå ñëèøêîì ïîçäíî. Òû óïóñòèë ñâîé øàíñ!
    ai_stopprocessinfos(self);
};

instance dia_sld_760_soeldner_intro(c_info) {
    npc = sld_760_soeldner /*8124*/;
    condition = dia_sld_760_soeldner_intro_condition;
    information = dia_sld_760_soeldner_intro_info;
    important = true;
};

func int dia_sld_760_soeldner_intro_condition() {
    if (npc_getdisttonpc(self, hero) < 200) {
        return 1;
    };
};

func void dia_sld_760_soeldner_intro_info() {
    ai_output(self, other, "DIA_SLD_760_Soeldner_INTRO_INFO_13_01"); //×òî òû çäåñü øëÿåøüñÿ? Âîò ÷òî, ïðèÿòåëü: äåðæèñü ïîäàëüøå îò ýòîé äâåðè!
};

instance dia_sld_760_soeldner_exit_1(c_info) {
    npc = sld_760_soeldner /*8124*/;
    nr = 999;
    condition = dia_sld_760_soeldner_exit_1_condition;
    information = dia_sld_760_soeldner_exit_1_info;
    description = dialog_ende;
};

func int dia_sld_760_soeldner_exit_1_condition() {
    return 1;
};

func void dia_sld_760_soeldner_exit_1_info() {
    ai_output(other, self, "DIA_SLD_760_Soeldner_EXIT_1_INFO_15_01"); //ß ëó÷øå ïîéäó.
    ai_output(self, other, "DIA_SLD_760_Soeldner_EXIT_1_INFO_13_02"); //Ðàä, ÷òî ìû ïîíèìàåì äðóã äðóãà.
    ai_stopprocessinfos(self);
};

instance dia_sld_760_soeldner_exit_2(c_info) {
    npc = sld_760_soeldner /*8124*/;
    nr = 999;
    condition = dia_sld_760_soeldner_exit_2_condition;
    information = dia_sld_760_soeldner_exit_2_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_sld_760_soeldner_exit_2_condition() {
    if (npc_knowsinfo(hero, dia_sld_760_soeldner_exit_1 /*12193*/)) {
        return 1;
    };
};

func void dia_sld_760_soeldner_exit_2_info() {
    ai_output(other, self, "DIA_SLD_760_Soeldner_EXIT_2_INFO_15_01"); //Ìíå ïîðà èäòè.
    ai_output(self, other, "DIA_SLD_760_Soeldner_EXIT_2_INFO_13_02"); //Íó è èäè ñåáå.
    ai_stopprocessinfos(self);
};

instance dia_sld_760_soeldner_umsehen(c_info) {
    npc = sld_760_soeldner /*8124*/;
    nr = 0;
    condition = dia_sld_760_soeldner_umsehen_condition;
    information = dia_sld_760_soeldner_umsehen_info;
    description = "ß ïðîñòî õîòåë íåìíîãî îãëÿäåòüñÿ.";
};

func int dia_sld_760_soeldner_umsehen_condition() {
    return 1;
};

func void dia_sld_760_soeldner_umsehen_info() {
    ai_output(other, self, "DIA_SLD_760_Soeldner_UMSEHEN_INFO_15_01"); //ß ïðîñòî õîòåë íåìíîãî îãëÿäåòüñÿ.
    ai_output(self, other, "DIA_SLD_760_Soeldner_UMSEHEN_INFO_13_02"); //Òîãäà äåðæè ñâîè ðóêè â êàðìàíàõ, èëè ÿ îòðóáëþ èõ ê ÷åðòÿì!
};

instance dia_sld_760_soeldner_inmine(c_info) {
    npc = sld_760_soeldner /*8124*/;
    nr = 0;
    condition = dia_sld_760_soeldner_inmine_condition;
    information = dia_sld_760_soeldner_inmine_info;
    description = "ß õî÷ó çàéòè â øàõòó.";
};

func int dia_sld_760_soeldner_inmine_condition() {
    return 1;
};

func void dia_sld_760_soeldner_inmine_info() {
    ai_output(other, self, "DIA_SLD_760_Soeldner_INMINE_INFO_15_01"); //ß õî÷ó çàéòè â øàõòó.
    ai_output(self, other, "DIA_SLD_760_Soeldner_INMINE_INFO_13_02"); //Â øàõòó? ß íèêîãî íå ïðîïóñêàþ òóäà áåç îñîáîãî ðàçðåøåíèÿ îò Îêèëà.
    if (!npc_knowsinfo(hero, dia_sld_752_okyl_werbistdu /*12148*/)) {
        ai_output(other, self, "DIA_SLD_760_Soeldner_INMINE_INFO_15_03"); //Êòî òàêîé ýòîò Îêèë?
    }
    else {
        ai_output(other, self, "DIA_SLD_760_Soeldner_INMINE_INFO_15_08"); //Îêèë - ýòî òîò ñàìûé òèï ñ áîëüøèì òîïîðîì è â òÿæåëûõ äîñïåõàõ?
    };
    ai_output(self, other, "DIA_SLD_760_Soeldner_INMINE_INFO_13_04"); //Ñëåäè çà ÿçûêîì, îñîáåííî êîãäà ãîâîðèøü ïðî áîññà.
    ai_output(self, other, "DIA_SLD_760_Soeldner_INMINE_INFO_13_05"); //Âîò ÷òî ÿ òåáå ñêàæó, ïàðåíü: Îêèë - ñàìûé êðóòîé òèï âî âñåì Ëàãåðå. Îäíàæäû îí äàæå ïðîáðàëñÿ â çàìîê è îáëåã÷èë ñóíäóêè Áàðîíîâ íà öåëóþ ãîðó ðóäû.
    ai_output(self, other, "DIA_SLD_760_Soeldner_INMINE_INFO_13_06"); //Òàê ÷òî, óæ ïîæàëóéñòà, ïîáîëüøå óâàæåíèÿ â ãîëîñå.
    ai_output(self, other, "DIA_SLD_760_Soeldner_INMINE_INFO_13_07"); //ß íå çíàþ, ãäå îí ñåé÷àñ, íî åñëè òû ñ íèì êîãäà-íèáóäü âñòðåòèøüñÿ, òåáå ëó÷øå íå çàáûâàòü î òîì, ÷òî ÿ òåáå ãîâîðèë.
};

instance dia_sld_761_soeldner_intro(c_info) {
    npc = sld_761_soeldner /*8126*/;
    condition = dia_sld_761_soeldner_intro_condition;
    information = dia_sld_761_soeldner_intro_info;
    important = true;
};

func int dia_sld_761_soeldner_intro_condition() {
    if (npc_getdisttonpc(self, hero) < 300) {
        return 1;
    };
};

func void dia_sld_761_soeldner_intro_info() {
    ai_output(self, other, "DIA_SLD_761_Soeldner_INTRO_INFO_03_01"); //×òî òû äåëàåøü çäåñü, ó âõîäà â øàõòó?
};

instance dia_sld_761_soeldner_exit_1(c_info) {
    npc = sld_761_soeldner /*8126*/;
    nr = 999;
    condition = dia_sld_761_soeldner_exit_1_condition;
    information = dia_sld_761_soeldner_exit_1_info;
    description = dialog_ende;
};

func int dia_sld_761_soeldner_exit_1_condition() {
    return 1;
};

func void dia_sld_761_soeldner_exit_1_info() {
    ai_output(other, self, "DIA_SLD_761_Soeldner_EXIT_1_INFO_15_01"); //Ó ìåíÿ åùå åñòü äåëà.
    ai_output(self, other, "DIA_SLD_761_Soeldner_EXIT_1_INFO_03_02"); //ß òîæå òàê ïîäóìàë.
    ai_stopprocessinfos(self);
};

instance dia_sld_761_soeldner_exit_2(c_info) {
    npc = sld_761_soeldner /*8126*/;
    nr = 999;
    condition = dia_sld_761_soeldner_exit_2_condition;
    information = dia_sld_761_soeldner_exit_2_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_sld_761_soeldner_exit_2_condition() {
    if (npc_knowsinfo(hero, dia_sld_761_soeldner_exit_1 /*12208*/)) {
        return 1;
    };
};

func void dia_sld_761_soeldner_exit_2_info() {
    ai_output(other, self, "DIA_SLD_761_Soeldner_EXIT_2_INFO_15_01"); //ß ëó÷øå ïîéäó.
    ai_output(self, other, "DIA_SLD_761_Soeldner_EXIT_2_INFO_03_02"); //Âîò è õîðîøî.
    ai_stopprocessinfos(self);
};

instance dia_sld_761_soeldner_umsehen(c_info) {
    npc = sld_761_soeldner /*8126*/;
    nr = 0;
    condition = dia_sld_761_soeldner_umsehen_condition;
    information = dia_sld_761_soeldner_umsehen_info;
    description = "ß ïðîñòî õîòåë ïîáðîäèòü ïî Ëàãåðþ.";
};

func int dia_sld_761_soeldner_umsehen_condition() {
    return 1;
};

func void dia_sld_761_soeldner_umsehen_info() {
    ai_output(other, self, "DIA_SLD_761_Soeldner_UMSEHEN_INFO_15_01"); //ß ïðîñòî õîòåë ïîáðîäèòü ïî Ëàãåðþ.
    ai_output(self, other, "DIA_SLD_761_Soeldner_UMSEHEN_INFO_03_02"); //Íî òû ÿâíî çàáðåë íå òóäà, ïîòîìó ÷òî ýòî âõîä â øàõòó, è òåáÿ çäåñü áûòü íå äîëæíî!
};

instance dia_sld_761_soeldner_inmine(c_info) {
    npc = sld_761_soeldner /*8126*/;
    nr = 0;
    condition = dia_sld_761_soeldner_inmine_condition;
    information = dia_sld_761_soeldner_inmine_info;
    description = "ß ïðîñòî õîòåë óâèäåòü øàõòó.";
};

func int dia_sld_761_soeldner_inmine_condition() {
    return 1;
};

func void dia_sld_761_soeldner_inmine_info() {
    ai_output(other, self, "DIA_SLD_761_Soeldner_INMINE_INFO_15_01"); //ß ïðîñòî õîòåë óâèäåòü øàõòó.
    ai_output(self, other, "DIA_SLD_761_Soeldner_INMINE_INFO_03_02"); //ß äóìàþ, òû óæå óâèäåë, ÷òî øàõòà çàïåðòà è ñìîòðåòü çäåñü àáñîëþòíî íå íà ÷òî.
};

instance dia_sld_761_soeldner_bribe(c_info) {
    npc = sld_761_soeldner /*8126*/;
    nr = 0;
    condition = dia_sld_761_soeldner_bribe_condition;
    information = dia_sld_761_soeldner_bribe_info;
    description = "Çíà÷èò, ìû íè÷åãî íå ñìîæåì ñäåëàòü?";
};

func int dia_sld_761_soeldner_bribe_condition() {
    if (npc_knowsinfo(hero, dia_sld_761_soeldner_inmine /*12217*/)) {
        return 1;
    };
};

func void dia_sld_761_soeldner_bribe_info() {
    ai_output(other, self, "DIA_SLD_761_Soeldner_Bribe_INFO_15_01"); //Çíà÷èò, ìû íè÷åãî íå ñìîæåì ñäåëàòü?
    ai_output(self, other, "DIA_SLD_761_Soeldner_Bribe_INFO_03_02"); //ß ÷òî ìû äîëæíû äåëàòü?
    ai_output(self, other, "DIA_SLD_761_Soeldner_Bribe_INFO_03_03"); //Ìèíóòêó! Åñëè òû ïûòàåøüñÿ ïîäêóïèòü ìåíÿ, òî çíàé: òû íå íà òîãî íàïàë, ïðèÿòåëü!
    ai_output(other, self, "DIA_SLD_761_Soeldner_Bribe_INFO_15_04"); //Íåò, ÿ íèêîãî íå õî÷ó ïîäêóïàòü, ÿ ïðîñòî ïîäóìàë...
    ai_output(other, self, "DIA_SLD_761_Soeldner_Bribe_INFO_15_05"); //Äóìàþ, ìíå ëó÷øå óéòè.
    ai_stopprocessinfos(self);
};

instance stt_300_alberto_exit(c_info) {
    npc = stt_300_alberto /*8136*/;
    nr = 999;
    condition = stt_300_alberto_exit_condition;
    information = stt_300_alberto_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int stt_300_alberto_exit_condition() {
    return 1;
};

func void stt_300_alberto_exit_info() {
    ai_stopprocessinfos(self);
};

instance stt_300_alberto_buy(c_info) {
    npc = stt_300_alberto /*8136*/;
    nr = 0;
    condition = stt_300_alberto_buy_condition;
    information = stt_300_alberto_buy_info;
    permanent = true;
    trade = true;
    description = dialog_trade;
};

func int stt_300_alberto_buy_condition() {
    return 1;
};

func void stt_300_alberto_buy_info() {
    ai_output(other, self, "STT_300_Alberto_BUY_Info_15_01"); //Òû ÷òî-íèáóäü ïðîäàåøü?
    ai_output(self, other, "STT_300_Alberto_BUY_Info_12_02"); //Àãà. Âñå ÷òî õî÷åøü. Åñëè ó òåáÿ åñòü ðóäà.
};

instance stt_301_ian_exit(c_info) {
    npc = stt_301_ian /*8138*/;
    nr = 999;
    condition = stt_301_ian_exit_condition;
    information = stt_301_ian_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int stt_301_ian_exit_condition() {
    return 1;
};

func void stt_301_ian_exit_info() {
    ai_output(other, self, "STT_301_IAN_Exit_Info_15_01"); //ß ïðîñòî îñìîòðþñü íåìíîãî.
    ai_output(self, other, "STT_301_IAN_Exit_Info_13_02"); //Òîëüêî ÷òîáû îò òåáÿ íå áûëî íèêàêèõ ïðîáëåì!
    ai_stopprocessinfos(self);
};

instance stt_301_ian_hi(c_info) {
    npc = stt_301_ian /*8138*/;
    nr = 0;
    condition = stt_301_ian_hi_condition;
    information = stt_301_ian_hi_info;
    description = "Òû âåäü ßí, íà÷àëüíèê øàõòû?";
};

func int stt_301_ian_hi_condition() {
    if (!npc_knowsinfo(hero, stt_301_ian_nest /*12256*/)) {
        return true;
    };
};

func void stt_301_ian_hi_info() {
    ai_output(other, self, "STT_301_IAN_HI_Info_15_01"); //Òû âåäü ßí, íà÷àëüíèê øàõòû?
    ai_output(self, other, "STT_301_IAN_HI_Info_13_02"); //Äà, ÿ - ßí. È ýòî ìîÿ øàõòà, òàê ÷òî íè÷åãî çäåñü íå òðîãàé è íè÷åãî íå ñëîìàé!
};

instance stt_301_ian_gomez(c_info) {
    npc = stt_301_ian /*8138*/;
    nr = 0;
    condition = stt_301_ian_gomez_condition;
    information = stt_301_ian_gomez_info;
    description = "Ðàçâå ýòà øàõòà ïðèíàäëåæèò íå Ãîìåçó?";
};

func int stt_301_ian_gomez_condition() {
    if (npc_knowsinfo(hero, stt_301_ian_hi /*12232*/)) {
        return true;
    };
};

func void stt_301_ian_gomez_info() {
    ai_output(other, self, "STT_301_IAN_GOMEZ_Info_15_01"); //Ðàçâå ýòà øàõòà ïðèíàäëåæèò íå Ãîìåçó?
    ai_output(self, other, "STT_301_IAN_GOMEZ_Info_13_02"); //Äà, êîíå÷íî, ýòî øàõòà Ñòàðîãî Ëàãåðÿ. Íî çäåñü åñòü òîëüêî îäèí áîññ - è ýòî ÿ.
};

instance stt_301_ian_ore(c_info) {
    npc = stt_301_ian /*8138*/;
    nr = 0;
    condition = stt_301_ian_ore_condition;
    information = stt_301_ian_ore_info;
    description = "Ìîæåò ðàññêàæåøü, êàê çäåñü äîáûâàåòñÿ ðóäà?";
};

func int stt_301_ian_ore_condition() {
    if (npc_knowsinfo(hero, stt_301_ian_gomez /*12235*/)) {
        return true;
    };
};

func void stt_301_ian_ore_info() {
    ai_output(other, self, "STT_301_IAN_ORE_Info_15_01"); //Ìîæåò ðàññêàæåøü, êàê çäåñü äîáûâàåòñÿ ðóäà?
    ai_output(self, other, "STT_301_IAN_ORE_Info_13_02"); //Ðóäó çäåñü äîáûâàþò äíåì è íî÷üþ. Êàæäûé ìåñÿö ìû îòïðàâëÿåì 200 ìåøêîâ íà ñêëàä è åùå 20 - íà ïåðåïëàâêó.
    ai_output(self, other, "STT_301_IAN_ORE_Info_13_03"); //Èç òîé ðóäû, ÷òî ìû ïîñòàâëÿåì êîðîëþ, ìîæíî âûïëàâèòü íå îäíó ñîòíþ êëèíêîâ.
};

instance stt_301_ian_more(c_info) {
    npc = stt_301_ian /*8138*/;
    nr = 0;
    condition = stt_301_ian_more_condition;
    information = stt_301_ian_more_info;
    description = "ß ñëûøàë, ó ýòîé ðóäû åñòü è ìàãè÷åñêèå ñâîéñòâà.";
};

func int stt_301_ian_more_condition() {
    return npc_knowsinfo(hero, stt_301_ian_ore /*12238*/);
};

func void stt_301_ian_more_info() {
    ai_output(other, self, "STT_301_IAN_MORE_Info_15_01"); //ß ñëûøàë, ó ýòîé ðóäû åñòü è ìàãè÷åñêèå ñâîéñòâà. Ìîæåøü ðàññêàçàòü ìíå îá ýòîì?
    ai_output(self, other, "STT_301_IAN_MORE_Info_13_02"); //Äà, ó ìàãè÷åñêîé ðóäû åñòü îñîáûå ñâîéñòâà. Îðóæèå, êîòîðîå èç íåå âûïëàâëÿþò, íèêîãäà íå ëîìàåòñÿ, è êëèíêè âûõîäÿò êóäà îñòðåå, ÷åì îáû÷íûå.
    ai_output(self, other, "STT_301_IAN_MORE_Info_13_03"); //Ó àðìèè, âîîðóæåííîé òàêèìè ìå÷àìè, áóäåò ñåðüåçíîå ïðåèìóùåñòâî â áîþ.
};

instance stt_301_ian_magic(c_info) {
    npc = stt_301_ian /*8138*/;
    nr = 0;
    condition = stt_301_ian_magic_condition;
    information = stt_301_ian_magic_info;
    description = "Ìîæåøü ðàññêàçàòü åùå ÷òî-íèáóäü î ðóäå?";
};

func int stt_301_ian_magic_condition() {
    return npc_knowsinfo(hero, stt_301_ian_more /*12241*/);
};

func void stt_301_ian_magic_info() {
    ai_output(other, self, "STT_301_IAN_MAGIC_Info_15_01"); //Ìîæåøü ðàññêàçàòü åùå ÷òî-íèáóäü î ðóäå?
    ai_output(self, other, "STT_301_IAN_MAGIC_Info_13_02"); //Ê ñîæàëåíèþ, ìàãè÷åñêèå ñâîéñòâà ðóäû ïðîïàäàþò ïðè ïåðåïëàâêå. Êàê èçáåæàòü ýòîãî çíàþò òîëüêî â ïëàâèëüíÿõ Íîðäìàðà.
    ai_output(self, other, "STT_301_IAN_MAGIC_Info_13_03"); //Íî äàæå è áåç ìàãèè îðóæèå, âûêîâàííîå èç ýòîé ðóäû, êóäà ïðî÷íåå è îñòðåå îáû÷íûõ êëèíêîâ.
};

instance stt_301_ian_mine(c_info) {
    npc = stt_301_ian /*8138*/;
    nr = 0;
    condition = stt_301_ian_mine_condition;
    information = stt_301_ian_mine_info;
    description = "Ðàññêàæè ìíå î øàõòå.";
};

func int stt_301_ian_mine_condition() {
    if ((kapitel < 3) && npc_knowsinfo(hero, stt_301_ian_hi /*12232*/)) {
        return true;
    };
};

func void stt_301_ian_mine_info() {
    ai_output(other, self, "STT_301_IAN_MINE_Info_15_01"); //Ðàññêàæè ìíå î øàõòå.
    ai_output(self, other, "STT_301_IAN_MINE_Info_13_02"); //Åñëè çàõî÷åøü ïîáðîäèòü çäåñü, ñìîòðè â îáà. Â ïåùåðàõ ïîëíî ïîëçóíîâ, òàê ÷òî ëó÷øå îñòàâàòüñÿ â ãëàâíîé øàõòå.
    ai_output(self, other, "STT_301_IAN_MINE_Info_13_03"); //È íå ïðèñòàâàé ê Ñòðàæàì. Ïóñòü äàæå îíè ïðîñòî øëÿþòñÿ çäåñü ñ âàæíûì âèäîì - âñå ðàâíî íåò íèêîãî ëó÷øå íèõ, êîãäà äåëî äîõîäèò äî äðàêè ñ ïîëçóíàìè.
    ai_output(other, self, "STT_301_IAN_MINE_Info_15_04"); //Áóäó èìåòü â âèäó.
    ai_output(self, other, "STT_301_IAN_MINE_Info_13_05"); //Ëàäíî, ó ìåíÿ åñòü äåëà. È âîò åùå ÷òî: íå îòâëåêàé ìîèõ ïàðíåé îò ðàáîòû!
    ai_output(other, self, "STT_301_IAN_MINE_Info_15_06"); //ß ïðîñòî ïîáðîæó çäåñü íåìíîãî.
};

instance stt_301_ian_wantlist(c_info) {
    npc = stt_301_ian /*8138*/;
    nr = 0;
    condition = stt_301_ian_wantlist_condition;
    information = stt_301_ian_wantlist_info;
    description = "ß ïðèøåë, ÷òîáû çàáðàòü ñïèñîê ïðèïàñîâ äëÿ øàõòû.";
};

func int stt_301_ian_wantlist_condition() {
    if ((diego_bringlist == log_running) && (!npc_knowsinfo(hero, info_diego_ianpassword /*11854*/))) {
        return true;
    };
};

func void stt_301_ian_wantlist_info() {
    ai_output(other, self, "STT_301_IAN_WANTLIST_Info_15_01"); //ß ïðèøåë, ÷òîáû çàáðàòü ñïèñîê ïðèïàñîâ äëÿ øàõòû.
    ai_output(self, other, "STT_301_IAN_WANTLIST_Info_13_02"); //Íó íàäî æå. Ïðîâàëèâàé!
};

instance stt_301_ian_getlist(c_info) {
    npc = stt_301_ian /*8138*/;
    nr = 0;
    condition = stt_301_ian_getlist_condition;
    information = stt_301_ian_getlist_info;
    description = "Ìåíÿ ïðèñëàë Äèåãî. ß äîëæåí çàáðàòü ñïèñîê.";
};

func int stt_301_ian_getlist_condition() {
    if ((diego_bringlist == log_running) && npc_knowsinfo(hero, info_diego_ianpassword /*11854*/)) {
        return true;
    };
};

func void stt_301_ian_getlist_info() {
    ai_output(other, self, "STT_301_IAN_GETLIST_Info_15_01"); //Ìåíÿ ïðèñëàë Äèåãî. ß äîëæåí çàáðàòü ñïèñîê.
    ai_output(self, other, "STT_301_IAN_GETLIST_Info_13_02"); //Õîðîøî, âîò òåáå ñïèñîê. Ñêàæè èì, ÷òîáû ïîòîðîïèëèñü ñ äîñòàâêîé.
    b_logentry(ch1_bringlist, ch1_bringlist_1);
    b_giveinvitems(self, hero, thelist /*4566*/, 1);
};

instance stt_301_ian_nest(c_info) {
    npc = stt_301_ian /*8138*/;
    nr = 0;
    condition = stt_301_ian_nest_condition;
    information = stt_301_ian_nest_info;
    description = "Ãäå-òî çäåñü äîëæíî áûòü ëîãîâî ïîëçóíîâ.";
};

func int stt_301_ian_nest_condition() {
    if ((corkalom_bringmcqballs == log_running) && npc_knowsinfo(hero, stt_301_ian_hi /*12232*/)) {
        return 1;
    };
};

func void stt_301_ian_nest_info() {
    ai_output(other, self, "STT_301_IAN_NEST_Info_15_01"); //Ãäå-òî çäåñü äîëæíî áûòü ëîãîâî ïîëçóíîâ.
    ai_output(self, other, "STT_301_IAN_NEST_Info_13_02"); //ß äóìàþ, òàêèõ çäåñü íå ìåíüøå äþæèíû.
    ai_output(other, self, "STT_301_IAN_NEST_Info_15_03"); //Ñëóøàé, ìíå íóæíî äîáðàòüñÿ äî ëîãîâà ïîëçóíîâ...
    ai_output(self, other, "STT_301_IAN_NEST_Info_13_04"); //Ó ìåíÿ ñåé÷àñ íåò âðåìåíè. Ïðåññ íå ðàáîòàåò. ×åðòîâà øåñòåðåíêà ñëîìàëàñü ïàðó ÷àñîâ íàçàä.
    ai_output(self, other, "STT_301_IAN_NEST_Info_13_05"); //È ÿ ïîíÿòèÿ íå èìåþ, ãäå èñêàòü íîâóþ.
    ai_output(self, other, "STT_301_IAN_NEST_Info_13_06"); //Äàâàé òàê: òû íàõîäèøü ìíå øåñòåðåíêó, à ÿ ïîìîãàþ òåáå.
    b_logentry(ch2_mceggs, ch2_mceggs_6);
    ian_gearwheel = log_running;
};

instance stt_301_ian_gear_run(c_info) {
    npc = stt_301_ian /*8138*/;
    nr = 0;
    condition = stt_301_ian_gear_run_condition;
    information = stt_301_ian_gear_run_info;
    description = "Øåñòåðåíêó? È ãäå ìíå åå èñêàòü?";
};

func int stt_301_ian_gear_run_condition() {
    printdebugint(pd_mission, "Ian_gearwheel: ", ian_gearwheel);
    if ((ian_gearwheel == log_running) && (!npc_hasitems(hero, itmi_stuff_gearwheel_01))) {
        return 1;
    };
};

func void stt_301_ian_gear_run_info() {
    ai_output(other, self, "STT_301_IAN_GEAR_RUN_Info_15_01"); //Øåñòåðåíêó? È ãäå ìíå åå èñêàòü?
    ai_output(self, other, "STT_301_IAN_GEAR_RUN_Info_13_02"); //Ïðåäñòàâëåíèÿ íå èìåþ, òàê æå, êàê è òû.
    ai_output(self, other, "STT_301_IAN_GEAR_RUN_Info_13_03"); //Íî â áîêîâîé øàõòå åñòü ñòàðûé ïðåññ. Ìîæåò, íàì ïîâåçåò è òàì åñòü òàêàÿ æå?
};

instance stt_301_ian_gear_suc(c_info) {
    npc = stt_301_ian /*8138*/;
    nr = 0;
    condition = stt_301_ian_gear_suc_condition;
    information = stt_301_ian_gear_suc_info;
    description = "ß äîñòàë øåñòåðåíêó.";
};

func int stt_301_ian_gear_suc_condition() {
    if (npc_hasitems(hero, itmi_stuff_gearwheel_01) && (ian_gearwheel == log_running)) {
        return 1;
    };
};

func void stt_301_ian_gear_suc_info() {
    var c_npc sklave;

    b_giveinvitems(hero, self, itmi_stuff_gearwheel_01 /*4683*/, 1);
    npc_removeinvitem(self, itmi_stuff_gearwheel_01 /*4683*/);
    ian_gearwheel = log_success;
    b_givexp(xp_bringgearwheel);
    sklave = hlp_getnpc(orc_2001_sklave);
    npc_exchangeroutine(sklave, "Stomper");
    ai_output(other, self, "STT_301_IAN_GEAR_SUC_Info_15_01"); //ß äîñòàë øåñòåðåíêó.
    ai_output(self, other, "STT_301_IAN_GEAR_SUC_Info_13_02"); //Ýé, îòëè÷íàÿ ðàáîòà! Äóìàþ, îíà ïîäîéäåò. Ëàäíî, òû, êàæåòñÿ, èñêàë ëîãîâî ïîëçóíîâ... Õ-ìì...
    ai_output(self, other, "STT_301_IAN_GEAR_SUC_Info_13_03"); //Ñõîäè ê Àñãõàíó è ïîïðîñè åãî îòêðûòü âîðîòà, ÷òîáû òû ìîã ïîèñêàòü â òåìíûõ øàõòàõ.
    ai_output(self, other, "STT_301_IAN_GEAR_SUC_Info_13_04"); //Ñêàæè åìó: 'Âñå áóäåò íîðìàëüíî', - òàê îí áóäåò çíàòü, ÷òî ýòî ÿ äàë òåáå ðàçðåøåíèå.
    b_logentry(ch2_mceggs, ch2_mceggs_7);
};

instance stt_301_ian_gotoasghan(c_info) {
    npc = stt_301_ian /*8138*/;
    nr = 0;
    condition = stt_301_ian_gotoasghan_condition;
    information = stt_301_ian_gotoasghan_info;
    description = "ß òàê è íå íàøåë ëîãîâî ýòèõ òâàðåé.";
};

func int stt_301_ian_gotoasghan_condition() {
    if ((ian_gearwheel == log_success) && (!npc_knowsinfo(hero, grd_263_asghan_nest /*9390*/))) {
        return 1;
    };
};

func void stt_301_ian_gotoasghan_info() {
    ai_output(other, self, "STT_301_IAN_GOTOASGHAN_Info_15_01"); //ß òàê è íå íàøåë ëîãîâî ýòèõ òâàðåé.
    ai_output(self, other, "STT_301_IAN_GOTOASGHAN_Info_13_02"); //ß æå ãîâîðèë òåáå: ñõîäè ê Àñãõàíó. Îí êîìàíäóåò ñòðàæíèêàìè. Òû íàéäåøü åãî íà íèæíåì óðîâíå.
    b_logentry(ch2_mceggs, ch2_mceggs_8);
};

instance stt_301_ian_afterall(c_info) {
    npc = stt_301_ian /*8138*/;
    nr = 0;
    condition = stt_301_ian_afterall_condition;
    information = stt_301_ian_afterall_info;
    description = "ß íàøåë ëîãîâî ïîëçóíîâ!";
};

func int stt_301_ian_afterall_condition() {
    if (npc_hasitems(hero, itat_crawlerqueen) >= 3) {
        return 1;
    };
};

func void stt_301_ian_afterall_info() {
    ai_output(other, self, "STT_301_IAN_AFTERALL_Info_15_01"); //ß íàøåë ëîãîâî ïîëçóíîâ!
    ai_output(self, other, "STT_301_IAN_AFTERALL_Info_13_02"); //È â øàõòå òåïåðü áóäåò òèõî è ñïîêîéíî. Õà-õà-õà!
    ai_output(self, other, "STT_301_IAN_AFTERALL_Info_13_03"); //Ëàäíî, ÿ íå õîòåë òåáÿ îáèäåòü. Ìîëîäåö, ïàðåíü!
    ai_output(self, other, "STT_301_IAN_AFTERALL_Info_13_04"); //Âîò, âîçüìè ñåáå ýòîò ÿùèê ïèâà çà òðóäû.
    createinvitems(self, itfo_om_beer_01, 6);
    b_giveinvitems(self, hero, itfo_om_beer_01 /*4636*/, 6);
};

instance stt_301_ian_notenough(c_info) {
    npc = stt_301_ian /*8138*/;
    nr = 0;
    condition = stt_301_ian_notenough_condition;
    information = stt_301_ian_notenough_info;
    description = "ß íàøåë ëîãîâî ïîëçóíîâ! È ÿéöà, îòëîæåííûå èõ êîðîëåâîé!";
};

func int stt_301_ian_notenough_condition() {
    if ((npc_hasitems(hero, itat_crawlerqueen) > 1) && (npc_hasitems(hero, itat_crawlerqueen) < 3)) {
        return true;
    };
};

func void stt_301_ian_notenough_info() {
    ai_output(other, self, "STT_301_IAN_NOTENOUGH_Info_15_01"); //ß íàøåë ëîãîâî ïîëçóíîâ! È ÿéöà, îòëîæåííûå èõ êîðîëåâîé!
    ai_output(self, other, "STT_301_IAN_NOTENOUGH_Info_13_02"); //×òî? Ýòî âñå ÿéöà, êîòîðûå òû íàøåë? Íó ÷òî æ, òû äîêàçàë, ÷òî óìååøü äðàòüñÿ.
};

instance stt_302_viper_exit(c_info) {
    npc = stt_302_viper /*8141*/;
    nr = 999;
    condition = stt_302_viper_exit_condition;
    information = stt_302_viper_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int stt_302_viper_exit_condition() {
    return 1;
};

func void stt_302_viper_exit_info() {
    ai_stopprocessinfos(self);
};

instance stt_302_viper_greet(c_info) {
    npc = stt_302_viper /*8141*/;
    nr = 0;
    condition = stt_302_viper_greet_condition;
    information = stt_302_viper_greet_info;
    description = "ß ñëûøàë, ÷òî òû ïëàâèëüùèê.";
};

func int stt_302_viper_greet_condition() {
    return 1;
};

func void stt_302_viper_greet_info() {
    ai_output(other, self, "Stt_302_Viper_GREET_Info_15_01"); //ß ñëûøàë, ÷òî òû ïëàâèëüùèê.
    ai_output(self, other, "Stt_302_Viper_GREET_Info_11_02"); //Òû óìíûé ïàðåíü îäíàêî.
};

instance stt_302_viper_melt(c_info) {
    npc = stt_302_viper /*8141*/;
    nr = 0;
    condition = stt_302_viper_melt_condition;
    information = stt_302_viper_melt_info;
    description = "Ãîâîðÿò, ÷òî âû ïåðåïëàâëÿåòå òîëüêî ÷àñòü ðóäû.";
};

func int stt_302_viper_melt_condition() {
    if (npc_knowsinfo(hero, stt_302_viper_greet /*12278*/) && npc_knowsinfo(hero, grd_260_drake_mine_mehr /*9347*/)) {
        return 1;
    };
};

func void stt_302_viper_melt_info() {
    ai_output(other, self, "Stt_302_Viper_MELT_Info_15_01"); //Ãîâîðÿò, ÷òî âû ïåðåïëàâëÿåòå òîëüêî ÷àñòü ðóäû.
    ai_output(self, other, "Stt_302_Viper_MELT_Info_11_02"); //Êîãäà-òî ìû ïåðåïëàâëÿëè âñþ äîáû÷ó. Íî Ãîìåçó è ìàãàì ýòî áûëî íå ñëèøêîì-òî ïî äóøå.
    ai_output(self, other, "Stt_302_Viper_MELT_Info_11_03"); //Îíè øëÿëèñü çäåñü íåäåëÿìè: îñìàòðèâàëè ðóäó è âñå îñòàëüíîå.
    ai_output(self, other, "Stt_302_Viper_MELT_Info_11_04"); //Íåñëè âñÿêóþ ÷óøü è ñîâàëè ñâîè áëàãîðîäíûå íîñû â òàêèå äåëà, î êàêèõ îíè è ïðåäñòàâëåíèÿ íå èìåþò.
    ai_output(self, other, "Stt_302_Viper_MELT_Info_11_05"); //Òåïåðü, â èòîãå, ìû ïåðåïëàâëÿåì òîëüêî ÷àñòü ðóäû, à ìàãè ñþäà áîëüøå íå ïðèõîäÿò.
};

instance stt_302_viper_buy(c_info) {
    npc = stt_302_viper /*8141*/;
    nr = 0;
    condition = stt_302_viper_buy_condition;
    information = stt_302_viper_buy_info;
    permanent = true;
    trade = true;
    description = "Òû ìîæåøü äàòü ìíå íåìíîãî ðóäû?";
};

func int stt_302_viper_buy_condition() {
    if (npc_knowsinfo(hero, stt_302_viper_greet /*12278*/)) {
        return 1;
    };
};

func void stt_302_viper_buy_info() {
    ai_output(other, self, "Stt_302_Viper_BUY_Info_15_01"); //Òû ìîæåøü äàòü ìíå íåìíîãî ðóäû?
    ai_output(self, other, "Stt_302_Viper_BUY_Info_11_02"); //Åñëè ó òåáÿ åñòü êàêîé-íèáóäü òîâàð íà ïðîäàæó.
};

instance dia_whistler_exit(c_info) {
    npc = stt_309_whistler /*8147*/;
    nr = 999;
    condition = dia_whistler_exit_condition;
    information = dia_whistler_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_whistler_exit_condition() {
    return 1;
};

func void dia_whistler_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_whistler_iamnew(c_info) {
    npc = stt_309_whistler /*8147*/;
    nr = 1;
    condition = dia_whistler_iamnew_condition;
    information = dia_whistler_iamnew_info;
    description = "Ïðèâåò! ß çäåñü íîâåíüêèé.";
};

func int dia_whistler_iamnew_condition() {
    if (npc_gettrueguild(hero) == gil_none) {
        return 1;
    };
};

func void dia_whistler_iamnew_info() {
    ai_output(other, self, "DIA_Whistler_IAmNew_15_00"); //Ïðèâåò! ß çäåñü íîâåíüêèé!
    ai_output(self, other, "DIA_Whistler_IAmNew_11_01"); //È ÷òî òåáå îò ìåíÿ íóæíî?
    ai_output(other, self, "DIA_Whistler_IAmNew_15_02"); //ß õî÷ó ñòàòü îäíèì èç âàñ - õî÷ó ïðèñîåäèíèòüñÿ ê âàøåìó Ëàãåðþ.
    ai_output(self, other, "DIA_Whistler_IAmNew_11_03"); //Èùåøü êîãî-íèáóäü, êòî áû ïîìîã, à?
    ai_output(self, other, "DIA_Whistler_IAmNew_11_04"); //Åñëè òû õî÷åøü, ÷òîáû ÿ çàìîëâèë çà òåáÿ ñëîâå÷êî ïåðåä Äèåãî, òåáå ïðèäåòñÿ íåìíîãî ïîìî÷ü ìíå.
};

var int whistler_buymysword;

var int whistler_buymysword_day;

instance dia_whistler_favour(c_info) {
    npc = stt_309_whistler /*8147*/;
    nr = 1;
    condition = dia_whistler_favour_condition;
    information = dia_whistler_favour_info;
    description = "×òî ÿ äîëæåí ñäåëàòü?";
};

func int dia_whistler_favour_condition() {
    if (npc_knowsinfo(hero, dia_whistler_iamnew /*12290*/)) {
        return 1;
    };
};

func void dia_whistler_favour_info() {
    ai_output(other, self, "DIA_Whistler_Favour_15_00"); //×òî ÿ äîëæåí ñäåëàòü?
    ai_output(self, other, "DIA_Whistler_Favour_11_01"); //Ìíå íóæåí îäèí ìå÷... Åãî ïðîäàåò Ôèñê - ýòî îäèí èç òîðãîâöåâ íà ðûíêå.
    ai_output(self, other, "DIA_Whistler_Favour_11_02"); //Øèêàðíûé ïàëàø ñ óêðàøåíèÿìè. Íî ìíå îí åãî íå ïðîäàñò...
    ai_output(self, other, "DIA_Whistler_Favour_11_03"); //ß äàì òåáå 100 êóñêîâ ðóäû, ÷òîáû òû êóïèë åãî. Òîëüêî íå ãîâîðè Ôèñêó ïðî ìåíÿ.
    info_clearchoices(dia_whistler_favour /*12295*/);
    info_addchoice(dia_whistler_favour /*12295*/, "Ëàäíî, äàâàé ñâîè 100 êóñêîâ. ß êóïëþ òåáå ìå÷.", dia_whistler_favour_ok);
    info_addchoice(dia_whistler_favour /*12295*/, "À òû íå äóìàåøü, ÷òî ÿ ìîãó ñáåæàòü ñ òâîåé ðóäîé?..", dia_whistler_favour_oreaway);
    info_addchoice(dia_whistler_favour /*12295*/, "À ïî÷åìó îí áîëüøå íå õî÷åò ïðîäàâàòü òåáå îðóæèå?", dia_whistler_favour_whynotsell);
};

func void dia_whistler_favour_ok() {
    var c_npc fisk;

    ai_output(other, self, "DIA_Whistler_Favour_Ok_15_00"); //Ëàäíî, äàâàé ñâîè 100 êóñêîâ. ß êóïëþ òåáå ìå÷.
    ai_output(self, other, "DIA_Whistler_Favour_Ok_11_01"); //Âîò îíè. È ñðàçó âîçâðàùàéñÿ êî ìíå!
    whistler_buymysword = log_running;
    if (npc_gettrueguild(hero) == gil_none) {
        log_createtopic(ch1_joinoc, log_mission);
        log_settopicstatus(ch1_joinoc, log_running);
    };
    b_logentry(ch1_joinoc, ch1_joinoc_12);
    fisk = hlp_getnpc(stt_311_fisk);
    createinvitems(self, itminugget, 100);
    b_giveinvitems(self, hero, itminugget /*4517*/, 100);
    whistler_buymysword_day = wld_getday();
    info_clearchoices(dia_whistler_favour /*12295*/);
};

func void dia_whistler_favour_oreaway() {
    ai_output(other, self, "DIA_Whistler_Favour_OreAway_15_00"); //À òû íå äóìàåøü, ÷òî ÿ ìîãó ñáåæàòü ñ òâîåé ðóäîé?..
    ai_output(self, other, "DIA_Whistler_Favour_OreAway_11_01"); //Íå çàáûâàé: ýòà êîëîíèÿ òàêàÿ ìàëåíüêàÿ. Åñëè ïîïûòàåøüñÿ ìåíÿ íàäóòü, ÿ òåáÿ íàéäó!
};

func void dia_whistler_favour_whynotsell() {
    ai_output(other, self, "DIA_Whistler_Favour_WhyNotSell_15_00"); //À ïî÷åìó îí áîëüøå íå õî÷åò ïðîäàâàòü òåáå îðóæèå?
    ai_output(self, other, "DIA_Whistler_Favour_WhyNotSell_11_01"); //Ìû òóò íåìíîãî ïîñïîðèëè.
    ai_output(other, self, "DIA_Whistler_Favour_WhyNotSell_15_02"); //È?
    ai_output(self, other, "DIA_Whistler_Favour_WhyNotSell_11_03"); //È íè÷åãî. Òåáå ýòî çíàòü íåçà÷åì!
};

instance dia_whistler_running110(c_info) {
    npc = stt_309_whistler /*8147*/;
    nr = 4;
    condition = dia_whistler_running110_condition;
    information = dia_whistler_running110_info;
    description = "Ôèñê òåïåðü õî÷åò 110 êóñêîâ çà ñâîé ìå÷.";
};

func int dia_whistler_running110_condition() {
    if ((whistler_buymysword == log_running) && (fisk_scknows110 == true)) {
        return 1;
    };
};

func void dia_whistler_running110_info() {
    ai_output(other, self, "DIA_Whistler_Running110_15_00"); //Ôèñê òåïåðü õî÷åò 110 êóñêîâ çà ñâîé ìå÷.
    ai_output(self, other, "DIA_Whistler_Running110_11_01"); //È òû õî÷åøü, ÷òîáû ÿ òåáå äàë åùå 10 êóñêîâ...
    ai_output(other, self, "DIA_Whistler_Running110_15_02"); //ß äóìàë, òåáå íóæåí ýòîò ìå÷.
    ai_output(self, other, "DIA_Whistler_Running110_11_03"); //Âîò, äåðæè ðóäó è ïîòîðîïèñü!
    createinvitems(self, itminugget, 10);
    b_giveinvitems(self, hero, itminugget /*4517*/, 10);
};

instance dia_whistler_runningpayback(c_info) {
    npc = stt_309_whistler /*8147*/;
    nr = 5;
    condition = dia_whistler_runningpayback_condition;
    information = dia_whistler_runningpayback_info;
    permanent = true;
    description = "ß íå ñóìåë êóïèòü ìå÷. Âîò òåáå òâîè 100 êóñêîâ íàçàä.";
};

func int dia_whistler_runningpayback_condition() {
    if (whistler_buymysword == log_running) {
        return 1;
    };
};

func void dia_whistler_runningpayback_info() {
    ai_output(other, self, "DIA_Whistler_RunningPayBack_15_00"); //ß íå ñóìåë êóïèòü ìå÷. Âîò òåáå òâîè 100 êóñêîâ íàçàä.
    if (npc_hasitems(other, itminugget) >= 100) {
        ai_output(self, other, "DIA_Whistler_RunningPayBack_11_01"); //Òû èäèîò, à èäèîòîâ ó íàñ çäåñü ñâîèõ õâàòàåò! Ïðîâàëèâàé ñ ãëàç ìîèõ!
        b_giveinvitems(hero, self, itminugget /*4517*/, 100);
        whistler_buymysword = log_obsolete;
        b_logentry(ch1_joinoc, ch1_joinoc_13);
        ai_stopprocessinfos(self);
    }
    else {
        ai_output(self, other, "DIA_Whistler_RunningPayBack_11_02"); //Çäåñü íåò 100 êóñêîâ, è ëó÷øå áû òåáå íàéòè èõ ïîáûñòðåå, èëè ó òåáÿ íà÷íóòñÿ êðóïíûå íåïðèÿòíîñòè.
        ai_stopprocessinfos(self);
    };
};

instance dia_whistler_mysword_toolate(c_info) {
    npc = stt_309_whistler /*8147*/;
    nr = 1;
    condition = dia_whistler_mysword_toolate_condition;
    information = dia_whistler_mysword_toolate_info;
    important = true;
};

func int dia_whistler_mysword_toolate_condition() {
    if ((whistler_buymysword == log_running) && (whistler_buymysword_day <= (wld_getday() - 2))) {
        return 1;
    };
};

func void dia_whistler_mysword_toolate_info() {
    ai_output(self, other, "DIA_Whistler_MySword_TooLate_11_00"); //Âîò òû ãäå! Õîòåë ñáåæàòü ñ ìîåé ðóäîé, äà? Èäè-êà ñþäà, ñûíîê!
    whistler_buymysword = log_failed;
    b_logentry(ch1_joinoc, ch1_joinoc_14);
    ai_stopprocessinfos(self);
    npc_setpermattitude(self, att_angry);
    npc_settarget(self, other);
    ai_startstate(self, zs_attack, 1, "");
};

instance dia_whistler_mysword_success(c_info) {
    npc = stt_309_whistler /*8147*/;
    nr = 800;
    condition = dia_whistler_mysword_success_condition;
    information = dia_whistler_mysword_success_info;
    permanent = true;
    description = "Òâîé ìå÷ ó ìåíÿ...";
};

func int dia_whistler_mysword_success_condition() {
    if (((whistler_buymysword == log_running) && (whistler_buymysword_day > (wld_getday() - 2))) && (npc_hasitems(other, whistlers_schwert) >= 1)) {
        return 1;
    };
};

func void dia_whistler_mysword_success_info() {
    ai_output(other, self, "DIA_Whistler_MySword_Success_15_00"); //Òâîé ìå÷ ó ìåíÿ...
    b_giveinvitems(other, self, whistlers_schwert /*4972*/, 1);
    ai_output(self, other, "DIA_Whistler_MySword_Success_11_01"); //ß æå ãîâîðèë òåáå, ÷òî ýòî áóäåò íåñëîæíî. Íî âñå ðàâíî: òû ïîìîã ìíå - ÿ ïîìîãó òåáå.
    if (npc_gettrueguild(hero) == gil_none) {
        ai_output(self, other, "DIA_Whistler_MySword_Success_11_02"); //Åñëè Äèåãî ñïðîñèò ìåíÿ, ÿ çàìîëâëþ çà òåáÿ ñëîâå÷êî. Íó à ïîêà - ñ÷àñòëèâî îñòàâàòüñÿ!
        b_logentry(ch1_joinoc, ch1_joinoc_15);
    }
    else {
        b_logentry(ch1_joinoc, ch1_joinoc_16);
    };
    whistler_buymysword = log_success;
    b_givexp(xp_whistlerssword);
    ai_stopprocessinfos(self);
};

instance dia_whistler_standardkap1(c_info) {
    npc = stt_309_whistler /*8147*/;
    nr = 800;
    condition = dia_whistler_standardkap1_condition;
    information = dia_whistler_standardkap1_info;
    permanent = true;
    description = "Êàê äåëà?";
};

func int dia_whistler_standardkap1_condition() {
    if (whistler_buymysword == log_success) {
        return 1;
    };
};

func void dia_whistler_standardkap1_info() {
    ai_output(other, self, "DIA_Whistler_StandardKap1_15_00"); //Êàê äåëà?
    ai_output(self, other, "DIA_Whistler_StandardKap1_11_01"); //Âñå õîðîøî! Òû ïîìîã ìíå - ÿ ïîìîãó òåáå. ß ñêàæó Äèåãî, ÷òî òû íàäåæíûé ïàðåíü.
};

instance stt_311_fisk_exit(c_info) {
    npc = stt_311_fisk /*8151*/;
    nr = 999;
    condition = stt_311_fisk_exit_condition;
    information = stt_311_fisk_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int stt_311_fisk_exit_condition() {
    return 1;
};

func void stt_311_fisk_exit_info() {
    ai_stopprocessinfos(self);
};

instance stt_311_fisk_first(c_info) {
    npc = stt_311_fisk /*8151*/;
    nr = 1;
    condition = stt_311_fisk_first_condition;
    information = stt_311_fisk_first_info;
    important = true;
};

func int stt_311_fisk_first_condition() {
    return 1;
};

func void stt_311_fisk_first_info() {
    ai_output(self, other, "Stt_311_Fisk_First_12_00"); //Ïðèâåò, ïàðåíü! ß Ôèñê. Ó ìåíÿ åñòü òîâàð íà ëþáîé âêóñ è êîøåëåê. Åñëè òåáå êîãäà-íèáóäü ÷òî-íèáóäü ïîíàäîáèòñÿ, îáðàùàéñÿ êî ìíå.
    log_createtopic(ge_traderoc, log_note);
    b_logentry(ge_traderoc, ge_traderoc_6);
};

instance stt_311_fisk_trade(c_info) {
    npc = stt_311_fisk /*8151*/;
    nr = 800;
    condition = stt_311_fisk_trade_condition;
    information = stt_311_fisk_trade_info;
    permanent = true;
    trade = true;
    description = "Ïîêàæè ìíå, ÷òî ó òåáÿ åñòü.";
};

func int stt_311_fisk_trade_condition() {
    return 1;
};

func void stt_311_fisk_trade_info() {
    ai_output(other, self, "Stt_311_Fisk_Trade_15_00"); //Ïîêàæè ìíå, ÷òî ó òåáÿ åñòü.
};

instance stt_311_fisk_whistlerssword(c_info) {
    npc = stt_311_fisk /*8151*/;
    nr = 801;
    condition = stt_311_fisk_whistlerssword_condition;
    information = stt_311_fisk_whistlerssword_info;
    permanent = true;
    description = "ß õî÷ó êóïèòü ìå÷. Íî íå ïðîñòîé - ñ êàêèìè-íèáóäü óêðàøåíèÿìè.";
};

func int stt_311_fisk_whistlerssword_condition() {
    if (((fisk_forgetsword == false) && (whistler_buymysword == log_running)) && (fisk_swordsold == false)) {
        return 1;
    };
};

func void stt_311_fisk_whistlerssword_info() {
    ai_output(other, self, "Stt_311_Fisk_WhistlersSword_15_00"); //ß õî÷ó êóïèòü ìå÷. Íî íå ïðîñòîé - ñ êàêèìè-íèáóäü óêðàøåíèÿìè.
    ai_output(self, other, "Stt_311_Fisk_WhistlersSword_12_01"); //Ýòîò òåáå äîëæåí ïîíðàâèòüñÿ. Ïðèçðàê, êîòîðûé ïðèñìîòðåë åãî äëÿ ñåáÿ, áîëüøå óæå íå ïðèäåò.
    ai_output(self, other, "Stt_311_Fisk_WhistlersSword_12_02"); //Îí ñòîèò 110 êóñêîâ ðóäû. Ïîêàçàòü?
    fisk_scknows110 = true;
    info_clearchoices(stt_311_fisk_whistlerssword /*12326*/);
    info_addchoice(stt_311_fisk_whistlerssword /*12326*/, "Â äðóãîé ðàç.", stt_311_fisk_whistlerssword_back);
    info_addchoice(stt_311_fisk_whistlerssword /*12326*/, "Óèñòëåðó òû õîòåë ïðîäàòü åãî çà ñîòíþ...", stt_311_fisk_whistlerssword_fault);
    info_addchoice(stt_311_fisk_whistlerssword /*12326*/, "Áåðó.", stt_311_fisk_whistlerssword_takeit);
};

func void stt_311_fisk_whistlerssword_back() {
    ai_output(other, self, "Org_826_Mordrag_WhistlersSword_BACK_15_00"); //Â äðóãîé ðàç.
    info_clearchoices(stt_311_fisk_whistlerssword /*12326*/);
};

func void stt_311_fisk_whistlerssword_fault() {
    ai_output(other, self, "Stt_311_Fisk_WhistlersSword_Fault_15_00"); //Óèñòëåðó òû õîòåë ïðîäàòü åãî çà ñîòíþ...
    ai_output(self, other, "Stt_311_Fisk_WhistlersSword_Fault_12_01"); //À! Ïîñòîé-êà... Äà, âåðíî, ÿ íàçâàë òåáå íå òó öåíó. Êîíå÷íî, ÿ õîòåë ñêàçàòü 500 êóñêîâ!
    ai_output(other, self, "Stt_311_Fisk_WhistlersSword_Fault_15_02"); //Ïÿòü ñîòåí???
    ai_output(self, other, "Stt_311_Fisk_WhistlersSword_Fault_12_03"); //Ñëèøêîì ìàëî? Ïðåäïî÷èòàåøü 1000? Áóäó òîëüêî ðàä. À âîîáùå çíàåøü - ÿ íàâåðíîå ïðîñòî îñòàâëþ åãî ñåáå!
    fisk_forgetsword = true;
    info_clearchoices(stt_311_fisk_whistlerssword /*12326*/);
};

func void stt_311_fisk_whistlerssword_takeit() {
    ai_output(other, self, "Stt_311_Fisk_WhistlersSword_TakeIt_15_00"); //Áåðó.
    if (npc_hasitems(other, itminugget) >= 110) {
        ai_output(self, other, "Stt_311_Fisk_WhistlersSword_TakeIt_12_01"); //Ïî ðóêàì!
        b_giveinvitems(other, self, itminugget /*4517*/, 110);
        createinvitem(self, whistlers_schwert);
        b_giveinvitems(self, other, whistlers_schwert /*4972*/, 1);
        info_clearchoices(stt_311_fisk_whistlerssword /*12326*/);
        fisk_swordsold = true;
    }
    else {
        ai_output(self, other, "Stt_311_Fisk_WhistlersSword_TakeIt_12_02"); //Áîþñü, ó òåáÿ íå õâàòàåò ðóäû. ß ïðèäåðæó åãî íåìíîãî, íî òû ëó÷øå ïîòîðîïèñü.
    };
};

instance stt_311_fisk_forgetsword(c_info) {
    npc = stt_311_fisk /*8151*/;
    nr = 800;
    condition = stt_311_fisk_forgetsword_condition;
    information = stt_311_fisk_forgetsword_info;
    permanent = true;
    description = "Ïî ïîâîäó ìå÷à Óèñòëåðà...";
};

func int stt_311_fisk_forgetsword_condition() {
    if (fisk_forgetsword == true) {
        return 1;
    };
};

func void stt_311_fisk_forgetsword_info() {
    ai_output(other, self, "Stt_311_Fisk_ForgetSword_15_00"); //Âîçâðàùàÿñü ê ðàçãîâîðó î ìå÷å Óèñòëåðà...
    ai_output(self, other, "Stt_311_Fisk_ForgetSword_12_01"); //Ìîæåøü ïåðåäàòü åìó, ÷òî ýòîò ìå÷ îí íèêîãäà íå ïîëó÷èò!
};

var int fisk_getnewhehler;

instance stt_311_fisk_mordragko(c_info) {
    npc = stt_311_fisk /*8151*/;
    nr = 800;
    condition = stt_311_fisk_mordragko_condition;
    information = stt_311_fisk_mordragko_info;
    important = true;
};

func int stt_311_fisk_mordragko_condition() {
    var c_npc mordrag;

    mordrag = hlp_getnpc(org_826_mordrag);
    if ((((mordragko_hauab == true) || (mordragko_stayatnc == true)) || npc_isdead(mordrag)) && (npc_gettrueguild(hero) == gil_none)) {
        return 1;
    };
};

func void stt_311_fisk_mordragko_info() {
    ai_output(self, other, "Stt_311_Fisk_MordragKO_12_00"); //Ýé, òû!
    ai_output(self, other, "Stt_311_Fisk_MordragKO_12_01"); //Ìîðäðàã áûë îäíèì èç ìîèõ ãëàâíûõ ïîñòàâùèêîâ, òû, èäèîò!
    ai_output(self, other, "Stt_311_Fisk_MordragKO_12_02"); //Åñëè òû õî÷åøü ïðèñîåäèíèòüñÿ ê ýòîìó Ëàãåðþ, òåáå áóäåò î÷åíü ñëîæíî çàðó÷èòüñÿ ÌÎÅÉ ïîääåðæêîé!
    info_clearchoices(stt_311_fisk_mordragko /*12336*/);
    info_addchoice(stt_311_fisk_mordragko /*12336*/, "Òîðãóåøü âåùàìè Áàðîíîâ! Òîðóñà ýòî çàèíòåðåñóåò...", stt_311_fisk_mordragko_petze);
    info_addchoice(stt_311_fisk_mordragko /*12336*/, "Ðàññëàáüñÿ! Ìîæåò áûòü ÿ ñìîãó âñå óëàäèòü?", stt_311_fisk_mordragko_relax);
    info_addchoice(stt_311_fisk_mordragko /*12336*/, "Â òàêîì ñëó÷àå, øåë áû òû...", stt_311_fisk_mordragko_fuckoff);
};

func void stt_311_fisk_mordragko_relax() {
    ai_output(other, self, "Stt_311_Fisk_MordragKO_Relax_15_00"); //Ðàññëàáüñÿ! Ìîæåò áûòü ÿ ñìîãó âñå óëàäèòü?
    ai_output(self, other, "Stt_311_Fisk_MordragKO_Relax_12_01"); //Íå âèæó ñïîñîáà. Åñëè, êîíå÷íî, òû íå íàéäåøü ìíå äðóãîãî ïîñòàâùèêà â Íîâîì Ëàãåðå!
    ai_output(other, self, "Stt_311_Fisk_MordragKO_Relax_15_02"); //Ãäå æå ìíå åãî èñêàòü?
    ai_output(self, other, "Stt_311_Fisk_MordragKO_Relax_12_03"); //Íå ìîÿ çàáîòà. ß æå ñêàçàë, ÷òî òåáå íåëåãêî áóäåò íàëàäèòü ñî ìíîé îòíîøåíèÿ.
    info_clearchoices(stt_311_fisk_mordragko /*12336*/);
    log_createtopic(ch1_fisknewdealer, log_mission);
    log_settopicstatus(ch1_fisknewdealer, log_running);
    b_logentry(ch1_fisknewdealer, ch1_fisknewdealer_1);
    fisk_getnewhehler = log_running;
};

func void stt_311_fisk_mordragko_fuckoff() {
    ai_output(other, self, "Stt_311_Fisk_MordragKO_FuckOff_15_00"); //Â òàêîì ñëó÷àå, øåë áû òû...
    info_clearchoices(stt_311_fisk_mordragko /*12336*/);
    ai_stopprocessinfos(self);
};

func void stt_311_fisk_mordragko_petze() {
    ai_output(other, self, "Stt_311_Fisk_MordragKO_Petze_15_00"); //Òû ïðîäàåøü òîâàð, êîòîðûé ïðèíàäëåæèò Áàðîíàì. Óâåðåí, Òîðóñó èíòåðåñíî áóäåò óçíàòü îá ýòîì...
    ai_output(self, other, "Stt_311_Fisk_MordragKO_Petze_12_01"); //Äàæå íå ïûòàéñÿ ñûãðàòü íà ýòîì, ïàðåíü!
    info_clearchoices(stt_311_fisk_mordragko /*12336*/);
    ai_stopprocessinfos(self);
    npc_settarget(self, other);
    ai_startstate(self, zs_attack, 1, "");
};

instance stt_311_fisk_hehlersuccess(c_info) {
    npc = stt_311_fisk /*8151*/;
    nr = 10;
    condition = stt_311_fisk_hehlersuccess_condition;
    information = stt_311_fisk_hehlersuccess_info;
    description = "Êîå-êòî èç Íîâîãî Ëàãåðÿ õî÷åò âåñòè ñ òîáîé äåëî.";
};

func int stt_311_fisk_hehlersuccess_condition() {
    if ((fisk_getnewhehler == log_running) && npc_knowsinfo(hero, org_843_sharky_fisk /*11113*/)) {
        return 1;
    };
};

func void stt_311_fisk_hehlersuccess_info() {
    ai_output(other, self, "Stt_311_Fisk_HehlerSuccess_15_00"); //Êîå-êòî èç Íîâîãî Ëàãåðÿ õî÷åò âåñòè ñ òîáîé äåëî.
    ai_output(self, other, "Stt_311_Fisk_HehlerSuccess_12_01"); //Êòî áû ìîã ïîäóìàòü. Ïîõîæå, òû âíîâü çàâîåâûâàåøü äðóçåé...
    ai_output(self, other, "Stt_311_Fisk_HehlerSuccess_12_02"); //Íå çíàþ, êàê òåáå ýòî óäàëîñü. Êàê åãî çîâóò?
    ai_output(other, self, "Stt_311_Fisk_HehlerSuccess_15_03"); //Åãî çîâóò Øàðêè.
    ai_output(self, other, "Stt_311_Fisk_HehlerSuccess_12_04"); //Øàðêè? Ýòî åùå õóæå, ÷åì Ìîðäðàã.
    ai_output(self, other, "Stt_311_Fisk_HehlerSuccess_12_05"); //Ïî ïîâîäó Äèåãî... Òû ìîæåøü áîëüøå íå âîëíîâàòüñÿ.
    fisk_getnewhehler = log_success;
    b_givexp(xp_fiskdealer);
    log_settopicstatus(ch1_fisknewdealer, log_success);
    b_logentry(ch1_fisknewdealer, ch1_fisknewdealer_2);
};

instance stt_311_fisk_armor(c_info) {
    npc = stt_311_fisk /*8151*/;
    nr = 0;
    condition = stt_311_fisk_armor_condition;
    information = stt_311_fisk_armor_info;
    permanent = true;
    description = "Ó òåáÿ åñòü äëÿ ìåíÿ äîñïåõè?";
};

func int stt_311_fisk_armor_condition() {
    if ((kapitel < 2) && npc_knowsinfo(hero, stt_311_fisk_first /*12320*/)) {
        return true;
    };
};

func void stt_311_fisk_armor_info() {
    ai_output(other, self, "Stt_311_Fisk_ARMOR_Info_15_01"); //Ó òåáÿ åñòü äëÿ ìåíÿ äîñïåõè?
    ai_output(self, other, "Stt_311_Fisk_ARMOR_Info_12_02"); //Óâåðåí, ÷òî ìû ÷òî-íèáóäü îáÿçàòåëüíî ïîäûùåì.
    info_clearchoices(stt_311_fisk_armor /*12346*/);
    info_addchoice(stt_311_fisk_armor /*12346*/, dialog_back, stt_311_fisk_armor_back);
    info_addchoice(stt_311_fisk_armor /*12346*/, b_buildbuyarmorstring(name_fisklightdiggers, value_vlk_armor_l), stt_311_fisk_armor_l);
    info_addchoice(stt_311_fisk_armor /*12346*/, b_buildbuyarmorstring(name_fiskdiggers, value_vlk_armor_m), stt_311_fisk_armor_m);
};

func void stt_311_fisk_armor_back() {
    info_clearchoices(stt_311_fisk_armor /*12346*/);
};

func void stt_311_fisk_armor_l() {
    ai_output(other, self, "Stt_311_Fisk_ARMOR_L_Info_15_01"); //Ó òåáÿ åñòü ïðîñòûå øòàíû äëÿ ðóäîêîïà?
    if (npc_hasitems(hero, itminugget) < value_vlk_armor_l) {
        ai_output(self, other, "Stt_311_Fisk_ARMOR_L_Info_12_02"); //Âîçâðàùàéñÿ, êîãäà ó òåáÿ áóäåò ðóäà!
    }
    else {
        ai_output(self, other, "Stt_311_Fisk_ARMOR_L_Info_12_03"); //Õîðîøèé âûáîð!
        b_giveinvitems(hero, self, itminugget /*4517*/, value_vlk_armor_l);
        createinvitem(self, vlk_armor_l);
        b_giveinvitems(self, hero, vlk_armor_l /*4121*/, 1);
    };
};

func void stt_311_fisk_armor_m() {
    ai_output(other, self, "Stt_311_Fisk_ARMOR_M_Info_15_01"); //Ó òåáÿ åñòü øòàíû äëÿ ðóäîêîïà?
    if (npc_hasitems(hero, itminugget) < value_vlk_armor_m) {
        ai_output(self, other, "Stt_311_Fisk_ARMOR_M_Info_12_02"); //Âîçâðàùàéñÿ, êîãäà ó òåáÿ áóäåò ðóäà!
    }
    else {
        ai_output(self, other, "Stt_311_Fisk_ARMOR_M_Info_12_03"); //Õîðîøèé âûáîð!
        b_giveinvitems(hero, self, itminugget /*4517*/, value_vlk_armor_m);
        createinvitem(self, vlk_armor_m);
        b_giveinvitems(self, hero, vlk_armor_m /*4122*/, 1);
    };
};

instance dia_stt_315_sly_exit(c_info) {
    npc = stt_315_sly /*8157*/;
    nr = 999;
    condition = dia_stt_315_sly_exit_condition;
    information = dia_stt_315_sly_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_stt_315_sly_exit_condition() {
    return 1;
};

func void dia_stt_315_sly_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_stt_315_sly(c_info) {
    npc = stt_315_sly /*8157*/;
    nr = 1;
    condition = dia_stt_315_sly_condition;
    information = dia_stt_315_sly_info;
    important = true;
};

func int dia_stt_315_sly_condition() {
    if (npc_getdisttonpc(self, hero) < zivilanquatschdist) {
        return 1;
    };
};

func void dia_stt_315_sly_info() {
    ai_setwalkmode(self, npc_walk);
    ai_gotonpc(self, other);
    ai_output(self, other, "DIA_STT_315_Sly_10_01"); //Òû íîâåíüêèé, äà? ß òåáÿ çäåñü åùå íå âèäåë.
    ai_output(self, other, "DIA_STT_315_Sly_10_02"); //Ìåíÿ çîâóò Ñëàé. ß ïðåäëàãàþ íîâè÷êàì ðàáîòó.
};

var int sly_lostnek;

instance dia_stt_315_lostnek(c_info) {
    npc = stt_315_sly /*8157*/;
    nr = 1;
    condition = dia_stt_315_lostnek_condition;
    information = dia_stt_315_lostnek_info;
    description = "Ó òåáÿ åñòü äëÿ ìåíÿ ðàáîòà? Êàêàÿ?";
};

func int dia_stt_315_lostnek_condition() {
    return 1;
};

func void dia_stt_315_lostnek_info() {
    ai_output(other, self, "DIA_STT_315_LostNek_15_00"); //Ó òåáÿ åñòü äëÿ ìåíÿ ðàáîòà? Êàêàÿ?
    ai_output(self, other, "DIA_STT_315_LostNek_10_01"); //Ïðîïàë îäèí èç íàøèõ ñòðàæíèêîâ. Åãî çîâóò Íåê. Îí ìîã ïåðåìåòíóòüñÿ ê Íîâîìó Ëàãåðþ!
    ai_output(self, other, "DIA_STT_315_LostNek_10_02"); //Òû íîâåíüêèé, õîäèøü ïîâñþäó è íå âûçûâàåøü ïîäîçðåíèé. Òàê ÷òî ñìîòðè â îáà.
    if (npc_gettrueguild(hero) == gil_none) {
        ai_output(self, other, "DIA_STT_315_LostNek_10_03"); //Íàéäåøü åãî, è ÿ çàìîëâëþ çà òåáÿ ñëîâå÷êî â Ëàãåðå.
    };
    info_clearchoices(dia_stt_315_lostnek /*12359*/);
    info_addchoice(dia_stt_315_lostnek /*12359*/, "ß ïîñòàðàþñü íàéòè åãî.", dia_stt_315_lostnek_doit);
    if (npc_gettrueguild(hero) == gil_none) {
        info_addchoice(dia_stt_315_lostnek /*12359*/, "×òî ìíå ñ òîãî, ÷òî òû çàìîëâèøü çà ìåíÿ ñëîâå÷êî?", dia_stt_315_lostnek_why);
    };
};

func void dia_stt_315_lostnek_why() {
    ai_output(other, self, "DIA_STT_315_LostNek_Why_15_00"); //×òî ìíå ñ òîãî, ÷òî òû çàìîëâèøü çà ìåíÿ ñëîâå÷êî?
    ai_output(self, other, "DIA_STT_315_LostNek_Why_10_01"); //Äëÿ òîãî ÷òîáû ïðèñîåäèíèòüñÿ ê íàøåìó Ëàãåðþ, íóæíî çàðó÷èòüñÿ ïîääåðæêîé ìíîãèõ.
    ai_output(self, other, "DIA_STT_315_LostNek_Why_10_02"); //Åñëè ÿ ïîãîâîðþ ñ Äèåãî, òåáå ýòî î÷åíü ïîìîæåò.
};

func void dia_stt_315_lostnek_doit() {
    ai_output(other, self, "DIA_STT_315_LostNek_DoIt_15_00"); //ß ïîñòàðàþñü íàéòè åãî.
    ai_output(self, other, "DIA_STT_315_LostNek_DoIt_10_01"); //Åñëè âñòðåòèøü Ôëåò÷åðà, ðàññïðîñè åãî ïðî Íåêà. Ôëåò÷åð çàáðàë åãî ðàéîí, ñ òåõ ïîð êàê Íåê èñ÷åç.
    ai_output(other, self, "DIA_STT_315_LostNek_DoIt_15_02"); //Ãäå ìíå åãî èñêàòü?
    ai_output(self, other, "DIA_STT_315_LostNek_DoIt_10_03"); //Åãî ðàéîí íàõîäèòñÿ âîçëå àðåíû.
    sly_lostnek = log_running;
    if (npc_gettrueguild(hero) == gil_none) {
        log_createtopic(ch1_lostnek, log_mission);
        log_settopicstatus(ch1_lostnek, log_running);
        b_logentry(ch1_lostnek, ch1_lostnek_2);
    }
    else {
        log_createtopic(ch1_lostnek, log_mission);
        log_settopicstatus(ch1_lostnek, log_running);
        b_logentry(ch1_lostnek, ch1_lostnek_3);
    };
    info_clearchoices(dia_stt_315_lostnek /*12359*/);
    ai_stopprocessinfos(self);
};

instance dia_stt_315_lostneksuccess(c_info) {
    npc = stt_315_sly /*8157*/;
    nr = 1;
    condition = dia_stt_315_lostneksuccess_condition;
    information = dia_stt_315_lostneksuccess_info;
    permanent = true;
    description = "ß íàøåë Íåêà.";
};

func int dia_stt_315_lostneksuccess_condition() {
    if ((sly_lostnek == log_running) && (npc_hasitems(other, neks_amulett) > 0)) {
        return 1;
    };
};

func void dia_stt_315_lostneksuccess_info() {
    ai_output(other, self, "DIA_STT_315_LostNekSuccess_15_00"); //ß íàøåë Íåêà.
    ai_output(self, other, "DIA_STT_315_LostNekSuccess_10_01"); //Õîðîøî! È òû ìîæåøü ýòî äîêàçàòü?
    info_clearchoices(dia_stt_315_lostneksuccess /*12364*/);
    info_addchoice(dia_stt_315_lostneksuccess /*12364*/, "Íåò, áîþñü, ÷òî íåò.", dia_stt_315_lostneksuccess_noproof);
    info_addchoice(dia_stt_315_lostneksuccess /*12364*/, "Íà íåì áûë ýòîò àìóëåò - ñìîòðè.", dia_stt_315_lostneksuccess_proof);
};

func void dia_stt_315_lostneksuccess_proof() {
    ai_output(other, self, "DIA_STT_315_LostNekSuccess_Proof_15_00"); //Íà íåì áûë ýòîò àìóëåò - ñìîòðè.
    ai_output(self, other, "DIA_STT_315_LostNekSuccess_Proof_10_01"); //Ñîáñòâåííî, èç-çà ýòîãî àìóëåòà âñå è çàòåâàëîñü. Òû óìíûé ïàðåíü.
    ai_output(self, other, "DIA_STT_315_LostNekSuccess_Proof_10_02"); //Äóìàþ, òû õîòåë îñòàâèòü àìóëåò ñåáå, íî â èòîãå òû ïîñòóïèë âåðíî.
    if ((npc_gettrueguild(hero) == gil_none) && (hero.guild == gil_none)) {
        ai_output(self, other, "DIA_STT_315_LostNekSuccess_Proof_10_03"); //Åñëè Äèåãî ñïðîñèò ìåíÿ, ÿ âûñêàæóñü â òâîþ ïîääåðæêó.
    };
    sly_lostnek = log_success;
    b_giveinvitems(other, self, neks_amulett /*4561*/, 1);
    log_settopicstatus(ch1_lostnek, log_success);
    b_logentry(ch1_lostnek, ch1_lostnek_4);
    b_givexp(xp_slysearchfornek);
    if (npc_gettrueguild(hero) == gil_none) {
        log_createtopic(ch1_joinoc, log_mission);
        log_settopicstatus(ch1_joinoc, log_running);
        b_logentry(ch1_joinoc, ch1_joinoc_10);
    }
    else {
        log_createtopic(ch1_joinoc, log_mission);
        log_settopicstatus(ch1_joinoc, log_failed);
        b_logentry(ch1_joinoc, ch1_joinoc_11);
    };
    info_clearchoices(dia_stt_315_lostneksuccess /*12364*/);
    ai_stopprocessinfos(self);
};

func void dia_stt_315_lostneksuccess_noproof() {
    ai_output(other, self, "DIA_STT_315_LostNekSuccess_NoProof_15_00"); //Íåò, áîþñü, ÷òî íåò.
    ai_output(self, other, "DIA_STT_315_LostNekSuccess_NoProof_10_01"); //Äà? Òû âåäü íè÷åãî îò ìåíÿ íå ñêðûâàåøü, ïðàâäà? Ó Íåêà áûë îäèí àìóëåò...
    ai_output(self, other, "DIA_STT_315_LostNekSuccess_NoProof_10_02"); //Íå ëþáëþ, êîãäà ó êîãî-òî îêàçûâàþòñÿ ìîè âåùè. Åñëè íàéäåøü ýòîò àìóëåò, ïðèíåñè åãî ìíå!
    ai_output(other, self, "DIA_STT_315_LostNekSuccess_NoProof_15_03"); //Åñëè ÿ íàéäó àìóëåò, òû áóäåøü ïåðâûì, êîìó ÿ ñêàæó îá ýòîì.
    b_logentry(ch1_lostnek, ch1_lostnek_5);
    info_clearchoices(dia_stt_315_lostneksuccess /*12364*/);
    ai_stopprocessinfos(self);
};

instance dia_stt_315_sly_aftersuccess(c_info) {
    npc = stt_315_sly /*8157*/;
    nr = 1;
    condition = dia_stt_315_sly_aftersuccess_condition;
    information = dia_stt_315_sly_aftersuccess_info;
    permanent = true;
    description = "Êàê äåëà?";
};

func int dia_stt_315_sly_aftersuccess_condition() {
    if (((kapitel == 1) && (sly_lostnek == log_success)) && (npc_gettrueguild(hero) == gil_none)) {
        return 1;
    };
};

func void dia_stt_315_sly_aftersuccess_info() {
    ai_output(other, self, "DIA_STT_315_Sly_AfterSuccess_15_00"); //Êàê äåëà?
    ai_output(self, other, "DIA_STT_315_Sly_AfterSuccess_10_01"); //Õîðîøî! Ñî ìíîé òû ìîæåøü áîëüøå íå âîëíîâàòüñÿ ïî ïîâîäó Äèåãî!
    ai_output(other, self, "DIA_STT_315_Sly_AfterSuccess_15_02"); //Óñëóãà çà óñëóãó, à?
    ai_output(self, other, "DIA_STT_315_Sly_AfterSuccess_10_03"); //Íà òîì æèçíü è ñòîèò.
};

instance dia_dexter_exit(c_info) {
    npc = stt_329_dexter /*8176*/;
    nr = 999;
    condition = dia_dexter_exit_condition;
    information = dia_dexter_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_dexter_exit_condition() {
    return 1;
};

func void dia_dexter_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_dexter_first(c_info) {
    npc = stt_329_dexter /*8176*/;
    nr = 1;
    condition = dia_dexter_first_condition;
    information = dia_dexter_first_info;
    important = true;
};

func int dia_dexter_first_condition() {
    if (npc_getdisttonpc(self, hero) < zivilanquatschdist) {
        return 1;
    };
};

func void dia_dexter_first_info() {
    ai_output(self, other, "DIA_Dexter_IAmNew_10_00"); //Ýé, òû! Ó ìåíÿ åñòü áîëîòíèê è ýëèêñèðû èç Ëàãåðÿ Ñåêòàíòîâ. Èíòåðåñóåøüñÿ?
};

instance dia_dexter_kraut(c_info) {
    npc = stt_329_dexter /*8176*/;
    nr = 1;
    condition = dia_dexter_kraut_condition;
    information = dia_dexter_kraut_info;
    description = "×òî òàêîå áîëîòíèê?";
};

func int dia_dexter_kraut_condition() {
    return 1;
};

func void dia_dexter_kraut_info() {
    ai_output(other, self, "DIA_Dexter_Kraut_15_00"); //×òî òàêîå áîëîòíèê?
    ai_output(self, other, "DIA_Dexter_Kraut_10_01"); //Òû íîâåíüêèé, äà? Áîëîòíèê êóðÿò, êîãäà õîòÿò íåìíîãî ðàññëàáèòüñÿ.
};

instance dia_dexter_trade(c_info) {
    npc = stt_329_dexter /*8176*/;
    nr = 800;
    condition = dia_dexter_trade_condition;
    information = dia_dexter_trade_info;
    permanent = true;
    trade = true;
    description = "Ïîêàæè ìíå, ÷òî ó òåáÿ åñòü.";
};

func int dia_dexter_trade_condition() {
    return 1;
};

func void dia_dexter_trade_info() {
    ai_output(other, self, "DIA_Dexter_Trade_15_00"); //Ïîêàæè ìíå, ÷òî ó òåáÿ åñòü.
    ai_output(self, other, "DIA_Dexter_Trade_10_01"); //Âñå ñàìîå ëó÷øåå...
    if (dexter_traded == false) {
        log_createtopic(ge_traderoc, log_note);
        b_logentry(ge_traderoc, ge_traderoc_7);
        dexter_traded = true;
    };
};

var int dexter_getkalomsrecipe;

instance dia_dexter_joinoc(c_info) {
    npc = stt_329_dexter /*8176*/;
    nr = 1;
    condition = dia_dexter_joinoc_condition;
    information = dia_dexter_joinoc_info;
    description = "ß õî÷ó ïðèñîåäèíèòüñÿ ê Ëàãåðþ - õî÷ó ñòàòü Ïðèçðàêîì.";
};

func int dia_dexter_joinoc_condition() {
    if (npc_gettrueguild(hero) == gil_none) {
        return 1;
    };
};

func void dia_dexter_joinoc_info() {
    ai_output(other, self, "DIA_Dexter_JoinOC_15_00"); //ß õî÷ó ïðèñîåäèíèòüñÿ ê Ëàãåðþ - õî÷ó ñòàòü Ïðèçðàêîì.
    ai_output(self, other, "DIA_Dexter_JoinOC_10_01"); //Äà? Õî÷åøü äîêàçàòü, ÷òî òû ÷åãî-òî ñòîèøü?
    ai_output(self, other, "DIA_Dexter_JoinOC_10_02"); //Õîðîøî. Åñòü îäíî äåëî. Åñëè ñïðàâèøüñÿ, ÿ çàìîëâëþ çà òåáÿ ñëîâå÷êî ïåðåä Äèåãî.
    ai_output(other, self, "DIA_Dexter_JoinOC_15_03"); //Êàêîå äåëî?
    ai_output(self, other, "DIA_Dexter_JoinOC_10_04"); //Â Ëàãåðå Ñåêòàíòîâ åñòü îäèí òèï ïî èìåíè Ãàëîì. Áîëüøàÿ øèøêà - îäèí èç èõ Ãóðó.
    ai_output(self, other, "DIA_Dexter_JoinOC_10_05"); //Ãàëîì - àëõèìèê. Ó íåãî åñòü ðåöåïò õîðîøåãî öåëåáíîãî ýëèêñèðà.
    ai_output(self, other, "DIA_Dexter_JoinOC_10_06"); //ß õî÷ó êóïèòü ó íåãî ðåöåïò, ÷òîáû ñàìîìó äåëàòü òàêîé ýëèêñèð.
    ai_output(self, other, "DIA_Dexter_JoinOC_10_07"); //Íî äëÿ ýòîãî íóæíî êàê-òî âñòðåòèòüñÿ ñ Ãàëîìîì.
    ai_output(other, self, "DIA_Dexter_JoinOC_15_08"); //×òî ÿ äîëæåí ñäåëàòü?
    ai_output(self, other, "DIA_Dexter_JoinOC_10_09"); //Áîëîòíûì ïðèäóðêàì ïîñòîÿííî íóæíû íîâûå ëþäè. Òû çäåñü íîâåíüêèé. Ïðèòâîðèñü, ÷òî õî÷åøü ïðèñîåäèíèòüñÿ ê íèì.
    ai_output(self, other, "DIA_Dexter_JoinOC_10_10"); //Ãàëîì - îäèí èç Ãóðó. Îí íåïðåìåííî çàõî÷åò èñïûòàòü íîâè÷êà. Êîãäà âñòðåòèøüñÿ ñ íèì, ïîïðîáóé äîáûòü ðåöåïò.
    ai_output(self, other, "DIA_Dexter_JoinOC_10_11"); //Ìîæåøü êóïèòü åãî, ìîæåøü óêðàñòü - ìíå âñå ðàâíî, êàê òû åãî äîáóäåøü.
    info_clearchoices(dia_dexter_joinoc /*12385*/);
    info_addchoice(dia_dexter_joinoc /*12385*/, "Ëàäíî, ÿ ïîïðîáóþ.", dia_dexter_joinoc_ok);
    info_addchoice(dia_dexter_joinoc /*12385*/, "Ýòî äîëæíî áûòü íåïðîñòî. ×òî ÿ ïîëó÷ó â èòîãå?", dia_dexter_joinoc_howmuch);
};

func void dia_dexter_joinoc_ok() {
    ai_output(other, self, "DIA_Dexter_JoinOC_Ok_15_00"); //Ëàäíî, ÿ ïîïðîáóþ.
    dexter_getkalomsrecipe = log_running;
    log_createtopic(ch1_kalomsrecipe, log_mission);
    log_settopicstatus(ch1_kalomsrecipe, log_running);
    b_logentry(ch1_kalomsrecipe, ch1_kalomsrecipe_2);
    b_logentry(ch1_kalomsrecipe, ch1_kalomsrecipe_3);
    info_clearchoices(dia_dexter_joinoc /*12385*/);
};

func void dia_dexter_joinoc_howmuch() {
    ai_output(other, self, "DIA_Dexter_JoinOC_HowMuch_15_00"); //Ýòî äîëæíî áûòü íåïðîñòî. ×òî ÿ ïîëó÷ó â èòîãå?
    ai_output(self, other, "DIA_Dexter_JoinOC_HowMuch_10_01"); //Îäíàæäû Äèåãî ñïðîñèò ìåíÿ î òåáå. Óãàäàé, îò ÷åãî áóäåò çàâèñèòü ìîé îòâåò.
    info_addchoice(dia_dexter_joinoc /*12385*/, "Âîçìîæíî, ìíå ïðèäåòñÿ çàïëàòèòü çà ðåöåïò.", dia_dexter_joinoc_advance);
};

func void dia_dexter_joinoc_advance() {
    ai_output(other, self, "DIA_Dexter_JoinOC_Advance_15_00"); //Âîçìîæíî, ìíå ïðèäåòñÿ çàïëàòèòü çà ðåöåïò. Êàê íàñ÷åò íåáîëüøîãî àâàíñà? Ñêàæåì, 50 êóñêîâ ðóäû?
    ai_output(self, other, "DIA_Dexter_JoinOC_Advance_10_01"); //Çàáóäü îá ýòîì.
    info_addchoice(dia_dexter_joinoc /*12385*/, "Áåç ðóäû ÿ íå ñìîãó äîáûòü òåáå ýòîò ðåöåïò!", dia_dexter_joinoc_threat);
};

func void dia_dexter_joinoc_threat() {
    ai_output(other, self, "DIA_Dexter_JoinOC_Threat_15_00"); //Áåç ðóäû ÿ íå ñìîãó äîáûòü òåáå ýòîò ðåöåïò!
    ai_output(self, other, "DIA_Dexter_JoinOC_Threat_10_01"); //Õîðîøî! Î ðóäå ïîãîâîðèì ïîçæå, êîãäà ðåöåïò óæå áóäåò ó òåáÿ.
    info_addchoice(dia_dexter_joinoc /*12385*/, "Íåò!", dia_dexter_joinoc_orenoworelse);
};

func void dia_dexter_joinoc_orenoworelse() {
    ai_output(other, self, "DIA_Dexter_JoinOC_OreNowOrElse_15_00"); //Íåò! Èëè òû äàåøü ìíå ðóäó ñåé÷àñ, èëè ìîæåøü ñàì èñêàòü ñâîé ðåöåïò!
    ai_output(self, other, "DIA_Dexter_JoinOC_OreNowOrElse_10_01"); //Çíàåøü, ïîìèìî òåáÿ çäåñü åñòü ìíîãî äðóãèõ íîâè÷êîâ. Ïîæàëóé, ÿ ïîðó÷ó ýòó ðàáîòó êîìó-íèáóäü èç íèõ...
    info_addchoice(dia_dexter_joinoc /*12385*/, "Ëàäíî! Çàáóäåì îá ýòîì.", dia_dexter_joinoc_forgetit);
};

func void dia_dexter_joinoc_forgetit() {
    ai_output(other, self, "DIA_Dexter_JoinOC_ForgetIt_15_00"); //Ëàäíî! Çàáóäåì îá ýòîì.
    ai_output(self, other, "DIA_Dexter_JoinOC_ForgetIt_10_01"); //Ïîãîäè. ß ïðîñòî õîòåë çíàòü, êàê äàëåêî òû ñìîæåøü çàéòè. 50 êóñêîâ ðóäû - äîâîëüíî áîëüøàÿ ñóììà äëÿ íîâè÷êà, òû íå íàõîäèøü?
    ai_output(other, self, "DIA_Dexter_JoinOC_ForgetIt_15_02"); //Çâó÷èò óæå ëó÷øå.
    ai_output(self, other, "DIA_Dexter_JoinOC_ForgetIt_10_03"); //Ëàäíî, ëàäíî, ó ìåíÿ êàê ðàç åñòü 50 ëèøíèõ êóñêîâ. Íå ïîäâåäè ìåíÿ, ìàëûø!
    dexter_getkalomsrecipe = log_running;
    log_createtopic(ch1_kalomsrecipe, log_mission);
    log_settopicstatus(ch1_kalomsrecipe, log_running);
    b_logentry(ch1_kalomsrecipe, ch1_kalomsrecipe_2);
    b_logentry(ch1_kalomsrecipe, ch1_kalomsrecipe_3);
    createinvitems(self, itminugget, 50);
    b_giveinvitems(self, other, itminugget /*4517*/, 50);
    info_clearchoices(dia_dexter_joinoc /*12385*/);
};

var int dexter_psicamp;

instance dia_dexter_wherest(c_info) {
    npc = stt_329_dexter /*8176*/;
    nr = 800;
    condition = dia_dexter_wherest_condition;
    information = dia_dexter_wherest_info;
    permanent = true;
    description = "Ãäå íàõîäèòñÿ Ëàãåðü Ñåêòàíòîâ?";
};

func int dia_dexter_wherest_condition() {
    if (dexter_getkalomsrecipe == log_running) {
        return 1;
    };
};

func void dia_dexter_wherest_info() {
    ai_output(other, self, "DIA_Dexter_WhereST_15_00"); //Ãäå íàõîäèòñÿ Ëàãåðü Ñåêòàíòîâ?
    ai_output(self, other, "DIA_Dexter_WhereST_10_01"); //Âûõîäèøü èç Ëàãåðÿ ÷åðåç þæíûå âîðîòà è èäåøü íà âîñòîê. Òåáå ïîíàäîáèòñÿ êàðòà.
    if (npc_hasitems(self, itwrworldmap) > 0) {
        ai_output(self, other, "DIA_Dexter_WhereST_10_02"); //Ó ìåíÿ êàê ðàç åñòü îäíà - çà 50 êóñêîâ...
    };
    ai_output(other, self, "DIA_Dexter_WhereST_15_02"); //Þæíûå âîðîòà - ýòî îáðóøèâøàÿñÿ áàøíÿ, âåðíî?
    ai_output(self, other, "DIA_Dexter_WhereST_10_03"); //Âåðíî.
    if (!dexter_psicamp) {
        b_logentry(ch1_kalomsrecipe, ch1_kalomsrecipe_6);
        dexter_psicamp = true;
    };
};

instance dia_dexter_kalomsrecipesuccess(c_info) {
    npc = stt_329_dexter /*8176*/;
    nr = 800;
    condition = dia_dexter_kalomsrecipesuccess_condition;
    information = dia_dexter_kalomsrecipesuccess_info;
    permanent = true;
    description = "ß äîáûë ðåöåïò!";
};

func int dia_dexter_kalomsrecipesuccess_condition() {
    if ((dexter_getkalomsrecipe == log_running) && (npc_hasitems(other, kalomsrecipe) > 0)) {
        return 1;
    };
};

func void dia_dexter_kalomsrecipesuccess_info() {
    ai_output(other, self, "DIA_Dexter_KalomsRecipeSuccess_15_00"); //ß äîáûë ðåöåïò!
    ai_output(self, other, "DIA_Dexter_KalomsRecipeSuccess_10_01"); //Î÷åíü õîðîøî! Ïîêàæè ìíå åãî!
    b_usefakescroll();
    ai_output(self, other, "DIA_Dexter_KalomsRecipeSuccess_10_02"); //Îòëè÷íî! Òåïåðü ÿ ñàì ñìîãó ãîòîâèòü ýòîò ýëèêñèð.
    ai_output(self, other, "DIA_Dexter_KalomsRecipeSuccess_10_03"); //Òû õîðîøèé ïàðåíü! Äèåãî áóäåò çíàòü îá ýòîì!
    ai_output(self, other, "DIA_Dexter_KalomsRecipeSuccess_10_04"); //Âîò, âîçüìè, ýòî òåáå çà óñëóãè...
    createinvitems(other, itminugget, 50);
    b_giveinvitems(other, self, kalomsrecipe /*4593*/, 1);
    dexter_getkalomsrecipe = log_success;
    if (npc_gettrueguild(hero) == gil_none) {
        log_settopicstatus(ch1_kalomsrecipe, log_success);
        b_logentry(ch1_kalomsrecipe, ch1_kalomsrecipe_7);
    }
    else {
        log_settopicstatus(ch1_kalomsrecipe, log_success);
        b_logentry(ch1_kalomsrecipe, ch1_kalomsrecipe_8);
    };
    b_givexp(xp_dexterkalom);
};

instance dia_stt_331_fingers_exit(c_info) {
    npc = stt_331_fingers /*8181*/;
    nr = 999;
    condition = dia_stt_331_fingers_exit_condition;
    information = dia_stt_331_fingers_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_stt_331_fingers_exit_condition() {
    return 1;
};

func void dia_stt_331_fingers_exit_info() {
    ai_stopprocessinfos(self);
};

var int fingers_canteach;

instance dia_fingers_becomeshadow(c_info) {
    npc = stt_331_fingers /*8181*/;
    nr = 2;
    condition = dia_fingers_becomeshadow_condition;
    information = dia_fingers_becomeshadow_info;
    permanent = true;
    description = "ß õî÷ó ñòàòü Ïðèçðàêîì!";
};

func int dia_fingers_becomeshadow_condition() {
    if ((fingers_canteach == false) && (npc_gettrueguild(hero) == gil_none)) {
        return 1;
    };
};

func void dia_fingers_becomeshadow_info() {
    ai_output(other, self, "DIA_Fingers_BecomeShadow_15_00"); //ß õî÷ó ñòàòü Ïðèçðàêîì!
    ai_output(self, other, "DIA_Fingers_BecomeShadow_05_01"); //È ÷òî ñ òîãî?
    info_clearchoices(dia_fingers_becomeshadow /*12405*/);
    info_addchoice(dia_fingers_becomeshadow /*12405*/, dialog_back, dia_fingers_becomeshadow_back);
    if (npc_knowsinfo(hero, info_diego_teachers /*11836*/)) {
        info_addchoice(dia_fingers_becomeshadow /*12405*/, "Ìíå íóæíî ÷åìó-íèáóäü íàó÷èòüñÿ. ", dia_fingers_becomeshadow_teachme);
    };
    info_addchoice(dia_fingers_becomeshadow /*12405*/, "Òû ìîæåøü ìíå ïîìî÷ü?", dia_fingers_becomeshadow_anytips);
};

func void dia_fingers_becomeshadow_back() {
    info_clearchoices(dia_fingers_becomeshadow /*12405*/);
};

func void dia_fingers_becomeshadow_anytips() {
    ai_output(other, self, "DIA_Fingers_BecomeShadow_AnyTips_15_00"); //Òû ìîæåøü ìíå ïîìî÷ü?
    ai_output(self, other, "DIA_Fingers_BecomeShadow_AnyTips_05_01"); //Åñëè áû ÿ çíàë, êàê...
};

func void dia_fingers_becomeshadow_teachme() {
    ai_output(other, self, "DIA_Fingers_BecomeShadow_TeachMe_15_00"); //Ìíå íóæíî ÷åìó-íèáóäü íàó÷èòüñÿ.
    ai_output(self, other, "DIA_Fingers_BecomeShadow_TeachMe_05_01"); //Êòî ïðèñëàë òåáÿ êî ìíå?
    ai_output(other, self, "DIA_Fingers_BecomeShadow_TeachMe_15_02"); //Äèåãî.
    ai_output(self, other, "DIA_Fingers_BecomeShadow_TeachMe_05_03"); //Ñ ýòîãî íóæíî áûëî íà÷èíàòü.
    ai_output(self, other, "DIA_Fingers_BecomeShadow_TeachMe_05_04"); //Åñëè õî÷åøü ïðèñîåäèíèòüñÿ ê ýòîìó Ëàãåðþ, òû äîëæåí áûòü õîðîøèì áîéöîì - èëè õîðîøèì âîðîì.
    ai_output(self, other, "DIA_Fingers_BecomeShadow_TeachMe_05_05"); //Ïðèçðàêè áóäó èñïûòûâàòü òåáÿ. Îíè äàäóò çàäàíèå, íà êîòîðîì òû íå äîëæåí ïîïàñòüñÿ.
    ai_output(self, other, "DIA_Fingers_BecomeShadow_TeachMe_05_06"); //Ïîýòîìó íà÷àòü òåáå ñòîèò ñ âîðîâñêîé íàóêè.
    ai_output(self, other, "DIA_Fingers_BecomeShadow_TeachMe_05_07"); //Òàê óæ ïîëó÷èëîñü, ÷òî ÿ - ëó÷øèé âîð âî âñåì Ñòàðîì Ëàãåðå.
    fingers_canteach = true;
    log_createtopic(ge_teacheroc, log_note);
    b_logentry(ge_teacheroc, ge_teacheroc_fingers1);
    info_clearchoices(dia_fingers_becomeshadow /*12405*/);
};

var int fingers_wherecavalorn;

instance dia_fingers_lehrer(c_info) {
    npc = stt_331_fingers /*8181*/;
    nr = 2;
    condition = dia_fingers_lehrer_condition;
    information = dia_fingers_lehrer_info;
    permanent = true;
    description = "×åìó òû ìîæåøü ìåíÿ íàó÷èòü?";
};

func int dia_fingers_lehrer_condition() {
    if (fingers_canteach == true) {
        return 1;
    };
};

func void dia_fingers_lehrer_info() {
    ai_output(other, self, "DIA_Fingers_Lehrer_15_00"); //×åìó òû ìîæåøü ìåíÿ íàó÷èòü?
    ai_output(self, other, "DIA_Fingers_Lehrer_05_02"); //Ýòî çàâèñèò îò òîãî, ÷òî òû õî÷åøü óçíàòü.
    info_clearchoices(dia_fingers_lehrer /*12412*/);
    info_addchoice(dia_fingers_lehrer /*12412*/, dialog_back, dia_fingers_lehrer_back);
    if (npc_gettalentskill(hero, npc_talent_pickpocket) == 1) {
        info_addchoice(dia_fingers_lehrer /*12412*/, b_buildlearnstring(name_learnpickpocket_2, lpcost_talent_pickpocket_2, 0), dia_fingers_lehrer_pickpocket2);
    };
    if (npc_gettalentskill(hero, npc_talent_pickpocket) == 0) {
        info_addchoice(dia_fingers_lehrer /*12412*/, b_buildlearnstring(name_learnpickpocket_1, lpcost_talent_pickpocket_1, 0), dia_fingers_lehrer_pickpocket);
    };
    if (npc_gettalentskill(hero, npc_talent_picklock) == 1) {
        info_addchoice(dia_fingers_lehrer /*12412*/, b_buildlearnstring(name_learnpicklock_2, lpcost_talent_picklock_2, 0), dia_fingers_lehrer_lockpick2);
    };
    if (npc_gettalentskill(hero, npc_talent_picklock) == 0) {
        info_addchoice(dia_fingers_lehrer /*12412*/, b_buildlearnstring(name_learnpicklock_1, lpcost_talent_picklock_1, 0), dia_fingers_lehrer_lockpick);
    };
    if (npc_gettalentskill(hero, npc_talent_sneak) == 0) {
        info_addchoice(dia_fingers_lehrer /*12412*/, "ß õî÷ó íàó÷èòüñÿ ïåðåäâèãàòüñÿ áåç øóìà. ", dia_fingers_lehrer_schleichen);
    };
};

func void dia_fingers_lehrer_schleichen() {
    ai_output(other, self, "DIA_Fingers_Lehrer_Schleichen_15_00"); //ß õî÷ó íàó÷èòüñÿ ïåðåäâèãàòüñÿ áåç øóìà.
    ai_output(self, other, "DIA_Fingers_Lehrer_Schleichen_05_01"); //Ñêàæó áåç ëîæíîé ñêðîìíîñòè, ÷òî ÿ - îäèí èç ëó÷øèõ âîðîâ, êîòîðûõ çàáðàñûâàëè â ýòó êîëîíèþ.
    ai_output(self, other, "DIA_Fingers_Lehrer_Schleichen_05_02"); //Íî êîãäà ðå÷ü èäåò îá îáó÷åíèè èñêóññòâó êðàñòüñÿ, òåáå ëó÷øå îáðàòèòüñÿ ê Êàâàëîðíó.
    fingers_wherecavalorn = true;
};

func void dia_fingers_lehrer_lockpick() {
    ai_output(other, self, "DIA_Fingers_Lehrer_Lockpick_15_00"); //Êàê íàó÷èòüñÿ ðàáîòàòü ñ îòìû÷êîé?
    if (b_giveskill(other, npc_talent_picklock, 1, lpcost_talent_picklock_1)) {
        ai_output(self, other, "DIA_Fingers_Lehrer_Lockpick_05_01"); //Õî÷åøü óçíàòü, à? Ýòî íå òàê óæ ñëîæíî äëÿ íîâè÷êà.
        ai_output(self, other, "DIA_Fingers_Lehrer_Lockpick_05_02"); //Ïðåæäå âñåãî íóæíî ñëåäèòü çà òåì, ÷òîáû íå ñëîìàòü îòìû÷êó.
        ai_output(self, other, "DIA_Fingers_Lehrer_Lockpick_05_03"); //Â áóäóùåì, êîãäà ó òåáÿ áóäåò ïîáîëüøå òåðïåíèÿ è îïûòà, ïîéìåøü, ÷òî êó÷à îòìû÷åê òåáå ïðîñòî íå íóæíà.
    };
};

func void dia_fingers_lehrer_lockpick2() {
    ai_output(other, self, "DIA_Fingers_Lehrer_Lockpick2_15_00"); //Ðàáîòà âçëîìùèêà ìíå ïî äóøå. ß õî÷ó ñòàòü ýêñïåðòîì!
    if (b_giveskill(other, npc_talent_picklock, 2, lpcost_talent_picklock_2)) {
        ai_output(self, other, "DIA_Fingers_Lehrer_Lockpick2_05_01"); //Êîãäà ïîäíàáåðåøüñÿ îïûòà, íà÷íåøü ÷óâñòâîâàòü ìîìåíò, êîãäà îòìû÷êà ãîòîâà âîò-âîò ñëîìàòüñÿ. Ó íåå òîãäà çâóê ìåíÿåòñÿ!
        ai_output(self, other, "DIA_Fingers_Lehrer_Lockpick2_05_02"); //Äóìàþ, ó òåáÿ ïîëó÷èòñÿ. Ïðèó÷àé ñåáÿ âñëóøèâàòüñÿ â òèõîå ïîùåëêèâàíèå çàìêà, è â áóäóùåì òû ñáåðåæåøü ñåáå êó÷ó îòìû÷åê.
        ai_output(self, other, "DIA_Fingers_Lehrer_Lockpick2_05_03"); //Ó íàñòîÿùåãî ïðîôåññèîíàëà âñåãäà åñòü øàíñ îòêðûòü ñóíäóê, íå èñïîðòèâ ïðè ýòîì èíñòðóìåíò.
    };
};

func void dia_fingers_lehrer_pickpocket() {
    ai_output(other, self, "DIA_Fingers_Lehrer_PICKPOCKET_15_00"); //ß õî÷ó ñòàòü îïûòíûì êàðìàííèêîì.
    if (npc_gettalentskill(other, npc_talent_sneak) == 1) {
        if (b_giveskill(other, npc_talent_pickpocket, 1, lpcost_talent_pickpocket_1)) {
            ai_output(self, other, "DIA_Fingers_Lehrer_PICKPOCKET_05_01"); //Ñîáèðàåøüñÿ èçáàâëÿòü íàðîä îò åãî ñáåðåæåíèé? Ëàäíî.
            ai_output(self, other, "DIA_Fingers_Lehrer_PICKPOCKET_05_02"); //ß ïîìîãó óëó÷øèòü òâîè íàâûêè, íî øàíñ, ÷òî òåáÿ ïîéìàþò, âñå ðàâíî âåëèê.
            ai_output(self, other, "DIA_Fingers_Lehrer_PICKPOCKET_05_03"); //Ðèñêîâàòü ñòîèò ëèøü â òîì ñëó÷àå, êîãäà êðîìå òâîåé æåðòâû íèêîãî íåò ïîáëèçîñòè.
            ai_output(self, other, "DIA_Fingers_Lehrer_PICKPOCKET_05_04"); //Òîëüêî ýêñïåðò ìîæåò øàðèòü ïî êàðìàíàì òàê, ÷òî ÷åëîâåê íè÷åãî íå çàìåòèò.
        };
    }
    else {
        ai_output(self, other, "DIA_Fingers_lehrer_Pickpocket_05_05"); //Çàáóäü îá ýòîì! Òû íèêîãäà íå ñòàíåøü îïûòíûì âîðîì, ïîêà íå íàó÷èøüñÿ áåñøóìíî ïåðåäâèãàòüñÿ.
    };
};

func void dia_fingers_lehrer_pickpocket2() {
    ai_output(other, self, "DIA_Fingers_Lehrer_Pickpocket2_15_00"); //Ðàáîòà êàðìàííèêà ìíå ïî äóøå. ß õî÷ó ñòàòü ýêñïåðòîì!
    if (b_giveskill(other, npc_talent_pickpocket, 2, lpcost_talent_pickpocket_2)) {
        ai_output(self, other, "DIA_Fingers_Lehrer_Pickpocket2_05_01"); //Äóìàþ, òû óæå äîñòàòî÷íî îïûòåí, ÷òîáû ïîñòè÷ü ïîñëåäíèå òîíêîñòè ýòîãî ðåìåñëà.
        ai_output(self, other, "DIA_Fingers_Lehrer_Pickpocket2_05_02"); //Íî òû äîëæåí çíàòü, ÷òî âðåìÿ îò âðåìåíè ïîïàäàþòñÿ äàæå ëó÷øèå èç ëó÷øèõ.
        ai_output(self, other, "DIA_Fingers_Lehrer_Pickpocket2_05_03"); //Áåðåãè ñåáÿ.
    };
};

func void dia_fingers_lehrer_back() {
    info_clearchoices(dia_fingers_lehrer /*12412*/);
};

instance dia_fingers_wherecavalorn(c_info) {
    npc = stt_331_fingers /*8181*/;
    nr = 2;
    condition = dia_fingers_wherecavalorn_condition;
    information = dia_fingers_wherecavalorn_info;
    permanent = true;
    description = "Ãäå ìíå èñêàòü Êàâàëîðíà?";
};

func int dia_fingers_wherecavalorn_condition() {
    if (fingers_wherecavalorn == true) {
        return 1;
    };
};

func void dia_fingers_wherecavalorn_info() {
    ai_output(other, self, "DIA_Fingers_WhereCavalorn_15_00"); //Ãäå ìíå èñêàòü Êàâàëîðíà?
    ai_output(self, other, "DIA_Fingers_WhereCavalorn_05_01"); //Îí ïðîìûøëÿåò íå çäåñü. Òû íàéäåøü åãî íà ïóòè ê Íîâîìó Ëàãåðþ. Ê çàïàäó îò Ñòàðîãî Ëàãåðÿ, òàì, ãäå øèðîêîå óùåëüå.
    ai_output(self, other, "DIA_Fingers_WhereCavalorn_05_02"); //Â ýòîì óùåëüå åñòü ñòàðàÿ õèæèíà ëåñîðóáîâ. Îí æèâåò òàì.
    log_createtopic(ge_teacherow, log_note);
    b_logentry(ge_teacherow, ge_teacherow_3);
};

var int fingers_learnt;

instance dia_fingers_learnt(c_info) {
    npc = stt_331_fingers /*8181*/;
    nr = 2;
    condition = dia_fingers_learnt_condition;
    information = dia_fingers_learnt_info;
    permanent = true;
    description = "Òû âåäü çàìîëâèøü çà ìåíÿ ñëîâå÷êî ïåðåä Äèåãî?";
};

func int dia_fingers_learnt_condition() {
    if ((fingers_learnt != log_success) && (npc_gettrueguild(hero) == gil_none)) {
        return 1;
    };
};

func void dia_fingers_learnt_info() {
    ai_output(other, self, "DIA_Fingers_Learnt_15_00"); //Òû âåäü çàìîëâèøü çà ìåíÿ ñëîâå÷êî ïåðåä Äèåãî?
    if (((npc_gettalentskill(other, npc_talent_picklock) + npc_gettalentskill(other, npc_talent_pickpocket)) + npc_gettalentskill(other, npc_talent_sneak)) > 0) {
        ai_output(self, other, "DIA_Fingers_Learnt_05_01"); //Äà. Òû óæå ìíîãîìó íàó÷èëñÿ è ñìîæåøü ïðèíåñòè ïîëüçó ýòîìó Ëàãåðþ.
        ai_output(self, other, "DIA_Fingers_Learnt_05_02"); //Íàì íóæíû îïûòíûå âîðû. ß ïîääåðæó òåáÿ.
        fingers_learnt = log_success;
        b_givexp(xp_fingerstrain);
        b_logentry(ch1_joinoc, ch1_joinoc_17);
    }
    else {
        ai_output(self, other, "DIA_Fingers_Learnt_05_03"); //Íó...
        ai_output(self, other, "DIA_Fingers_Learnt_05_04"); //Åñëè òû äîêàæåøü, ÷òî ÷åãî-òî ñòîèøü êàê âîð, ìû íàéäåì äëÿ òåáÿ äåëî!
        ai_output(other, self, "DIA_Fingers_Learnt_15_05"); //Êàê ýòî ñäåëàòü?
        ai_output(self, other, "DIA_Fingers_Learnt_05_06"); //Ó÷èñü âîðîâñêîìó äåëó! Êîãäà ó òåáÿ áóäåò áîëüøå îïûòà â èñêóññòâå ïåðåäâèãàòüñÿ áåñøóìíî, â ðàáîòå ñ îòìû÷êîé è â äåëå êàðìàííèêà, ÿ ïîääåðæó òåáÿ.
        fingers_learnt = log_running;
        b_logentry(ch1_joinoc, ch1_joinoc_18);
    };
};

instance stt_335_santino_exit(c_info) {
    npc = stt_335_santino /*8183*/;
    nr = 999;
    condition = stt_335_santino_exit_condition;
    information = stt_335_santino_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int stt_335_santino_exit_condition() {
    return 1;
};

func void stt_335_santino_exit_info() {
    ai_stopprocessinfos(self);
};

instance stt_335_santino_buy(c_info) {
    npc = stt_335_santino /*8183*/;
    nr = 0;
    condition = stt_335_santino_buy_condition;
    information = stt_335_santino_buy_info;
    permanent = true;
    trade = true;
    description = dialog_trade;
};

func int stt_335_santino_buy_condition() {
    return 1;
};

func void stt_335_santino_buy_info() {
    ai_output(other, self, "STT_335_Santino_BUY_Info_15_01"); //Ó òåáÿ åñòü ÷òî-íèáóäü íà ïðîäàæó?
    ai_output(self, other, "STT_335_Santino_BUY_Info_07_02"); //Ó ìåíÿ åñòü âñå, ÷òî òåáå íóæíî. Òî, ÷åãî ó ìåíÿ íåò, òåáå âñå ðàâíî íå ïðèãîäèòñÿ.
};

instance dia_cavalorn_exit(c_info) {
    npc = stt_336_cavalorn /*8185*/;
    nr = 999;
    condition = dia_cavalorn_exit_condition;
    information = dia_cavalorn_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_cavalorn_exit_condition() {
    return 1;
};

func void dia_cavalorn_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_cavalorn_hunter(c_info) {
    npc = stt_336_cavalorn /*8185*/;
    nr = 2;
    condition = dia_cavalorn_hunter_condition;
    information = dia_cavalorn_hunter_info;
    description = "×åì òû çàíèìàåøüñÿ?";
};

func int dia_cavalorn_hunter_condition() {
    return 1;
};

func void dia_cavalorn_hunter_info() {
    ai_output(other, self, "DIA_cavalorn_Hunter_15_00"); //×åì òû çàíèìàåøüñÿ?
    ai_output(self, other, "DIA_cavalorn_Hunter_12_01"); //ß îõîòíèê, îõî÷óñü â îñíîâíîì íà ïàäàëüùèêîâ.
};

instance dia_cavalorn_lehrer(c_info) {
    npc = stt_336_cavalorn /*8185*/;
    nr = 2;
    condition = dia_cavalorn_lehrer_condition;
    information = dia_cavalorn_lehrer_info;
    permanent = true;
    description = "Òû ìîæåøü íàó÷èòü ìåíÿ ÷åìó-íèáóäü?";
};

func int dia_cavalorn_lehrer_condition() {
    if (npc_knowsinfo(hero, dia_cavalorn_hunter /*12437*/)) {
        return 1;
    };
};

func void dia_cavalorn_lehrer_info() {
    if (log_cavalorntrain == false) {
        log_createtopic(ge_teacherow, log_note);
        b_logentry(ge_teacherow, ge_teacherow_4);
        log_cavalorntrain = true;
    };
    ai_output(other, self, "DIA_cavalorn_Lehrer_15_00"); //Òû ìîæåøü íàó÷èòü ìåíÿ ÷åìó-íèáóäü?
    ai_output(self, other, "DIA_cavalorn_Lehrer_12_01"); //Ýòî çàâèñèò îò òîãî, ÷òî òû õî÷åøü óçíàòü.
    info_clearchoices(dia_cavalorn_lehrer /*12440*/);
    info_addchoice(dia_cavalorn_lehrer /*12440*/, dialog_back, dia_cavalorn_lehrer_back);
    if (npc_gettalentskill(hero, npc_talent_bow) == 1) {
        info_addchoice(dia_cavalorn_lehrer /*12440*/, b_buildlearnstring(name_learnbow_2, lpcost_talent_bow_2, 0), dia_cavalorn_lehrer_bow_2);
    };
    if (npc_gettalentskill(hero, npc_talent_bow) == 0) {
        info_addchoice(dia_cavalorn_lehrer /*12440*/, b_buildlearnstring(name_learnbow_1, lpcost_talent_bow_1, 0), dia_cavalorn_lehrer_bow);
    };
    if (npc_gettalentskill(hero, npc_talent_sneak) == 0) {
        info_addchoice(dia_cavalorn_lehrer /*12440*/, b_buildlearnstring(name_learnsneak, lpcost_talent_sneak, 0), dia_cavalorn_lehrer_schleichen);
    };
};

func void dia_cavalorn_lehrer_back() {
    info_clearchoices(dia_cavalorn_lehrer /*12440*/);
};

func void dia_cavalorn_lehrer_bow() {
    ai_output(other, self, "DIA_cavalorn_Lehrer_Bow_15_00"); //ß õî÷ó íàó÷èòüñÿ ñòðåëÿòü èç ëóêà.
    if (b_giveskill(other, npc_talent_bow, 1, lpcost_talent_bow_1)) {
        ai_output(self, other, "DIA_cavalorn_Lehrer_Bow_12_01"); //Íîâè÷êó íå òàê óæ ñëîæíî ñòàòü ìàñòåðîì. Âñå çàâèñèò îò ïðàâèëüíîé ïîçèöèè.
        ai_output(self, other, "DIA_cavalorn_Lehrer_Bow_12_02"); //Ðàññòàâü íîãè ïîøèðå, ðóêè äåðæè íà îäíîì óðîâíå, çàäåðæè äûõàíèå - è ñòðåëÿé!
        ai_output(self, other, "DIA_cavalorn_Lehrer_Bow_12_03"); //Åñëè çíàòü, êóäà öåëèòüñÿ, ìîæíî óëîæèòü çâåðÿ ñ îäíîãî âûñòðåëà. Ïðàâäà, ó íîâè÷êà íà ýòî íå òàê óæ ìíîãî øàíñîâ.
        ai_output(self, other, "DIA_cavalorn_Lehrer_Bow_12_04"); //Íî åñëè òû çàïîìíèøü âñå, î ÷åì ÿ òåáå ãîâîðèë, ñ êàæäûì ðàçîì òû áóäåøü ñòðåëÿòü âñå ëó÷øå è ëó÷øå.
    };
};

func void dia_cavalorn_lehrer_schleichen() {
    ai_output(other, self, "DIA_cavalorn_Lehrer_Schleichen_15_00"); //ß õî÷ó íàó÷èòüñÿ ïåðåäâèãàòüñÿ áåç øóìà.
    if (b_giveskill(other, npc_talent_sneak, 1, lpcost_talent_sneak)) {
        ai_output(self, other, "DIA_cavalorn_Lehrer_Schleichen_12_01"); //Õîðîøàÿ èäåÿ. Ïðèãîäèòñÿ íà òîò ñëó÷àé, åñëè íóæíî çàáðàòüñÿ â äîì òàê, ÷òîáû õîçÿèí íè÷åãî íå çàìåòèë.
        ai_output(self, other, "DIA_cavalorn_Lehrer_Schleichen_12_02"); //Ïðè õîäüáå ïðèñÿäü íåìíîãî, è òû áóäåøü ëó÷øå âèäåòü ïîë è ñìîæåøü òî÷íåå êîíòðîëèðîâàòü ñâîè äâèæåíèÿ.
        ai_output(self, other, "DIA_cavalorn_Lehrer_Schleichen_12_03"); //Îñíîâíîé ìèíóñ çàêëþ÷àåòñÿ â òîì, ÷òî â ýòîé ïîçå òû áóäåøü ïðèâëåêàòü ê ñåáå ñëèøêîì ìíîãî âíèìàíèÿ. Ñëåäè çà òåì, ÷òîáû íèêòî íå âèäåë, êàê òû êðàäåøüñÿ.
        ai_output(self, other, "DIA_cavalorn_Lehrer_Schleichen_12_04"); //Çàïîìíè ýòî. È ãëàâíîå: íèêîãäà íå ïîïàäàéñÿ!
    };
};

func void dia_cavalorn_lehrer_bow_2() {
    ai_output(other, self, "ORG_855_Wolf_TRAINAGAIN_Info_15_01"); //ß õî÷ó ïîâûñèòü íàâûê âëàäåíèÿ ëóêîì.
    if (b_giveskill(other, npc_talent_bow, 2, lpcost_talent_bow_2)) {
        ai_output(self, other, "DIA_Cavalorn_Lehrer_Bow_2_Info_12_02"); //Òåáÿ óæå ìîæíî íàçâàòü õîðîøèì îõîòíèêîì. Ïðèøëî âðåìÿ íàó÷èòüñÿ òîìó, ÷åãî òû åùå íå çíàåøü.
        ai_output(self, other, "DIA_Cavalorn_Lehrer_Bow_2_Info_12_03"); //Äëÿ òîãî ÷òîáû ñòàòü õîðîøèì ëó÷íèêîì, îäíîé ëîâêîñòè ìàëî. Âàæíî ïîíÿòü, èç ÷åãî ñêëàäûâàåòñÿ õîðîøèé âûñòðåë.
        ai_output(self, other, "DIA_Cavalorn_Lehrer_Bow_2_Info_12_04"); //Òóò ìíîãîå ïðèõîäèòñÿ ó÷èòûâàòü: çîðêèé âçãëÿä è íàòÿæåíèå òåòèâû, ïîëåò ñòðåëû è ðàññòîÿíèå äî ìèøåíè. È ãëàâíîå, âñåãäà áûòü íà÷åêó!
        ai_output(self, other, "DIA_Cavalorn_Lehrer_Bow_2_Info_12_05"); //Òû óæå î÷åíü õîðîøî îñâîèë òåõíèêó. Îñòàëîñü íàéòè ïðèìåíåíèå íîâûì çíàíèÿì è íàâûêàì.
    };
};

instance stt_336_cavalorn_sellbow(c_info) {
    npc = stt_336_cavalorn /*8185*/;
    nr = 0;
    condition = stt_336_cavalorn_sellbow_condition;
    information = stt_336_cavalorn_sellbow_info;
    description = "Ãäå ìíå äîñòàòü õîðîøèé ëóê?";
};

func int stt_336_cavalorn_sellbow_condition() {
    if (npc_knowsinfo(hero, dia_cavalorn_hunter /*12437*/)) {
        return true;
    };
};

func void stt_336_cavalorn_sellbow_info() {
    ai_output(other, self, "STT_336_cavalorn_SELLBOW_Info_15_01"); //Ãäå ìíå äîñòàòü õîðîøèé ëóê?
    ai_output(self, other, "STT_336_cavalorn_SELLBOW_Info_12_02"); //Ó ìåíÿ. ß ïðîäàþ ëó÷øèå ëóêè âî âñåì Ñòàðîì Ëàãåðå.
    log_createtopic(ge_traderoc, log_note);
    b_logentry(ge_traderoc, ge_traderoc_8);
};

instance stt_336_cavalorn_trade(c_info) {
    npc = stt_336_cavalorn /*8185*/;
    nr = 0;
    condition = stt_336_cavalorn_trade_condition;
    information = stt_336_cavalorn_trade_info;
    permanent = true;
    trade = true;
    description = "Ïîêàæè ìíå, ÷òî ó òåáÿ åñòü.";
};

func int stt_336_cavalorn_trade_condition() {
    if (npc_knowsinfo(hero, stt_336_cavalorn_sellbow /*12447*/)) {
        return true;
    };
};

func void stt_336_cavalorn_trade_info() {
    ai_output(other, self, "STT_336_cavalorn_TRADE_Info_15_01"); //Ïîêàæè ìíå, ÷òî ó òåáÿ åñòü.
};

instance tpl_1400_gornabar_exit(c_info) {
    npc = tpl_1400_gornabar /*8193*/;
    nr = 999;
    condition = tpl_1400_gornabar_exit_condition;
    information = tpl_1400_gornabar_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int tpl_1400_gornabar_exit_condition() {
    return 1;
};

func void tpl_1400_gornabar_exit_info() {
    ai_output(self, other, "Tpl_1400_GorNaBar_Exit_Info_09_02"); //Äà õðàíèò òåáÿ Ñïÿùèé!
    ai_stopprocessinfos(self);
};

instance tpl_1400_gornabar_suggest(c_info) {
    npc = tpl_1400_gornabar /*8193*/;
    nr = 0;
    condition = tpl_1400_gornabar_suggest_condition;
    information = tpl_1400_gornabar_suggest_info;
    description = "Ìíå íóæíà òâîÿ ïîìîùü.";
};

func int tpl_1400_gornabar_suggest_condition() {
    if (npc_knowsinfo(hero, grd_263_asghan_open /*9393*/) && (!npc_knowsinfo(hero, grd_263_asghan_open_now /*9396*/))) {
        return true;
    };
};

func void tpl_1400_gornabar_suggest_info() {
    ai_output(other, self, "Tpl_1400_GorNaBar_SUGGEST_Info_15_01"); //Ìíå íóæíà òâîÿ ïîìîùü.
    ai_output(other, self, "Tpl_1400_GorNaBar_SUGGEST_Info_15_02"); //ß èùó îñîáîå âåùåñòâî äëÿ Êîð Ãàëîìà. Äóìàþ, ìíå óäàëîñü íàéòè ëîãîâî ïîëçóíîâ.
    ai_output(other, self, "Tpl_1400_GorNaBar_SUGGEST_Info_15_03"); //Òû ïîìîæåøü, êîãäà ìû îòêðîåì ïðîõîä?
    ai_output(self, other, "Tpl_1400_GorNaBar_SUGGEST_Info_09_04"); //Ëîãîâî ïîëçóíîâ! Íàêîíåö-òî! Ìîé ìå÷ ê òâîèì óñëóãàì!
    ai_stopprocessinfos(self);
    npc_exchangeroutine(self, "GATE");
    npc_setpermattitude(self, att_friendly);
    b_givexp(xp_hiregornabar);
    b_logentry(ch2_mceggs, ch2_mceggs_9);
};

instance tpl_1400_gornabar_info(c_info) {
    npc = tpl_1400_gornabar /*8193*/;
    nr = 0;
    condition = tpl_1400_gornabar_info_condition;
    information = tpl_1400_gornabar_info_info;
    permanent = true;
    description = "×òî òåáå èçâåñòíî î ïîëçóíàõ? ";
};

func int tpl_1400_gornabar_info_condition() {
    if (!npc_knowsinfo(hero, grd_263_asghan_nest /*9390*/)) {
        return 1;
    };
};

func void tpl_1400_gornabar_info_info() {
    ai_output(other, self, "Tpl_1400_GorNaBar_INFO_Info_15_01"); //×òî òåáå èçâåñòíî î ïîëçóíàõ?
    ai_output(self, other, "Tpl_1400_GorNaBar_INFO_Info_09_02"); //Ãäå-òî äîëæíî áûòü èõ ëîãîâî. Åñëè áû íàì óäàëîñü íàéòè åãî, ìû ñìîãëè áû óíè÷òîæèòü âåñü âûâîäîê ýòèõ òâàðåé!
};

instance tpl_1400_gornabar_victory(c_info) {
    npc = tpl_1400_gornabar /*8193*/;
    nr = 0;
    condition = tpl_1400_gornabar_victory_condition;
    information = tpl_1400_gornabar_victory_info;
    description = "ß íàøåë ëîãîâî êîðîëåâû ïîëçóíîâ!";
};

func int tpl_1400_gornabar_victory_condition() {
    if (npc_hasitems(hero, itat_crawlerqueen) >= 1) {
        return true;
    };
};

func void tpl_1400_gornabar_victory_info() {
    ai_output(other, self, "Tpl_1400_GorNaBar_VICTORY_Info_15_01"); //ß íàøåë ëîãîâî êîðîëåâû ïîëçóíîâ!
    ai_output(self, other, "Tpl_1400_GorNaBar_VICTORY_Info_09_02"); //Òû äîêàçàë ñâîþ ñìåëîñòü è ñèëó äóõà. Íàì íóæíû òàêèå ëþäè, êàê òû!
    if (npc_gettrueguild(hero) == gil_nov) {
        log_createtopic(ge_becometemplar, log_note);
        b_logentry(ge_becometemplar, ge_becometemplar_2);
    };
};

instance tpl_1401_gornakosh_exit(c_info) {
    npc = tpl_1401_gornakosh /*8196*/;
    nr = 999;
    condition = tpl_1401_gornakosh_exit_condition;
    information = tpl_1401_gornakosh_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int tpl_1401_gornakosh_exit_condition() {
    return 1;
};

func void tpl_1401_gornakosh_exit_info() {
    ai_output(self, other, "Tpl_1401_GorNaKosh_Exit_Info_13_02"); //Äà ïðîñíåòñÿ Ñïÿùèé!
    ai_stopprocessinfos(self);
};

instance tpl_1401_gornakosh_suggest(c_info) {
    npc = tpl_1401_gornakosh /*8196*/;
    nr = 0;
    condition = tpl_1401_gornakosh_suggest_condition;
    information = tpl_1401_gornakosh_suggest_info;
    description = "ß çíàþ, ãäå íàõîäèòñÿ ëîãîâî ïîëçóíîâ. ";
};

func int tpl_1401_gornakosh_suggest_condition() {
    if (npc_knowsinfo(hero, grd_263_asghan_open /*9393*/) && (!npc_knowsinfo(hero, grd_263_asghan_open_now /*9396*/))) {
        return true;
    };
};

func void tpl_1401_gornakosh_suggest_info() {
    ai_output(other, self, "Tpl_1401_GorNaKosh_SUGGEST_Info_15_01"); //ß çíàþ, ãäå íàõîäèòñÿ ëîãîâî ïîëçóíîâ. ß îòïðàâëÿþñü òóäà, ÷òîáû äîáûòü îñîáîå âåùåñòâî äëÿ Êîð Ãàëîìà. Èç íåãî îí ñìîæåò ïðèãîòîâèòü áîëåå êðåïêèé ýëèêñèð.
    ai_output(self, other, "Tpl_1401_GorNaKosh_SUGGEST_Info_13_02"); //Ìîé êëèíîê ê òâîèì óñëóãàì! ß èäó ñ òîáîé.
    ai_output(other, self, "Tpl_1401_GorNaKosh_SUGGEST_Info_15_03"); //Õîðîøî. Âñòðå÷àåìñÿ ó áîëüøîãî ïðîõîäà.
    npc_exchangeroutine(self, "GATE");
    npc_setpermattitude(self, att_friendly);
    b_givexp(xp_hiregornakosh);
    b_logentry(ch2_mceggs, ch2_mceggs_10);
    ai_stopprocessinfos(self);
};

instance tpl_1401_gornakosh_info(c_info) {
    npc = tpl_1401_gornakosh /*8196*/;
    nr = 0;
    condition = tpl_1401_gornakosh_info_condition;
    information = tpl_1401_gornakosh_info_info;
    permanent = true;
    description = "×åì òû çàíèìàåøüñÿ?";
};

func int tpl_1401_gornakosh_info_condition() {
    if (!npc_knowsinfo(hero, grd_263_asghan_nest /*9390*/)) {
        return 1;
    };
};

func void tpl_1401_gornakosh_info_info() {
    ai_output(other, self, "Tpl_1401_GorNaKosh_INFO_Info_15_01"); //×åì òû çàíèìàåøüñÿ?
    ai_output(self, other, "Tpl_1401_GorNaKosh_INFO_Info_13_02"); //ß îõî÷óñü íà ïîëçóíîâ.
    ai_output(other, self, "Tpl_1401_GorNaKosh_INFO_Info_15_03"); //Ìîæåøü ðàññêàçàòü ìíå, êàê îõîòèòüñÿ íà ïîëçóíîâ?
    ai_output(self, other, "Tpl_1401_GorNaKosh_INFO_Info_13_04"); //Êîãäà èìååøü äåëî ñ ýòèìè òâàðÿìè, âàæíî ïîìíèòü îäíî: åñëè óâèäåë ïîëçóíà, áåãè ê íåìó è àòàêóé åãî ïåðâûì. Âàæíî óáèòü åãî êàê ìîæíî áûñòðåå.
    ai_output(self, other, "Tpl_1401_GorNaKosh_INFO_Info_13_05"); //Ñðàæàéñÿ áåç ñòðàõà è óáèâàé áåç ïîùàäû.
    ai_stopprocessinfos(self);
};

instance tpl_1401_gornakosh_crawler(c_info) {
    npc = tpl_1401_gornakosh /*8196*/;
    nr = 0;
    condition = tpl_1401_gornakosh_crawler_condition;
    information = tpl_1401_gornakosh_crawler_info;
    permanent = true;
    description = "Ðàññêàæè ìíå î ïîëçóíàõ.";
};

func int tpl_1401_gornakosh_crawler_condition() {
    if (npc_knowsinfo(hero, tpl_1401_gornakosh_info /*12471*/)) {
        return 1;
    };
};

func void tpl_1401_gornakosh_crawler_info() {
    ai_output(other, self, "Tpl_1401_GorNaKosh_CRAWLER_Info_15_01"); //Ðàññêàæè ìíå î ïîëçóíàõ.
    ai_output(self, other, "Tpl_1401_GorNaKosh_CRAWLER_Info_13_02"); //Îíè äåéñòâóþò èíñòèíêòèâíî, óáèâàÿ âñåõ íà ñâîåì ïóòè.
    ai_output(self, other, "Tpl_1401_GorNaKosh_CRAWLER_Info_13_03"); //Çàïîìíè, ýòî ïðèãîäèòñÿ òåáå â áîþ.
};

instance tpl_1401_gornakosh_victory(c_info) {
    npc = tpl_1401_gornakosh /*8196*/;
    nr = 0;
    condition = tpl_1401_gornakosh_victory_condition;
    information = tpl_1401_gornakosh_victory_info;
    description = "ß íàøåë ëîãîâî ïîëçóíîâ!";
};

func int tpl_1401_gornakosh_victory_condition() {
    if (npc_hasitems(hero, itat_crawlerqueen) > 3) {
        return true;
    };
};

func void tpl_1401_gornakosh_victory_info() {
    ai_output(other, self, "Tpl_1401_GorNaKosh_VICTORY_Info_15_01"); //ß íàøåë ëîãîâî ïîëçóíîâ!
    ai_output(self, other, "Tpl_1401_GorNaKosh_VICTORY_Info_13_02"); //Ïðåâîñõîäíî! Òåïåðü âîçâðàùàéñÿ â Ëàãåðü - Êîð Ãàëîì æäåò òåáÿ.
    b_logentry(ch2_mceggs, ch2_mceggs_11);
};

instance dia_tpl_1402_gornatoth_exit(c_info) {
    npc = tpl_1402_gornatoth /*8199*/;
    nr = 999;
    condition = dia_tpl_1402_gornatoth_exit_condition;
    information = dia_tpl_1402_gornatoth_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_tpl_1402_gornatoth_exit_condition() {
    return true;
};

func void dia_tpl_1402_gornatoth_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_gornatoth_abweisend(c_info) {
    npc = tpl_1402_gornatoth /*8199*/;
    nr = 1;
    condition = dia_gornatoth_abweisend_condition;
    information = dia_gornatoth_abweisend_info;
    permanent = true;
    description = "Òû ìîæåøü ÷åìó-íèáóäü íàó÷èòü ìåíÿ?";
};

func int dia_gornatoth_abweisend_condition() {
    if ((!npc_knowsinfo(hero, dia_gornatoth_angartalked /*12486*/)) && (!c_npcbelongstopsicamp(hero))) {
        return 1;
    };
};

func void dia_gornatoth_abweisend_info() {
    ai_output(other, self, "DIA_GorNaToth_AngarTalked_15_00"); //Òû ìîæåøü ÷åìó-íèáóäü íàó÷èòü ìåíÿ?
    ai_output(self, other, "DIA_GorNaToth_AngarTalked_11_01"); //Óáèðàéñÿ ñ ãëàç, íåâåðíûé! ß ó÷ó òîëüêî Ñòðàæåé âåëèêîãî Ñïÿùåãî!
    ai_stopprocessinfos(self);
};

instance dia_gornatoth_angartalked(c_info) {
    npc = tpl_1402_gornatoth /*8199*/;
    nr = 1;
    condition = dia_gornatoth_angartalked_condition;
    information = dia_gornatoth_angartalked_info;
    important = true;
};

func int dia_gornatoth_angartalked_condition() {
    if (npc_knowsinfo(hero, dia_corangar_latertrainer /*9594*/)) {
        return 1;
    };
};

func void dia_gornatoth_angartalked_info() {
    ai_output(self, other, "DIA_GorNaToth_AngarTalked_11_00"); //Ñ òîáîé ãîâîðèë Êîð Àíãàð? ×òî îí ñêàçàë?
    info_clearchoices(dia_gornatoth_angartalked /*12486*/);
    info_addchoice(dia_gornatoth_angartalked /*12486*/, "Îí ñêàçàë, ÷òî òû íå äîñòîèí íîñèòü äîñïåõè Ñòðàæà.", dia_gornatoth_angartalked_unworthy);
    info_addchoice(dia_gornatoth_angartalked /*12486*/, "Îí ñêàçàë, ÷òî åìó íå íðàâÿòñÿ áîëîòîæîðû.", dia_gornatoth_angartalked_shark);
    info_addchoice(dia_gornatoth_angartalked /*12486*/, "Îí ñêàçàë, ÷òîáû ÿ âîçâðàùàëñÿ, êàê òîëüêî ñòàíó Ñòðàæåì.", dia_gornatoth_angartalked_normal);
};

func void dia_gornatoth_angartalked_normal() {
    ai_output(other, self, "DIA_GorNaToth_AngarTalked_Normal_15_00"); //Îí ñêàçàë, ÷òîáû ÿ âîçâðàùàëñÿ, êàê òîëüêî ñòàíó Ñòðàæåì.
    ai_output(self, other, "DIA_GorNaToth_AngarTalked_Normal_11_01"); //Ïîõîæå, îí ÷òî-òî íàøåë â òåáå. Îáû÷íî Êîð Àíãàð íå ðàçãîâàðèâàåò íè ñ êåì.
    ai_output(self, other, "DIA_GorNaToth_AngarTalked_Normal_11_02"); //Äàæå åñëè îí ïðîñòî îáðàòèò íà òåáÿ âíèìàíèå, ýòî óæå áîëüøàÿ ÷åñòü. Ïðîøëî óæå äâà ìåñÿöà ñ òåõ ïîð, êàê îí ïîñëåäíèé ðàç ãîâîðèë ñî ÌÍÎÉ.
    info_clearchoices(dia_gornatoth_angartalked /*12486*/);
};

func void dia_gornatoth_angartalked_shark() {
    ai_output(other, self, "DIA_GorNaToth_AngarTalked_Shark_15_00"); //Îí ñêàçàë, ÷òî åìó íå íðàâÿòñÿ áîëîòîæîðû.
    ai_output(self, other, "DIA_GorNaToth_AngarTalked_Shark_11_01"); //×òî?.. (ðåøèòåëüíî) Ìåíÿ îæèäàåò ñâÿùåííàÿ ìèññèÿ!
    ai_output(self, other, "DIA_GorNaToth_AngarTalked_Shark_11_02"); //Æåëàíèå ãîñïîäèíà äëÿ ìåíÿ çàêîí.
    info_clearchoices(dia_gornatoth_angartalked /*12486*/);
};

func void dia_gornatoth_angartalked_unworthy() {
    ai_output(other, self, "DIA_GorNaToth_AngarTalked_Unworthy_15_00"); //Îí ñêàçàë, ÷òî òû íåäîñòîèí íîñèòü äîñïåõè Ñòðàæà.
    ai_output(self, other, "DIA_GorNaToth_AngarTalked_Unworthy_11_01"); //Íåò! Îí íå ìîã ñêàçàòü ýòîãî! Òîëüêî íå îáî ÌÍÅ!
    info_clearchoices(dia_gornatoth_angartalked /*12486*/);
    ai_stopprocessinfos(self);
    npc_settarget(self, other);
    ai_startstate(self, zs_attack, 1, "");
};

instance tpl_1402_gornatoth_getstuff(c_info) {
    npc = tpl_1402_gornatoth /*8199*/;
    nr = 0;
    condition = tpl_1402_gornatoth_getstuff_condition;
    information = tpl_1402_gornatoth_getstuff_info;
    description = "ß õî÷ó çàáðàòü ñâîè äîñïåõè Ñòðàæà.";
};

func int tpl_1402_gornatoth_getstuff_condition() {
    if (npc_knowsinfo(hero, gur_1202_corangar_wannabetpl /*9608*/) && (npc_gettrueguild(hero) == gil_tpl)) {
        return true;
    };
};

func void tpl_1402_gornatoth_getstuff_info() {
    ai_output(other, self, "TPL_1402_GorNaToth_GETSTUFF_Info_15_01"); //ß õî÷ó çàáðàòü ñâîè äîñïåõè Ñòðàæà.
    ai_output(self, other, "TPL_1402_GorNaToth_GETSTUFF_Info_11_02"); //ß ñ÷àñòëèâ, ÷òî ìíå âûïàëà ÷åñòü ïåðåäàòü íàøè äîñïåõè ÷åëîâåêó, êîòîðûé íàøåë êëàäêó ïîëçóíîâ.
    ai_output(self, other, "TPL_1402_GorNaToth_GETSTUFF_Info_11_03"); //Ïóñòü ýòè äîñïåõè õðàíÿò òåáÿ, êàê õðàíèò íàøå Áðàòñòâî Ñïÿùèé!
    b_logentry(ge_becometemplar, ge_becometemplar_4);
    log_createtopic(ge_traderpsi, log_note);
    b_logentry(ge_traderpsi, ge_traderpsi_6);
    createinvitem(hero, tpl_armor_l);
    createinvitem(self, itamarrow);
    b_giveinvitems(self, hero, itamarrow /*4894*/, 1);
    npc_removeinvitem(hero, itamarrow /*4894*/);
    ai_equipbestarmor(hero);
};

instance tpl_1402_gornatoth_armor(c_info) {
    npc = tpl_1402_gornatoth /*8199*/;
    nr = 0;
    condition = tpl_1402_gornatoth_armor_condition;
    information = tpl_1402_gornatoth_armor_info;
    permanent = true;
    description = "Ìíå íóæíû äîñïåõè ïîëó÷øå. ";
};

func int tpl_1402_gornatoth_armor_condition() {
    if (npc_knowsinfo(hero, tpl_1402_gornatoth_getstuff /*12492*/)) {
        return true;
    };
};

func void tpl_1402_gornatoth_armor_info() {
    ai_output(other, self, "Info_GorNaToth_ARMOR_15_01"); //Ìíå íóæíû äîñïåõè ïîëó÷øå.
    ai_output(self, other, "Info_GorNaToth_ARMOR_11_02"); //Ó ìåíÿ åñòü õîðîøèå äîñïåõè, íî òåáå ïðèäåòñÿ âíåñòè ùåäðîå ïîæåðòâîâàíèå íà íóæäû Áðàòñòâà!
    info_clearchoices(tpl_1402_gornatoth_armor /*12495*/);
    info_addchoice(tpl_1402_gornatoth_armor /*12495*/, dialog_back, tpl_1402_gornatoth_armor_back);
    info_addchoice(tpl_1402_gornatoth_armor /*12495*/, b_buildbuyarmorstring(name_gornatothheavytpl, value_tpl_armor_h), tpl_1402_gornatoth_armor_h);
    info_addchoice(tpl_1402_gornatoth_armor /*12495*/, b_buildbuyarmorstring(name_gornatothtpl, value_tpl_armor_m), tpl_1402_gornatoth_armor_m);
};

func void tpl_1402_gornatoth_armor_m() {
    ai_output(hero, self, "Info_GorNaToth_ARMOR_M_15_01"); //Ìíå íóæíû ñðåäíèå äîñïåõè Ñòðàæà.
    if (kapitel < 3) {
        ai_output(self, hero, "Info_GorNaToth_ARMOR_M_11_02"); //Äëÿ ýòîãî ó òåáÿ åùå íåäîñòàòî÷íî îïûòà. Ïîêàæè ñåáÿ äîñòîéíûì Ñòðàæåì, è òû çàñëóæèøü ïðàâî íîñèòü ëó÷øèå äîñïåõè.
    }
    else if (npc_hasitems(hero, itminugget) < value_tpl_armor_m) {
        ai_output(self, hero, "Info_GorNaToth_ARMOR_M_11_03"); //Êàê òîëüêî ó òåáÿ ïîÿâèòñÿ âîçìîæíîñòü âíåñòè ïîæåðòâîâàíèå íà íóæäû Áðàòñòâà, òû ïîëó÷èøü íîâûå äîñïåõè.
    }
    else {
        ai_output(self, hero, "Info_GorNaToth_ARMOR_M_11_04"); //Òåïåðü, êîãäà òû ìîæåøü âíåñòè ïîæåðòâîâàíèå, òû ïîëó÷èøü íîâûå äîñïåõè.
        b_giveinvitems(hero, self, itminugget /*4517*/, value_tpl_armor_m);
        createinvitem(hero, tpl_armor_m);
        createinvitem(self, itamarrow);
        b_giveinvitems(self, hero, itamarrow /*4894*/, 1);
        npc_removeinvitem(hero, itamarrow /*4894*/);
        ai_equipbestarmor(hero);
    };
    info_clearchoices(tpl_1402_gornatoth_armor /*12495*/);
};

func void tpl_1402_gornatoth_armor_h() {
    ai_output(hero, self, "Info_GorNaToth_ARMOR_H_15_01"); //Ìíå íóæíû òÿæåëûå äîñïåõè Ñòðàæà.
    if (kapitel < 4) {
        ai_output(self, hero, "Info_GorNaToth_ARMOR_H_11_02"); //Äëÿ ýòîãî ó òåáÿ åùå íåäîñòàòî÷íî îïûòà. Ïðîÿâè ñåáÿ äîñòîéíûì ÷ëåíîì íàøåãî Áðàòñòâà, è òû çàñëóæèøü ïðàâî íîñèòü ñòîëü ñîâåðøåííûå äîñïåõè.
    }
    else if (npc_hasitems(hero, itminugget) < value_tpl_armor_h) {
        ai_output(self, hero, "Info_GorNaToth_ARMOR_H_11_03"); //Òû çàñëóæèë ïðàâî íîñèòü ýòè äîñïåõè, íî ó òåáÿ íåäîñòàòî÷íî ðóäû, äëÿ òîãî ÷òîáû ñäåëàòü ïîæåðòâîâàíèå íà íóæäû Áðàòñòâà!
    }
    else {
        ai_output(self, hero, "Info_GorNaToth_ARMOR_H_11_04"); //Òåïåðü òû áóäåøü íîñèòü ýòè äîñïåõè â çíàê âûñî÷àéøåé ÷åñòè, îêàçàííîé òåáå Áðàòñòâîì.
        b_giveinvitems(hero, self, itminugget /*4517*/, value_tpl_armor_h);
        createinvitem(self, itamarrow);
        b_giveinvitems(self, hero, itamarrow /*4894*/, 1);
        npc_removeinvitem(hero, itamarrow /*4894*/);
        createinvitem(hero, tpl_armor_h);
        ai_equipbestarmor(hero);
    };
    info_clearchoices(tpl_1402_gornatoth_armor /*12495*/);
};

func void tpl_1402_gornatoth_armor_back() {
    ai_output(hero, self, "Info_GorNaToth_ARMOR_BACK_15_01"); //ß ïåðåäóìàë!
    ai_output(self, hero, "Info_GorNaToth_ARMOR_BACK_11_02"); //Êàê õî÷åøü. Òû çíàåøü, ãäå ìåíÿ íàéòè.
    info_clearchoices(tpl_1402_gornatoth_armor /*12495*/);
};

instance tpl_1402_gornatoth_teach(c_info) {
    npc = tpl_1402_gornatoth /*8199*/;
    nr = 10;
    condition = tpl_1402_gornatoth_teach_condition;
    information = tpl_1402_gornatoth_teach_info;
    permanent = true;
    description = "Òû ìîæåøü ÷åìó-íèáóäü íàó÷èòü ìåíÿ?";
};

func int tpl_1402_gornatoth_teach_condition() {
    if (c_npcbelongstopsicamp(hero)) {
        return true;
    };
};

func void tpl_1402_gornatoth_teach_info() {
    ai_output(other, self, "TPL_1402_GorNaToth_Teach_15_00"); //Òû ìîæåøü ÷åìó-íèáóäü íàó÷èòü ìåíÿ?
    ai_output(self, other, "TPL_1402_GorNaToth_Teach_11_01"); //Ñèëà ðàçóìà íå ìåíåå âàæíà, ÷åì ñèëà è ëîâêîñòü òåëà âîèíà.
    info_clearchoices(tpl_1402_gornatoth_teach /*12501*/);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, dialog_back, tpl_1402_gornatoth_teach_back);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, b_buildlearnstring(name_learnstrength_5, 5 * lpcost_attribute_strength, 0), tpl_1402_gornatoth_teach_str_5);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, b_buildlearnstring(name_learnstrength_1, lpcost_attribute_strength, 0), tpl_1402_gornatoth_teach_str_1);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, b_buildlearnstring(name_learndexterity_5, 5 * lpcost_attribute_dexterity, 0), tpl_1402_gornatoth_teach_dex_5);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, b_buildlearnstring(name_learndexterity_1, lpcost_attribute_dexterity, 0), tpl_1402_gornatoth_teach_dex_1);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, b_buildlearnstring(name_learnmana_5, 5 * lpcost_attribute_mana, 0), tpl_1402_gornatoth_teach_man_5);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, b_buildlearnstring(name_learnmana_1, lpcost_attribute_mana, 0), tpl_1402_gornatoth_teach_man_1);
    if (log_gornatothtrain == false) {
        log_createtopic(ge_teacherpsi, log_note);
        b_logentry(ge_teacherpsi, ge_teacherpsi_4);
        log_gornatothtrain = true;
    };
};

func void tpl_1402_gornatoth_teach_back() {
    info_clearchoices(tpl_1402_gornatoth_teach /*12501*/);
};

func void tpl_1402_gornatoth_teach_str_1() {
    b_buyattributepoints(other, atr_strength, lpcost_attribute_strength);
    info_clearchoices(tpl_1402_gornatoth_teach /*12501*/);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, dialog_back, tpl_1402_gornatoth_teach_back);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, b_buildlearnstring(name_learnstrength_5, 5 * lpcost_attribute_strength, 0), tpl_1402_gornatoth_teach_str_5);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, b_buildlearnstring(name_learnstrength_1, lpcost_attribute_strength, 0), tpl_1402_gornatoth_teach_str_1);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, b_buildlearnstring(name_learndexterity_5, 5 * lpcost_attribute_dexterity, 0), tpl_1402_gornatoth_teach_dex_5);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, b_buildlearnstring(name_learndexterity_1, lpcost_attribute_dexterity, 0), tpl_1402_gornatoth_teach_dex_1);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, b_buildlearnstring(name_learnmana_5, 5 * lpcost_attribute_mana, 0), tpl_1402_gornatoth_teach_man_5);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, b_buildlearnstring(name_learnmana_1, lpcost_attribute_mana, 0), tpl_1402_gornatoth_teach_man_1);
};

func void tpl_1402_gornatoth_teach_str_5() {
    b_buyattributepoints(other, atr_strength, 5 * lpcost_attribute_strength);
    info_clearchoices(tpl_1402_gornatoth_teach /*12501*/);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, dialog_back, tpl_1402_gornatoth_teach_back);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, b_buildlearnstring(name_learnstrength_5, 5 * lpcost_attribute_strength, 0), tpl_1402_gornatoth_teach_str_5);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, b_buildlearnstring(name_learnstrength_1, lpcost_attribute_strength, 0), tpl_1402_gornatoth_teach_str_1);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, b_buildlearnstring(name_learndexterity_5, 5 * lpcost_attribute_dexterity, 0), tpl_1402_gornatoth_teach_dex_5);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, b_buildlearnstring(name_learndexterity_1, lpcost_attribute_dexterity, 0), tpl_1402_gornatoth_teach_dex_1);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, b_buildlearnstring(name_learnmana_5, 5 * lpcost_attribute_mana, 0), tpl_1402_gornatoth_teach_man_5);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, b_buildlearnstring(name_learnmana_1, lpcost_attribute_mana, 0), tpl_1402_gornatoth_teach_man_1);
};

func void tpl_1402_gornatoth_teach_dex_1() {
    b_buyattributepoints(other, atr_dexterity, lpcost_attribute_dexterity);
    info_clearchoices(tpl_1402_gornatoth_teach /*12501*/);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, dialog_back, tpl_1402_gornatoth_teach_back);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, b_buildlearnstring(name_learnstrength_5, 5 * lpcost_attribute_strength, 0), tpl_1402_gornatoth_teach_str_5);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, b_buildlearnstring(name_learnstrength_1, lpcost_attribute_strength, 0), tpl_1402_gornatoth_teach_str_1);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, b_buildlearnstring(name_learndexterity_5, 5 * lpcost_attribute_dexterity, 0), tpl_1402_gornatoth_teach_dex_5);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, b_buildlearnstring(name_learndexterity_1, lpcost_attribute_dexterity, 0), tpl_1402_gornatoth_teach_dex_1);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, b_buildlearnstring(name_learnmana_5, 5 * lpcost_attribute_mana, 0), tpl_1402_gornatoth_teach_man_5);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, b_buildlearnstring(name_learnmana_1, lpcost_attribute_mana, 0), tpl_1402_gornatoth_teach_man_1);
};

func void tpl_1402_gornatoth_teach_dex_5() {
    b_buyattributepoints(other, atr_dexterity, 5 * lpcost_attribute_dexterity);
    info_clearchoices(tpl_1402_gornatoth_teach /*12501*/);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, dialog_back, tpl_1402_gornatoth_teach_back);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, b_buildlearnstring(name_learnstrength_5, 5 * lpcost_attribute_strength, 0), tpl_1402_gornatoth_teach_str_5);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, b_buildlearnstring(name_learnstrength_1, lpcost_attribute_strength, 0), tpl_1402_gornatoth_teach_str_1);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, b_buildlearnstring(name_learndexterity_5, 5 * lpcost_attribute_dexterity, 0), tpl_1402_gornatoth_teach_dex_5);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, b_buildlearnstring(name_learndexterity_1, lpcost_attribute_dexterity, 0), tpl_1402_gornatoth_teach_dex_1);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, b_buildlearnstring(name_learnmana_5, 5 * lpcost_attribute_mana, 0), tpl_1402_gornatoth_teach_man_5);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, b_buildlearnstring(name_learnmana_1, lpcost_attribute_mana, 0), tpl_1402_gornatoth_teach_man_1);
};

func void tpl_1402_gornatoth_teach_man_1() {
    b_buyattributepoints(other, atr_mana_max, lpcost_attribute_mana);
    info_clearchoices(tpl_1402_gornatoth_teach /*12501*/);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, dialog_back, tpl_1402_gornatoth_teach_back);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, b_buildlearnstring(name_learnstrength_5, 5 * lpcost_attribute_strength, 0), tpl_1402_gornatoth_teach_str_5);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, b_buildlearnstring(name_learnstrength_1, lpcost_attribute_strength, 0), tpl_1402_gornatoth_teach_str_1);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, b_buildlearnstring(name_learndexterity_5, 5 * lpcost_attribute_dexterity, 0), tpl_1402_gornatoth_teach_dex_5);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, b_buildlearnstring(name_learndexterity_1, lpcost_attribute_dexterity, 0), tpl_1402_gornatoth_teach_dex_1);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, b_buildlearnstring(name_learnmana_5, 5 * lpcost_attribute_mana, 0), tpl_1402_gornatoth_teach_man_5);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, b_buildlearnstring(name_learnmana_1, lpcost_attribute_mana, 0), tpl_1402_gornatoth_teach_man_1);
};

func void tpl_1402_gornatoth_teach_man_5() {
    b_buyattributepoints(other, atr_mana_max, 5 * lpcost_attribute_mana);
    info_clearchoices(tpl_1402_gornatoth_teach /*12501*/);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, dialog_back, tpl_1402_gornatoth_teach_back);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, b_buildlearnstring(name_learnstrength_5, 5 * lpcost_attribute_strength, 0), tpl_1402_gornatoth_teach_str_5);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, b_buildlearnstring(name_learnstrength_1, lpcost_attribute_strength, 0), tpl_1402_gornatoth_teach_str_1);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, b_buildlearnstring(name_learndexterity_5, 5 * lpcost_attribute_dexterity, 0), tpl_1402_gornatoth_teach_dex_5);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, b_buildlearnstring(name_learndexterity_1, lpcost_attribute_dexterity, 0), tpl_1402_gornatoth_teach_dex_1);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, b_buildlearnstring(name_learnmana_5, 5 * lpcost_attribute_mana, 0), tpl_1402_gornatoth_teach_man_5);
    info_addchoice(tpl_1402_gornatoth_teach /*12501*/, b_buildlearnstring(name_learnmana_1, lpcost_attribute_mana, 0), tpl_1402_gornatoth_teach_man_1);
};

instance tpl_1402_gornatoth_train(c_info) {
    npc = tpl_1402_gornatoth /*8199*/;
    nr = 0;
    condition = tpl_1402_gornatoth_train_condition;
    information = tpl_1402_gornatoth_train_info;
    permanent = true;
    description = b_buildlearnstring(name_learn1h_1, lpcost_talent_1h_1, 0);
};

func int tpl_1402_gornatoth_train_condition() {
    if ((npc_gettalentskill(hero, npc_talent_1h) < 1) && c_npcbelongstopsicamp(hero)) {
        return true;
    };
};

func void tpl_1402_gornatoth_train_info() {
    if (log_gornatothfight == false) {
        log_createtopic(ge_teacherpsi, log_note);
        b_logentry(ge_teacherpsi, ge_teacherpsi_5);
        log_gornatothfight = true;
    };
    ai_output(other, self, "TPL_1402_GorNaToth_TRAIN_Info_15_00"); //ß õîòåë áû ïîòðåíèðîâàòüñÿ ñ îäíîðó÷íûì îðóæèåì.
    if (b_giveskill(hero, npc_talent_1h, 1, lpcost_talent_1h_1)) {
        ai_output(self, other, "TPL_1402_GorNaToth_TRAIN_11_01"); //Õîðîøàÿ ìûñëü! Íî ïðåæäå ÷åì çàíèìàòüñÿ òåõíèêîé, òåáå íóæíî íàó÷èòüñÿ ïðàâèëüíî äåðæàòü îðóæèå.
        ai_output(self, other, "TPL_1402_GorNaToth_TRAIN_11_02"); //Íîâè÷êè ÷àñòî äåðæàòñÿ çà ðóêîÿòü äâóìÿ ðóêàìè. Ýòî íåïðàâèëüíî, ê ýòîìó ëó÷øå íå ïðèâûêàòü.
        ai_output(self, other, "TPL_1402_GorNaToth_TRAIN_11_03"); //Âîçüìèñü çà ðóêîÿòü îäíîé ðóêîé. Ëåçâèå ââåðõ, è íå äåðæè åãî íåïîäâèæíî.
        ai_output(self, other, "TPL_1402_GorNaToth_TRAIN_11_04"); //Îðóæèå äîëæíî ñòàòü ïðîäîëæåíèåì òâîåé ðóêè, âïèñûâàòüñÿ â òâîè äâèæåíèÿ. Ýòî ïîìîæåò óñêîðèòü àòàêó.
        ai_output(self, other, "TPL_1402_GorNaToth_TRAIN_11_05"); //Åñëè çàïîìíèøü âñå, î ÷åì ÿ òåáå ãîâîðèë, òâîè óäàðû ñòàíóò áîëåå èçÿùíûìè è áûñòðûìè.
        ai_output(self, other, "TPL_1402_GorNaToth_TRAIN_11_06"); //Äà, è âîò åùå ÷òî: íåêîòîðûå óäàðû êóäà ýôôåêòèâíåå îñòàëüíûõ. Ó íîâè÷êà íå òàê ìíîãî øàíñîâ ïîâòîðèòü èõ.
        ai_output(self, other, "TPL_1402_GorNaToth_TRAIN_11_07"); //Íî ÷åì áîëüøå òû áóäåøü òðåíèðîâàòüñÿ, òåì ëó÷øå îíè ó òåáÿ áóäóò ïîëó÷àòüñÿ.
        ai_stopprocessinfos(self);
        b_practicecombat("PSI_PATH_6_7");
    };
};

instance tpl_1402_gornatoth_trainagain(c_info) {
    npc = tpl_1402_gornatoth /*8199*/;
    nr = 0;
    condition = tpl_1402_gornatoth_trainagain_condition;
    information = tpl_1402_gornatoth_trainagain_info;
    permanent = true;
    description = b_buildlearnstring(name_learn1h_2, lpcost_talent_1h_2, 0);
};

func int tpl_1402_gornatoth_trainagain_condition() {
    if ((npc_gettalentskill(hero, npc_talent_1h) == 1) && c_npcbelongstopsicamp(hero)) {
        return true;
    };
};

func void tpl_1402_gornatoth_trainagain_info() {
    ai_output(other, self, "TPL_1402_GorNaToth_TRAINAGAIN_Info_15_01"); //Ðàññêàæè ìíå åùå ÷òî-íèáóäü ïðî îðóæèå äëÿ îäíîé ðóêè.
    if (b_giveskill(hero, npc_talent_1h, 2, lpcost_talent_1h_2)) {
        ai_output(self, other, "TPL_1402_GorNaToth_TRAINAGAIN_Info_11_02"); //Ëàäíî, òû óæå çíàåøü ãëàâíîå. Åñëè äåðæàòü êëèíîê íåìíîãî íèæå, ïåðâûé óäàð ïîëó÷èòñÿ áîëåå ñèëüíûì.
        ai_output(self, other, "TPL_1402_GorNaToth_TRAINAGAIN_Info_11_03"); //Ðóáÿùèé óäàð, ïîìíèøü? Ëàäíî, òåïåðü î òîì, êàê íóæíî äâèãàòüñÿ. Íàíîñèøü äâà óäàðà è ðàçâîðà÷èâàåøüñÿ - âðàã íàâåðíÿêà ðàñòåðÿåòñÿ, à òû îêàæåøüñÿ â âûãîäíîì ïîëîæåíèè.
        ai_output(self, other, "TPL_1402_GorNaToth_TRAINAGAIN_Info_11_04"); //Åùå îäèí âçìàõ êëèíêîì ñïðàâà íàëåâî...
        ai_output(self, other, "TPL_1402_GorNaToth_TRAINAGAIN_Info_11_05"); //...è âîçâðàùàåøüñÿ â èñõîäíóþ ñòîéêó. Ãëàâíîå, íå çàáûâàé òðåíèðîâàòüñÿ. Èäè, îòðàáàòûâàé òåõíèêó áîÿ.
        ai_stopprocessinfos(self);
        b_practicecombat("PSI_PATH_6_7");
    };
};

instance dia_gornaran_exit(c_info) {
    npc = tpl_1405_gornaran /*8209*/;
    nr = 999;
    condition = dia_gornaran_exit_condition;
    information = dia_gornaran_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_gornaran_exit_condition() {
    if (kapitel != 6) {
        return true;
    };
};

func void dia_gornaran_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_gornaran_wache(c_info) {
    npc = tpl_1405_gornaran /*8209*/;
    nr = 1;
    condition = dia_gornaran_wache_condition;
    information = dia_gornaran_wache_info;
    permanent = true;
    description = "×åì òû çàíèìàåøüñÿ?";
};

func int dia_gornaran_wache_condition() {
    if (kapitel != 6) {
        return true;
    };
};

func void dia_gornaran_wache_info() {
    ai_output(other, self, "DIA_GorNaRan_Wache_15_00"); //×åì òû çàíèìàåøüñÿ?
    ai_output(self, other, "DIA_GorNaRan_Wache_13_01"); //ß ñëåæó çà òåì, ÷òîáû áîëîòîæîðû íå ïîäîáðàëèñü ê Ëàãåðþ.
    ai_output(self, other, "DIA_GorNaRan_Wache_13_02"); //Íà òâîåì ìåñòå ÿ áû äåðæàëñÿ ïîäàëüøå îò ýòèõ òâàðåé. Ïðîòèâ íèõ ó òåáÿ íåò íè åäèíîãî øàíñà.
    ai_output(self, other, "DIA_GorNaRan_Wache_13_03"); //Çíàåøü, ìíå íåëüçÿ îòâëåêàòüñÿ.
    ai_stopprocessinfos(self);
};

instance info_tpl_1405_gornaran(c_info) {
    npc = tpl_1405_gornaran /*8209*/;
    condition = info_tpl_1405_gornaran_condition;
    information = info_tpl_1405_gornaran_info;
    important = true;
};

func int info_tpl_1405_gornaran_condition() {
    if (kapitel == 6) {
        return true;
    };
};

func void info_tpl_1405_gornaran_info() {
    ai_output(self, other, "Info_TPL_1405_GorNaRan_Info_13_01"); //Êóäà ýòî òû ñîáðàëñÿ? Íèêîìó íå äîçâîëåíî õîäèòü çäåñü!
};

instance info_tpl_1405_gornaran2(c_info) {
    npc = tpl_1405_gornaran /*8209*/;
    nr = 1;
    condition = info_tpl_1405_gornaran2_condition;
    information = info_tpl_1405_gornaran2_info;
    description = "×òî çäåñü ïðîèñõîäèò?";
};

func int info_tpl_1405_gornaran2_condition() {
    if (npc_knowsinfo(hero, info_tpl_1405_gornaran /*12523*/)) {
        return 1;
    };
};

func void info_tpl_1405_gornaran2_info() {
    ai_output(other, self, "Info_TPL_1405_GorNaRan_Info_15_02"); //×òî çäåñü ïðîèñõîäèò?
    ai_output(self, other, "Info_TPL_1405_GorNaRan_Info_13_03"); //Îí åùå ñïðàøèâàåò ìåíÿ, ÷òî ïðîèñõîäèò! Ïàäè íèö è ìîëèñü Ñïÿùåìó, èáî ïðîáóäèëñÿ îí, äàáû ñòåðåòü ñ ëèöà çåìëè âñåõ íåâåðíûõ!
};

instance info_tpl_1405_gornaran3(c_info) {
    npc = tpl_1405_gornaran /*8209*/;
    nr = 1;
    condition = info_tpl_1405_gornaran3_condition;
    information = info_tpl_1405_gornaran3_info;
    description = "ß ïðîñòî õîòåë ïîñìîòðåòü.";
};

func int info_tpl_1405_gornaran3_condition() {
    if (npc_knowsinfo(hero, info_tpl_1405_gornaran /*12523*/)) {
        return 1;
    };
};

func void info_tpl_1405_gornaran3_info() {
    ai_output(other, self, "Info_TPL_1405_GorNaRan_Info_15_04"); //ß ïðîñòî õîòåë ïîñìîòðåòü.
    ai_output(self, other, "Info_TPL_1405_GorNaRan_Info_13_05"); //Òû æàëêèé ÷åðâü! Òåáå è òàêèì, êàê òû, íå÷åãî äåëàòü çäåñü â ìîìåíò ïðîáóæäåíèÿ Ñïÿùåãî! È ÿ ïîçàáî÷óñü îá ýòîì!
    ai_stopprocessinfos(self);
    npc_setattitude(self, att_hostile);
    npc_settempattitude(self, att_hostile);
    npc_settarget(self, hero);
    ai_startstate(self, zs_attack, 1, "");
};

instance info_tpl_1405_gornaran4(c_info) {
    npc = tpl_1405_gornaran /*8209*/;
    nr = 1;
    condition = info_tpl_1405_gornaran4_condition;
    information = info_tpl_1405_gornaran4_info;
    description = "Òåáå íå îñòàíîâèòü ìåíÿ!";
};

func int info_tpl_1405_gornaran4_condition() {
    if (npc_knowsinfo(hero, info_tpl_1405_gornaran /*12523*/)) {
        return 1;
    };
};

func void info_tpl_1405_gornaran4_info() {
    ai_output(other, self, "Info_TPL_1405_GorNaRan_Info_15_06"); //Òåáå íå îñòàíîâèòü ìåíÿ!
    ai_output(self, other, "Info_TPL_1405_GorNaRan_Info_13_07"); //Ýòî âñå ñëîâà, ïàðåíü! Çà Ñïÿùåãî!
    ai_stopprocessinfos(self);
    npc_setattitude(self, att_hostile);
    npc_settempattitude(self, att_hostile);
    npc_settarget(self, hero);
    ai_startstate(self, zs_attack, 1, "");
};

instance dia_kalomsguard_exit(c_info) {
    npc = tpl_1406_templer /*8215*/;
    nr = 999;
    condition = dia_kalomsguard_exit_condition;
    information = dia_kalomsguard_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_kalomsguard_exit_condition() {
    return 1;
};

func void dia_kalomsguard_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_kalomsguard_perm(c_info) {
    npc = tpl_1406_templer /*8215*/;
    nr = 1;
    condition = dia_kalomsguard_perm_condition;
    information = dia_kalomsguard_perm_info;
    permanent = true;
    description = "Äóìàþ, òû íå áóäåøü ïðîòèâ, åñëè ÿ çàéäó?..";
};

func int dia_kalomsguard_perm_condition() {
    return 1;
};

func void dia_kalomsguard_perm_info() {
    ai_output(other, self, "DIA_KalomsGuard_PERM_15_00"); //Äóìàþ, òû íå áóäåøü ïðîòèâ, åñëè ÿ çàéäó?..
    ai_output(self, other, "DIA_KalomsGuard_PERM_13_01"); //Åñëè òû ïðîÿâèøü íåóâàæåíèå ê ìîåìó ãîñïîäèíó, ÿ óáüþ òåáÿ.
    ai_stopprocessinfos(self);
};

instance dia_tpl_1415_torwache_exit(c_info) {
    npc = tpl_1415_templer /*8234*/;
    nr = 999;
    condition = dia_tpl_1415_torwache_exit_condition;
    information = dia_tpl_1415_torwache_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_tpl_1415_torwache_exit_condition() {
    return 1;
};

func void dia_tpl_1415_torwache_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_tpl_1415_torwache_first(c_info) {
    npc = tpl_1415_templer /*8234*/;
    nr = 2;
    condition = dia_tpl_1415_torwache_first_condition;
    information = dia_tpl_1415_torwache_first_info;
    important = true;
};

func int dia_tpl_1415_torwache_first_condition() {
    if (kapitel >= 2) {
        return false;
    };
    if (npc_getdisttowp(other, "PSI_START") > 800) {
        npc_setrefusetalk(self, 30);
    };
    if (npc_refusetalk(self) == false) {
        return true;
    };
};

func void dia_tpl_1415_torwache_first_info() {
    ai_output(self, other, "DIA_Tpl_1415_Torwache_First_13_00"); //Ïðèâåòñòâóþ òåáÿ, íåçíàêîìåö!
    ai_output(self, other, "DIA_Tpl_1415_Torwache_First_13_01"); //Òû ñòóïàåøü ïî ñâÿòîé çåìëå. Çäåñü íàõîäèòñÿ Áðàòñòâî Ñïÿùåãî.
    ai_output(self, other, "DIA_Tpl_1415_Torwache_First_13_02"); //×òî ïðèâåëî òåáÿ ñþäà?
    info_clearchoices(dia_tpl_1415_torwache_first /*12544*/);
    info_addchoice(dia_tpl_1415_torwache_first /*12544*/, "ß çäåñü íîâåíüêèé. ß õî÷ó îñìîòðåòü Ëàãåðü.", dia_tpl_1415_torwache_first_justlooking);
    if (npc_gettrueguild(hero) == gil_none) {
        info_addchoice(dia_tpl_1415_torwache_first /*12544*/, "ß õî÷ó ïðèñîåäèíèòüñÿ ê âàì.", dia_tpl_1415_torwache_first_join);
    };
};

func void dia_tpl_1415_torwache_first_join() {
    ai_output(other, self, "DIA_Tpl_1415_Torwache_First_Join_15_00"); //ß ñëûøàë î òîì, ÷òî âàì íóæíû ëþäè. ß õî÷ó ïðèñîåäèíèòüñÿ ê âàì.
    ai_output(self, other, "DIA_Tpl_1415_Torwache_First_Join_13_01"); //Äîáðî ïîæàëîâàòü! Áðàòñòâî ñ ðàäîñòüþ ïðèìåò ëþáîãî, êòî ãîòîâ ñëåäîâàòü çà äóõîì Ñïÿùåãî.
    ai_output(self, other, "DIA_Tpl_1415_Torwache_First_Join_13_02"); //Åñëè òâîè íàìåðåíèÿ ñåðüåçíû, ïîñòàðàéñÿ îáðàòèòü íà ñåáÿ âíèìàíèå Èäîëà Íàìèáà. Òû íàéäåøü åãî âî äâîðå çà âîðîòàìè.
    ai_output(self, other, "DIA_Tpl_1415_Torwache_First_Join_13_04"); //Íî òû íå äîëæåí îáðàùàòüñÿ ê íåìó äî òåõ ïîð, ïîêà îí ñàì íå çàãîâîðèò ñ òîáîé.
    info_clearchoices(dia_tpl_1415_torwache_first /*12544*/);
};

func void dia_tpl_1415_torwache_first_justlooking() {
    ai_output(other, self, "DIA_Tpl_1415_Torwache_First_JustLooking_15_00"); //ß çäåñü íîâåíüêèé. ß õî÷ó îñìîòðåòü Ëàãåðü.
    ai_output(self, other, "DIA_Tpl_1415_Torwache_First_JustLooking_13_01"); //Ìû âñåãäà ðàäû ãîñòÿì.
    ai_output(self, other, "DIA_Tpl_1415_Torwache_First_JustLooking_13_02"); //Íî òû äîëæåí óâàæàòü íàøè ïðàâèëà. Åñòü ìåñòà, âõîä â êîòîðûå áóäåò äëÿ òåáÿ çàêðûò.
    info_clearchoices(dia_tpl_1415_torwache_first /*12544*/);
};

instance dia_tpl_1415_torwache_sit(c_info) {
    npc = tpl_1415_templer /*8234*/;
    nr = 2;
    condition = dia_tpl_1415_torwache_sit_condition;
    information = dia_tpl_1415_torwache_sit_info;
    permanent = true;
    description = "Êàê äåëà â Ëàãåðå?";
};

func int dia_tpl_1415_torwache_sit_condition() {
    return 1;
};

func void dia_tpl_1415_torwache_sit_info() {
    ai_output(other, self, "DIA_Tpl_1415_Torwache_Sit_15_00"); //Êàê äåëà â Ëàãåðå?
    ai_output(self, other, "DIA_Tpl_1415_Torwache_Sit_13_01"); //Âñå òèõî. Çàõîäè.
};

instance tpl_1415_torwache_templeraufnahme(c_info) {
    npc = tpl_1415_templer /*8234*/;
    condition = tpl_1415_torwache_templeraufnahme_condition;
    information = tpl_1415_torwache_templeraufnahme_info;
    important = true;
};

func int tpl_1415_torwache_templeraufnahme_condition() {
    if ((((npc_hasitems(hero, itat_crawlerqueen) >= 1) || (corkalom_bringmcqballs == log_success)) && (npc_gettrueguild(hero) == gil_nov)) && (npc_getdisttonpc(hero, self) < 1000)) {
        return true;
    };
};

func void tpl_1415_torwache_templeraufnahme_info() {
    ai_gotonpc(hero, self);
    ai_output(self, other, "Tpl_1415_Torwache_IMPORTANT_Info_13_01"); //Ýé, ÿ ñëûøàë î òîì, ÷òî ñëó÷èëîñü â øàõòå. Õîðîøàÿ ðàáîòà! Òû äîñòîèí òîãî, ÷òîáû ñòàòü Ñòðàæåì.
    ai_output(self, other, "Tpl_1415_Torwache_IMPORTANT_Info_13_02"); //Ïîãîâîðè ñ Êîð Àíãàðîì!
    log_createtopic(ge_becometemplar, log_note);
    b_logentry(ge_becometemplar, ge_becometemplar_3);
};

instance tpl_1415_templer_rock(c_info) {
    npc = tpl_1415_templer /*8234*/;
    nr = 0;
    condition = tpl_1415_templer_rock_condition;
    information = tpl_1415_templer_rock_info;
    permanent = true;
    description = "Ìíå íóæíû äîñïåõè.";
};

func int tpl_1415_templer_rock_condition() {
    if ((kapitel < 2) && (!npc_hasitems(hero, nov_armor_l))) {
        return true;
    };
};

func void tpl_1415_templer_rock_info() {
    ai_output(other, self, "Tpl_1415_Templer_ROCK_Info_15_01"); //Ìíå íóæíû äîñïåõè.
    ai_output(self, other, "Tpl_1415_Templer_ROCK_Info_13_02"); //Òû äîëæåí çàñëóæèòü ïðàâî íîñèòü äîñïåõè Ñòðàæà. Ïîêà æå ÿ ìîãó äàòü òåáå íàáåäðåííóþ ïîâÿçêó ïîñëóøíèêà.
    ai_output(other, self, "Tpl_1415_Templer_ROCK_Info_15_03"); //Ýòî ëó÷øå, ÷åì íè÷åãî...
    ai_output(self, other, "Tpl_1415_Templer_ROCK_Info_13_04"); //È ýòî íå áåñïëàòíî, ÷òî áû òû òàì íå äóìàë!
    info_clearchoices(tpl_1415_templer_rock /*12555*/);
    info_addchoice(tpl_1415_templer_rock /*12555*/, dialog_back, tpl_1415_templer_rock_back);
    info_addchoice(tpl_1415_templer_rock /*12555*/, b_buildbuyarmorstring(name_torwachenpsirock, value_nov_armor_l), tpl_1415_templer_rock_buy);
};

func void tpl_1415_templer_rock_back() {
    info_clearchoices(tpl_1415_templer_rock /*12555*/);
};

func void tpl_1415_templer_rock_buy() {
    ai_output(other, self, "Tpl_1415_Templer_ROCK_BUY_15_01"); //Õîðîøî, äàé ìíå íàáåäðåííóþ ïîâÿçêó.
    if (npc_hasitems(hero, itminugget) < value_nov_armor_l) {
        ai_output(self, other, "Tpl_1415_Templer_ROCK_BUY_13_02"); //Âîçâðàùàéñÿ, êîãäà ó òåáÿ áóäåò ðóäà!
    }
    else {
        ai_output(self, other, "Tpl_1415_Templer_ROCK_BUY_13_03"); //Îäíàæäû îíà ìîæåò ñïàñòè òåáå æèçíü!
        b_giveinvitems(hero, self, itminugget /*4517*/, value_nov_armor_l);
        createinvitem(self, nov_armor_l);
        b_giveinvitems(self, hero, nov_armor_l /*4138*/, 1);
        ai_equipbestarmor(hero);
    };
};

instance dia_tpl_1416_torwache_exit(c_info) {
    npc = tpl_1416_templer /*8236*/;
    nr = 999;
    condition = dia_tpl_1416_torwache_exit_condition;
    information = dia_tpl_1416_torwache_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_tpl_1416_torwache_exit_condition() {
    return 1;
};

func void dia_tpl_1416_torwache_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_tpl_1416_torwache_life(c_info) {
    npc = tpl_1416_templer /*8236*/;
    nr = 1;
    condition = dia_tpl_1416_torwache_life_condition;
    information = dia_tpl_1416_torwache_life_info;
    permanent = true;
    description = "Êàê æèâóò Ñòðàæè Áðàòñòâà?";
};

func int dia_tpl_1416_torwache_life_condition() {
    return 1;
};

func void dia_tpl_1416_torwache_life_info() {
    ai_output(other, self, "DIA_Tpl_1416_Torwache_Life_15_00"); //Êàê æèâóò Ñòðàæè Áðàòñòâà?
    ai_output(self, other, "DIA_Tpl_1416_Torwache_Life_08_01"); //Ó ìåíÿ âàæíàÿ ìèññèÿ. Ñàì Ïðîñâåùåííûé è åãî ó÷åíèêè ðàññ÷èòûâàþò íà ìåíÿ.
    ai_output(self, other, "DIA_Tpl_1416_Torwache_Life_08_02"); //Ìîÿ ïðåæíÿÿ æèçíü îñòàëàñü â ïðîøëîì. Òåïåðü ÿ ÃÎÐ ÍÀ - Ñòðàæ íà ñëóæáå ó Ñïÿùåãî.
};

instance info_gorhanis_exit(c_info) {
    npc = tpl_1422_gorhanis /*8246*/;
    nr = 999;
    condition = info_gorhanis_exit_condition;
    information = info_gorhanis_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_gorhanis_exit_condition() {
    return 1;
};

func void info_gorhanis_exit_info() {
    ai_stopprocessinfos(self);
};

instance info_gorhanis_what(c_info) {
    npc = tpl_1422_gorhanis /*8246*/;
    nr = 1;
    condition = info_gorhanis_what_condition;
    information = info_gorhanis_what_info;
    description = "×åì òû çàíèìàåøüñÿ?";
};

func int info_gorhanis_what_condition() {
    return 1;
};

func void info_gorhanis_what_info() {
    ai_output(other, self, "Info_GorHanis_What_15_00"); //×åì òû çàíèìàåøüñÿ?
    ai_output(self, other, "Info_GorHanis_What_08_01"); //ß? Ñðàæàþñü âî ñëàâó Ñïÿùåãî!
};

instance info_gorhanis_arena(c_info) {
    npc = tpl_1422_gorhanis /*8246*/;
    nr = 1;
    condition = info_gorhanis_arena_condition;
    information = info_gorhanis_arena_info;
    permanent = true;
    description = "Òû äåðåøüñÿ íà àðåíå?";
};

func int info_gorhanis_arena_condition() {
    if (npc_knowsinfo(hero, info_gorhanis_what /*12569*/)) {
        return 1;
    };
};

func void info_gorhanis_arena_info() {
    ai_output(other, self, "Info_GorHanis_Arena_15_00"); //Òû äåðåøüñÿ íà àðåíå?
    ai_output(self, other, "Info_GorHanis_Arena_08_01"); //Áîëîòíûå áðàòüÿ ïîñëàëè ìåíÿ ñþäà ñðàæàòüñÿ âî ñëàâó Ñïÿùåãî.
    ai_output(self, other, "Info_GorHanis_Arena_08_02"); //ß äåðóñü âî èìÿ Ñïÿùåãî - è íåâåðíûå âèäÿò, êàêîé ñèëîé îí íàäåëèë ìåíÿ!
};

instance info_gorhanis_sleeper(c_info) {
    npc = tpl_1422_gorhanis /*8246*/;
    nr = 2;
    condition = info_gorhanis_sleeper_condition;
    information = info_gorhanis_sleeper_info;
    description = "Êòî òàêîé Ñïÿùèé?";
};

func int info_gorhanis_sleeper_condition() {
    if (npc_knowsinfo(hero, info_gorhanis_what /*12569*/)) {
        return 1;
    };
};

func void info_gorhanis_sleeper_info() {
    ai_output(other, self, "Info_GorHanis_Sleeper_15_00"); //Êòî òàêîé Ñïÿùèé?
    ai_output(self, other, "Info_GorHanis_Sleeper_08_01"); //Æðåöû â íàøåì Ëàãåðå ðàññêàæóò òåáå î íåì êóäà ëó÷øå, ÷åì ÿ.
    ai_output(self, other, "Info_GorHanis_Sleeper_08_02"); //ß òîëüêî âîò ÷òî òåáå ñêàæó: Ñïÿùèé - íàø ñïàñèòåëü. Îí ïðèâåë íàñ ñþäà, îí æå è âûâåäåò íàñ îòñþäà.
    ai_output(other, self, "Info_GorHanis_Sleeper_15_03"); //Òî åñòü âû æäåòå, ïîêà âàø áîã ïîäàðèò âàì ñâîáîäó?
    ai_output(self, other, "Info_GorHanis_Sleeper_08_04"); //Äà! È íàøå îæèäàíèå ñêîðî îêîí÷èòñÿ. Óæå ãîòîâèòñÿ Âåëèêàÿ Öåðåìîíèÿ.
};

instance info_gorhanis_summoning(c_info) {
    npc = tpl_1422_gorhanis /*8246*/;
    nr = 2;
    condition = info_gorhanis_summoning_condition;
    information = info_gorhanis_summoning_info;
    description = "×òî çà öåðåìîíèÿ?";
};

func int info_gorhanis_summoning_condition() {
    if (npc_knowsinfo(hero, info_gorhanis_sleeper /*12575*/)) {
        return 1;
    };
};

func void info_gorhanis_summoning_info() {
    ai_output(other, self, "Info_GorHanis_Summoning_15_00"); //×òî çà öåðåìîíèÿ?
    ai_output(self, other, "Info_GorHanis_Summoning_08_01"); //Íàøè ïðîðîêè ãîâîðÿò, ÷òî Âåëèêàÿ Öåðåìîíèÿ âûçîâà Ñïÿùåãî îòêðîåò íàì ïóòü ê ñâîáîäå!
    ai_output(self, other, "Info_GorHanis_Summoning_08_02"); //Åñëè õî÷åøü óçíàòü îá ýòîì áîëüøå, ïðèõîäè â íàø Ëàãåðü.
};

instance info_gorhanis_waytost(c_info) {
    npc = tpl_1422_gorhanis /*8246*/;
    nr = 0;
    condition = info_gorhanis_waytost_condition;
    information = info_gorhanis_waytost_info;
    permanent = true;
    description = "Êàê äîáðàòüñÿ äî âàøåãî Ëàãåðÿ?";
};

func int info_gorhanis_waytost_condition() {
    if (npc_knowsinfo(hero, info_gorhanis_sleeper /*12575*/) || npc_knowsinfo(hero, info_gorhanis_summoning /*12578*/)) {
        return 1;
    };
};

func void info_gorhanis_waytost_info() {
    ai_output(other, self, "Info_GorHanis_WayToST_15_00"); //Êàê äîáðàòüñÿ äî âàøåãî Ëàãåðÿ?
    ai_output(self, other, "Info_GorHanis_WayToST_08_01"); //Çäåñü, â Ñòàðîì Ëàãåðå, âñåãäà ìîæíî íàéòè êîãî-íèáóäü èç ïîñëóøíèêîâ. Îíè ñ ðàäîñòüþ ïðîâîäÿò òåáÿ â íàø Ëàãåðü. Òåáå ïðîñòî íóæíî ïîãîâîðèòü ñ íèìè.
};

instance info_gorhanis_charge(c_info) {
    npc = tpl_1422_gorhanis /*8246*/;
    nr = 3;
    condition = info_gorhanis_charge_condition;
    information = info_gorhanis_charge_info;
    description = "ß âûçûâàþ òåáÿ íà áîé!";
};

func int info_gorhanis_charge_condition() {
    if (npc_knowsinfo(hero, info_gorhanis_arena /*12572*/)) {
        return 1;
    };
};

func void info_gorhanis_charge_info() {
    ai_output(other, self, "Info_GorHanis_Charge_15_00"); //ß âûçûâàþ òåáÿ íà áîé!
    ai_output(self, other, "Info_GorHanis_Charge_08_01"); //Íåâåëèêà ñëàâà äëÿ Ñïÿùåãî, åñëè ÿ áóäó óáèâàòü êàæäîãî áåçäåëüíèêà íà ãëàçàõ ó òîëïû.
    ai_output(self, other, "Info_GorHanis_Charge_08_02"); //ß áóäó äðàòüñÿ ñ òîáîé òîëüêî òîãäà, êîãäà òû ñòàíåøü äîñòîéíûì ïðîòèâíèêîì.
    ai_output(self, other, "Info_GorHanis_Charge_08_03"); //Íî ÿ äóìàþ, ÷òî ó áîéöîâ èç äðóãèõ Ëàãåðåé êóäà ìåíüøå ïðèíöèïîâ...
};

instance info_gorhanis_chargegood(c_info) {
    npc = tpl_1422_gorhanis /*8246*/;
    nr = 3;
    condition = info_gorhanis_chargegood_condition;
    information = info_gorhanis_chargegood_info;
    permanent = true;
    description = "Íó ÷òî, òåïåðü òû áóäåøü äðàòüñÿ ñî ìíîé?";
};

func int info_gorhanis_chargegood_condition() {
    if (npc_knowsinfo(hero, info_gorhanis_charge /*12584*/)) {
        return 1;
    };
};

func void info_gorhanis_chargegood_info() {
    ai_output(other, self, "Info_GorHanis_ChargeGood_15_00"); //Íó ÷òî, òåïåðü òû áóäåøü äðàòüñÿ ñî ìíîé?
    ai_output(self, other, "Info_GorHanis_ChargeGood_08_01"); //Íåò! Òû åùå íåäîñòàòî÷íî ñèëåí äëÿ ýòîãî!
};

instance tpl_1430_templer_callsleeper(c_info) {
    npc = tpl_1430_templer /*8254*/;
    condition = tpl_1430_templer_callsleeper_condition;
    information = tpl_1430_templer_callsleeper_info;
    important = true;
};

func int tpl_1430_templer_callsleeper_condition() {
    var c_npc templer;
    var c_npc kalom;

    templer = hlp_getnpc(tpl_1430_templer);
    kalom = hlp_getnpc(gur_1201_corkalom);
    if (((((((corkalom_bringbook == log_success) && (npc_getdisttowp(templer, "PSI_TEMPLE_STAIRS_3") < 1000)) && c_timeforgreatprayer()) && (!npc_knowsinfo(hero, nov_1319_novize_callsleeper /*10495*/))) && (!npc_knowsinfo(hero, nov_1320_novize_callsleeper /*10500*/))) && (!npc_knowsinfo(hero, tpl_1431_templer_callsleeper /*12595*/))) && (npc_getdisttowp(kalom, "PSI_TEMPLE_STAIRS_RIGHT") < 300)) {
        return true;
    };
};

func void tpl_1430_templer_callsleeper_info() {
    ai_stopprocessinfos(self);
    b_kapitelwechsel(3);
};

instance tpl_1431_templer_callsleeper(c_info) {
    npc = tpl_1431_templer /*8256*/;
    condition = tpl_1431_templer_callsleeper_condition;
    information = tpl_1431_templer_callsleeper_info;
    important = true;
};

func int tpl_1431_templer_callsleeper_condition() {
    var c_npc templer;
    var c_npc kalom;

    templer = hlp_getnpc(tpl_1431_templer);
    kalom = hlp_getnpc(gur_1201_corkalom);
    if (((((((corkalom_bringbook == log_success) && (npc_getdisttowp(templer, "PSI_TEMPLE_STAIRS_1") < 1000)) && c_timeforgreatprayer()) && (!npc_knowsinfo(hero, nov_1319_novize_callsleeper /*10495*/))) && (!npc_knowsinfo(hero, nov_1320_novize_callsleeper /*10500*/))) && (!npc_knowsinfo(hero, tpl_1430_templer_callsleeper /*12590*/))) && (npc_getdisttowp(kalom, "PSI_TEMPLE_STAIRS_RIGHT") < 300)) {
        return true;
    };
};

func void tpl_1431_templer_callsleeper_info() {
    ai_stopprocessinfos(self);
    b_kapitelwechsel(3);
};

instance tpl_1433_gornavid_exit(c_info) {
    npc = tpl_1433_gornavid /*8264*/;
    nr = 999;
    condition = tpl_1433_gornavid_exit_condition;
    information = tpl_1433_gornavid_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int tpl_1433_gornavid_exit_condition() {
    return 1;
};

func void tpl_1433_gornavid_exit_info() {
    ai_output(self, other, "Tpl_1433_GorNaVid_Exit_Info_13_02"); //Äà ïðîáóäèòñÿ Ñïÿùèé!
    ai_stopprocessinfos(self);
};

instance tpl_1433_gornavid_health(c_info) {
    npc = tpl_1433_gornavid /*8264*/;
    nr = 0;
    condition = tpl_1433_gornavid_health_condition;
    information = tpl_1433_gornavid_health_info;
    description = "Ìíå íóæíà òâîÿ ïîìîùü.";
};

func int tpl_1433_gornavid_health_condition() {
    if (npc_knowsinfo(hero, grd_263_asghan_open /*9393*/) && (!npc_knowsinfo(hero, grd_263_asghan_open_now /*9396*/))) {
        return true;
    };
};

func void tpl_1433_gornavid_health_info() {
    ai_output(other, self, "Tpl_1433_GorNaVid_HEALTH_Info_15_01"); //Ìíå íóæíà òâîÿ ïîìîùü.
    ai_output(other, self, "Tpl_1433_GorNaVid_HEALTH_Info_15_02"); //ß èùó êîå-÷òî äëÿ Êîð Ãàëîìà, è ÿ çíàþ, ãäå íàõîäèòñÿ ëîãîâî ïîëçóíîâ.
    ai_output(other, self, "Tpl_1433_GorNaVid_HEALTH_Info_15_03"); //Òû ïîìîæåøü ìíå, êîãäà ÿ îòêðîþ ïðîõîä?
    ai_output(self, other, "Tpl_1433_GorNaVid_HEALTH_Info_13_04"); //Îõîòà íà ïîëçóíîâ îáû÷íî äàåòñÿ íåëåãêî. Åñëè òû ïðèíåñåøü ìíå öåëåáíûé ýëèêñèð, òî ìîæåøü íà ìåíÿ ðàññ÷èòûâàòü.
};

instance tpl_1433_gornavid_ian(c_info) {
    npc = tpl_1433_gornavid /*8264*/;
    nr = 0;
    condition = tpl_1433_gornavid_ian_condition;
    information = tpl_1433_gornavid_ian_info;
    description = "ß èùó ëîãîâî ïîëçóíîâ.";
};

func int tpl_1433_gornavid_ian_condition() {
    if ((corkalom_bringmcqballs == log_running) && (!npc_knowsinfo(hero, grd_263_asghan_open /*9393*/))) {
        return 1;
    };
};

func void tpl_1433_gornavid_ian_info() {
    ai_output(other, self, "Tpl_1433_GorNaVid_IAN_Info_15_01"); //ß èùó ëîãîâî ïîëçóíîâ.
    ai_output(self, other, "Tpl_1433_GorNaVid_IAN_Info_13_02"); //Îò ãëàâíîé øàõòû îòõîäèò ìíîæåñòâî ïåùåð, íî ëîãîâà òàì íåò.
};

instance tpl_1433_gornavid_health_suc(c_info) {
    npc = tpl_1433_gornavid /*8264*/;
    nr = 0;
    condition = tpl_1433_gornavid_health_suc_condition;
    information = tpl_1433_gornavid_health_suc_info;
    description = "(äàåò öåëåáíûé ýëèêñèð)";
};

func int tpl_1433_gornavid_health_suc_condition() {
    if (npc_knowsinfo(hero, tpl_1433_gornavid_health /*12603*/) && ((npc_hasitems(hero, itfo_potion_health_01) || npc_hasitems(hero, itfo_potion_health_02)) || npc_hasitems(hero, itfo_potion_health_03))) {
        return 1;
    };
};

func void tpl_1433_gornavid_health_suc_info() {
    ai_output(other, self, "Tpl_1433_GorNaVid_HEALTH_SUC_Info_15_01"); //Âîò, ìîæåò áûòü, ýòî ïîìîæåò.
    ai_output(self, other, "Tpl_1433_GorNaVid_HEALTH_SUC_Info_13_02"); //Ñïàñèáî. Ìîæåøü íà ìåíÿ ðàññ÷èòûâàòü.  Ìû âñòðå÷àåìñÿ âíèçó ñ Àñãõàíîì.
    ai_output(other, self, "Tpl_1433_GorNaVid_HEALTH_SUC_Info_15_03"); //ß òîæå áóäó.
    if (npc_hasitems(hero, itfo_potion_health_01)) {
        b_giveinvitems(hero, self, itfo_potion_health_01 /*4827*/, 1);
    }
    else if (npc_hasitems(hero, itfo_potion_health_02)) {
        b_giveinvitems(hero, self, itfo_potion_health_02 /*4829*/, 1);
    }
    else if (npc_hasitems(hero, itfo_potion_health_03)) {
        b_giveinvitems(hero, self, itfo_potion_health_03 /*4831*/, 1);
    }
    else {
        printdebugnpc(pd_mission, "KEINE POTION= UNM*GLICH");
    };
    npc_exchangeroutine(self, "GATE");
    npc_setpermattitude(self, att_friendly);
    b_givexp(xp_hiregornavid);
    b_logentry(ch2_mceggs, ch2_mceggs_12);
    ai_stopprocessinfos(self);
};

instance tpl_1433_gornavid_victory(c_info) {
    npc = tpl_1433_gornavid /*8264*/;
    nr = 0;
    condition = tpl_1433_gornavid_victory_condition;
    information = tpl_1433_gornavid_victory_info;
    description = "ß íàøåë ëîãîâî êîðîëåâû ïîëçóíîâ!";
};

func int tpl_1433_gornavid_victory_condition() {
    if (npc_hasitems(hero, itat_crawlerqueen) >= 1) {
        return true;
    };
};

func void tpl_1433_gornavid_victory_info() {
    ai_output(other, self, "Tpl_1433_GorNavid_VICTORY_Info_15_01"); //ß íàøåë ëîãîâî êîðîëåâû ïîëçóíîâ!
    ai_output(self, other, "Tpl_1433_GorNavid_VICTORY_Info_13_02"); //ß áëàãîäàðþ òåáÿ îò èìåíè âñåãî Áðàòñòâà!
    ai_output(self, other, "Tpl_1433_GorNavid_VICTORY_Info_13_03"); //Äà óáåðåæåò òåáÿ íåçðèìàÿ ðóêà Ñïÿùåãî!
};

instance tpl_1436_templer_exit(c_info) {
    npc = tpl_1436_templer /*8273*/;
    nr = 999;
    condition = tpl_1436_templer_exit_condition;
    information = tpl_1436_templer_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int tpl_1436_templer_exit_condition() {
    return true;
};

func void tpl_1436_templer_exit_info() {
    ai_stopprocessinfos(self);
};

instance tpl_1436_templer_crawler(c_info) {
    npc = tpl_1436_templer /*8273*/;
    nr = 0;
    condition = tpl_1436_templer_crawler_condition;
    information = tpl_1436_templer_crawler_info;
    permanent = true;
    description = "Êàê æèçíü?";
};

func int tpl_1436_templer_crawler_condition() {
    return true;
};

func void tpl_1436_templer_crawler_info() {
    ai_output(other, self, "Tpl_1436_Templer_CRAWLER_Info_15_01"); //Êàê æèçíü?
    ai_output(self, other, "Tpl_1436_Templer_CRAWLER_Info_13_02"); //Ìû çäåñü îõîòèìñÿ íà ïîëçóíîâ. Îäíîâðåìåííî ïîëó÷àåòñÿ, ÷òî ìû çàùèùàåì îò íèõ ðóäîêîïîâ, - è âñå äîâîëüíû.
    ai_output(self, other, "Tpl_1436_Templer_CRAWLER_Info_13_03"); //Íà ñàìîì äåëå, íàì íóæíà òîëüêî ñëþíà ýòèõ õèùíûõ òâàðåé. Èç ñëþíû, êîòîðàÿ äîáûâàåòñÿ èç ÷åëþñòåé ïîëçóíîâ, íàø Ãóðó Êîð Ãàëîì ãîòîâèò ìàãè÷åñêèå ýëèêñèðû.
};

instance tpl_1437_templer_exit(c_info) {
    npc = tpl_1437_templer /*8275*/;
    nr = 999;
    condition = tpl_1437_templer_exit_condition;
    information = tpl_1437_templer_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int tpl_1437_templer_exit_condition() {
    return true;
};

func void tpl_1437_templer_exit_info() {
    ai_stopprocessinfos(self);
};

instance tpl_1437_templer_nerv(c_info) {
    npc = tpl_1437_templer /*8275*/;
    nr = 0;
    condition = tpl_1437_templer_nerv_condition;
    information = tpl_1437_templer_nerv_info;
    permanent = true;
    description = "Êàê æèçíü?";
};

func int tpl_1437_templer_nerv_condition() {
    return true;
};

func void tpl_1437_templer_nerv_info() {
    ai_output(other, self, "Tpl_1437_Templer_NERV_Info_15_01"); //Êàê æèçíü?
    ai_output(self, other, "Tpl_1437_Templer_NERV_Info_13_02"); //Ïîñëóøàé, òû ñîáðàëñÿ äîñòàâàòü çäåñü âñåõ èëè òîëüêî ìåíÿ?
    ai_stopprocessinfos(self);
};

instance tpl_1437_templer_leave(c_info) {
    npc = tpl_1437_templer /*8275*/;
    nr = 0;
    condition = tpl_1437_templer_leave_condition;
    information = tpl_1437_templer_leave_info;
    description = "Âñå â ïîðÿäêå?";
};

func int tpl_1437_templer_leave_condition() {
    if (npc_knowsinfo(hero, tpl_1437_templer_nerv /*12624*/)) {
        return true;
    };
};

func void tpl_1437_templer_leave_info() {
    ai_output(other, self, "Tpl_1437_Templer_LEAVE_Info_15_01"); //Âñå â ïîðÿäêå?
    ai_output(self, other, "Tpl_1437_Templer_LEAVE_Info_13_02"); //Ìèíóòó ïîêîÿ, ëàäíî? Èñ÷åçíè è ïîãîâîðè ñ êåì-íèáóäü åùå - ñ êåì óãîäíî, òîëüêî íå ñî ìíîé!
    ai_stopprocessinfos(self);
};

instance tpl_1437_templer_leavenow(c_info) {
    npc = tpl_1437_templer /*8275*/;
    nr = 0;
    condition = tpl_1437_templer_leavenow_condition;
    information = tpl_1437_templer_leavenow_info;
    description = "Íåò, ÿ ïðîñòî òåáÿ íå ïîíèìàþ!";
};

func int tpl_1437_templer_leavenow_condition() {
    if (npc_knowsinfo(hero, tpl_1437_templer_leave /*12627*/)) {
        return true;
    };
};

func void tpl_1437_templer_leavenow_info() {
    ai_output(other, self, "Tpl_1437_Templer_LEAVENOW_Info_15_01"); //Íåò, ÿ ïðîñòî òåáÿ íå ïîíèìàþ!
    ai_output(self, other, "Tpl_1437_Templer_LEAVENOW_Info_13_02"); //Ëàäíî, ÿ ïîïðîáóþ òåáå îáúÿñíèòü!
    ai_output(self, other, "Tpl_1437_Templer_LEAVENOW_Info_13_03"); //Êàòèñü îòñþäà!
    ai_output(self, other, "Tpl_1437_Templer_LEAVENOW_Info_13_04"); //Ïðîâàëèâàé èç ýòîé øàõòû!
    ai_output(self, other, "Tpl_1437_Templer_LEAVENOW_Info_13_05"); //Áîëüøå ÍÈÊÎÃÄÀ íå ïîäõîäè êî ìíå!
    ai_output(self, other, "Tpl_1437_Templer_LEAVENOW_Info_13_06"); //Èñ÷åçíè! Îñòàâü ìåíÿ â ïîêîå!
    ai_output(self, other, "Tpl_1437_Templer_LEAVENOW_Info_13_07"); //ÏÐÎÂÀËÈÂÀÉ!
    ai_stopprocessinfos(self);
};

instance tpl_1438_templer_exit(c_info) {
    npc = tpl_1438_templer /*8277*/;
    nr = 999;
    condition = tpl_1438_templer_exit_condition;
    information = tpl_1438_templer_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int tpl_1438_templer_exit_condition() {
    return 1;
};

func void tpl_1438_templer_exit_info() {
    ai_output(other, self, "Tpl_1438_Templer_Exit_Info_15_01"); //Óâèäèìñÿ.
    ai_output(self, other, "Tpl_1438_Templer_Exit_Info_13_02"); //Äà ïðîáóäèòñÿ Ñïÿùèé!
    ai_stopprocessinfos(self);
};

instance tpl_1438_templer_info(c_info) {
    npc = tpl_1438_templer /*8277*/;
    nr = 0;
    condition = tpl_1438_templer_info_condition;
    information = tpl_1438_templer_info_info;
    description = "×òî äåëàþò Ñòðàæè â øàõòå?";
};

func int tpl_1438_templer_info_condition() {
    if (corkalom_bringmcqballs != log_running) {
        return true;
    };
};

func void tpl_1438_templer_info_info() {
    ai_output(other, self, "Tpl_1438_Templer_INFO_Info_15_01"); //×òî äåëàþò Ñòðàæè â øàõòå?
    ai_output(self, other, "Tpl_1438_Templer_INFO_Info_13_02"); //Ìû îõîòèìñÿ íà ïîëçóíîâ. Òû ëó÷øå âîçâðàùàéñÿ â Ëàãåðü - òàì áåçîïàñíåå.
};

instance tpl_1438_templer_why(c_info) {
    npc = tpl_1438_templer /*8277*/;
    nr = 0;
    condition = tpl_1438_templer_why_condition;
    information = tpl_1438_templer_why_info;
    description = "Çà÷åì âû îõîòèòåñü íà ïîëçóíîâ?";
};

func int tpl_1438_templer_why_condition() {
    if (npc_knowsinfo(hero, tpl_1438_templer_info /*12636*/)) {
        return 1;
    };
};

func void tpl_1438_templer_why_info() {
    ai_output(other, self, "Tpl_1438_Templer_WHY_Info_15_01"); //Çà÷åì âû îõîòèòåñü íà ïîëçóíîâ?
    ai_output(self, other, "Tpl_1438_Templer_WHY_Info_13_02"); //Íàì íóæíû èõ ÷åëþñòè. Ó ïîëçóíîâ î÷åíü öåííàÿ ñëþíà.
    ai_output(other, self, "Tpl_1438_Templer_WHY_Info_15_03"); //Êàêàÿ òàêàÿ ñëþíà?
    ai_output(self, other, "Tpl_1438_Templer_WHY_Info_13_04"); //ßäîâèòàÿ. È òîëüêî Êîð Ãàëîì çíàåò, êàê ãîòîâèòü èç íåå ýëèêñèðû.
};

instance tpl_1438_templer_kalom(c_info) {
    npc = tpl_1438_templer /*8277*/;
    nr = 0;
    condition = tpl_1438_templer_kalom_condition;
    information = tpl_1438_templer_kalom_info;
    description = "Êòî òàêîé Êîð Ãàëîì?";
};

func int tpl_1438_templer_kalom_condition() {
    if (npc_knowsinfo(hero, tpl_1438_templer_why /*12639*/)) {
        return 1;
    };
};

func void tpl_1438_templer_kalom_info() {
    ai_output(other, self, "Tpl_1438_Templer_KALOM_Info_15_01"); //Êòî òàêîé Êîð Ãàëîì?
    ai_output(self, other, "Tpl_1438_Templer_KALOM_Info_13_02"); //Ýòî îäèí èç ñàìûõ âëèÿòåëüíûõ ëþäåé âî âñåì Áðàòñòâå. Îí çíàåò ìíîæåñòâî òàéí. Ãîâîðÿò, îí äàæå ìîæåò ÷èòàòü ìûñëè ëþäåé.
    ai_output(self, other, "Tpl_1438_Templer_KALOM_Info_13_03"); //Íî ïîìèìî âñåãî ýòîãî, îí åùå è àëõèìèê. Îí ãîòîâèò ýëèêñèðû, áëàãîäàðÿ êîòîðûì äóøè ïîñâÿùåííûõ ìîãóò ãîâîðèòü ñî Ñïÿùèì. Äà òû ïðîñòî çàãëÿíè â Ëàãåðü! Íàì âñåãäà íóæíû íîâûå ëþäè.
    ai_output(other, self, "Tpl_1438_Templer_KALOM_Info_15_04"); //ß ïîäóìàþ îá ýòîì.
};

instance tpl_1438_templer_eggsearch(c_info) {
    npc = tpl_1438_templer /*8277*/;
    nr = 0;
    condition = tpl_1438_templer_eggsearch_condition;
    information = tpl_1438_templer_eggsearch_info;
    description = "ß èùó ëîãîâî ïîëçóíîâ.";
};

func int tpl_1438_templer_eggsearch_condition() {
    if (corkalom_bringmcqballs == log_running) {
        return true;
    };
};

func void tpl_1438_templer_eggsearch_info() {
    ai_output(other, self, "Tpl_1438_Templer_EGGSEARCH_Info_15_01"); //ß èùó ëîãîâî ïîëçóíîâ.
    ai_output(self, other, "Tpl_1438_Templer_EGGSEARCH_Info_13_02"); //Ïîãîâîðè ñ Ãîð Íà Âèäîì, Ãîð Íà Êîøåì è Ãîð Íà Áàðîì. Îíè çíàþò î ïîëçóíàõ êóäà áîëüøå, ÷åì ÿ.
    b_logentry(ch2_mceggs, ch2_mceggs_13);
};

instance tpl_1438_templer_zangen(c_info) {
    npc = tpl_1438_templer /*8277*/;
    nr = 0;
    condition = tpl_1438_templer_zangen_condition;
    information = tpl_1438_templer_zangen_info;
    description = "Êàê äîáûâàþòñÿ ÷åëþñòè ïîëçóíîâ?";
};

func int tpl_1438_templer_zangen_condition() {
    if ((npc_knowsinfo(hero, tpl_1438_templer_why /*12639*/) || (corkalom_bringmcqballs == log_running)) && (knows_getmcmandibles == false)) {
        return true;
    };
};

func void tpl_1438_templer_zangen_info() {
    ai_output(other, self, "Tpl_1438_Templer_ZANGEN_Info_15_01"); //Êàê äîáûâàþòñÿ ÷åëþñòè ïîëçóíîâ?
    ai_output(self, other, "Tpl_1438_Templer_ZANGEN_Info_13_02"); //Ýòî íå òàê-òî ïðîñòî. Íî ÿ ìîãó òåáÿ íàó÷èòü.
};

instance tpl_1438_templer_teachzangen(c_info) {
    npc = tpl_1438_templer /*8277*/;
    nr = 0;
    condition = tpl_1438_templer_teachzangen_condition;
    information = tpl_1438_templer_teachzangen_info;
    permanent = true;
    description = "Íàó÷èòüñÿ âûðåçàòü ÷åëþñòè (1 åä. îáó÷åíèÿ)";
};

func int tpl_1438_templer_teachzangen_condition() {
    if (npc_knowsinfo(hero, tpl_1438_templer_zangen /*12648*/) && (knows_getmcmandibles == false)) {
        return true;
    };
};

func void tpl_1438_templer_teachzangen_info() {
    ai_output(other, self, "Tpl_1438_Templer_TEACHZANGEN_Info_15_01"); //Òû ìîæåøü íàó÷èòü ìåíÿ äîáûâàòü ÷åëþñòè ïîëçóíîâ?
    if (hero.lp >= 1) {
        hero.lp = hero.lp - 1;
        ai_output(self, other, "Tpl_1438_Templer_TEACHZANGEN_Info_13_01"); //Ïðåæäå âñåãî íóæíî ñäåëàòü ãëóáîêèé íàäðåç. Íî áóäü îñòîðîæåí, ÷òîáû íå ïîâðåäèòü æåëåçû, - ñëþíà ìîæåò ïîïàñòü òåáå íà ðóêè.
        ai_output(other, self, "Tpl_1438_Templer_TEACHZANGEN_Info_15_02"); //Ýòî äîëæíî áûòü íåïðèÿòíî.
        ai_output(self, other, "Tpl_1438_Templer_TEACHZANGEN_Info_13_03"); //Òàê è åñòü. Òû âñòðå÷àë êîãäà-íèáóäü Êîðãóðà Òðåõïàëîãî, çíàìåíèòîãî îõîòíèêà íà ïîëçóíîâ? Àõ äà, ýòî æå áûëî åùå äî òîãî, êàê òû ïîÿâèëñÿ çäåñü. Ëàäíî, èäåì äàëüøå...
        ai_output(self, other, "Tpl_1438_Templer_TEACHZANGEN_Info_13_04"); //Äåëàåøü íàäðåç âîêðóã ñëþííûõ æåëåç, îñòàâëÿÿ äîâîëüíî áîëüøîé ïðîìåæóòîê, à çàòåì âûíèìàåøü èõ âìåñòå ñ ÷åëþñòÿìè. Åñëè ñäåëàåøü âñå, êàê ÿ ñêàçàë, ïðîáëåì áûòü íå äîëæíî.
        knows_getmcmandibles = true;
        log_createtopic(ge_animaltrophies, log_note);
        b_logentry(ge_animaltrophies, ge_animaltrophies_crawlermandibles);
        printscreen(print_learn_crawlermandibles2, -1, -1, font_old_20, 2);
    }
    else {
        printscreen(print_notenoughskillpoints, -1, -1, font_old_20, 2);
        b_say(self, other, "$NOLEARNNOPOINTS");
    };
};

instance dia_gornadrak_exit(c_info) {
    npc = tpl_1439_gornadrak /*8279*/;
    nr = 999;
    condition = dia_gornadrak_exit_condition;
    information = dia_gornadrak_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_gornadrak_exit_condition() {
    return 1;
};

func void dia_gornadrak_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_gornadrak_greet(c_info) {
    npc = tpl_1439_gornadrak /*8279*/;
    nr = 1;
    condition = dia_gornadrak_greet_condition;
    information = dia_gornadrak_greet_info;
    description = "Ïðèâåò! Êóäà íàïðàâëÿåòåñü?";
};

func int dia_gornadrak_greet_condition() {
    return 1;
};

func void dia_gornadrak_greet_info() {
    ai_output(other, self, "DIA_GorNaDrak_Greet_15_00"); //Ïðèâåò! Êóäà íàïðàâëÿåòåñü?
    ai_output(self, other, "DIA_GorNaDrak_Greet_09_01"); //Ìû äîñòàâëÿåì Êîð Ãàëîìó ñëþíó ïîëçóíîâ, äîáûòóþ íàøèìè áðàòüÿìè â Ñòàðîé Øàõòå.
    ai_output(self, other, "DIA_GorNaDrak_Greet_09_02"); //Ìû ïðèõîäèì çà íåé êàæäûé äåíü.
};

instance dia_gornadrak_wassekret(c_info) {
    npc = tpl_1439_gornadrak /*8279*/;
    nr = 1;
    condition = dia_gornadrak_wassekret_condition;
    information = dia_gornadrak_wassekret_info;
    description = "×òî ýòî çà ñëþíà òàêàÿ?";
};

func int dia_gornadrak_wassekret_condition() {
    if (npc_knowsinfo(hero, dia_gornadrak_greet /*12657*/)) {
        return 1;
    };
};

func void dia_gornadrak_wassekret_info() {
    ai_output(other, self, "DIA_GorNaDrak_WasSekret_15_00"); //×òî ýòî çà ñëþíà òàêàÿ?
    ai_output(self, other, "DIA_GorNaDrak_WasSekret_09_01"); //Åå äîáûâàþò èç ÷åëþñòåé ïîëçóíîâ. Åñëè âñå äåëàòü ïðàâèëüíî, ìîæíî óäàëèòü èõ, íå ïîòåðÿâ ñëþíó.
};

instance dia_gornadrak_teachmandibles(c_info) {
    npc = tpl_1439_gornadrak /*8279*/;
    nr = 1;
    condition = dia_gornadrak_teachmandibles_condition;
    information = dia_gornadrak_teachmandibles_info;
    description = "Òû ìîæåøü íàó÷èòü ìåíÿ äîáûâàòü ñëþíó ïîëçóíîâ?";
};

func int dia_gornadrak_teachmandibles_condition() {
    if (npc_knowsinfo(hero, dia_gornadrak_wassekret /*12660*/) && (knows_getmcmandibles == false)) {
        return 1;
    };
};

func void dia_gornadrak_teachmandibles_info() {
    ai_output(other, self, "DIA_GorNaDrak_TeachMandibles_15_00"); //Òû ìîæåøü íàó÷èòü ìåíÿ äîáûâàòü ñëþíó ïîëçóíîâ?
    ai_output(self, other, "DIA_GorNaDrak_TeachMandibles_09_01"); //Êîíå÷íî. Óáèâ îäíó èç ýòèõ òâàðåé, õâàòàåøüñÿ çà ÷åëþñòè ïîêðåï÷å è âûðûâàåøü èõ. Òàê ìîæíî ïîëó÷èòü ñëþííûå æåëåçû, íå ïîâðåäèâ èõ.
    printscreen(print_learn_crawlermandibles1, -1, -1, font_old_20, 3);
    knows_getmcmandibles = true;
    log_createtopic(ge_animaltrophies, log_note);
    b_logentry(ge_animaltrophies, ge_animaltrophies_crawlermandibles);
};

instance dia_gornadrak_whatfor(c_info) {
    npc = tpl_1439_gornadrak /*8279*/;
    nr = 1;
    condition = dia_gornadrak_whatfor_condition;
    information = dia_gornadrak_whatfor_info;
    description = "Çà÷åì ýòà ñëþíà íóæíà Êîð Ãàëîìó?";
};

func int dia_gornadrak_whatfor_condition() {
    if (npc_knowsinfo(hero, dia_gornadrak_wassekret /*12660*/)) {
        return 1;
    };
};

func void dia_gornadrak_whatfor_info() {
    ai_output(other, self, "DIA_GorNaDrak_WhatFor_15_00"); //Çà÷åì ýòà ñëþíà íóæíà Êîð Ãàëîìó?
    ai_output(self, other, "DIA_GorNaDrak_WhatFor_09_01"); //Íàñêîëüêî ìíå èçâåñòíî, èç íåå îí ãîòîâèò ýëèêñèðû, óâåëè÷èâàþùèå ìàãè÷åñêóþ ñèëó ïîñëóøíèêîâ.
    ai_output(self, other, "DIA_GorNaDrak_WhatFor_09_02"); //Ìû ñåé÷àñ ãîòîâèìñÿ ê Âåëèêîé Öåðåìîíèè, òàê ÷òî ñëþíû âå÷íî íå õâàòàåò.
    ai_output(self, other, "DIA_GorNaDrak_WhatFor_09_03"); //Íî êîãäà ó íàñ áóäåò äîñòàòî÷íî ýëèêñèðà, Êîð Ãàëîì ïîäãîòîâèò âñåõ ïîñëóøíèêîâ ê âåëèêîìó äíþ.
};

instance dia_gornadrak_permanent(c_info) {
    npc = tpl_1439_gornadrak /*8279*/;
    nr = 1;
    condition = dia_gornadrak_permanent_condition;
    information = dia_gornadrak_permanent_info;
    permanent = true;
    description = "Íó êàê, òåïåðü ó âàñ äîñòàòî÷íî ýëèêñèðà?";
};

func int dia_gornadrak_permanent_condition() {
    if (npc_knowsinfo(hero, dia_gornadrak_whatfor /*12666*/) && (kapitel < 3)) {
        return 1;
    };
};

func void dia_gornadrak_permanent_info() {
    ai_output(other, self, "DIA_GorNaDrak_Permanent_15_00"); //Íó êàê, òåïåðü ó âàñ äîñòàòî÷íî ýëèêñèðà äëÿ Âåëèêîé Öåðåìîíèè âûçîâà Ñïÿùåãî?
    ai_output(self, other, "DIA_GorNaDrak_Permanent_09_01"); //Íåò, íóæíî åùå î÷åíü, î÷åíü ìíîãî. Íàøè îõîòíèêè íà ïîëçóíîâ òðóäÿòñÿ äíåì è íî÷üþ.
};

const string tpl_1441_checkpoint = "PSI_TEMPLE_IN";

instance info_tpl_1441_firstwarn(c_info) {
    npc = tpl_1441_templer /*8285*/;
    nr = 1;
    condition = info_tpl_1441_firstwarn_condition;
    information = info_tpl_1441_firstwarn_info;
    permanent = true;
    important = true;
};

func int info_tpl_1441_firstwarn_condition() {
    if (((hero.aivar[27] == aiv_gps_begin) && (self.aivar[29] == false)) && hlp_strcmp(npc_getnearestwp(self), self.wp)) {
        return true;
    };
};

func void info_tpl_1441_firstwarn_info() {
    printglobals(pd_mission);
    ai_output(self, hero, "Info_TPL_1441_FirstWarn_13_01"); //ÑÒÎÉ! Òû ìîæåøü âñòóïèòü íà çåìëè õðàìà òîëüêî ñ ðàçðåøåíèÿ îäíîãî èç Ãóðó.
    hero.aivar[28] = npc_getdisttowp(hero, tpl_1441_checkpoint);
    hero.aivar[27] = aiv_gps_firstwarn;
    if (npc_knowsinfo(hero, pc_psionic_send /*11731*/)) {
        info_clearchoices(info_tpl_1441_firstwarn /*12673*/);
        info_addchoice(info_tpl_1441_firstwarn /*12673*/, "Ìíå äàë ðàçðåøåíèå ñàì Þ`Áåðèîí.", info_tpl_1441_firstwarn_condition_yberion);
        info_addchoice(info_tpl_1441_firstwarn /*12673*/, "Ìåíÿ ïðèñëàë ïîñëóøíèê Ëåñòåð. ", info_tpl_1441_firstwarn_condition_lester);
    }
    else {
        ai_stopprocessinfos(self);
    };
};

func void info_tpl_1441_firstwarn_condition_yberion() {
    ai_output(hero, self, "Info_TPL_1441_FirstWarn_Condition_YBERION_15_01"); //Ìíå äàë ðàçðåøåíèå ñàì Þ`Áåðèîí.
    ai_output(self, hero, "Info_TPL_1441_FirstWarn_Condition_YBERION_13_02"); //Ëæåöàì ó íàñ îáû÷íî âûðûâàþò ÿçûê, òàê ÷òî õîðîøåíüêî ïîäóìàé, ïðåæäå ÷åì ãîâîðèòü.
};

func void info_tpl_1441_firstwarn_condition_lester() {
    var c_npc templer;

    ai_output(hero, self, "Info_TPL_1441_FirstWarn_Condition_LESTER_15_01"); //Ìåíÿ ïðèñëàë ïîñëóøíèê Ëåñòåð. ß õî÷ó ïðåäëîæèòü ñâîè óñëóãè Þ`Áåðèîíó.
    ai_output(self, hero, "Info_TPL_1441_FirstWarn_Condition_LESTER_13_02"); //ß çíàþ Ëåñòåðà. Ìû åìó äîâåðÿåì. Òû ìîæåøü ïðîéòè.
    info_clearchoices(info_tpl_1441_firstwarn /*12673*/);
    templer = hlp_getnpc(tpl_1442_templer);
    hero.aivar[27] = aiv_gps_begin;
    self.aivar[29] = true;
    templer.aivar[29] = true;
};

instance info_tpl_1441_lastwarn(c_info) {
    npc = tpl_1441_templer /*8285*/;
    nr = 1;
    condition = info_tpl_1441_lastwarn_condition;
    information = info_tpl_1441_lastwarn_info;
    permanent = true;
    important = true;
};

func int info_tpl_1441_lastwarn_condition() {
    if (((hero.aivar[27] == aiv_gps_firstwarn) && (npc_getdisttowp(hero, tpl_1441_checkpoint) < (hero.aivar[28] - 100))) && hlp_strcmp(npc_getnearestwp(self), self.wp)) {
        return true;
    };
};

func int info_tpl_1441_lastwarn_info() {
    ai_output(self, hero, "Info_TPL_1441_LastWarn_13_01"); //Åùå îäèí øàã, è òû ïîêîéíèê!
    hero.aivar[28] = npc_getdisttowp(hero, tpl_1441_checkpoint);
    hero.aivar[27] = aiv_gps_lastwarn;
    ai_stopprocessinfos(self);
};

instance info_tpl_1441_attack(c_info) {
    npc = tpl_1441_templer /*8285*/;
    nr = 1;
    condition = info_tpl_1441_attack_condition;
    information = info_tpl_1441_attack_info;
    permanent = true;
    important = true;
};

func int info_tpl_1441_attack_condition() {
    if ((((hero.aivar[27] == aiv_gps_lastwarn) && (self.aivar[29] == false)) && (npc_getdisttowp(hero, tpl_1441_checkpoint) < (hero.aivar[28] - 100))) && hlp_strcmp(npc_getnearestwp(self), self.wp)) {
        return true;
    };
};

func int info_tpl_1441_attack_info() {
    hero.aivar[28] = 0;
    hero.aivar[27] = aiv_gps_punish;
    b_fullstop(self);
    ai_stopprocessinfos(self);
    b_intruderalert(self, other);
    b_setattackreason(self, aiv_ar_intruder);
    npc_settarget(self, hero);
    ai_startstate(self, zs_attack, 1, "");
};

const string tpl_1442_checkpoint = "PSI_TEMPLE_IN";

instance info_tpl_1442_firstwarn(c_info) {
    npc = tpl_1442_templer /*8287*/;
    nr = 1;
    condition = info_tpl_1442_firstwarn_condition;
    information = info_tpl_1442_firstwarn_info;
    permanent = true;
    important = true;
};

func int info_tpl_1442_firstwarn_condition() {
    if (((hero.aivar[27] == aiv_gps_begin) && (self.aivar[29] == false)) && hlp_strcmp(npc_getnearestwp(self), self.wp)) {
        return true;
    };
};

func void info_tpl_1442_firstwarn_info() {
    printglobals(pd_mission);
    ai_output(self, hero, "Info_TPL_1442_FirstWarn_13_01"); //ÑÒÎÉ! Òû ìîæåøü âñòóïèòü íà çåìëè õðàìà òîëüêî ñ ðàçðåøåíèÿ îäíîãî èç Ãóðó.
    hero.aivar[28] = npc_getdisttowp(hero, tpl_1442_checkpoint);
    hero.aivar[27] = aiv_gps_firstwarn;
    if (npc_knowsinfo(hero, pc_psionic_send /*11731*/)) {
        info_clearchoices(info_tpl_1442_firstwarn /*12686*/);
        info_addchoice(info_tpl_1442_firstwarn /*12686*/, "Ìíå äàë ðàçðåøåíèå ñàì Þ`Áåðèîí.", info_tpl_1442_firstwarn_condition_yberion);
        info_addchoice(info_tpl_1442_firstwarn /*12686*/, "Ìåíÿ ïðèñëàë ïîñëóøíèê Ëåñòåð. ", info_tpl_1442_firstwarn_condition_lester);
    }
    else {
        ai_stopprocessinfos(self);
    };
};

func void info_tpl_1442_firstwarn_condition_yberion() {
    ai_output(hero, self, "Info_TPL_1442_FirstWarn_Condition_YBERION_15_01"); //Ìíå äàë ðàçðåøåíèå ñàì Þ`Áåðèîí.
    ai_output(self, hero, "Info_TPL_1442_FirstWarn_Condition_YBERION_13_02"); //Ëæåöàì ó íàñ îáû÷íî âûðûâàþò ÿçûê, òàê ÷òî õîðîøåíüêî ïîäóìàé, ïðåæäå ÷åì ãîâîðèòü.
};

func void info_tpl_1442_firstwarn_condition_lester() {
    var c_npc templer;

    ai_output(hero, self, "Info_TPL_1442_FirstWarn_Condition_LESTER_15_01"); //Ìåíÿ ïðèñëàë ïîñëóøíèê Ëåñòåð. ß õî÷ó ïðåäëîæèòü ñâîè óñëóãè Þ`Áåðèîíó.
    ai_output(self, hero, "Info_TPL_1442_FirstWarn_Condition_LESTER_13_02"); //ß çíàþ Ëåñòåðà. Ìû åìó äîâåðÿåì. Òû ìîæåøü ïðîéòè.
    info_clearchoices(info_tpl_1442_firstwarn /*12686*/);
    templer = hlp_getnpc(tpl_1441_templer);
    hero.aivar[27] = aiv_gps_begin;
    self.aivar[29] = true;
    templer.aivar[29] = true;
};

instance info_tpl_1442_lastwarn(c_info) {
    npc = tpl_1442_templer /*8287*/;
    nr = 1;
    condition = info_tpl_1442_lastwarn_condition;
    information = info_tpl_1442_lastwarn_info;
    permanent = true;
    important = true;
};

func int info_tpl_1442_lastwarn_condition() {
    if (((hero.aivar[27] == aiv_gps_firstwarn) && (npc_getdisttowp(hero, tpl_1442_checkpoint) < (hero.aivar[28] - 100))) && hlp_strcmp(npc_getnearestwp(self), self.wp)) {
        return true;
    };
};

func int info_tpl_1442_lastwarn_info() {
    ai_output(self, hero, "Info_TPL_1442_LastWarn_13_01"); //Åùå îäèí øàã, è òû ïîêîéíèê!
    hero.aivar[28] = npc_getdisttowp(hero, tpl_1442_checkpoint);
    hero.aivar[27] = aiv_gps_lastwarn;
    ai_stopprocessinfos(self);
};

instance info_tpl_1442_attack(c_info) {
    npc = tpl_1442_templer /*8287*/;
    nr = 1;
    condition = info_tpl_1442_attack_condition;
    information = info_tpl_1442_attack_info;
    permanent = true;
    important = true;
};

func int info_tpl_1442_attack_condition() {
    if ((((hero.aivar[27] == aiv_gps_lastwarn) && (self.aivar[29] == false)) && (npc_getdisttowp(hero, tpl_1442_checkpoint) < (hero.aivar[28] - 100))) && hlp_strcmp(npc_getnearestwp(self), self.wp)) {
        return true;
    };
};

func int info_tpl_1442_attack_info() {
    hero.aivar[28] = 0;
    hero.aivar[27] = aiv_gps_punish;
    b_fullstop(self);
    ai_stopprocessinfos(self);
    b_intruderalert(self, other);
    b_setattackreason(self, aiv_ar_intruder);
    npc_settarget(self, hero);
    ai_startstate(self, zs_attack, 1, "");
};

instance info_tpl_1455_gorboba(c_info) {
    npc = tpl_1455_gorboba /*8321*/;
    condition = info_tpl_1455_gorboba_condition;
    information = info_tpl_1455_gorboba_info;
    important = true;
};

func int info_tpl_1455_gorboba_condition() {
    return true;
};

func void info_tpl_1455_gorboba_info() {
    ai_output(self, other, "Info_TPL_1455_GorBoba_08_01"); //Òåáÿ çäåñü íèêòî íå æäåò. Ïðîâàëèâàé!
};

instance info_tpl_1455_gorboba1(c_info) {
    npc = tpl_1455_gorboba /*8321*/;
    nr = 0;
    condition = info_tpl_1455_gorboba1_condition;
    information = info_tpl_1455_gorboba1_info;
    description = "Óæ íå ñîáèðàåøüñÿ ëè ÒÛ îñòàíîâèòü ìåíÿ?";
};

func int info_tpl_1455_gorboba1_condition() {
    if (npc_knowsinfo(hero, info_tpl_1455_gorboba /*12698*/)) {
        return 1;
    };
};

func void info_tpl_1455_gorboba1_info() {
    ai_output(other, self, "Info_TPL_1455_GorBoba1_15_01"); //Óæ íå ñîáèðàåøüñÿ ëè ÒÛ îñòàíîâèòü ìåíÿ?
    ai_output(self, other, "Info_TPL_1455_GorBoba1_08_02"); //ÄÀ! ß îñòàíîâëþ òåáÿ, è òû íå ñìîæåøü ïîìåøàòü ãîñïîäèíó Ãàëîìó ãîòîâèòüñÿ ê ïðîáóæäåíèþ Ñïÿùåãî.
    ai_output(self, other, "Info_TPL_1455_GorBoba1_08_03"); //Íå ïûòàéñÿ óáèòü ìåíÿ. Ñàì Âåðõîâíûé Æðåö ïåðåäàë íàì ÷àñòü ñâîåé ñèëû. Òåïåðü ìû áåññìåðòíû.
    ai_output(other, self, "Info_TPL_1455_GorBoba1_15_04"); //Ýòî ìû ñåé÷àñ è ïðîâåðèì!
    ai_output(self, other, "Info_TPL_1455_GorBoba1_08_05"); //Ãîòîâüñÿ ê âñòðå÷å ñ Ñîçäàòåëåì!
    ai_stopprocessinfos(self);
    log_createtopic(orctemple_note, log_note);
    b_logentry(orctemple_note, orctemple_note_1);
    npc_setattitude(self, att_hostile);
    npc_settempattitude(self, att_hostile);
    npc_settarget(self, hero);
    ai_startstate(self, zs_attack, 1, "");
};

instance dia_gorbobaow_exit(c_info) {
    npc = tpl_1455_gorbobaow /*8324*/;
    nr = 999;
    condition = dia_gorbobaow_exit_condition;
    information = dia_gorbobaow_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_gorbobaow_exit_condition() {
    return 1;
};

func void dia_gorbobaow_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_gorbobaow_perm(c_info) {
    npc = tpl_1455_gorbobaow /*8324*/;
    nr = 1;
    condition = dia_gorbobaow_perm_condition;
    information = dia_gorbobaow_perm_info;
    permanent = true;
    description = "Êàê äåëà?";
};

func int dia_gorbobaow_perm_condition() {
    return 1;
};

func void dia_gorbobaow_perm_info() {
    ai_output(other, self, "DIA_Shrike_Hello_15_00"); //Êàê æèçíü?
    ai_output(self, other, "Info_TPL_1455_GorBoba_08_01"); //Òåáÿ çäåñü íèêòî íå æäåò. Ïðîâàëèâàé!
    ai_stopprocessinfos(self);
};

instance dia_herek_exit(c_info) {
    npc = vlk_511_herek /*8384*/;
    nr = 999;
    condition = dia_herek_exit_condition;
    information = dia_herek_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_herek_exit_condition() {
    return 1;
};

func void dia_herek_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_herek_bully(c_info) {
    npc = vlk_511_herek /*8384*/;
    nr = 2;
    condition = dia_herek_bully_condition;
    information = dia_herek_bully_info;
    important = true;
};

func int dia_herek_bully_condition() {
    if ((npc_getdisttonpc(self, other) <= zivilanquatschdist) && (herek_protectionbully == true)) {
        return 1;
    };
};

func void dia_herek_bully_info() {
    ai_output(self, other, "DIA_Herek_Bully_01_00"); //Ïîäîæäè-êà! ß ñëûøàë, òû ðàçãîâàðèâàë ñ Áëàäâèíîì?
    ai_output(other, self, "DIA_Herek_Bully_15_01"); //Íó è ÷òî ñ òîãî?
    ai_output(self, other, "DIA_Herek_Bully_01_02"); //Òû äîëæíî áûòü êðóò, åñëè îòêàçàëñÿ ïëàòèòü åìó äåíüãè çà çàùèòó.
    ai_output(self, other, "DIA_Herek_Bully_01_03"); //È ýòî çíà÷èò, ÷òî íàì ïðèäåòñÿ âíåñòè çà òåáÿ òâîþ äîëþ.
    ai_output(self, other, "DIA_Herek_Bully_01_04"); //ß ïîñòàðàþñü, ÷òîáû òû çàïîìíèë ñëåäóþùèé ðàçãîâîð ñ íèì.
    npc_setpermattitude(self, att_angry);
    ai_stopprocessinfos(self);
    npc_settarget(self, other);
    ai_startstate(self, zs_attack, 1, "");
};

instance dia_herek_motz(c_info) {
    npc = vlk_511_herek /*8384*/;
    nr = 2;
    condition = dia_herek_motz_condition;
    information = dia_herek_motz_info;
    description = "Êàê äåëà?";
};

func int dia_herek_motz_condition() {
    if (herek_protectionbully == false) {
        return 1;
    };
};

func void dia_herek_motz_info() {
    ai_output(other, self, "DIA_Herek_Motz_15_00"); //Êàê äåëà?
    ai_output(self, other, "DIA_Herek_Motz_01_01"); //Â ýòîì Ëàãåðå åñòü ìåñòî òîëüêî äëÿ îäíîãî èç íàñ!
    ai_output(other, self, "DIA_Herek_Motz_15_02"); //Ïðîøó ïðîùåíèÿ?
    ai_output(self, other, "DIA_Herek_Motz_01_03"); //Åñëè áû ýòî çàâèñåëî îò ìåíÿ, òû áû çäåñü äîëãî íå ïðîäåðæàëñÿ!
    ai_output(self, other, "DIA_Herek_Motz_01_04"); //Çíàåøü, ïî÷åìó ÿ çäåñü? Çà îäíó íî÷ü ÿ óáèë äâåíàäöàòü ÷åëîâåê, âîò òàê... Õå-õå-õå!
    npc_setpermattitude(self, att_angry);
    ai_stopprocessinfos(self);
};

instance dia_herek_anlegen(c_info) {
    npc = vlk_511_herek /*8384*/;
    nr = 2;
    condition = dia_herek_anlegen_condition;
    information = dia_herek_anlegen_info;
    permanent = true;
    description = "Ïîõîæå, òû ñ÷èòàåøü ñåáÿ êðóòûì ïàðíåì.";
};

func int dia_herek_anlegen_condition() {
    if (npc_knowsinfo(hero, dia_herek_motz /*12716*/) || npc_knowsinfo(hero, dia_herek_bully /*12713*/)) {
        return 1;
    };
};

func void dia_herek_anlegen_info() {
    ai_output(other, self, "DIA_Herek_Anlegen_15_00"); //Ïîõîæå, òû ñ÷èòàåøü ñåáÿ êðóòûì ïàðíåì. Ïî÷åìó áû òåáå íå îïðîáîâàòü ñâîè... Õ-ìì... Íàâûêè íà ìíå?
    ai_output(self, other, "DIA_Herek_Anlegen_01_01"); //Æèòü íàäîåëî? Ëàäíî, åñëè òû ýòîãî õî÷åøü!
    ai_stopprocessinfos(self);
    npc_settarget(self, other);
    ai_startstate(self, zs_attack, 1, "");
};

instance dia_vlk_520_exit(c_info) {
    npc = vlk_520_buddler /*8402*/;
    nr = 999;
    condition = dia_vlk_520_exit_condition;
    information = dia_vlk_520_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_vlk_520_exit_condition() {
    return 1;
};

func void dia_vlk_520_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_vlk_520_leaveme(c_info) {
    npc = vlk_520_buddler /*8402*/;
    nr = 2;
    condition = dia_vlk_520_leaveme_condition;
    information = dia_vlk_520_leaveme_info;
    permanent = true;
    description = "×åì òû çàíèìàåøüñÿ?";
};

func int dia_vlk_520_leaveme_condition() {
    return 1;
};

func void dia_vlk_520_leaveme_info() {
    ai_output(other, self, "DIA_Vlk_520_LeaveMe_15_00"); //×åì òû çàíèìàåøüñÿ?
    ai_output(self, other, "DIA_Vlk_520_LeaveMe_01_01"); //ß ïðîñòî õî÷ó, ÷òîáû ìåíÿ îñòàâèëè â ïîêîå, òàê ÷òî ïðîâàëèâàé!
    ai_stopprocessinfos(self);
};

instance dia_dusty_exit(c_info) {
    npc = vlk_524_dusty /*8410*/;
    nr = 999;
    condition = dia_dusty_exit_condition;
    information = dia_dusty_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_dusty_exit_condition() {
    return 1;
};

func void dia_dusty_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_dusty_hello(c_info) {
    npc = vlk_524_dusty /*8410*/;
    nr = 1;
    condition = dia_dusty_hello_condition;
    information = dia_dusty_hello_info;
    description = "Ïðèâåò! ß çäåñü íîâåíüêèé. Êàê èäóò äåëà?";
};

func int dia_dusty_hello_condition() {
    return 1;
};

func void dia_dusty_hello_info() {
    ai_output(other, self, "DIA_Dusty_Hello_15_00"); //Ïðèâåò! ß çäåñü íîâåíüêèé. Êàê èäóò äåëà?
    ai_output(self, other, "DIA_Dusty_Hello_03_01"); //Ïðîâàëèâàé! ß äâå íåäåëè ãîðáàòèëñÿ â øàõòå - è ÷åãî ðàäè?
    ai_output(self, other, "DIA_Dusty_Hello_03_02"); //Íåñêîëüêî æàëêèõ êóñêîâ ðóäû - âîò âñå, ÷òî ÿ ïîëó÷èë. Áîëüøóþ ÷àñòü ìíå ïðèäåòñÿ ïîòðàòèòü íà åäó!
    ai_output(self, other, "DIA_Dusty_Hello_03_03"); //Òàì, âíèçó, ÿ ðàçãîâàðèâàë ñ Èäîëîì Ïàðâåçîì. Îí ðàññêàçàë ìíå ìíîãî èíòåðåñíîãî ïðî Ëàãåðü Ñåêòàíòîâ.
    ai_output(self, other, "DIA_Dusty_Hello_03_04"); //Íàâåðíîå, íóæíî îòïðàâèòüñÿ òóäà, âìåñòî òîãî ÷òîáû ïàõàòü íà Ãîìåçà.
};

instance dia_dusty_whynotleave(c_info) {
    npc = vlk_524_dusty /*8410*/;
    nr = 1;
    condition = dia_dusty_whynotleave_condition;
    information = dia_dusty_whynotleave_info;
    description = "Òåáå çäåñü íå íðàâèòñÿ? Òîãäà ïî÷åìó òû íå óõîäèøü?";
};

func int dia_dusty_whynotleave_condition() {
    if (npc_knowsinfo(hero, dia_dusty_hello /*12731*/) && (!npc_knowsinfo(hero, dia_dusty_metmelvin /*12737*/))) {
        return 1;
    };
};

func void dia_dusty_whynotleave_info() {
    ai_output(other, self, "DIA_Dusty_WhyNotLeave_15_00"); //Òåáå çäåñü íå íðàâèòñÿ? Òîãäà ïî÷åìó òû íå óõîäèøü?
    ai_output(self, other, "DIA_Dusty_WhyNotLeave_03_01"); //Ïîòîìó ÷òî ÿ íå çíàþ, ÷òî ìåíÿ òàì æäåò. Ó ìåíÿ áûë çäåñü ïðèÿòåëü - Ìåëâèí. Îí óøåë â Ëàãåðü Ñåêòàíòîâ åùå íåäåëþ íàçàä.
    ai_output(self, other, "DIA_Dusty_WhyNotLeave_03_02"); //È ñ òåõ ïîð î íåì íè ñëóõó íè äóõó. Ïîêà ÿ íå ïîëó÷ó îò íåãî âåñòî÷êè, ÿ ñ ìåñòà íå ñäâèíóñü!
    log_createtopic(ch1_recruitdusty, log_mission);
    log_settopicstatus(ch1_recruitdusty, log_running);
    b_logentry(ch1_recruitdusty, ch1_recruitdusty_4);
};

instance dia_dusty_metmelvin(c_info) {
    npc = vlk_524_dusty /*8410*/;
    nr = 1;
    condition = dia_dusty_metmelvin_condition;
    information = dia_dusty_metmelvin_info;
    description = "ß áûë â Ëàãåðå Ñåêòàíòîâ è âèäåë òàì Ìåëâèíà.";
};

func int dia_dusty_metmelvin_condition() {
    if (npc_knowsinfo(hero, dia_melvin_hello /*13026*/)) {
        return 1;
    };
};

func void dia_dusty_metmelvin_info() {
    ai_output(other, self, "DIA_Dusty_MetMelvin_15_00"); //ß áûë â Ëàãåðå Ñåêòàíòîâ è âèäåë òàì Ìåëâèíà.
    ai_output(self, other, "DIA_Dusty_MetMelvin_03_01"); //Äà? È ÷òî îí ãîâîðèò?
    ai_output(other, self, "DIA_Dusty_MetMelvin_15_02"); //Êàæåòñÿ, ðàáîòàòü òàì åìó íðàâèòñÿ íàìíîãî áîëüøå, ÷åì ïîëó÷àòü òû÷êè îò ñòðàæíèêîâ çäåñü.
    ai_output(self, other, "DIA_Dusty_MetMelvin_03_03"); //Ýé, ïàðåíü! Îí ÷òî, äóìàåò, îí îäèí òàêîé óìíûé? ß òîæå òóäà ïîéäó. Íî ìíå æå íå âûáðàòüñÿ èç Ëàãåðÿ...
    ai_output(other, self, "DIA_Dusty_MetMelvin_15_04"); //Ïðàâäà? Ïî÷åìó?
    ai_output(self, other, "DIA_Dusty_MetMelvin_03_05"); //Ïîõîæå, ÿ ñëèøêîì ìíîãî áîëòàë. Ñòðàæíèêè çíàþò, ÷òî ÿ õî÷ó óäðàòü îòñþäà.
    ai_output(self, other, "DIA_Dusty_MetMelvin_03_06"); //Äëÿ òîãî ÷òîáû ïîäêóïèòü èõ, ìíå íóæíî êàê ìèíèìóì 100 êóñêîâ ðóäû.
};

instance dia_dusty_offer100ore(c_info) {
    npc = vlk_524_dusty /*8410*/;
    nr = 1;
    condition = dia_dusty_offer100ore_condition;
    information = dia_dusty_offer100ore_info;
    description = "À ÷òî åñëè ÿ äàì òåáå ýòè 100 êóñêîâ?";
};

func int dia_dusty_offer100ore_condition() {
    if (npc_knowsinfo(hero, dia_dusty_metmelvin /*12737*/) && (baaltondral_getnewguy == log_running)) {
        return 1;
    };
};

func void dia_dusty_offer100ore_info() {
    ai_output(other, self, "DIA_Dusty_Offer100Ore_15_00"); //À ÷òî åñëè ÿ äàì òåáå ýòè 100 êóñêîâ?
    ai_output(self, other, "DIA_Dusty_Offer100Ore_03_01"); //Ïðàâäà? Íî ïî÷åìó?
    ai_output(other, self, "DIA_Dusty_Offer100Ore_15_02"); //Íó, ñêàæåì, òû íå åäèíñòâåííûé èç òåõ, êòî õî÷åò ïîáðîäèòü ïî Ëàãåðþ Ñåêòàíòîâ.
    ai_output(self, other, "DIA_Dusty_Offer100Ore_03_03"); //Òî åñòü òû õî÷åøü ïîéòè ñî ìíîé, äà?
};

instance dia_dusty_iwouldgo(c_info) {
    npc = vlk_524_dusty /*8410*/;
    nr = 1;
    condition = dia_dusty_iwouldgo_condition;
    information = dia_dusty_iwouldgo_info;
    description = "ß ÏÎÉÄÓ ñ òîáîé â Ëàãåðü Ñåêòàíòîâ.";
};

func int dia_dusty_iwouldgo_condition() {
    if (npc_knowsinfo(hero, dia_dusty_offer100ore /*12740*/)) {
        return 1;
    };
};

func void dia_dusty_iwouldgo_info() {
    ai_output(other, self, "DIA_Dusty_IWouldGo_15_00"); //ß ÏÎÉÄÓ ñ òîáîé â Ëàãåðü Ñåêòàíòîâ.
    ai_output(self, other, "DIA_Dusty_IWouldGo_03_01"); //Íó ýòî æå çäîðîâî, äðóæèùå! ß ãîòîâ. Ìû ìîæåì îòïðàâèòüñÿ, êîãäà çàõî÷åøü.
    ai_output(self, other, "DIA_Dusty_IWouldGo_03_02"); //Íî íå çàáóäü - íàì íóæíî 100 êóñêîâ ðóäû äëÿ ñòðàæíèêîâ.
    b_logentry(ch1_recruitdusty, ch1_recruitdusty_5);
    b_givexp(xp_dustyjoined);
};

var int dusty_letsgo;

instance dia_dusty_letsgo(c_info) {
    npc = vlk_524_dusty /*8410*/;
    nr = 1;
    condition = dia_dusty_letsgo_condition;
    information = dia_dusty_letsgo_info;
    permanent = true;
    description = "ß ãîòîâ. Ïîøëè!";
};

func int dia_dusty_letsgo_condition() {
    if (((npc_knowsinfo(hero, dia_dusty_iwouldgo /*12743*/) && (npc_getdisttowp(hero, "OCR_MAINGATE_INSIDE") > 1500)) && (npc_getdisttowp(hero, "OCR_NORTHGATE_RAMP_ATOP") > 1500)) && (baaltondral_getnewguy == log_running)) {
        return 1;
    };
};

func void dia_dusty_letsgo_info() {
    ai_output(other, self, "DIA_Dusty_LetsGo_15_00"); //ß ãîòîâ. Ïîøëè!
    ai_output(self, other, "DIA_Dusty_LetsGo_03_01"); //Ëàäíî, ïîéäåì ê þæíûì âîðîòàì. Ñòðàæíèêè âîçëå ñåâåðíûõ ñîâñåì íå áåðóò âçÿòîê.
    ai_output(self, other, "DIA_Dusty_LetsGo_03_02"); //È ðóäîé, íàâåðíîå, òîæå ñòîèò çàíèìàòüñÿ òåáå - ÿ â òàêèõ äåëàõ íå ìàñòàê.
    ai_output(other, self, "DIA_Dusty_LetsGo_15_03"); //Ëàäíî, èäåì.
    if (!dusty_letsgo) {
        b_logentry(ch1_recruitdusty, ch1_recruitdusty_6);
        dusty_letsgo = true;
    };
    self.flags = npc_flag_immortal;
    self.aivar[36] = true;
    npc_exchangeroutine(self, "FOLLOW");
    ai_stopprocessinfos(self);
};

instance dia_guy_exit(c_info) {
    npc = vlk_530_guy /*8424*/;
    nr = 999;
    condition = dia_guy_exit_condition;
    information = dia_guy_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_guy_exit_condition() {
    return 1;
};

func void dia_guy_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_guy_hello(c_info) {
    npc = vlk_530_guy /*8424*/;
    nr = 2;
    condition = dia_guy_hello_condition;
    information = dia_guy_hello_info;
    description = "Ïðèâåò!";
};

func int dia_guy_hello_condition() {
    if (kapitel <= 1) {
        return 1;
    };
};

func void dia_guy_hello_info() {
    ai_output(other, self, "DIA_Guy_Hello_15_00"); //Ïðèâåò!
    ai_output(self, other, "DIA_Guy_Hello_03_01"); //Ì-ì? ß òåáÿ ðàíüøå íå âèäåë. Òû íîâåíüêèé?
    ai_output(other, self, "DIA_Guy_Hello_15_02"); //Òîëüêî ÷òî ïðèáûë...
    ai_output(self, other, "DIA_Guy_Hello_03_03"); //Òû óæå ðåøèë, â êàêîì òû áóäåøü Ëàãåðå?
    ai_output(other, self, "DIA_Guy_Hello_15_04"); //Íåò. À ÷òî áû òû ïîñîâåòîâàë?
    ai_output(self, other, "DIA_Guy_Hello_03_05"); //Íó, ÿ äóìàþ, ó êàæäîãî Ëàãåðÿ åñòü ñâîè ïëþñû è ìèíóñû.
    ai_output(self, other, "DIA_Guy_Hello_03_06"); //Äî òåõ ïîð, ïîêà íå ïðèìåøü ðåøåíèå, òû ìîæåøü æèòü çäåñü - ýòîò äîì òîëüêî ÷òî îñâîáîäèëñÿ.
};

instance dia_guy_adoc(c_info) {
    npc = vlk_530_guy /*8424*/;
    nr = 2;
    condition = dia_guy_adoc_condition;
    information = dia_guy_adoc_info;
    permanent = true;
    description = "×òî õîðîøåãî â Ñòàðîì Ëàãåðå?";
};

func int dia_guy_adoc_condition() {
    if (npc_knowsinfo(hero, dia_guy_hello /*12753*/)) {
        return 1;
    };
};

func void dia_guy_adoc_info() {
    ai_output(other, self, "DIA_Guy_AdOC_15_00"); //×òî õîðîøåãî â Ñòàðîì Ëàãåðå?
    ai_output(self, other, "DIA_Guy_AdOC_03_01"); //Åñëè òû ïëàòèøü ñòðàæíèêàì çà çàùèòó, æèçíü ó òåáÿ áóäåò äîâîëüíî ñïîêîéíàÿ: îíè âûòàñêèâàþò ñâîèõ ïîäîïå÷íûõ èç âñåõ íåïðèÿòíîñòåé... Íó, ïî÷òè èç âñåõ.
    ai_output(self, other, "DIA_Guy_AdOC_03_02"); //Ïîìèìî ýòîãî, çäåñü òû ìîæåøü çàäåøåâî ïîêóïàòü òîâàðû èç âíåøíåãî ìèðà. Â äðóãèõ Ëàãåðÿõ îíè òåáå áóäóò ÿâíî íå ïî êàðìàíó.
    info_clearchoices(dia_guy_adoc /*12756*/);
    info_addchoice(dia_guy_adoc /*12756*/, "Ëàäíî, õâàòèò î Ñòàðîì Ëàãåðå.", dia_guy_adoc_back);
    info_addchoice(dia_guy_adoc /*12756*/, "×òî çäåñü öåíèòñÿ áîëüøå âñåãî?", dia_guy_adoc_warez);
    info_addchoice(dia_guy_adoc /*12756*/, "À ÷òî áóäåò, åñëè äâîå çàòåþò äðàêó ìåæäó ñîáîé?", dia_guy_adoc_protection);
};

func void dia_guy_adoc_back() {
    ai_output(other, self, "DIA_Guy_AdOC_BACK_15_00"); //Ëàäíî, õâàòèò î Ñòàðîì Ëàãåðå.
    ai_output(self, other, "DIA_Guy_AdOC_BACK_03_01"); //Ëè÷íî ìíå çäåñü íðàâèòñÿ.
    info_clearchoices(dia_guy_adoc /*12756*/);
};

func void dia_guy_adoc_warez() {
    ai_output(other, self, "DIA_Guy_AdOC_Warez_15_00"); //×òî çäåñü öåíèòñÿ áîëüøå âñåãî?
    ai_output(self, other, "DIA_Guy_AdOC_Warez_03_01"); //Âñå, ÷òî ïðèõîäèò èç âíåøíåãî ìèðà. Õëåá, ñûð, áåêîí... Áîëüøå âñåãî öåíèòñÿ âèíî è ïèâî - íå äðÿííîé ðèñîâûé øíàïñ èç Íîâîãî Ëàãåðÿ, à íàñòîÿùàÿ äîáðàÿ âûïèâêà.
    ai_output(self, other, "DIA_Guy_AdOC_Warez_03_02"); //Çäåñü õîðîøèå öåíû íà îðóæèå, à äîñïåõè Î×ÅÍÜ äîðîãèå.
    ai_output(self, other, "DIA_Guy_AdOC_Warez_03_03"); //Ïîñëå áóíòà ñòðàæíèêè çàáðàëè ñåáå äîñïåõè ïðåæíèõ íàäñìîòðùèêîâ.
    ai_output(self, other, "DIA_Guy_AdOC_Warez_03_04"); //Ñòðàæíèêîâ ëåãêî óçíàòü - âåäü äîñïåõè ïðîäàþòñÿ òîëüêî èì. ×óæàê íèêîãäà íå ñìîæåò êóïèòü ñåáå õîðîøóþ áðîíþ.
};

func void dia_guy_adoc_protection() {
    ai_output(other, self, "DIA_Guy_AdOC_Protection_15_00"); //À ÷òî áóäåò, åñëè äâîå èç òåõ, êòî ïëàòèò äåíüãè çà çàùèòó, çàòåþò äðàêó ìåæäó ñîáîé?
    ai_output(self, other, "DIA_Guy_AdOC_Protection_03_01"); //Òîãäà ñòðàæíèêè ïîäîæäóò, ïîêà îäèí íå ïðèêîí÷èò äðóãîãî, à çàòåì óáüþò ïîáåäèòåëÿ. Çäåñü ñ ýòèì ïðîñòî.
};

instance dia_guy_adnc(c_info) {
    npc = vlk_530_guy /*8424*/;
    nr = 3;
    condition = dia_guy_adnc_condition;
    information = dia_guy_adnc_info;
    description = "×òî õîðîøåãî â Íîâîì Ëàãåðå?";
};

func int dia_guy_adnc_condition() {
    if (npc_knowsinfo(hero, dia_guy_hello /*12753*/)) {
        return 1;
    };
};

func void dia_guy_adnc_info() {
    ai_output(other, self, "DIA_Guy_AdNC_15_00"); //×òî õîðîøåãî â Íîâîì Ëàãåðå?
    ai_output(self, other, "DIA_Guy_AdNC_03_01"); //Åñëè òåáå ïî äóøå ìåñòî, ãäå ÷åëîâåêó ìîãóò ïåðåðåçàòü ãëîòêó èç-çà êóñêà õëåáà, îòïðàâëÿéñÿ òóäà.
    ai_output(self, other, "DIA_Guy_AdNC_03_02"); //Íåò, òàì íå òàê óæ ïëîõî. Ïðîñòî íå òàê, êàê çäåñü.
    ai_output(self, other, "DIA_Guy_AdNC_03_03"); //Çäåñü Ãîìåç ñëåäèò çà òåì, ÷òîáû âñå áûëî âðîäå êàê ìèðíî. Â Íîâîì Ëàãåðå íåò íèêàêèõ çàêîíîâ.
    ai_output(self, other, "DIA_Guy_AdNC_03_04"); //Òàì ñëóøàþòñÿ òîëüêî ìàãîâ Âîäû - íî îíè îáû÷íî ñëèøêîì çàíÿòû: äíè è íî÷è íàïðîëåò èçó÷àþò Áàðüåð.
};

instance dia_guy_adst(c_info) {
    npc = vlk_530_guy /*8424*/;
    nr = 4;
    condition = dia_guy_adst_condition;
    information = dia_guy_adst_info;
    description = "×òî õîðîøåãî â Ëàãåðå Ñåêòàíòîâ?";
};

func int dia_guy_adst_condition() {
    if (npc_knowsinfo(hero, dia_guy_hello /*12753*/)) {
        return 1;
    };
};

func void dia_guy_adst_info() {
    ai_output(other, self, "DIA_Guy_AdST_15_00"); //×òî õîðîøåãî â Ëàãåðå Ñåêòàíòîâ?
    ai_output(self, other, "DIA_Guy_AdST_03_01"); //Íó, îá ýòîì òåáå ëó÷øå ðàññêàæåò êòî-íèáóäü èç åãî îáèòàòåëåé.
    ai_output(self, other, "DIA_Guy_AdST_03_02"); //Â íàøåì Ëàãåðå âñåãäà êðóòÿòñÿ èõ ïîñëóøíèêè, è îíè ñ ðàäîñòüþ ðàññêàæóò òåáå î ñâîåé ñåêòå.
    ai_output(self, other, "DIA_Guy_AdST_03_03"); //Ñàì ÿ òàì íèêîãäà íå áûâàë, íî ñóäÿ ïî òîìó, ÷òî ãîâîðÿò, îíè äîëæíû áûòü î÷åíü ùåäðû.
    ai_output(self, other, "DIA_Guy_AdST_03_04"); //Íè îäíîìó èç Ëàãåðåé ýòîé êîëîíèè òàê íå íóæíû ëþäè, êàê Ëàãåðþ Ñåêòàíòîâ.
};

instance dia_guy_myownhut(c_info) {
    npc = vlk_530_guy /*8424*/;
    nr = 10;
    condition = dia_guy_myownhut_condition;
    information = dia_guy_myownhut_info;
    permanent = true;
    description = "Â êàêîì èç äîìîâ ÿ ìîãó îñòàíîâèòüñÿ?";
};

func int dia_guy_myownhut_condition() {
    if (npc_knowsinfo(hero, dia_guy_hello /*12753*/)) {
        return 1;
    };
};

func void dia_guy_myownhut_info() {
    ai_output(other, self, "DIA_Guy_MyOwnHut_15_00"); //Â êàêîì èç äîìîâ ÿ ìîãó îñòàíîâèòüñÿ?
    ai_pointat(self, "OCR_HUT_26");
    ai_output(self, other, "DIA_Guy_MyOwnHut_03_01"); //Âîí òà õèæèíà ñ íåáîëüøèì íàâåñîì ñåé÷àñ ïóñòóåò.
    ai_stoppointat(self);
};

instance dia_vlk_534_exit(c_info) {
    npc = vlk_534_buddler /*8432*/;
    nr = 999;
    condition = dia_vlk_534_exit_condition;
    information = dia_vlk_534_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_vlk_534_exit_condition() {
    return 1;
};

func void dia_vlk_534_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_vlk_534_leaveme(c_info) {
    npc = vlk_534_buddler /*8432*/;
    nr = 1;
    condition = dia_vlk_534_leaveme_condition;
    information = dia_vlk_534_leaveme_info;
    permanent = true;
    description = "Ïî÷åìó òû çäåñü, à íå â Ëàãåðå?";
};

func int dia_vlk_534_leaveme_condition() {
    return 1;
};

func void dia_vlk_534_leaveme_info() {
    ai_output(other, self, "DIA_Vlk_534_LeaveMe_15_00"); //Ïî÷åìó òû çäåñü, à íå â Ëàãåðå?
    ai_output(self, other, "DIA_Vlk_534_LeaveMe_02_01"); //ß æäó îäíîãî äðóãà èç øàõòû. Îí çàäîëæàë ìíå ðóäó.
    ai_output(self, other, "DIA_Vlk_534_LeaveMe_02_02"); //À áåç ðóäû ìíå íåëüçÿ ïîÿâëÿòüñÿ â Ëàãåðå, ïîòîìó ÷òî ÿ íå ñìîãó çàïëàòèòü ñòðàæíèêàì çà çàùèòó, è òîãäà ó ìåíÿ íà÷íóòñÿ áîëüøèå íåïðèÿòíîñòè.
    ai_stopprocessinfos(self);
};

instance dia_kyle_exit(c_info) {
    npc = vlk_536_kyle /*8436*/;
    nr = 999;
    condition = dia_kyle_exit_condition;
    information = dia_kyle_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_kyle_exit_condition() {
    return 1;
};

func void dia_kyle_exit_info() {
    npc_setrefusetalk(self, 120);
    ai_stopprocessinfos(self);
};

instance dia_kyle_hutrage(c_info) {
    npc = vlk_536_kyle /*8436*/;
    nr = 2;
    condition = dia_kyle_hutrage_condition;
    information = dia_kyle_hutrage_info;
    permanent = true;
    important = true;
};

func int dia_kyle_hutrage_condition() {
    if ((npc_refusetalk(self) == false) && (npc_getdisttonpc(self, other) <= zivilanquatschdist)) {
        return 1;
    };
};

func void dia_kyle_hutrage_info() {
    ai_output(self, other, "DIA_Kyle_HutRage_10_00"); //Ñêîëüêî ðàç ÿ ãîâîðèë âàì, óáëþäêàì, íå ïðîõîäèòü ÷åðåç ìîé äîì?!
};

instance dia_kyle_problem(c_info) {
    npc = vlk_536_kyle /*8436*/;
    nr = 2;
    condition = dia_kyle_problem_condition;
    information = dia_kyle_problem_info;
    permanent = true;
    description = "Ýé, â ÷åì ïðîáëåìà?";
};

func int dia_kyle_problem_condition() {
    return 1;
};

func void dia_kyle_problem_info() {
    ai_output(other, self, "DIA_Kyle_Problem_15_00"); //Ýé, â ÷åì ïðîáëåìà?
    ai_output(self, other, "DIA_Kyle_Problem_10_01"); //Îñòàâü ìåíÿ â ïîêîå, ïàðåíü! Äëÿ ÌÅÍß âû âñå - ïðîáëåìà.
    ai_output(self, other, "DIA_Kyle_Problem_10_02"); //Êàê îíè âñå ïÿëèëèñü, êîãäà ÿ ñòðîèë ñâîé äîì!
    ai_output(self, other, "DIA_Kyle_Problem_10_03"); //`Íå ñòðîé äîì òàê áëèçêî ê êîòëîâàíó`, - ãîâîðèëè îíè.
    ai_output(self, other, "DIA_Kyle_Problem_10_04"); //Íî íè îäèí èç ýòèõ óáëþäêîâ íå ñêàçàë ìíå, ÷òî áóäåò, åñëè ÿ âñå-òàêè ïîñòðîþ åãî çäåñü.
    ai_output(self, other, "DIA_Kyle_Problem_10_05"); //Êîãäà ÿ âåðíóëñÿ èç øàõòû íåñêîëüêî äíåé íàçàä, ó ìåíÿ ïîÿâèëàñü âòîðàÿ äâåðü.
    ai_output(self, other, "DIA_Kyle_Problem_10_06"); //Ýòè ñâèíüè! ß èõ íåíàâèæó! Òû äàæå ïðåäñòàâèòü ñåáå íå ìîæåøü, êàê ÿ èõ íåíàâèæó!
    ai_output(self, other, "DIA_Kyle_Problem_10_07"); //Òåïåðü âñå ïðîõîäÿò ÷åðåç ìîé äîì. Êàæäûé èäèîò.
};

instance dia_huno_exit(c_info) {
    npc = vlk_538_huno /*8438*/;
    nr = 999;
    condition = dia_huno_exit_condition;
    information = dia_huno_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_huno_exit_condition() {
    return 1;
};

func void dia_huno_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_huno_youknowyourjob(c_info) {
    npc = vlk_538_huno /*8438*/;
    nr = 2;
    condition = dia_huno_youknowyourjob_condition;
    information = dia_huno_youknowyourjob_info;
    description = "Ïîõîæå, òû õîðîøî çíàåøü ñâîå äåëî.";
};

func int dia_huno_youknowyourjob_condition() {
    return true;
};

func void dia_huno_youknowyourjob_info() {
    ai_output(other, self, "DIA_Huno_YouKnowYourJob_15_00"); //Ïîõîæå, òû õîðîøî çíàåøü ñâîå äåëî.
    ai_output(self, other, "DIA_Huno_YouKnowYourJob_09_01"); //Ïîêà åùå íèêòî íå æàëîâàëñÿ.
    ai_output(self, other, "DIA_Huno_YouKnowYourJob_09_02"); //Äà è ÷òî òîëêó æàëîâàòüñÿ? Çäåñü êàæäîìó èäèîòó íóæåí ñâîé ìå÷, à õîðîøèå ìå÷è äåëàþ òîëüêî ÿ.
};

instance dia_huno_howlong(c_info) {
    npc = vlk_538_huno /*8438*/;
    nr = 2;
    condition = dia_huno_howlong_condition;
    information = dia_huno_howlong_info;
    description = "Ñêîëüêî âðåìåíè óõîäèò íà èçãîòîâëåíèå îäíîãî ìå÷à?";
};

func int dia_huno_howlong_condition() {
    if (npc_knowsinfo(hero, dia_huno_youknowyourjob /*12789*/)) {
        return true;
    };
};

func void dia_huno_howlong_info() {
    ai_output(other, self, "DIA_Huno_HowLong_15_00"); //Ñêîëüêî âðåìåíè óõîäèò íà èçãîòîâëåíèå îäíîãî ìå÷à?
    ai_output(self, other, "DIA_Huno_HowLong_09_01"); //Ñìîòðÿ êàêîé íóæåí ìå÷. Îáû÷íûå ÿ äåëàþ ïðàêòè÷åñêè ìîìåíòàëüíî.
    ai_output(self, other, "DIA_Huno_HowLong_09_02"); //Íó, ðàçóìååòñÿ, åñëè öåíà ìåíÿ óñòðàèâàåò.
    ai_output(self, other, "DIA_Huno_HowLong_09_03"); //Íó à óðîäàì, âðîäå Óèñòëåðà, ïðèõîäèòñÿ æäàòü äîëüøå, ÷åì âñåì îñòàëüíûì.
    ai_output(other, self, "DIA_Huno_HowLong_15_04"); //Ïî÷åìó? Îí ìàëî ïëàòèò?
    ai_output(self, other, "DIA_Huno_HowLong_09_05"); //Êàê ðàç íàîáîðîò. Çà ïîñëåäíèé ìå÷ îí çàïëàòèë ìíå 150 êóñêîâ ðóäû.
    ai_output(self, other, "DIA_Huno_HowLong_09_06"); //Ïàðíþ íðàâÿòñÿ óêðàøåíèÿ è ïðî÷üè áàáüè øòó÷êè, à ýòî ñòîèò íåäåøåâî.
    ai_output(self, other, "DIA_Huno_HowLong_09_07"); //Ýé, äà òû ìåíÿ ñîâñåì íå ñëóøàåøü!
};

instance dia_huno_howsyourbusiness(c_info) {
    npc = vlk_538_huno /*8438*/;
    nr = 2;
    condition = dia_huno_howsyourbusiness_condition;
    information = dia_huno_howsyourbusiness_info;
    permanent = true;
    description = "Êàê äåëà, êóçíåö?";
};

func int dia_huno_howsyourbusiness_condition() {
    if (npc_knowsinfo(hero, dia_huno_youknowyourjob /*12789*/)) {
        return true;
    };
};

func void dia_huno_howsyourbusiness_info() {
    ai_output(other, self, "DIA_Huno_HowsYourBusiness_15_00"); //Êàê äåëà, êóçíåö?
    ai_output(self, other, "DIA_Huno_HowsYourBusiness_09_01"); //Èíòåðåñíî, ïî÷åìó òû ñïðàøèâàåøü...
    ai_output(other, self, "DIA_Huno_HowsYourBusiness_15_02"); //Ìîæåò, ó ìåíÿ åñòü äëÿ òåáÿ ðàáîòà.
    ai_output(self, other, "DIA_Huno_HowsYourBusiness_09_03"); //Â ñàìîì äåëå? È êàêàÿ æå?
    ai_output(other, self, "DIA_Huno_HowsYourBusiness_15_04"); //ß åùå ïîäóìàþ.
    ai_output(self, other, "DIA_Huno_HowsYourBusiness_09_05"); //Âîçâðàùàéñÿ, êîãäà òåáå íà ñàìîì äåëå ÷òî-òî ïîíàäîáèòñÿ, è ïåðåñòàíü äåéñòâîâàòü ìíå íà íåðâû.
};

var int huno_learnsmith;

instance dia_huno_learnsmith(c_info) {
    npc = vlk_538_huno /*8438*/;
    nr = 2;
    condition = dia_huno_learnsmith_condition;
    information = dia_huno_learnsmith_info;
    permanent = true;
    description = "ß áû òîæå õîòåë çäåñü ïîðàáîòàòü.";
};

func int dia_huno_learnsmith_condition() {
    if (npc_knowsinfo(hero, dia_huno_youknowyourjob /*12789*/)) {
        return true;
    };
};

func void dia_huno_learnsmith_info() {
    ai_output(other, self, "DIA_Huno_LEARNSMITH_15_00"); //ß áû òîæå õîòåë çäåñü ïîðàáîòàòü.
    ai_output(self, other, "DIA_Huno_LEARNSMITH_09_01"); //Óæ íå äóìàåøü ëè òû, ÷òî ñïîñîáåí äåëàòü õîðîøèå êëèíêè?
    ai_output(other, self, "DIA_Huno_LEARNSMITH_15_02"); //×òî ÿ äîëæåí äåëàòü?
    ai_output(self, other, "DIA_Huno_LEARNSMITH_09_03"); //Âîò, áåðè çàãîòîâêó è ñóé åå â îãîíü.
    ai_output(self, other, "DIA_Huno_LEARNSMITH_09_04"); //Êîãäà ìåòàëë ðàñêàëèòñÿ äîêðàñíà, êëàäè åãî íà íàêîâàëüíþ.
    ai_output(self, other, "DIA_Huno_LEARNSMITH_09_05"); //Ãîòîâûé ìå÷ íóæíî îïóñòèòü â âåäðî ñ âîäîé, ÷òîáû îõëàäèòü ìåòàëë.
    ai_output(self, other, "DIA_Huno_LEARNSMITH_09_06"); //Íó à ïîòîì òû çàòà÷èâàåøü åãî íà òî÷èëüíîì êàìíå.
    ai_output(other, self, "DIA_Huno_LEARNSMITH_15_07"); //Ïîíÿòíî.
    ai_output(self, other, "DIA_Huno_LEARNSMITH_09_08"); //Äëÿ âñåãî ýòîãî ïîíàäîáÿòñÿ èíñòðóìåíòû - è ÿ ìîãó ïðîäàòü èõ òåáå.
    huno_learnsmith = true;
};

instance dia_huno_buysmith(c_info) {
    npc = vlk_538_huno /*8438*/;
    nr = 2;
    condition = dia_huno_buysmith_condition;
    information = dia_huno_buysmith_info;
    permanent = true;
    trade = true;
    description = "Ìíå íóæíû èíñòðóìåíòû!";
};

func int dia_huno_buysmith_condition() {
    if (huno_learnsmith == true) {
        return true;
    };
};

func void dia_huno_buysmith_info() {
    ai_output(other, self, "DIA_Huno_BUYSMITH_15_00"); //Ìíå íóæíû èíñòðóìåíòû!
    if (npc_hasitems(self, itmiswordraw) < 5) {
        createinvitems(self, itmiswordraw, 5);
    };
    if (npc_hasitems(self, itmiswordrawhot) < 5) {
        createinvitems(self, itmiswordrawhot, 5);
    };
    if (npc_hasitems(self, itmiswordbladehot) < 5) {
        createinvitems(self, itmiswordbladehot, 5);
    };
    if (npc_hasitems(self, itmiswordblade) < 5) {
        createinvitems(self, itmiswordblade, 5);
    };
};

instance dia_jesse_exit(c_info) {
    npc = vlk_564_jesse /*8488*/;
    nr = 999;
    condition = dia_jesse_exit_condition;
    information = dia_jesse_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_jesse_exit_condition() {
    return 1;
};

func void dia_jesse_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_jesse_hallo(c_info) {
    npc = vlk_564_jesse /*8488*/;
    nr = 1;
    condition = dia_jesse_hallo_condition;
    information = dia_jesse_hallo_info;
    description = "Êàê æèçíü?";
};

func int dia_jesse_hallo_condition() {
    if (!npc_knowsinfo(hero, dia_herek_bully /*12713*/)) {
        return 1;
    };
};

func void dia_jesse_hallo_info() {
    ai_output(other, self, "DIA_Jesse_Hallo_15_00"); //Êàê äåëà?
    ai_output(self, other, "DIA_Jesse_Hallo_03_01"); //Òû íîâåíüêèé, äà? Ñî ñòðàæíèêàìè äåðæè óõî âîñòðî.
    ai_output(self, other, "DIA_Jesse_Hallo_03_02"); //Êîãäà îíè ïîòðåáóþò äåíüãè çà çàùèòó, ëó÷øå çàïëàòèòü, èíà÷å ïîëîâèíà Ëàãåðÿ îïîë÷èòñÿ ïðîòèâ òåáÿ.
};

instance dia_jesse_warn(c_info) {
    npc = vlk_564_jesse /*8488*/;
    nr = 1;
    condition = dia_jesse_warn_condition;
    information = dia_jesse_warn_info;
    important = true;
};

func int dia_jesse_warn_condition() {
    if (npc_knowsinfo(hero, dia_herek_bully /*12713*/) && (herek_protectionbully == true)) {
        return 1;
    };
};

func void dia_jesse_warn_info() {
    ai_output(self, other, "DIA_Jesse_Warn_03_00"); //Ýé, òû! ß ñëûøàë, òû îòêàçàëñÿ ïëàòèòü Áëàäâèíó çà çàùèòó.
    ai_output(other, self, "DIA_Jesse_Warn_15_01"); //È ÷òî ñ òîãî?
    ai_output(self, other, "DIA_Jesse_Warn_03_02"); //Ïðîñòî õî÷ó ïðåäóïðåäèòü òåáÿ. Áëàäâèí çàïëàòèë ìåñòíûì ãîëîâîðåçàì, ÷òîáû îíè ïðèêîí÷èëè òåáÿ.
    ai_output(self, other, "DIA_Jesse_Warn_03_03"); //ß âèäåë, êàê îí ðàçãîâàðèâàë ñ Õåðåêîì, è Áîã çíàåò, êîãî îí íàíÿë åùå.
    ai_output(other, self, "DIA_Jesse_Warn_15_04"); //Ïî ïîâîäó Õåðåêà... òâîå ïðåäóïðåæäåíèå ñëåãêà çàïîçäàëî.
    ai_output(self, other, "DIA_Jesse_Warn_03_05"); //Íî îí íàâåðíÿêà íàíÿë êîãî-òî åùå, òàê ÷òî ñìîòðè â îáà!
};

instance dia_jesse_mission(c_info) {
    npc = vlk_564_jesse /*8488*/;
    nr = 1;
    condition = dia_jesse_mission_condition;
    information = dia_jesse_mission_info;
    description = "Ïî÷åìó òû ðàññêàçàë ìíå ïðî Áëàäâèíà?";
};

func int dia_jesse_mission_condition() {
    if (npc_knowsinfo(hero, dia_jesse_warn /*12811*/)) {
        return 1;
    };
};

func void dia_jesse_mission_info() {
    ai_output(other, self, "DIA_Jesse_Mission_15_00"); //Ïî÷åìó òû ðàññêàçàë ìíå ïðî Áëàäâèíà?
    ai_output(self, other, "DIA_Jesse_Mission_03_01"); //Ïîòîìó ÷òî íà äîáðî ïðèíÿòî îòâå÷àòü äîáðîì. È òû ïîõîæ íà ÷åëîâåêà, êîòîðûé ïîíèìàåò ýòî.
    ai_output(self, other, "DIA_Jesse_Mission_03_02"); //ß ïîìîã ÒÅÁÅ, è òåïåðü ó òåáÿ åñòü âîçìîæíîñòü ïîìî÷ü ìíå.
    info_clearchoices(dia_jesse_mission /*12814*/);
    info_addchoice(dia_jesse_mission /*12814*/, "Çàáóäü îá ýòîì. ß íè÷åãî òåáå íå äîëæåí!", dia_jesse_mission_forgetit);
    info_addchoice(dia_jesse_mission /*12814*/, "×åãî òû õî÷åøü?", dia_jesse_mission_what);
};

func void dia_jesse_mission_forgetit() {
    ai_output(other, self, "DIA_Jesse_Mission_ForgetIt_15_00"); //Ýé, ÿ òåáå íè÷åãî íå äîëæåí!
    ai_output(self, other, "DIA_Jesse_Mission_ForgetIt_03_01"); //Íó, ðàç òàê, ïðîâàëèâàé!
    npc_setpermattitude(self, att_angry);
    info_clearchoices(dia_jesse_mission /*12814*/);
    ai_stopprocessinfos(self);
};

func void dia_jesse_mission_what() {
    ai_output(other, self, "DIA_Jesse_Mission_What_15_00"); //×åãî òû õî÷åøü?
    ai_output(self, other, "DIA_Jesse_Mission_What_03_01"); //Ó ìåíÿ ñîâñåì íå îñòàëîñü ðóäû, äà è Áëàäâèí îáîäðàë ìåíÿ êàê ëèïêó.
    ai_output(self, other, "DIA_Jesse_Mission_What_03_02"); //ß óæå çàäîëæàë åìó 10 êóñêîâ ðóäû. Òàê âîò, íå ìîã áû òû îòäàòü èõ åìó çà ìåíÿ?
    npc_settrueguild(self, gil_none);
    info_addchoice(dia_jesse_mission /*12814*/, "×òîáû ÿ ïëàòèë çà òåáÿ?! È äóìàòü çàáóäü!", dia_jesse_mission_no);
    info_addchoice(dia_jesse_mission /*12814*/, "Ïîñìîòðèì, ÷òî ìíå óäàñòñÿ ñäåëàòü.", dia_jesse_mission_yes);
};

func void dia_jesse_mission_yes() {
    ai_output(other, self, "DIA_Jesse_Mission_YES_15_00"); //Ëàäíî, ïîñìîòðèì.
    ai_output(self, other, "DIA_Jesse_Mission_YES_03_01"); //Ñïàñèáî, äðóæèùå! Òû áóêâàëüíî ñïàñ ìåíÿ! Ñêàæåøü, êîãäà âñå áóäåò óëàæåíî, ëàäíî?
    jesse_payforme = log_running;
    info_clearchoices(dia_jesse_mission /*12814*/);
};

func void dia_jesse_mission_no() {
    ai_output(other, self, "DIA_Jesse_Mission_NO_15_00"); //×òîáû ÿ ïëàòèë çà òåáÿ?! È äóìàòü çàáóäü!
    ai_output(self, other, "DIA_Jesse_Mission_NO_03_01"); //Êàæåòñÿ, ÿ â òåáå îøèáñÿ. Â áóäóùåì ìîæåøü íà ìåíÿ íå ðàññ÷èòûâàòü.
    npc_setpermattitude(self, att_angry);
    info_clearchoices(dia_jesse_mission /*12814*/);
};

instance dia_jesse_missuccess(c_info) {
    npc = vlk_564_jesse /*8488*/;
    nr = 1;
    condition = dia_jesse_missuccess_condition;
    information = dia_jesse_missuccess_info;
    description = "ß çàïëàòèë Áëàäâèíó!";
};

func int dia_jesse_missuccess_condition() {
    if (jesse_payforme == log_success) {
        return 1;
    };
};

func void dia_jesse_missuccess_info() {
    ai_output(other, self, "DIA_Jesse_MisSuccess_15_00"); //ß çàïëàòèë Áëàäâèíó!
    ai_output(self, other, "DIA_Jesse_MisSuccess_03_01"); //Äà? Çäîðîâî! Òåïåðü ìû ñ òîáîé â ðàñ÷åòå.
    npc_settrueguild(self, gil_vlk);
    info_clearchoices(dia_jesse_missuccess /*12821*/);
    info_addchoice(dia_jesse_missuccess /*12821*/, "×ÒÎÎÎ? ß çàïëàòèë 10 êóñêîâ ðóäû çà òî, ÷òî è òàê óæå çíàë?", dia_jesse_missuccess_waaas);
    info_addchoice(dia_jesse_missuccess /*12821*/, "Äà. Óñëóãà çà óñëóãó.", dia_jesse_missuccess_ok);
};

func void dia_jesse_missuccess_waaas() {
    ai_output(other, self, "DIA_Jesse_MisSuccess_Waaas_15_00"); //×ÒÎÎÎ? ß çàïëàòèë 10 êóñêîâ ðóäû çà òî, ÷òî è òàê óæå çíàë?
    ai_output(self, other, "DIA_Jesse_MisSuccess_Waaas_03_01"); //Ïîëó÷àåòñÿ, ÷òî òàê.
    info_clearchoices(dia_jesse_missuccess /*12821*/);
};

func void dia_jesse_missuccess_ok() {
    ai_output(other, self, "DIA_Jesse_MisSuccess_Ok_15_00"); //Äà. Óñëóãà çà óñëóãó.
    info_clearchoices(dia_jesse_missuccess /*12821*/);
};

instance dia_gravo_exit(c_info) {
    npc = vlk_572_gravo /*8498*/;
    nr = 999;
    condition = dia_gravo_exit_condition;
    information = dia_gravo_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_gravo_exit_condition() {
    return 1;
};

func void dia_gravo_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_gravo_hallo(c_info) {
    npc = vlk_572_gravo /*8498*/;
    nr = 1;
    condition = dia_gravo_hallo_condition;
    information = dia_gravo_hallo_info;
    description = "Êàê èäóò äåëà?";
};

func int dia_gravo_hallo_condition() {
    return 1;
};

func void dia_gravo_hallo_info() {
    ai_output(other, self, "DIA_Gravo_Hallo_15_00"); //Êàê èäóò äåëà?
    ai_output(self, other, "DIA_Gravo_Hallo_04_01"); //Ñ òåõ ïîð êàê ÿ ïåðåñòàë ãíóòü ñïèíó íà øàõòå, ïîæàëîâàòüñÿ íå íà ÷òî.
    ai_output(other, self, "DIA_Gravo_Hallo_15_02"); //Íà ÷òî æå òû æèâåøü?
    ai_output(self, other, "DIA_Gravo_Hallo_04_03"); //ß ïîìîãàþ ëþäÿì ðåøàòü èõ ïðîáëåìû.
    ai_output(self, other, "DIA_Gravo_Hallo_04_04"); //Åñëè òû ïåðåéäåøü äîðîãó êîìó-íèáóäü èç áîëüøèõ øèøåê çäåñü, â Ëàãåðå, ÿ ïîñòàðàþñü óëàäèòü ýòî.
};

instance dia_gravo_helphow(c_info) {
    npc = vlk_572_gravo /*8498*/;
    nr = 1;
    condition = dia_gravo_helphow_condition;
    information = dia_gravo_helphow_info;
    description = "Òî åñòü, åñëè âîçíèêíóò ïðîáëåìû, òû ñìîæåøü ïîìî÷ü? Íî êàê?";
};

func int dia_gravo_helphow_condition() {
    if (npc_knowsinfo(hero, dia_gravo_hallo /*12829*/)) {
        return 1;
    };
};

func void dia_gravo_helphow_info() {
    ai_output(other, self, "DIA_Gravo_HelpHow_15_00"); //Òî åñòü, åñëè âîçíèêíóò ïðîáëåìû, òû ñìîæåøü ïîìî÷ü? Íî êàê?
    ai_output(self, other, "DIA_Gravo_HelpHow_04_01"); //Íó, äîïóñòèì, òû ïîññîðèëñÿ ñ Òîðóñîì. Âîîáùå-òî, ññîðèòüñÿ ñ íèì ñîâñåì íå ñòîèò, íî íå áóäåì çàðåêàòüñÿ.
    ai_output(self, other, "DIA_Gravo_HelpHow_04_02"); //Òîðóñ ó íàñ äîâîëüíî óïðÿìûé: åñëè òû õîòü îäèí ðàç ïîäâåë åãî, îí ñòàâèò íà òåáå êðåñò. À ýòî ïëîõî.
    ai_output(self, other, "DIA_Gravo_HelpHow_04_03"); //Òû íîâè÷îê, òû îò íåãî çàâèñèøü. È âîò òû ïðèõîäèøü êî ìíå è ïðîñèøü ïîìî÷ü. À ÿ çíàþ ìíîãèõ ëþäåé, ê ÷üåìó ìíåíèþ Òîðóñ ïðèñëóøèâàåòñÿ.
    ai_output(self, other, "DIA_Gravo_HelpHow_04_04"); //Îíè çàìîëâÿò çà òåáÿ ñëîâå÷êî, è âîò âû ñ Òîðóñîì ñíîâà äðóçüÿ. Ðàçóìååòñÿ, äåëàòü îíè ýòî áóäóò íå áåñïëàòíî, òàê ÷òî òåáå ïðèäåòñÿ ðàñêîøåëèòüñÿ.
    ai_output(self, other, "DIA_Gravo_HelpHow_04_05"); //Íó à ÿ çàáî÷óñü î òîì, ÷òîáû òâîÿ ðóäà ïîïàëà â íóæíûå ðóêè...
    log_createtopic(ge_traderoc, log_note);
    b_logentry(ge_traderoc, ge_traderoc_10);
};

func void b_gravo_helpattitude(var c_npc prob) {
    if (npc_getpermattitude(prob, other) == att_angry) {
        ai_output(self, other, "B_Gravo_HelpAttitude_ANGRY_04_00"); //Äà, òû ó íåãî íà ïëîõîì ñ÷åòó.
        ai_output(self, other, "B_Gravo_HelpAttitude_ANGRY_04_01"); //Åñòü ó ìåíÿ ïàðà ÷åëîâåê... Â îáùåì, çà 100 êóñêîâ ðóäû ìîæíî ðåøèòü ýòó ïðîáëåìó.
        if (npc_hasitems(other, itminugget) >= 100) {
            ai_output(self, other, "B_Gravo_HelpAttitude_ANGRY_04_02"); //Ïîñìîòðèì, ÷òî ó òåáÿ åñòü... Àãà! Ýòîãî äîëæíî õâàòèòü. Ìîæåøü ñ÷èòàòü, ÷òî âîïðîñ ðåøåí.
            ai_output(self, other, "B_Gravo_HelpAttitude_ANGRY_04_03"); //È íèêîìó íå ãîâîðè îá ýòîì! Âåäè ñåáÿ òàê, áóäòî íè÷åãî íå ñëó÷èëîñü.
            b_giveinvitems(hero, self, itminugget /*4517*/, 100);
            npc_setpermattitude(prob, att_neutral);
        }
        else {
            ai_output(other, self, "B_Gravo_HelpAttitude_NoOre_15_01"); //Ó ìåíÿ ñòîëüêî íåò...
            ai_output(self, other, "B_Gravo_HelpAttitude_NoOre_04_02"); //Ìíå î÷åíü æàëü, ïàðåíü, íî òîãäà ÿ íè÷åãî íå ñìîãó äëÿ òåáÿ ñäåëàòü.
        };
    }
    else if (npc_getpermattitude(prob, other) == att_hostile) {
        ai_output(self, other, "B_Gravo_HelpAttitude_HOSTILE_04_00"); //È òû íàçûâàåøü ýòî 'ïðîáëåìîé'?! Ñëàáî ñêàçàíî, ïðèÿòåëü! Çà ýòî îí ïîðóáèò òåáÿ íà êóñêè.
        ai_output(self, other, "B_Gravo_HelpAttitude_HOSTILE_04_01"); //Óáåäèòü ëþäåé âñòàòü íà òâîþ çàùèòó â òàêîì äåëå - ýòî áóäåò íåëåãêî. È íåäåøåâî. Ãîòîâü êàê ìèíèìóì ïÿòü ñîòåí.
        if (npc_hasitems(other, itminugget) >= 500) {
            ai_output(self, other, "B_Gravo_HelpAttitude_HOSTILE_04_02"); //Ïîñìîòðèì, ÷òî ó òåáÿ åñòü... Ïàðåíü, äà òû áîãàò! ß çàáèðàþ 500 êóñêîâ è óëàæèâàþ òâîþ ïðîáëåìó.
            ai_output(self, other, "B_Gravo_HelpAttitude_HOSTILE_04_03"); //È çàïîìíè: íèêòî íå äîëæåí îá ýòîì çíàòü.
            b_giveinvitems(hero, self, itminugget /*4517*/, 500);
            npc_setpermattitude(prob, att_neutral);
        }
        else {
            ai_output(other, self, "B_Gravo_HelpAttitude_NoOre_15_01"); //Ó ìåíÿ ñòîëüêî íåò...
            ai_output(self, other, "B_Gravo_HelpAttitude_NoOre_04_02"); //Ìíå î÷åíü æàëü, ïàðåíü, íî òîãäà ÿ íè÷åãî íå ñìîãó äëÿ òåáÿ ñäåëàòü.
        };
    }
    else {
        ai_output(self, other, "B_Gravo_HelpAttitude_NoProb_04_00"); //Íàñêîëüêî ìíå èçâåñòíî, ó âàñ è òàê âñå â ïîðÿäêå. Íå âîëíóéñÿ ïîïóñòó, ïàðåíü.
    };
};

instance dia_gravo_helpangrynow(c_info) {
    npc = vlk_572_gravo /*8498*/;
    nr = 1;
    condition = dia_gravo_helpangrynow_condition;
    information = dia_gravo_helpangrynow_info;
    permanent = true;
    description = "Êàæåòñÿ, ó ìåíÿ âîçíèêëà ïðîáëåìà. Òû ìîæåøü ìíå ïîìî÷ü?";
};

func int dia_gravo_helpangrynow_condition() {
    if (npc_knowsinfo(hero, dia_gravo_helphow /*12832*/)) {
        return 1;
    };
};

func void dia_gravo_helpangrynow_info() {
    ai_output(other, self, "DIA_Gravo_HelpAngryNow_15_00"); //Êàæåòñÿ, ó ìåíÿ âîçíèêëà ïðîáëåìà. Òû ìîæåøü ìíå ïîìî÷ü?
    ai_output(self, other, "DIA_Gravo_HelpAngryNow_04_01"); //Äóìàþ, ÷òî äà. Íî ìîÿ ïîìîùü ñòîèò íåäåøåâî - îò 100 äî 500 êóñêîâ ðóäû.
    info_clearchoices(dia_gravo_helpangrynow /*12837*/);
    info_addchoice(dia_gravo_helpangrynow /*12837*/, dialog_back, dia_gravo_helpangrynow_back);
    info_addchoice(dia_gravo_helpangrynow /*12837*/, "ß ïîññîðèëñÿ ñ Äèåãî.", dia_gravo_helpangrynow_diego);
    info_addchoice(dia_gravo_helpangrynow /*12837*/, "ß ïîññîðèëñÿ ñ Òîðóñîì.", dia_gravo_helpangrynow_thorus);
    info_addchoice(dia_gravo_helpangrynow /*12837*/, "ß ïîññîðèëñÿ ñ Ãîìåçîì.", dia_gravo_helpangrynow_gomez);
};

func void dia_gravo_helpangrynow_back() {
    info_clearchoices(dia_gravo_helpangrynow /*12837*/);
};

func void dia_gravo_helpangrynow_diego() {
    var c_npc diego;

    ai_output(other, self, "DIA_Gravo_HelpAngryNow_Diego_15_00"); //ß ïîññîðèëñÿ ñ Äèåãî.
    diego = hlp_getnpc(pc_thief);
    b_gravo_helpattitude(diego);
    info_clearchoices(dia_gravo_helpangrynow /*12837*/);
};

func void dia_gravo_helpangrynow_thorus() {
    var c_npc thorus;

    ai_output(other, self, "DIA_Gravo_HelpAngryNow_Thorus_15_00"); //ß ïîññîðèëñÿ ñ Òîðóñîì.
    thorus = hlp_getnpc(grd_200_thorus);
    b_gravo_helpattitude(thorus);
    info_clearchoices(dia_gravo_helpangrynow /*12837*/);
};

func void dia_gravo_helpangrynow_gomez() {
    var c_npc gomez;

    ai_output(other, self, "DIA_Gravo_HelpAngryNow_Gomez_15_00"); //ß ïîññîðèëñÿ ñ Ãîìåçîì.
    gomez = hlp_getnpc(ebr_100_gomez);
    b_gravo_helpattitude(gomez);
    info_clearchoices(dia_gravo_helpangrynow /*12837*/);
};

instance dia_gravo_influence(c_info) {
    npc = vlk_572_gravo /*8498*/;
    nr = 2;
    condition = dia_gravo_influence_condition;
    information = dia_gravo_influence_info;
    permanent = true;
    description = "Òû ìîæåøü ñêàçàòü ìíå, êòî èç Ïðèçðàêîâ çäåñü ñàìûé ãëàâíûé?";
};

func int dia_gravo_influence_condition() {
    if (npc_knowsinfo(hero, dia_gravo_hallo /*12829*/)) {
        return 1;
    };
};

func void dia_gravo_influence_info() {
    ai_output(other, self, "DIA_Gravo_Influence_15_00"); //Òû ìîæåøü ñêàçàòü ìíå, êòî èç Ïðèçðàêîâ çäåñü ñàìûé ãëàâíûé?
    ai_output(self, other, "DIA_Gravo_Influence_04_01"); //Õî÷åøü ïðîèçâåñòè âïå÷àòëåíèå íà íóæíûõ ëþäåé, à?
    ai_output(self, other, "DIA_Gravo_Influence_04_02"); //Ãëàâíûé ñðåäè Ïðèçðàêîâ - Äèåãî. Îí äîâåðÿåò Ôèíãåðñó, Óèñòëåðó è Ñëàþ.
    ai_output(self, other, "DIA_Gravo_Influence_04_03"); //Äåêñòåð è Ôèñê ïðîäàþò ñâîé òîâàð íà ðûíî÷íîé ïëîùàäè. Ñðåäè èõ ïîêóïàòåëåé ïîïàäàþòñÿ äàæå ñòðàæíèêè, òàê ÷òî èõ òîæå ìîæíî íàçâàòü âëèÿòåëüíûìè ëþäüìè.
    ai_output(self, other, "DIA_Gravo_Influence_04_04"); //Åùå åñòü Ñêàòòè. Îí ïðèñìàòðèâàåò çà àðåíîé è íàçíà÷àåò áîè. Çäåñü ìíîãèå äîëæíû åìó, òàê ÷òî îí òîæå âàæíàÿ ïåðñîíà.
    log_createtopic(ge_traderoc, log_note);
    b_logentry(ge_traderoc, ge_traderoc_11);
};

instance dia_graham_exit(c_info) {
    npc = vlk_573_graham /*8500*/;
    nr = 999;
    condition = info_graham_exit_condition;
    information = info_graham_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_graham_exit_condition() {
    return 1;
};

func void info_graham_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_graham_hello(c_info) {
    npc = vlk_573_graham /*8500*/;
    nr = 3;
    condition = dia_graham_hello_condition;
    information = dia_graham_hello_info;
    description = "Ïðèâåò! ß çäåñü íîâåíüêèé.";
};

func int dia_graham_hello_condition() {
    return 1;
};

func void dia_graham_hello_info() {
    ai_output(other, self, "DIA_Graham_Hello_15_00"); //Ïðèâåò! ß çäåñü íîâåíüêèé.
    ai_output(self, other, "DIA_Graham_Hello_02_01"); //Ìåíÿ çîâóò Ãðåõýì. ß ðèñóþ êàðòû. ß òåáÿ ðàíüøå íå âèäåë... ×òî òåáå íóæíî?
    log_createtopic(ge_traderoc, log_note);
    b_logentry(ge_traderoc, ge_traderoc_9);
};

var int graham_omkarteverkauft;

var int graham_omkarteerpresst;

instance dia_graham_sellmap(c_info) {
    npc = vlk_573_graham /*8500*/;
    nr = 3;
    condition = dia_graham_sellmap_condition;
    information = dia_graham_sellmap_info;
    permanent = true;
    description = "Ìåíÿ ïðèñëàë Äèåãî. Îí ïðîñèë òåáÿ äàòü ìíå êàðòó.";
};

func int dia_graham_sellmap_condition() {
    if (((npc_knowsinfo(hero, dia_graham_hello /*12853*/) && npc_knowsinfo(hero, info_diego_maptooldmine /*11857*/)) && (graham_omkarteverkauft == false)) && (graham_omkarteerpresst == false)) {
        return 1;
    };
};

func void dia_graham_sellmap_info() {
    ai_output(other, self, "DIA_Graham_SellMap_15_00"); //Ìåíÿ ïðèñëàë Äèåãî. Îí ïðîñèë òåáÿ äàòü ìíå êàðòó, íà êîòîðîé îáîçíà÷åí ïóòü ê Ñòàðîé Øàõòå.
    ai_output(self, other, "DIA_Graham_SellMap_02_01"); //Íèêàêèõ ïðîáëåì. Òîëüêî äëÿ òåáÿ... 20 êóñêîâ ðóäû.
    info_clearchoices(dia_graham_sellmap /*12858*/);
    info_addchoice(dia_graham_sellmap /*12858*/, "ß âåðíóñü.", dia_graham_sellmap_back);
    info_addchoice(dia_graham_sellmap /*12858*/, "ß çàïëà÷ó çà êàðòó. Âîò, äåðæè ðóäó.", dia_graham_sellmap_pay);
    info_addchoice(dia_graham_sellmap /*12858*/, "Äàé ìíå êàðòó, ïîêà ÿ íå âçÿë åå ñàì!", dia_graham_sellmap_aufsmaul);
    info_addchoice(dia_graham_sellmap /*12858*/, "Ïîñòîé-êà. Äèåãî ñêàçàë, ÷òî òû äîëæåí ÄÀÒÜ ìíå êàðòó!", dia_graham_sellmap_givenotsell);
};

func void dia_graham_sellmap_back() {
    ai_output(other, self, "DIA_Graham_SellMap_BACK_15_00"); //ß âåðíóñü.
    info_clearchoices(dia_graham_sellmap /*12858*/);
};

func void dia_graham_sellmap_pay() {
    ai_output(other, self, "DIA_Graham_SellMap_Pay_15_00"); //ß çàïëà÷ó çà êàðòó. Âîò, äåðæè ðóäó.
    if (npc_hasitems(other, itminugget) >= 20) {
        ai_output(self, other, "DIA_Graham_SellMap_Pay_02_01"); //Ëàäíî. Ïîâåðü ìíå, ïàðåíü, òû áû íèãäå íå äîñòàë òàêóþ êàðòó çà ýòè äåíüãè.
        b_giveinvitems(other, self, itminugget /*4517*/, 20);
        b_giveinvitems(self, other, itwrommap /*4547*/, 1);
        graham_omkarteverkauft = true;
        info_clearchoices(dia_graham_sellmap /*12858*/);
    }
    else {
        ai_output(self, other, "DIA_Graham_SellMap_Pay_NoOre_02_00"); //Ïðåæäå äîáóäü ðóäó. Ïîîõîòüñÿ èëè ïîñîáèðàé ãðèáû - äîáû÷ó ìîæíî ïðîäàòü ó íàñ â Ëàãåðå.
    };
};

func void dia_graham_sellmap_aufsmaul() {
    ai_output(other, self, "DIA_Graham_SellMap_AufsMaul_15_00"); //Äàé ìíå êàðòó, ïîêà ÿ íå âçÿë åå ñàì!
    ai_output(self, other, "DIA_Graham_SellMap_AufsMaul_02_01"); //Ýé, ðàññëàáüñÿ, äðóæèùå! Ìíå íå íóæíû íåïðèÿòíîñòè. Âîò, âîçüìè ñâîþ êàðòó è îñòàâü ìåíÿ â ïîêîå.
    b_giveinvitems(self, other, itwrommap /*4547*/, 1);
    info_clearchoices(dia_graham_sellmap /*12858*/);
    npc_setpermattitude(self, att_angry);
    graham_omkarteerpresst = true;
    ai_stopprocessinfos(self);
};

func void dia_graham_sellmap_givenotsell() {
    ai_output(other, self, "DIA_Graham_SellMap_GiveNotSell_15_00"); //Ïîñòîé-êà. Äèåãî ñêàçàë, ÷òî òû äîëæåí ÄÀÒÜ ìíå êàðòó, à íå ïðîäàâàòü åå!
    ai_output(self, other, "DIA_Graham_SellMap_GiveNotSell_02_01"); //Äà ìíå-òî ÷òî ñ òîãî?! Òû õîòü ïðåäñòàâëÿåøü ñåáå, êàê ñëîæíî íàðèñîâàòü òàêóþ êàðòó?
    ai_output(self, other, "DIA_Graham_SellMap_GiveNotSell_02_02"); //20 - ýòî ìîÿ ñïåöèàëüíàÿ öåíà äëÿ äðóçåé Äèåãî. Îáû÷íî ÿ áåðó 50.
};

instance dia_graham_buymaps(c_info) {
    npc = vlk_573_graham /*8500*/;
    nr = 800;
    condition = dia_graham_buymaps_condition;
    information = dia_graham_buymaps_info;
    permanent = true;
    trade = true;
    description = "ß õî÷ó êóïèòü êàðòó.";
};

func int dia_graham_buymaps_condition() {
    if (npc_knowsinfo(hero, dia_graham_hello /*12853*/)) {
        return 1;
    };
};

func void dia_graham_buymaps_info() {
    ai_output(other, self, "DIA_Graham_BuyMaps_15_00"); //ß õî÷ó êóïèòü êàðòó.
    ai_output(self, other, "DIA_Graham_BuyMaps_02_01"); //Êîíå÷íî... Êàêàÿ òåáå íóæíà? ×åì áîëüøå âñåãî íà íåé èçîáðàæåíî, òåì äîðîæå îíà ñòîèò.
};

var int mud_nerve;

const int nervesec = 30;

var int mud_nerverealized;

instance dia_mud_exit(c_info) {
    npc = vlk_574_mud /*8502*/;
    nr = 999;
    condition = dia_mud_exit_condition;
    information = dia_mud_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_mud_exit_condition() {
    return 1;
};

func void dia_mud_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_mud_firstexit(c_info) {
    npc = vlk_574_mud /*8502*/;
    nr = 1;
    condition = dia_mud_firstexit_condition;
    information = dia_mud_firstexit_info;
    important = true;
};

func int dia_mud_firstexit_condition() {
    if (npc_getdisttonpc(self, hero) < zivilanquatschdist) {
        return 1;
    };
};

func void dia_mud_firstexit_info() {
    ai_output(self, other, "DIA_Mud_FirstEXIT_07_00"); //Ýé, ïàðåíü! Òû íîâåíüêèé? ß òåáÿ ðàíüøå íå âèäåë.
    ai_output(self, other, "DIA_Mud_FirstEXIT_07_01"); //ß ïðîéäó ñ òîáîé íåìíîãî, ëàäíî? Óâåðåí, òåáå ñåé÷àñ íóæåí äðóã.
    info_clearchoices(dia_mud_firstexit /*12874*/);
    info_addchoice(dia_mud_firstexit /*12874*/, "Ïðîâàëèâàé!", dia_mud_firstexit_verpiss);
    info_addchoice(dia_mud_firstexit /*12874*/, "Ïî÷åìó áû è íåò? Èäåì!", dia_mud_firstexit_komm);
};

func void dia_mud_firstexit_verpiss() {
    ai_output(other, self, "DIA_Mud_FirstEXIT_Verpiss_15_00"); //Ïðîâàëèâàé!
    ai_output(self, other, "DIA_Mud_FirstEXIT_Verpiss_07_01"); //À òû ñåãîäíÿ íå â íàñòðîåíèè... Íî ÿ ëó÷øå ïîéäó ñ òîáîé...
    info_clearchoices(dia_mud_firstexit /*12874*/);
    ai_stopprocessinfos(self);
    npc_exchangeroutine(self, "FOLLOW");
};

func void dia_mud_firstexit_komm() {
    ai_output(other, self, "DIA_Mud_FirstEXIT_Komm_15_00"); //Ïî÷åìó áû è íåò? Èäåì!
    ai_output(self, other, "DIA_Mud_FirstEXIT_Komm_07_01"); //Çäîðîâî! Ïî äîðîãå ìû ñìîæåì ïîãîâîðèòü.
    info_clearchoices(dia_mud_firstexit /*12874*/);
    ai_stopprocessinfos(self);
    npc_exchangeroutine(self, "FOLLOW");
};

instance dia_mud_shutup(c_info) {
    npc = vlk_574_mud /*8502*/;
    nr = 3;
    condition = dia_mud_shutup_condition;
    information = dia_mud_shutup_info;
    permanent = true;
    description = "Òû ÍÅ ÌÎÃ ÁÛ çàòêíóòüñÿ - õîòÿ áû íà ìèíóòó?";
};

func int dia_mud_shutup_condition() {
    if (mud_nerverealized == true) {
        return 1;
    };
};

func void dia_mud_shutup_info() {
    ai_output(other, self, "DIA_Mud_ShutUp_15_00"); //Òû ÍÅ ÌÎÃ ÁÛ çàòêíóòüñÿ - õîòÿ áû íà ìèíóòó?
    ai_output(self, other, "DIA_Mud_ShutUp_07_01"); //Êîíå÷íî.
    npc_setrefusetalk(self, 300);
};

instance dia_mud_getlost(c_info) {
    npc = vlk_574_mud /*8502*/;
    nr = 2;
    condition = dia_mud_getlost_condition;
    information = dia_mud_getlost_info;
    permanent = true;
    description = "Ïðîâàëèâàé!";
};

func int dia_mud_getlost_condition() {
    return 1;
};

func void dia_mud_getlost_info() {
    ai_output(other, self, "DIA_Mud_GetLost_15_00"); //Ïðîâàëèâàé!
    ai_output(self, other, "DIA_Mud_GetLost_07_01"); //Õî÷åøü íåìíîãî ïîáûòü îäèí? ß ïîíèìàþ... ß áóäó íåïîäàëåêó.
};

instance dia_mud_defeated(c_info) {
    npc = vlk_574_mud /*8502*/;
    nr = 1;
    condition = dia_mud_defeated_condition;
    information = dia_mud_defeated_info;
    important = true;
};

func int dia_mud_defeated_condition() {
    if (self.aivar[19] == true) {
        return 1;
    };
};

func void dia_mud_defeated_info() {
    ai_output(self, other, "DIA_Mud_GetLost_07_00"); //Ýé, ïàðåíü, òû óäàðèë ìåíÿ! Ýòî åùå çà ÷òî?
    ai_output(other, self, "DIA_Mud_GetLost_15_01"); //×åðåç ñåêóíäó ÿ âðåæó òåáå åùå ðàç! Òû ìåíÿ óæå äîñòàë!
    ai_output(self, other, "DIA_Mud_GetLost_07_02"); //Òû áîëüíîé ïðèäóðîê! ß áîëüøå íå õî÷ó òåáÿ âèäåòü.
    ai_stopprocessinfos(self);
    npc_exchangeroutine(self, "START");
};

instance dia_mud_nerve_0(c_info) {
    npc = vlk_574_mud /*8502*/;
    nr = 999;
    condition = dia_mud_nerve_0_condition;
    information = dia_mud_nerve_0_info;
    permanent = true;
    important = true;
};

func int dia_mud_nerve_0_condition() {
    if ((((mud_nerve == 0) && (npc_refusetalk(self) == false)) && (npc_getdisttonpc(self, hero) < zivilanquatschdist)) && (self.aivar[19] == false)) {
        return 1;
    };
};

func void dia_mud_nerve_0_info() {
    ai_output(self, other, "DIA_Mud_Nerve_0_07_00"); //Ñêàæè, à êóäà ìû èäåì? Èëè ýòî áóäåò ñþðïðèç? ß ëþáëþ ñþðïðèçû.
    npc_setrefusetalk(self, nervesec);
    mud_nerve = 1;
    ai_stopprocessinfos(self);
};

instance dia_mud_nerve_1(c_info) {
    npc = vlk_574_mud /*8502*/;
    nr = 999;
    condition = dia_mud_nerve_1_condition;
    information = dia_mud_nerve_1_info;
    permanent = true;
    important = true;
};

func int dia_mud_nerve_1_condition() {
    if ((((mud_nerve == 1) && (npc_refusetalk(self) == false)) && (npc_getdisttonpc(self, hero) < zivilanquatschdist)) && (self.aivar[19] == false)) {
        return 1;
    };
};

func void dia_mud_nerve_1_info() {
    ai_output(self, other, "DIA_Mud_Nerve_1_07_00"); //Íå îáðàùàé íà ìåíÿ âíèìàíèÿ. ß âñåãäà áóäó ñ òîáîé, íå âîëíóéñÿ.
    npc_setrefusetalk(self, nervesec);
    mud_nerve = 2;
    mud_nerverealized = true;
    ai_stopprocessinfos(self);
};

instance dia_mud_nerve_2(c_info) {
    npc = vlk_574_mud /*8502*/;
    nr = 999;
    condition = dia_mud_nerve_2_condition;
    information = dia_mud_nerve_2_info;
    permanent = true;
    important = true;
};

func int dia_mud_nerve_2_condition() {
    if ((((mud_nerve == 2) && (npc_refusetalk(self) == false)) && (npc_getdisttonpc(self, hero) < zivilanquatschdist)) && (self.aivar[19] == false)) {
        return 1;
    };
};

func void dia_mud_nerve_2_info() {
    ai_output(self, other, "DIA_Mud_Nerve_2_07_00"); //Êóäà ìû èäåì?  Ó òåáÿ åñòü êàêîé-íèáóäü ïëàí?
    npc_setrefusetalk(self, nervesec);
    mud_nerve = 3;
    ai_stopprocessinfos(self);
};

instance dia_mud_nerve_3(c_info) {
    npc = vlk_574_mud /*8502*/;
    nr = 999;
    condition = dia_mud_nerve_3_condition;
    information = dia_mud_nerve_3_info;
    permanent = true;
    important = true;
};

func int dia_mud_nerve_3_condition() {
    if ((((mud_nerve == 3) && (npc_refusetalk(self) == false)) && (npc_getdisttonpc(self, hero) < zivilanquatschdist)) && (self.aivar[19] == false)) {
        return 1;
    };
};

func void dia_mud_nerve_3_info() {
    ai_output(self, other, "DIA_Mud_Nerve_3_07_00"); //Òû èùåøü òèõîå ìåñòî? Ãäå ìû ñìîæåì ïîãîâîðèòü è âñå òàêîå?
    npc_setrefusetalk(self, nervesec);
    mud_nerve = 4;
    ai_stopprocessinfos(self);
};

instance dia_mud_nerve_4(c_info) {
    npc = vlk_574_mud /*8502*/;
    nr = 999;
    condition = dia_mud_nerve_4_condition;
    information = dia_mud_nerve_4_info;
    permanent = true;
    important = true;
};

func int dia_mud_nerve_4_condition() {
    if ((((mud_nerve == 4) && (npc_refusetalk(self) == false)) && (npc_getdisttonpc(self, hero) < zivilanquatschdist)) && (self.aivar[19] == false)) {
        return 1;
    };
};

func void dia_mud_nerve_4_info() {
    ai_output(self, other, "DIA_Mud_Nerve_4_07_00"); //Ìîæåò áûòü ìû õîäèì êðóãàìè? Òî åñòü ÿ íå çíàþ, êóäà òû õî÷åøü ïðèéòè...
    npc_setrefusetalk(self, nervesec);
    mud_nerve = 5;
    ai_stopprocessinfos(self);
};

instance dia_mud_nerve_5(c_info) {
    npc = vlk_574_mud /*8502*/;
    nr = 999;
    condition = dia_mud_nerve_5_condition;
    information = dia_mud_nerve_5_info;
    permanent = true;
    important = true;
};

func int dia_mud_nerve_5_condition() {
    if ((((mud_nerve == 5) && (npc_refusetalk(self) == false)) && (npc_getdisttonpc(self, hero) < zivilanquatschdist)) && (self.aivar[19] == false)) {
        return 1;
    };
};

func void dia_mud_nerve_5_info() {
    ai_output(self, other, "DIA_Mud_Nerve_5_07_00"); //Ýòî áûëî çäîðîâî. Ñïàñèáî, ÷òî âçÿë ìåíÿ ñ ñîáîé. Íóæíî áóäåò ïîâòîðèòü ýòó ïðîãóëêó - ó ìåíÿ ñåãîäíÿ åùå ìàññà ñâîáîäíîãî âðåìåíè.
    npc_setrefusetalk(self, nervesec);
    mud_nerve = 6;
    ai_stopprocessinfos(self);
};

instance dia_mud_nerve_6(c_info) {
    npc = vlk_574_mud /*8502*/;
    nr = 999;
    condition = dia_mud_nerve_6_condition;
    information = dia_mud_nerve_6_info;
    permanent = true;
    important = true;
};

func int dia_mud_nerve_6_condition() {
    if ((((mud_nerve == 6) && (npc_refusetalk(self) == false)) && (npc_getdisttonpc(self, hero) < zivilanquatschdist)) && (self.aivar[19] == false)) {
        return 1;
    };
};

func void dia_mud_nerve_6_info() {
    ai_output(self, other, "DIA_Mud_Nerve_6_07_00"); //ß óæå ïðèâûê ê òåáå. Ìíå ñ òîáîé õîðîøî. À òåáå êàê? Äà, êñòàòè, ãäå òû ñïèøü? Ìîæåøü îñòàâàòüñÿ ó ìåíÿ, íåò ïðîáëåì.
    npc_setrefusetalk(self, nervesec);
    mud_nerve = 7;
    ai_stopprocessinfos(self);
};

instance dia_mud_nerve_7(c_info) {
    npc = vlk_574_mud /*8502*/;
    nr = 999;
    condition = dia_mud_nerve_7_condition;
    information = dia_mud_nerve_7_info;
    permanent = true;
    important = true;
};

func int dia_mud_nerve_7_condition() {
    if ((((mud_nerve == 7) && (npc_refusetalk(self) == false)) && (npc_getdisttonpc(self, hero) < zivilanquatschdist)) && (self.aivar[19] == false)) {
        return 1;
    };
};

func void dia_mud_nerve_7_info() {
    ai_output(self, other, "DIA_Mud_Nerve_7_07_00"); //Êñòàòè, ïî÷åìó òû çäåñü îêàçàëñÿ? Òû âîîáùå ëþáèøü æèâîòíûõ? Íå âñå èõ ëþáÿò, è ïîýòîìó ìåíÿ çàøâûðíóëè ñþäà.
    npc_setrefusetalk(self, nervesec);
    mud_nerve = 8;
    ai_stopprocessinfos(self);
};

instance dia_mud_nerve_8(c_info) {
    npc = vlk_574_mud /*8502*/;
    nr = 999;
    condition = dia_mud_nerve_8_condition;
    information = dia_mud_nerve_8_info;
    permanent = true;
    important = true;
};

func int dia_mud_nerve_8_condition() {
    if ((((mud_nerve == 8) && (npc_refusetalk(self) == false)) && (npc_getdisttonpc(self, hero) < zivilanquatschdist)) && (self.aivar[19] == false)) {
        return 1;
    };
};

func void dia_mud_nerve_8_info() {
    ai_output(self, other, "DIA_Mud_Nerve_8_07_00"); //Åñòü çäåñü òàêèå òèïû - îíè ïîñòîÿííî ïûòàþòñÿ èçáèòü ìåíÿ. Îíè èç Íîâîãî Ëàãåðÿ. Íàñòîÿùèå ãîëîâîðåçû. Â ñëåäóþùèé ðàç ÿ ñêàæó èì, ÷òî ìû ñ òîáîé òåïåðü äðóçüÿ. Ýòî äîëæíî èõ íàïóãàòü.
    npc_setrefusetalk(self, nervesec);
    mud_nerve = 9;
    ai_stopprocessinfos(self);
};

instance dia_mud_nerve_9(c_info) {
    npc = vlk_574_mud /*8502*/;
    nr = 999;
    condition = dia_mud_nerve_9_condition;
    information = dia_mud_nerve_9_info;
    permanent = true;
    important = true;
};

func int dia_mud_nerve_9_condition() {
    if ((((mud_nerve == 9) && (npc_refusetalk(self) == false)) && (npc_getdisttonpc(self, hero) < zivilanquatschdist)) && (self.aivar[19] == false)) {
        return 1;
    };
};

func void dia_mud_nerve_9_info() {
    ai_output(self, other, "DIA_Mud_Nerve_9_07_00"); //Ýòè óáëþäêè èç Íîâîãî Ëàãåðÿ áóäóò â øîêå, êîãäà óçíàþò, ÷òî ó ìåíÿ ïîÿâèëñÿ çàùèòíèê. Îíè îáäåëàþòñÿ îò ñòðàõà. Ýòî äîëæíî áûòü çäîðîâî. Îáû÷íî äëÿ íèõ óáèòü ÷åëîâåêà - ÷òî ìóõó ïðèõëîïíóòü, íî òåïåðü îíè äâàæäû ïîäóìàþò.
    npc_setrefusetalk(self, nervesec);
    mud_nerve = 10;
    ai_stopprocessinfos(self);
};

instance dia_mud_nerve_10(c_info) {
    npc = vlk_574_mud /*8502*/;
    nr = 999;
    condition = dia_mud_nerve_10_condition;
    information = dia_mud_nerve_10_info;
    permanent = true;
    important = true;
};

func int dia_mud_nerve_10_condition() {
    if ((((mud_nerve == 10) && (npc_refusetalk(self) == false)) && (npc_getdisttonpc(self, hero) < zivilanquatschdist)) && (self.aivar[19] == false)) {
        return 1;
    };
};

func void dia_mud_nerve_10_info() {
    ai_output(self, other, "DIA_Mud_Nerve_10_07_00"); //Çíàåøü ÷òî? ß ïîìîãó òåáå. ß çàìîëâëþ çà òåáÿ ñëîâå÷êî, è ìîæåò áûòü, òåáÿ ïðèìóò â Ëàãåðü. Òîãäà ìû ñìîæåì âèäåòüñÿ êàæäûé äåíü.
    npc_setrefusetalk(self, nervesec);
    mud_nerve = 11;
    ai_stopprocessinfos(self);
};

instance dia_mud_nerve_11(c_info) {
    npc = vlk_574_mud /*8502*/;
    nr = 999;
    condition = dia_mud_nerve_11_condition;
    information = dia_mud_nerve_11_info;
    permanent = true;
    important = true;
};

func int dia_mud_nerve_11_condition() {
    if ((((mud_nerve == 11) && (npc_refusetalk(self) == false)) && (npc_getdisttonpc(self, hero) < zivilanquatschdist)) && (self.aivar[19] == false)) {
        return 1;
    };
};

func void dia_mud_nerve_11_info() {
    ai_output(self, other, "DIA_Mud_Nerve_11_07_00"); //Çäåñü ìíîãèå ñ÷èòàþò ìåíÿ ïðèäóðêîì. Íî òû áû íå ñòàë îáùàòüñÿ ñ ïðèäóðêîì, ïðàâäà? Îíè óâèäÿò íàñ è ïîéìóò, ÷òî áûëè íåïðàâû.
    npc_setrefusetalk(self, nervesec);
    mud_nerve = 12;
    ai_stopprocessinfos(self);
};

instance dia_mud_nerve_12(c_info) {
    npc = vlk_574_mud /*8502*/;
    nr = 999;
    condition = dia_mud_nerve_12_condition;
    information = dia_mud_nerve_12_info;
    permanent = true;
    important = true;
};

func int dia_mud_nerve_12_condition() {
    if ((((mud_nerve == 12) && (npc_refusetalk(self) == false)) && (npc_getdisttonpc(self, hero) < zivilanquatschdist)) && (self.aivar[19] == false)) {
        return 1;
    };
};

func void dia_mud_nerve_12_info() {
    ai_output(self, other, "DIA_Mud_Nerve_12_07_00"); //Òû - ìîé ëó÷øèé äðóã. Îñòàëüíûå òîëüêî è äóìàþò, êàê èçáàâèòüñÿ îò ìåíÿ. ß òåáå î÷åíü áëàãîäàðåí.
    npc_setrefusetalk(self, nervesec);
    mud_nerve = 13;
    ai_stopprocessinfos(self);
};

instance dia_mud_nerve_13(c_info) {
    npc = vlk_574_mud /*8502*/;
    nr = 999;
    condition = dia_mud_nerve_13_condition;
    information = dia_mud_nerve_13_info;
    permanent = true;
    important = true;
};

func int dia_mud_nerve_13_condition() {
    if ((((mud_nerve == 13) && (npc_refusetalk(self) == false)) && (npc_getdisttonpc(self, hero) < zivilanquatschdist)) && (self.aivar[19] == false)) {
        return 1;
    };
};

func void dia_mud_nerve_13_info() {
    ai_output(self, other, "DIA_Mud_Nerve_13_07_00"); //Ñëóøàé, ìåíÿ óæå íà÷èíàåò óòîìëÿòü ýòà ïðîãóëêà. Ìîæåò áûòü, ìû ïîèùåì êàêîå-íèáóäü òèõîå ìåñòå÷êî è íåìíîãî ïåðåäîõíåì?
    npc_setrefusetalk(self, nervesec);
    mud_nerve = 14;
    ai_stopprocessinfos(self);
};

instance dia_mud_nerve_14(c_info) {
    npc = vlk_574_mud /*8502*/;
    nr = 999;
    condition = dia_mud_nerve_14_condition;
    information = dia_mud_nerve_14_info;
    permanent = true;
    important = true;
};

func int dia_mud_nerve_14_condition() {
    if ((((mud_nerve == 14) && (npc_refusetalk(self) == false)) && (npc_getdisttonpc(self, hero) < zivilanquatschdist)) && (self.aivar[19] == false)) {
        return 1;
    };
};

func void dia_mud_nerve_14_info() {
    ai_output(self, other, "DIA_Mud_Nerve_14_07_00"); //Òû äëÿ ìåíÿ êàê ñòàðøèé áðàò. Ó ìåíÿ íèêîãäà íå áûëî ñòàðøåãî áðàòà. È ìëàäøåãî òîæå íå áûëî. ß áûë íå íóæåí ñâîèì ðîäèòåëÿì. Íî äëÿ íèõ ýòî áûëî òÿæåëî, ÿ óâåðåí.
    ai_output(other, self, "DIA_Mud_Nerve_14_15_01"); //ß òîæå òàê äóìàþ.
    npc_setrefusetalk(self, nervesec);
    mud_nerve = 15;
    ai_stopprocessinfos(self);
};

instance dia_mud_nerve_15(c_info) {
    npc = vlk_574_mud /*8502*/;
    nr = 999;
    condition = dia_mud_nerve_15_condition;
    information = dia_mud_nerve_15_info;
    permanent = true;
    important = true;
};

func int dia_mud_nerve_15_condition() {
    if ((((mud_nerve == 15) && (npc_refusetalk(self) == false)) && (npc_getdisttonpc(self, hero) < zivilanquatschdist)) && (self.aivar[19] == false)) {
        return 1;
    };
};

func void dia_mud_nerve_15_info() {
    ai_output(self, other, "DIA_Mud_Nerve_15_07_00"); //Òû ñàì îòêóäà? Òû, äîëæíî áûòü, ðàä íàéòè ÷åëîâåêà, êîòîðûé òåáÿ äåéñòâèòåëüíî ïîíèìàåò. ß èç Õîðèíèñà. Òû áûë òàì êîãäà-íèáóäü? Âïðî÷åì, ýòî íå èìååò çíà÷åíèÿ.
    npc_setrefusetalk(self, nervesec);
    mud_nerve = 16;
    ai_stopprocessinfos(self);
};

instance dia_mud_nerve_16(c_info) {
    npc = vlk_574_mud /*8502*/;
    nr = 999;
    condition = dia_mud_nerve_16_condition;
    information = dia_mud_nerve_16_info;
    permanent = true;
    important = true;
};

func int dia_mud_nerve_16_condition() {
    if ((((mud_nerve == 16) && (npc_refusetalk(self) == false)) && (npc_getdisttonpc(self, hero) < zivilanquatschdist)) && (self.aivar[19] == false)) {
        return 1;
    };
};

func void dia_mud_nerve_16_info() {
    ai_output(self, other, "DIA_Mud_Nerve_16_07_00"); //Ó òåáÿ íåò íè÷åãî ïîåñòü? ß äëÿ òåáÿ âðîäå êàê ãîñòü, òàê ÷òî òû ìîæåøü óãîñòèòü ìåíÿ ÷åì-íèáóäü. Òàê äîëæåí ïîñòóïàòü õîðîøèé õîçÿèí. Ýòîìó ìåíÿ íàó÷èëè ìîè äðóçüÿ èç Õîðèíèñà. Îíè ëþáèëè ìåíÿ.
    npc_setrefusetalk(self, nervesec);
    mud_nerve = 17;
    ai_stopprocessinfos(self);
};

instance dia_mud_nerve_17(c_info) {
    npc = vlk_574_mud /*8502*/;
    nr = 999;
    condition = dia_mud_nerve_17_condition;
    information = dia_mud_nerve_17_info;
    permanent = true;
    important = true;
};

func int dia_mud_nerve_17_condition() {
    if ((((mud_nerve == 17) && (npc_refusetalk(self) == false)) && (npc_getdisttonpc(self, hero) < zivilanquatschdist)) && (self.aivar[19] == false)) {
        return 1;
    };
};

func void dia_mud_nerve_17_info() {
    ai_output(self, other, "DIA_Mud_Nerve_17_07_00"); //Êàê òû äóìàåøü, ê íàì êòî-íèáóäü çàãëÿíåò? Íàâåðíîå, íåò, ïîòîìó ÷òî îíè çíàþò: òåïåðü èì îòñþäà òàê ïðîñòî íå óéòè!
    npc_setrefusetalk(self, nervesec);
    mud_nerve = 18;
    ai_stopprocessinfos(self);
};

instance dia_mud_nerve_18(c_info) {
    npc = vlk_574_mud /*8502*/;
    nr = 999;
    condition = dia_mud_nerve_18_condition;
    information = dia_mud_nerve_18_info;
    permanent = true;
    important = true;
};

func int dia_mud_nerve_18_condition() {
    if ((((mud_nerve == 18) && (npc_refusetalk(self) == false)) && (npc_getdisttonpc(self, hero) < zivilanquatschdist)) && (self.aivar[19] == false)) {
        return 1;
    };
};

func void dia_mud_nerve_18_info() {
    ai_output(self, other, "DIA_Mud_Nerve_18_07_00"); //Òåïåðü, êîãäà òû ñî ìíîé, ìû ïîêàæåì ýòèì óáëþäêàì! Êîòîðûé óæå ãîä îíè èçìûâàþòñÿ íàäî ìíîé! Òîëüêî áû èõ âñòðåòèòü!
    npc_setrefusetalk(self, nervesec);
    mud_nerve = 19;
    ai_stopprocessinfos(self);
};

instance dia_mud_nerve_19(c_info) {
    npc = vlk_574_mud /*8502*/;
    nr = 999;
    condition = dia_mud_nerve_19_condition;
    information = dia_mud_nerve_19_info;
    permanent = true;
    important = true;
};

func int dia_mud_nerve_19_condition() {
    if ((((mud_nerve == 19) && (npc_refusetalk(self) == false)) && (npc_getdisttonpc(self, hero) < zivilanquatschdist)) && (self.aivar[19] == false)) {
        return 1;
    };
};

func void dia_mud_nerve_19_info() {
    ai_output(self, other, "DIA_Mud_Nerve_19_07_00"); //Ìû ñ òîáîé îäíà êîìàíäà. Ìû ìîæåì ïðàâèòü âñåì Ñòàðûì Ëàãåðåì. Áàðîíû íàì òåïåðü íå ïîìåõà. Ñ÷àñ, ÿ ïðîäóìàþ ïëàí.
    npc_setrefusetalk(self, nervesec);
    mud_nerve = 0;
    ai_stopprocessinfos(self);
};

instance dia_grim_exit(c_info) {
    npc = vlk_580_grim /*8515*/;
    nr = 999;
    condition = dia_grim_exit_condition;
    information = dia_grim_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_grim_exit_condition() {
    return 1;
};

func void dia_grim_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_grim_falle(c_info) {
    npc = vlk_580_grim /*8515*/;
    nr = 2;
    condition = dia_grim_falle_condition;
    information = dia_grim_falle_info;
    important = true;
};

func int dia_grim_falle_condition() {
    if ((grim_protectionbully == true) && (npc_gettrueguild(hero) == gil_none)) {
        return 1;
    };
};

func void dia_grim_falle_info() {
    ai_output(self, other, "DIA_Grim_Falle_06_00"); //Ýé! Òû òîò ñàìûé ïàðåíü, êîòîðûé õî÷åò ïðèñîåäèíèòüñÿ ê íàøåìó Ëàãåðþ?
    ai_output(other, self, "DIA_Grim_Falle_15_01"); //À ÷òî åñëè òàê?
    ai_output(self, other, "DIA_Grim_Falle_06_02"); //ß ìîã áû ïîìî÷ü òåáå...
    ai_output(other, self, "DIA_Grim_Falle_15_03"); //È êàê?
    ai_output(self, other, "DIA_Grim_Falle_06_04"); //Çà Ëàãåðåì ðàñïîëîæèëèñü äâîå òèïîâ, îäèí èç êîòîðûõ óêðàë êîå-÷òî ó Áàðîíîâ. Ýòî äðàãîöåííûé àìóëåò, êîòîðûé äîëæíû áûëè ïðèñëàòü ñ ïîñëåäíèì ãðóçîì.
    ai_output(self, other, "DIA_Grim_Falle_06_05"); //Ïîêà îí åùå ó íèõ. È ÿ äóìàþ, âäâîåì ìû ñ íèìè ñïðàâèìñÿ. ×òî ñêàæåøü?
    info_clearchoices(dia_grim_falle /*12951*/);
    info_addchoice(dia_grim_falle /*12951*/, "Ìåíÿ ýòî íå èíòåðåñóåò. Ïîãîâîðè ñ êåì-íèáóäü åùå.", dia_grim_falle_deny);
    info_addchoice(dia_grim_falle /*12951*/, "È ÷òî áóäåò, êîãäà ìû îòáåðåì ó íèõ àìóëåò?", dia_grim_falle_howshare);
    info_addchoice(dia_grim_falle /*12951*/, "Ìîæåøü.", dia_grim_falle_accepr);
};

func void dia_grim_falle_deny() {
    ai_output(other, self, "DIA_Grim_Falle_Deny_15_00"); //Ìåíÿ ýòî íå èíòåðåñóåò. Ïîãîâîðè ñ êåì-íèáóäü åùå.
    ai_output(self, other, "DIA_Grim_Falle_Deny_06_01"); //Ñ òàêèì õàðàêòåðîì òû çäåñü äîëãî íå ïðîòÿíåøü. Äàé ìíå çíàòü, åñëè ïåðåäóìàåøü.
    info_clearchoices(dia_grim_falle /*12951*/);
};

func void dia_grim_falle_howshare() {
    ai_output(other, self, "DIA_Grim_Falle_HowShare_15_00"); //È ÷òî áóäåò, êîãäà ìû îòáåðåì ó íèõ àìóëåò?
    ai_output(self, other, "DIA_Grim_Falle_HowShare_06_01"); //Äàëüøå âñå ïðîñòî! ß âåðíó àìóëåò è ïîëó÷ó ñâîþ íàãðàäó. Åùå ÿ ñêàæó èì, ÷òî òû ïîìîãàë ìíå. È òû áóäåøü ó Ãîìåçà íà õîðîøåì ñ÷åòó...
    info_clearchoices(dia_grim_falle /*12951*/);
    info_addchoice(dia_grim_falle /*12951*/, "Ìåíÿ ýòî íå èíòåðåñóåò. Ïîãîâîðè ñ êåì-íèáóäü åùå.", dia_grim_falle_deny);
    info_addchoice(dia_grim_falle /*12951*/, "Íåò! Äåëèì íàãðàäó ïîïîëàì!", dia_grim_falle_halfhalf);
    info_addchoice(dia_grim_falle /*12951*/, "Ìîæåøü.", dia_grim_falle_accepr);
};

func void dia_grim_falle_halfhalf() {
    ai_output(other, self, "DIA_Grim_Falle_HalfHalf_15_00"); //Íåò! Ëèáî äåëèì íàãðàäó ïîïîëàì, ëèáî ìîæåøü îòïðàâëÿòüñÿ òóäà îäèí.
    ai_output(self, other, "DIA_Grim_Falle_HalfHalf_06_01"); //Ëàäíî, ëàäíî, ïîïîëàì - òàê ïîïîëàì. Äóìàþ, íàì îáîèì õâàòèò. Òàê ÷òî, ÿ ìîãó íà òåáÿ ðàññ÷èòûâàòü?
};

func void dia_grim_falle_accepr() {
    ai_output(other, self, "DIA_Grim_Falle_Accepr_15_00"); //Ìîæåøü.
    ai_output(self, other, "DIA_Grim_Falle_Accepr_06_01"); //Ëàäíî, äàé çíàòü, êîãäà áóäåøü ãîòîâ.
    info_clearchoices(dia_grim_falle /*12951*/);
};

instance dia_grim_readytogo(c_info) {
    npc = vlk_580_grim /*8515*/;
    nr = 2;
    condition = dia_grim_readytogo_condition;
    information = dia_grim_readytogo_info;
    description = "ß ãîòîâ. Ïîøëè çà àìóëåòîì!";
};

func int dia_grim_readytogo_condition() {
    if (npc_knowsinfo(hero, dia_grim_falle /*12951*/)) {
        return 1;
    };
};

func void dia_grim_readytogo_info() {
    ai_output(other, self, "DIA_Grim_ReadyToGo_15_00"); //ß ãîòîâ. Ïîøëè çà àìóëåòîì!
    ai_output(self, other, "DIA_Grim_ReadyToGo_06_01"); //Ëàäíî, èäåì...
    ai_stopprocessinfos(self);
    npc_exchangeroutine(self, "GUIDE");
};

instance dia_grim_atocdraussen(c_info) {
    npc = vlk_580_grim /*8515*/;
    nr = 3;
    condition = dia_grim_atocdraussen_condition;
    information = dia_grim_atocdraussen_info;
    important = true;
};

func int dia_grim_atocdraussen_condition() {
    if (npc_knowsinfo(hero, dia_grim_readytogo /*12958*/) && (npc_getdisttowp(hero, "OC_ROUND_22_CF_2_MOVEMENT") < 500)) {
        return 1;
    };
};

func void dia_grim_atocdraussen_info() {
    var c_npc bu520;
    var c_npc bu534;

    bu520 = hlp_getnpc(vlk_520_buddler);
    bu534 = hlp_getnpc(vlk_534_buddler);
    ai_output(self, other, "DIA_Grim_AtOCdraussen_06_00"); //Íó, âîò ìû è ïðèøëè - ïîäàëüøå îò òâîåãî äðóãà Äèåãî...
    if (((npc_getdisttonpc(self, bu520) < 1000) && (!npc_isdead(bu520))) || ((npc_getdisttonpc(self, bu534) < 1000) && (!npc_isdead(bu534)))) {
        ai_output(self, other, "DIA_Grim_AtOCdraussen_06_01"); //Ìû äîëæíû ïåðåäàòü òåáå ïðèâåò îò Áëàäâèíà!
    }
    else {
        ai_output(self, other, "DIA_Grim_AtOCdraussen_06_02"); //ß äîëæåí ïåðåäàòü òåáå ïðèâåò îò Áëàäâèíà!
    };
    ai_stopprocessinfos(self);
    npc_exchangeroutine(self, "START");
    npc_settarget(self, other);
    ai_startstate(self, zs_attack, 1, "");
    if ((npc_getdisttonpc(self, bu520) < 1000) && (!npc_isdead(bu520))) {
        npc_settarget(bu520, other);
        ai_startstate(bu520, zs_attack, 1, "");
    };
    if ((npc_getdisttonpc(self, bu534) < 1000) && (!npc_isdead(bu534))) {
        npc_settarget(bu534, other);
        ai_startstate(bu534, zs_attack, 1, "");
    };
};

instance dia_grim_nachfalle(c_info) {
    npc = vlk_580_grim /*8515*/;
    nr = 2;
    condition = dia_grim_nachfalle_condition;
    information = dia_grim_nachfalle_info;
    important = true;
};

func int dia_grim_nachfalle_condition() {
    if (npc_knowsinfo(hero, dia_grim_atocdraussen /*12961*/) && (npc_getdisttonpc(self, other) < zivilanquatschdist)) {
        return 1;
    };
};

func void dia_grim_nachfalle_info() {
    ai_output(other, self, "DIA_Grim_NACHFalle_15_01"); //Çíà÷èò òû, ñêîòèíà, ïðîñòî çàìàíèë ìåíÿ ñþäà...
    ai_output(self, other, "DIA_Grim_NACHFalle_06_02"); //Ýé, ïàðåíü! Òû æå äîëæåí ìåíÿ ïîíÿòü! Ïðîñòî ÿ òîæå íå õî÷ó ãíóòü ñïèíó â øàõòå.
    ai_output(self, other, "DIA_Grim_NACHFalle_06_03"); //Åñëè ÿ õîðîøî ñïðàâëþñü ñ ýòèì ïîðó÷åíèåì, ìåíÿ ñäåëàþò ñòðàæíèêîì.
    ai_output(self, other, "DIA_Grim_NACHFalle_06_04"); //È òî, ÷òî ìíå ïîðó÷èëè óáðàòü èìåííî ÒÅÁß, öåëèêîì è ïîëíîñòüþ òâîÿ æå âèíà. Çà÷åì òåáå ïîíàäîáèëîñü íàæèâàòü âðàãîâ ñðåäè ñòðàæíèêîâ?
    ai_output(self, other, "DIA_Grim_NACHFalle_06_05"); //Ëè÷íî ÿ ïðîòèâ òåáÿ íè÷åãî íå èìåþ. Òàê ÷òî òû ïðåäïî÷èòàåøü - ìèð èëè äðàêó?
    info_clearchoices(dia_grim_nachfalle /*12966*/);
    info_addchoice(dia_grim_nachfalle /*12966*/, "Âàëÿé.", dia_grim_nachfalle_weiterpruegeln);
    info_addchoice(dia_grim_nachfalle /*12966*/, "Ìèð.", dia_grim_nachfalle_frieden);
};

func void dia_grim_nachfalle_weiterpruegeln() {
    ai_output(other, self, "DIA_Grim_NACHFalle_Weiterpruegeln_15_00"); //Ìû áóäåì äðàòüñÿ!
    ai_output(self, other, "DIA_Grim_NACHFalle_Weiterpruegeln_06_01"); //Ïàðåíü, òû ìåíÿ ðàçî÷àðîâàë...
    info_clearchoices(dia_grim_nachfalle /*12966*/);
    ai_stopprocessinfos(self);
    npc_settarget(self, other);
    ai_startstate(self, zs_attack, 1, "");
};

func void dia_grim_nachfalle_frieden() {
    ai_output(other, self, "DIA_Grim_NACHFalle_Frieden_15_00"); //Ìèð âñåãäà ëó÷øå äðàêè.
    ai_output(self, other, "DIA_Grim_NACHFalle_Frieden_06_01"); //ß ðàä, ÷òî ìû ïîíèìàåì äðóã äðóãà. Çàáóäåì îá ýòîì. Òåïåðü ÿ íà òâîåé ñòîðîíå.
    ai_output(self, other, "DIA_Grim_NACHFalle_Frieden_06_02"); //Åñëè êîãäà-íèáóäü åùå ïîïàäåøü â íåïðèÿòíîñòè, ìîæåøü íà ìåíÿ ðàññ÷èòûâàòü - â êîíöå êîíöîâ, ÿ òâîé äîëæíèê.
    info_clearchoices(dia_grim_nachfalle /*12966*/);
    npc_setpermattitude(self, att_friendly);
};

var int firstover;

instance dia_grim_hallo(c_info) {
    npc = vlk_580_grim /*8515*/;
    nr = 1;
    condition = dia_grim_hallo_condition;
    information = dia_grim_hallo_info;
    description = "ß çäåñü íîâåíüêèé.";
};

func int dia_grim_hallo_condition() {
    if (grim_protectionbully == true) {
        firstover = true;
    };
    if (firstover == false) {
        return 1;
    };
};

func void dia_grim_hallo_info() {
    ai_output(other, self, "DIA_Grim_Hallo_15_00"); //ß çäåñü íîâåíüêèé.
    ai_output(self, other, "DIA_Grim_Hallo_06_01"); //Òîëüêî ÷òî ïðèáûë, äà? Ìåíÿ çîâóò Ãðèì. ß òîæå çäåñü íåäàâíî: ìåíÿ çàáðîñèëè ñ ïðîøëûì êàðàâàíîì.
};

instance dia_grim_leben(c_info) {
    npc = vlk_580_grim /*8515*/;
    nr = 2;
    condition = dia_grim_leben_condition;
    information = dia_grim_leben_info;
    description = "È êàê çäåñü æèâåòñÿ?";
};

func int dia_grim_leben_condition() {
    return 1;
};

func void dia_grim_leben_info() {
    ai_output(other, self, "DIA_Grim_Leben_15_00"); //È êàê çäåñü æèâåòñÿ?
    ai_output(self, other, "DIA_Grim_Leben_06_01"); //Íå òàê óæ ïàðøèâî, ïîêà òû ïëàòèøü ñòðàæíèêàì çà çàùèòó.
};

instance dia_grim_aufnahme(c_info) {
    npc = vlk_580_grim /*8515*/;
    nr = 3;
    condition = dia_grim_aufnahme_condition;
    information = dia_grim_aufnahme_info;
    description = "×òî íóæíî ñäåëàòü, ÷òîáû ìåíÿ ïðèíÿëè â ýòîò Ëàãåðü?";
};

func int dia_grim_aufnahme_condition() {
    return 1;
};

func void dia_grim_aufnahme_info() {
    ai_output(other, self, "DIA_Grim_Aufnahme_15_00"); //×òî íóæíî ñäåëàòü, ÷òîáû ìåíÿ ïðèíÿëè â ýòîò Ëàãåðü?
    ai_output(self, other, "DIA_Grim_Aufnahme_06_01"); //Íó, ïðåæäå âñåãî òåáå íóæíî ñòàòü îäíèì èç Ïðèçðàêîâ. Íóæíî íàéòè êîãî-íèáóäü, êòî çà òåáÿ ïîðó÷èòñÿ è áóäåò ïîìîãàòü òåáå.
    ai_output(self, other, "DIA_Grim_Aufnahme_06_02"); //Íà òâîåì ìåñòå ÿ áû äåðæàëñÿ ïîáëèæå ê Äèåãî. ß ñàì òàê äåëàë - îí ìóæèê ÷òî íàäî.
    ai_output(self, other, "DIA_Grim_Aufnahme_06_03"); //Îí çàñòàâèò òåáÿ ïðîéòè èñïûòàíèå - äëÿ êàæäîãî îíî ñâîå. Ïîòîì áóäóò êàêèå-íèáóäü ìåëêèå ïîðó÷åíèÿ îò îñòàëüíûõ Ïðèçðàêîâ.
    ai_output(self, other, "DIA_Grim_Aufnahme_06_04"); //Åñëè ñïðàâèøüñÿ, ñòàíåøü îäíèì èç íàñ.
};

var int grim_tests;

instance dia_grim_howfarareyou(c_info) {
    npc = vlk_580_grim /*8515*/;
    nr = 4;
    condition = dia_grim_howfarareyou_condition;
    information = dia_grim_howfarareyou_info;
    permanent = true;
    description = "È êàê ïðîäâèãàåòñÿ òâîå èñïûòàíèå?";
};

func int dia_grim_howfarareyou_condition() {
    if (npc_knowsinfo(hero, dia_grim_aufnahme /*12978*/) && npc_knowsinfo(hero, info_diego_rules /*11830*/)) {
        return 1;
    };
};

func void dia_grim_howfarareyou_info() {
    ai_output(other, self, "DIA_Grim_HowFarAreYou_15_00"); //È êàê ïðîäâèãàåòñÿ òâîå èñïûòàíèå?
    ai_output(self, other, "DIA_Grim_HowFarAreYou_06_01"); //ß óæå ïîãîâðèë ñ Äåêñòåðîì, Ñëàåì è Ôèíãåðñîì - îíè ñàìûå âëèÿòåëüíûå Ïðèçðàêè â ýòîì Ëàãåðå.
    if (!grim_tests) {
        b_logentry(ch1_joinoc, ch1_joinoc_22);
        grim_tests = true;
    };
};

instance dia_grim_yourpdv(c_info) {
    npc = vlk_580_grim /*8515*/;
    nr = 5;
    condition = dia_grim_yourpdv_condition;
    information = dia_grim_yourpdv_info;
    description = "Êàê èñïûòûâàëè ÒÅÁß?";
};

func int dia_grim_yourpdv_condition() {
    if (npc_knowsinfo(hero, dia_grim_aufnahme /*12978*/)) {
        return 1;
    };
};

func void dia_grim_yourpdv_info() {
    ai_output(other, self, "DIA_Grim_YourPDV_15_00"); //Êàê èñïûòûâàëè ÒÅÁß?
    ai_output(self, other, "DIA_Grim_YourPDV_06_01"); //ß íå ìîãó ñêàçàòü òåáå, ïàðåíü. Î òàêèõ âåùàõ çäåñü íå ãîâîðÿò!
};

instance dia_grim_inextremo(c_info) {
    npc = vlk_580_grim /*8515*/;
    nr = 1;
    condition = dia_grim_inextremo_condition;
    information = dia_grim_inextremo_info;
    important = true;
};

func int dia_grim_inextremo_condition() {
    if ((kapitel == 2) && (inextremoplaying == true)) {
        return true;
    };
};

func void dia_grim_inextremo_info() {
    ai_output(self, other, "DIA_Grim_INEXTREMO_06_01"); //Ýé, ñëûøàë íîâîñòè?
    ai_output(self, other, "DIA_Grim_INEXTREMO_06_02"); //In Extremo çäåñü! Îíè òàì, íà ñöåíå.
    ai_output(self, other, "DIA_Grim_INEXTREMO_06_03"); //Òîðîïèñü, à òî ïðîïóñòèøü âñå èíòåðåñíîå!
    npc_exchangeroutine(self, "InExtremo");
    ai_stopprocessinfos(self);
};

instance dia_grim_inextremoaway(c_info) {
    npc = vlk_580_grim /*8515*/;
    nr = 1;
    condition = dia_grim_inextremoaway_condition;
    information = dia_grim_inextremoaway_info;
    description = "Ãäå In Extremo?";
};

func int dia_grim_inextremoaway_condition() {
    if (npc_knowsinfo(hero, dia_grim_inextremo /*12988*/) && (kapitel == 3)) {
        return true;
    };
};

func void dia_grim_inextremoaway_info() {
    ai_output(hero, self, "DIA_Grim_INEXTREMOAWAY_15_01"); //Ãäå In Extremo?
    ai_output(self, hero, "DIA_Grim_INEXTREMOAWAY_06_02"); //Îíè óåõàëè. Æàëü, ÿ óæå ïðèâûê ïðîâîäèòü âå÷åðà ïåðåä ñöåíîé.
    ai_stopprocessinfos(self);
};

instance dia_snaf_exit(c_info) {
    npc = vlk_581_snaf /*8519*/;
    nr = 999;
    condition = dia_snaf_exit_condition;
    information = dia_snaf_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_snaf_exit_condition() {
    return 1;
};

func void dia_snaf_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_snaf_hello(c_info) {
    npc = vlk_581_snaf /*8519*/;
    nr = 2;
    condition = dia_snaf_hello_condition;
    information = dia_snaf_hello_info;
    description = "Êàê æèçíü?";
};

func int dia_snaf_hello_condition() {
    return 1;
};

func void dia_snaf_hello_info() {
    ai_output(other, self, "DIA_Snaf_Hello_15_00"); //Êàê äåëà?
    ai_output(self, other, "DIA_Snaf_Hello_01_01"); //Íå òàê óæ ïëîõî. Åñëè óìååøü õîðîøî ãîòîâèòü, ó òåáÿ çäåñü áóäåò ìíîãî äðóçåé.
    ai_output(self, other, "DIA_Snaf_Hello_01_02"); //Õî÷åøü ïîïðîáîâàòü òóøåíûé ðèñ?
    ai_output(other, self, "DIA_Snaf_Hello_15_03"); //Ñïàñèáî.
    ai_output(self, other, "DIA_Snaf_Hello_01_04"); //Çíàåøü, òû ìîã áû ìíå ïîìî÷ü.
    createinvitem(self, itforice);
    b_giveinvitems(self, other, itforice /*4316*/, 1);
};

var int snaf_zutaten;

var int snaf_freembragout;

instance dia_snaf_zutaten(c_info) {
    npc = vlk_581_snaf /*8519*/;
    nr = 2;
    condition = dia_snaf_zutaten_condition;
    information = dia_snaf_zutaten_info;
    description = "×òî ÿ ìîãó äëÿ òåáÿ ñäåëàòü?";
};

func int dia_snaf_zutaten_condition() {
    if (npc_knowsinfo(hero, dia_snaf_hello /*12997*/)) {
        return 1;
    };
};

func void dia_snaf_zutaten_info() {
    ai_output(other, self, "DIA_Snaf_Zutaten_15_00"); //×òî ÿ ìîãó äëÿ òåáÿ ñäåëàòü?
    ai_output(self, other, "DIA_Snaf_Zutaten_01_01"); //Òû, äîëæíî áûòü, ëþáèøü âêóñíî ïîåñòü. Ó ìåíÿ òóò íîâûé ðåöåïò: ðàãó èç ìÿñíûõ æóêîâ ïî ñíåôñêè ñ ãðèáàìè è ðèñîì.
    ai_output(self, other, "DIA_Snaf_Zutaten_01_02"); //Òû ïîëó÷èøü ñàìóþ áîëüøóþ ïîðöèþ, åñëè ñìîæåøü ïðèíåñòè ìíå òðåõ æóêîâ è íåñêîëüêî àäñêèõ ãðèáîâ... ß äóìàþ, ïÿòè áóäåò äîñòàòî÷íî.
    info_clearchoices(dia_snaf_zutaten /*13002*/);
    info_addchoice(dia_snaf_zutaten /*13002*/, "Òû õî÷åøü, ÷òîáû ìåíÿ âûðâàëî?", dia_snaf_zutaten_kotz);
    info_addchoice(dia_snaf_zutaten /*13002*/, "Çâó÷èò íåïëîõî.", dia_snaf_zutaten_doit);
};

func void dia_snaf_zutaten_kotz() {
    ai_output(other, self, "DIA_Snaf_Zutaten_KOTZ_15_00"); //Òû õî÷åøü, ÷òîáû ìåíÿ âûðâàëî?
    ai_output(self, other, "DIA_Snaf_Zutaten_KOTZ_01_01"); //Òû íå îáÿçàí ýòî åñòü, íî, ïî êðàéíåé ìåðå, ìîã áû ïîïðîáîâàòü! Ïðèõîäè, åñëè ñìîæåøü ðàçäîáûòü òî, î ÷åì ÿ ïðîñèë.
    ai_output(self, other, "DIA_Snaf_Zutaten_KOTZ_01_02"); //ß óæå îòïðàâèë îäíîãî çà ïðèïàñàìè, íî îí òàê è íå âåðíóëñÿ: íåáîñü, ñáåæàë â Íîâûé Ëàãåðü.
    snaf_zutaten = log_running;
    log_createtopic(ch1_snafsrecipe, log_mission);
    log_settopicstatus(ch1_snafsrecipe, log_running);
    b_logentry(ch1_snafsrecipe, ch1_snafsrecipe_1);
    info_clearchoices(dia_snaf_zutaten /*13002*/);
};

func void dia_snaf_zutaten_doit() {
    ai_output(other, self, "DIA_Snaf_Zutaten_DoIt_15_00"); //Çâó÷èò íåïëîõî.
    ai_output(self, other, "DIA_Snaf_Zutaten_DoIt_01_01"); //Òîãäà èäè è ðàçäîáóäü òî, î ÷åì ÿ òåáÿ ïðîñèë.
    ai_output(self, other, "DIA_Snaf_Zutaten_DoIt_01_02"); //ß óæå îòïðàâèë îäíîãî çà ïðèïàñàìè, íî îí òàê è íå âåðíóëñÿ: íåáîñü, ñáåæàë â Íîâûé Ëàãåðü.
    snaf_zutaten = log_running;
    snaf_freembragout = true;
    log_createtopic(ch1_snafsrecipe, log_mission);
    log_settopicstatus(ch1_snafsrecipe, log_running);
    b_logentry(ch1_snafsrecipe, ch1_snafsrecipe_2);
    info_clearchoices(dia_snaf_zutaten /*13002*/);
};

instance dia_snaf_zutatensuccess(c_info) {
    npc = vlk_581_snaf /*8519*/;
    nr = 2;
    condition = dia_snaf_zutatensuccess_condition;
    information = dia_snaf_zutatensuccess_info;
    description = "ß äîñòàë âñå, ÷òî òåáå íóæíî!";
};

func int dia_snaf_zutatensuccess_condition() {
    if (((snaf_zutaten == log_running) && (npc_hasitems(other, itfo_plants_mushroom_01) >= 5)) && (npc_hasitems(other, itat_meatbug_01) >= 3)) {
        return 1;
    };
};

func void dia_snaf_zutatensuccess_info() {
    ai_output(other, self, "DIA_Snaf_ZutatenSuccess_15_00"); //ß äîñòàë âñå, ÷òî òåáå íóæíî!
    ai_output(self, other, "DIA_Snaf_ZutatenSuccess_01_01"); //Îòëè÷íî! Îñòàëîñü òîëüêî äîáàâèòü ýòî â êîòåë, è ðàãó áóäåò ãîòîâî... Ïîãîäè...
    createinvitems(other, itfo_plants_mushroom_01, 3);
    b_giveinvitems(other, self, itfo_plants_mushroom_01 /*4352*/, 8);
    npc_removeinvitems(self, itfo_plants_mushroom_01, 8);
    npc_removeinvitems(other, itat_meatbug_01, 3);
    createinvitems(self, itfomeatbugragout, 3);
    b_giveinvitems(self, other, itfomeatbugragout /*4320*/, 3);
    snaf_zutaten = log_success;
    log_settopicstatus(ch1_snafsrecipe, log_success);
    b_logentry(ch1_snafsrecipe, ch1_snafsrecipe_3);
    if (snaf_freembragout == true) {
        b_logentry(ch1_snafsrecipe, ch1_snafsrecipe_4);
    };
    b_givexp(100);
    ai_stopprocessinfos(self);
};

var int snaf_ragoutday;

instance dia_snaf_aftersuccess(c_info) {
    npc = vlk_581_snaf /*8519*/;
    nr = 2;
    condition = dia_snaf_aftersuccess_condition;
    information = dia_snaf_aftersuccess_info;
    permanent = true;
    description = "Òû ñêàçàë, ÷òî ÿ ñìîãó âçÿòü ñòîëüêî, ñêîëüêî çàõî÷ó...";
};

func int dia_snaf_aftersuccess_condition() {
    if ((snaf_zutaten == log_success) && (snaf_freembragout == true)) {
        return 1;
    };
};

func void dia_snaf_aftersuccess_info() {
    ai_output(other, self, "DIA_Snaf_AfterSuccess_15_00"); //Òû ñêàçàë, ÷òî ÿ ñìîãó âçÿòü ñòîëüêî, ñêîëüêî çàõî÷ó...
    if (snaf_ragoutday != wld_getday()) {
        ai_output(self, other, "DIA_Snaf_AfterSuccess_01_01"); //È ÿ òåáÿ íå îáìàíóë. Âîò, çàáèðàé òðè ïîðöèè.
        createinvitems(self, itfomeatbugragout, 3);
        b_giveinvitems(self, other, itfomeatbugragout /*4320*/, 3);
        snaf_ragoutday = wld_getday();
    }
    else {
        ai_output(self, other, "DIA_Snaf_AfterSuccess_01_02"); //Êîíå÷íî! Íî ñåãîäíÿ ó ìåíÿ óæå íè÷åãî íå îñòàëîñü. Ïðèõîäè çàâòðà.
    };
};

instance dia_snaf_wheremeatbugs(c_info) {
    npc = vlk_581_snaf /*8519*/;
    nr = 3;
    condition = dia_snaf_wheremeatbugs_condition;
    information = dia_snaf_wheremeatbugs_info;
    description = "Ãäå ìîæíî íàéòè ìÿñíûõ æóêîâ?";
};

func int dia_snaf_wheremeatbugs_condition() {
    if (snaf_zutaten == log_running) {
        return 1;
    };
};

func void dia_snaf_wheremeatbugs_info() {
    ai_output(other, self, "DIA_Snaf_WhereMeatbugs_15_00"); //Ãäå ìîæíî íàéòè ìÿñíûõ æóêîâ?
    ai_output(self, other, "DIA_Snaf_WhereMeatbugs_01_01"); //Äà íà ëþáîé ñâàëêå! Çàãëÿíè â ïóñòûå äîìà ó ñòåíû çàìêà - òàì íàâåðíÿêà íàéäåøü ïàðî÷êó.
    ai_output(self, other, "DIA_Snaf_WhereMeatbugs_01_02"); //È ïóñòü òåáÿ íå ñìóùàåò èõ âèä. Ðàãó èç íèõ ïîëó÷àåòñÿ - ïðîñòî îáúåäåíüå!
    b_logentry(ch1_snafsrecipe, ch1_snafsrecipe_5);
};

instance dia_snaf_wheremushrooms(c_info) {
    npc = vlk_581_snaf /*8519*/;
    nr = 4;
    condition = dia_snaf_wheremushrooms_condition;
    information = dia_snaf_wheremushrooms_info;
    description = "Ãäå ðàñòóò àäñêèå ãðèáû?";
};

func int dia_snaf_wheremushrooms_condition() {
    if (snaf_zutaten == log_running) {
        return 1;
    };
};

func void dia_snaf_wheremushrooms_info() {
    ai_output(other, self, "DIA_Snaf_WhereMushrooms_15_00"); //Ãäå ðàñòóò àäñêèå ãðèáû?
    ai_output(self, other, "DIA_Snaf_WhereMushrooms_01_01"); //Âûõîäèøü ÷åðåç þæíûå âîðîòà - òàì åùå ðàçðóøåííàÿ áàøíÿ - è ïðÿìî ïåðåä òîáîé áóäåò ïóñòûðü, íà êîòîðîì ðàñòóò ãðèáû.
    b_logentry(ch1_snafsrecipe, ch1_snafsrecipe_6);
};

instance dia_snaf_wherenek(c_info) {
    npc = vlk_581_snaf /*8519*/;
    nr = 5;
    condition = dia_snaf_wherenek_condition;
    information = dia_snaf_wherenek_info;
    description = "Êàê çâàëè òîãî ïàðíÿ, êîòîðîãî òû ïîñûëàë äî ìåíÿ?";
};

func int dia_snaf_wherenek_condition() {
    if (npc_knowsinfo(hero, dia_snaf_zutaten /*13002*/)) {
        return 1;
    };
};

func void dia_snaf_wherenek_info() {
    ai_output(other, self, "DIA_Snaf_WhereNek_15_00"); //Êàê çâàëè òîãî ïàðíÿ, êîòîðîãî òû ïîñûëàë äî ìåíÿ?
    ai_output(self, other, "DIA_Snaf_WhereNek_01_01"); //Íåê. Îí êàê-òî íå ïðèæèëñÿ çäåñü. ß äóìàþ, ñåé÷àñ îí óæå â Íîâîì Ëàãåðå.
    ai_output(self, other, "DIA_Snaf_WhereNek_01_02"); //ß îòïðàâèë åãî ñîáèðàòü ãðèáû - íî îí òàê è íå âåðíóëñÿ...
    if ((sly_lostnek != log_success) && (npc_gettrueguild(hero) == gil_none)) {
        log_createtopic(ch1_lostnek, log_mission);
        log_settopicstatus(ch1_lostnek, log_running);
    };
    b_logentry(ch1_lostnek, ch1_lostnek_6);
};

instance dia_melvin_exit(c_info) {
    npc = vlk_582_melvin /*8521*/;
    nr = 999;
    condition = dia_melvin_exit_condition;
    information = dia_melvin_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int dia_melvin_exit_condition() {
    return 1;
};

func void dia_melvin_exit_info() {
    ai_stopprocessinfos(self);
};

instance dia_melvin_hello(c_info) {
    npc = vlk_582_melvin /*8521*/;
    nr = 1;
    condition = dia_melvin_hello_condition;
    information = dia_melvin_hello_info;
    description = "Ïðèâåò! Òû âåäü èç ýòîãî Ëàãåðÿ, äà?";
};

func int dia_melvin_hello_condition() {
    return 1;
};

func void dia_melvin_hello_info() {
    ai_output(other, self, "DIA_Melvin_Hello_15_00"); //Ïðèâåò! Òû âåäü èç ýòîãî Ëàãåðÿ, äà?
    ai_output(self, other, "DIA_Melvin_Hello_03_01"); //Òåïåðü óæå äà! ß óøåë èç Ñòàðîãî Ëàãåðÿ åùå íåäåëþ íàçàä. Ó ìåíÿ òàì îñòàëñÿ ïðèÿòåëü - Äàñòè. ß ïðåäëîæèë åìó ïîéòè âìåñòå, íî îí ðåøèë ïîäîæäàòü.
    log_createtopic(ch1_recruitdusty, log_mission);
    log_settopicstatus(ch1_recruitdusty, log_running);
    b_logentry(ch1_recruitdusty, ch1_recruitdusty_7);
};

instance dia_melvin_metdusty(c_info) {
    npc = vlk_582_melvin /*8521*/;
    nr = 1;
    condition = dia_melvin_metdusty_condition;
    information = dia_melvin_metdusty_info;
    description = "ß çíàþ Äàñòè - ðàçãîâàðèâàë ñ íèì ñîâñåì íåäàâíî.";
};

func int dia_melvin_metdusty_condition() {
    if (npc_knowsinfo(hero, dia_melvin_hello /*13026*/) && npc_knowsinfo(hero, dia_dusty_hello /*12731*/)) {
        return 1;
    };
};

func void dia_melvin_metdusty_info() {
    ai_output(other, self, "DIA_Melvin_MetDusty_15_00"); //ß çíàþ Äàñòè - ðàçãîâàðèâàë ñ íèì ñîâñåì íåäàâíî.
    ai_output(self, other, "DIA_Melvin_MetDusty_03_01"); //Åñëè óâèäèøü åãî ñíîâà, ñêàæè, ÷òî îñòàâàòüñÿ òàì ãëóïî. Çäåñü â äåñÿòü ðàç ëó÷øå, ÷åì â Ñòàðîì Ëàãåðå, ãäå íàä òîáîé èçìûâàþòñÿ ýòè áîëâàíû-ñòðàæíèêè!
    ai_output(other, self, "DIA_Melvin_MetDusty_15_02"); //ß ïåðåäàì åìó, åñëè óâèæó.
};

instance vlk_583_glen_exit(c_info) {
    npc = vlk_583_glen /*8523*/;
    nr = 999;
    condition = vlk_583_glen_exit_condition;
    information = vlk_583_glen_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int vlk_583_glen_exit_condition() {
    return 1;
};

func void vlk_583_glen_exit_info() {
    ai_stopprocessinfos(self);
};

instance vlk_583_glen_info(c_info) {
    npc = vlk_583_glen /*8523*/;
    nr = 0;
    condition = vlk_583_glen_info_condition;
    information = vlk_583_glen_info_info;
    permanent = true;
    description = "×åãî íóæíî îïàñàòüñÿ â øàõòå?";
};

func int vlk_583_glen_info_condition() {
    return 1;
};

func void vlk_583_glen_info_info() {
    ai_output(other, self, "VLK_583_Glen_INFO_Info_15_01"); //×åãî íóæíî îïàñàòüñÿ â øàõòå?
    ai_output(self, other, "VLK_583_Glen_INFO_Info_02_02"); //Äåðæèñü ïîäàëüøå îò ïîëçóíîâ.
    ai_output(self, other, "VLK_583_Glen_INFO_Info_02_03"); //×åì íèæå òû ñïóñêàåøüñÿ, òåì áîëüøå áóäåò âîêðóã ýòèõ òâàðåé. Ìåðçêèå ïîðîæäåíèÿ Áåëüäæàðà!
    ai_output(self, other, "VLK_583_Glen_INFO_Info_02_04"); //Îíè òàÿòñÿ âî òüìå è ïîäæèäàþò ñâîþ äîáû÷ó. Òû ñëûøèøü, êàê èõ êîãîòêè öàðàïàþò êàìåíü, êîãäà îíè ïîäáèðàþòñÿ âñå áëèæå è áëèæå. ß âèäåë, êàê îíè óáèâàþò...
    ai_output(self, other, "VLK_583_Glen_INFO_Info_02_05"); //Îíè áûñòðû è áåçæàëîñòíû. Åñëè òåáå äîðîãà æèçíü, ëó÷øå óíîñè îòñþäà íîãè, ïîêà åùå öåë.
};

instance vlk_583_glen_lockpick(c_info) {
    npc = vlk_583_glen /*8523*/;
    nr = 0;
    condition = vlk_583_glen_lockpick_condition;
    information = vlk_583_glen_lockpick_info;
    description = "Ãîâîðÿò, çäåñü ìîæíî êóïèòü îòìû÷êè.";
};

func int vlk_583_glen_lockpick_condition() {
    if (npc_knowsinfo(hero, vlk_585_aleph_glen /*13075*/)) {
        return 1;
    };
};

func void vlk_583_glen_lockpick_info() {
    ai_output(other, self, "VLK_583_Glen_LOCKPICK_15_01"); //Ãîâîðÿò, çäåñü ìîæíî êóïèòü îòìû÷êè.
    ai_output(self, other, "VLK_583_Glen_LOCKPICK_02_02"); //Íó, îò òàêîãî ïðîíûðû, êàê òû, íè÷åãî íå ñêðîåøü, âåðíî? Ïî 10 êóñêîâ ðóäû çà øòóêó.
};

instance vlk_583_glen_buy(c_info) {
    npc = vlk_583_glen /*8523*/;
    nr = 0;
    condition = vlk_583_glen_buy_condition;
    information = vlk_583_glen_buy_info;
    permanent = true;
    trade = true;
    description = "(êóïèòü îòìû÷êè)";
};

func int vlk_583_glen_buy_condition() {
    if (npc_knowsinfo(hero, vlk_583_glen_lockpick /*13038*/)) {
        return 1;
    };
};

func void vlk_583_glen_buy_info() {
    ai_output(other, self, "VLK_583_Glen_BUY_Info_15_01"); //Ìíå íóæíû îòìû÷êè.
};

instance vlk_584_snipes_exit(c_info) {
    npc = vlk_584_snipes /*8525*/;
    nr = 999;
    condition = vlk_584_snipes_exit_condition;
    information = vlk_584_snipes_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int vlk_584_snipes_exit_condition() {
    return 1;
};

func void vlk_584_snipes_exit_info() {
    ai_output(other, self, "Info_Exit_Info_15_001"); //Óâèäèìñÿ!
    ai_output(self, other, "Info_Exit_Info_07_02"); //Äà, êîíå÷íî.
    ai_stopprocessinfos(self);
};

instance vlk_584_snipes_deal(c_info) {
    npc = vlk_584_snipes /*8525*/;
    nr = 0;
    condition = vlk_584_snipes_deal_condition;
    information = vlk_584_snipes_deal_info;
    description = "Êàê æèçíü?";
};

func int vlk_584_snipes_deal_condition() {
    return 1;
};

func void vlk_584_snipes_deal_info() {
    ai_output(other, self, "VLK_584_Snipes_DEAL_Info_15_01"); //Êàê äåëà?
    ai_output(self, other, "VLK_584_Snipes_DEAL_Info_07_02"); //Ó ìåíÿ åñòü äëÿ òåáÿ ðàáîòåíêà.
    ai_output(self, other, "VLK_584_Snipes_DEAL_Info_07_03"); //Åñëè òû îòâëå÷åøü Àðîíà îò ñóíäóêà, ÿ äàì òåáå 10 êóñêîâ ðóäû.
    snipes_deal = log_running;
    log_createtopic(ch2_snipesdeal, log_mission);
    log_settopicstatus(ch2_snipesdeal, log_running);
    b_logentry(ch2_snipesdeal, ch2_snipesdeal_5);
};

instance vlk_584_snipes_deal_run(c_info) {
    npc = vlk_584_snipes /*8525*/;
    nr = 0;
    condition = vlk_584_snipes_deal_run_condition;
    information = vlk_584_snipes_deal_run_info;
    description = "Òû äîëæåí ìíå 10 êóñêîâ!";
};

func int vlk_584_snipes_deal_run_condition() {
    if (snipes_deal == log_success) {
        return true;
    };
};

func void vlk_584_snipes_deal_run_info() {
    ai_output(other, self, "VLK_584_Snipes_DEAL_RUN_Info_15_01"); //Òû äîëæåí ìíå 10 êóñêîâ!
    ai_output(self, other, "VLK_584_Snipes_DEAL_RUN_Info_07_02"); //Âîò, òû çàñëóæèë èõ.
    ai_output(self, other, "VLK_584_Snipes_DEAL_RUN_Info_07_03"); //Äà, è âîò åùå ÷òî. Ó ìåíÿ åñòü êëþ÷ îò åãî ñóíäóêà. Äëÿ òåáÿ... Âñåãî çà 30 êóñêîâ!
    createinvitems(self, itminugget, 10);
    b_giveinvitems(self, other, itminugget /*4517*/, 10);
    createinvitem(self, itke_om_02);
    b_givexp(xp_lureaaronaway);
    b_logentry(ch2_snipesdeal, ch2_snipesdeal_6);
};

instance vlk_584_snipes_deal_2(c_info) {
    npc = vlk_584_snipes /*8525*/;
    nr = 0;
    condition = vlk_584_snipes_deal_2_condition;
    information = vlk_584_snipes_deal_2_info;
    permanent = true;
    description = "(êóïèòü êëþ÷)";
};

func int vlk_584_snipes_deal_2_condition() {
    if (npc_knowsinfo(hero, vlk_584_snipes_deal_run /*13050*/) && npc_hasitems(self, itke_om_02)) {
        return 1;
    };
};

func void vlk_584_snipes_deal_2_info() {
    ai_output(other, self, "VLK_584_Snipes_DEAL_2_Info_15_01"); //ß ïîêóïàþ êëþ÷.
    if (npc_hasitems(hero, itminugget) >= 30) {
        ai_output(self, other, "VLK_584_Snipes_DEAL_2_Info_07_02"); //Õîðîøàÿ ñäåëêà.
        ai_output(other, self, "VLK_584_Snipes_DEAL_2_Info_15_03"); //Îäíî òîëüêî ìåíÿ ñìóùàåò: ÷òî ñ ýòîãî ïîëó÷àåøü òû?
        ai_output(self, other, "VLK_584_Snipes_DEAL_2_Info_07_04"); //Âñåãäà ïðèÿòíî íàäóòü ñòðàæíèêîâ. À åñëè îíè íàéäóò ó ìåíÿ ñâîå áàðàõëî, ÿ ïîêîéíèê.
        b_giveinvitems(hero, self, itminugget /*4517*/, 30);
        b_giveinvitems(self, hero, itke_om_02 /*4633*/, 1);
        b_logentry(ch2_snipesdeal, ch2_snipesdeal_7);
    }
    else {
        ai_output(self, other, "VLK_584_Snipes_DEAL_2_Info_07_05"); //ß ñêàçàë: 30 êóñêîâ! Êëþ÷ ïðîòèâ ðóäû!
    };
};

instance vlk_585_aleph_exit(c_info) {
    npc = vlk_585_aleph /*8527*/;
    nr = 999;
    condition = vlk_585_aleph_exit_condition;
    information = vlk_585_aleph_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int vlk_585_aleph_exit_condition() {
    return 1;
};

func void vlk_585_aleph_exit_info() {
    if (!npc_knowsinfo(hero, grd_261_brandick_aleph /*9359*/)) {
        ai_output(other, self, "VLK_585_Aleph_Exit_Info_15_01"); //Óäà÷è!
        ai_output(self, other, "VLK_585_Aleph_Exit_Info_05_02"); //Íó, òû çíàåøü, ãäå ìåíÿ íàéòè.
    };
    ai_stopprocessinfos(self);
};

instance vlk_585_aleph_clever(c_info) {
    npc = vlk_585_aleph /*8527*/;
    condition = vlk_585_aleph_clever_condition;
    information = vlk_585_aleph_clever_info;
    important = true;
};

func int vlk_585_aleph_clever_condition() {
    return 1;
};

func void vlk_585_aleph_clever_info() {
    ai_output(self, other, "VLK_585_Aleph_CLEVER_Info_05_01"); //Õå-õå-õå, ñòðàæíèêàì ìåíÿ íèêîãäà íå ïîéìàòü!
};

instance vlk_585_aleph_guards(c_info) {
    npc = vlk_585_aleph /*8527*/;
    nr = 0;
    condition = vlk_585_aleph_guards_condition;
    information = vlk_585_aleph_guards_info;
    description = "Î ÷åì ýòî òû?";
};

func int vlk_585_aleph_guards_condition() {
    if (npc_knowsinfo(hero, vlk_585_aleph_clever /*13059*/)) {
        return 1;
    };
};

func void vlk_585_aleph_guards_info() {
    var c_npc brandick;

    ai_output(other, self, "VLK_585_Aleph_GUARDS_Info_15_01"); //Î ÷åì ýòî òû?
    ai_output(self, other, "VLK_585_Aleph_GUARDS_Info_05_02"); //ß íà÷èíàþ ðàáîòàòü, òîëüêî êîãäà ñòðàæíèêè ïîáëèçîñòè, à â îñòàëüíîå âðåìÿ ïðîñòî áîëòàþñü áåç äåëà.
    ai_output(other, self, "VLK_585_Aleph_GUARDS_Info_15_03"); //È îíè íè÷åãî íå ïîäîçðåâàþò?
    ai_output(self, other, "VLK_585_Aleph_GUARDS_Info_05_04"); //Ïîäîçðåâàþò, êîíå÷íî, - âåäü ÿ äîáûâàþ êóäà ìåíüøå ðóäû, ÷åì îñòàëüíûå. Åå âñåãäà íå õâàòàåò, òàê ÷òî ìíå ïðèõîäèòñÿ âåñòè îáìåí.
    ai_output(self, other, "VLK_585_Aleph_GUARDS_Info_05_05"); //Åñëè óìååøü ñëóøàòü, ìîæíî óçíàòü ìíîãî âñåãî ïîëåçíîãî. Âîò, íàïðèìåð, òû. Ó òåáÿ åñòü ñ ñîáîé ðóäà? Ñêàæåì, 10 êóñêîâ?
    npc_exchangeroutine(self, "BUSY");
    brandick = hlp_getnpc(grd_261_brandick);
    npc_exchangeroutine(brandick, "WATCH");
    ai_continueroutine(brandick);
};

instance vlk_585_aleph_info(c_info) {
    npc = vlk_585_aleph /*8527*/;
    nr = 0;
    condition = vlk_585_aleph_info_condition;
    information = vlk_585_aleph_info_info;
    description = "(äàòü 10 êóñêîâ ðóäû)";
};

func int vlk_585_aleph_info_condition() {
    if ((npc_hasitems(hero, itminugget) >= 10) && npc_knowsinfo(hero, vlk_585_aleph_guards /*13062*/)) {
        return 1;
    };
};

func void vlk_585_aleph_info_info() {
    ai_output(other, self, "VLK_585_Aleph_INFO_Info_15_01"); //Ëàäíî, âîò òåáå 10 êóñêîâ.
    ai_output(self, other, "VLK_585_Aleph_INFO_Info_05_02"); //Ñïàñèáî. Åñëè òû ïðîéäåøü ïî ãëàâíîé øàõòå è ñïóñòèøüñÿ âíèç ïî ìîñòêàì, âñêîðå òû óâèäèøü ïåùåðû.
    ai_output(self, other, "VLK_585_Aleph_INFO_Info_05_03"); //Âî âòîðîé ïåùåðå ñòîèò ñòðàæíèê, òàì æå íàõîäèòñÿ ñòàðûé ïðåññ.
    ai_output(self, other, "VLK_585_Aleph_INFO_Info_05_04"); //Òàì ãäå-òî ëåæèò öåëåáíûé ýëèêñèð. Òîëüêî áóäü îñòîðîæåí è äåðæèñü ïîäàëüøå îò ïîëçóíîâ!
    ai_output(self, other, "VLK_585_Aleph_INFO_Info_05_05"); //Åñëè òåáå ÷òî-íèáóäü ïîíàäîáèòñÿ èëè óçíàåøü ÷òî-òî èíòåðåñíîå, ïðèõîäè êî ìíå. Äóìàþ, ìû äîãîâîðèìñÿ...
    b_giveinvitems(hero, self, itminugget /*4517*/, 10);
};

instance vlk_585_aleph_angry(c_info) {
    npc = vlk_585_aleph /*8527*/;
    condition = vlk_585_aleph_angry_condition;
    information = vlk_585_aleph_angry_info;
    important = true;
};

func int vlk_585_aleph_angry_condition() {
    if (npc_knowsinfo(hero, grd_261_brandick_aleph /*9359*/)) {
        return 1;
    };
};

func void vlk_585_aleph_angry_info() {
    ai_output(self, other, "VLK_585_Aleph_ANGRY_Info_05_01"); //Òû ñäàë ìåíÿ Áðåíäèêó! Óáèðàéñÿ îòñþäà!
    ai_stopprocessinfos(self);
    npc_settempattitude(self, att_angry);
};

instance vlk_585_aleph_key(c_info) {
    npc = vlk_585_aleph /*8527*/;
    nr = 0;
    condition = vlk_585_aleph_key_condition;
    information = vlk_585_aleph_key_info;
    description = "Óçíàë ÷åãî-íèáóäü íîâåíüêîå?";
};

func int vlk_585_aleph_key_condition() {
    if ((!npc_knowsinfo(hero, grd_261_brandick_aleph /*9359*/)) && npc_knowsinfo(hero, vlk_585_aleph_info /*13066*/)) {
        return 1;
    };
};

func void vlk_585_aleph_key_info() {
    ai_output(other, self, "VLK_585_Aleph_KEY_Info_15_01"); //Óçíàë ÷åãî-íèáóäü íîâåíüêîå?
    ai_output(self, other, "VLK_585_Aleph_KEY_Info_05_02"); //Êîíå÷íî. À  ó òåáÿ åñòü 10 êóñêîâ?
};

instance vlk_585_aleph_glen(c_info) {
    npc = vlk_585_aleph /*8527*/;
    nr = 0;
    condition = vlk_585_aleph_glen_condition;
    information = vlk_585_aleph_glen_info;
    description = "(äàòü 10 êóñêîâ ðóäû)";
};

func int vlk_585_aleph_glen_condition() {
    if ((npc_hasitems(hero, itminugget) >= 10) && npc_knowsinfo(hero, vlk_585_aleph_key /*13072*/)) {
        return 1;
    };
};

func void vlk_585_aleph_glen_info() {
    ai_output(other, self, "VLK_585_Aleph_GLEN_Info_15_01"); //Çà íèõ ÿ õî÷ó ïîëó÷èòü äåéñòâèòåëüíî ïîëåçíóþ èíôîðìàöèþ!
    ai_output(self, other, "VLK_585_Aleph_GLEN_Info_05_02"); //Âèäèøü, çäåñü ïîëíî çàïåðòûõ ñóíäóêîâ. À îòìû÷êè ìîæíî êóïèòü ó Ãëåíà. Òàê çîâóò òîãî ðóäîêîïà, ÷òî ñòîèò íàâåðõó.
    b_giveinvitems(hero, self, itminugget /*4517*/, 10);
};

func void b_aleph_storageshedkey() {
    b_logentry(ch2_storageshed, ch2_storageshed_5);
};

instance vlk_585_aleph_schuppen(c_info) {
    npc = vlk_585_aleph /*8527*/;
    nr = 0;
    condition = vlk_585_aleph_schuppen_condition;
    information = vlk_585_aleph_schuppen_info;
    permanent = true;
    description = "Òåáå ÷òî-íèáóäü èçâåñòíî î êëþ÷å îò ñóíäóêîâ íà ñêëàäå?";
};

func int vlk_585_aleph_schuppen_condition() {
    if ((npc_knowsinfo(hero, grd_271_ulbert_drunk /*9420*/) && (!npc_knowsinfo(hero, grd_261_brandick_aleph /*9359*/))) && npc_hasitems(self, itke_om_03)) {
        return 1;
    };
};

func void vlk_585_aleph_schuppen_info() {
    ai_output(other, self, "VLK_585_Aleph_SCHUPPEN_Info_15_01"); //Òåáå ÷òî-íèáóäü èçâåñòíî î òîì, ãäå ìîæíî íàéòè êëþ÷ îò ñóíäóêîâ íà ñêëàäå?
    ai_output(self, other, "VLK_585_Aleph_SCHUPPEN_Info_05_02"); //Íó, ýòî çàâèñèò...
    ai_output(other, self, "VLK_585_Aleph_SCHUPPEN_Info_15_03"); //Îò òîãî, ñêîëüêî ÿ ñìîãó çàïëàòèòü?
    ai_output(self, other, "VLK_585_Aleph_SCHUPPEN_Info_05_04"); //Òû ñõâàòûâàåøü âñå íà ëåòó.
    info_clearchoices(vlk_585_aleph_schuppen /*13079*/);
    info_addchoice(vlk_585_aleph_schuppen /*13079*/, dialog_back, vlk_585_aleph_schuppen_back);
    info_addchoice(vlk_585_aleph_schuppen /*13079*/, "Çàïëàòèòü 50 êóñêîâ ðóäû.", vlk_585_aleph_schuppen_50);
    info_addchoice(vlk_585_aleph_schuppen /*13079*/, "Çàïëàòèòü 30 êóñêîâ ðóäû.", vlk_585_aleph_schuppen_30);
    info_addchoice(vlk_585_aleph_schuppen /*13079*/, "Çàïëàòèòü 15 êóñêîâ ðóäû.", vlk_585_aleph_schuppen_15);
};

func void vlk_585_aleph_schuppen_50() {
    ai_output(other, self, "VLK_585_Aleph_SCHUPPEN_50_15_01"); //ß äóìàþ, 50 êóñêîâ ðóäû áóäåò áîëåå ÷åì äîñòàòî÷íî.
    if (npc_hasitems(hero, itminugget) >= 50) {
        ai_output(self, other, "VLK_585_Aleph_SCHUPPEN_50_05_02"); //Ýòî äàæå áîëüøå, ÷åì ÿ ðàññ÷èòûâàë. Âîò, âîçüìè êëþ÷ - è åùå ýòî êîëüöî. Îíî âñåãäà ïðèíîñèëî ìíå óäà÷ó.
        npc_removeinvitem(self, itke_om_03 /*4634*/);
        b_giveinvitems(self, hero, itke_om_03 /*4634*/, 2);
        npc_removeinvitem(hero, itke_om_03 /*4634*/);
        if (npc_hasitems(self, staerkering)) {
            npc_removeinvitem(self, staerkering /*4950*/);
            createinvitem(hero, staerkering);
        };
        b_giveinvitems(hero, self, itminugget /*4517*/, 50);
        npc_setpermattitude(self, att_friendly);
        info_clearchoices(vlk_585_aleph_schuppen /*13079*/);
        b_aleph_storageshedkey();
    }
    else {
        ai_output(self, other, "VLK_585_Aleph_SCHUPPEN_50_05_03"); //Íî ó òåáÿ íåò ñòîëüêî ðóäû!
    };
};

func void vlk_585_aleph_schuppen_30() {
    ai_output(other, self, "VLK_585_Aleph_SCHUPPEN_30_15_01"); //×òî ñêàæåøü ïî ïîâîäó 30 êóñêîâ ðóäû?
    if (npc_hasitems(hero, itminugget) >= 30) {
        b_giveinvitems(self, other, itke_om_03 /*4634*/, 1);
        b_giveinvitems(hero, self, itminugget /*4517*/, 30);
        info_clearchoices(vlk_585_aleph_schuppen /*13079*/);
        ai_output(self, other, "VLK_585_Aleph_SCHUPPEN_30_05_02"); //Íîðìàëüíî. Òàê óæ ïîëó÷èëîñü, ÷òî êëþ÷ ó ìåíÿ êàê ðàç ñ ñîáîé.
        b_aleph_storageshedkey();
    }
    else {
        ai_output(self, other, "VLK_585_Aleph_SCHUPPEN_30_05_03"); //Íî ó òåáÿ íåò ñòîëüêî ðóäû!
    };
};

func void vlk_585_aleph_schuppen_15() {
    ai_output(other, self, "VLK_585_Aleph_SCHUPPEN_15_15_01"); //15 êóñêîâ ðóäû - âîò âñå, ÷òî ÿ ìîãó ïðåäëîæèòü.
    ai_output(self, other, "VLK_585_Aleph_SCHUPPEN_15_05_02"); //15 êóñêîâ?! ß íè÷åãî íå çíàþ íè î êàêîì êëþ÷å!
    info_clearchoices(vlk_585_aleph_schuppen /*13079*/);
    npc_removeinvitem(self, itke_om_03 /*4634*/);
};

func void vlk_585_aleph_schuppen_back() {
    info_clearchoices(vlk_585_aleph_schuppen /*13079*/);
};

instance vlk_585_aleph_dirty(c_info) {
    npc = vlk_585_aleph /*8527*/;
    nr = 0;
    condition = vlk_585_aleph_dirty_condition;
    information = vlk_585_aleph_dirty_info;
    permanent = true;
    description = "Òåáå ÷òî-íèáóäü èçâåñòíî î êëþ÷å îò ñóíäóêîâ íà ñêëàäå?";
};

func int vlk_585_aleph_dirty_condition() {
    if ((npc_knowsinfo(hero, grd_271_ulbert_drunk /*9420*/) && npc_knowsinfo(hero, grd_261_brandick_aleph /*9359*/)) && npc_hasitems(self, itke_om_03)) {
        return 1;
    };
};

func void vlk_585_aleph_dirty_info() {
    ai_output(other, self, "VLK_585_Aleph_DIRTY_Info_15_01"); //Òåáå ÷òî-íèáóäü èçâåñòíî î òîì, ãäå ìîæíî íàéòè êëþ÷ îò ñóíäóêîâ íà ñêëàäå?
    ai_output(self, other, "VLK_585_Aleph_DIRTY_Info_05_02"); //Íó, ýòî çàâèñèò...
    ai_output(other, self, "VLK_585_Aleph_DIRTY_Info_15_03"); //Îò òîãî, ñêîëüêî ÿ ñìîãó çàïëàòèòü?
    ai_output(self, other, "VLK_585_Aleph_DIRTY_Info_05_04"); //Òû ñõâàòûâàåøü âñå íà ëåòó. ß õî÷ó 100 êóñêîâ ðóäû.
    info_clearchoices(vlk_585_aleph_dirty /*13086*/);
    info_addchoice(vlk_585_aleph_dirty /*13086*/, "(çàïëàòèòü 100 êóñêîâ ðóäû)", vlk_585_aleph_dirty_100);
    info_addchoice(vlk_585_aleph_dirty /*13086*/, "(íå ïëàòèòü)", vlk_585_aleph_dirty_no);
};

func void vlk_585_aleph_dirty_100() {
    ai_output(other, self, "VLK_585_Aleph_DIRTY_100_Info_15_01"); //Ëàäíî, âûìîãàòåëü. Âîò òâîè 100 êóñêîâ.
    if (npc_hasitems(hero, itminugget) >= 100) {
        ai_output(self, other, "VLK_585_Aleph_DIRTY_100_Info_05_02"); //Âîò ýòî äåëî, ïðèÿòåëü! Äåðæè êëþ÷!
        b_giveinvitems(hero, self, itminugget /*4517*/, 100);
        b_giveinvitems(self, other, itke_om_03 /*4634*/, 1);
        info_clearchoices(vlk_585_aleph_dirty /*13086*/);
        b_aleph_storageshedkey();
    }
    else {
        ai_output(self, other, "VLK_585_Aleph_DIRTY_100_Info_05_03"); //ß ÷òî, ïîõîæ íà èäèîòà? 100 êóñêîâ, è íè ñàìîðîäêîì ìåíüøå!
    };
};

func void vlk_585_aleph_dirty_no() {
    ai_output(other, self, "VLK_585_Aleph_DIRTY_NO_Info_15_01"); //ß íå ñîáèðàþñü âûêèäûâàòü 100 êóñêîâ íà âåòåð!
    ai_output(self, other, "VLK_585_Aleph_DIRTY_NO_Info_05_02"); //Íó, ýòî æå òû ìåíÿ î ÷åì-òî ïðîñèë...
    info_clearchoices(vlk_585_aleph_dirty /*13086*/);
    npc_removeinvitem(self, itke_om_03 /*4634*/);
};

instance vlk_586_grimes_exit(c_info) {
    npc = vlk_586_grimes /*8530*/;
    nr = 999;
    condition = vlk_586_grimes_exit_condition;
    information = vlk_586_grimes_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int vlk_586_grimes_exit_condition() {
    return 1;
};

func void vlk_586_grimes_exit_info() {
    ai_output(other, self, "VLK_586_Grimes_Exit_Info_15_01"); //Æåëàþ óäà÷è!
    ai_output(self, other, "VLK_586_Grimes_Exit_Info_04_02"); //Òåáå òîæå, ìîé ìàëü÷èê, òåáå òîæå.
    ai_stopprocessinfos(self);
};

instance vlk_586_grimes_story(c_info) {
    npc = vlk_586_grimes /*8530*/;
    nr = 0;
    condition = vlk_586_grimes_story_condition;
    information = vlk_586_grimes_story_info;
    description = "Òû çäåñü äàâíî?";
};

func int vlk_586_grimes_story_condition() {
    if (npc_knowsinfo(hero, vlk_586_grimes_first /*13100*/)) {
        return 1;
    };
};

func void vlk_586_grimes_story_info() {
    ai_output(other, self, "VLK_586_Grimes_STORY_Info_15_01"); //Òû çäåñü äàâíî?
    ai_output(self, other, "VLK_586_Grimes_STORY_Info_04_02"); //ß çäåñü óæå ïî÷òè 10 ëåò. Ïîâåðü ìíå, çà ýòè ãîäû ÿ ìíîãî ïîíÿë è ìíîãîìó íàó÷èëñÿ.
    ai_output(self, other, "VLK_586_Grimes_STORY_Info_04_03"); //Íà ìîþ äîëþ âûïàëè òÿæêèå èñïûòàíèÿ, íî, êàê âèäèøü, ÿ óöåëåë.
    ai_output(self, other, "VLK_586_Grimes_STORY_Info_04_04"); //Äàâíûì-äàâíî ìû ðàáîòàëè íà çàáðîøåííîé øàõòå... Òåïåðü îíà îïÿòü ïóñòóåò. Áàëêè íàâåðíÿêà óæå îáðóøèëèñü...
    ai_output(self, other, "VLK_586_Grimes_STORY_Info_04_05"); //Íî ýòî âñåãî ëèøü ñòàðèêîâñêàÿ áîëòîâíÿ...
};

instance vlk_586_grimes_know(c_info) {
    npc = vlk_586_grimes /*8530*/;
    nr = 0;
    condition = vlk_586_grimes_know_condition;
    information = vlk_586_grimes_know_info;
    description = "Òû óæå íàâåðíÿêà ñëûøàë ðîññêàçíè î ðàçíûõ ïëàíàõ ïîáåãà.";
};

func int vlk_586_grimes_know_condition() {
    if (npc_knowsinfo(hero, vlk_586_grimes_story /*13094*/)) {
        return 1;
    };
};

func void vlk_586_grimes_know_info() {
    ai_output(other, self, "VLK_586_Grimes_KNOW_Info_15_01"); //Òû óæå íàâåðíÿêà ñëûøàë ðîññêàçíè î ðàçíûõ ïëàíàõ ïîáåãà.
    ai_output(self, other, "VLK_586_Grimes_KNOW_Info_04_02"); //ß çíàþ, ÷òî òåáå íå òåðïèòñÿ ñáåæàòü îòñþäà. Íî ïîçâîëü ÿ äàì òåáå îäèí ñîâåò: íå äóìàé îá ýòîì.
    ai_output(self, other, "VLK_586_Grimes_KNOW_Info_04_03"); //Ëó÷øå îñòàâèòü âñå ìûñëè î ïîáåãå. ß âèäåë òåõ, êòî ïûòàëñÿ ïðîéòè ÷åðåç Áàðüåð...
    ai_output(self, other, "VLK_586_Grimes_KNOW_Info_04_04"); //Ïîâåðü ìíå, îí îñòàíîâèò ëþáîãî. Íå ïîâòîðÿé èõ îøèáêè.
    ai_output(other, self, "VLK_586_Grimes_KNOW_Info_15_05"); //ß íå ñîáèðàþñü äî êîíöà ñâîèõ äíåé êîâûðÿòüñÿ â øàõòå!
    ai_output(self, other, "VLK_586_Grimes_KNOW_Info_04_06"); //Òåáÿ íèêòî è íå çàñòàâëÿåò. Âîçìîæíî, òû ñòàíåøü çäåñü áîëüøèì ÷åëîâåêîì, êàê çíàòü.
    ai_output(self, other, "VLK_586_Grimes_KNOW_Info_04_07"); //Òû ìîæåøü ìíîãîãî äîáèòüñÿ... Íî ýòî íå âàæíî: Áàðüåð âñå ðàâíî îñòàíîâèò òåáÿ.
};

instance vlk_586_grimes_first(c_info) {
    npc = vlk_586_grimes /*8530*/;
    condition = vlk_586_grimes_first_condition;
    information = vlk_586_grimes_first_info;
    important = true;
};

func int vlk_586_grimes_first_condition() {
    return 1;
};

func void vlk_586_grimes_first_info() {
    ai_output(self, other, "VLK_586_Grimes_FIRST_Info_04_02"); //Î! Íîâåíüêèé! Ïðîáîâàë êîãäà-íèáóäü äîáûâàòü ðóäó, ïàðåíü?
};

instance vlk_587_garp_exit(c_info) {
    npc = vlk_587_garp /*8532*/;
    nr = 999;
    condition = vlk_587_garp_exit_condition;
    information = vlk_587_garp_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int vlk_587_garp_exit_condition() {
    return 1;
};

func void vlk_587_garp_exit_info() {
    ai_stopprocessinfos(self);
};

instance vlk_587_garp_ork(c_info) {
    npc = vlk_587_garp /*8532*/;
    nr = 0;
    condition = vlk_587_garp_ork_condition;
    information = vlk_587_garp_ork_info;
    description = "×òî çäåñü äåëàåò îðê?";
};

func int vlk_587_garp_ork_condition() {
    return 1;
};

func void vlk_587_garp_ork_info() {
    ai_output(other, self, "Vlk_587_Garp_ORK_Info_15_01"); //×òî çäåñü äåëàåò îðê?
    ai_output(self, other, "Vlk_587_Garp_ORK_Info_01_02"); //Îí ðàáîòàåò çäåñü, ñ òåõ ïîð êàê åãî ïîéìàëè ñòðàæíèêè.
    ai_output(other, self, "Vlk_587_Garp_ORK_Info_15_03"); //Åãî äàæå íå çàêîâàëè â öåïè. Ïî÷åìó îí ïðîñòî íå óáåæèò?
    ai_output(self, other, "Vlk_587_Garp_ORK_Info_01_04"); //Îäèí ðàç îí óæå ïûòàëñÿ. Ñòðàæíèêè òàê îòäåëàëè åãî, ÷òî îí íå ìîã õîäèòü íåñêîëüêî íåäåëü. Ñ òåõ ïîð îí óæå íå ïîìûøëÿåò î ïîáåãå.
};

instance info_xardasdemon_exit(c_info) {
    npc = xardasdemon /*6739*/;
    nr = 999;
    condition = info_xardasdemon_exit_condition;
    information = info_xardasdemon_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int info_xardasdemon_exit_condition() {
    return 1;
};

func void info_xardasdemon_exit_info() {
    ai_output(self, other, "DIA_BaalCadar_NoTalk_Hi_02_01"); //(âçäîõ)
    ai_output(hero, self, "Info_Saturas_EXIT_15_01"); //... Ñìåðòíûé? ... Êòî, ÿ? ... Ëàäíî, ÿ èäó!
    ai_stopprocessinfos(self);
};

instance info_xardasdemon_intro(c_info) {
    npc = xardasdemon /*6739*/;
    condition = info_xardasdemon_intro_condition;
    information = info_xardasdemon_intro_info;
    important = true;
};

func int info_xardasdemon_intro_condition() {
    if (findxardas) {
        return true;
    };
};

func void info_xardasdemon_intro_info() {
    ai_turnaway(hero, self);
    ai_output(hero, self, "Info_XardasDemon_INTRO_15_01"); //Ïîñòîé... Êòî... Êòî ãîâîðèò ñî ìíîé?
    ai_whirlaround(hero, self);
    ai_output(hero, self, "Info_XardasDemon_INTRO_15_02"); //Òàê ýòî ÒÛ ãîâîðèë ñî ìíîé??? Êàê... Êàê òåáå óäàëîñü ïðîíèêíóòü â ìîè ìûñëè?
    ai_output(self, other, "DIA_BaalCadar_NoTalk_Hi_02_01"); //(âçäîõ)
    ai_output(hero, self, "Info_XardasDemon_INTRO_15_03"); //×òî òû åñòü?.. Ñëóãà ñâîåãî ïîâåëèòåëÿ?
    ai_output(hero, self, "Info_XardasDemon_INTRO_15_04"); //Òû ïîõîæ íà ïîðîæäåíèå àäà!
    ai_output(self, other, "DIA_BaalCadar_NoTalk_Hi_02_01"); //(âçäîõ)
    ai_output(hero, self, "Info_XardasDemon_INTRO_15_05"); //Õî÷åøü, ÷òîáû ÿ çàìîë÷àë?
};

instance info_xardasdemon_masterwho(c_info) {
    npc = xardasdemon /*6739*/;
    nr = 0;
    condition = info_xardasdemon_masterwho_condition;
    information = info_xardasdemon_masterwho_info;
    description = "Ïîñëóøàé, òâîåãî ïîâåëèòåëÿ ñëó÷àéíî çîâóò íå Êñàðäàñ?";
};

func int info_xardasdemon_masterwho_condition() {
    if (npc_knowsinfo(hero, info_xardasdemon_intro /*13112*/)) {
        return true;
    };
};

func void info_xardasdemon_masterwho_info() {
    ai_output(hero, self, "Info_XardasDemon_MASTERWHO_15_01"); //Ïîñëóøàé, òâîåãî ïîâåëèòåëÿ ñëó÷àéíî çîâóò íå Êñàðäàñ?
    ai_output(self, other, "DIA_BaalCadar_NoTalk_Hi_02_01"); //(âçäîõ)
    ai_output(hero, self, "Info_XardasDemon_MASTERWHO_15_02"); //Íó, õîðîøî... Èìåíà íå èãðàþò ðîëè... Ëàäíî.
    ai_output(hero, self, "Info_XardasDemon_MASTERWHO_15_03"); //Ïðîñòî ìíå êàæåòñÿ, ÷òî ýòî è åñòü áàøíÿ Êñàðäàñà.
};

instance info_xardasdemon_masterhow(c_info) {
    npc = xardasdemon /*6739*/;
    nr = 0;
    condition = info_xardasdemon_masterhow_condition;
    information = info_xardasdemon_masterhow_info;
    description = "Ìíå íóæíî ïîãîâîðèòü ñ òâîèì ïîâåëèòåëåì!";
};

func int info_xardasdemon_masterhow_condition() {
    if (npc_knowsinfo(hero, info_xardasdemon_intro /*13112*/)) {
        return true;
    };
};

func void info_xardasdemon_masterhow_info() {
    ai_output(hero, self, "Info_XardasDemon_MASTERHOW_15_01"); //Ìíå íóæíî ïîãîâîðèòü ñ òâîèì ïîâåëèòåëåì!
    ai_output(self, other, "DIA_BaalCadar_NoTalk_Hi_02_01"); //(âçäîõ)
    ai_output(hero, self, "Info_XardasDemon_MASTERHOW_15_02"); //... Íå äîâåðÿåò? ... Ìíå?? ... ×òî çà èñïûòàíèå???
    ai_output(self, other, "DIA_BaalCadar_NoTalk_Hi_02_01"); //(âçäîõ)
    ai_output(hero, self, "Info_XardasDemon_MASTERHOW_15_03"); //... À-àà... ß ïîíÿë... Òîò, êòî õî÷åò ïîãîâîðèòü ñ òâîèì ïîâåëèòåëåì, äîëæåí ïðåæäå äîêàçàòü, ÷òî îí ýòîãî äîñòîèí!
    ai_output(hero, self, "Info_XardasDemon_MASTERHOW_15_04"); //... Ïîñòîé, ÷òî ýòî áûëî? ... Äîêàçàòåëüñòâî? ... Ïîáåäà íàä ÷åì? ... Ïîáåäà íàä ñòèõèÿìè?
    ai_output(hero, self, "Info_XardasDemon_MASTERHOW_15_05"); //... Êàìåíü? ... Ëåä? ... Îãîíü?
    findgolemhearts = 1;
    b_logentry(ch4_findxardas, ch4_findxardas_8);
};

instance info_xardasdemon_noheart(c_info) {
    npc = xardasdemon /*6739*/;
    nr = 0;
    condition = info_xardasdemon_noheart_condition;
    information = info_xardasdemon_noheart_info;
    permanent = true;
    description = "Òû ãîâîðèøü çàãàäêàìè!";
};

func int info_xardasdemon_noheart_condition() {
    if ((((npc_knowsinfo(hero, info_xardasdemon_masterhow /*13118*/) && (!npc_hasitems(hero, itat_stonegolem_01))) && (!npc_hasitems(hero, itat_icegolem_01))) && (!npc_hasitems(hero, itat_firegolem_01))) && (findgolemhearts < 4)) {
        return true;
    };
};

func void info_xardasdemon_noheart_info() {
    ai_output(hero, self, "Info_XardasDemon_NOHEART_15_01"); //Òû ãîâîðèøü çàãàäêàìè!
    ai_output(self, other, "DIA_BaalCadar_NoTalk_Hi_02_01"); //(âçäîõ)
    ai_output(hero, self, "Info_XardasDemon_NOHEART_15_02"); //... Òû ýòî óæå ãîâîðèë, òû ïîâòîðÿåøüñÿ!
    ai_output(hero, self, "Info_XardasDemon_NOHEART_15_03"); //... Òåáå íóæíû äîêàçàòåëüñòâà ïîáåäû íàä ñòèõèÿìè Ëüäà, Îãíÿ è Êàìíÿ!
};

func void b_xardasdemon_giveheart() {
    if (findgolemhearts == 1) {
        ai_output(self, other, "DIA_BaalCadar_NoTalk_Hi_02_01"); //(âçäîõ)
        ai_output(hero, self, "Info_XardasDemon_GIVEHEART_15_01"); //... ×òî? ... Âåðíî! ... Óáåäèòåëüíûå äîêàçàòåëüñòâà!
        ai_output(hero, self, "Info_XardasDemon_GIVEHEART_15_02"); //... Íå õâàòàåò? Íå õâàòàåò åùå äâóõ?
        findgolemhearts = 2;
    }
    else if (findgolemhearts == 2) {
        ai_output(self, other, "DIA_BaalCadar_NoTalk_Hi_02_01"); //(âçäîõ)
        ai_output(hero, self, "Info_XardasDemon_GIVEHEART_15_03"); //... Äâîéñòâåííîñòü? ... Âòîðîå äîêàçàòåëüñòâî?
        ai_output(hero, self, "Info_XardasDemon_GIVEHEART_15_04"); //... Îñòàëîñü åùå îäíî?
        findgolemhearts = 3;
    }
    else {
        if (findgolemhearts == 3) {
            ai_output(self, other, "DIA_BaalCadar_NoTalk_Hi_02_01"); //(âçäîõ)
            ai_output(hero, self, "Info_XardasDemon_GIVEHEART_15_05"); //... Ñîâåðøåíñòâî? ... ß âûäåðæàë èñïûòàíèå?
            ai_output(hero, self, "Info_XardasDemon_GIVEHEART_15_06"); //Åñëè òàê, ÿ æåëàþ ïîãîâîðèòü ñ òâîèì ïîâåëèòåëåì ïðÿìî ñåé÷àñ!
            ai_output(hero, self, "Info_XardasDemon_GIVEHEART_15_07"); //... Êîíòðàðãóìåíòû? ... Î ÷åì ýòî òû? ... Ðóíà? ... Ðóíà äëÿ ìåíÿ?
            ai_output(hero, self, "Info_XardasDemon_GIVEHEART_15_08"); //Â òàêîì ñëó÷àå ÿ ïðèíèìàþ Ðóíó Òåëåïîðòàöèè â çíàê òâîåãî äîâåðèÿ!
            b_story_accesstoxardas();
        };
    };
};

instance info_xardasdemon_stoneheart(c_info) {
    npc = xardasdemon /*6739*/;
    nr = 0;
    condition = info_xardasdemon_stoneheart_condition;
    information = info_xardasdemon_stoneheart_info;
    description = "Âîò ñåðäöå êàìåííîãî ãîëåìà.";
};

func int info_xardasdemon_stoneheart_condition() {
    if (npc_knowsinfo(hero, info_xardasdemon_masterhow /*13118*/) && npc_hasitems(hero, itat_stonegolem_01)) {
        return true;
    };
};

func void info_xardasdemon_stoneheart_info() {
    ai_output(hero, self, "Info_XardasDemon_STONEHEART_15_01"); //Âîò ñåðäöå êàìåííîãî ãîëåìà.
    b_giveinvitems(hero, self, itat_stonegolem_01 /*4092*/, 1);
    npc_removeinvitem(self, itat_stonegolem_01 /*4092*/);
    b_xardasdemon_giveheart();
};

instance info_xardasdemon_iceheart(c_info) {
    npc = xardasdemon /*6739*/;
    nr = 0;
    condition = info_xardasdemon_iceheart_condition;
    information = info_xardasdemon_iceheart_info;
    description = "Ýòî ñåðäöå ëåäÿíîãî ãîëåìà ìîæåò ñëóæèòü äîêàçàòåëüñòâîì?";
};

func int info_xardasdemon_iceheart_condition() {
    if (npc_knowsinfo(hero, info_xardasdemon_masterhow /*13118*/) && npc_hasitems(hero, itat_icegolem_01)) {
        return true;
    };
};

func void info_xardasdemon_iceheart_info() {
    ai_output(hero, self, "Info_XardasDemon_ICEHEART_15_01"); //Ýòî ñåðäöå ëåäÿíîãî ãîëåìà ìîæåò ñëóæèòü äîêàçàòåëüñòâîì?
    b_giveinvitems(hero, self, itat_icegolem_01 /*4094*/, 1);
    b_xardasdemon_giveheart();
};

instance info_xardasdemon_fireheart(c_info) {
    npc = xardasdemon /*6739*/;
    nr = 0;
    condition = info_xardasdemon_fireheart_condition;
    information = info_xardasdemon_fireheart_info;
    description = "Êàê íàñ÷åò ñåðäöà îãíåííîãî ãîëåìà?";
};

func int info_xardasdemon_fireheart_condition() {
    if (npc_knowsinfo(hero, info_xardasdemon_masterhow /*13118*/) && npc_hasitems(hero, itat_firegolem_01)) {
        return true;
    };
};

func void info_xardasdemon_fireheart_info() {
    ai_output(hero, self, "Info_XardasDemon_FIREHEART_15_01"); //Êàê íàñ÷åò ñåðäöà îãíåííîãî ãîëåìà?
    b_giveinvitems(hero, self, itat_firegolem_01 /*4093*/, 1);
    b_xardasdemon_giveheart();
};

func void startup_sub_psicamp() {
    wld_insertnpc(tpl_1400_gornabar /*8193*/, "PSI_START");
    wld_insertnpc(tpl_1401_gornakosh /*8196*/, "PSI_START");
    wld_insertnpc(gur_1200_yberion /*7448*/, "PSI_START");
    wld_insertnpc(gur_1201_corkalom /*7453*/, "PSI_START");
    wld_insertnpc(gur_1202_corangar /*7457*/, "PSI_START");
    wld_insertnpc(gur_1203_baaltondral /*7460*/, "PSI_START");
    wld_insertnpc(gur_1204_baalnamib /*7462*/, "PSI_START");
    wld_insertnpc(gur_1205_chani /*7464*/, "PSI_START");
    wld_insertnpc(gur_1207_natalia /*7467*/, "PSI_START");
    wld_insertnpc(gur_1208_baalcadar /*7470*/, "PSI_START");
    wld_insertnpc(gur_1209_baalorun /*7472*/, "PSI_START");
    wld_insertnpc(gur_1210_baaltyon /*7474*/, "PSI_START");
    wld_insertnpc(nov_1319_novize /*7634*/, "PSI_START");
    wld_insertnpc(nov_1320_novize /*7637*/, "PSI_START");
    wld_insertnpc(nov_1337_novize /*7673*/, "PSI_START");
    wld_insertnpc(nov_1338_novize /*7676*/, "PSI_START");
    wld_insertnpc(nov_1339_novize /*7679*/, "PSI_START");
    wld_insertnpc(nov_1341_novize /*7684*/, "PSI_START");
    wld_insertnpc(nov_1343_novize /*7689*/, "PSI_START");
    wld_insertnpc(nov_1344_novize /*7692*/, "PSI_START");
    wld_insertnpc(nov_1346_novize /*7697*/, "PSI_START");
    wld_insertnpc(nov_1347_novize /*7700*/, "PSI_START");
    wld_insertnpc(nov_1348_novize /*7703*/, "PSI_START");
    wld_insertnpc(nov_1349_novize /*7706*/, "PSI_START");
    wld_insertnpc(nov_1300_talas /*7581*/, "PSI_START");
    wld_insertnpc(nov_1301_caine /*7588*/, "PSI_START");
    wld_insertnpc(nov_1303_nyras /*7592*/, "PSI_START");
    wld_insertnpc(nov_1305_joru /*7597*/, "PSI_START");
    wld_insertnpc(nov_1306_novize /*7599*/, "PSI_START");
    wld_insertnpc(nov_1307_novize /*7601*/, "PSI_START");
    wld_insertnpc(nov_1308_novize /*7603*/, "PSI_START");
    wld_insertnpc(nov_1309_novize /*7605*/, "PSI_START");
    wld_insertnpc(nov_1310_ghorim /*7607*/, "PSI_START");
    wld_insertnpc(nov_1311_novize /*7610*/, "PSI_START");
    wld_insertnpc(nov_1312_darrion /*7612*/, "PSI_START");
    wld_insertnpc(nov_1313_novize /*7618*/, "PSI_START");
    wld_insertnpc(nov_1314_novize /*7620*/, "PSI_START");
    wld_insertnpc(nov_1315_novize /*7622*/, "PSI_START");
    wld_insertnpc(nov_1316_novize /*7624*/, "PSI_START");
    wld_insertnpc(nov_1317_novize /*7630*/, "PSI_START");
    wld_insertnpc(nov_1318_novize /*7632*/, "PSI_START");
    wld_insertnpc(nov_1321_novize /*7640*/, "PSI_START");
    wld_insertnpc(nov_1322_novize /*7642*/, "PSI_START");
    wld_insertnpc(nov_1323_novize /*7644*/, "PSI_START");
    wld_insertnpc(nov_1324_novize /*7646*/, "PSI_START");
    wld_insertnpc(nov_1325_novize /*7648*/, "PSI_START");
    wld_insertnpc(nov_1326_novize /*7650*/, "PSI_START");
    wld_insertnpc(nov_1327_novize /*7652*/, "PSI_START");
    wld_insertnpc(nov_1336_novize /*7671*/, "PSI_START");
    wld_insertnpc(nov_1340_novize /*7682*/, "PSI_START");
    wld_insertnpc(nov_1342_novize /*7687*/, "PSI_START");
    wld_insertnpc(nov_1345_novize /*7695*/, "PSI_START");
    wld_insertnpc(nov_1350_novize /*7709*/, "PSI_START");
    wld_insertnpc(nov_1351_novize /*7711*/, "PSI_START");
    wld_insertnpc(nov_1353_novize /*7717*/, "PSI_START");
    wld_insertnpc(nov_1354_novize /*7719*/, "PSI_START");
    wld_insertnpc(nov_1355_novize /*7721*/, "PSI_START");
    wld_insertnpc(nov_1357_fortuno /*7726*/, "PSI_START");
    wld_insertnpc(nov_1358_harlok /*7728*/, "PSI_START");
    wld_insertnpc(nov_1302_viran /*7590*/, "PSI_START");
    wld_insertnpc(nov_1328_novize /*7654*/, "PSI_START");
    wld_insertnpc(nov_1329_novize /*7656*/, "PSI_START");
    wld_insertnpc(nov_1304_balor /*7595*/, "PSI_START");
    wld_insertnpc(nov_1334_novize /*7667*/, "PSI_START");
    wld_insertnpc(nov_1335_novize /*7669*/, "PSI_START");
    wld_insertnpc(nov_1371_baalnetbek /*7767*/, "PSI_START");
    wld_insertnpc(nov_1356_shrat /*7723*/, "PSI_START");
    wld_insertnpc(tpl_1402_gornatoth /*8199*/, "PSI_START");
    wld_insertnpc(tpl_1403_templer /*8201*/, "PSI_START");
    wld_insertnpc(tpl_1404_templer /*8207*/, "PSI_START");
    wld_insertnpc(tpl_1405_gornaran /*8209*/, "PSI_START");
    wld_insertnpc(tpl_1406_templer /*8215*/, "PSI_START");
    wld_insertnpc(tpl_1408_templer /*8220*/, "PSI_START");
    wld_insertnpc(tpl_1409_templer /*8222*/, "PSI_START");
    wld_insertnpc(tpl_1410_templer /*8224*/, "PSI_START");
    wld_insertnpc(tpl_1411_templer /*8226*/, "PSI_START");
    wld_insertnpc(tpl_1412_templer /*8228*/, "PSI_START");
    wld_insertnpc(tpl_1413_templer /*8230*/, "PSI_START");
    wld_insertnpc(tpl_1414_templer /*8232*/, "PSI_START");
    wld_insertnpc(tpl_1415_templer /*8234*/, "PSI_START");
    wld_insertnpc(tpl_1416_templer /*8236*/, "PSI_START");
    wld_insertnpc(tpl_1417_templer /*8238*/, "PSI_START");
    wld_insertnpc(tpl_1418_templer /*8240*/, "PSI_START");
    wld_insertnpc(tpl_1419_templer /*8242*/, "PSI_START");
    wld_insertnpc(tpl_1420_templer /*8244*/, "PSI_START");
    wld_insertnpc(tpl_1430_templer /*8254*/, "PSI_START");
    wld_insertnpc(tpl_1431_templer /*8256*/, "PSI_START");
    wld_insertnpc(tpl_1432_templer /*8258*/, "PSI_START");
    wld_insertnpc(tpl_1439_gornadrak /*8279*/, "PSI_START");
    wld_insertnpc(tpl_1440_templer /*8282*/, "PSI_START");
    wld_insertnpc(tpl_1441_templer /*8285*/, "PSI_START");
    wld_insertnpc(tpl_1442_templer /*8287*/, "PSI_START");
    wld_insertnpc(tpl_1423_templer /*8248*/, "PSI_START");
    wld_insertnpc(tpl_1424_templer /*8250*/, "PSI_START");
    wld_insertnpc(tpl_1425_templer /*8252*/, "PSI_START");
    wld_insertnpc(tpl_1407_templer /*8218*/, "PSI_START");
    wld_insertnpc(pc_psionic /*7989*/, "PSI_START");
    wld_insertnpc(vlk_582_melvin /*8521*/, "PSI_START");
    wld_insertnpc(gur_1211_baallukorow /*7488*/, "PSI_START");
    wld_insertnpc(tpl_1455_gorbobaow /*8324*/, "PSI_START");
};

func void init_sub_psicamp() {
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_01", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_01", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_01", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_02", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_02", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_02", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_03", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_03", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_03", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_04", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_04", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_04", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_05", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_05", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_05", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_06", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_06", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_06", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_07", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_07", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_07", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_08", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_08", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_08", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_09", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_09", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_09", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_10", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_10", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_10", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_11", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_11", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_11", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_12", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_12", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_12", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_13", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_13", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_13", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_14", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_14", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_14", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_15", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_15", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_15", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_16", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_16", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_16", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_17", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_17", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_17", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_18", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_18", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_18", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_19", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_19", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_19", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_20", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_20", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_20", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_21", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_21", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_21", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_22", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_22", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_22", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_23", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_23", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_23", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_24", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_24", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_24", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_25", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_25", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_25", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_26", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_26", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_26", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_27", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_27", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_27", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_28", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_28", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_28", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_29", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_29", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_29", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_30", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_30", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_30", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_31", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_31", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_31", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_32", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_32", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_32", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_33", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_33", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_33", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_34", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_34", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_34", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_35", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_35", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_35", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_36", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_36", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_36", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_37", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_37", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_37", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_38", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_38", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_38", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_39", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_39", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_39", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_40", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_40", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_40", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_41", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_41", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_41", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_42", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_42", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_42", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_43", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_43", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_43", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_44", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_44", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_44", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_45", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_45", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_45", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_46", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_46", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_46", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_47", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_47", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_47", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_48", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_48", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_48", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_49", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_49", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_49", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_50", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_50", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_50", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_51", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_51", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_51", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_52", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_52", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_52", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_53", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_53", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_53", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_54", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_54", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_54", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_55", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_55", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_55", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_56", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_56", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_56", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_57", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_57", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_57", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_58", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_58", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_58", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_59", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_59", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_59", 0);
    wld_setobjectroutine(0, 0, "PC_CRYSTALLIGHT_60", 1);
    wld_setobjectroutine(20, 0, "PC_CRYSTALLIGHT_60", 1);
    wld_setobjectroutine(5, 0, "PC_CRYSTALLIGHT_60", 0);
    wld_assignroomtoguild("PSIH01", gil_nov);
    wld_assignroomtoguild("PSIH02", gil_nov);
    wld_assignroomtoguild("PSIH03", gil_nov);
    wld_assignroomtoguild("PSIH04", gil_nov);
    wld_assignroomtoguild("PSIH05", gil_nov);
    wld_assignroomtoguild("PSIH06", gil_nov);
    wld_assignroomtoguild("PSIH07", gil_nov);
    wld_assignroomtoguild("PSIH08", gil_nov);
    wld_assignroomtoguild("PSIH09", gil_nov);
    wld_assignroomtoguild("PSIH10", gil_nov);
    wld_assignroomtoguild("PSIH11", gil_nov);
    wld_assignroomtoguild("PSIH12", gil_nov);
    wld_assignroomtoguild("PSIH13", gil_nov);
    wld_assignroomtoguild("PSIH14", gil_nov);
    wld_assignroomtoguild("PSIH15", gil_nov);
    wld_assignroomtoguild("PSIH16", gil_nov);
    wld_assignroomtoguild("PSIH17", gil_nov);
    wld_assignroomtoguild("PSIH18", gil_nov);
    wld_assignroomtoguild("PSIH19", gil_nov);
    wld_assignroomtoguild("PSIH20", gil_nov);
    wld_assignroomtoguild("PSIH21", gil_nov);
    wld_assignroomtoguild("PSIH22", gil_nov);
    wld_assignroomtoguild("PSIH24", gil_nov);
    wld_assignroomtoguild("PSIH26", gil_nov);
    wld_assignroomtoguild("PSIH27", gil_nov);
    wld_assignroomtoguild("PSIH28", gil_nov);
    wld_assignroomtoguild("PSIH29", gil_nov);
    wld_assignroomtoguild("PSIH30", gil_nov);
    wld_assignroomtoguild("PSIH31", gil_nov);
    wld_assignroomtoguild("PSIH32", gil_nov);
    wld_assignroomtoguild("PSIH33", gil_nov);
    wld_assignroomtoguild("PSIH34", gil_nov);
    wld_assignroomtoguild("PSIH35", gil_nov);
    wld_assignroomtoguild("PSIH36", gil_nov);
};

func void startup_sub_newcamp() {
    wld_insertnpc(org_829_organisator /*7836*/, "NC_DAM");
    wld_insertnpc(org_830_organisator /*7838*/, "NC_DAM");
    wld_insertnpc(org_831_organisator /*7840*/, "NC_DAM");
    wld_insertnpc(org_832_organisator /*7842*/, "NC_DAM");
    wld_insertnpc(org_834_organisator /*7846*/, "NC_DAM");
    wld_insertnpc(bau_900_ricelord /*7102*/, "NC_DAM");
    wld_insertnpc(bau_901_horatio /*7104*/, "NC_DAM");
    wld_insertnpc(bau_902_pock /*7106*/, "NC_DAM");
    wld_insertnpc(bau_903_rufus /*7108*/, "NC_DAM");
    wld_insertnpc(bau_904_bauer /*7110*/, "NC_DAM");
    wld_insertnpc(bau_905_bauer /*7112*/, "NC_DAM");
    wld_insertnpc(bau_907_bauer /*7114*/, "NC_DAM");
    wld_insertnpc(bau_908_bauer /*7116*/, "NC_DAM");
    wld_insertnpc(bau_912_jeremiah /*7118*/, "NC_DAM");
    wld_insertnpc(bau_914_bauer /*7120*/, "NC_DAM");
    wld_insertnpc(bau_915_bauer /*7122*/, "NC_DAM");
    wld_insertnpc(bau_916_bauer /*7124*/, "NC_DAM");
    wld_insertnpc(bau_917_bauer /*7126*/, "NC_DAM");
    wld_insertnpc(bau_919_bauer /*7128*/, "NC_DAM");
    wld_insertnpc(bau_920_bauer /*7130*/, "NC_DAM");
    wld_insertnpc(bau_921_bauer /*7132*/, "NC_DAM");
    wld_insertnpc(bau_922_bauer /*7134*/, "NC_DAM");
    wld_insertnpc(bau_923_bauer /*7136*/, "NC_DAM");
    wld_insertnpc(bau_924_bauer /*7138*/, "NC_DAM");
    wld_insertnpc(bau_927_bauer /*7144*/, "NC_DAM");
    wld_insertnpc(bau_928_bauer /*7146*/, "NC_DAM");
    wld_insertnpc(bau_929_bauer /*7148*/, "NC_DAM");
    wld_insertnpc(bau_930_bauer /*7150*/, "NC_DAM");
    wld_insertnpc(bau_935_homer /*7152*/, "NC_DAM");
    wld_insertnpc(kdw_600_saturas /*7557*/, "NC_DAM");
    wld_insertnpc(kdw_601_myxir /*7559*/, "NC_DAM");
    wld_insertnpc(kdw_602_merdarion /*7561*/, "NC_DAM");
    wld_insertnpc(kdw_603_nefarius /*7564*/, "NC_DAM");
    wld_insertnpc(kdw_604_cronos /*7566*/, "NC_DAM");
    wld_insertnpc(kdw_605_riordian /*7568*/, "NC_DAM");
    wld_insertnpc(org_800_organisator /*7794*/, "NC_DAM");
    wld_insertnpc(org_801_lares /*7796*/, "NC_DAM");
    wld_insertnpc(org_804_organisator /*7798*/, "NC_DAM");
    wld_insertnpc(org_806_organisator /*7800*/, "NC_DAM");
    wld_insertnpc(org_807_organisator /*7802*/, "NC_DAM");
    wld_insertnpc(org_810_organisator /*7804*/, "NC_DAM");
    wld_insertnpc(org_811_organisator /*7806*/, "NC_DAM");
    wld_insertnpc(org_815_organisator /*7808*/, "NC_DAM");
    wld_insertnpc(org_816_organisator /*7810*/, "NC_DAM");
    wld_insertnpc(org_817_organisator /*7812*/, "NC_DAM");
    wld_insertnpc(org_820_organisator /*7818*/, "NC_DAM");
    wld_insertnpc(org_821_organisator /*7820*/, "NC_DAM");
    wld_insertnpc(org_822_organisator /*7822*/, "NC_DAM");
    wld_insertnpc(org_823_organisator /*7824*/, "NC_DAM");
    wld_insertnpc(org_824_organisator /*7826*/, "NC_DAM");
    wld_insertnpc(org_825_organisator /*7828*/, "NC_DAM");
    wld_insertnpc(org_828_bruce /*7834*/, "NC_DAM");
    wld_insertnpc(org_833_buster /*7844*/, "NC_DAM");
    wld_insertnpc(org_836_organisator /*7848*/, "NC_DAM");
    wld_insertnpc(org_837_organisator /*7850*/, "NC_DAM");
    wld_insertnpc(org_838_organisator /*7852*/, "NC_DAM");
    wld_insertnpc(org_840_roscoe /*7854*/, "NC_DAM");
    wld_insertnpc(org_841_silas /*7856*/, "NC_DAM");
    wld_insertnpc(org_842_shrike /*7858*/, "NC_DAM");
    wld_insertnpc(org_843_sharky /*7861*/, "NC_DAM");
    wld_insertnpc(org_844_lefty /*7863*/, "NC_DAM");
    wld_insertnpc(org_845_schlaeger /*7865*/, "NC_DAM");
    wld_insertnpc(org_846_schlaeger /*7867*/, "NC_DAM");
    wld_insertnpc(org_850_wedge /*7869*/, "NC_DAM");
    wld_insertnpc(org_851_butch /*7871*/, "NC_DAM");
    wld_insertnpc(org_855_wolf /*7873*/, "NC_DAM");
    wld_insertnpc(org_873_cipher /*7932*/, "NC_DAM");
    wld_insertnpc(org_875_tuersteher /*7937*/, "NC_DAM");
    wld_insertnpc(org_876_tuersteher /*7939*/, "NC_DAM");
    wld_insertnpc(sld_700_lee /*8046*/, "NC_DAM");
    wld_insertnpc(sld_701_orik /*8050*/, "NC_DAM");
    wld_insertnpc(sld_702_soeldner /*8052*/, "NC_DAM");
    wld_insertnpc(sld_703_soeldner /*8054*/, "NC_DAM");
    wld_insertnpc(sld_704_blade /*8056*/, "NC_DAM");
    wld_insertnpc(sld_705_soeldner /*8058*/, "NC_DAM");
    wld_insertnpc(sld_706_soeldner /*8060*/, "NC_DAM");
    wld_insertnpc(sld_707_soeldner /*8062*/, "NC_DAM");
    wld_insertnpc(sld_708_soeldner /*8064*/, "NC_DAM");
    wld_insertnpc(sld_709_cord /*8066*/, "NC_DAM");
    wld_insertnpc(sld_710_soeldner /*8069*/, "NC_DAM");
    wld_insertnpc(sld_720_soeldner /*8071*/, "NC_DAM");
    wld_insertnpc(sld_723_soeldner /*8073*/, "NC_DAM");
    wld_insertnpc(sld_725_soeldner /*8075*/, "NC_DAM");
    wld_insertnpc(sld_726_soeldner /*8078*/, "NC_DAM");
    wld_insertnpc(sld_727_soeldner /*8081*/, "NC_DAM");
    wld_insertnpc(sld_728_jarvis /*8083*/, "NC_DAM");
    wld_insertnpc(sld_730_soeldner /*8088*/, "NC_DAM");
    wld_insertnpc(sld_731_soeldner /*8090*/, "NC_DAM");
    wld_insertnpc(sld_732_soeldner /*8092*/, "NC_DAM");
    wld_insertnpc(sld_733_soeldner /*8094*/, "NC_DAM");
    wld_insertnpc(sld_735_soeldner /*8096*/, "NC_DAM");
    wld_insertnpc(sld_736_soeldner /*8099*/, "NC_DAM");
    wld_insertnpc(sld_737_torlof /*8102*/, "NC_DAM");
    wld_insertnpc(sld_738_soeldner /*8104*/, "NC_DAM");
    wld_insertnpc(pc_fighter /*7949*/, "NC_DAM");
    wld_insertnpc(sfb_1000_senyan /*8012*/, "NC_DAM");
    wld_insertnpc(sfb_1001_schuerfer /*8014*/, "NC_DAM");
    wld_insertnpc(nov_1332_baalkagan /*7663*/, "NC_DAM");
    wld_insertnpc(nov_1333_baalisidro /*7665*/, "NC_DAM");
    wld_insertnpc(damlurker /*6767*/, "NC_SPAWN_DAM_LURKER2");
};

func void init_sub_newcamp() {
    wld_assignroomtoguild("RICEB01", gil_bau);
    wld_assignroomtoguild("RICEB02", gil_bau);
    wld_assignroomtoguild("NLHU25", gil_org);
    wld_assignroomtoguild("NLHU26", gil_sld);
    wld_assignroomtoguild("NLHU27", gil_sld);
    wld_assignroomtoguild("NLHU31", gil_sld);
    wld_assignroomtoguild("NLHU32", gil_sld);
    wld_assignroomtoguild("NLHU23", gil_sld);
    wld_assignroomtoguild("NLHU24", gil_sld);
    wld_assignroomtoguild("NLHU30", gil_sld);
    wld_assignroomtoguild("NLHU29", gil_sld);
    wld_assignroomtoguild("NLHU28", gil_sld);
    wld_assignroomtoguild("NLHU22", gil_org);
    wld_assignroomtoguild("NLHU03", gil_org);
    wld_assignroomtoguild("NLHU05", gil_org);
    wld_assignroomtoguild("NLHU06", gil_org);
    wld_assignroomtoguild("NLHU21", gil_org);
    wld_assignroomtoguild("NLHU20", gil_org);
    wld_assignroomtoguild("NLHU19", gil_org);
    wld_assignroomtoguild("NLHU18", gil_org);
    wld_assignroomtoguild("NLHU17", gil_org);
    wld_assignroomtoguild("NLHU16", gil_org);
    wld_assignroomtoguild("NLHU15", gil_org);
    wld_assignroomtoguild("NLHU13", gil_org);
    wld_assignroomtoguild("NLHU12", gil_org);
    wld_assignroomtoguild("NLHU11", gil_org);
    wld_assignroomtoguild("NLHU10", gil_org);
    wld_assignroomtoguild("NLHU09", gil_org);
    wld_assignroomtoguild("NLHU08", gil_org);
    wld_assignroomtoguild("NLHU07", gil_org);
    wld_assignroomtoguild("NLHU04", gil_org);
    wld_assignroomtoguild("NLHU02", gil_org);
    wld_assignroomtoguild("NLHU01", gil_org);
    wld_assignroomtoguild("MAGE01", gil_kdw);
    wld_assignroomtoguild("MAGE03", gil_kdw);
    wld_assignroomtoguild("MAGE05", gil_kdw);
    wld_assignroomtoguild("MAGE06", gil_kdw);
};

func void startup_sub_oldcamp() {
    wld_insertnpc(vlk_501_buddler /*8364*/, "OC1");
    wld_insertnpc(vlk_502_buddler /*8366*/, "OC1");
    wld_insertnpc(vlk_503_buddler /*8368*/, "OC1");
    wld_insertnpc(vlk_504_buddler /*8370*/, "OC1");
    wld_insertnpc(vlk_505_buddler /*8372*/, "OC1");
    wld_insertnpc(vlk_506_buddler /*8374*/, "OC1");
    wld_insertnpc(vlk_507_buddler /*8376*/, "OC1");
    wld_insertnpc(vlk_508_buddler /*8378*/, "OC1");
    wld_insertnpc(vlk_509_buddler /*8380*/, "OC1");
    wld_insertnpc(vlk_510_buddler /*8382*/, "OC1");
    wld_insertnpc(vlk_511_herek /*8384*/, "OC1");
    wld_insertnpc(vlk_512_buddler /*8386*/, "OC1");
    wld_insertnpc(vlk_513_buddler /*8388*/, "OC1");
    wld_insertnpc(vlk_514_buddler /*8390*/, "OC1");
    wld_insertnpc(vlk_515_buddler /*8392*/, "OC1");
    wld_insertnpc(vlk_516_buddler /*8394*/, "OC1");
    wld_insertnpc(vlk_517_buddler /*8396*/, "OC1");
    wld_insertnpc(vlk_519_buddler /*8400*/, "OC1");
    wld_insertnpc(vlk_521_buddler /*8404*/, "OC1");
    wld_insertnpc(vlk_522_buddler /*8406*/, "OC1");
    wld_insertnpc(vlk_523_buddler /*8408*/, "OC1");
    wld_insertnpc(vlk_524_dusty /*8410*/, "OC1");
    wld_insertnpc(vlk_526_buddler /*8416*/, "OC1");
    wld_insertnpc(vlk_527_buddler /*8418*/, "OC1");
    wld_insertnpc(vlk_528_buddler /*8420*/, "OC1");
    wld_insertnpc(vlk_529_buddler /*8422*/, "OC1");
    wld_insertnpc(vlk_530_guy /*8424*/, "OC1");
    wld_insertnpc(vlk_531_buddler /*8426*/, "OC1");
    wld_insertnpc(vlk_532_buddler /*8428*/, "OC1");
    wld_insertnpc(vlk_533_buddler /*8430*/, "OC1");
    wld_insertnpc(vlk_535_buddler /*8434*/, "OC1");
    wld_insertnpc(vlk_536_kyle /*8436*/, "OC1");
    wld_insertnpc(vlk_538_huno /*8438*/, "OC1");
    wld_insertnpc(vlk_553_buddler /*8466*/, "OC1");
    wld_insertnpc(vlk_554_buddler /*8468*/, "OC1");
    wld_insertnpc(vlk_555_buddler /*8470*/, "OC1");
    wld_insertnpc(vlk_556_buddler /*8472*/, "OC1");
    wld_insertnpc(vlk_557_buddler /*8474*/, "OC1");
    wld_insertnpc(vlk_560_buddler /*8480*/, "OC1");
    wld_insertnpc(vlk_561_buddler /*8482*/, "OC1");
    wld_insertnpc(vlk_564_jesse /*8488*/, "OC1");
    wld_insertnpc(vlk_565_buddler /*8490*/, "OC1");
    wld_insertnpc(vlk_572_gravo /*8498*/, "OC1");
    wld_insertnpc(vlk_573_graham /*8500*/, "OC1");
    wld_insertnpc(vlk_574_mud /*8502*/, "OC1");
    wld_insertnpc(vlk_575_buddler /*8505*/, "OC1");
    wld_insertnpc(vlk_576_buddler /*8507*/, "OC1");
    wld_insertnpc(vlk_577_buddler /*8509*/, "OC1");
    wld_insertnpc(vlk_578_buddler /*8511*/, "OC1");
    wld_insertnpc(vlk_580_grim /*8515*/, "OC1");
    wld_insertnpc(vlk_581_snaf /*8519*/, "OC1");
    wld_insertnpc(ebr_100_gomez /*7172*/, "OC1");
    wld_insertnpc(ebr_101_scar /*7176*/, "OC1");
    wld_insertnpc(ebr_102_arto /*7179*/, "OC1");
    wld_insertnpc(ebr_105_raven /*7182*/, "OC1");
    wld_insertnpc(ebr_106_bartholo /*7187*/, "OC1");
    wld_insertnpc(ebr_108_velaya /*7190*/, "OC1");
    wld_insertnpc(ebr_109_syra /*7192*/, "OC1");
    wld_insertnpc(ebr_110_seraphia /*7194*/, "OC1");
    wld_insertnpc(grd_200_thorus /*7196*/, "OC1");
    wld_insertnpc(grd_201_jackal /*7198*/, "OC1");
    wld_insertnpc(grd_203_bullit /*7202*/, "OC1");
    wld_insertnpc(grd_204_gardist /*7205*/, "OC1");
    wld_insertnpc(grd_205_scorpio /*7207*/, "OC1");
    wld_insertnpc(grd_206_gardist /*7210*/, "OC1");
    wld_insertnpc(grd_208_cutter /*7212*/, "OC1");
    wld_insertnpc(grd_209_gardist /*7215*/, "OC1");
    wld_insertnpc(grd_210_scatty /*7217*/, "OC1");
    wld_insertnpc(grd_211_skip /*7219*/, "OC1");
    wld_insertnpc(grd_212_torwache /*7222*/, "OC1");
    wld_insertnpc(grd_213_torwache /*7227*/, "OC1");
    wld_insertnpc(grd_214_torwache /*7232*/, "OC1");
    wld_insertnpc(grd_215_torwache /*7236*/, "OC1");
    wld_insertnpc(grd_216_torwache /*7240*/, "OC1");
    wld_insertnpc(grd_217_torwache /*7244*/, "OC1");
    wld_insertnpc(grd_218_gardist /*7248*/, "OC1");
    wld_insertnpc(grd_219_stone /*7250*/, "OC1");
    wld_insertnpc(grd_220_gardist /*7254*/, "OC1");
    wld_insertnpc(grd_221_gardist /*7257*/, "OC1");
    wld_insertnpc(grd_222_gardist /*7260*/, "OC1");
    wld_insertnpc(grd_223_gardist /*7263*/, "OC1");
    wld_insertnpc(grd_225_gardist /*7268*/, "OC1");
    wld_insertnpc(grd_226_gardist /*7270*/, "OC1");
    wld_insertnpc(grd_227_gardist /*7272*/, "OC1");
    wld_insertnpc(grd_228_gardist /*7274*/, "OC1");
    wld_insertnpc(grd_229_gardist /*7280*/, "OC1");
    wld_insertnpc(grd_230_gardist /*7284*/, "OC1");
    wld_insertnpc(grd_231_gardist /*7289*/, "OC1");
    wld_insertnpc(grd_232_gardist /*7291*/, "OC1");
    wld_insertnpc(grd_233_bloodwyn /*7295*/, "OC1");
    wld_insertnpc(grd_239_gardist /*7309*/, "OC1");
    wld_insertnpc(grd_240_gardist /*7312*/, "OC1");
    wld_insertnpc(grd_241_gardist /*7317*/, "OC1");
    wld_insertnpc(grd_242_gardist /*7322*/, "OC1");
    wld_insertnpc(grd_243_gardist /*7327*/, "OC1");
    wld_insertnpc(grd_244_gardist /*7332*/, "OC1");
    wld_insertnpc(grd_245_gardist /*7336*/, "OC1");
    wld_insertnpc(grd_251_kirgo /*7344*/, "OC1");
    wld_insertnpc(grd_252_gardist /*7347*/, "OC1");
    wld_insertnpc(grd_253_gardist /*7351*/, "OC1");
    wld_insertnpc(grd_255_fletcher /*7360*/, "OC1");
    wld_insertnpc(grd_279_gardist /*7402*/, "OC1");
    wld_insertnpc(grd_280_gardist /*7404*/, "OC1");
    wld_insertnpc(kdf_400_rodriguez /*7535*/, "OC1");
    wld_insertnpc(kdf_401_damarok /*7538*/, "OC1");
    wld_insertnpc(kdf_402_corristo /*7541*/, "OC1");
    wld_insertnpc(kdf_403_drago /*7545*/, "OC1");
    wld_insertnpc(kdf_405_torrez /*7551*/, "OC1");
    wld_insertnpc(pc_mage /*7979*/, "OC1");
    wld_insertnpc(pc_thief /*8001*/, "OC1");
    wld_insertnpc(stt_304_schatten /*8143*/, "OC1");
    wld_insertnpc(stt_306_schatten /*8145*/, "OC1");
    wld_insertnpc(stt_309_whistler /*8147*/, "OC1");
    wld_insertnpc(stt_310_schatten /*8149*/, "OC1");
    wld_insertnpc(stt_311_fisk /*8151*/, "OC1");
    wld_insertnpc(stt_313_schatten /*8153*/, "OC1");
    wld_insertnpc(stt_314_schatten /*8155*/, "OC1");
    wld_insertnpc(stt_315_sly /*8157*/, "OC1");
    wld_insertnpc(stt_316_schatten /*8159*/, "OC1");
    wld_insertnpc(stt_318_schatten /*8161*/, "OC1");
    wld_insertnpc(stt_319_schatten /*8163*/, "OC1");
    wld_insertnpc(stt_322_schatten /*8165*/, "OC1");
    wld_insertnpc(stt_324_balam /*8170*/, "OC1");
    wld_insertnpc(stt_325_omid /*8172*/, "OC1");
    wld_insertnpc(stt_328_schatten /*8174*/, "OC1");
    wld_insertnpc(stt_329_dexter /*8176*/, "OC1");
    wld_insertnpc(stt_330_schatten /*8178*/, "OC1");
    wld_insertnpc(stt_331_fingers /*8181*/, "OC1");
    wld_insertnpc(nov_1330_baalparvez /*7658*/, "OC1");
    wld_insertnpc(nov_1331_baaltaran /*7661*/, "OC1");
    wld_insertnpc(org_826_mordrag /*7830*/, "OC1");
    wld_insertnpc(grd_265_gardist /*7377*/, "OC1");
    wld_insertnpc(sld_729_kharim /*8085*/, "OC1");
    wld_insertnpc(tpl_1422_gorhanis /*8246*/, "OC1");
    wld_insertnpc(meatbug /*6770*/, "FP_MEATBUG_SPAWN_1");
    wld_insertnpc(meatbug /*6770*/, "FP_MEATBUG_SPAWN_1");
    wld_insertnpc(meatbug /*6770*/, "FP_MEATBUG_SPAWN_1");
};

func void init_sub_oldcamp() {
    wld_setobjectroutine(0, 0, "OCR_ARENA_MAINGATE_TRIGGER", 1);
    wld_setobjectroutine(20, 0, "OCR_ARENA_MAINGATE_TRIGGER", 1);
    wld_setobjectroutine(8, 0, "OCR_ARENA_MAINGATE_TRIGGER", 0);
    wld_setmobroutine(0, 0, "FIREPLACE", 1);
    wld_setmobroutine(22, 0, "FIREPLACE", 1);
    wld_setmobroutine(5, 0, "FIREPLACE", 0);
    wld_setobjectroutine(0, 0, "OC_FIREPLACE_HIGH_01", 1);
    wld_setobjectroutine(20, 0, "OC_FIREPLACE_HIGH_01", 1);
    wld_setobjectroutine(5, 0, "OC_FIREPLACE_HIGH_01", 0);
    wld_setobjectroutine(0, 0, "OC_FIREPLACE_HIGH_02", 1);
    wld_setobjectroutine(20, 0, "OC_FIREPLACE_HIGH_02", 1);
    wld_setobjectroutine(5, 0, "OC_FIREPLACE_HIGH_02", 0);
    wld_setobjectroutine(0, 0, "OC_FIREPLACE_HIGH_03", 1);
    wld_setobjectroutine(20, 0, "OC_FIREPLACE_HIGH_03", 1);
    wld_setobjectroutine(5, 0, "OC_FIREPLACE_HIGH_03", 0);
    wld_setobjectroutine(0, 0, "OC_FIREPLACE_HIGH_04", 1);
    wld_setobjectroutine(20, 0, "OC_FIREPLACE_HIGH_04", 1);
    wld_setobjectroutine(5, 0, "OC_FIREPLACE_HIGH_04", 0);
    wld_setobjectroutine(0, 0, "OC_FIREPLACE_HIGH_05", 1);
    wld_setobjectroutine(20, 0, "OC_FIREPLACE_HIGH_05", 1);
    wld_setobjectroutine(5, 0, "OC_FIREPLACE_HIGH_05", 0);
    wld_setobjectroutine(0, 0, "OC_FIREPLACE_HIGH_06", 1);
    wld_setobjectroutine(20, 0, "OC_FIREPLACE_HIGH_06", 1);
    wld_setobjectroutine(5, 0, "OC_FIREPLACE_HIGH_06", 0);
    wld_setobjectroutine(0, 0, "OC_FIREPLACE_HIGH_07", 1);
    wld_setobjectroutine(20, 0, "OC_FIREPLACE_HIGH_07", 1);
    wld_setobjectroutine(5, 0, "OC_FIREPLACE_HIGH_07", 0);
    wld_setobjectroutine(0, 0, "OC_FIREPLACE_HIGH_08", 1);
    wld_setobjectroutine(20, 0, "OC_FIREPLACE_HIGH_08", 1);
    wld_setobjectroutine(5, 0, "OC_FIREPLACE_HIGH_08", 0);
    wld_setobjectroutine(0, 0, "OC_FIREPLACE_HIGH_09", 1);
    wld_setobjectroutine(20, 0, "OC_FIREPLACE_HIGH_09", 1);
    wld_setobjectroutine(5, 0, "OC_FIREPLACE_HIGH_09", 0);
    wld_setobjectroutine(0, 0, "OC_FIREPLACE_HIGH2_01", 1);
    wld_setobjectroutine(20, 0, "OC_FIREPLACE_HIGH2_01", 1);
    wld_setobjectroutine(5, 0, "OC_FIREPLACE_HIGH2_01", 0);
    wld_setobjectroutine(0, 0, "OC_FIREPLACE_HIGH2_02", 1);
    wld_setobjectroutine(20, 0, "OC_FIREPLACE_HIGH2_02", 1);
    wld_setobjectroutine(5, 0, "OC_FIREPLACE_HIGH2_02", 0);
    wld_setobjectroutine(0, 0, "OC_FIREPLACE_HIGH2_03", 1);
    wld_setobjectroutine(20, 0, "OC_FIREPLACE_HIGH2_03", 1);
    wld_setobjectroutine(5, 0, "OC_FIREPLACE_HIGH2_03", 0);
    wld_setobjectroutine(0, 0, "OC_FIREPLACE_HIGH2_04", 1);
    wld_setobjectroutine(20, 0, "OC_FIREPLACE_HIGH2_04", 1);
    wld_setobjectroutine(5, 0, "OC_FIREPLACE_HIGH2_04", 0);
    wld_setobjectroutine(0, 0, "OC_FIREPLACE_HIGH2_05", 1);
    wld_setobjectroutine(20, 0, "OC_FIREPLACE_HIGH2_05", 1);
    wld_setobjectroutine(5, 0, "OC_FIREPLACE_HIGH2_05", 0);
    wld_setobjectroutine(0, 0, "OC_FIREPLACE_HIGH2_06", 1);
    wld_setobjectroutine(20, 0, "OC_FIREPLACE_HIGH2_06", 1);
    wld_setobjectroutine(5, 0, "OC_FIREPLACE_HIGH2_06", 0);
    wld_setobjectroutine(0, 0, "OC_FIREPLACE_HIGH2_07", 1);
    wld_setobjectroutine(20, 0, "OC_FIREPLACE_HIGH2_07", 1);
    wld_setobjectroutine(5, 0, "OC_FIREPLACE_HIGH2_07", 0);
    wld_setobjectroutine(0, 0, "OC_FIREPLACE_HIGH2_08", 1);
    wld_setobjectroutine(20, 0, "OC_FIREPLACE_HIGH2_08", 1);
    wld_setobjectroutine(5, 0, "OC_FIREPLACE_HIGH2_08", 0);
    wld_setobjectroutine(0, 0, "OC_FIREPLACE_HIGH2_09", 1);
    wld_setobjectroutine(20, 0, "OC_FIREPLACE_HIGH2_09", 1);
    wld_setobjectroutine(5, 0, "OC_FIREPLACE_HIGH2_09", 0);
    wld_setobjectroutine(0, 0, "OC_FIREPLACE_HIGH2_10", 1);
    wld_setobjectroutine(20, 0, "OC_FIREPLACE_HIGH2_10", 1);
    wld_setobjectroutine(5, 0, "OC_FIREPLACE_HIGH2_10", 0);
    wld_setobjectroutine(20, 0, "OC_FIREPLACE_HIGH2_11", 1);
    wld_setobjectroutine(20, 0, "OC_FIREPLACE_HIGH2_11", 1);
    wld_setobjectroutine(5, 0, "OC_FIREPLACE_HIGH2_11", 0);
    wld_setobjectroutine(0, 0, "OC_FIREPLACE_HIGH2_12", 1);
    wld_setobjectroutine(20, 0, "OC_FIREPLACE_HIGH2_12", 1);
    wld_setobjectroutine(5, 0, "OC_FIREPLACE_HIGH2_12", 0);
    wld_setobjectroutine(0, 0, "OC_FIREPLACE_HIGH2_13", 1);
    wld_setobjectroutine(20, 0, "OC_FIREPLACE_HIGH2_13", 1);
    wld_setobjectroutine(5, 0, "OC_FIREPLACE_HIGH2_13", 0);
    wld_setobjectroutine(0, 0, "OC_FIREPLACE_HIGH2_14", 1);
    wld_setobjectroutine(20, 0, "OC_FIREPLACE_HIGH2_14", 1);
    wld_setobjectroutine(5, 0, "OC_FIREPLACE_HIGH2_14", 0);
    wld_setobjectroutine(0, 0, "OC_FIREPLACE_HIGH2_15", 1);
    wld_setobjectroutine(20, 0, "OC_FIREPLACE_HIGH2_15", 1);
    wld_setobjectroutine(5, 0, "OC_FIREPLACE_HIGH2_15", 0);
    wld_setobjectroutine(0, 0, "OC_FIREPLACE_HIGH2_16", 1);
    wld_setobjectroutine(20, 0, "OC_FIREPLACE_HIGH2_16", 1);
    wld_setobjectroutine(5, 0, "OC_FIREPLACE_HIGH2_16", 0);
    wld_setobjectroutine(0, 0, "OC_FIREPLACE_HIGH2_17", 1);
    wld_setobjectroutine(20, 0, "OC_FIREPLACE_HIGH2_17", 1);
    wld_setobjectroutine(5, 0, "OC_FIREPLACE_HIGH2_17", 0);
    wld_setobjectroutine(0, 0, "OC_FIREPLACE_HIGH2_18", 1);
    wld_setobjectroutine(20, 0, "OC_FIREPLACE_HIGH2_18", 1);
    wld_setobjectroutine(5, 0, "OC_FIREPLACE_HIGH2_18", 0);
    wld_setobjectroutine(0, 0, "OC_FIREPLACE_HIGH2_19", 1);
    wld_setobjectroutine(20, 0, "OC_FIREPLACE_HIGH2_19", 1);
    wld_setobjectroutine(5, 0, "OC_FIREPLACE_HIGH2_19", 0);
    wld_setobjectroutine(0, 0, "OC_FIREPLACE_HIGH2_20", 1);
    wld_setobjectroutine(20, 0, "OC_FIREPLACE_HIGH2_20", 1);
    wld_setobjectroutine(5, 0, "OC_FIREPLACE_HIGH2_20", 0);
    wld_setobjectroutine(0, 0, "OC_FIREPLACE_HIGH2_21", 1);
    wld_setobjectroutine(20, 0, "OC_FIREPLACE_HIGH2_21", 1);
    wld_setobjectroutine(5, 0, "OC_FIREPLACE_HIGH2_21", 0);
    wld_setobjectroutine(0, 0, "OC_FIREPLACE_HIGH2_22", 1);
    wld_setobjectroutine(20, 0, "OC_FIREPLACE_HIGH2_22", 1);
    wld_setobjectroutine(5, 0, "OC_FIREPLACE_HIGH2_22", 0);
    wld_setobjectroutine(0, 0, "OC_FIREPLACE_MIDDLE_01", 1);
    wld_setobjectroutine(20, 0, "OC_FIREPLACE_MIDDLE_01", 1);
    wld_setobjectroutine(5, 0, "OC_FIREPLACE_MIDDLE_01", 0);
    wld_setobjectroutine(0, 0, "OC_FIREPLACE_MIDDLE_01", 1);
    wld_setobjectroutine(20, 0, "OC_FIREPLACE_MIDDLE_01", 1);
    wld_setobjectroutine(5, 0, "OC_FIREPLACE_MIDDLE_01", 0);
    wld_setobjectroutine(0, 0, "OC_FIREPLACE_MIDDLE_02", 1);
    wld_setobjectroutine(20, 0, "OC_FIREPLACE_MIDDLE_02", 1);
    wld_setobjectroutine(5, 0, "OC_FIREPLACE_MIDDLE_02", 0);
    wld_setobjectroutine(0, 0, "OC_FIREPLACE_MIDDLE_03", 1);
    wld_setobjectroutine(20, 0, "OC_FIREPLACE_MIDDLE_03", 1);
    wld_setobjectroutine(5, 0, "OC_FIREPLACE_MIDDLE_03", 0);
    wld_setobjectroutine(0, 0, "OC_FIREPLACE_MIDDLE_04", 1);
    wld_setobjectroutine(20, 0, "OC_FIREPLACE_MIDDLE_04", 1);
    wld_setobjectroutine(5, 0, "OC_FIREPLACE_MIDDLE_04", 0);
    wld_assignroomtoguild("KI1", gil_grd);
    wld_assignroomtoguild("HH8", gil_grd);
    wld_assignroomtoguild("HH5", gil_grd);
    wld_assignroomtoguild("HH4", gil_grd);
    wld_assignroomtoguild("HH7", gil_grd);
    wld_assignroomtoguild("EG2", gil_grd);
    wld_assignroomtoguild("EG3", gil_grd);
    wld_assignroomtoguild("EG5", gil_grd);
    wld_assignroomtoguild("KLO", gil_grd);
    wld_assignroomtoguild("WG1", gil_grd);
    wld_assignroomtoguild("HE2", gil_grd);
    wld_assignroomtoguild("ocgateb", gil_grd);
    wld_assignroomtoguild("h*tte2", gil_vlk);
    wld_assignroomtoguild("h*tte3", gil_vlk);
    wld_assignroomtoguild("h*tte4", gil_vlk);
    wld_assignroomtoguild("h*tte5", gil_vlk);
    wld_assignroomtoguild("h*tte6", gil_vlk);
    wld_assignroomtoguild("h*tte7", gil_vlk);
    wld_assignroomtoguild("h*tte8", gil_vlk);
    wld_assignroomtoguild("h*tte9", gil_vlk);
    wld_assignroomtoguild("h*tte10", gil_vlk);
    wld_assignroomtoguild("h*tte11", gil_vlk);
    wld_assignroomtoguild("h*tte12", gil_vlk);
    wld_assignroomtoguild("h*tte13", gil_vlk);
    wld_assignroomtoguild("h*tte14", gil_vlk);
    wld_assignroomtoguild("h*tte15", gil_vlk);
    wld_assignroomtoguild("h*tte16", gil_vlk);
    wld_assignroomtoguild("h*tte18", gil_vlk);
    wld_assignroomtoguild("h*tte19", gil_vlk);
    wld_assignroomtoguild("h*tte20", gil_vlk);
    wld_assignroomtoguild("h*tte21", gil_vlk);
    wld_assignroomtoguild("h*tte22", gil_vlk);
    wld_assignroomtoguild("h*tte23", gil_vlk);
    wld_assignroomtoguild("h*tte24", gil_vlk);
    wld_assignroomtoguild("h*tte25", gil_vlk);
    wld_assignroomtoguild("h*tte27", gil_vlk);
    wld_assignroomtoguild("h*tte28", gil_vlk);
    wld_assignroomtoguild("h*tte29", gil_vlk);
    wld_assignroomtoguild("h*tte30", gil_vlk);
    wld_assignroomtoguild("h*tte31", gil_vlk);
    wld_assignroomtoguild("h*tte32", gil_vlk);
    wld_assignroomtoguild("h*tte33", gil_vlk);
    wld_assignroomtoguild("h*tte34", gil_vlk);
    wld_assignroomtoguild("h*tte35", gil_vlk);
    wld_assignroomtoguild("h*tte36", gil_vlk);
    wld_assignroomtoguild("h*tte37", gil_vlk);
    wld_assignroomtoguild("h*tte38", gil_vlk);
    wld_assignroomtoguild("h*tte39", gil_vlk);
    wld_assignroomtoguild("h*tte40", gil_vlk);
    wld_assignroomtoguild("h*tte41", gil_vlk);
    wld_assignroomtoguild("h*tte42", gil_vlk);
    wld_assignroomtoguild("h*tte43", gil_vlk);
    wld_assignroomtoguild("h*tte44", gil_vlk);
    wld_assignroomtoguild("h*tte45", gil_vlk);
    wld_assignroomtoguild("h*tte46", gil_vlk);
    wld_assignroomtoguild("h*tte47", gil_vlk);
    wld_assignroomtoguild("h*tte48", gil_vlk);
    wld_assignroomtoguild("h*tte49", gil_vlk);
    wld_assignroomtoguild("h*tte50", gil_vlk);
    wld_assignroomtoguild("h*tte51", gil_vlk);
    wld_assignroomtoguild("h*tte52", gil_vlk);
    wld_assignroomtoguild("h*tte53", gil_vlk);
    wld_assignroomtoguild("h*tte54", gil_vlk);
    wld_assignroomtoguild("h*tte55", gil_vlk);
    wld_assignroomtoguild("h*tte56", gil_vlk);
    wld_assignroomtoguild("h*tte57", gil_vlk);
    wld_assignroomtoguild("h*tte58", gil_vlk);
    wld_assignroomtoguild("h*tte59", gil_vlk);
    wld_assignroomtoguild("h*tte60", gil_vlk);
    wld_assignroomtoguild("h*tte61", gil_vlk);
    wld_assignroomtoguild("h*tte62", gil_vlk);
    wld_assignroomtoguild("h*tte63", gil_vlk);
    wld_assignroomtoguild("h*tte65", gil_vlk);
    wld_assignroomtoguild("h*tte66", gil_vlk);
    wld_assignroomtoguild("h*tte67", gil_vlk);
    wld_assignroomtoguild("h*tte69", gil_vlk);
    wld_assignroomtoguild("h*tte70", gil_vlk);
    wld_assignroomtoguild("h*tte71", gil_vlk);
    wld_assignroomtoguild("h*tte72", gil_vlk);
    wld_assignroomtoguild("h*tte73", gil_vlk);
    wld_assignroomtoguild("h*tte74", gil_vlk);
    wld_assignroomtoguild("h*tte75", gil_vlk);
    wld_assignroomtoguild("h*tte77", gil_vlk);
};

func void startup_sub_demontower() {
    wld_insertnpc(kdf_404_xardas /*7548*/, "DT_MAINGATE");
};

func void init_sub_demontower() {
};

func void startup_sub_freeminecamp() {
    wld_setmobroutine(0, 0, "FIREPLACE", 1);
    wld_setmobroutine(22, 0, "FIREPLACE", 1);
    wld_setmobroutine(5, 0, "FIREPLACE", 0);
    wld_insertnpc(sld_750_soeldner /*8106*/, "FMC_ENTRANCE");
    wld_insertnpc(sld_751_soeldner /*8108*/, "FMC_ENTRANCE");
    wld_insertnpc(sld_752_okyl /*8110*/, "FMC_ENTRANCE");
    wld_insertnpc(sld_753_baloro /*8112*/, "FMC_ENTRANCE");
    wld_insertnpc(sld_755_soeldner /*8114*/, "FMC_ENTRANCE");
    wld_insertnpc(sld_756_soeldner /*8116*/, "FMC_ENTRANCE");
    wld_insertnpc(sld_757_soeldner /*8118*/, "FMC_ENTRANCE");
    wld_insertnpc(sld_758_soeldner /*8120*/, "FMC_ENTRANCE");
    wld_insertnpc(sld_759_soeldner /*8122*/, "FMC_ENTRANCE");
    wld_insertnpc(sld_760_soeldner /*8124*/, "FMC_ENTRANCE");
    wld_insertnpc(sld_761_soeldner /*8126*/, "FMC_ENTRANCE");
    wld_insertnpc(sld_762_soeldner /*8128*/, "FMC_ENTRANCE");
    wld_insertnpc(sld_763_soeldner /*8130*/, "FMC_ENTRANCE");
    wld_insertnpc(sld_764_soeldner /*8132*/, "FMC_ENTRANCE");
    wld_insertnpc(sld_765_soeldner /*8134*/, "FMC_ENTRANCE");
    wld_insertnpc(sfb_1030_schuerfer /*8016*/, "FMC_ENTRANCE");
    wld_insertnpc(sfb_1031_schuerfer /*8018*/, "FMC_ENTRANCE");
    wld_insertnpc(sfb_1032_schuerfer /*8020*/, "FMC_ENTRANCE");
    wld_insertnpc(sfb_1033_schuerfer /*8022*/, "FMC_ENTRANCE");
    wld_insertnpc(sfb_1034_schuerfer /*8024*/, "FMC_ENTRANCE");
    wld_insertnpc(sfb_1035_schuerfer /*8026*/, "FMC_ENTRANCE");
    wld_insertnpc(sfb_1036_schuerfer /*8028*/, "FMC_ENTRANCE");
    wld_insertnpc(sfb_1037_swiney /*8030*/, "FMC_ENTRANCE");
    wld_insertnpc(sfb_1038_schuerfer /*8032*/, "FMC_ENTRANCE");
    wld_insertnpc(sfb_1039_schuerfer /*8034*/, "FMC_ENTRANCE");
    wld_insertnpc(sfb_1040_schuerfer /*8036*/, "FMC_ENTRANCE");
    wld_insertnpc(sfb_1041_schuerfer /*8038*/, "FMC_ENTRANCE");
    wld_insertnpc(sfb_1042_schuerfer /*8040*/, "FMC_ENTRANCE");
    wld_insertnpc(sfb_1043_schuerfer /*8042*/, "FMC_ENTRANCE");
    wld_insertnpc(sfb_1044_schuerfer /*8044*/, "FMC_ENTRANCE");
    wld_insertnpc(org_890_organisator /*7943*/, "FMC_ENTRANCE");
    wld_insertnpc(org_891_organisator /*7945*/, "FMC_ENTRANCE");
    wld_insertnpc(org_892_organisator /*7947*/, "FMC_ENTRANCE");
};

func void init_sub_freeminecamp() {
    wld_assignroomtoguild("FMC01", gil_sfb);
    wld_assignroomtoguild("FMC03", gil_sfb);
    wld_assignroomtoguild("FMC04", gil_sfb);
    wld_assignroomtoguild("FMC05", gil_sfb);
    wld_assignroomtoguild("FMC06", gil_sfb);
    wld_assignroomtoguild("FMC07", gil_sfb);
    wld_assignroomtoguild("FMC08", gil_sfb);
    wld_assignroomtoguild("FMC09", gil_sfb);
    wld_assignroomtoguild("FMC10", gil_sfb);
    wld_assignroomtoguild("FMC11", gil_sfb);
    wld_assignroomtoguild("FMC12", gil_sfb);
    wld_assignroomtoguild("FMC13", gil_sfb);
    wld_assignroomtoguild("FMC14", gil_sfb);
    wld_assignroomtoguild("FMC15", gil_sfb);
};

func void startup_sub_surface() {
    var c_npc nek;

    wld_insertnpc(grd_254_orry /*7355*/, "OC1");
    wld_insertnpc(grd_281_gardist /*7407*/, "OC1");
    wld_insertnpc(grd_275_brueckenwache /*7394*/, "OC1");
    wld_insertnpc(grd_276_brueckenwache /*7396*/, "OC1");
    wld_insertnpc(grd_224_pacho /*7266*/, "OC1");
    wld_insertnpc(grd_237_gardist /*7305*/, "OC1");
    wld_insertnpc(grd_238_gardist /*7307*/, "OC1");
    wld_insertnpc(org_818_ratford /*7814*/, "OC1");
    wld_insertnpc(org_819_drax /*7816*/, "OC1");
    wld_insertnpc(stt_336_cavalorn /*8185*/, "OW_SAWHUT_GREENGOBBO_SPAWN");
    wld_insertnpc(grd_282_nek /*7410*/, "");
    nek = hlp_getnpc(grd_282_nek);
    npc_changeattribute(nek, atr_hitpoints, -nek.attribute[atr_hitpoints_max] /*1*/);
    wld_insertnpc(vlk_520_buddler /*8402*/, "OC_ROUND_22");
    wld_insertnpc(vlk_534_buddler /*8432*/, "OC_ROUND_22");
    wld_insertnpc(org_860_renyu /*7884*/, "LOCATION_11_08");
    wld_insertnpc(org_861_killian /*7887*/, "LOCATION_11_08");
    wld_insertnpc(org_862_jacko /*7890*/, "LOCATION_11_08");
    wld_insertnpc(org_859_aidan /*7882*/, "OW_PATH_02");
    wld_insertnpc(org_888_erpresser /*7941*/, "OW_PATH_056");
    wld_insertnpc(org_889_coerpresser /*7942*/, "OW_PATH_056");
    wld_insertnpc(org_858_quentin /*7879*/, "LOCATION_11_08");
    wld_insertnpc(org_863_raeuber /*7893*/, "LOCATION_11_08");
    wld_insertnpc(org_864_raeuber /*7898*/, "LOCATION_11_08");
    wld_insertnpc(org_865_raeuber /*7903*/, "LOCATION_11_08");
    wld_insertnpc(org_866_raeuber /*7908*/, "LOCATION_11_08");
    wld_insertnpc(org_867_raeuber /*7911*/, "LOCATION_11_08");
    wld_insertnpc(org_868_raeuber /*7914*/, "LOCATION_11_08");
    wld_insertnpc(org_869_raeuber /*7919*/, "LOCATION_11_08");
    wld_insertnpc(org_870_raeuber /*7922*/, "LOCATION_11_08");
    wld_insertnpc(org_871_raeuber /*7927*/, "LOCATION_11_08");
    wld_insertnpc(org_874_raeuber /*7934*/, "LOCATION_11_08");
    wld_insertnpc(non_1500_gilbert /*7571*/, "LOCATION_01_07");
    wld_insertnpc(grd_250_gardist /*7341*/, "OW_OM_ENTRANCE02_WHEEL_USE");
    wld_insertitem(itarscrollicecube /*4197*/, "FP_SLEEP_OW_SNAPPER_HERD1_02");
    wld_insertitem(itfo_potion_health_02 /*4829*/, "FP_SLEEP_OW_SNAPPER_HERD1_02");
    wld_insertitem(itfo_potion_mana_02 /*4821*/, "FP_ROAM_OW_SNAPPER_WOOD05_02");
    wld_insertitem(itfo_potion_health_02 /*4829*/, "FP_SLEEP_OW_MOLERAT_CAVE4");
    wld_insertitem(itfo_potion_health_01 /*4827*/, "FP_ROAM_OW_MOLERAT_06_CAVE_GUARD2");
    wld_insertitem(itfo_potion_health_01 /*4827*/, "LOCATION_24_IN");
    wld_insertitem(itfo_potion_health_02 /*4829*/, "LOCATION_23_CAVE_1_02");
    wld_insertitem(itfo_potion_health_03 /*4831*/, "OW_PATH_07_15_CAVE3");
    wld_insertitem(ring_des_lebens /*4944*/, "FP_ROAM_OW_BLOODHOUND_CANYONCAVE3");
    wld_insertitem(itfo_potion_health_02 /*4829*/, "FP_ROAM_OW_LURKER_BEACH_01");
    wld_insertitem(itfo_potion_health_03 /*4831*/, "FP_ROAM_OW_LURKER_BEACH_04");
    wld_insertnpc(bloodhound /*6733*/, "OW_PATH_012");
    wld_insertnpc(bloodhound /*6733*/, "PATH_CASTLE_TO_WATERFALL");
    wld_insertnpc(molerat /*6783*/, "OW_SAWHUT_MOLERAT_SPAWN01");
    wld_insertnpc(molerat /*6783*/, "OW_SAWHUT_MOLERAT_SPAWN01");
    wld_insertnpc(greengobbosword /*6750*/, "PATH_OC_NC_6");
    wld_insertnpc(greengobbosword /*6750*/, "PATH_OC_NC_4");
    wld_insertnpc(meatbug /*6770*/, "OW_SAWHUT_MEATBUG_SPAWN");
    wld_insertnpc(meatbug /*6770*/, "OW_SAWHUT_MEATBUG_SPAWN");
    wld_insertnpc(wolf /*6862*/, "OW_PATH_02_SPAWN_HOGEWOLF");
    wld_insertnpc(greengobbosword /*6750*/, "OW_GOBBO_PLACE_SPAWN");
    wld_insertnpc(greengobbosword /*6750*/, "OW_GOBBO_PLACE_SPAWN");
    wld_insertnpc(molerat /*6783*/, "OW_MOLERAT_CAVE_SPAWN");
    wld_insertnpc(molerat /*6783*/, "OW_MOLERAT_CAVE_SPAWN");
    wld_insertnpc(molerat /*6783*/, "OW_MOLERAT_CAVE_SPAWN");
    wld_insertnpc(waran /*6859*/, "OW_WARAN_G_SPAWN");
    wld_insertnpc(scavenger /*6815*/, "OW_SCAVENGER_COAST_NEWCAMP_SPAWN");
    wld_insertnpc(scavenger /*6815*/, "OW_SCAVENGER_COAST_NEWCAMP_SPAWN");
    wld_insertnpc(scavenger /*6815*/, "OW_SCAVENGER_COAST_NEWCAMP_SPAWN");
    wld_insertnpc(scavenger /*6815*/, "OW_SCAVENGER_COAST_NEWCAMP_SPAWN");
    wld_insertnpc(bloodfly /*6729*/, "OW_BLOODFLY_NEW_COAST_SPAWN");
    wld_insertnpc(bloodfly /*6729*/, "OW_BLOODFLY_NEW_COAST_SPAWN");
    wld_insertnpc(bloodfly /*6729*/, "OW_BLOODFLY_NEW_COAST_SPAWN");
    wld_insertnpc(bloodfly /*6729*/, "OW_BLOODFLY_NEW_COAST_SPAWN");
    wld_insertnpc(bloodfly /*6729*/, "OW_BLOODFLY_NEW_COAST_SPAWN");
    wld_insertnpc(bloodfly /*6729*/, "OW_BLOODFLY_NEW_COAST_SPAWN");
    wld_insertnpc(scavenger /*6815*/, "OW_SCAVENGER_CAVE3_SPAWN");
    wld_insertnpc(scavenger /*6815*/, "OW_SCAVENGER_CAVE3_SPAWN");
    wld_insertnpc(scavenger /*6815*/, "OW_SCAVENGER_TREE_SPAWN");
    wld_insertnpc(molerat /*6783*/, "OW_MOLERAT_CAVE_SPAWN");
    wld_insertnpc(wolf /*6862*/, "OW_WOODRUIN_FOR_WOLF_SPAWN");
    wld_insertnpc(snapper /*6841*/, "OW_CAVE2_SNAPPER_SPAWN");
    wld_insertnpc(snapper /*6841*/, "OW_CAVE2_SNAPPER_SPAWN");
    wld_insertnpc(snapper /*6841*/, "OW_CAVE2_SNAPPER_SPAWN");
    wld_insertnpc(scavenger /*6815*/, "OW_PATH_SCAVENGER13_SPAWN01");
    wld_insertnpc(scavenger /*6815*/, "OW_PATH_SCAVENGER13_SPAWN01");
    wld_insertnpc(scavenger /*6815*/, "OW_PATH_SCAVENGER13_SPAWN01");
    wld_insertnpc(scavenger /*6815*/, "OW_PATH_SCAVENGER13_SPAWN01");
    wld_insertnpc(scavenger /*6815*/, "OW_SCAVENGER_SPAWN_TREE");
    wld_insertnpc(molerat /*6783*/, "SPAWN_OW_MOLERAT_CAVE1_OC");
    wld_insertnpc(molerat /*6783*/, "SPAWN_OW_MOLERAT_CAVE1_OC");
    wld_insertnpc(molerat /*6783*/, "SPAWN_OW_MOLERAT_CAVE1_OC");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCA_05_01");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCA_05_01");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_OW_BLOODFLY_C3");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_OW_BLOODFLY_C3");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_OW_BLOODFLY_C3");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_OW_BLOODFLY_C3");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_OW_BLOODFLY_12");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_OW_BLOODFLY_12");
    wld_insertnpc(molerat /*6783*/, "SPAWN_OW_SMALLCAVE01_MOLERAT");
    wld_insertnpc(molerat /*6783*/, "SPAWN_OW_SMALLCAVE01_MOLERAT");
    wld_insertnpc(molerat /*6783*/, "SPAWN_OW_SMALLCAVE01_MOLERAT");
    wld_insertnpc(molerat /*6783*/, "SPAWN_OW_MOLERAT_OCWOOD_OC2");
    wld_insertnpc(molerat /*6783*/, "SPAWN_OW_MOLERAT_OCWOOD_OC2");
    wld_insertnpc(molerat /*6783*/, "SPAWN_OW_MOLERAT_OLDWOOD1_M");
    wld_insertnpc(molerat /*6783*/, "SPAWN_OW_MOLERAT_OCWOOD_OLDMINE3");
    wld_insertnpc(molerat /*6783*/, "SPAWN_OW_MOLERAT_OCWOOD_OLDMINE3");
    wld_insertnpc(wolf /*6862*/, "PATH_WALD_OC_WOLFSPAWN2");
    wld_insertnpc(wolf /*6862*/, "PATH_WALD_OC_WOLFSPAWN2");
    wld_insertnpc(wolf /*6862*/, "PATH_WALD_OC_WOLFSPAWN2");
    wld_insertnpc(wolf /*6862*/, "SPAWN_OW_WOLF_OC_PSI");
    wld_insertnpc(wolf /*6862*/, "SPAWN_OW_PATH_WOLF_WOOD");
    wld_insertnpc(wolf /*6862*/, "SPAWN_OW_PATH_WOLF_WOOD");
    wld_insertnpc(wolf /*6862*/, "SPAWN_OW_PATH_WOLF_WOOD");
    wld_insertnpc(wolf /*6862*/, "SPAWN_OW_WOLF_WOOD05_02");
    wld_insertnpc(wolf /*6862*/, "FP_ROAM_OW_WOLF_08_08");
    wld_insertnpc(wolf /*6862*/, "FP_ROAM_OW_WOLF_08_08");
    wld_insertnpc(wolf /*6862*/, "OW_DEADWOOD_WOLF_SPAWN01");
    wld_insertnpc(wolf /*6862*/, "OW_DEADWOOD_WOLF_SPAWN01");
    wld_insertnpc(wolf /*6862*/, "OW_DEADWOOD_WOLF_SPAWN01");
    wld_insertnpc(wolf /*6862*/, "OW_DEADWOOD_WOLF_SPAWN01");
    wld_insertnpc(bloodfly /*6729*/, "OW_LAKE_NC_BLOODFLY_SPAWN01");
    wld_insertnpc(bloodfly /*6729*/, "OW_LAKE_NC_BLOODFLY_SPAWN01");
    wld_insertnpc(bloodfly /*6729*/, "OW_LAKE_NC_BLOODFLY_SPAWN01");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_WALD_OC_BLOODFLY01");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_WALD_OC_BLOODFLY01");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_WALD_OC_BLOODFLY01");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_BLOODFLY_LOCATION_29_01");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_BLOODFLY_LOCATION_29_01");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_BLOODFLY_LOCATION_29_01");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_BLOODFLY_LOCATION_29_01");
    wld_insertnpc(bloodfly /*6729*/, "OW_PATH_BLOODFLY01_SPAWN01");
    wld_insertnpc(bloodfly /*6729*/, "OW_PATH_BLOODFLY01_SPAWN01");
    wld_insertnpc(bloodfly /*6729*/, "OW_PATH_BLOODFLY01_SPAWN01");
    wld_insertnpc(bloodfly /*6729*/, "OW_PATH_BLOODFLY01_SPAWN01");
    wld_insertnpc(bloodfly /*6729*/, "OW_PATH_BLOODFLY01_SPAWN01");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_OW_BLOODFLY_WOOD05_01");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_OW_BLOODFLY_WOOD05_01");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_OW_BLOODFLY_WOOD05_01");
    wld_insertnpc(lurker /*6766*/, "SPAWN_OW_NEARBGOBBO_LURKER_A1");
    wld_insertnpc(lurker /*6766*/, "SPAWN_OW_MINICOAST_LURKER_A1");
    wld_insertnpc(lurker /*6766*/, "OW_LAKE_NC_LURKER_SPAWN01");
    wld_insertnpc(waran /*6859*/, "OW_PATH_WARAN06_SPAWN01");
    wld_insertnpc(waran /*6859*/, "OW_PATH_WARAN06_SPAWN01");
    wld_insertnpc(waran /*6859*/, "OW_PATH_WARAN06_SPAWN01");
    wld_insertnpc(waran /*6859*/, "OW_PATH_WARAN05_SPAWN02");
    wld_insertnpc(waran /*6859*/, "OW_PATH_OW_PATH_WARAN05_SPAWN01");
    wld_insertnpc(waran /*6859*/, "OW_PATH_OW_PATH_WARAN05_SPAWN01");
    wld_insertnpc(waran /*6859*/, "OW_PATH_OW_PATH_WARAN05_SPAWN01");
    wld_insertnpc(waran /*6859*/, "OW_PATH_OW_PATH_WARAN05_SPAWN01");
    wld_insertnpc(blackgobbomace /*6725*/, "SPAWN_OW_BLACKGOBBO_A1");
    wld_insertnpc(blackgobbomace /*6725*/, "SPAWN_OW_BLACKGOBBO_A1");
    wld_insertnpc(blackgobbomace /*6725*/, "SPAWN_OW_BLACKGOBBO_A2");
    wld_insertnpc(blackgobbomace /*6725*/, "SPAWN_OW_BLACKGOBBO_A2");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_SCAVENGER_PATH_OC_PSI_03");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_SCAVENGER_PATH_OC_PSI_03");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_SCAVENGER_PATH_OC_PSI_02");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_SCAVENGER_PATH_OC_PSI_02");
    wld_insertnpc(scavenger /*6815*/, "OW_PATH_SCAVENGER03_SPAWN01");
    wld_insertnpc(scavenger /*6815*/, "OW_PATH_SCAVENGER03_SPAWN01");
    wld_insertnpc(scavenger /*6815*/, "OW_PATH_SCAVENGER03_SPAWN01");
    wld_insertnpc(scavenger /*6815*/, "OW_PATH_SCAVENGER03_SPAWN01");
    wld_insertnpc(scavenger /*6815*/, "OW_PATH_SCAVENGER12_SPAWN01");
    wld_insertnpc(scavenger /*6815*/, "OW_PATH_SCAVENGER12_SPAWN01");
    wld_insertnpc(scavenger /*6815*/, "OW_PATH_SCAVENGER12_SPAWN01");
    wld_insertnpc(scavenger /*6815*/, "OW_PATH_SCAVENGER01_SPAWN01");
    wld_insertnpc(scavenger /*6815*/, "OW_PATH_SCAVENGER01_SPAWN01");
    wld_insertnpc(scavenger /*6815*/, "OW_PATH_SCAVENGER01_SPAWN01");
    wld_insertnpc(scavenger /*6815*/, "OW_PATH_SCAVENGER01_SPAWN01");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_OLDWOOD_C3");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_OLDWOOD_C3");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SHADOWBEAST_NEAR_SHADOW4");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SHADOWBEAST_NEAR_SHADOW4");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SHADOWBEAST_NEAR_SHADOW4");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_OCWOOD1");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_OCWOOD1");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_O_SCAVENGER_05_02");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_O_SCAVENGER_05_02");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_O_SCAVENGER_OCWOODL2");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_O_SCAVENGER_OCWOODL2");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_SCAVENGERPATH_OC_PSI_14");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_SCAVENGERPATH_OC_PSI_14");
    wld_insertnpc(orcdog /*6790*/, "OW_PATH_WOLF04_SPAWN01");
    wld_insertnpc(orcdog /*6790*/, "OW_PATH_WOLF04_SPAWN01");
    wld_insertnpc(orcdog /*6790*/, "OW_PATH_WOLF04_SPAWN01");
    wld_insertnpc(orcdog /*6790*/, "OW_PATH_WOLF04_SPAWN01");
    wld_insertnpc(bloodfly /*6729*/, "PATH_TAKE_HERB_MOVEMENT2");
    wld_insertnpc(bloodfly /*6729*/, "PATH_TAKE_HERB_MOVEMENT2");
    wld_insertnpc(bloodfly /*6729*/, "PATH_TAKE_HERB_MOVEMENT2");
    wld_insertnpc(bloodfly /*6729*/, "PATH_TAKE_BLOODFLY_SPAWN");
    wld_insertnpc(bloodfly /*6729*/, "PATH_TAKE_BLOODFLY_SPAWN");
    wld_insertnpc(bloodfly /*6729*/, "PATH_TAKE_BLOODFLY_SPAWN");
    wld_insertnpc(firewaran /*6746*/, "OW_COAST_SHIPWRECK_WARAN_2");
    wld_insertnpc(firewaran /*6746*/, "OW_COAST_SHIPWRECK_WARAN_2");
    wld_insertnpc(firewaran /*6746*/, "OW_COAST_SHIPWRECK_WARAN_2");
    wld_insertnpc(firewaran /*6746*/, "OW_COAST_SHIPWRECK_WARAN");
    wld_insertnpc(firewaran /*6746*/, "OW_COAST_SHIPWRECK_WARAN");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_OW_BLOODFLYS_152");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_OW_BLOODFLYS_152");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_OW_BLOODFLYS_152");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_OW_BLOODFLY_06_01");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_OW_BLOODFLY_06_01");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_OW_BLOODFLY_06_01");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_OW_BLOODFLY_OC_WOOD03");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_OW_BLOODFLY_OC_WOOD03");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_OW_BLOODFLY_OC_WOOD03");
    wld_insertnpc(molerat /*6783*/, "SPAWN_OW_MOLERAT_A_6_NC4");
    wld_insertnpc(molerat /*6783*/, "SPAWN_OW_MOLERAT_A_6_NC4");
    wld_insertnpc(molerat /*6783*/, "SPAWN_OW_MOLERAT_A_6_NC4");
    wld_insertnpc(molerat /*6783*/, "PATH_WALD_OC_MOLERATSPAWN");
    wld_insertnpc(molerat /*6783*/, "SPAWN_OW_MOLERAT_06_CAVE_GUARD3");
    wld_insertnpc(molerat /*6783*/, "SPAWN_OW_MOLERAT_06_CAVE_GUARD3");
    wld_insertnpc(molerat /*6783*/, "SPAWN_OW_MOLERAT_WOODOLDMINE2");
    wld_insertnpc(snapper /*6841*/, "SPAWN_OW_SNAPPER_WOOD05_05");
    wld_insertnpc(snapper /*6841*/, "SPAWN_OW_SNAPPER_WOOD05_05");
    wld_insertnpc(razor /*6812*/, "SPAWN_OW_SNAPPER_CAVE_DM");
    wld_insertnpc(razor /*6812*/, "SPAWN_OW_SNAPPER_CAVE_DM");
    wld_insertnpc(razor /*6812*/, "SPAWN_OW_SNAPPER_CAVE_DM");
    wld_insertnpc(wolf /*6862*/, "SPAWN_OW_WOLF2_WALD_OC2");
    wld_insertnpc(wolf /*6862*/, "SPAWN_OW_WOLF2_WALD_OC2");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_INWALD_OC2");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_INWALD_OC2");
    wld_insertnpc(molerat /*6783*/, "SPAWN_OW_MOLERAT2_WALD_OC1");
    wld_insertnpc(molerat /*6783*/, "SPAWN_OW_MOLERAT2_WALD_OC1");
    wld_insertnpc(bloodfly /*6729*/, "OW_PATH_BLOODFLY02_SPAWN01");
    wld_insertnpc(bloodfly /*6729*/, "OW_PATH_BLOODFLY02_SPAWN01");
    wld_insertnpc(bloodfly /*6729*/, "OW_PATH_BLOODFLY02_SPAWN01");
    wld_insertnpc(lurker /*6766*/, "SPAWN_OW_LURKER_RIVER2");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_OCWOODEND2");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_PSIWOOD2");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_PSIWOOD2");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_NSCAVENGER_04_PSIWOOD4");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_NSCAVENGER_04_PSIWOOD4");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_NEARSHAD2_PSIWOOD");
    wld_insertnpc(wolf /*6862*/, "SPAWN_OW_WOLF_PSIWOOD_5");
    wld_insertnpc(wolf /*6862*/, "SPAWN_OW_WOLF_PSIWOOD_5");
    wld_insertnpc(wolf /*6862*/, "SPAWN_OW_WOLF_PSIWOOD_5");
    wld_insertnpc(wolf /*6862*/, "SPAWN_OW_WOLF_04_PSI5");
    wld_insertnpc(wolf /*6862*/, "SPAWN_OW_WOLF_04_PSI5");
    wld_insertnpc(wolf /*6862*/, "SPAWN_OW_WOLF_04_PSI5");
    wld_insertnpc(wolf /*6862*/, "SPAWN_OW_NWOLF_04_PSIWOOD5");
    wld_insertnpc(wolf /*6862*/, "SPAWN_OW_NWOLF_04_PSIWOOD5");
    wld_insertnpc(wolf /*6862*/, "SPAWN_OW_WOLF_NEARSHADOW_PSIWOOD_02");
    wld_insertnpc(wolf /*6862*/, "SPAWN_OW_WOLF_NEARSHADOW_PSIWOOD_02");
    wld_insertnpc(wolf /*6862*/, "SPAWN_OW_WOLF_NEARSHADOW_PSIWOOD_02");
    wld_insertnpc(wolf /*6862*/, "SPAWN_OW_WOLFL__PSIWOOD_OUT4");
    wld_insertnpc(wolf /*6862*/, "SPAWN_OW_WOLFL__PSIWOOD_OUT4");
    wld_insertnpc(wolf /*6862*/, "SPAWN_OW_WOLF_NEARSHAD2_PSIWOOD_OUT");
    wld_insertnpc(wolf /*6862*/, "SPAWN_OW_WOLF_NEARSHAD2_PSIWOOD_OUT");
    wld_insertnpc(greengobbosword /*6750*/, "SPAWN_OW_GOBBO_WATERFALLCAVE_2");
    wld_insertnpc(greengobbosword /*6750*/, "SPAWN_OW_GOBBO_WATERFALLCAVE_2");
    wld_insertnpc(greengobbosword /*6750*/, "SPAWN_OW_GOBBO_WATERFALLCAVE_2");
    wld_insertnpc(molerat /*6783*/, "FP_ROAM_OW_MOLERAT_04_PSI");
    wld_insertnpc(molerat /*6783*/, "FP_ROAM_OW_MOLERAT_04_PSI");
    wld_insertnpc(molerat /*6783*/, "SPAWN_OW_MOLERATN_PSIWOOD_1");
    wld_insertnpc(molerat /*6783*/, "SPAWN_OW_MOLERATN_PSIWOOD_1");
    wld_insertnpc(molerat /*6783*/, "SPAWN_OW_MOLERATL__PSIWOOD_01");
    wld_insertnpc(molerat /*6783*/, "SPAWN_OW_MOLERATL__PSIWOOD_01");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_NEARSHADOW_PSIWOOD_01");
    wld_insertnpc(shadowbeast /*6819*/, "SPAWN_OW_SHADOWBEAST2_PSIWOOD_02");
    wld_insertnpc(shadowbeast /*6819*/, "SPAWN_OW_SHADOWBEAST_10_03");
    wld_insertnpc(razor /*6812*/, "SPAWN_OW_BLOCKGOBBO_CAVE_DM6");
    wld_insertnpc(razor /*6812*/, "SPAWN_OW_BLOCKGOBBO_CAVE_DM6");
    wld_insertnpc(razor /*6812*/, "SPAWN_OW_BLOCKGOBBO_CAVE_DM6");
    wld_insertnpc(razor /*6812*/, "SPAWN_OW_BLOCKGOBBO_CAVE_DM6");
    wld_insertnpc(blackgobbomace /*6725*/, "SPAWN_OW_BLACKGOBBO_A1");
    wld_insertnpc(blackgobbomace /*6725*/, "SPAWN_OW_BLACKGOBBO_A1");
    wld_insertnpc(blackgobbomace /*6725*/, "SPAWN_OW_BLACKGOBBO_A1");
    wld_insertnpc(blackgobbomace /*6725*/, "SPAWN_OW_BLACKGOBBO_A1");
    wld_insertnpc(orcdog /*6790*/, "SPAWN_OW_BLACKWOLF_02_01");
    wld_insertnpc(orcdog /*6790*/, "SPAWN_OW_BLACKWOLF_02_01");
    wld_insertnpc(orcdog /*6790*/, "SPAWN_OW_BLACKWOLF_02_01");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_LONE_WALD_OC3");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_ENTRANCE_SCAVENGER_OC1_02");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVNEGER_04_PSI3");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVNEGER_04_PSI3");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_NEARSHAD2_PSIWOOD3");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_NEARSHAD2_PSIWOOD3");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_OW_BLOODFLY_PSIWOOD_02");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_OW_BLOODFLY_PSIWOOD_02");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_OW_BLOODFLY_PSIWOOD_02");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_OW_BLOODFLY_PSIWOOD_02");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_OW_BLOODFLYS_PSIWOOD_4");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_OW_BLOODFLYS_PSIWOOD_4");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_OW_BLOODFLYS_PSIWOOD_4");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_OW_BLOODFLYS_PSIWOOD_4");
    wld_insertnpc(wolf /*6862*/, "SPAWN_OW_WOLF2_WALD_OC3");
    wld_insertnpc(wolf /*6862*/, "SPAWN_OW_WOLF2_WALD_OC3");
    wld_insertnpc(wolf /*6862*/, "SPAWN_OW_WOLFK__PSIWOOD_OUT3");
    wld_insertnpc(wolf /*6862*/, "SPAWN_OW_WOLFK__PSIWOOD_OUT3");
    wld_insertnpc(molerat /*6783*/, "SPAWN_OW_MOLERATT_04_PSI1");
    wld_insertnpc(molerat /*6783*/, "SPAWN_OW_MOLERATT_04_PSI1");
    wld_insertnpc(molerat /*6783*/, "SPAWN_OW_MOLERATT_04_PSI1");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_GOBBOCAVE_03_01");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_GOBBOCAVE_03_01");
    wld_insertnpc(snapper /*6841*/, "SPAWN_OW_SNAPPER_OCWOOD1_05_02");
    wld_insertnpc(snapper /*6841*/, "SPAWN_OW_SNAPPER_OCWOOD1_05_02");
    wld_insertnpc(waran /*6859*/, "SPAWN_OW_WARAN_OC_PSI_GOBBOCAVE_01");
    wld_insertnpc(waran /*6859*/, "SPAWN_OW_WARAN_OC_PSI_GOBBOCAVE_01");
    wld_insertnpc(waran /*6859*/, "SPAWN_OW_WARAN_OC_PSI_GOBBOCAVE_01");
    wld_insertnpc(blackgobbomace /*6725*/, "SPAWN_GOBBO_LOCATION_29_03");
    wld_insertnpc(blackgobbomace /*6725*/, "SPAWN_GOBBO_LOCATION_29_03");
    wld_insertnpc(blackgobbomace /*6725*/, "SPAWN_GOBBO_LOCATION_29_03");
    wld_insertnpc(blackgobbomace /*6725*/, "SPAWN_GOBBO_LOCATION_29_03");
    wld_insertnpc(blackgobbomace /*6725*/, "SPAWN_GOBBO_LOCATION_29_03");
    wld_insertnpc(blackgobbomace /*6725*/, "SPAWN_GOBBO_LOCATION_29_03");
    wld_insertnpc(blackgobbomace /*6725*/, "SPAWN_OW_GOBBO_CAVE03INDOOR_05");
    wld_insertnpc(blackgobbomace /*6725*/, "SPAWN_OW_GOBBO_CAVE03INDOOR_05");
    wld_insertnpc(blackgobbomace /*6725*/, "SPAWN_OW_GOBBO_CAVE03INDOOR_02");
    wld_insertnpc(blackgobbomace /*6725*/, "SPAWN_OW_GOBBO_CAVE03INDOOR_02");
    wld_insertnpc(blackgobbomace /*6725*/, "SPAWN_OW_GOBBO_CAVE03INDOOR_02");
    wld_insertnpc(blackgobbomace /*6725*/, "GOBBO_MASTERCAVE5");
    wld_insertnpc(blackgobbomace /*6725*/, "GOBBO_MASTERCAVE5");
    wld_insertnpc(blackgobbomace /*6725*/, "GOBBO_MASTERCAVE7");
    wld_insertnpc(blackgobbomace /*6725*/, "GOBBO_MASTERCAVE7");
    wld_insertnpc(blackgobbomace /*6725*/, "GOBBO_MASTERCAVE8");
    wld_insertnpc(blackgobbomace /*6725*/, "GOBBO_MASTERCAVE8");
    wld_insertnpc(blackgobbomace /*6725*/, "GOBBO_MASTERCAVE8");
    wld_insertnpc(blackgobbomace /*6725*/, "GOBBO_MASTERCAVE9");
    wld_insertnpc(blackgobbomace /*6725*/, "GOBBO_MASTERCAVE9");
    wld_insertnpc(blackgobbomace /*6725*/, "GOBBO_MASTERCAVE9");
    wld_insertnpc(blackgobbomace /*6725*/, "GOBBO_MASTERCAVE10");
    wld_insertnpc(blackgobbomace /*6725*/, "GOBBO_MASTERCAVE10");
    wld_insertnpc(blackgobbomace /*6725*/, "GOBBO_MASTERCAVE10");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_OC_PSI_RUIN1");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_OC_PSI_RUIN1");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_04_02_1");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_04_02_1");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_04_02_1");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_04_02_1");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_BANDIT_02");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_OCWALD_PSI_PATH2");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_OCWALD_PSI_PATH2");
    wld_insertnpc(molerat /*6783*/, "SPAWN_OW_MOLERAT_PSI_PATH7");
    wld_insertnpc(molerat /*6783*/, "SPAWN_OW_MOLERAT_PSI_PATH7");
    wld_insertnpc(molerat /*6783*/, "SPAWN_OW_MOLERAT_PSI_PATH7");
    wld_insertnpc(molerat /*6783*/, "SPAWN_OW_MOLERAT_PSI_PATH7");
    wld_insertnpc(molerat /*6783*/, "SPAWN_OW_MOLERAT_03_04");
    wld_insertnpc(molerat /*6783*/, "SPAWN_OW_MOLERAT_03_04");
    wld_insertnpc(molerat /*6783*/, "SPAWN_OW_MOLERAT_03_04");
    wld_insertnpc(waran /*6859*/, "SPAWN_OW_WARAN_OC_PSI3");
    wld_insertnpc(waran /*6859*/, "FP_ROAM_OW_WARAN_OCWALD_PSI_PATH4");
    wld_insertnpc(waran /*6859*/, "FP_ROAM_OW_WARAN_OCWALD_PSI_PATH4");
    wld_insertnpc(waran /*6859*/, "FP_ROAM_OW_WARAN_OCWALD_PSI_PATH4");
    wld_insertnpc(waran /*6859*/, "SPAWN_OW_WARAN_NC_03");
    wld_insertnpc(waran /*6859*/, "SPAWN_OW_WARAN_NC_03");
    wld_insertnpc(waran /*6859*/, "SPAWN_OW_WARAN_CAVE1_1");
    wld_insertnpc(waran /*6859*/, "SPAWN_OW_WARAN_CAVE1_1");
    wld_insertnpc(firewaran /*6746*/, "SPAWN_OW_WARAN_DEMON_01");
    wld_insertnpc(firewaran /*6746*/, "SPAWN_OW_WARAN_DEMON_01");
    wld_insertnpc(waran /*6859*/, "SPAWN_OW_WARAN_EBENE2_02_05");
    wld_insertnpc(waran /*6859*/, "SPAWN_OW_WARAN_EBENE2_02_05");
    wld_insertnpc(waran /*6859*/, "SPAWN_OW_WARAN_EBENE2_02_05");
    wld_insertnpc(waran /*6859*/, "SPAWN_OW_WARAN_EBENE_02_05");
    wld_insertnpc(waran /*6859*/, "SPAWN_OW_WARAN_EBENE_02_05");
    wld_insertnpc(waran /*6859*/, "SPAWN_OW_WARAN_EBENE_02_05");
    wld_insertnpc(snapper /*6841*/, "SPAWN_OW_WARAN_01_BADITS6");
    wld_insertnpc(snapper /*6841*/, "SPAWN_OW_WARAN_01_BADITS6");
    wld_insertnpc(lurker /*6766*/, "SPAWN_OW_LURKER_RIVER2_BEACH3");
    wld_insertnpc(lurker /*6766*/, "SPAWN_OW_LURKER_RIVER2_BEACH3_2");
    wld_insertnpc(lurker /*6766*/, "SPAWN_OW_LURKER_BEACH_02");
    wld_insertnpc(snapper /*6841*/, "SPAWN_OW_SCA_01_BADITS7");
    wld_insertnpc(snapper /*6841*/, "SPAWN_OW_SCA_01_BADITS7");
    wld_insertnpc(snapper /*6841*/, "SPAWN_OW_SCA_01_BADITS2");
    wld_insertnpc(snapper /*6841*/, "SPAWN_OW_SCA_01_BADITS2");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_WOOD10_04");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_WOOD10_04");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_WOOD10_04");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_SCAVENGEROW_PATH_280");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_OW_BLOODFLY_01_OCWOOD1_OCW5");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_OW_BLOODFLY_01_OCWOOD1_OCW5");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_OW_BLOODFLY_01_OCWOOD1_OCW5");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_OW_BLOODFLY_01_OCWOOD1_OCW5");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_BLOODFLYPATH_OC_PSI_14");
    wld_insertnpc(bloodfly /*6729*/, "SPAWN_BLOODFLYPATH_OC_PSI_14");
    wld_insertnpc(meatbug /*6770*/, "SPAWN_OW_MEATBUG_01_01");
    wld_insertnpc(meatbug /*6770*/, "SPAWN_OW_MEATBUG_01_01");
    wld_insertnpc(ymolerat /*6784*/, "SPAWN_MOLERAT02_SPAWN01");
    wld_insertnpc(yscavenger /*6816*/, "SPAWN_SCAVENGER_TOTU_LEFT_PLAT");
    wld_insertnpc(yscavenger /*6816*/, "SPAWN_SCAVENGER2_TOTU_LEFT_PLAT2");
    wld_insertnpc(ymolerat /*6784*/, "SPAWN_MOLELRAT_TOTU_LEFT_PLAT4");
    wld_insertnpc(ymolerat /*6784*/, "SPAWN_MOLELRAT_TOTU_LEFT_PLAT4");
    wld_insertnpc(greengobboclub /*6749*/, "SPAWN_OW_GOBBO_01_01");
    wld_insertnpc(yscavenger /*6816*/, "SPAWN_TOTURIAL_CHICKEN_2_2");
    wld_insertnpc(yscavenger /*6816*/, "OW_PATH_1_5_4");
    wld_insertnpc(yscavenger /*6816*/, "SPAWN_OW_BLOODFLY_E_3");
    wld_insertnpc(yscavenger /*6816*/, "SPAWN_OW_BLOODFLY_E_3");
    wld_insertnpc(yscavenger /*6816*/, "SPAWN_GOBBO_OW_PATH_1_6");
    wld_insertnpc(yscavenger /*6816*/, "SPAWN_GOBBO_OW_PATH_1_6");
    wld_insertnpc(yscavenger /*6816*/, "SPAWN_GOBBO_OW_PATH_1_6");
    wld_insertnpc(yscavenger /*6816*/, "SPAWN_OW_STARTSCAVNGERBO_01_02");
    wld_insertnpc(yscavenger /*6816*/, "SPAWN_OW_STARTSCAVENGER_02_01");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_06_04");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_06_04");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_06_04");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_06_04");
    wld_insertnpc(scavenger /*6815*/, "SPAWN_OW_SCAVENGER_AL_ORC");
    wld_insertnpc(scavenger /*6815*/, "HELPPOINT");
    wld_insertnpc(scavenger /*6815*/, "OW_PATH_075_GUARD2");
    wld_insertnpc(scavenger /*6815*/, "OW_PATH_075_GUARD3");
    wld_insertnpc(scavenger /*6815*/, "OW_PATH_075_GUARD4");
    wld_insertnpc(molerat /*6783*/, "OW_PATH_084");
    wld_insertnpc(molerat /*6783*/, "OW_PATH_086");
    wld_insertnpc(molerat /*6783*/, "OW_PATH_3001");
    wld_insertnpc(wolf /*6862*/, "OW_PATH_3001_MOVE");
    wld_insertnpc(molerat /*6783*/, "OW_PATH_3001_MOVE5");
    wld_insertnpc(non_1501_wegelagerer /*7573*/, "SPAWN_TALL_PATH_BANDITOS2_03");
    wld_insertnpc(non_1502_wegelagerer /*7575*/, "SPAWN_TALL_PATH_BANDITOS2_03");
    wld_insertnpc(non_1503_wegelagerer /*7577*/, "OW_PATH_BANDITOS01");
    wld_insertnpc(non_1504_wegelagerer /*7579*/, "OW_PATH_BANDITOS01");
    wld_insertnpc(waran /*6859*/, "SPAWN_ROAM_OW_WARAN_RUIN");
    wld_insertnpc(waran /*6859*/, "SPAWN_ROAM_OW_WARAN_RUIN");
    wld_insertnpc(waran /*6859*/, "SPAWN_ROAM_OW_WARAN_RUIN");
    wld_insertnpc(snapper /*6841*/, "OW_PATH_ABYSS_4");
    wld_insertnpc(snapper /*6841*/, "OW_PATH_ABYSS_4");
    wld_insertnpc(snapper /*6841*/, "OW_MONSTER_NAVIGATE");
    wld_insertnpc(snapper /*6841*/, "OW_MONSTER_NAVIGATE");
    wld_insertnpc(snapper /*6841*/, "OW_MONSTER_NAVIGATE");
    wld_insertnpc(snapper /*6841*/, "OW_MONSTER_NAVIGATE");
    wld_insertnpc(snapper /*6841*/, "OW_MONSTER_NAVIGATE_02");
    wld_insertnpc(snapper /*6841*/, "OW_MONSTER_NAVIGATE_02");
    wld_insertnpc(snapper /*6841*/, "OW_PATH_179");
    wld_insertnpc(snapper /*6841*/, "OW_PATH_179");
    wld_insertnpc(snapper /*6841*/, "OW_ABYSS_SPAWN_WARAN");
    wld_insertnpc(snapper /*6841*/, "OW_ABYSS_SPAWN_WARAN");
    wld_insertnpc(snapper /*6841*/, "SPAWN_ABYSS_TO_CAVE_MOVE");
    wld_insertnpc(snapper /*6841*/, "SPAWN_ABYSS_TO_CAVE_MOVE");
    wld_insertnpc(meatbug /*6770*/, "OW_PATH_175_MEATBUG");
    wld_insertnpc(meatbug /*6770*/, "OW_PATH_175_MEATBUG");
    wld_insertnpc(meatbug /*6770*/, "OW_PATH_175_MEATBUG");
    wld_insertnpc(snapper /*6841*/, "OW_PATH_SNAPPER04_SPAWN01");
    wld_insertnpc(snapper /*6841*/, "OW_PATH_SNAPPER04_SPAWN01");
    wld_insertnpc(snapper /*6841*/, "OW_PATH_SNAPPER04_SPAWN01");
    wld_insertnpc(snapper /*6841*/, "OW_PATH_SNAPPER04_SPAWN01");
    wld_insertnpc(snapper /*6841*/, "OW_PATH_SNAPPER04_SPAWN01");
    wld_insertnpc(snapper /*6841*/, "OW_PATH_SNAPPER04_SPAWN01");
    wld_insertnpc(snapper /*6841*/, "OW_PATH_SNAPPER04_SPAWN02");
    wld_insertnpc(snapper /*6841*/, "OW_PATH_SNAPPER04_SPAWN02");
    wld_insertnpc(snapper /*6841*/, "OW_PATH_SNAPPER04_SPAWN02");
    wld_insertnpc(snapper /*6841*/, "OW_PATH_SNAPPER04_SPAWN02");
    wld_insertnpc(shadowbeast /*6819*/, "OW_PATH_TEMPELRUIN06");
    wld_insertnpc(bloodhound /*6733*/, "OW_PATH_07_15_CAVE3");
    wld_insertnpc(snapper /*6841*/, "OW_PATH_07_15");
    wld_insertnpc(snapper /*6841*/, "OW_PATH_07_15");
    wld_insertnpc(snapper /*6841*/, "OW_PATH_07_15");
    wld_insertnpc(snapper /*6841*/, "OW_PATH_07_15");
    wld_insertnpc(bloodhound /*6733*/, "OW_PATH_274");
    wld_insertnpc(zombiethekeeper /*6872*/, "LOCATION_05_02_STONEHENGE4");
    wld_insertnpc(skeletonsh /*6826*/, "LOCATION_05_02_STONEHENGE2");
    wld_insertnpc(skeletonsh /*6826*/, "LOCATION_05_02_STONEHENGE2");
    wld_insertnpc(skeletonsh /*6826*/, "LOCATION_05_02_STONEHENGE3");
    wld_insertnpc(skeletonsh /*6826*/, "LOCATION_05_02_STONEHENGE3");
    wld_insertnpc(skeletonsh /*6826*/, "LOCATION_05_02_STONEHENGE5");
    wld_insertnpc(skeletonsh /*6826*/, "LOCATION_05_02_STONEHENGE5");
    wld_insertnpc(blackgobbowarrior /*6726*/, "LOCATION_12_01");
    wld_insertnpc(blackgobbowarrior /*6726*/, "LOCATION_12_01");
    wld_insertnpc(blackgobbowarrior /*6726*/, "LOCATION_12_01");
    wld_insertnpc(blackgobbowarrior /*6726*/, "LOCATION_12_01");
    wld_insertnpc(blackgobbowarrior /*6726*/, "SPAWN_BLACKGOBBO_SHRINKSCROLL");
    wld_insertnpc(blackgobbowarrior /*6726*/, "SPAWN_BLACKGOBBO_SHRINKSCROLL");
    wld_insertnpc(blackgobbowarrior /*6726*/, "SPAWN_BLACKGOBBO_SHRINKSCROLL");
    wld_insertnpc(blackgobbowarrior /*6726*/, "SPAWN_BLACKGOBBO_SHRINKSCROLL");
    wld_insertnpc(blackgobbowarrior /*6726*/, "LOCATION_12_14");
    wld_insertnpc(blackgobbowarrior /*6726*/, "LOCATION_12_14");
    wld_insertnpc(blackgobbowarrior /*6726*/, "LOCATION_12_14");
    wld_insertnpc(blackgobbowarrior /*6726*/, "LOCATION_12_14");
    wld_insertnpc(troll /*6848*/, "LOCATION_12_14");
    wld_insertnpc(harpie /*6763*/, "LOCATION_12_09");
    wld_insertnpc(harpie /*6763*/, "LOCATION_12_09");
    wld_insertnpc(harpie /*6763*/, "LOCATION_12_09");
    wld_insertnpc(harpie /*6763*/, "LOCATION_12_09");
    wld_insertnpc(bloodhound /*6733*/, "PLATEAU_ROUND01");
    wld_insertnpc(bloodhound /*6733*/, "PLATEAU_ROUND02");
    wld_insertnpc(bloodhound /*6733*/, "PLATEAU_ROUND02_CAVE");
    wld_insertnpc(bloodhound /*6733*/, "PLATEAU_ROUND02_CAVE_MOVE");
    wld_insertnpc(bloodhound /*6733*/, "LOCATION_18_OUT");
    wld_insertnpc(bloodhound /*6733*/, "PATH_TO_PLATEAU04");
    wld_insertnpc(bloodhound /*6733*/, "PATH_TO_PLATEAU04_RIGHT");
    wld_insertnpc(bloodhound /*6733*/, "PATH_TO_PLATEAU04_SMALLPATH");
    wld_insertnpc(bridgegolem /*6760*/, "PATH_TO_PLATEAU04_BRIDGE2");
    wld_insertnpc(harpie /*6763*/, "LOCATION_19_03_PATH_RUIN7");
    wld_insertnpc(harpie /*6763*/, "LOCATION_19_03_PATH_RUIN8");
    wld_insertnpc(harpie /*6763*/, "LOCATION_19_03_PATH_RUIN9");
    wld_insertnpc(harpie /*6763*/, "LOCATION_19_03_PATH_RUIN10");
    wld_insertnpc(harpie /*6763*/, "LOCATION_19_03_PATH_RUIN11");
    wld_insertnpc(harpie /*6763*/, "LOCATION_19_03_PEMTAGRAM_MOVEMENT");
    wld_insertnpc(harpie /*6763*/, "LOCATION_19_03_PEMTAGRAM2");
    wld_insertnpc(harpie /*6763*/, "LOCATION_19_03_PEMTAGRAM_MOVEMENT");
    wld_insertnpc(harpie /*6763*/, "LOCATION_19_03_PENTAGRAMM");
    wld_insertnpc(harpie /*6763*/, "LOCATION_19_03_ROOM6");
    wld_insertnpc(harpie /*6763*/, "LOCATION_19_03_ROOM6_BARRELCHAMBER");
    wld_insertnpc(skeletonsh /*6826*/, "LOCATION_19_03_ROOM6_BARRELCHAMBER2");
    wld_insertnpc(skeletonsh /*6826*/, "LOCATION_19_03_ROOM6_BARRELCHAMBER2");
    wld_insertnpc(skeletonsh /*6826*/, "LOCATION_19_03_ROOM6_BARRELCHAMBER2");
    wld_insertnpc(harpie /*6763*/, "LOCATION_19_03_ROOM3");
    wld_insertnpc(harpie /*6763*/, "LOCATION_19_03_SECOND_HARPYE1");
    wld_insertnpc(harpie /*6763*/, "LOCATION_19_03_SECOND_HARPYE2");
    wld_insertnpc(harpie /*6763*/, "LOCATION_19_03_SECOND_ETAGE6");
    wld_insertnpc(harpie /*6763*/, "LOCATION_19_03_SECOND_HARPYE3");
    wld_insertnpc(harpie /*6763*/, "LOCATION_19_03_SECOND_HARPYE4");
    wld_insertnpc(harpie /*6763*/, "LOCATION_19_03_SECOND_ETAGE7");
    wld_insertnpc(harpie /*6763*/, "LOCATION_19_03_BALCONY2");
    wld_insertnpc(harpie /*6763*/, "LOCATION_19_03_BALCONY3");
    wld_insertnpc(harpie /*6763*/, "LOCATION_19_03_BALCONY4");
    wld_insertnpc(swampshark /*6844*/, "PATH_AROUND_PSI10");
    wld_insertnpc(swampshark /*6844*/, "PATH_AROUND_PSI11");
    wld_insertnpc(swampshark /*6844*/, "PATH_AROUND_PSI13");
    wld_insertnpc(swampshark /*6844*/, "PATH_AROUND_PSI15");
    wld_insertnpc(swampshark /*6844*/, "PATH_AROUND_PSI18");
    wld_insertnpc(swampshark /*6844*/, "PATH_AROUND_PSI19");
    wld_insertnpc(swampshark /*6844*/, "PATH_AROUND_PSI20");
    wld_insertnpc(swampshark /*6844*/, "PATH_AROUND_PSI20");
    wld_insertnpc(swampshark /*6844*/, "PATH_AROUND_PSI21");
    wld_insertnpc(bloodfly /*6729*/, "OW_PATH_BLOODFLY08_SPAWN01");
    wld_insertnpc(bloodfly /*6729*/, "OW_PATH_BLOODFLY08_SPAWN01");
    wld_insertnpc(bloodfly /*6729*/, "OW_PATH_BLOODFLY09_SPAWN01");
    wld_insertnpc(bloodfly /*6729*/, "OW_PATH_BLOODFLY09_SPAWN01");
    wld_insertnpc(bloodfly /*6729*/, "OW_PATH_BLOODFLY10_SPAWN01");
    wld_insertnpc(bloodfly /*6729*/, "OW_PATH_BLOODFLY10_SPAWN01");
    wld_insertnpc(bloodfly /*6729*/, "OW_PATH_BLOODFLY11_SPAWN01");
    wld_insertnpc(bloodfly /*6729*/, "OW_PATH_BLOODFLY11_SPAWN01");
    wld_insertnpc(bloodfly /*6729*/, "OW_PATH_BLOODFLY11_SPAWN01");
    wld_insertnpc(bloodfly /*6729*/, "OW_PATH_BLOODFLY12_SPAWN01");
    wld_insertnpc(bloodfly /*6729*/, "OW_PATH_BLOODFLY12_SPAWN01");
    wld_insertnpc(bloodfly /*6729*/, "OW_PATH_BLOODFLY13_SPAWN01");
    wld_insertnpc(bloodfly /*6729*/, "OW_PATH_BLOODFLY13_SPAWN01");
    wld_insertnpc(razor /*6812*/, "OW_PATH_SNAPPER02_SPAWN01");
    wld_insertnpc(razor /*6812*/, "OW_PATH_SNAPPER02_SPAWN01");
    wld_insertnpc(razor /*6812*/, "OW_PATH_SNAPPER02_SPAWN01");
    wld_insertnpc(razor /*6812*/, "SPAWN_OW_SNAPPER_INCAVE_DM2");
    wld_insertnpc(razor /*6812*/, "SPAWN_OW_SNAPPER_INCAVE_DM2");
    wld_insertnpc(orcbiter /*6787*/, "SPAWN_OW_SCAVENGER_01_DEMONT5");
    wld_insertnpc(orcbiter /*6787*/, "SPAWN_OW_SCAVENGER_01_DEMONT5");
    wld_insertnpc(orcbiter /*6787*/, "SPAWN_OW_SCAVENGER_01_DEMONT5");
    wld_insertnpc(firewaran /*6746*/, "OW_PATH_SCAVENGER15_SPAWN01");
    wld_insertnpc(orcbiter /*6787*/, "SPAWN_OW_SCAVENGER_ORC_03");
    wld_insertnpc(orcbiter /*6787*/, "SPAWN_OW_SCAVENGER_ORC_03");
    wld_insertnpc(orcwarrior2 /*6807*/, "OW_PATH_RUIN_7");
    wld_insertnpc(orcwarrior2 /*6807*/, "OW_PATH_RUIN_7");
    wld_insertnpc(orcdog /*6790*/, "FP_ROAM_OW_SNAPPER_OW_ORC");
    wld_insertnpc(orcdog /*6790*/, "FP_ROAM_OW_SNAPPER_OW_ORC");
    wld_insertnpc(orcdog /*6790*/, "FP_ROAM_OW_SNAPPER_OW_ORC");
    wld_insertnpc(orcdog /*6790*/, "FP_ROAM_OW_SNAPPER_OW_ORC");
    wld_insertnpc(orcdog /*6790*/, "FP_ROAM_OW_SNAPPER_OW_ORC");
    wld_insertnpc(orcdog /*6790*/, "FP_ROAM_OW_SNAPPER_OW_ORC");
    wld_insertnpc(orcwarrior1 /*6806*/, "OW_PATH_104");
    wld_insertnpc(orcwarrior1 /*6806*/, "OW_PATH_104");
    wld_insertnpc(orcwarrior1 /*6806*/, "OW_PATH_104");
    wld_insertnpc(orcwarrior2 /*6807*/, "OW_PATH_104");
    wld_insertnpc(orcdog /*6790*/, "OW_PATH_BLACKWOLF07_SPAWN01");
    wld_insertnpc(orcdog /*6790*/, "OW_PATH_BLACKWOLF07_SPAWN01");
    wld_insertnpc(orcdog /*6790*/, "OW_PATH_BLACKWOLF07_SPAWN01");
    wld_insertnpc(orcdog /*6790*/, "OW_PATH_BLACKWOLF07_SPAWN01");
    wld_insertnpc(orcdog /*6790*/, "OW_PATH_BLACKWOLF07_SPAWN01");
    wld_insertnpc(orcdog /*6790*/, "OW_PATH_BLACKWOLF07_SPAWN01");
    wld_insertnpc(orcscout /*6793*/, "CASTLE_2");
    wld_insertnpc(orcwarrior1 /*6806*/, "CASTLE_3");
    wld_insertnpc(orcwarrior1 /*6806*/, "CASTLE_3");
    wld_insertnpc(orcwarrior1 /*6806*/, "CASTLE_4");
    wld_insertnpc(orcwarrior2 /*6807*/, "OW_PATH_109");
    wld_insertnpc(orcdog /*6790*/, "SPAWN_OW_BLACKWOLF_02_01");
    wld_insertnpc(orcdog /*6790*/, "SPAWN_OW_BLACKWOLF_02_01");
    wld_insertnpc(orcdog /*6790*/, "SPAWN_OW_BLACKWOLF_02_01");
    wld_insertnpc(orcdog /*6790*/, "SPAWN_OW_BLACKWOLF_02_01");
    wld_insertnpc(orcdog /*6790*/, "SPAWN_OW_BLACKWOLF_02_01");
    wld_insertnpc(orcdog /*6790*/, "SPAWN_OW_BLACKWOLF_02_01");
    wld_insertnpc(orcwarrior1 /*6806*/, "OW_PATH_195");
    wld_insertnpc(orcwarrior1 /*6806*/, "OW_PATH_195");
    wld_insertnpc(orcwarrior1 /*6806*/, "OW_PATH_195");
    wld_insertnpc(orcwarrior2 /*6807*/, "OW_PATH_195");
    wld_insertnpc(orcdog /*6790*/, "OW_ORC_ORCDOG_SPAWN01");
    wld_insertnpc(orcdog /*6790*/, "OW_ORC_ORCDOG_SPAWN01");
    wld_insertnpc(orcdog /*6790*/, "OW_ORC_ORCDOG_SPAWN01");
    wld_insertnpc(orcwarrior1 /*6806*/, "OW_ORC_ORCDOG_SPAWN01_MOVEMENT");
    wld_insertnpc(orcwarrior1 /*6806*/, "OW_ORC_ORCDOG_SPAWN01_MOVEMENT");
    wld_insertnpc(orcbiter /*6787*/, "SPAWN_OW_MOLERAT_ORC_04");
    wld_insertnpc(orcbiter /*6787*/, "SPAWN_OW_MOLERAT_ORC_04");
    wld_insertnpc(orcbiter /*6787*/, "SPAWN_OW_MOLERAT_ORC_04");
    wld_insertnpc(orcbiter /*6787*/, "OW_PATH_103");
    wld_insertnpc(orcbiter /*6787*/, "OW_PATH_103");
    wld_insertnpc(orcbiter /*6787*/, "SPAWN_OW_WOLF_NEAR_SHADOW3");
    wld_insertnpc(orcbiter /*6787*/, "OW_PATH_3_07");
    wld_insertnpc(orcbiter /*6787*/, "OW_PATH_3_07");
    wld_insertnpc(orcbiter /*6787*/, "OW_PATH_3_07");
    wld_insertnpc(orcbiter /*6787*/, "OW_PATH_3_07");
    wld_insertnpc(orcscout /*6793*/, "OW_PATH_3_06");
    wld_insertnpc(orcwarrior1 /*6806*/, "OW_PATH_3_05");
    wld_insertnpc(orcwarrior1 /*6806*/, "OW_PATH_3_05");
    wld_insertnpc(orcwarrior1 /*6806*/, "OW_PATH_3_05");
    wld_insertnpc(orcwarrior2 /*6807*/, "OW_PATH_3_05");
    wld_insertnpc(orcwarrior2 /*6807*/, "OW_ORCBRIDGE_END");
    wld_insertnpc(orcwarrior2 /*6807*/, "OW_ORCBRIDGE_END");
    wld_insertnpc(orcwarrior2 /*6807*/, "OW_ORC_BRIDGE_GUARD");
    wld_insertnpc(orcwarrior2 /*6807*/, "OW_ORC_BRIDGE_GUARD");
    wld_insertnpc(orcwarrior2 /*6807*/, "OW_ORC_PATH_02_MOVEMENT");
    wld_insertnpc(orcwarrior2 /*6807*/, "OW_ORC_PATH_02_MOVEMENT");
    wld_insertnpc(orcwarrior2 /*6807*/, "OW_ORC_PATH_02_MOVE");
    wld_insertnpc(orcwarrior3 /*6808*/, "OW_ORC_PATH_02_MOVE");
    wld_insertnpc(orcpeasantdance /*6802*/, "OW_ORC_PLACE_01_MOVEMENT");
    wld_insertnpc(orcpeasantdance /*6802*/, "OW_ORC_PLACE_01_MOVEMENT2");
    wld_insertnpc(orcpeasantdance /*6802*/, "OW_ORC_PLACE_01_MOVEMENT3");
    wld_insertnpc(orcpeasantdrum /*6803*/, "OW_ORC_HUT_01");
    wld_insertnpc(orcpeasantdrum /*6803*/, "OW_ORC_HUT_02");
    wld_insertnpc(orcpeasanteatanddrink /*6794*/, "OW_ORC_HUT_01");
    wld_insertnpc(orcpeasanteatanddrink /*6794*/, "OW_ORC_PLACE_01");
    wld_insertnpc(orcpeasanteatanddrink /*6794*/, "OW_ORC_PLACE_01");
    wld_insertnpc(orcpeasanteatanddrink /*6794*/, "OW_ORC_PLACE_01_MOVEMENT");
    wld_insertnpc(orcpeasanteatanddrink /*6794*/, "OW_ORC_HUT_02");
    wld_insertnpc(orcwarrior2 /*6807*/, "OW_ORC_PATH_02_GUARD_SPAWN");
    wld_insertnpc(orcwarrior2 /*6807*/, "OW_ORC_PATH_02_GUARD_SPAWN");
    wld_insertnpc(orcwarrior2 /*6807*/, "OW_ORC_PATH_04");
    wld_insertnpc(orcwarrior2 /*6807*/, "OW_ORC_PATH_04_MOVEMENT");
    wld_insertnpc(orcwarrior2 /*6807*/, "OW_ORC_PATH_04_MOVEMENT");
    wld_insertnpc(orcwarrior3 /*6808*/, "OW_ORC_PATH_WALL");
    wld_insertnpc(orcpeasanteatanddrink /*6794*/, "OW_ORC_HUT_03");
    wld_insertnpc(orcpeasanteatanddrink /*6794*/, "OW_ORC_HUT_03");
    wld_insertnpc(orcpeasanteatanddrink /*6794*/, "OW_ORC_HUT_04");
    wld_insertnpc(orcpeasantdance /*6802*/, "OW_ORC_HUT_03_MOVEMENT");
    wld_insertnpc(orcpeasantdance /*6802*/, "OW_ORC_HUT_03_MOVEMENT");
    wld_insertnpc(orcpeasantdance /*6802*/, "OW_ORC_PATH_06_1");
    wld_insertnpc(orcpeasantdrum /*6803*/, "OW_ORC_HUT_03");
    wld_insertnpc(orcpeasantdrum /*6803*/, "OW_ORC_HUT_04");
    wld_insertnpc(orcpeasanteatanddrink /*6794*/, "OW_ORC_PATH_06_2");
    wld_insertnpc(orcpeasanteatanddrink /*6794*/, "OW_ORC_PATH_06_2");
    wld_insertnpc(orcwarrior2 /*6807*/, "OW_ORC_PATH_06_4");
    wld_insertnpc(orcwarrior2 /*6807*/, "OW_ORC_PATH_06_4");
    wld_insertnpc(orcwarrior4 /*6809*/, "OW_ORC_SHAMAN_PATH1");
    wld_insertnpc(orcwarrior4 /*6809*/, "OW_ORC_SHAMAN_PATH1");
    wld_insertnpc(orcwarrior3 /*6808*/, "OW_PATH_06_13_GUARD");
    wld_insertnpc(orcwarrior4 /*6809*/, "OW_PATH_06_13_GUARD1");
    wld_insertnpc(orcwarrior4 /*6809*/, "OW_PATH_06_13_GUARD1");
    wld_insertnpc(orcwarrior4 /*6809*/, "OW_PATH_06_13_GUARD2");
    wld_insertnpc(orcshaman /*6798*/, "OW_PATH_06_14_HEILIGTUM");
    wld_insertnpc(orcshaman /*6798*/, "OW_PATH_06_14_HEILIGTUM2");
    wld_insertnpc(orcshaman /*6798*/, "OW_PATH_06_14_HEILIGTUM3");
    wld_insertnpc(orcshaman /*6798*/, "OW_PATH_06_14_HEILIGTUM4");
    wld_insertnpc(stonegolem /*6755*/, "OW_PATH_123");
    wld_insertnpc(icegolem /*6759*/, "OW_PATH_125");
    wld_insertnpc(firegolem /*6758*/, "OW_PATH_127");
    wld_insertnpc(orcscout /*6793*/, "BRIDGE_CASTLE_TO_PLATEAU");
    wld_insertnpc(orcscout /*6793*/, "CASTLE_16");
    wld_insertnpc(skeleton /*6825*/, "OW_FOGDUNGEON_06");
    wld_insertnpc(skeletonscout /*6827*/, "OW_FOGDUNGEON_SKELETT_SPAWN");
    wld_insertnpc(skeleton /*6825*/, "OW_FOGDUNGEON_09");
    wld_insertnpc(skeletonwarrior /*6828*/, "OW_FOGDUNGEON_SKELETT_SPAWN");
    wld_insertnpc(skeleton /*6825*/, "OW_FOGDUNGEON_16");
    wld_insertnpc(skeletonscout /*6827*/, "OW_FOGDUNGEON_28");
    wld_insertnpc(skeletonwarrior /*6828*/, "OW_FOGDUNGEON_28");
    wld_insertnpc(skeletonwarrior /*6828*/, "OW_FOGDUNGEON_23");
    wld_insertnpc(skeletonwarrior /*6828*/, "OW_FOGDUNGEON_24");
    wld_insertnpc(skeletonscout /*6827*/, "OW_FOGDUNGEON_19");
    wld_insertnpc(skeleton /*6825*/, "OW_FOGDUNGEON_20");
    wld_insertnpc(skeleton /*6825*/, "OW_FOGDUNGEON_36");
    wld_insertnpc(skeleton /*6825*/, "OW_FOGDUNGEON_36_MOVEMENT");
    wld_insertnpc(skeletonwarrior /*6828*/, "OW_FOGDUNGEON_36_MOVEMENT");
    wld_insertnpc(skeleton /*6825*/, "OW_FOGDUNGEON_36_MOVEMENT2");
    wld_insertnpc(skeletonscout /*6827*/, "OW_FOGDUNGEON_36_MOVEMENT2");
    wld_insertnpc(skeletonwarrior /*6828*/, "OW_FOGDUNGEON_37");
    wld_insertnpc(skeletonmage_fogtower /*6830*/, "OW_FOGDUNGEON_37");
    wld_insertnpc(skeleton /*6825*/, "OW_FOGDUNGEON_40");
    wld_insertnpc(skeletonscout /*6827*/, "OW_FOGDUNGEON_40");
    wld_insertnpc(skeleton /*6825*/, "OW_FOGDUNGEON_43");
    wld_insertnpc(skeletonwarrior /*6828*/, "OW_FOGDUNGEON_43");
    wld_insertnpc(skeletonwarrior /*6828*/, "MAGICTOWER_01");
    wld_insertnpc(skeletonscout /*6827*/, "MAGICTOWER_01");
    wld_insertnpc(skeletonwarrior /*6828*/, "MAGICTOWER_STAIRS");
    wld_insertnpc(skeletonscout /*6827*/, "MAGICTOWER_STAIRS");
    wld_insertnpc(skeletonmage /*6829*/, "MAGICTOWER_02");
    wld_insertnpc(zombie /*6868*/, "MAGICTOWER_COR");
    wld_insertnpc(zombie2 /*6869*/, "MAGICTOWER_COR");
    wld_insertnpc(zombie3 /*6870*/, "MAGICTOWER_SAT");
    wld_insertnpc(zombie4 /*6871*/, "MAGICTOWER_SAT");
    wld_insertnpc(zombie /*6868*/, "MAGICTOWER_03_MOVEMENT");
    wld_insertnpc(zombie2 /*6869*/, "MAGICTOWER_03_MOVEMENT");
    wld_insertnpc(zombie3 /*6870*/, "MAGICTOWER_03_MOVEMENT_2");
    wld_insertnpc(zombie4 /*6871*/, "MAGICTOWER_03_MOVEMENT_2");
    wld_insertnpc(zombie /*6868*/, "MAGICTOWER_04");
    wld_insertnpc(zombie2 /*6869*/, "MAGICTOWER_04");
    wld_insertnpc(zombie3 /*6870*/, "MAGICTOWER_04");
    wld_insertnpc(zombie4 /*6871*/, "MAGICTOWER_04");
    wld_insertnpc(zombie /*6868*/, "MAGICTOWER_06");
    wld_insertnpc(zombie2 /*6869*/, "MAGICTOWER_06");
    wld_insertnpc(zombie3 /*6870*/, "MAGICTOWER_06");
    wld_insertnpc(zombie4 /*6871*/, "MAGICTOWER_06");
};

func void init_sub_surface() {
    wld_setobjectroutine(0, 0, "OW_FIREPLACE_GROUND2_01", 1);
    wld_setobjectroutine(20, 0, "OW_FIREPLACE_GROUND2_01", 1);
    wld_setobjectroutine(5, 0, "OW_FIREPLACE_GROUND2_01", 0);
    wld_setmobroutine(0, 0, "FIREPLACE", 1);
    wld_setmobroutine(22, 0, "FIREPLACE", 1);
    wld_setmobroutine(5, 0, "FIREPLACE", 0);
    wld_setobjectroutine(0, 0, "OW_FIREPLACE_HIGH_01", 1);
    wld_setobjectroutine(20, 0, "OW_FIREPLACE_HIGH_01", 1);
    wld_setobjectroutine(5, 0, "OW_FIREPLACE_HIGH_01", 0);
    wld_setobjectroutine(0, 0, "OW_FIREPLACE_HIGH_02", 1);
    wld_setobjectroutine(20, 0, "OW_FIREPLACE_HIGH_02", 1);
    wld_setobjectroutine(5, 0, "OW_FIREPLACE_HIGH_02", 0);
    wld_setobjectroutine(0, 0, "OW_FIREPLACE_HIGH_03", 1);
    wld_setobjectroutine(20, 0, "OW_FIREPLACE_HIGH_03", 1);
    wld_setobjectroutine(5, 0, "OW_FIREPLACE_HIGH_03", 0);
    wld_setobjectroutine(0, 0, "OW_FIREPLACE_HIGH2_01", 1);
    wld_setobjectroutine(20, 0, "OW_FIREPLACE_HIGH2_01", 1);
    wld_setobjectroutine(5, 0, "OW_FIREPLACE_HIGH2_01", 0);
    wld_setobjectroutine(0, 0, "OW_FIREPLACE_HIGH2_02", 1);
    wld_setobjectroutine(20, 0, "OW_FIREPLACE_HIGH2_02", 1);
    wld_setobjectroutine(5, 0, "OW_FIREPLACE_HIGH2_02", 0);
    wld_setobjectroutine(0, 0, "OW_FIREPLACE_HIGH2_03", 1);
    wld_setobjectroutine(20, 0, "OW_FIREPLACE_HIGH2_03", 1);
    wld_setobjectroutine(5, 0, "OW_FIREPLACE_HIGH2_03", 0);
    wld_setobjectroutine(0, 0, "OW_FIREPLACE_HIGH2_04", 1);
    wld_setobjectroutine(20, 0, "OW_FIREPLACE_HIGH2_04", 1);
    wld_setobjectroutine(5, 0, "OW_FIREPLACE_HIGH2_04", 0);
    wld_setobjectroutine(0, 0, "OW_FIREPLACE_HIGH2_05", 1);
    wld_setobjectroutine(20, 0, "OW_FIREPLACE_HIGH2_05", 1);
    wld_setobjectroutine(5, 0, "OW_FIREPLACE_HIGH2_05", 0);
    wld_setobjectroutine(0, 0, "OW_FIREPLACE_HIGH2_06", 1);
    wld_setobjectroutine(20, 0, "OW_FIREPLACE_HIGH2_06", 1);
    wld_setobjectroutine(5, 0, "OW_FIREPLACE_HIGH2_06", 0);
    wld_setobjectroutine(0, 0, "OW_FIREPLACE_HIGH2_07", 1);
    wld_setobjectroutine(20, 0, "OW_FIREPLACE_HIGH2_07", 1);
    wld_setobjectroutine(5, 0, "OW_FIREPLACE_HIGH2_07", 0);
    wld_setobjectroutine(0, 0, "OW_FIREPLACE_HIGH2_08", 1);
    wld_setobjectroutine(20, 0, "OW_FIREPLACE_HIGH2_08", 1);
    wld_setobjectroutine(5, 0, "OW_FIREPLACE_HIGH2_08", 0);
    wld_setobjectroutine(0, 0, "OW_FIREPLACE_HIGH2_09", 1);
    wld_setobjectroutine(20, 0, "OW_FIREPLACE_HIGH2_09", 1);
    wld_setobjectroutine(5, 0, "OW_FIREPLACE_HIGH2_09", 0);
    wld_setobjectroutine(0, 0, "OW_FIREPLACE_HIGH2_10", 1);
    wld_setobjectroutine(20, 0, "OW_FIREPLACE_HIGH2_10", 1);
    wld_setobjectroutine(5, 0, "OW_FIREPLACE_HIGH2_10", 0);
    wld_setobjectroutine(0, 0, "OW_FIREPLACE_HIGH2_11", 1);
    wld_setobjectroutine(20, 0, "OW_FIREPLACE_HIGH2_11", 1);
    wld_setobjectroutine(5, 0, "OW_FIREPLACE_HIGH2_11", 0);
    wld_setobjectroutine(0, 0, "OW_FIREPLACE_HIGH2_12", 1);
    wld_setobjectroutine(20, 0, "OW_FIREPLACE_HIGH2_12", 1);
    wld_setobjectroutine(5, 0, "OW_FIREPLACE_HIGH2_12", 0);
    wld_setobjectroutine(0, 0, "OW_FIREPLACE_HIGH2_13", 1);
    wld_setobjectroutine(20, 0, "OW_FIREPLACE_HIGH2_13", 1);
    wld_setobjectroutine(5, 0, "OW_FIREPLACE_HIGH2_13", 0);
    wld_setobjectroutine(0, 0, "OW_FIREPLACE_HIGH2_14", 1);
    wld_setobjectroutine(20, 0, "OW_FIREPLACE_HIGH2_14", 1);
    wld_setobjectroutine(5, 0, "OW_FIREPLACE_HIGH2_14", 0);
    wld_setobjectroutine(0, 0, "OW_FIREPLACE_HIGH2_15", 1);
    wld_setobjectroutine(20, 0, "OW_FIREPLACE_HIGH2_15", 1);
    wld_setobjectroutine(5, 0, "OW_FIREPLACE_HIGH2_15", 0);
    wld_setobjectroutine(0, 0, "OW_FIREPLACE_HIGH2_16", 1);
    wld_setobjectroutine(20, 0, "OW_FIREPLACE_HIGH2_16", 1);
    wld_setobjectroutine(5, 0, "OW_FIREPLACE_HIGH2_16", 0);
    wld_setobjectroutine(0, 0, "OW_FIREPLACE_HIGH2_17", 1);
    wld_setobjectroutine(20, 0, "OW_FIREPLACE_HIGH2_17", 1);
    wld_setobjectroutine(5, 0, "OW_FIREPLACE_HIGH2_17", 0);
    wld_setobjectroutine(0, 0, "OW_FIREPLACE_HIGH2_18", 1);
    wld_setobjectroutine(20, 0, "OW_FIREPLACE_HIGH2_18", 1);
    wld_setobjectroutine(5, 0, "OW_FIREPLACE_HIGH2_18", 0);
    wld_setobjectroutine(0, 0, "OW_FIREPLACE_HIGH2_19", 1);
    wld_setobjectroutine(20, 0, "OW_FIREPLACE_HIGH2_19", 1);
    wld_setobjectroutine(5, 0, "OW_FIREPLACE_HIGH2_19", 0);
    wld_setobjectroutine(0, 0, "OW_FIREPLACE_HIGH2_20", 1);
    wld_setobjectroutine(20, 0, "OW_FIREPLACE_HIGH2_20", 1);
    wld_setobjectroutine(5, 0, "OW_FIREPLACE_HIGH2_20", 0);
    wld_setobjectroutine(0, 0, "OW_FIREPLACE_HIGH2_21", 1);
    wld_setobjectroutine(20, 0, "OW_FIREPLACE_HIGH2_21", 1);
    wld_setobjectroutine(5, 0, "OW_FIREPLACE_HIGH2_21", 0);
    wld_setobjectroutine(0, 0, "OW_FIREPLACE_HIGH2_22", 1);
    wld_setobjectroutine(20, 0, "OW_FIREPLACE_HIGH2_22", 1);
    wld_setobjectroutine(5, 0, "OW_FIREPLACE_HIGH2_22", 0);
    wld_setobjectroutine(0, 0, "OW_FIREPLACE_HIGH2_23", 1);
    wld_setobjectroutine(20, 0, "OW_FIREPLACE_HIGH2_23", 1);
    wld_setobjectroutine(5, 0, "OW_FIREPLACE_HIGH2_23", 0);
    wld_setobjectroutine(0, 0, "OW_FIREPLACE_HIGH2_24", 1);
    wld_setobjectroutine(20, 0, "OW_FIREPLACE_HIGH2_24", 1);
    wld_setobjectroutine(5, 0, "OW_FIREPLACE_HIGH2_24", 0);
    wld_setobjectroutine(0, 0, "OW_FIREPLACE_HIGH2_25", 1);
    wld_setobjectroutine(20, 0, "OW_FIREPLACE_HIGH2_25", 1);
    wld_setobjectroutine(5, 0, "OW_FIREPLACE_HIGH2_25", 0);
    wld_setobjectroutine(0, 0, "OW_FIREPLACE_HIGH2_26", 1);
    wld_setobjectroutine(20, 0, "OW_FIREPLACE_HIGH2_26", 1);
    wld_setobjectroutine(5, 0, "OW_FIREPLACE_HIGH2_26", 0);
    wld_setobjectroutine(0, 0, "OW_FIREPLACE_HIGH2_27", 1);
    wld_setobjectroutine(20, 0, "OW_FIREPLACE_HIGH2_27", 1);
    wld_setobjectroutine(5, 0, "OW_FIREPLACE_HIGH2_27", 0);
    wld_setobjectroutine(0, 0, "OW_FIREPLACE_HIGH2_28", 1);
    wld_setobjectroutine(20, 0, "OW_FIREPLACE_HIGH2_28", 1);
    wld_setobjectroutine(5, 0, "OW_FIREPLACE_HIGH2_28", 0);
    wld_setobjectroutine(0, 0, "OW_FIREPLACE_HIGH2_29", 1);
    wld_setobjectroutine(20, 0, "OW_FIREPLACE_HIGH2_29", 1);
    wld_setobjectroutine(5, 0, "OW_FIREPLACE_HIGH2_29", 0);
    wld_setobjectroutine(0, 0, "OW_FIREPLACE_HIGH2_30", 1);
    wld_setobjectroutine(20, 0, "OW_FIREPLACE_HIGH2_30", 1);
    wld_setobjectroutine(5, 0, "OW_FIREPLACE_HIGH2_30", 0);
    wld_setobjectroutine(0, 0, "OW_FIREPLACE_PCHIGH2_01", 1);
    wld_setobjectroutine(20, 0, "OW_FIREPLACE_PCHIGH2_01", 1);
    wld_setobjectroutine(5, 0, "OW_FIREPLACE_PCHIGH2_01", 0);
    wld_setobjectroutine(0, 0, "OW_FIREPLACE_PCHIGH2_02", 1);
    wld_setobjectroutine(20, 0, "OW_FIREPLACE_PCHIGH2_02", 1);
    wld_setobjectroutine(5, 0, "OW_FIREPLACE_PCHIGH2_02", 0);
    wld_setobjectroutine(0, 0, "OW_FIREPLACE_PCHIGH2_03", 1);
    wld_setobjectroutine(20, 0, "OW_FIREPLACE_PCHIGH2_03", 1);
    wld_setobjectroutine(5, 0, "OW_FIREPLACE_PCHIGH2_03", 0);
    wld_setobjectroutine(0, 0, "OW_FIREPLACE_PCHIGH2_04", 1);
    wld_setobjectroutine(20, 0, "OW_FIREPLACE_PCHIGH2_04", 1);
    wld_setobjectroutine(5, 0, "OW_FIREPLACE_PCHIGH2_04", 0);
    wld_setobjectroutine(0, 0, "OW_FIREPLACE_PCHIGH2_05", 1);
    wld_setobjectroutine(20, 0, "OW_FIREPLACE_PCHIGH2_05", 1);
    wld_setobjectroutine(5, 0, "OW_FIREPLACE_PCHIGH2_05", 0);
    wld_setobjectroutine(0, 0, "OW_FIREPLACE_PCHIGH2_06", 1);
    wld_setobjectroutine(20, 0, "OW_FIREPLACE_PCHIGH2_06", 1);
    wld_setobjectroutine(5, 0, "OW_FIREPLACE_PCHIGH2_06", 0);
    wld_setmobroutine(0, 0, "FIREPLACE", 1);
};

func void startup_demontower() {
    startup_sub_demontower();
};

func void init_demontower() {
    init_sub_demontower();
};

func void startup_freemincamp() {
    startup_sub_freeminecamp();
};

func void init_freemincamp() {
    init_sub_freeminecamp();
};

func void startup_psicamp() {
    startup_sub_psicamp();
};

func void init_psicamp() {
    init_sub_psicamp();
};

func void startup_newcamp() {
    startup_sub_newcamp();
};

func void init_newcamp() {
    init_sub_newcamp();
};

func void startup_oldcamp() {
    startup_sub_oldcamp();
};

func void init_oldcamp() {
    init_sub_oldcamp();
};

func void startup_surface() {
    startup_sub_surface();
};

func void init_surface() {
    init_sub_surface();
};

func void init_world() {
    var c_npc urshak;

    init_sub_newcamp();
    init_sub_oldcamp();
    init_sub_psicamp();
    init_sub_demontower();
    init_sub_freeminecamp();
    init_sub_surface();
    b_initmonsterattitudes();
    b_initguildattitudes();
    if (friendofurshak) {
        urshak = hlp_getnpc(orc_2200_shaman);
        urshak.name = name_orcshaman;
    };
    if (kapitel == 6) {
        b_setnpctype(kdw_600_saturas /*7557*/, npctype_main);
        b_setnpctype(kdw_601_myxir /*7559*/, npctype_main);
        b_setnpctype(kdw_602_merdarion /*7561*/, npctype_main);
        b_setnpctype(kdw_603_nefarius /*7564*/, npctype_main);
        b_setnpctype(kdw_604_cronos /*7566*/, npctype_main);
        b_setnpctype(kdw_605_riordian /*7568*/, npctype_main);
    };
};

func void startup_world() {
    startup_sub_newcamp();
    startup_sub_oldcamp();
    startup_sub_psicamp();
    startup_sub_demontower();
    startup_sub_freeminecamp();
    startup_sub_surface();
    init_world();
    playvideo("INTRO.BIK");
};

func void startup_orccity() {
};

func void init_orccity() {
    wld_setmobroutine(0, 0, "FIREPLACE", 1);
    b_initmonsterattitudes();
    b_initguildattitudes();
};

func void startup_orcgraveyard() {
    wld_insertnpc(orcscoutgyd /*6795*/, "GRYD_006");
    wld_insertnpc(orcscoutgyd /*6795*/, "GRYD_015");
    wld_insertnpc(tpl_1445_templer /*8293*/, "GRYD_016");
    b_killnpc(tpl_1445_templer /*8293*/);
    wld_insertnpc(orcscoutgyd /*6795*/, "GRYD_019B");
    wld_insertnpc(orcscoutgyd /*6795*/, "GRYD_019D");
    wld_insertnpc(orcscoutgyd /*6795*/, "GRYD_020B");
    wld_insertnpc(tpl_1446_templer /*8295*/, "GRYD_020");
    b_killnpc(tpl_1446_templer /*8295*/);
    wld_insertnpc(gur_1211_baallukor /*7480*/, "GRYD_025");
    wld_insertnpc(tpl_1443_templer /*8289*/, "GRYD_025");
    b_killnpc(tpl_1443_templer /*8289*/);
    wld_insertnpc(tpl_1444_templer /*8291*/, "GRYD_025");
    b_killnpc(tpl_1444_templer /*8291*/);
    wld_insertnpc(orcscoutgyd /*6795*/, "GRYD_048");
    wld_insertnpc(orcscoutgyd /*6795*/, "GRYD_048");
    wld_insertnpc(orcscoutgyd /*6795*/, "GRYD_043");
    wld_insertnpc(orcscoutgyd /*6795*/, "GRYD_031");
    wld_insertnpc(orcscoutgyd /*6795*/, "GRYD_032");
    wld_insertnpc(orcscoutgyd /*6795*/, "GRYD_037");
    wld_insertnpc(orcscoutgyd /*6795*/, "GRYD_040");
    wld_insertnpc(orcscoutgyd /*6795*/, "GRYD_047");
    wld_insertnpc(orcscoutgyd /*6795*/, "GRYD_047");
    wld_insertnpc(orcscoutgyd /*6795*/, "GRYD_061");
    wld_insertnpc(orcscoutgyd /*6795*/, "GRYD_062");
    wld_insertnpc(orcscoutgyd /*6795*/, "GRYD_058");
    wld_insertnpc(orcscoutgyd /*6795*/, "GRYD_068");
    wld_insertnpc(orcwarrior2 /*6807*/, "GRYD_055");
};

func void init_orcgraveyard() {
    var c_npc lukor;

    wld_setmobroutine(0, 0, "FIREPLACE", 1);
    b_initmonsterattitudes();
    b_initguildattitudes();
    if (baallukor_bringparchment == 4) {
        lukor = hlp_getnpc(gur_1211_baallukor);
        lukor.npctype = npctype_main;
    };
};

func void startup_orctempel() {
    b_story_enteredtemple();
    wld_insertnpc(skeleton /*6825*/, "TPL_017");
    wld_insertnpc(skeletonscout /*6827*/, "TPL_020");
    wld_insertnpc(skeletonwarrior /*6828*/, "TPL_022");
    wld_insertnpc(skeleton /*6825*/, "TPL_022");
    wld_insertnpc(skeleton /*6825*/, "TPL_027");
    wld_insertnpc(skeletonscout /*6827*/, "TPL_030");
    wld_insertnpc(skeletonwarrior /*6828*/, "TPL_030");
    wld_insertnpc(skeleton /*6825*/, "TPL_034");
    wld_insertnpc(skeletonwarrior /*6828*/, "TPL_035");
    wld_insertnpc(skeletonscout /*6827*/, "TPL_045");
    wld_insertnpc(skeleton /*6825*/, "TPL_045");
    wld_insertnpc(skeletonwarrior /*6828*/, "TPL_045");
    wld_insertnpc(skeletonwarrior /*6828*/, "TPL_047");
    wld_insertnpc(skeleton /*6825*/, "TPL_047");
    wld_insertnpc(skeletonscout /*6827*/, "TPL_051");
    wld_insertnpc(skeletonwarrior /*6828*/, "TPL_051");
    wld_insertnpc(skeleton /*6825*/, "TPL_051");
    wld_insertnpc(skeletonwarrior /*6828*/, "TPL_411");
    wld_insertnpc(skeletonwarrior /*6828*/, "TPL_412");
    wld_insertnpc(skeletonwarrior /*6828*/, "TPL_414");
    wld_insertnpc(skeletonscout /*6827*/, "TPL_412");
    wld_insertnpc(skeletonscout /*6827*/, "TPL_413");
    wld_insertnpc(skeleton /*6825*/, "TPL_411");
    wld_insertnpc(skeletonmage /*6829*/, "TPL_031");
    wld_insertnpc(skeletonmage /*6829*/, "TPL_046");
    wld_insertnpc(undeadorcwarrior /*6855*/, "TPL_044");
    wld_insertnpc(undeadorcwarrior /*6855*/, "TPL_090");
    wld_insertnpc(undeadorcwarrior /*6855*/, "TPL_092");
    wld_insertnpc(undeadorcwarrior /*6855*/, "TPL_114");
    wld_insertnpc(undeadorcwarrior /*6855*/, "TPL_117");
    wld_insertnpc(undeadorcwarrior /*6855*/, "TPL_121");
    wld_insertnpc(undeadorcwarrior /*6855*/, "TPL_132");
    wld_insertnpc(undeadorcwarrior /*6855*/, "TPL_140");
    wld_insertnpc(undeadorcwarrior /*6855*/, "TPL_142");
    wld_insertnpc(undeadorcwarrior /*6855*/, "TPL_145");
    wld_insertnpc(undeadorcwarrior /*6855*/, "TPL_148");
    wld_insertnpc(undeadorcwarrior /*6855*/, "TPL_151");
    wld_insertnpc(undeadorcwarrior /*6855*/, "TPL_161");
    wld_insertnpc(undeadorcwarrior /*6855*/, "TPL_258");
    wld_insertnpc(undeadorcwarrior /*6855*/, "TPL_263");
    wld_insertnpc(undeadorcwarrior /*6855*/, "TPL_294");
    wld_insertnpc(otminecrawler /*6780*/, "TPL_066");
    wld_insertnpc(otminecrawler /*6780*/, "TPL_069");
    wld_insertnpc(otminecrawler /*6780*/, "TPL_076");
    wld_insertnpc(otminecrawler /*6780*/, "TPL_106");
    wld_insertnpc(otminecrawler /*6780*/, "TPL_106");
    wld_insertnpc(otminecrawler /*6780*/, "TPL_229");
    wld_insertnpc(otminecrawler /*6780*/, "TPL_235");
    wld_insertnpc(otminecrawler /*6780*/, "TPL_405");
    wld_insertnpc(otminecrawler /*6780*/, "TPL_407");
    wld_insertnpc(otdemon /*6740*/, "TPL_216");
    wld_insertnpc(otdemon /*6740*/, "TPL_218");
    wld_insertnpc(otdemon /*6740*/, "TPL_186");
    wld_insertnpc(otdemon /*6740*/, "TPL_175");
    wld_insertnpc(otdemon /*6740*/, "TPL_174");
    wld_insertnpc(kdf_406_otxardas /*7554*/, "TPL_408");
    wld_insertnpc(tpl_1455_gorboba /*8321*/, "TPL_408");
    wld_insertnpc(tpl_1447_templer /*8297*/, "TPL_408");
    wld_insertnpc(tpl_1448_templer /*8300*/, "TPL_408");
    wld_insertnpc(tpl_1456_templer /*8327*/, "TPL_408");
    wld_insertnpc(tpl_1457_templer /*8330*/, "TPL_408");
    wld_insertnpc(tpl_1458_templer /*8333*/, "TPL_408");
    wld_insertnpc(tpl_1459_templer /*8336*/, "TPL_408");
    wld_insertnpc(tpl_1460_templer /*8339*/, "TPL_408");
    wld_insertnpc(tpl_1449_templer /*8303*/, "TPL_408");
    wld_insertnpc(tpl_1450_templer /*8306*/, "TPL_408");
    wld_insertnpc(tpl_1451_templer /*8309*/, "TPL_408");
    wld_insertnpc(tpl_1452_templer /*8312*/, "TPL_408");
    wld_insertnpc(tpl_1453_templer /*8315*/, "TPL_408");
    wld_insertnpc(tpl_1454_templer /*8318*/, "TPL_408");
    wld_insertnpc(gur_1212_madcorkalom /*7491*/, "TPL_408");
    wld_insertnpc(nov_1359_novize /*7731*/, "TPL_408");
    wld_insertnpc(nov_1360_novize /*7734*/, "TPL_408");
    wld_insertnpc(nov_1361_novize /*7737*/, "TPL_408");
    wld_insertnpc(nov_1362_novize /*7740*/, "TPL_408");
    wld_insertnpc(nov_1363_novize /*7743*/, "TPL_408");
    wld_insertnpc(nov_1364_novize /*7746*/, "TPL_408");
    wld_insertnpc(nov_1365_novize /*7749*/, "TPL_408");
    wld_insertnpc(nov_1366_novize /*7752*/, "TPL_408");
    wld_insertnpc(nov_1367_novize /*7755*/, "TPL_408");
    wld_insertnpc(nov_1368_novize /*7758*/, "TPL_408");
    wld_insertnpc(nov_1369_novize /*7761*/, "TPL_408");
    wld_insertnpc(nov_1370_novize /*7764*/, "TPL_408");
    wld_insertnpc(orc_priest_1 /*7776*/, "TPL_058");
    wld_insertnpc(orc_priest_4 /*7782*/, "TPL_112");
    wld_insertnpc(orc_priest_5 /*7784*/, "TPL_300");
    wld_insertnpc(sleeper /*6837*/, "TPL_395");
};

func void init_orctempel() {
    wld_setmobroutine(0, 0, "FIREPLACE", 1);
    b_initmonsterattitudes();
    b_initguildattitudes();
};

func void startup_abandonedmine() {
    wld_insertnpc(greengobboclub /*6749*/, "FP_REST_001");
    wld_insertnpc(greengobboclub /*6749*/, "FP_REST_002");
    wld_insertitem(altesschwertvm /*4550*/, "FP_SWORD_001");
    wld_insertitem(itlstorch /*4518*/, "FP_TORCH_001");
    wld_insertitem(itlstorch /*4518*/, "FP_TORCH_002");
};

func void init_abandonedmine() {
    wld_setmobroutine(0, 0, "FIREPLACE", 1);
    b_initmonsterattitudes();
    b_initguildattitudes();
};

func void startup_oldmine() {
    wld_insertnpc(stt_300_alberto /*8136*/, "OM_122");
    wld_insertnpc(stt_301_ian /*8138*/, "OM_122");
    wld_insertnpc(stt_302_viper /*8141*/, "OM_122");
    wld_insertnpc(stt_335_santino /*8183*/, "OM_122");
    wld_insertnpc(grd_234_gardist /*7299*/, "OM_122");
    wld_insertnpc(grd_235_gardist /*7301*/, "OM_122");
    wld_insertnpc(grd_236_gardist /*7303*/, "OM_122");
    wld_insertnpc(grd_260_drake /*7364*/, "OM_122");
    wld_insertnpc(grd_261_brandick /*7366*/, "OM_122");
    wld_insertnpc(grd_262_aaron /*7369*/, "OM_122");
    wld_insertnpc(grd_263_asghan /*7372*/, "OM_122");
    wld_insertnpc(grd_264_gardist /*7375*/, "OM_122");
    wld_insertnpc(grd_266_gardist /*7379*/, "OM_122");
    wld_insertnpc(grd_267_gardist /*7381*/, "OM_122");
    wld_insertnpc(grd_268_gardist /*7383*/, "OM_122");
    wld_insertnpc(grd_269_gardist /*7385*/, "OM_122");
    wld_insertnpc(grd_271_ulbert /*7387*/, "OM_122");
    wld_insertnpc(grd_272_gardist /*7390*/, "OM_122");
    wld_insertnpc(grd_273_gardist /*7392*/, "OM_122");
    wld_insertnpc(grd_277_gardist /*7398*/, "OM_122");
    wld_insertnpc(grd_278_gardist /*7400*/, "OM_122");
    wld_insertnpc(vlk_518_buddler /*8398*/, "OM_122");
    wld_insertnpc(vlk_525_buddler /*8414*/, "OM_122");
    wld_insertnpc(vlk_539_buddler /*8440*/, "OM_122");
    wld_insertnpc(vlk_540_buddler /*8442*/, "OM_122");
    wld_insertnpc(vlk_541_buddler /*8444*/, "OM_122");
    wld_insertnpc(vlk_542_buddler /*8446*/, "OM_122");
    wld_insertnpc(vlk_543_buddler /*8448*/, "OM_122");
    wld_insertnpc(vlk_544_buddler /*8450*/, "OM_122");
    wld_insertnpc(vlk_545_buddler /*8452*/, "OM_122");
    wld_insertnpc(vlk_546_buddler /*8454*/, "OM_122");
    wld_insertnpc(vlk_547_buddler /*8456*/, "OM_122");
    wld_insertnpc(vlk_548_buddler /*8458*/, "OM_122");
    wld_insertnpc(vlk_549_buddler /*8460*/, "OM_122");
    wld_insertnpc(vlk_550_buddler /*8462*/, "OM_122");
    wld_insertnpc(vlk_551_buddler /*8464*/, "OM_122");
    wld_insertnpc(vlk_579_buddler /*8513*/, "OM_122");
    wld_insertnpc(vlk_583_glen /*8523*/, "OM_122");
    wld_insertnpc(vlk_584_snipes /*8525*/, "OM_122");
    wld_insertnpc(vlk_585_aleph /*8527*/, "OM_122");
    wld_insertnpc(vlk_586_grimes /*8530*/, "OM_122");
    wld_insertnpc(vlk_587_garp /*8532*/, "OM_122");
    wld_insertnpc(vlk_588_buddler /*8534*/, "OM_122");
    wld_insertnpc(vlk_589_buddler /*8536*/, "OM_122");
    wld_insertnpc(vlk_590_buddler /*8538*/, "OM_122");
    wld_insertnpc(vlk_591_buddler /*8540*/, "OM_122");
    wld_insertnpc(vlk_592_buddler /*8542*/, "OM_122");
    wld_insertnpc(vlk_593_buddler /*8544*/, "OM_122");
    wld_insertnpc(vlk_558_buddler /*8476*/, "OM_122");
    wld_insertnpc(vlk_559_buddler /*8478*/, "OM_122");
    wld_insertnpc(vlk_562_buddler /*8484*/, "OM_122");
    wld_insertnpc(vlk_563_buddler /*8486*/, "OM_122");
    wld_insertnpc(vlk_566_buddler /*8492*/, "OM_122");
    wld_insertnpc(vlk_567_buddler /*8494*/, "OM_122");
    wld_insertnpc(vlk_571_buddler /*8496*/, "OM_122");
    wld_insertnpc(tpl_1400_gornabar /*8193*/, "OM_122");
    wld_insertnpc(tpl_1401_gornakosh /*8196*/, "OM_122");
    wld_insertnpc(tpl_1433_gornavid /*8264*/, "OM_122");
    wld_insertnpc(tpl_1436_templer /*8273*/, "OM_122");
    wld_insertnpc(tpl_1437_templer /*8275*/, "OM_122");
    wld_insertnpc(tpl_1438_templer /*8277*/, "OM_122");
    wld_insertnpc(orc_2001_sklave /*7789*/, "OM_122");
    wld_insertnpc(orc_2002_sklave /*7792*/, "OM_122");
    wld_insertnpc(minecrawler /*6773*/, "OM_033");
    wld_insertnpc(minecrawler /*6773*/, "OM_035");
    wld_insertnpc(minecrawler /*6773*/, "OM_038");
    wld_insertnpc(minecrawler /*6773*/, "OM_039");
    wld_insertnpc(minecrawler /*6773*/, "OM_047");
    wld_insertnpc(minecrawler /*6773*/, "OM_024");
    wld_insertnpc(minecrawler /*6773*/, "OM_027");
    wld_insertnpc(minecrawler /*6773*/, "OM_030");
    wld_insertnpc(minecrawler /*6773*/, "OM_031");
    wld_insertnpc(minecrawler /*6773*/, "OM_133");
    wld_insertnpc(minecrawler /*6773*/, "OM_CAVE1_89");
    wld_insertnpc(minecrawler /*6773*/, "OM_CAVE1_90");
    wld_insertnpc(minecrawler /*6773*/, "OM_CAVE1_94");
    wld_insertnpc(minecrawler /*6773*/, "OM_CAVE1_95");
    wld_insertnpc(minecrawler /*6773*/, "OM_062");
    wld_insertnpc(minecrawler /*6773*/, "OM_062");
    wld_insertnpc(minecrawler /*6773*/, "OM_063");
    wld_insertnpc(minecrawler /*6773*/, "OM_073");
    wld_insertnpc(minecrawler /*6773*/, "OM_073");
    wld_insertnpc(minecrawler /*6773*/, "OM_065");
    wld_insertnpc(minecrawler /*6773*/, "OM_076");
    wld_insertnpc(minecrawler /*6773*/, "OM_079");
    wld_insertnpc(minecrawler /*6773*/, "OM_080");
    wld_insertnpc(minecrawler /*6773*/, "OM_084_QUEEN");
    wld_insertnpc(minecrawler /*6773*/, "OM_084_QUEEN");
    wld_insertnpc(minecrawler /*6773*/, "OM_188");
    wld_insertnpc(minecrawler /*6773*/, "OM_189");
    wld_insertnpc(minecrawler /*6773*/, "OM_190");
    wld_insertnpc(minecrawler /*6773*/, "OM_084_QUEEN_04");
    wld_insertnpc(minecrawler /*6773*/, "OM_084_QUEEN_04");
    wld_insertnpc(minecrawler /*6773*/, "OM_084_QUEEN_04");
    wld_insertnpc(minecrawlerqueen /*6776*/, "OM_084_QUEEN_05");
    enteredoldmine = true;
};

func void init_oldmine() {
    wld_setmobroutine(0, 0, "FIREPLACE", 1);
    b_initmonsterattitudes();
    b_initguildattitudes();
};

func void startup_freemine() {
    enteredfreemine = true;
    wld_insertnpc(stt_336_schatten /*8187*/, "FM_03");
    wld_insertnpc(stt_337_schatten /*8189*/, "FM_03");
    wld_insertnpc(stt_338_schatten /*8191*/, "FM_03");
    wld_insertnpc(pc_fighterfm /*7964*/, "FM_02");
    wld_insertnpc(grd_246_gardist /*7339*/, "FM_03");
    wld_insertnpc(grd_284_gardist /*7415*/, "FM_03");
    wld_insertnpc(grd_286_gardist /*7420*/, "FM_03");
    wld_insertnpc(grd_287_gardist /*7422*/, "FM_03");
    wld_insertnpc(grd_288_gardist /*7424*/, "FM_03");
    wld_insertnpc(grd_289_gardist /*7426*/, "FM_03");
    wld_insertnpc(grd_290_gardist /*7428*/, "FM_03");
    wld_insertnpc(grd_291_gardist /*7430*/, "FM_03");
    wld_insertnpc(grd_292_gardist /*7432*/, "FM_03");
    wld_insertnpc(grd_293_gardist /*7434*/, "FM_03");
    wld_insertnpc(grd_294_gardist /*7436*/, "FM_03");
    wld_insertnpc(grd_295_gardist /*7438*/, "FM_03");
    wld_insertnpc(grd_296_gardist /*7440*/, "FM_03");
    wld_insertnpc(grd_297_gardist /*7442*/, "FM_03");
    wld_insertnpc(grd_298_gardist /*7444*/, "FM_03");
    wld_insertnpc(grd_299_gardist /*7446*/, "FM_03");
    wld_insertnpc(vlk_5001_buddler /*8350*/, "FM_03");
    wld_insertnpc(vlk_5002_buddler /*8352*/, "FM_105");
    wld_insertnpc(vlk_5003_buddler /*8354*/, "FM_103");
    wld_insertnpc(vlk_5004_buddler /*8356*/, "FM_102");
    wld_insertnpc(vlk_5005_buddler /*8358*/, "FM_159");
    wld_insertnpc(vlk_5006_buddler /*8360*/, "FM_89");
    wld_insertnpc(vlk_5007_buddler /*8362*/, "FM_88");
    wld_insertnpc(minecrawlerwarrior /*6779*/, "FP_ROAM_CRAWLER_01");
    wld_insertnpc(minecrawlerwarrior /*6779*/, "FP_ROAM_CRAWLER_04");
    wld_insertnpc(minecrawlerwarrior /*6779*/, "FP_ROAM_CRAWLER_05");
    wld_insertnpc(minecrawlerwarrior /*6779*/, "FP_ROAM_CRAWLER_06");
    wld_insertnpc(minecrawlerwarrior /*6779*/, "FP_ROAM_CRAWLER_09");
    wld_insertnpc(minecrawlerwarrior /*6779*/, "FP_ROAM_CRAWLER_14");
    wld_insertnpc(minecrawlerwarrior /*6779*/, "FP_ROAM_CRAWLER_17");
    wld_insertnpc(minecrawlerwarrior /*6779*/, "FP_ROAM_CRAWLER_29");
    wld_insertnpc(minecrawlerwarrior /*6779*/, "FP_ROAM_CRAWLER_28");
    wld_insertnpc(minecrawlerwarrior /*6779*/, "FP_ROAM_CRAWLER_32");
    wld_insertnpc(minecrawlerwarrior /*6779*/, "FP_ROAM_CRAWLER_34");
    wld_insertnpc(freemineorc /*7774*/, "FM_03");
};

func void init_freemine() {
    var c_npc tarrok;

    wld_setmobroutine(0, 0, "FIREPLACE", 1);
    b_initmonsterattitudes();
    b_initguildattitudes();
    if (knows_getulumulu) {
        tarrok = hlp_getnpc(freemineorc);
        tarrok.name = name_curedorc;
    };
};

func void b_hurt() {
};

func void zs_testgotowp() {
    npc_percenable(self, perc_catchthief, zs_catchthief);
    npc_percenable(self, perc_movemob, b_movemob);
    npc_percenable(self, perc_assesswarn, b_assesswarn);
    printdebugs("ZS_TestGoto");
    ai_gotowp(self, self.wp);
};

func void zs_testgotowp_loop() {
    var c_npc player;

    npc_settarget(self, hero);
    printglobals(pd_zs_frame);
    npc_gettarget(self);
    ai_gotonpc(self, other);
    ai_wait(self, 3.0);
    return;
};

func void zs_testgotowp_end() {
};

func void zs_testhangaround() {
    npc_percenable(self, perc_assessenterroom, b_assessenterroom);
    ai_gotowp(self, self.wp);
};

func void zs_testhangaround_loop() {
    ai_playani(self, "T_PERCEPTION");
};

func void zs_testhangaround_end() {
};

func void zs_testperception() {
    npc_percenable(self, perc_assesstalk, testprint);
};

func void zs_testperception_loop() {
    if (hlp_isvalidnpc(other)) {
        printdebugs("other valid im TestHang");
    };
    if (npc_getstatetime(self) > 20) {
        return;
    };
};

func void zs_testperception_end() {
};

func void testprint() {
    print("Perception AN !!!");
    npc_percdisable(self, perc_assesstalk);
};

func void zs_testperception1() {
    npc_percdisable(self, perc_assesstalk);
};

func void zs_testperception1_loop() {
    if (npc_getdisttonpc(self, other) < 500) {
        ai_continueroutine(self);
    };
};

func void zs_testperception1_end() {
};

prototype npc_testdefault(c_npc) {
    name = "Prototype";
    guild = gil_none;
    level = 1;
    attribute[atr_strength] /*4*/ = 5;
    attribute[atr_dexterity] /*5*/ = 5;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 5;
    attribute[atr_hitpoints] /*0*/ = 5;
    protection[prot_edge] /*2*/ = 5;
    protection[prot_blunt] /*1*/ = 5;
    protection[prot_point] /*6*/ = 5;
    protection[prot_fire] /*3*/ = 5;
    protection[prot_magic] /*5*/ = 5;
    senses = sense_hear | sense_see;
    senses_range = 4000;
};

instance atestmodell(npc_testdefault) {
    name = "ATestmodell";
    guild = gil_bau;
    level = 10;
    voice = 11;
    id = b_assignambientinfos_mine_grd_7.slf /*3001*/;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 7;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 18;
    attribute[atr_hitpoints] /*0*/ = 18;
    mdl_setvisual(atestmodell, "HUMANS.MDS");
    mdl_setvisualbody(atestmodell, "hum_body_Naked0", default, default, "Hum_Head_Bald", default, default, -1);
    fight_tactic = fai_human_coward;
    npc_setattitude(atestmodell, att_hostile);
    start_aistate = zs_firespit;
};

func void rtn_start_3001() {
};

instance btestmodell(npc_testdefault) {
    name = "BTestmodell";
    guild = gil_ebr;
    level = 20;
    voice = 11;
    id = info_mine_org_13_exit /*3002*/;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 30;
    attribute[atr_hitpoints] /*0*/ = 30;
    mdl_setvisual(btestmodell, "HUMANS.MDS");
    mdl_setvisualbody(btestmodell, "hum_body_Naked0", default, default, "Hum_Head_Bald", default, default, ebr_armor_h /*4129*/);
    fight_tactic = fai_human_coward;
    daily_routine = rtn_start_3002;
};

func void rtn_start_3002() {
};

instance ctestmodell(npc_testdefault) {
    name = "CTestmodell";
    guild = gil_ebr;
    level = 6;
    voice = 11;
    id = 3003;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 30;
    attribute[atr_hitpoints] /*0*/ = 30;
    mdl_setvisual(ctestmodell, "HUMANS.MDS");
    mdl_setvisualbody(ctestmodell, "hum_body_Naked0", default, default, "Hum_Head_Bald", default, default, ebr_armor_h /*4129*/);
    fight_tactic = fai_human_coward;
    daily_routine = rtn_start_3003;
};

func void rtn_start_3003() {
};

instance dtestmodell(npc_testdefault) {
    name = "DTestmodell";
    slot = "Guru";
    guild = gil_gur;
    level = 6;
    voice = 11;
    id = 3004;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 0;
    attribute[atr_mana_max] /*3*/ = 10;
    attribute[atr_mana] /*2*/ = 10;
    attribute[atr_hitpoints_max] /*1*/ = 30;
    attribute[atr_hitpoints] /*0*/ = 30;
    mdl_setvisual(dtestmodell, "HUMANS.MDS");
    mdl_setvisualbody(dtestmodell, "hum_body_Naked0", default, default, "Hum_Head_Bald", default, default, gur_armor_h /*4145*/);
    fight_tactic = fai_human_coward;
    daily_routine = rtn_start_3004;
};

func void rtn_start_3004() {
    ta_smoke(0, 0, 1, 0, "WP_CAVE_12");
    ta_pickore(1, 0, 2, 0, "WP_ORE");
    ta_sitaround(2, 0, 3, 0, "WP_CHAIR");
    ta_cookforme(3, 0, 4, 0, "WP_PAN");
    ta_ebr_hangaround(4, 0, 5, 0, "WP_THRONE");
    ta_cook(5, 0, 6, 0, "WP_CAULDRON");
    ta_herbalchemy(6, 0, 7, 0, "WP_HERB");
    ta_smith_sharp(7, 0, 8, 0, "WP_BSSHARP");
    ta_sleep(8, 0, 9, 0, "WP_BEDLOW");
    ta_smith_fire(9, 0, 10, 0, "WP_BSFIRE");
    ta_smith_anvil(10, 0, 11, 0, "WP_BSANVIL");
    ta_smith_cool(11, 0, 12, 0, "WP_BSCOOL");
    ta_roastscavenger(12, 0, 13, 0, "WP_CHICKEN");
    ta_readbook(13, 0, 14, 0, "WP_BOOK");
    ta_sleep(14, 0, 15, 0, "WP_BED");
    ta_potionalchemy(15, 0, 16, 0, "WP_LAB");
    ta_pray(16, 0, 17, 0, "WP_IDOL");
    ta_herbalchemy(17, 0, 18, 0, "WP_HERB");
    ta_repairhut(18, 0, 19, 0, "WP_REPAIR");
    ta_standaround(19, 0, 0, 0, "WP_BSANVIL");
};

instance ftestmodell(npc_testdefault) {
    name = "FTestmodell";
    slot = "Gardist";
    guild = gil_grd;
    level = 5;
    voice = 11;
    id = 3006;
    attribute[atr_strength] /*4*/ = 13;
    attribute[atr_dexterity] /*5*/ = 0;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 15;
    attribute[atr_hitpoints] /*0*/ = 15;
    mdl_setvisual(ftestmodell, "HUMANS.MDS");
    mdl_setvisualbody(ftestmodell, "hum_body_Naked0", default, default, "Hum_Head_Bald", default, default, grd_armor_m /*4126*/);
    fight_tactic = 1;
    daily_routine = rtn_start_3006;
};

func void rtn_start_3006() {
    ta_guard(0, 0, 23, 59, "WP_STEALWITNESS_2");
};

instance gtestmodell(npc_testdefault) {
    name = "GTestmodell";
    guild = gil_kdf;
    level = 6;
    voice = 11;
    id = 3007;
    attribute[atr_strength] /*4*/ = 7;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 15;
    attribute[atr_mana] /*2*/ = 15;
    attribute[atr_hitpoints_max] /*1*/ = 20;
    attribute[atr_hitpoints] /*0*/ = 20;
    mdl_setvisual(gtestmodell, "HUMANS.MDS");
    mdl_setvisualbody(gtestmodell, "hum_body_Naked0", default, default, "Hum_Head_Bald", default, default, kdf_armor_l /*4146*/);
    fight_tactic = 1;
    daily_routine = rtn_start_3007;
};

func void rtn_start_3007() {
    ta_sitaround(0, 0, 23, 59, "WP_STEALWITNESS_1");
};

instance htestmodell(npc_testdefault) {
    name = "HTestmodell";
    guild = gil_kdf;
    level = 6;
    voice = 11;
    id = info_mine_org_13_wichtigepersonen /*3008*/;
    attribute[atr_strength] /*4*/ = 5;
    attribute[atr_dexterity] /*5*/ = 6;
    attribute[atr_mana_max] /*3*/ = 15;
    attribute[atr_mana] /*2*/ = 15;
    attribute[atr_hitpoints_max] /*1*/ = 20;
    attribute[atr_hitpoints] /*0*/ = 20;
    mdl_setvisual(htestmodell, "HUMANS.MDS");
    mdl_setvisualbody(htestmodell, "hum_body_Naked0", default, default, "Hum_Head_Bald", default, default, kdf_armor_l /*4146*/);
    fight_tactic = 1;
    daily_routine = rtn_start_3008;
};

func void rtn_start_3008() {
    ta_sitaround(0, 0, 23, 59, "WP_STEAL_1");
};

instance itestmodell(npc_testdefault) {
    name = "ITestmodell";
    guild = gil_ebr;
    level = 3;
    flags = npc_flag_immortal;
    voice = 11;
    id = 3009;
    attribute[atr_strength] /*4*/ = 7;
    attribute[atr_dexterity] /*5*/ = 11;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 13;
    attribute[atr_hitpoints] /*0*/ = 13;
    mdl_setvisual(itestmodell, "BABE.MDS");
    mdl_setvisualbody(itestmodell, "Bab_body_Naked0", default, default, "Bab_Head_Hair1", default, default, -1);
    daily_routine = rtn_start_3009;
};

func void rtn_start_3009() {
    ta_sleep(23, 0, 4, 0, "WP_CHAIRSNBEDS");
    ta_sitaround(4, 0, 6, 0, "WP_REPAIR");
    ta_standaround(6, 0, 8, 0, "WP_IDOL");
    ta_washself(8, 0, 9, 0, "WP_REPAIR");
    ta_babe_sweep(9, 0, 20, 0, "WP_LAB");
    ta_sitaround(20, 0, 23, 0, "WP_IDOL");
};

instance jtestmodell(npc_testdefault) {
    name = "JTestmodell";
    guild = gil_ebr;
    level = 2;
    voice = 11;
    id = 3010;
    attribute[atr_strength] /*4*/ = 6;
    attribute[atr_dexterity] /*5*/ = 7;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 10;
    attribute[atr_hitpoints] /*0*/ = 10;
    mdl_setvisual(jtestmodell, "Babe.MDS");
    mdl_setvisualbody(jtestmodell, "Bab_body_Naked0", default, default, "Bab_Head_Hair2", default, default, -1);
    daily_routine = rtn_start_3010;
};

func void rtn_start_3010() {
    ta_babe_sweep(0, 0, 23, 59, "WP_HALLYWAY_2");
};

instance sld1_testmodell(npc_testdefault) {
    name = "SLD1_Testmodell";
    guild = gil_vlk;
    level = 4;
    voice = 4;
    id = 1707;
    attribute[atr_strength] /*4*/ = 9;
    attribute[atr_dexterity] /*5*/ = 7;
    attribute[atr_hitpoints_max] /*1*/ = 18;
    attribute[atr_hitpoints] /*0*/ = 18;
    mdl_setvisual(sld1_testmodell, "HUMANS.MDS");
    mdl_applyoverlaymds(sld1_testmodell, "Humans_Relaxed.mds");
    mdl_setvisualbody(sld1_testmodell, "hum_body_Naked0", 0, 1, "Hum_Head_Fighter", 51, default, vlk_armor_l /*4121*/);
    mdl_setmodelfatness(sld1_testmodell, 0.0);
    fight_tactic = fai_human_coward;
    wld_assignroomtonpc("T2", sld1_testmodell);
    wld_assignroomtoguild("T4", gil_sld);
    start_aistate = zs_testhangaround;
};

func void rtn_start_sld1_testmodell() {
    ta_testhangaround(0, 0, 13, 0, "x");
    ta_testhangaround(13, 0, 0, 0, "x");
};

instance sld2_testmodell(npc_testdefault) {
    name = "SLD2_Testmodell";
    guild = gil_sld;
    level = 3;
    voice = 4;
    id = 2707;
    attribute[atr_strength] /*4*/ = 9;
    attribute[atr_dexterity] /*5*/ = 7;
    attribute[atr_hitpoints_max] /*1*/ = 18;
    attribute[atr_hitpoints] /*0*/ = 18;
    attribute[atr_mana_max] /*3*/ = 10;
    attribute[atr_mana] /*2*/ = 10;
    mdl_setvisual(sld2_testmodell, "HUMANS.MDS");
    mdl_applyoverlaymds(sld2_testmodell, "Humans_Relaxed.mds");
    mdl_setvisualbody(sld2_testmodell, "hum_body_Naked0", 0, 1, "Hum_Head_Fighter", 51, default, sld_armor_h /*4137*/);
    mdl_setmodelfatness(sld2_testmodell, 0.0);
    fight_tactic = fai_human_strong;
    npc_setpermattitude(sld2_testmodell, att_friendly);
    start_aistate = zs_testhangaround;
};

func void rtn_start_sld2_testmodell() {
    ta_testhangaround(0, 0, 13, 0, "X");
    ta_testhangaround(13, 0, 0, 0, "X");
};

instance sld3_testmodell(npc_testdefault) {
    name = "SLD3_Testmodell";
    guild = gil_sld;
    level = 3;
    voice = 4;
    id = 3707;
    attribute[atr_strength] /*4*/ = 9;
    attribute[atr_dexterity] /*5*/ = 7;
    attribute[atr_hitpoints_max] /*1*/ = 18;
    attribute[atr_hitpoints] /*0*/ = 10;
    mdl_setvisual(sld3_testmodell, "HUMANS.MDS");
    mdl_applyoverlaymds(sld3_testmodell, "Humans_Relaxed.mds");
    mdl_setvisualbody(sld3_testmodell, "hum_body_Naked0", 0, 1, "Hum_Head_Fighter", 51, default, sld_armor_h /*4137*/);
    mdl_setmodelfatness(sld3_testmodell, 0.0);
    fight_tactic = fai_human_coward;
    daily_routine = rtn_start_sld3_testmodell;
};

func void rtn_start_sld3_testmodell() {
    ta_testhangaround(0, 0, 13, 0, "X");
    ta_testhangaround(13, 0, 0, 0, "X");
};

instance grd1_testmodell(npc_testdefault) {
    name = "GRD1_Testmodell";
    guild = gil_grd;
    level = 3;
    voice = 11;
    id = 1221;
    attribute[atr_strength] /*4*/ = 9;
    attribute[atr_dexterity] /*5*/ = 7;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 18;
    attribute[atr_hitpoints] /*0*/ = 18;
    mdl_setvisual(grd1_testmodell, "HUMANS.MDS");
    mdl_applyoverlaymds(grd1_testmodell, "HumanS_Relaxed.MDS");
    mdl_setvisualbody(grd1_testmodell, "hum_body_Naked0", 0, 0, "Hum_Head_Fighter", 1, 2, grd_armor_l /*4125*/);
    mdl_setmodelfatness(grd1_testmodell, 0.0);
    fight_tactic = fai_human_strong;
    npc_setattitude(grd1_testmodell, att_friendly);
    daily_routine = rtn_start_grd1_testmodell;
};

instance testinfo_001_07_700(c_info) {
    npc = grd1_testmodell /*13216*/;
    nr = 1;
    condition = testinfo_001_07_700_condition;
    information = testinfo_001_07_700_info;
};

func int testinfo_001_07_700_condition() {
    return 1;
};

func void testinfo_001_07_700_info() {
    ai_output(self, other, "Global_001_07_00"); //**UNKNOWN**
    ai_output(self, other, "Global_001_07_01"); //**UNKNOWN**
    ai_output(self, other, "Global_001_07_02"); //**UNKNOWN**
    ai_output(self, other, "Global_001_07_03"); //**UNKNOWN**
    ai_output(self, other, "Global_001_07_05"); //**UNKNOWN**
};

func void rtn_start_grd1_testmodell() {
    ta_testhangaround(0, 0, 13, 0, "X");
    ta_testhangaround(13, 0, 0, 0, "X");
};

instance grd1_testmodell_trade_01(c_itemreact) {
    npc = grd1_testmodell /*13216*/;
    trade_item = itforice /*4316*/;
    trade_amount = 1;
    requested_item = itmihammer /*4499*/;
    requested_amount = 1;
    reaction = grd1_testmodell_trade_01_func;
};

func int grd1_testmodell_trade_01_func() {
    if (grd1_testmodell_trade_01.requested_amount == 1) {
        print("Trade klappt");
        return 1;
    };
    return 0;
};

instance grd1_testmodell_trade_01_info_01(c_info) {
    npc = grd1_testmodell /*13216*/;
    nr = 1;
    condition = grd1_testmodell_trade_01_info_01_condition;
    information = grd1_testmodell_trade_01_info_01_info;
    important = true;
};

func int grd1_testmodell_trade_01_info_01_condition() {
    return 1;
};

func void grd1_testmodell_trade_01_info_01_info() {
    b_say(self, other, "BAU_900_Ricelord01_Trade_01_Info_01_Satz_01");
    print("Gardisten Info");
    b_say(self, other, "BAU_900_Ricelord01_Trade_01_Info_01_Satz_02");
    b_say(self, other, "BAU_900_Ricelord01_Trade_01_Info_01_Satz_03");
};

instance grd2_testmodell(npc_testdefault) {
    name = "GRD2_Testmodell";
    guild = gil_vlk;
    level = 3;
    voice = 11;
    id = 2221;
    attribute[atr_strength] /*4*/ = 9;
    attribute[atr_dexterity] /*5*/ = 7;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 18;
    attribute[atr_hitpoints] /*0*/ = 18;
    mdl_setvisual(grd2_testmodell, "HUMANS.MDS");
    mdl_applyoverlaymds(grd2_testmodell, "HumanS_Relaxed.MDS");
    mdl_setvisualbody(grd2_testmodell, "hum_body_Naked0", 0, 0, "Hum_Head_Fighter", 1, 2, vlk_armor_l /*4121*/);
    mdl_setmodelfatness(grd2_testmodell, 0.0);
    fight_tactic = fai_human_strong;
    npc_setattitude(grd2_testmodell, att_angry);
    daily_routine = rtn_start_grd2_testmodell;
};

func void rtn_start_grd2_testmodell() {
    ta_testhangaround(0, 0, 13, 0, "X");
    ta_testhangaround(13, 0, 0, 0, "X");
};

instance grd3_testmodell(npc_testdefault) {
    name = "GRD3_Testmodell";
    guild = gil_ebr;
    level = 3;
    voice = 11;
    id = info_org_13_dielage /*3221*/;
    attribute[atr_strength] /*4*/ = 9;
    attribute[atr_dexterity] /*5*/ = 7;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 18;
    attribute[atr_hitpoints] /*0*/ = 18;
    mdl_setvisual(grd3_testmodell, "HUMANS.MDS");
    mdl_applyoverlaymds(grd3_testmodell, "HumanS_Relaxed.MDS");
    mdl_setvisualbody(grd3_testmodell, "hum_body_Naked0", 0, 0, "Hum_Head_Fighter", 1, 2, ebr_armor_h /*4129*/);
    mdl_setmodelfatness(grd3_testmodell, 0.0);
    fight_tactic = fai_human_strong;
    daily_routine = rtn_start_grd3_testmodell;
};

func void rtn_start_grd3_testmodell() {
    ta_testhangaround(0, 0, 13, 0, "X");
    ta_testhangaround(13, 0, 0, 0, "X");
};

instance babe(npc_default) {
    name = "babe";
    guild = gil_none;
    level = 1;
    flags = 0;
    flags = npc_flag_immortal;
    voice = 19;
    id = 110;
    attribute[atr_strength] /*4*/ = 6;
    attribute[atr_dexterity] /*5*/ = 8;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 10;
    attribute[atr_hitpoints] /*0*/ = 10;
    mdl_setvisual(babe, "Babe.MDS");
    mdl_setvisualbody(babe, "Bab_body_Naked0", 0, 0, "Bab_Head_Hair1", 0, default, -1);
    fight_tactic = fai_human_coward;
};

instance babe2(npc_default) {
    name = "babe2";
    guild = gil_none;
    level = 1;
    flags = 0;
    flags = npc_flag_immortal;
    voice = 19;
    id = 110;
    attribute[atr_strength] /*4*/ = 6;
    attribute[atr_dexterity] /*5*/ = 8;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 10;
    attribute[atr_hitpoints] /*0*/ = 10;
    mdl_setvisual(babe2, "Babe.MDS");
    mdl_setvisualbody(babe2, "Bab_body_Naked0", 0, 1, "Bab_Head_Hair1", 0, default, -1);
    fight_tactic = fai_human_coward;
    createinvitem(babe2, bab_armor_nude);
    createinvitem(babe2, bab_armor_bikini);
    start_aistate = zs_babe_sweep;
};

instance babe3(npc_default) {
    name = "babe3";
    guild = gil_none;
    level = 1;
    flags = 0;
    flags = npc_flag_immortal;
    voice = 19;
    id = 110;
    attribute[atr_strength] /*4*/ = 6;
    attribute[atr_dexterity] /*5*/ = 8;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 10;
    attribute[atr_hitpoints] /*0*/ = 10;
    mdl_setvisual(babe3, "Babe.MDS");
    mdl_setvisualbody(babe3, "Bab_body_Naked0", 1, 1, "Bab_Head_Hair1", 1, default, -1);
    fight_tactic = fai_human_coward;
    start_aistate = zs_babe_sitaround;
};

instance babe4(npc_default) {
    name = "babe4";
    guild = gil_none;
    level = 1;
    flags = 0;
    flags = npc_flag_immortal;
    voice = 19;
    id = 110;
    attribute[atr_strength] /*4*/ = 6;
    attribute[atr_dexterity] /*5*/ = 8;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 10;
    attribute[atr_hitpoints] /*0*/ = 10;
    mdl_setvisual(babe4, "Babe.MDS");
    mdl_setvisualbody(babe4, "Bab_body_Naked0", 2, 1, "Bab_Head_Hair1", 2, default, -1);
    fight_tactic = fai_human_coward;
    start_aistate = zs_babe_dance;
};

instance babe5(npc_default) {
    name = "babe5";
    guild = gil_none;
    level = 1;
    flags = 0;
    flags = npc_flag_immortal;
    voice = 19;
    id = 110;
    attribute[atr_strength] /*4*/ = 6;
    attribute[atr_dexterity] /*5*/ = 8;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 10;
    attribute[atr_hitpoints] /*0*/ = 10;
    mdl_setvisual(babe5, "Babe.MDS");
    mdl_setvisualbody(babe5, "Bab_body_Naked0", 2, 1, "Bab_Head_Hair1", 3, default, -1);
    fight_tactic = fai_human_coward;
};

instance babe6(npc_default) {
    name = "babe6";
    guild = gil_none;
    level = 1;
    flags = 0;
    flags = npc_flag_immortal;
    voice = 19;
    id = 110;
    attribute[atr_strength] /*4*/ = 6;
    attribute[atr_dexterity] /*5*/ = 8;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 10;
    attribute[atr_hitpoints] /*0*/ = 10;
    mdl_setvisual(babe6, "Babe.MDS");
    mdl_setvisualbody(babe6, "Bab_body_Naked0", 0, 2, "Bab_Head_Hair1", 0, default, -1);
    fight_tactic = fai_human_coward;
};

instance babe7(npc_default) {
    name = "babe7";
    guild = gil_none;
    level = 1;
    flags = 0;
    flags = npc_flag_immortal;
    voice = 19;
    id = 110;
    attribute[atr_strength] /*4*/ = 6;
    attribute[atr_dexterity] /*5*/ = 8;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 10;
    attribute[atr_hitpoints] /*0*/ = 10;
    mdl_setvisual(babe7, "Babe.MDS");
    mdl_setvisualbody(babe7, "Bab_body_Naked0", 0, 3, "Bab_Head_Hair1", 0, default, -1);
    fight_tactic = fai_human_coward;
};

func void b_testreaction() {
    printdebugs("B_TestReaction");
    ai_whirlaround(self, other);
};

instance ch(npc_default) {
    name = "CharacterHelper";
    npctype = npctype_main;
    guild = gil_none;
    level = 10;
    voice = 15;
    id = 0;
    mdl_setvisual(ch, "HUMANS.MDS");
    mdl_setvisualbody(ch, "hum_body_Naked0", 4, 1, "Hum_Head_Pony", 9, 0, -1);
    start_aistate = zs_ch_hangaround;
};

func void zs_ch_hangaround() {
    printdebugnpc(pd_zs_frame, "ZS_CH_Hangaround");
    npc_percenable(self, perc_assessplayer, b_assesssc);
    npc_percenable(self, perc_assesstalk, b_assesstalk);
};

func void zs_ch_hangaround_loop() {
    printdebugnpc(pd_zs_loop, "ZS_CH_Hangaround_Loop");
};

func void zs_ch_hangaround_end() {
    printdebugnpc(pd_zs_frame, "ZS_CH_Hangaround_End");
};

func void b_setheroexp() {
    var string attributes;
    const string _print_levelup = "Level Up: Lernpunkte:";
    const string _print_hp = "Hitpoints:";

    hero.exp = (250 * (hero.level + 1)) * hero.level;
    hero.exp_next = (250 * (hero.level + 2)) * (hero.level + 1);
    hero.lp = hero.level * lp_per_level;
    attributes = _print_levelup;
    attributes = concatstrings(attributes, inttostring(hero.lp));
    attributes = concatstrings(attributes, _print_hp);
    attributes = concatstrings(attributes, inttostring(hero.attribute[atr_hitpoints_max] /*1*/));
    printscreen(attributes, -1, -1, font_old_20, 3);
    snd_play("LEVELUP");
};

func void b_setheroequipment() {
    printdebugnpc(pd_zs_check, "B_SetHeroEquipment");
    createinvitems(hero, itamarrow, 100);
    createinvitems(hero, itambolt, 100);
    createinvitems(hero, itlstorch, 30);
    createinvitems(hero, itminugget, 1000);
    createinvitems(hero, itfo_potion_health_03, 10);
    createinvitems(hero, itfo_potion_mana_03, 10);
    createinvitems(hero, itkelockpick, 30);
    createinvitems(hero, itwrworldmap, 1);
};

func void b_setheroattributes(var int selection, var int increase, var int lp_cost) {
    var string attributes;
    const string _print_learningpoints = "Lernpunkte:";
    const string _print_strength = "Str:";
    const string _print_dexterity = "Dex:";
    const string _print_mana = "Mana:";

    if (hero.lp >= lp_cost) {
        hero.lp = hero.lp - lp_cost;
        npc_changeattribute(hero, selection, increase);
        attributes = _print_learningpoints;
        attributes = concatstrings(attributes, inttostring(hero.lp));
        attributes = concatstrings(attributes, _print_strength);
        attributes = concatstrings(attributes, inttostring(hero.attribute[atr_strength] /*4*/));
        attributes = concatstrings(attributes, _print_dexterity);
        attributes = concatstrings(attributes, inttostring(hero.attribute[atr_dexterity] /*5*/));
        attributes = concatstrings(attributes, _print_mana);
        attributes = concatstrings(attributes, inttostring(hero.attribute[atr_mana_max] /*3*/));
        printscreen(attributes, -1, -1, font_old_20, 3);
    }
    else {
        printscreen(print_notenoughskillpoints, -1, -1, font_old_20, 2);
        b_say(self, other, "$NOLEARNNOPOINTS");
    };
};

func void b_setheroweapon() {
    const string _print_setgeroweapon_1 = "n*tig STR 11  DEX 16";
    const string _print_setgeroweapon_2 = "n*tig STR 17  DEX 22";
    const string _print_setgeroweapon_3 = "n*tig: STR 26  DEX 28";
    const string _print_setgeroweapon_4 = "n*tig STR 52  DEX 34";
    const string _print_setgeroweapon_5 = "n*tig STR 62  DEX 40";
    const string _print_setgeroweapon_6 = "n*tig STR 78  DEX 50";

    if (hero.level <= 5) {
        createinvitem(hero, itmw_1h_mace_02);
        createinvitem(hero, itrw_bow_small_04);
        printscreen(_print_setgeroweapon_1, -1, -1, font_old_20, 10);
    }
    else if (hero.level <= 10) {
        createinvitem(hero, itmw_1h_sword_long_01);
        createinvitem(hero, itrw_bow_long_02);
        printscreen(_print_setgeroweapon_2, -1, -1, font_old_20, 10);
    }
    else if (hero.level <= 15) {
        createinvitem(hero, itmw_1h_sword_broad_01);
        createinvitem(hero, itrw_bow_long_05);
        printscreen(_print_setgeroweapon_3, -1, -1, font_old_20, 10);
    }
    else if (hero.level <= 20) {
        createinvitem(hero, itmw_2h_sword_light_01);
        createinvitem(hero, itmw_1h_sword_broad_04);
        createinvitem(hero, itrw_bow_long_08);
        printscreen(_print_setgeroweapon_4, -1, -1, font_old_20, 10);
    }
    else if (hero.level <= 25) {
        createinvitem(hero, itmw_2h_sword_03);
        createinvitem(hero, itmw_1h_sword_broad_04);
        createinvitem(hero, itrw_bow_war_02);
        printscreen(_print_setgeroweapon_5, -1, -1, font_old_20, 10);
    }
    else {
        if (hero.level <= 30) {
            createinvitem(hero, itmw_2h_axe_heavy_04);
            createinvitem(hero, itmw_1h_sword_broad_04);
            createinvitem(hero, itrw_bow_war_05);
            printscreen(_print_setgeroweapon_6, -1, -1, font_old_20, 10);
        };
    };
    ai_equipbestmeleeweapon(hero);
    ai_equipbestrangedweapon(hero);
    b_setheroequipment();
};

instance ch_exit(c_info) {
    npc = ch /*13238*/;
    nr = 999;
    condition = ch_exit_condition;
    information = ch_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int ch_exit_condition() {
    return 1;
};

func void ch_exit_info() {
    ai_stopprocessinfos(self);
};

func void ch_level_back() {
    info_clearchoices(ch_level /*13267*/);
};

instance ch_level(c_info) {
    npc = ch /*13238*/;
    nr = 0;
    condition = ch_level_condition;
    information = ch_level_info;
    permanent = true;
    description = "Gib mir Level!";
};

func int ch_level_condition() {
    if (hero.level == 0) {
        return true;
    };
};

func void ch_level_info() {
    info_clearchoices(ch_level /*13267*/);
    info_addchoice(ch_level /*13267*/, "BACK", ch_level_back);
    info_addchoice(ch_level /*13267*/, "Level  1 -  5", ch_level1);
    info_addchoice(ch_level /*13267*/, "Level  6 - 10", ch_level6);
    info_addchoice(ch_level /*13267*/, "Level 11 - 15", ch_level11);
    info_addchoice(ch_level /*13267*/, "Level 16 - 20", ch_level16);
    info_addchoice(ch_level /*13267*/, "Level 21 - 25", ch_level21);
    info_addchoice(ch_level /*13267*/, "Level 26 - 30", ch_level26);
};

func void ch_level26() {
    info_clearchoices(ch_level /*13267*/);
    info_addchoice(ch_level /*13267*/, "BACK", ch_level_back);
    info_addchoice(ch_level /*13267*/, "Level 26", ch_level_26);
    info_addchoice(ch_level /*13267*/, "Level 27", ch_level_27);
    info_addchoice(ch_level /*13267*/, "Level 28", ch_level_28);
    info_addchoice(ch_level /*13267*/, "Level 29", ch_level_29);
    info_addchoice(ch_level /*13267*/, "Level 30", ch_level_30);
};

func void ch_level21() {
    info_clearchoices(ch_level /*13267*/);
    info_addchoice(ch_level /*13267*/, "BACK", ch_level_back);
    info_addchoice(ch_level /*13267*/, "Level 21", ch_level_21);
    info_addchoice(ch_level /*13267*/, "Level 22", ch_level_22);
    info_addchoice(ch_level /*13267*/, "Level 23", ch_level_23);
    info_addchoice(ch_level /*13267*/, "Level 24", ch_level_24);
    info_addchoice(ch_level /*13267*/, "Level 25", ch_level_25);
};

func void ch_level16() {
    info_clearchoices(ch_level /*13267*/);
    info_addchoice(ch_level /*13267*/, "BACK", ch_level_back);
    info_addchoice(ch_level /*13267*/, "Level 16", ch_level_16);
    info_addchoice(ch_level /*13267*/, "Level 17", ch_level_17);
    info_addchoice(ch_level /*13267*/, "Level 18", ch_level_18);
    info_addchoice(ch_level /*13267*/, "Level 19", ch_level_19);
    info_addchoice(ch_level /*13267*/, "Level 20", ch_level_20);
};

func void ch_level11() {
    info_clearchoices(ch_level /*13267*/);
    info_addchoice(ch_level /*13267*/, "BACK", ch_level_back);
    info_addchoice(ch_level /*13267*/, "Level 11", ch_level_11);
    info_addchoice(ch_level /*13267*/, "Level 12", ch_level_12);
    info_addchoice(ch_level /*13267*/, "Level 13", ch_level_13);
    info_addchoice(ch_level /*13267*/, "Level 14", ch_level_14);
    info_addchoice(ch_level /*13267*/, "Level 15", ch_level_15);
};

func void ch_level6() {
    info_clearchoices(ch_level /*13267*/);
    info_addchoice(ch_level /*13267*/, "BACK", ch_level_back);
    info_addchoice(ch_level /*13267*/, "Level  6", ch_level_6);
    info_addchoice(ch_level /*13267*/, "Level  7", ch_level_7);
    info_addchoice(ch_level /*13267*/, "Level  8", ch_level_8);
    info_addchoice(ch_level /*13267*/, "Level  9", ch_level_9);
    info_addchoice(ch_level /*13267*/, "Level 10", ch_level_10);
};

func void ch_level1() {
    info_clearchoices(ch_level /*13267*/);
    info_addchoice(ch_level /*13267*/, "BACK", ch_level_back);
    info_addchoice(ch_level /*13267*/, "Level 1", ch_level_1);
    info_addchoice(ch_level /*13267*/, "Level 2", ch_level_2);
    info_addchoice(ch_level /*13267*/, "Level 3", ch_level_3);
    info_addchoice(ch_level /*13267*/, "Level 4", ch_level_4);
    info_addchoice(ch_level /*13267*/, "Level 5", ch_level_5);
};

func void ch_level_1() {
    info_clearchoices(ch_level /*13267*/);
    hero.level = 1;
    hero.attribute[atr_hitpoints_max] /*1*/ = 52;
    hero.attribute[atr_hitpoints] /*0*/ = hero.attribute[atr_hitpoints_max] /*1*/;
    b_setheroexp();
    b_setheroweapon();
};

func void ch_level_2() {
    info_clearchoices(ch_level /*13267*/);
    hero.level = 2;
    hero.attribute[atr_hitpoints_max] /*1*/ = 64;
    hero.attribute[atr_hitpoints] /*0*/ = hero.attribute[atr_hitpoints_max] /*1*/;
    b_setheroexp();
    b_setheroweapon();
};

func void ch_level_3() {
    info_clearchoices(ch_level /*13267*/);
    hero.level = 3;
    hero.attribute[atr_hitpoints_max] /*1*/ = 76;
    hero.attribute[atr_hitpoints] /*0*/ = hero.attribute[atr_hitpoints_max] /*1*/;
    b_setheroexp();
    b_setheroweapon();
};

func void ch_level_4() {
    info_clearchoices(ch_level /*13267*/);
    hero.level = 4;
    hero.attribute[atr_hitpoints_max] /*1*/ = 88;
    hero.attribute[atr_hitpoints] /*0*/ = hero.attribute[atr_hitpoints_max] /*1*/;
    b_setheroexp();
    b_setheroweapon();
};

func void ch_level_5() {
    info_clearchoices(ch_level /*13267*/);
    hero.level = 5;
    hero.attribute[atr_hitpoints_max] /*1*/ = 100;
    hero.attribute[atr_hitpoints] /*0*/ = hero.attribute[atr_hitpoints_max] /*1*/;
    b_setheroexp();
    b_setheroweapon();
};

func void ch_level_6() {
    info_clearchoices(ch_level /*13267*/);
    hero.level = 6;
    hero.attribute[atr_hitpoints_max] /*1*/ = 112;
    hero.attribute[atr_hitpoints] /*0*/ = hero.attribute[atr_hitpoints_max] /*1*/;
    b_setheroexp();
    b_setheroweapon();
};

func void ch_level_7() {
    info_clearchoices(ch_level /*13267*/);
    hero.level = 7;
    hero.attribute[atr_hitpoints_max] /*1*/ = 124;
    hero.attribute[atr_hitpoints] /*0*/ = hero.attribute[atr_hitpoints_max] /*1*/;
    b_setheroexp();
    b_setheroweapon();
};

func void ch_level_8() {
    info_clearchoices(ch_level /*13267*/);
    hero.level = 8;
    hero.attribute[atr_hitpoints_max] /*1*/ = 136;
    hero.attribute[atr_hitpoints] /*0*/ = hero.attribute[atr_hitpoints_max] /*1*/;
    b_setheroexp();
    b_setheroweapon();
};

func void ch_level_9() {
    info_clearchoices(ch_level /*13267*/);
    hero.level = 9;
    hero.attribute[atr_hitpoints_max] /*1*/ = 148;
    hero.attribute[atr_hitpoints] /*0*/ = hero.attribute[atr_hitpoints_max] /*1*/;
    b_setheroexp();
    b_setheroweapon();
};

func void ch_level_10() {
    info_clearchoices(ch_level /*13267*/);
    hero.level = 10;
    hero.attribute[atr_hitpoints_max] /*1*/ = 160;
    hero.attribute[atr_hitpoints] /*0*/ = hero.attribute[atr_hitpoints_max] /*1*/;
    b_setheroexp();
    b_setheroweapon();
};

func void ch_level_11() {
    info_clearchoices(ch_level /*13267*/);
    hero.level = 11;
    hero.attribute[atr_hitpoints_max] /*1*/ = 172;
    hero.attribute[atr_hitpoints] /*0*/ = hero.attribute[atr_hitpoints_max] /*1*/;
    b_setheroexp();
    b_setheroweapon();
};

func void ch_level_12() {
    info_clearchoices(ch_level /*13267*/);
    hero.level = 12;
    hero.attribute[atr_hitpoints_max] /*1*/ = 184;
    hero.attribute[atr_hitpoints] /*0*/ = hero.attribute[atr_hitpoints_max] /*1*/;
    b_setheroexp();
    b_setheroweapon();
};

func void ch_level_13() {
    info_clearchoices(ch_level /*13267*/);
    hero.level = 13;
    hero.attribute[atr_hitpoints_max] /*1*/ = 196;
    hero.attribute[atr_hitpoints] /*0*/ = hero.attribute[atr_hitpoints_max] /*1*/;
    b_setheroexp();
    b_setheroweapon();
};

func void ch_level_14() {
    info_clearchoices(ch_level /*13267*/);
    hero.level = 14;
    hero.attribute[atr_hitpoints_max] /*1*/ = 208;
    hero.attribute[atr_hitpoints] /*0*/ = hero.attribute[atr_hitpoints_max] /*1*/;
    b_setheroexp();
    b_setheroweapon();
};

func void ch_level_15() {
    info_clearchoices(ch_level /*13267*/);
    hero.level = 15;
    hero.attribute[atr_hitpoints_max] /*1*/ = 220;
    hero.attribute[atr_hitpoints] /*0*/ = hero.attribute[atr_hitpoints_max] /*1*/;
    b_setheroexp();
    b_setheroweapon();
};

func void ch_level_16() {
    info_clearchoices(ch_level /*13267*/);
    hero.level = 16;
    hero.attribute[atr_hitpoints_max] /*1*/ = 232;
    hero.attribute[atr_hitpoints] /*0*/ = hero.attribute[atr_hitpoints_max] /*1*/;
    b_setheroexp();
    b_setheroweapon();
};

func void ch_level_17() {
    info_clearchoices(ch_level /*13267*/);
    hero.level = 17;
    hero.attribute[atr_hitpoints_max] /*1*/ = 244;
    hero.attribute[atr_hitpoints] /*0*/ = hero.attribute[atr_hitpoints_max] /*1*/;
    b_setheroexp();
    b_setheroweapon();
};

func void ch_level_18() {
    info_clearchoices(ch_level /*13267*/);
    hero.level = 18;
    hero.attribute[atr_hitpoints_max] /*1*/ = 256;
    hero.attribute[atr_hitpoints] /*0*/ = hero.attribute[atr_hitpoints_max] /*1*/;
    b_setheroexp();
    b_setheroweapon();
};

func void ch_level_19() {
    info_clearchoices(ch_level /*13267*/);
    hero.level = 19;
    hero.attribute[atr_hitpoints_max] /*1*/ = 268;
    hero.attribute[atr_hitpoints] /*0*/ = hero.attribute[atr_hitpoints_max] /*1*/;
    b_setheroexp();
    b_setheroweapon();
};

func void ch_level_20() {
    info_clearchoices(ch_level /*13267*/);
    hero.level = 20;
    hero.attribute[atr_hitpoints_max] /*1*/ = 280;
    hero.attribute[atr_hitpoints] /*0*/ = hero.attribute[atr_hitpoints_max] /*1*/;
    b_setheroexp();
    b_setheroweapon();
};

func void ch_level_21() {
    info_clearchoices(ch_level /*13267*/);
    hero.level = 21;
    hero.attribute[atr_hitpoints_max] /*1*/ = 292;
    hero.attribute[atr_hitpoints] /*0*/ = hero.attribute[atr_hitpoints_max] /*1*/;
    b_setheroexp();
    b_setheroweapon();
};

func void ch_level_22() {
    info_clearchoices(ch_level /*13267*/);
    hero.level = 22;
    hero.attribute[atr_hitpoints_max] /*1*/ = 304;
    hero.attribute[atr_hitpoints] /*0*/ = hero.attribute[atr_hitpoints_max] /*1*/;
    b_setheroexp();
    b_setheroweapon();
};

func void ch_level_23() {
    info_clearchoices(ch_level /*13267*/);
    hero.level = 23;
    hero.attribute[atr_hitpoints_max] /*1*/ = 316;
    hero.attribute[atr_hitpoints] /*0*/ = hero.attribute[atr_hitpoints_max] /*1*/;
    b_setheroexp();
    b_setheroweapon();
};

func void ch_level_24() {
    info_clearchoices(ch_level /*13267*/);
    hero.level = 24;
    hero.attribute[atr_hitpoints_max] /*1*/ = 328;
    hero.attribute[atr_hitpoints] /*0*/ = hero.attribute[atr_hitpoints_max] /*1*/;
    b_setheroexp();
    b_setheroweapon();
};

func void ch_level_25() {
    info_clearchoices(ch_level /*13267*/);
    hero.level = 25;
    hero.attribute[atr_hitpoints_max] /*1*/ = 340;
    hero.attribute[atr_hitpoints] /*0*/ = hero.attribute[atr_hitpoints_max] /*1*/;
    b_setheroexp();
    b_setheroweapon();
};

func void ch_level_26() {
    info_clearchoices(ch_level /*13267*/);
    hero.level = 26;
    hero.attribute[atr_hitpoints_max] /*1*/ = 352;
    hero.attribute[atr_hitpoints] /*0*/ = hero.attribute[atr_hitpoints_max] /*1*/;
    b_setheroexp();
    b_setheroweapon();
};

func void ch_level_27() {
    info_clearchoices(ch_level /*13267*/);
    hero.level = 27;
    hero.attribute[atr_hitpoints_max] /*1*/ = 364;
    hero.attribute[atr_hitpoints] /*0*/ = hero.attribute[atr_hitpoints_max] /*1*/;
    b_setheroexp();
    b_setheroweapon();
};

func void ch_level_28() {
    info_clearchoices(ch_level /*13267*/);
    hero.level = 28;
    hero.attribute[atr_hitpoints_max] /*1*/ = 376;
    hero.attribute[atr_hitpoints] /*0*/ = hero.attribute[atr_hitpoints_max] /*1*/;
    b_setheroexp();
    b_setheroweapon();
};

func void ch_level_29() {
    info_clearchoices(ch_level /*13267*/);
    hero.level = 29;
    hero.attribute[atr_hitpoints_max] /*1*/ = 388;
    hero.attribute[atr_hitpoints] /*0*/ = hero.attribute[atr_hitpoints_max] /*1*/;
    b_setheroexp();
    b_setheroweapon();
};

func void ch_level_30() {
    info_clearchoices(ch_level /*13267*/);
    hero.level = 30;
    hero.attribute[atr_hitpoints_max] /*1*/ = 400;
    hero.attribute[atr_hitpoints] /*0*/ = hero.attribute[atr_hitpoints_max] /*1*/;
    b_setheroexp();
    b_setheroweapon();
};

func void ch_guild_back() {
    info_clearchoices(ch_guild /*13307*/);
};

instance ch_guild(c_info) {
    npc = ch /*13238*/;
    nr = 0;
    condition = ch_guild_condition;
    information = ch_guild_info;
    permanent = true;
    description = "Gib mir Gilde!";
};

func int ch_guild_condition() {
    if ((hero.level > 5) && (npc_gettrueguild(hero) == gil_none)) {
        return true;
    };
};

func void ch_guild_info() {
    info_clearchoices(ch_guild /*13307*/);
    info_addchoice(ch_guild /*13307*/, "BACK", ch_guild_back);
    if ((hero.level >= 6) && (hero.level <= 10)) {
        info_addchoice(ch_guild /*13307*/, "Schatten", ch_shadow);
    };
    if ((hero.level >= 10) && (hero.level <= 15)) {
        info_addchoice(ch_guild /*13307*/, "Gardist", ch_guard);
    };
    if ((hero.level >= 10) && (hero.level <= 15)) {
        info_addchoice(ch_guild /*13307*/, "Feuermagier", ch_firemage);
    };
    if ((hero.level >= 6) && (hero.level <= 10)) {
        info_addchoice(ch_guild /*13307*/, "Bandit", ch_bandit);
    };
    if (hero.level >= 10) {
        info_addchoice(ch_guild /*13307*/, "Söldner", ch_mercenary);
    };
    if (hero.level >= 16) {
        info_addchoice(ch_guild /*13307*/, "Wassermagier", ch_watermage);
    };
    if ((hero.level >= 6) && (hero.level <= 10)) {
        info_addchoice(ch_guild /*13307*/, "Novize", ch_novice);
    };
    if (hero.level >= 10) {
        info_addchoice(ch_guild /*13307*/, "Templer", ch_templar);
    };
};

func void ch_templar() {
    info_clearchoices(ch_guild /*13307*/);
    hero.guild = gil_tpl;
    npc_settrueguild(hero, gil_tpl);
    if (hero.level <= 15) {
        createinvitem(hero, tpl_armor_m);
        ai_equiparmor(hero, tpl_armor_m /*4142*/);
    }
    else {
        createinvitem(hero, tpl_armor_h);
        ai_equiparmor(hero, tpl_armor_h /*4143*/);
    };
};

func void ch_novice() {
    info_clearchoices(ch_guild /*13307*/);
    hero.guild = gil_nov;
    npc_settrueguild(hero, gil_nov);
    if (hero.level <= 5) {
        createinvitem(hero, nov_armor_l);
        ai_equiparmor(hero, nov_armor_l /*4138*/);
    }
    else {
        createinvitem(hero, nov_armor_h);
        ai_equiparmor(hero, nov_armor_h /*4140*/);
    };
};

func void ch_watermage() {
    info_clearchoices(ch_guild /*13307*/);
    hero.guild = gil_kdw;
    npc_settrueguild(hero, gil_kdw);
    if (hero.level <= 20) {
        createinvitem(hero, kdw_armor_l);
        ai_equiparmor(hero, kdw_armor_l /*4148*/);
    }
    else {
        createinvitem(hero, kdw_armor_h);
        ai_equiparmor(hero, kdw_armor_h /*4149*/);
    };
};

func void ch_mercenary() {
    info_clearchoices(ch_guild /*13307*/);
    hero.guild = gil_sld;
    npc_settrueguild(hero, gil_sld);
    if (hero.level <= 15) {
        createinvitem(hero, sld_armor_m);
        ai_equiparmor(hero, sld_armor_m /*4136*/);
    }
    else {
        createinvitem(hero, sld_armor_h);
        ai_equiparmor(hero, sld_armor_h /*4137*/);
    };
};

func void ch_bandit() {
    info_clearchoices(ch_guild /*13307*/);
    hero.guild = gil_org;
    npc_settrueguild(hero, gil_org);
    createinvitem(hero, org_armor_h);
    ai_equiparmor(hero, org_armor_h /*4134*/);
};

func void ch_firemage() {
    info_clearchoices(ch_guild /*13307*/);
    hero.guild = gil_kdf;
    npc_settrueguild(hero, gil_kdf);
    createinvitem(hero, kdf_armor_h);
    ai_equiparmor(hero, kdf_armor_h /*4147*/);
};

func void ch_guard() {
    info_clearchoices(ch_guild /*13307*/);
    hero.guild = gil_grd;
    npc_settrueguild(hero, gil_grd);
    if (hero.level <= 15) {
        createinvitem(hero, grd_armor_m);
        ai_equiparmor(hero, grd_armor_m /*4126*/);
    }
    else {
        createinvitem(hero, org_armor_h);
        ai_equiparmor(hero, org_armor_h /*4134*/);
    };
};

func void ch_shadow() {
    info_clearchoices(ch_guild /*13307*/);
    hero.guild = gil_stt;
    npc_settrueguild(hero, gil_stt);
    createinvitem(hero, stt_armor_h);
    ai_equiparmor(hero, stt_armor_h /*4124*/);
};

instance ch_training_str(c_info) {
    npc = ch /*13238*/;
    nr = 0;
    condition = ch_training_str_condition;
    information = ch_training_str_info;
    permanent = true;
    description = "ATTRIBUTE: Stärke";
};

func int ch_training_str_condition() {
    if (hero.lp > 0) {
        return true;
    };
};

func void ch_training_str_info() {
    info_clearchoices(ch_training_str /*13318*/);
    info_addchoice(ch_training_str /*13318*/, dialog_back, ch_training_str_back);
    info_addchoice(ch_training_str /*13318*/, "Stärke (alle restlichen Lernpunkte)", ch_strength_all);
    info_addchoice(ch_training_str /*13318*/, "Stärke (für beste Nahkampfwaffe)", ch_strength_weapon);
    if (hero.lp >= (20 * lpcost_attribute_strength)) {
        info_addchoice(ch_training_str /*13318*/, b_buildlearnstring(name_learnstrength_20, 20 * lpcost_attribute_strength, 0), ch_strength20);
    };
    if (hero.lp >= (10 * lpcost_attribute_strength)) {
        info_addchoice(ch_training_str /*13318*/, b_buildlearnstring(name_learnstrength_10, 10 * lpcost_attribute_strength, 0), ch_strength10);
    };
    if (hero.lp >= (5 * lpcost_attribute_strength)) {
        info_addchoice(ch_training_str /*13318*/, b_buildlearnstring(name_learnstrength_5, 5 * lpcost_attribute_strength, 0), ch_strength5);
    };
    if (hero.lp >= lpcost_attribute_strength) {
        info_addchoice(ch_training_str /*13318*/, b_buildlearnstring(name_learnstrength_1, lpcost_attribute_strength, 0), ch_strength1);
    };
};

func void ch_strength1() {
    b_setheroattributes(atr_strength, 1, lpcost_attribute_strength);
    info_clearchoices(ch_training_str /*13318*/);
};

func void ch_strength5() {
    b_setheroattributes(atr_strength, 5, 5 * lpcost_attribute_strength);
    info_clearchoices(ch_training_str /*13318*/);
};

func void ch_strength10() {
    b_setheroattributes(atr_strength, 10, 10 * lpcost_attribute_strength);
    info_clearchoices(ch_training_str /*13318*/);
};

func void ch_strength20() {
    b_setheroattributes(atr_strength, 20, 20 * lpcost_attribute_strength);
    info_clearchoices(ch_training_str /*13318*/);
};

func void ch_strength_weapon() {
    var int value;
    var int increase;
    const string _print_ch_str = "n*tige STR bereits vorhanden";

    info_clearchoices(ch_training_str /*13318*/);
    if (hero.level <= 5) {
        value = 11;
    }
    else if (hero.level <= 9) {
        value = 17;
    }
    else if (hero.level <= 15) {
        value = 26;
    }
    else if (hero.level <= 20) {
        value = 52;
    }
    else if (hero.level <= 25) {
        value = 62;
    }
    else {
        if (hero.level <= 30) {
            value = 78;
        };
    };
    if (hero.attribute[atr_strength] /*4*/ < value) {
        increase = value - hero.attribute[atr_strength] /*4*/;
        b_setheroattributes(atr_strength, increase, increase * lpcost_attribute_strength);
        ai_equipbestmeleeweapon(hero);
    }
    else {
        printscreen(_print_ch_str, -1, -1, font_old_20, 10);
    };
};

func void ch_strength_all() {
    b_setheroattributes(atr_strength, hero.lp, hero.lp * lpcost_attribute_strength);
    info_clearchoices(ch_training_str /*13318*/);
};

func void ch_training_str_back() {
    info_clearchoices(ch_training_str /*13318*/);
};

instance ch_training_dex(c_info) {
    npc = ch /*13238*/;
    nr = 0;
    condition = ch_training_dex_condition;
    information = ch_training_dex_info;
    permanent = true;
    description = "ATTRIBUTE: Geschick";
};

func int ch_training_dex_condition() {
    if (hero.lp > 0) {
        return true;
    };
};

func void ch_training_dex_info() {
    info_clearchoices(ch_training_dex /*13331*/);
    info_addchoice(ch_training_dex /*13331*/, dialog_back, ch_training_dex_back);
    info_addchoice(ch_training_dex /*13331*/, "Geschick (alle restlichen Lernpunkte)", ch_dexterity_all);
    info_addchoice(ch_training_dex /*13331*/, "Geschick (für beste Fernkampfwaffe)", ch_dexterity_weapon);
    if (hero.lp >= 20) {
        info_addchoice(ch_training_dex /*13331*/, b_buildlearnstring(name_learndexterity_20, 20 * lpcost_attribute_dexterity, 0), ch_dexterity20);
    };
    if (hero.lp >= 10) {
        info_addchoice(ch_training_dex /*13331*/, b_buildlearnstring(name_learndexterity_10, 10 * lpcost_attribute_dexterity, 0), ch_dexterity10);
    };
    if (hero.lp >= 5) {
        info_addchoice(ch_training_dex /*13331*/, b_buildlearnstring(name_learndexterity_5, 5 * lpcost_attribute_dexterity, 0), ch_dexterity5);
    };
    if (hero.lp >= 1) {
        info_addchoice(ch_training_dex /*13331*/, b_buildlearnstring(name_learndexterity_1, lpcost_attribute_dexterity, 0), ch_dexterity1);
    };
};

func void ch_dexterity1() {
    b_setheroattributes(atr_dexterity, 1, lpcost_attribute_dexterity);
    info_clearchoices(ch_training_dex /*13331*/);
};

func void ch_dexterity5() {
    b_setheroattributes(atr_dexterity, 5, 5 * lpcost_attribute_dexterity);
    info_clearchoices(ch_training_dex /*13331*/);
};

func void ch_dexterity10() {
    b_setheroattributes(atr_dexterity, 10, 10 * lpcost_attribute_dexterity);
    info_clearchoices(ch_training_dex /*13331*/);
};

func void ch_dexterity20() {
    b_setheroattributes(atr_dexterity, 20, 20 * lpcost_attribute_dexterity);
    info_clearchoices(ch_training_dex /*13331*/);
};

func void ch_dexterity_weapon() {
    var int value;
    var int increase;
    const string _print_ch_dex = "n*tige DEX bereits vorhanden";

    info_clearchoices(ch_training_dex /*13331*/);
    if (hero.level <= 5) {
        value = 16;
    }
    else if (hero.level <= 9) {
        value = 22;
    }
    else if (hero.level <= 15) {
        value = 28;
    }
    else if (hero.level <= 20) {
        value = 34;
    }
    else if (hero.level <= 25) {
        value = 40;
    }
    else {
        if (hero.level <= 30) {
            value = 50;
        };
    };
    if (hero.attribute[atr_dexterity] /*5*/ < value) {
        increase = value - hero.attribute[atr_dexterity] /*5*/;
        b_setheroattributes(atr_dexterity, increase, increase * lpcost_attribute_dexterity);
        ai_equipbestrangedweapon(hero);
    }
    else {
        printscreen(_print_ch_dex, -1, -1, font_old_20, 10);
    };
};

func void ch_dexterity_all() {
    b_setheroattributes(atr_dexterity, hero.lp, hero.lp * lpcost_attribute_dexterity);
    info_clearchoices(ch_training_dex /*13331*/);
};

func void ch_training_dex_back() {
    info_clearchoices(ch_training_dex /*13331*/);
};

instance ch_training_mana(c_info) {
    npc = ch /*13238*/;
    nr = 0;
    condition = ch_training_mana_condition;
    information = ch_training_mana_info;
    permanent = true;
    description = "ATTRIBUTE: Mana";
};

func int ch_training_mana_condition() {
    if (hero.lp > 0) {
        return true;
    };
};

func void ch_training_mana_info() {
    info_clearchoices(ch_training_mana /*13344*/);
    info_addchoice(ch_training_mana /*13344*/, "BACK", ch_training_mana_back);
    info_addchoice(ch_training_mana /*13344*/, "Mana (restliche Lernpunkte)", ch_mana_all);
    if (hero.lp >= 20) {
        info_addchoice(ch_training_mana /*13344*/, b_buildlearnstring(name_learnmana_20, 20 * lpcost_attribute_mana, 0), ch_mana20);
    };
    if (hero.lp >= 10) {
        info_addchoice(ch_training_mana /*13344*/, b_buildlearnstring(name_learnmana_10, 10 * lpcost_attribute_mana, 0), ch_mana10);
    };
    if (hero.lp >= 5) {
        info_addchoice(ch_training_mana /*13344*/, b_buildlearnstring(name_learnmana_5, 5 * lpcost_attribute_mana, 0), ch_mana5);
    };
    if (hero.lp >= 1) {
        info_addchoice(ch_training_mana /*13344*/, b_buildlearnstring(name_learnmana_1, lpcost_attribute_mana, 0), ch_mana1);
    };
};

func void ch_mana1() {
    b_setheroattributes(atr_mana_max, 1, lpcost_attribute_mana);
    b_setheroattributes(atr_mana, 1, 0);
    info_clearchoices(ch_training_mana /*13344*/);
};

func void ch_mana5() {
    b_setheroattributes(atr_mana_max, 5, 5 * lpcost_attribute_mana);
    b_setheroattributes(atr_mana, 5, 0);
    info_clearchoices(ch_training_mana /*13344*/);
};

func void ch_mana10() {
    b_setheroattributes(atr_mana_max, 10, 10 * lpcost_attribute_mana);
    b_setheroattributes(atr_mana, 10, 0);
    info_clearchoices(ch_training_mana /*13344*/);
};

func void ch_mana20() {
    b_setheroattributes(atr_mana_max, 20, 20 * lpcost_attribute_mana);
    b_setheroattributes(atr_mana, 20, 0);
    info_clearchoices(ch_training_mana /*13344*/);
};

func void ch_mana_all() {
    var int lp;

    lp = hero.lp;
    b_setheroattributes(atr_mana_max, hero.lp, hero.lp * lpcost_attribute_mana);
    b_setheroattributes(atr_mana, lp, 0);
    info_clearchoices(ch_training_mana /*13344*/);
};

func void ch_training_mana_back() {
    info_clearchoices(ch_training_mana /*13344*/);
};

instance ch_training_combat(c_info) {
    npc = ch /*13238*/;
    nr = 0;
    condition = ch_training_combat_condition;
    information = ch_training_combat_info;
    permanent = true;
    description = "TALENTE: Kampf";
};

func int ch_training_combat_condition() {
    if (hero.lp > 0) {
        return true;
    };
};

func void ch_training_combat_info() {
    info_clearchoices(ch_training_combat /*13354*/);
    info_addchoice(ch_training_combat /*13354*/, "BACK", ch_training_combat_back);
    if ((hero.lp >= lpcost_talent_crossbow_2) && (npc_gettalentskill(hero, npc_talent_crossbow) == 1)) {
        info_addchoice(ch_training_combat /*13354*/, b_buildlearnstring(name_learncrossbow_2, lpcost_talent_crossbow_2, 0), ch_crossbowl2);
    };
    if (((hero.lp >= lpcost_talent_crossbow_1) && (npc_gettalentskill(hero, npc_talent_bow) == 2)) && (npc_gettalentskill(hero, npc_talent_crossbow) == 0)) {
        info_addchoice(ch_training_combat /*13354*/, b_buildlearnstring(name_learncrossbow_1, lpcost_talent_crossbow_1, 0), ch_crossbowl1);
    };
    if ((hero.lp >= lpcost_talent_bow_2) && (npc_gettalentskill(hero, npc_talent_bow) == 1)) {
        info_addchoice(ch_training_combat /*13354*/, b_buildlearnstring(name_learnbow_2, lpcost_talent_bow_2, 0), ch_bowl2);
    };
    if ((hero.lp >= lpcost_talent_bow_1) && (npc_gettalentskill(hero, npc_talent_bow) == 0)) {
        info_addchoice(ch_training_combat /*13354*/, b_buildlearnstring(name_learnbow_1, lpcost_talent_bow_1, 0), ch_bowl1);
    };
    if ((hero.lp >= lpcost_talent_2h_2) && (npc_gettalentskill(hero, npc_talent_2h) == 1)) {
        info_addchoice(ch_training_combat /*13354*/, b_buildlearnstring(name_learn2h_2, lpcost_talent_2h_2, 0), ch_2hl2);
    };
    if (((hero.lp >= lpcost_talent_2h_1) && (npc_gettalentskill(hero, npc_talent_1h) == 2)) && (npc_gettalentskill(hero, npc_talent_2h) == 0)) {
        info_addchoice(ch_training_combat /*13354*/, b_buildlearnstring(name_learn2h_1, lpcost_talent_2h_1, 0), ch_2hl1);
    };
    if ((hero.lp >= lpcost_talent_1h_2) && (npc_gettalentskill(hero, npc_talent_1h) == 1)) {
        info_addchoice(ch_training_combat /*13354*/, b_buildlearnstring(name_learn1h_2, lpcost_talent_1h_2, 0), ch_1hl2);
    };
    if ((hero.lp >= lpcost_talent_1h_1) && (npc_gettalentskill(hero, npc_talent_1h) == 0)) {
        info_addchoice(ch_training_combat /*13354*/, b_buildlearnstring(name_learn1h_1, lpcost_talent_1h_1, 0), ch_1hl1);
    };
};

func void ch_1hl1() {
    info_clearchoices(ch_training_combat /*13354*/);
    b_giveskill(hero, npc_talent_1h, 1, lpcost_talent_1h_1);
};

func void ch_1hl2() {
    info_clearchoices(ch_training_combat /*13354*/);
    b_giveskill(hero, npc_talent_1h, 2, lpcost_talent_1h_2);
};

func void ch_2hl1() {
    info_clearchoices(ch_training_combat /*13354*/);
    b_giveskill(hero, npc_talent_2h, 1, lpcost_talent_2h_1);
};

func void ch_2hl2() {
    info_clearchoices(ch_training_combat /*13354*/);
    b_giveskill(hero, npc_talent_2h, 2, lpcost_talent_2h_2);
};

func void ch_bowl1() {
    info_clearchoices(ch_training_combat /*13354*/);
    b_giveskill(hero, npc_talent_bow, 1, lpcost_talent_bow_1);
};

func void ch_bowl2() {
    info_clearchoices(ch_training_combat /*13354*/);
    b_giveskill(hero, npc_talent_bow, 2, lpcost_talent_bow_2);
};

func void ch_crossbowl1() {
    info_clearchoices(ch_training_combat /*13354*/);
    b_giveskill(hero, npc_talent_crossbow, 1, lpcost_talent_crossbow_1);
};

func void ch_crossbowl2() {
    info_clearchoices(ch_training_combat /*13354*/);
    b_giveskill(hero, npc_talent_crossbow, 2, lpcost_talent_crossbow_2);
};

func void ch_training_combat_back() {
    info_clearchoices(ch_training_combat /*13354*/);
};

instance ch_training_magic(c_info) {
    npc = ch /*13238*/;
    nr = 0;
    condition = ch_training_magic_condition;
    information = ch_training_magic_info;
    permanent = true;
    description = "TALENTE: Magie";
};

func int ch_training_magic_condition() {
    if (hero.lp > 0) {
        return true;
    };
};

func void ch_training_magic_info() {
    info_clearchoices(ch_training_magic /*13366*/);
    info_addchoice(ch_training_magic /*13366*/, "BACK", ch_training_magic_back);
    if (((hero.level >= 24) && (hero.lp >= lpcost_talent_mage_6)) && (npc_gettalentskill(hero, npc_talent_mage) == 5)) {
        info_addchoice(ch_training_magic /*13366*/, b_buildlearnstring(name_learnmage_6, lpcost_talent_mage_6, 0), ch_magic6);
    };
    if ((hero.lp >= lpcost_talent_mage_5) && (npc_gettalentskill(hero, npc_talent_mage) == 4)) {
        info_addchoice(ch_training_magic /*13366*/, b_buildlearnstring(name_learnmage_5, lpcost_talent_mage_5, 0), ch_magic5);
    };
    if ((hero.lp >= lpcost_talent_mage_4) && (npc_gettalentskill(hero, npc_talent_mage) == 3)) {
        info_addchoice(ch_training_magic /*13366*/, b_buildlearnstring(name_learnmage_4, lpcost_talent_mage_4, 0), ch_magic4);
    };
    if ((hero.lp >= lpcost_talent_mage_3) && (npc_gettalentskill(hero, npc_talent_mage) == 2)) {
        info_addchoice(ch_training_magic /*13366*/, b_buildlearnstring(name_learnmage_3, lpcost_talent_mage_3, 0), ch_magic3);
    };
    if ((hero.lp >= lpcost_talent_mage_2) && (npc_gettalentskill(hero, npc_talent_mage) == 1)) {
        info_addchoice(ch_training_magic /*13366*/, b_buildlearnstring(name_learnmage_2, lpcost_talent_mage_2, 0), ch_magic2);
    };
    if ((hero.lp >= lpcost_talent_mage_1) && (npc_gettalentskill(hero, npc_talent_mage) == 0)) {
        info_addchoice(ch_training_magic /*13366*/, b_buildlearnstring(name_learnmage_1, lpcost_talent_mage_1, 0), ch_magic1);
    };
};

func void ch_magic1() {
    info_clearchoices(ch_training_magic /*13366*/);
    b_giveskill(hero, npc_talent_mage, 1, lpcost_talent_mage_1);
    createinvitem(hero, itarrunelight);
    createinvitem(hero, itarrunefirebolt);
    createinvitem(hero, itarrunethunderbolt);
    createinvitems(hero, itarscrolltrfscavenger, 10);
    createinvitems(hero, itarscrolltrfmolerat, 10);
    createinvitems(hero, itarscrolltrfwaran, 10);
};

func void ch_magic2() {
    info_clearchoices(ch_training_magic /*13366*/);
    b_giveskill(hero, npc_talent_mage, 2, lpcost_talent_mage_2);
    createinvitem(hero, itarruneheal);
    createinvitem(hero, itarrunesleep);
    createinvitem(hero, itarrunewindfist);
    createinvitems(hero, itarscrolltrfwolf, 10);
    createinvitems(hero, itarscrolltrfbloodfly, 10);
    createinvitems(hero, itarscrolltrflurker, 10);
};

func void ch_magic3() {
    info_clearchoices(ch_training_magic /*13366*/);
    b_giveskill(hero, npc_talent_mage, 3, lpcost_talent_mage_3);
    createinvitem(hero, itarrunetelekinesis);
    createinvitem(hero, itarrunepyrokinesis);
    createinvitem(hero, itarruneicecube);
    createinvitem(hero, itarrunecharm);
    createinvitem(hero, itarrunefireball);
    createinvitem(hero, itarrunethunderball);
    createinvitems(hero, itarscrolltrfmeatbug, 10);
    createinvitems(hero, itarscrolltrfcrawler, 10);
    createinvitems(hero, itarscrolltrfsnapper, 10);
    createinvitems(hero, itarscrollsummonskeletons, 10);
};

func void ch_magic4() {
    info_clearchoices(ch_training_magic /*13366*/);
    b_giveskill(hero, npc_talent_mage, 4, lpcost_talent_mage_4);
    createinvitem(hero, itarrunecontrol);
    createinvitem(hero, itarrunechainlightning);
    createinvitem(hero, itarrunestormfist);
    createinvitem(hero, itarrunedestroyundead);
    createinvitem(hero, itarrunefirestorm);
    createinvitems(hero, itarscrolltrforcdog, 10);
    createinvitems(hero, itarscrolltrfshadowbeast, 10);
    createinvitems(hero, itarscrollsummongolem, 10);
    createinvitems(hero, itarscrollfear, 10);
    createinvitems(hero, itarscrollberzerk, 10);
    createinvitems(hero, itarscrollshrink, 10);
};

func void ch_magic5() {
    info_clearchoices(ch_training_magic /*13366*/);
    b_giveskill(hero, npc_talent_mage, 5, lpcost_talent_mage_5);
    createinvitem(hero, itarruneicewave);
    createinvitem(hero, itarrunefirerain);
    createinvitems(hero, itarscrollsummondemon, 10);
};

func void ch_magic6() {
    info_clearchoices(ch_training_magic /*13366*/);
    b_giveskill(hero, npc_talent_mage, 6, lpcost_talent_mage_6);
    createinvitem(hero, itarrunebreathofdeath);
    createinvitems(hero, itarscrollarmyofdarkness, 10);
};

func void ch_training_magic_back() {
    info_clearchoices(ch_training_magic /*13366*/);
};

instance ch_training_thievery(c_info) {
    npc = ch /*13238*/;
    nr = 0;
    condition = ch_training_thievery_condition;
    information = ch_training_thievery_info;
    permanent = true;
    description = "TALENTE: Dieb";
};

func int ch_training_thievery_condition() {
    if (hero.lp > 0) {
        return true;
    };
};

func void ch_training_thievery_info() {
    info_clearchoices(ch_training_thievery /*13376*/);
    info_addchoice(ch_training_thievery /*13376*/, "BACK", ch_training_thievery_back);
    if ((hero.lp >= lpcost_talent_acrobat) && (npc_gettalentskill(hero, npc_talent_acrobat) == 0)) {
        info_addchoice(ch_training_thievery /*13376*/, b_buildlearnstring(name_learnacrobat, lpcost_talent_acrobat, 0), ch_acrobat);
    };
    if ((hero.lp >= lpcost_talent_sneak) && (npc_gettalentskill(hero, npc_talent_sneak) == 0)) {
        info_addchoice(ch_training_thievery /*13376*/, b_buildlearnstring(name_learnsneak, lpcost_talent_sneak, 0), ch_sneak);
    };
    if ((hero.lp >= lpcost_talent_pickpocket_2) && (npc_gettalentskill(hero, npc_talent_pickpocket) == 1)) {
        info_addchoice(ch_training_thievery /*13376*/, b_buildlearnstring(name_learnpickpocket_2, lpcost_talent_pickpocket_2, 0), ch_pickpocket2);
    };
    if ((hero.lp >= lpcost_talent_pickpocket_1) && (npc_gettalentskill(hero, npc_talent_pickpocket) == 0)) {
        info_addchoice(ch_training_thievery /*13376*/, b_buildlearnstring(name_learnpickpocket_1, lpcost_talent_pickpocket_1, 0), ch_pickpocket1);
    };
    if ((hero.lp >= lpcost_talent_picklock_2) && (npc_gettalentskill(hero, npc_talent_picklock) == 1)) {
        info_addchoice(ch_training_thievery /*13376*/, b_buildlearnstring(name_learnpicklock_2, lpcost_talent_picklock_2, 0), ch_picklock2);
    };
    if ((hero.lp >= lpcost_talent_picklock_1) && (npc_gettalentskill(hero, npc_talent_picklock) == 0)) {
        info_addchoice(ch_training_thievery /*13376*/, b_buildlearnstring(name_learnpicklock_1, lpcost_talent_picklock_1, 0), ch_picklock1);
    };
};

func void ch_picklock1() {
    info_clearchoices(ch_training_thievery /*13376*/);
    b_giveskill(hero, npc_talent_picklock, 1, lpcost_talent_picklock_1);
};

func void ch_picklock2() {
    info_clearchoices(ch_training_thievery /*13376*/);
    b_giveskill(hero, npc_talent_picklock, 2, lpcost_talent_picklock_2);
};

func void ch_pickpocket1() {
    info_clearchoices(ch_training_thievery /*13376*/);
    b_giveskill(hero, npc_talent_pickpocket, 1, lpcost_talent_pickpocket_1);
};

func void ch_pickpocket2() {
    info_clearchoices(ch_training_thievery /*13376*/);
    b_giveskill(hero, npc_talent_pickpocket, 2, lpcost_talent_pickpocket_2);
};

func void ch_sneak() {
    info_clearchoices(ch_training_thievery /*13376*/);
    b_giveskill(hero, npc_talent_sneak, 1, lpcost_talent_sneak);
};

func void ch_acrobat() {
    info_clearchoices(ch_training_thievery /*13376*/);
    b_giveskill(hero, npc_talent_acrobat, 1, lpcost_talent_acrobat);
};

func void ch_training_thievery_back() {
    info_clearchoices(ch_training_thievery /*13376*/);
};

func void externalstest() {
};

instance orc_rockefeller(mst_default_orcwarrior) {
    name = "Orc Rockefeller";
    set_orcwarrior_visuals();
    createinvitems(orc_rockefeller, itfo_mutton_01, 20);
    createinvitems(orc_rockefeller, itfoapple, 5);
    createinvitems(orc_rockefeller, itfoloaf, 5);
    createinvitems(orc_rockefeller, itfomutton, 20);
    createinvitems(orc_rockefeller, itfocheese, 5);
    createinvitems(orc_rockefeller, itforice, 5);
    createinvitems(orc_rockefeller, itfosoup, 5);
    createinvitems(orc_rockefeller, itfomeatbugragout, 5);
    createinvitems(orc_rockefeller, itfocrawlersoup, 5);
    createinvitems(orc_rockefeller, itfobooze, 10);
    createinvitems(orc_rockefeller, itfowine, 5);
    createinvitems(orc_rockefeller, itfo_wineberrys_01, 5);
    createinvitems(orc_rockefeller, itfobeer, 5);
    createinvitems(orc_rockefeller, itfo_plants_trollberrys_01, 5);
    createinvitems(orc_rockefeller, itfo_plants_flameberry_01, 5);
    createinvitems(orc_rockefeller, itfo_plants_nightshadow_01, 5);
    createinvitems(orc_rockefeller, itfo_plants_nightshadow_02, 5);
    createinvitems(orc_rockefeller, itfo_plants_orcherb_01, 5);
    createinvitems(orc_rockefeller, itfo_plants_orcherb_02, 5);
    createinvitems(orc_rockefeller, itfo_plants_mushroom_01, 5);
    createinvitems(orc_rockefeller, itfo_plants_mushroom_02, 5);
    createinvitems(orc_rockefeller, itfo_plants_stoneroot_01, 5);
    createinvitems(orc_rockefeller, itfo_plants_stoneroot_02, 5);
    createinvitems(orc_rockefeller, itfo_plants_ravenherb_01, 5);
    createinvitems(orc_rockefeller, itfo_plants_ravenherb_02, 5);
    createinvitems(orc_rockefeller, itfo_plants_mountainmoos_01, 5);
    createinvitems(orc_rockefeller, itfo_plants_mountainmoos_02, 5);
    createinvitems(orc_rockefeller, itfo_plants_berrys_01, 5);
    createinvitems(orc_rockefeller, itfo_plants_bloodwood_01, 5);
    createinvitems(orc_rockefeller, itfo_plants_towerwood_01, 5);
    createinvitems(orc_rockefeller, itfo_plants_seraphis_01, 5);
    createinvitems(orc_rockefeller, itfo_plants_velayis_01, 5);
    createinvitems(orc_rockefeller, itfo_plants_herb_03, 5);
    createinvitems(orc_rockefeller, itfo_plants_herb_02, 5);
    createinvitems(orc_rockefeller, itfo_plants_herb_01, 5);
    createinvitems(orc_rockefeller, itmi_plants_swampherb_01, 5);
    createinvitem(orc_rockefeller, itfo_potion_mana_01);
    createinvitem(orc_rockefeller, itfo_potion_mana_02);
    createinvitem(orc_rockefeller, itfo_potion_mana_03);
    createinvitem(orc_rockefeller, itfo_potion_health_01);
    createinvitem(orc_rockefeller, itfo_potion_health_02);
    createinvitem(orc_rockefeller, itfo_potion_health_03);
    createinvitem(orc_rockefeller, itfo_potion_elixier);
    createinvitem(orc_rockefeller, itfo_potion_elixier_egg);
    createinvitem(orc_rockefeller, itfo_potion_strength_01);
    createinvitem(orc_rockefeller, itfo_potion_strength_02);
    createinvitem(orc_rockefeller, itfo_potion_strength_03);
    createinvitem(orc_rockefeller, itfo_potion_dex_01);
    createinvitem(orc_rockefeller, itfo_potion_dex_02);
    createinvitem(orc_rockefeller, itfo_potion_dex_03);
    createinvitem(orc_rockefeller, itfo_potion_health_perma_01);
    createinvitem(orc_rockefeller, itfo_potion_health_perma_02);
    createinvitem(orc_rockefeller, itfo_potion_health_perma_03);
    createinvitem(orc_rockefeller, itfo_potion_mana_perma_01);
    createinvitem(orc_rockefeller, itfo_potion_mana_perma_02);
    createinvitem(orc_rockefeller, itfo_potion_mana_perma_03);
    createinvitem(orc_rockefeller, itfo_potion_master_01);
    createinvitem(orc_rockefeller, itfo_potion_master_02);
    createinvitem(orc_rockefeller, itfo_potion_water_01);
    createinvitem(orc_rockefeller, itfo_potion_haste_01);
    createinvitems(orc_rockefeller, itlstorch, 5);
    createinvitem(orc_rockefeller, itmialarmhorn);
    equipitem(orc_rockefeller, itrw_crossbow_01 /*4890*/);
    equipitem(orc_rockefeller, itmw2horcaxe03 /*4455*/);
    createinvitem(orc_rockefeller, itmw2horcsword01);
    createinvitem(orc_rockefeller, itmw2horcaxe01);
    createinvitem(orc_rockefeller, itmw2horcaxe02);
    createinvitem(orc_rockefeller, itmw2horcmace01);
    createinvitems(orc_rockefeller, itamarrow, 50);
    createinvitems(orc_rockefeller, itambolt, 50);
    createinvitem(orc_rockefeller, itarrunebreathofdeath);
    createinvitems(orc_rockefeller, itarscrollsummongolem, 20);
    createinvitem(orc_rockefeller, itarrunefireball);
};

instance shaman_rockefeller(mst_default_orcwarrior) {
    name = "Shaman Rockefeller";
    attribute[atr_mana_max] /*3*/ = 50;
    attribute[atr_mana] /*2*/ = 50;
    set_orcshaman_visuals();
    fight_tactic = fai_human_mage;
    createinvitems(shaman_rockefeller, itfo_mutton_01, 20);
    createinvitems(shaman_rockefeller, itfoapple, 5);
    createinvitems(shaman_rockefeller, itfoloaf, 5);
    createinvitems(shaman_rockefeller, itfomutton, 20);
    createinvitems(shaman_rockefeller, itfocheese, 5);
    createinvitems(shaman_rockefeller, itforice, 5);
    createinvitems(shaman_rockefeller, itfosoup, 5);
    createinvitems(shaman_rockefeller, itfomeatbugragout, 5);
    createinvitems(shaman_rockefeller, itfocrawlersoup, 5);
    createinvitems(shaman_rockefeller, itfobooze, 10);
    createinvitems(shaman_rockefeller, itfowine, 5);
    createinvitems(shaman_rockefeller, itfo_wineberrys_01, 5);
    createinvitems(shaman_rockefeller, itfobeer, 5);
    createinvitems(shaman_rockefeller, itfo_plants_trollberrys_01, 5);
    createinvitems(shaman_rockefeller, itfo_plants_flameberry_01, 5);
    createinvitems(shaman_rockefeller, itfo_plants_nightshadow_01, 5);
    createinvitems(shaman_rockefeller, itfo_plants_nightshadow_02, 5);
    createinvitems(shaman_rockefeller, itfo_plants_orcherb_01, 5);
    createinvitems(shaman_rockefeller, itfo_plants_orcherb_02, 5);
    createinvitems(shaman_rockefeller, itfo_plants_mushroom_01, 5);
    createinvitems(shaman_rockefeller, itfo_plants_mushroom_02, 5);
    createinvitems(shaman_rockefeller, itfo_plants_stoneroot_01, 5);
    createinvitems(shaman_rockefeller, itfo_plants_stoneroot_02, 5);
    createinvitems(shaman_rockefeller, itfo_plants_ravenherb_01, 5);
    createinvitems(shaman_rockefeller, itfo_plants_ravenherb_02, 5);
    createinvitems(shaman_rockefeller, itfo_plants_mountainmoos_01, 5);
    createinvitems(shaman_rockefeller, itfo_plants_mountainmoos_02, 5);
    createinvitems(shaman_rockefeller, itfo_plants_berrys_01, 5);
    createinvitems(shaman_rockefeller, itfo_plants_bloodwood_01, 5);
    createinvitems(shaman_rockefeller, itfo_plants_towerwood_01, 5);
    createinvitems(shaman_rockefeller, itfo_plants_seraphis_01, 5);
    createinvitems(shaman_rockefeller, itfo_plants_velayis_01, 5);
    createinvitems(shaman_rockefeller, itfo_plants_herb_03, 5);
    createinvitems(shaman_rockefeller, itfo_plants_herb_02, 5);
    createinvitems(shaman_rockefeller, itfo_plants_herb_01, 5);
    createinvitems(shaman_rockefeller, itmi_plants_swampherb_01, 5);
    createinvitem(shaman_rockefeller, itfo_potion_mana_01);
    createinvitem(shaman_rockefeller, itfo_potion_mana_02);
    createinvitem(shaman_rockefeller, itfo_potion_mana_03);
    createinvitem(shaman_rockefeller, itfo_potion_health_01);
    createinvitem(shaman_rockefeller, itfo_potion_health_02);
    createinvitem(shaman_rockefeller, itfo_potion_health_03);
    createinvitem(shaman_rockefeller, itfo_potion_elixier);
    createinvitem(shaman_rockefeller, itfo_potion_elixier_egg);
    createinvitem(shaman_rockefeller, itfo_potion_strength_01);
    createinvitem(shaman_rockefeller, itfo_potion_strength_02);
    createinvitem(shaman_rockefeller, itfo_potion_strength_03);
    createinvitem(shaman_rockefeller, itfo_potion_dex_01);
    createinvitem(shaman_rockefeller, itfo_potion_dex_02);
    createinvitem(shaman_rockefeller, itfo_potion_dex_03);
    createinvitem(shaman_rockefeller, itfo_potion_health_perma_01);
    createinvitem(shaman_rockefeller, itfo_potion_health_perma_02);
    createinvitem(shaman_rockefeller, itfo_potion_health_perma_03);
    createinvitem(shaman_rockefeller, itfo_potion_mana_perma_01);
    createinvitem(shaman_rockefeller, itfo_potion_mana_perma_02);
    createinvitem(shaman_rockefeller, itfo_potion_mana_perma_03);
    createinvitem(shaman_rockefeller, itfo_potion_master_01);
    createinvitem(shaman_rockefeller, itfo_potion_master_02);
    createinvitem(shaman_rockefeller, itfo_potion_water_01);
    createinvitem(shaman_rockefeller, itfo_potion_haste_01);
    createinvitems(shaman_rockefeller, itlstorch, 5);
    createinvitem(shaman_rockefeller, itmialarmhorn);
    equipitem(shaman_rockefeller, itrworcstaff /*4458*/);
    createinvitem(shaman_rockefeller, itmw2horcsword01);
    createinvitem(shaman_rockefeller, itmw2horcaxe01);
    createinvitem(shaman_rockefeller, itmw2horcaxe02);
    createinvitem(shaman_rockefeller, itmw2horcaxe03);
    createinvitem(shaman_rockefeller, itmw2horcmace01);
    createinvitems(shaman_rockefeller, itamarrow, 50);
    createinvitems(shaman_rockefeller, itambolt, 50);
    createinvitem(shaman_rockefeller, itarrunebreathofdeath);
    createinvitems(shaman_rockefeller, itarscrollsummongolem, 20);
    createinvitem(shaman_rockefeller, itarrunefireball);
};

instance udshaman_rockefeller(mst_default_orcwarrior) {
    name = "Undead Shaman Rockefeller";
    attribute[atr_mana_max] /*3*/ = 50;
    attribute[atr_mana] /*2*/ = 50;
    set_undeadorcshaman_visuals();
    fight_tactic = fai_human_mage;
    createinvitems(udshaman_rockefeller, itfo_mutton_01, 20);
    createinvitems(udshaman_rockefeller, itfoapple, 5);
    createinvitems(udshaman_rockefeller, itfoloaf, 5);
    createinvitems(udshaman_rockefeller, itfomutton, 20);
    createinvitems(udshaman_rockefeller, itfocheese, 5);
    createinvitems(udshaman_rockefeller, itforice, 5);
    createinvitems(udshaman_rockefeller, itfosoup, 5);
    createinvitems(udshaman_rockefeller, itfomeatbugragout, 5);
    createinvitems(udshaman_rockefeller, itfocrawlersoup, 5);
    createinvitems(udshaman_rockefeller, itfobooze, 10);
    createinvitems(udshaman_rockefeller, itfowine, 5);
    createinvitems(udshaman_rockefeller, itfo_wineberrys_01, 5);
    createinvitems(udshaman_rockefeller, itfobeer, 5);
    createinvitems(udshaman_rockefeller, itfo_plants_trollberrys_01, 5);
    createinvitems(udshaman_rockefeller, itfo_plants_flameberry_01, 5);
    createinvitems(udshaman_rockefeller, itfo_plants_nightshadow_01, 5);
    createinvitems(udshaman_rockefeller, itfo_plants_nightshadow_02, 5);
    createinvitems(udshaman_rockefeller, itfo_plants_orcherb_01, 5);
    createinvitems(udshaman_rockefeller, itfo_plants_orcherb_02, 5);
    createinvitems(udshaman_rockefeller, itfo_plants_mushroom_01, 5);
    createinvitems(udshaman_rockefeller, itfo_plants_mushroom_02, 5);
    createinvitems(udshaman_rockefeller, itfo_plants_stoneroot_01, 5);
    createinvitems(udshaman_rockefeller, itfo_plants_stoneroot_02, 5);
    createinvitems(udshaman_rockefeller, itfo_plants_ravenherb_01, 5);
    createinvitems(udshaman_rockefeller, itfo_plants_ravenherb_02, 5);
    createinvitems(udshaman_rockefeller, itfo_plants_mountainmoos_01, 5);
    createinvitems(udshaman_rockefeller, itfo_plants_mountainmoos_02, 5);
    createinvitems(udshaman_rockefeller, itfo_plants_berrys_01, 5);
    createinvitems(udshaman_rockefeller, itfo_plants_bloodwood_01, 5);
    createinvitems(udshaman_rockefeller, itfo_plants_towerwood_01, 5);
    createinvitems(udshaman_rockefeller, itfo_plants_seraphis_01, 5);
    createinvitems(udshaman_rockefeller, itfo_plants_velayis_01, 5);
    createinvitems(udshaman_rockefeller, itfo_plants_herb_03, 5);
    createinvitems(udshaman_rockefeller, itfo_plants_herb_02, 5);
    createinvitems(udshaman_rockefeller, itfo_plants_herb_01, 5);
    createinvitems(udshaman_rockefeller, itmi_plants_swampherb_01, 5);
    createinvitem(udshaman_rockefeller, itfo_potion_mana_01);
    createinvitem(udshaman_rockefeller, itfo_potion_mana_02);
    createinvitem(udshaman_rockefeller, itfo_potion_mana_03);
    createinvitem(udshaman_rockefeller, itfo_potion_health_01);
    createinvitem(udshaman_rockefeller, itfo_potion_health_02);
    createinvitem(udshaman_rockefeller, itfo_potion_health_03);
    createinvitem(udshaman_rockefeller, itfo_potion_elixier);
    createinvitem(udshaman_rockefeller, itfo_potion_elixier_egg);
    createinvitem(udshaman_rockefeller, itfo_potion_strength_01);
    createinvitem(udshaman_rockefeller, itfo_potion_strength_02);
    createinvitem(udshaman_rockefeller, itfo_potion_strength_03);
    createinvitem(udshaman_rockefeller, itfo_potion_dex_01);
    createinvitem(udshaman_rockefeller, itfo_potion_dex_02);
    createinvitem(udshaman_rockefeller, itfo_potion_dex_03);
    createinvitem(udshaman_rockefeller, itfo_potion_health_perma_01);
    createinvitem(udshaman_rockefeller, itfo_potion_health_perma_02);
    createinvitem(udshaman_rockefeller, itfo_potion_health_perma_03);
    createinvitem(udshaman_rockefeller, itfo_potion_mana_perma_01);
    createinvitem(udshaman_rockefeller, itfo_potion_mana_perma_02);
    createinvitem(udshaman_rockefeller, itfo_potion_mana_perma_03);
    createinvitem(udshaman_rockefeller, itfo_potion_master_01);
    createinvitem(udshaman_rockefeller, itfo_potion_master_02);
    createinvitem(udshaman_rockefeller, itfo_potion_water_01);
    createinvitem(udshaman_rockefeller, itfo_potion_haste_01);
    createinvitems(udshaman_rockefeller, itlstorch, 5);
    createinvitem(udshaman_rockefeller, itmialarmhorn);
    equipitem(udshaman_rockefeller, itrwudorcstaff /*4459*/);
    createinvitem(udshaman_rockefeller, itmw2horcsword01);
    createinvitem(udshaman_rockefeller, itmw2horcaxe01);
    createinvitem(udshaman_rockefeller, itmw2horcaxe02);
    createinvitem(udshaman_rockefeller, itmw2horcaxe03);
    createinvitem(udshaman_rockefeller, itmw2horcmace01);
    createinvitems(udshaman_rockefeller, itamarrow, 50);
    createinvitems(udshaman_rockefeller, itambolt, 50);
    createinvitem(udshaman_rockefeller, itarrunebreathofdeath);
    createinvitems(udshaman_rockefeller, itarscrollsummongolem, 20);
    createinvitem(udshaman_rockefeller, itarrunefireball);
};

instance perception_testmodell(npc_default) {
    name = "Perception_Testmodell";
    guild = gil_dmb;
    level = 1;
    voice = 11;
    id = 2221;
    attribute[atr_strength] /*4*/ = 9;
    attribute[atr_dexterity] /*5*/ = 7;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 18;
    attribute[atr_hitpoints] /*0*/ = 18;
    mdl_setvisual(perception_testmodell, "HUMANS.MDS");
    mdl_applyoverlaymds(perception_testmodell, "Humans_Mage.mds");
    mdl_setvisualbody(perception_testmodell, "hum_body_Naked0", 0, 1, "Hum_Head_Bald", 82, 1, dmb_armor_m /*4150*/);
    b_scale(perception_testmodell);
    mdl_setmodelfatness(perception_testmodell, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_mage;
    fight_tactic = fai_human_mage;
    npc_setpermattitude(perception_testmodell, att_neutral);
    start_aistate = zs_ptm_hangaround;
};

func void zs_ptm_hangaround() {
    printdebugnpc(pd_zs_frame, "ZS_PTM_Hangaround");
    npc_percenable(self, perc_assessplayer, b_ptm_assessplayer);
    npc_percenable(self, perc_assessenemy, b_ptm_assessenemy);
    npc_percenable(self, perc_assessfighter, b_ptm_assessfighter);
    npc_percenable(self, perc_assessbody, b_ptm_assessbody);
    npc_percenable(self, perc_assessitem, b_ptm_assessitem);
    npc_percenable(self, perc_assessmurder, b_ptm_assessmurder);
    npc_percenable(self, perc_assessdefeat, b_ptm_assessdefeat);
    npc_percenable(self, perc_assessdamage, b_ptm_assessdamage);
    npc_percenable(self, perc_assessothersdamage, b_ptm_assessohtersdamage);
    npc_percenable(self, perc_assessthreat, b_ptm_assessthreat);
    npc_percenable(self, perc_assessremoveweapon, b_ptm_assessremoveweapon);
    npc_percenable(self, perc_observeintruder, b_ptm_observeintruder);
    npc_percenable(self, perc_assessquietsound, b_ptm_assessquietsound);
    npc_percenable(self, perc_assesswarn, b_ptm_assesswarn);
    npc_percenable(self, perc_catchthief, b_ptm_catchthief);
    npc_percenable(self, perc_assesstheft, b_ptm_assesstheft);
    npc_percenable(self, perc_assesscall, b_ptm_assesscall);
    npc_percenable(self, perc_assesstalk, b_ptm_assesstalk);
    npc_percenable(self, perc_assessgivenitem, b_ptm_assessgivenitem);
    npc_percenable(self, perc_assessfakeguild, b_ptm_assessfakeguild);
    npc_percenable(self, perc_movemob, b_ptm_movemob);
    npc_percenable(self, perc_movenpc, b_ptm_movenpc);
    npc_percenable(self, perc_drawweapon, b_ptm_drawweapon);
    npc_percenable(self, perc_observesuspect, b_ptm_observesuspect);
    npc_percenable(self, perc_npccommand, b_ptm_npccommand);
    npc_percenable(self, perc_assessmagic, b_ptm_assessmagic);
    npc_percenable(self, perc_assessstopmagic, b_ptm_assessstopmagic);
    npc_percenable(self, perc_assesscaster, b_ptm_assesscaster);
    npc_percenable(self, perc_assesssurprise, b_ptm_assesssurprise);
    npc_percenable(self, perc_assessenterroom, b_ptm_assessenterroom);
    npc_percenable(self, perc_assessusemob, b_ptm_assessusemob);
};

func void zs_ptm_hangaround_loop() {
    printdebugnpc(pd_zs_loop, "ZS_PTM_Hangaround_Loop");
};

func void zs_ptm_hangaround_end() {
    printdebugnpc(pd_zs_frame, "ZS_PTM_Hangaround_End");
};

func void b_ptm_assessplayer() {
    printdebugnpc(pd_zs_detail, "B_PTM_AssessPlayer");
    printglobals(pd_zs_detail);
};

func void b_ptm_assessenemy() {
    printdebugnpc(pd_zs_detail, "B_PTM_AssessEnemy");
    printglobals(pd_zs_detail);
};

func void b_ptm_assessfighter() {
    printdebugnpc(pd_zs_detail, "B_PTM_AssessFighter");
    printglobals(pd_zs_detail);
};

func void b_ptm_assessbody() {
    printdebugnpc(pd_zs_detail, "B_PTM_AssessBody");
    printglobals(pd_zs_detail);
};

func void b_ptm_assessitem() {
    printdebugnpc(pd_zs_detail, "B_PTM_AssessItem");
    printglobals(pd_zs_detail);
};

func void b_ptm_assessmurder() {
    printdebugnpc(pd_zs_frame, "B_PTM_AssessMurder");
    printglobals(pd_zs_frame);
};

func void b_ptm_assessdefeat() {
    printdebugnpc(pd_zs_frame, "B_PTM_AssessDefeat");
    printglobals(pd_zs_frame);
};

func void b_ptm_assessdamage() {
    printdebugnpc(pd_zs_frame, "B_PTM_AssessDamage");
    printglobals(pd_zs_frame);
};

func void b_ptm_assessohtersdamage() {
    printdebugnpc(pd_zs_frame, "B_PTM_AssessOhtersDamage");
    printglobals(pd_zs_frame);
};

func void b_ptm_assessthreat() {
    printdebugnpc(pd_zs_frame, "B_PTM_AssessThreat");
    printglobals(pd_zs_frame);
};

func void b_ptm_assessremoveweapon() {
    printdebugnpc(pd_zs_frame, "B_PTM_AssessRemoveWeapon");
    printglobals(pd_zs_frame);
};

func void b_ptm_observeintruder() {
    printdebugnpc(pd_zs_frame, "B_PTM_ObserveIntruder");
    printglobals(pd_zs_frame);
};

func void b_ptm_assessfightsound() {
    printdebugnpc(pd_zs_frame, "B_PTM_AssessFightSound");
    printglobals(pd_zs_frame);
};

func void b_ptm_assessquietsound() {
    printdebugnpc(pd_zs_frame, "B_PTM_AssessQuietSound");
    printglobals(pd_zs_frame);
};

func void b_ptm_assesswarn() {
    printdebugnpc(pd_zs_frame, "B_PTM_AssessWarn");
    printglobals(pd_zs_frame);
};

func void b_ptm_catchthief() {
    printdebugnpc(pd_zs_frame, "B_PTM_CatchThief");
    printglobals(pd_zs_frame);
};

func void b_ptm_assesstheft() {
    printdebugnpc(pd_zs_frame, "B_PTM_AssessTheft");
    printglobals(pd_zs_frame);
};

func void b_ptm_assesscall() {
    printdebugnpc(pd_zs_frame, "B_PTM_AssessCall");
    printglobals(pd_zs_frame);
};

func void b_ptm_assesstalk() {
    printdebugnpc(pd_zs_frame, "B_PTM_AssessTalk");
    printglobals(pd_zs_frame);
};

func void b_ptm_assessgivenitem() {
    printdebugnpc(pd_zs_frame, "B_PTM_AssessGivenItem");
    printglobals(pd_zs_frame);
};

func void b_ptm_assessfakeguild() {
    printdebugnpc(pd_zs_frame, "B_PTM_AssessFakeGuild");
    printglobals(pd_zs_frame);
};

func void b_ptm_movemob() {
    printdebugnpc(pd_zs_frame, "B_PTM_MoveMob");
    printglobals(pd_zs_frame);
    b_movemob();
};

func void b_ptm_movenpc() {
    printdebugnpc(pd_zs_frame, "B_PTM_MoveNpc");
    printglobals(pd_zs_frame);
};

func void b_ptm_drawweapon() {
    printdebugnpc(pd_zs_frame, "B_PTM_DrawWeapon");
    printglobals(pd_zs_frame);
};

func void b_ptm_observesuspect() {
    printdebugnpc(pd_zs_frame, "B_PTM_ObserveSuspect");
    printglobals(pd_zs_frame);
};

func void b_ptm_npccommand() {
    printdebugnpc(pd_zs_frame, "B_PTM_NpcCommand");
    printglobals(pd_zs_frame);
};

func void b_ptm_assessmagic() {
    printdebugnpc(pd_zs_frame, "B_PTM_AssessMagic");
    printglobals(pd_zs_frame);
};

func void b_ptm_assessstopmagic() {
    printdebugnpc(pd_zs_frame, "B_PTM_AssessStopMagic");
    printglobals(pd_zs_frame);
};

func void b_ptm_assesscaster() {
    printdebugnpc(pd_zs_frame, "B_PTM_AssessCaster");
    printglobals(pd_zs_frame);
};

func void b_ptm_assesssurprise() {
    printdebugnpc(pd_zs_frame, "B_PTM_AssessSurprise");
    printglobals(pd_zs_frame);
};

func void b_ptm_assessenterroom() {
    printdebugnpc(pd_zs_frame, "B_PTM_AssessEnterRoom");
    printglobals(pd_zs_frame);
};

func void b_ptm_assessusemob() {
    printdebugnpc(pd_zs_frame, "B_PTM_AssessUseMob");
    printglobals(pd_zs_frame);
};

func void startup_ai_testlevel() {
    b_initmonsterattitudes();
    b_initguildattitudes();
};

func void startup_spacer_checklist_outdoor() {
    b_initmonsterattitudes();
    b_initguildattitudes();
};

func void startup_ai_testlevel_monster() {
    b_initmonsterattitudes();
};

func void startup_ai_testlevel_monsterparse() {
    wld_insertnpc(bloodfly /*6729*/, "WP_Scorpion");
    wld_insertnpc(demon /*6736*/, "WP_DEMON");
    wld_insertnpc(demonlord /*6743*/, "WP_DEMON");
    wld_insertnpc(harpie /*6763*/, "WP_DEMON");
    wld_insertnpc(greengobboclub /*6749*/, "WP_GOBBO");
    wld_insertnpc(blackgobbomace /*6725*/, "WP_GOBBO");
    wld_insertnpc(stonegolem /*6755*/, "WP_GOLEM");
    wld_insertnpc(icegolem /*6759*/, "WP_GOLEM");
    wld_insertnpc(firegolem /*6758*/, "WP_GOLEM");
    wld_insertnpc(lurker /*6766*/, "WP_LURKER");
    wld_insertnpc(meatbug /*6770*/, "WP_MEATBUG");
    wld_insertnpc(minecrawler /*6773*/, "WP_CRAWLER");
    wld_insertnpc(minecrawlerwarrior /*6779*/, "WP_CRAWLER");
    wld_insertnpc(minecrawlerqueen /*6776*/, "WP_CRWQUEEN");
    wld_insertnpc(molerat /*6783*/, "WP_MOLERAT");
    wld_insertnpc(scavenger /*6815*/, "WP_CAVE_9");
    wld_insertnpc(orcbiter /*6787*/, "WP_CAVE_9");
    wld_insertnpc(shadowbeast /*6819*/, "WP_SHADOW");
    wld_insertnpc(bloodhound /*6733*/, "WP_SHADOW");
    wld_insertnpc(skeleton /*6825*/, "WP_SKELETON");
    wld_insertnpc(skeletonwarrior /*6828*/, "WP_SKELETON");
    wld_insertnpc(skeletonscout /*6827*/, "WP_SKELETON");
    wld_insertnpc(skeletonmage /*6829*/, "WP_SKELETON");
    wld_insertnpc(sleeper /*6837*/, "WORLD_PLAIN_61");
    wld_insertnpc(snapper /*6841*/, "WP_SNAPPER");
    wld_insertnpc(razor /*6812*/, "WP_SNAPPER");
    wld_insertnpc(swampshark /*6844*/, "WP_SWAMPSHARK");
    wld_insertnpc(troll /*6848*/, "WP_TROLL");
    wld_insertnpc(waran /*6859*/, "WP_WARAN");
    wld_insertnpc(firewaran /*6746*/, "WP_WARAN");
    wld_insertnpc(wolf /*6862*/, "WP_WOLF");
    wld_insertnpc(orcdog /*6790*/, "WP_ORCDOG");
    wld_insertnpc(zombie /*6868*/, "WP_ZOMBIE");
    wld_insertnpc(zombie2 /*6869*/, "WP_ZOMBIE");
    wld_insertnpc(zombie3 /*6870*/, "WP_ZOMBIE");
    wld_insertnpc(zombie4 /*6871*/, "WP_ZOMBIE");
    wld_insertnpc(orcscout /*6793*/, "WP_ORC");
    wld_insertnpc(orcshaman /*6798*/, "WP_ORC");
    wld_insertnpc(orcslave /*6801*/, "WP_ORC");
    wld_insertnpc(orcwarrior2 /*6807*/, "WP_ORC");
    wld_insertnpc(undeadorcshaman /*6852*/, "WP_ORC");
    wld_insertnpc(undeadorcwarrior /*6855*/, "WP_ORC");
    wld_insertnpc(babe /*13230*/, "WP_GUARD_1");
    wld_insertnpc(babe2 /*13231*/, "WP_GUARD_1");
    wld_insertnpc(babe3 /*13232*/, "WP_GUARD_1");
    wld_insertnpc(babe4 /*13233*/, "WP_GUARD_1");
    wld_insertnpc(babe5 /*13234*/, "WP_GUARD_1");
    wld_insertnpc(babe6 /*13235*/, "WP_GUARD_1");
    wld_insertnpc(babe7 /*13236*/, "WP_GUARD_1");
    wld_insertnpc(overlayhuman /*13475*/, "WP_CAVE_4");
    wld_insertnpc(bathbabe /*13502*/, "OB_MOBSI");
};

func void startup_world_demo() {
    startup_world();
    kapitel = 2;
    pressetourjanuar2001 = true;
    knows_getteeth = true;
    knows_getfur = true;
    knows_getclaws = true;
    knows_gethide = true;
    knows_getmcmandibles = true;
    knows_getmcplates = true;
    knows_getbfsting = true;
    knows_getulumulu = true;
};

instance sh(npc_default) {
    name = "StoryHelper";
    npctype = npctype_main;
    guild = gil_none;
    level = 10;
    voice = 15;
    id = 0;
    mdl_setvisual(sh, "HUMANS.MDS");
    mdl_setvisualbody(sh, "hum_body_Naked0", 4, 1, "Hum_Head_Pony", 9, 0, -1);
    start_aistate = zs_sh_hangaround;
};

func void zs_sh_hangaround() {
    printdebugnpc(pd_zs_frame, "ZS_SH_Hangaround");
    npc_percenable(self, perc_assesstalk, b_assesstalk);
};

func void zs_sh_hangaround_loop() {
    printdebugnpc(pd_zs_loop, "ZS_SH_Hangaround_Loop");
};

func void zs_sh_hangaround_end() {
    printdebugnpc(pd_zs_frame, "ZS_SH_Hangaround_End");
};

instance storyhelper_exit(c_info) {
    npc = sh /*13431*/;
    nr = 999;
    condition = storyhelper_exit_condition;
    information = storyhelper_exit_info;
    permanent = true;
    description = dialog_ende;
};

func int storyhelper_exit_condition() {
    return 1;
};

func void storyhelper_exit_info() {
    ai_stopprocessinfos(self);
};

instance storyhelper_info2(c_info) {
    npc = sh /*13431*/;
    nr = 0;
    condition = storyhelper_info2_condition;
    information = storyhelper_info2_info;
    permanent = true;
    description = "Kapitel 2";
};

func int storyhelper_info2_condition() {
    return true;
};

func void storyhelper_info2_info() {
    info_clearchoices(storyhelper_info2 /*13438*/);
    info_addchoice(storyhelper_info2 /*13438*/, dialog_back, storyhelper_back2);
    info_addchoice(storyhelper_info2 /*13438*/, "II:  Vorbereitung für die Beschwörung", storyhelper_prepareritual);
    info_addchoice(storyhelper_info2 /*13438*/, "II:  Hole den Almanach", storyhelper_corkalom_bringbook_running);
    info_addchoice(storyhelper_info2 /*13438*/, "II:  Hole die MCQ-Eier", storyhelper_corkalom_bringmcqballs_running);
    info_addchoice(storyhelper_info2 /*13438*/, "II:  Bringe Fokus zu Cor Kalom", storyhelper_yberion_bringfocus_success);
    info_addchoice(storyhelper_info2 /*13438*/, "II:  Kapitelanfang", storyhelper_chapter2start);
};

func void storyhelper_chapter2start() {
    b_kapitelwechsel(2);
    info_clearchoices(storyhelper_info2 /*13438*/);
    ai_stopprocessinfos(self);
};

func void storyhelper_yberion_bringfocus_success() {
    b_kapitelwechsel(2);
    createinvitem(hero, focus_1);
    yberion_bringfocus = log_success;
    info_clearchoices(storyhelper_info2 /*13438*/);
    ai_stopprocessinfos(self);
};

func void storyhelper_corkalom_bringmcqballs_running() {
    b_kapitelwechsel(2);
    yberion_bringfocus = log_success;
    gur_1201_corkalom_weg_accept();
    corkalom_bringmcqballs = log_running;
    info_clearchoices(storyhelper_info2 /*13438*/);
    ai_stopprocessinfos(self);
};

func void storyhelper_corkalom_bringbook_running() {
    b_kapitelwechsel(2);
    yberion_bringfocus = log_success;
    corkalom_bringmcqballs = log_success;
    corkalom_bringbook = log_running;
    info_clearchoices(storyhelper_info2 /*13438*/);
    ai_stopprocessinfos(self);
};

func void storyhelper_prepareritual() {
    b_kapitelwechsel(2);
    yberion_bringfocus = log_success;
    corkalom_bringmcqballs = log_success;
    corkalom_bringbook = log_success;
    b_story_prepareritual();
    info_clearchoices(storyhelper_info2 /*13438*/);
    ai_stopprocessinfos(self);
};

func void storyhelper_back2() {
    info_clearchoices(storyhelper_info2 /*13438*/);
};

instance storyhelper_info3(c_info) {
    npc = sh /*13431*/;
    nr = 0;
    condition = storyhelper_info3_condition;
    information = storyhelper_info3_info;
    permanent = true;
    description = "Kapitel 3";
};

func int storyhelper_info3_condition() {
    return true;
};

func void storyhelper_info3_info() {
    info_clearchoices(storyhelper_info3 /*13447*/);
    info_addchoice(storyhelper_info3 /*13447*/, dialog_back, storyhelper_back3);
    info_addchoice(storyhelper_info3 /*13447*/, "III: Saturas  - 4 Foki holen", storyhelper_saturasbringfoci_running);
    info_addchoice(storyhelper_info3 /*13447*/, "III: CorAngar - zum NC gehen", storyhelper_corangar_sendtonc);
    info_addchoice(storyhelper_info3 /*13447*/, "III: BaalLukor - besiegt", storyhelper_baallukor_defeat);
    info_addchoice(storyhelper_info3 /*13447*/, "III: Bereit für den Ork-Friedhof", storyhelper_orcgraveyard);
};

func void storyhelper_orcgraveyard() {
    b_kapitelwechsel(2);
    b_story_prepareritual();
    b_kapitelwechsel(3);
    b_story_gotoorcgraveyard();
    info_clearchoices(storyhelper_info3 /*13447*/);
    ai_stopprocessinfos(self);
};

func void storyhelper_baallukor_defeat() {
    b_kapitelwechsel(2);
    b_story_prepareritual();
    b_kapitelwechsel(3);
    b_story_gotoorcgraveyard();
    baallukor_bringparchment = 4;
    info_clearchoices(storyhelper_info3 /*13447*/);
    ai_stopprocessinfos(self);
};

func void storyhelper_corangar_sendtonc() {
    b_kapitelwechsel(2);
    b_story_prepareritual();
    b_kapitelwechsel(3);
    b_story_gotoorcgraveyard();
    b_story_backfromorcgraveyard();
    createinvitem(hero, focus_1);
    createinvitem(hero, itwrfokusbuch);
    b_story_senttonc();
    info_clearchoices(storyhelper_info3 /*13447*/);
    ai_stopprocessinfos(self);
};

func void storyhelper_saturasbringfoci_running() {
    b_kapitelwechsel(2);
    b_story_prepareritual();
    b_kapitelwechsel(3);
    b_story_gotoorcgraveyard();
    b_story_backfromorcgraveyard();
    b_story_senttonc();
    b_story_bringfoci();
    info_clearchoices(storyhelper_info3 /*13447*/);
    ai_stopprocessinfos(self);
};

func void storyhelper_back3() {
    info_clearchoices(storyhelper_info3 /*13447*/);
};

instance storyhelper_info4(c_info) {
    npc = sh /*13431*/;
    nr = 0;
    condition = storyhelper_info4_condition;
    information = storyhelper_info4_info;
    permanent = true;
    description = "Kapitel 4";
};

func int storyhelper_info4_condition() {
    return true;
};

func void storyhelper_info4_info() {
    info_clearchoices(storyhelper_info4 /*13455*/);
    info_addchoice(storyhelper_info4 /*13455*/, dialog_back, storyhelper_back4);
    info_addchoice(storyhelper_info4 /*13455*/, "IV:  Suche Teile für Ulu-Mulu", storyhelper_searchforulumulu);
    info_addchoice(storyhelper_info4 /*13455*/, "IV:  Bereit für Angriff auf die Freie Mine", storyhelper_attackfreemine);
    info_addchoice(storyhelper_info4 /*13455*/, "IV:  Xardas  - Finde Ork Schamanen", storyhelper_xardasfindorcshaman);
    info_addchoice(storyhelper_info4 /*13455*/, "IV:  Xardas  - Erste Begegnung", storyhelper_xardasintro);
    info_addchoice(storyhelper_info4 /*13455*/, "IV:  Saturas - Finde Xardas", storyhelper_saturasfindxardas);
    info_addchoice(storyhelper_info4 /*13455*/, "IV:  Diego   - Freie Mine wurde überfallen", storyhelper_freemineambush);
    info_addchoice(storyhelper_info4 /*13455*/, "IV:  Saturas - Feuermagier holen", storyhelper_saturasbringfoci_success);
};

func void storyhelper_saturasbringfoci_success() {
    b_kapitelwechsel(2);
    b_story_prepareritual();
    b_kapitelwechsel(3);
    b_story_gotoorcgraveyard();
    b_story_backfromorcgraveyard();
    b_story_senttonc();
    b_story_bringfoci();
    b_story_broughtfoci();
    b_kapitelwechsel(4);
    info_clearchoices(storyhelper_info4 /*13455*/);
    ai_stopprocessinfos(self);
};

func void storyhelper_freemineambush() {
    b_kapitelwechsel(2);
    b_story_prepareritual();
    b_kapitelwechsel(3);
    b_story_gotoorcgraveyard();
    b_story_backfromorcgraveyard();
    b_story_senttonc();
    b_story_bringfoci();
    b_story_broughtfoci();
    b_kapitelwechsel(4);
    b_story_fmtaken();
    info_clearchoices(storyhelper_info4 /*13455*/);
    ai_stopprocessinfos(self);
};

func void storyhelper_saturasfindxardas() {
    b_kapitelwechsel(2);
    b_story_prepareritual();
    b_kapitelwechsel(3);
    b_story_gotoorcgraveyard();
    b_story_backfromorcgraveyard();
    b_story_senttonc();
    b_story_bringfoci();
    b_story_broughtfoci();
    b_kapitelwechsel(4);
    b_story_fmtaken();
    b_story_cordspost();
    b_story_findxardas();
    info_clearchoices(storyhelper_info4 /*13455*/);
    ai_stopprocessinfos(self);
};

func void storyhelper_xardasintro() {
    b_kapitelwechsel(2);
    b_story_prepareritual();
    b_kapitelwechsel(3);
    b_story_gotoorcgraveyard();
    b_story_backfromorcgraveyard();
    b_story_senttonc();
    b_story_bringfoci();
    b_story_broughtfoci();
    b_kapitelwechsel(4);
    b_story_fmtaken();
    b_story_cordspost();
    b_story_findxardas();
    b_story_accesstoxardas();
    info_clearchoices(storyhelper_info4 /*13455*/);
    ai_stopprocessinfos(self);
};

func void storyhelper_xardasfindorcshaman() {
    b_kapitelwechsel(2);
    b_story_prepareritual();
    b_kapitelwechsel(3);
    b_story_gotoorcgraveyard();
    b_story_backfromorcgraveyard();
    b_story_senttonc();
    b_story_bringfoci();
    b_story_broughtfoci();
    b_kapitelwechsel(4);
    b_story_fmtaken();
    b_story_cordspost();
    b_story_findxardas();
    b_story_accesstoxardas();
    b_story_findorcshaman();
    info_clearchoices(storyhelper_info4 /*13455*/);
    ai_stopprocessinfos(self);
};

func void storyhelper_attackfreemine() {
    b_kapitelwechsel(2);
    b_story_prepareritual();
    b_kapitelwechsel(3);
    b_story_gotoorcgraveyard();
    b_story_backfromorcgraveyard();
    b_story_senttonc();
    b_story_bringfoci();
    b_story_broughtfoci();
    b_kapitelwechsel(4);
    b_story_fmtaken();
    b_story_cordspost();
    b_story_findxardas();
    b_story_accesstoxardas();
    b_story_findorcshaman();
    b_story_foundurshak();
    b_story_friendofurshak();
    b_story_returnedfromurshak();
    info_clearchoices(storyhelper_info4 /*13455*/);
    ai_stopprocessinfos(self);
};

func void storyhelper_searchforulumulu() {
    b_kapitelwechsel(2);
    b_story_prepareritual();
    b_kapitelwechsel(3);
    b_story_gotoorcgraveyard();
    b_story_backfromorcgraveyard();
    b_story_senttonc();
    b_story_bringfoci();
    b_story_broughtfoci();
    b_kapitelwechsel(4);
    b_story_fmtaken();
    b_story_cordspost();
    b_story_findxardas();
    b_story_accesstoxardas();
    b_story_findorcshaman();
    b_story_foundurshak();
    b_story_friendofurshak();
    b_story_returnedfromurshak();
    b_story_cancelfindxardas();
    b_story_gornjoins();
    knows_getmcplates = true;
    b_story_jackalfight();
    b_story_foundorcslave();
    b_story_curedorc();
    b_story_leftfm();
    info_clearchoices(storyhelper_info4 /*13455*/);
    ai_stopprocessinfos(self);
};

func void storyhelper_back4() {
    info_clearchoices(storyhelper_info4 /*13455*/);
};

instance storyhelper_info5(c_info) {
    npc = sh /*13431*/;
    nr = 0;
    condition = storyhelper_info5_condition;
    information = storyhelper_info5_info;
    permanent = true;
    description = "Kapitel 5";
};

func int storyhelper_info5_condition() {
    return true;
};

func void storyhelper_info5_info() {
    info_clearchoices(storyhelper_info5 /*13466*/);
    info_addchoice(storyhelper_info5 /*13466*/, dialog_back, storyhelper_back5);
    info_addchoice(storyhelper_info5 /*13466*/, "V:  URIZIEL ist aufgeladen", storyhelper_urizielloaded);
    info_addchoice(storyhelper_info5 /*13466*/, "V:  Bereit für das Laden von URIZIEL", storyhelper_loaduriziel);
    info_addchoice(storyhelper_info5 /*13466*/, "V:  Erforsche den versunkenen Turm", storyhelper_exploresunkentower);
    info_addchoice(storyhelper_info5 /*13466*/, "V:  Uriziel gefunden", storyhelper_founduriziel);
    info_addchoice(storyhelper_info5 /*13466*/, "V:  Bereit für die Ork-Stadt", storyhelper_readyfororccity);
};

func void storyhelper_readyfororccity() {
    b_kapitelwechsel(2);
    b_story_prepareritual();
    b_kapitelwechsel(3);
    b_story_gotoorcgraveyard();
    b_story_backfromorcgraveyard();
    b_story_senttonc();
    b_story_bringfoci();
    b_story_broughtfoci();
    b_kapitelwechsel(4);
    b_story_fmtaken();
    b_story_cordspost();
    b_story_findxardas();
    b_story_accesstoxardas();
    b_story_findorcshaman();
    b_story_foundurshak();
    b_story_friendofurshak();
    b_story_returnedfromurshak();
    b_story_cancelfindxardas();
    b_story_gornjoins();
    knows_getmcplates = true;
    b_story_jackalfight();
    b_story_foundorcslave();
    b_story_curedorc();
    b_story_leftfm();
    b_story_gotulumulu();
    b_kapitelwechsel(5);
    createinvitem(hero, crw_armor_h);
    info_clearchoices(storyhelper_info5 /*13466*/);
    ai_stopprocessinfos(self);
};

func void storyhelper_founduriziel() {
    b_kapitelwechsel(2);
    b_story_prepareritual();
    b_kapitelwechsel(3);
    b_story_gotoorcgraveyard();
    b_story_backfromorcgraveyard();
    b_story_senttonc();
    b_story_bringfoci();
    b_story_broughtfoci();
    b_kapitelwechsel(4);
    b_story_fmtaken();
    b_story_cordspost();
    b_story_findxardas();
    b_story_accesstoxardas();
    b_story_findorcshaman();
    b_story_foundurshak();
    b_story_friendofurshak();
    b_story_returnedfromurshak();
    b_story_cancelfindxardas();
    b_story_gornjoins();
    knows_getmcplates = true;
    b_story_jackalfight();
    b_story_foundorcslave();
    b_story_curedorc();
    b_story_leftfm();
    b_story_gotulumulu();
    b_kapitelwechsel(5);
    createinvitem(hero, crw_armor_h);
    enteredtemple = true;
    b_story_founduriziel();
    b_story_encounteredhighpriest();
    b_story_showedurizieltoxardas();
    info_clearchoices(storyhelper_info5 /*13466*/);
    ai_stopprocessinfos(self);
};

func void storyhelper_exploresunkentower() {
    b_kapitelwechsel(2);
    b_story_prepareritual();
    b_kapitelwechsel(3);
    b_story_gotoorcgraveyard();
    b_story_backfromorcgraveyard();
    b_story_senttonc();
    b_story_bringfoci();
    b_story_broughtfoci();
    b_kapitelwechsel(4);
    b_story_fmtaken();
    b_story_cordspost();
    b_story_findxardas();
    b_story_accesstoxardas();
    b_story_findorcshaman();
    b_story_foundurshak();
    b_story_friendofurshak();
    b_story_returnedfromurshak();
    b_story_cancelfindxardas();
    b_story_gornjoins();
    knows_getmcplates = true;
    b_story_jackalfight();
    b_story_foundorcslave();
    b_story_curedorc();
    b_story_leftfm();
    b_story_gotulumulu();
    b_kapitelwechsel(5);
    createinvitem(hero, crw_armor_h);
    enteredtemple = true;
    b_story_founduriziel();
    b_story_encounteredhighpriest();
    b_story_showedurizieltoxardas();
    b_story_exploresunkentower();
    info_clearchoices(storyhelper_info5 /*13466*/);
    ai_stopprocessinfos(self);
};

func void storyhelper_loaduriziel() {
    b_kapitelwechsel(2);
    b_story_prepareritual();
    b_kapitelwechsel(3);
    b_story_gotoorcgraveyard();
    b_story_backfromorcgraveyard();
    b_story_senttonc();
    b_story_bringfoci();
    b_story_broughtfoci();
    b_kapitelwechsel(4);
    b_story_fmtaken();
    b_story_cordspost();
    b_story_findxardas();
    b_story_accesstoxardas();
    b_story_findorcshaman();
    b_story_foundurshak();
    b_story_friendofurshak();
    b_story_returnedfromurshak();
    b_story_cancelfindxardas();
    b_story_gornjoins();
    knows_getmcplates = true;
    b_story_jackalfight();
    b_story_foundorcslave();
    b_story_curedorc();
    b_story_leftfm();
    b_story_gotulumulu();
    b_kapitelwechsel(5);
    createinvitem(hero, crw_armor_h);
    enteredtemple = true;
    b_story_founduriziel();
    b_story_encounteredhighpriest();
    b_story_showedurizieltoxardas();
    b_story_exploresunkentower();
    createinvitem(hero, ore_armor_m);
    createinvitem(hero, itarruneteleport1);
    b_story_loadsword();
    info_clearchoices(storyhelper_info5 /*13466*/);
    ai_stopprocessinfos(self);
};

func void storyhelper_urizielloaded() {
    b_kapitelwechsel(2);
    b_story_prepareritual();
    b_kapitelwechsel(3);
    b_story_gotoorcgraveyard();
    b_story_backfromorcgraveyard();
    b_story_senttonc();
    b_story_bringfoci();
    b_story_broughtfoci();
    b_kapitelwechsel(4);
    b_story_fmtaken();
    b_story_cordspost();
    b_story_findxardas();
    b_story_accesstoxardas();
    b_story_findorcshaman();
    b_story_foundurshak();
    b_story_friendofurshak();
    b_story_returnedfromurshak();
    b_story_cancelfindxardas();
    b_story_gornjoins();
    knows_getmcplates = true;
    b_story_jackalfight();
    b_story_foundorcslave();
    b_story_curedorc();
    b_story_gotulumulu();
    b_kapitelwechsel(5);
    createinvitem(hero, crw_armor_h);
    enteredtemple = true;
    b_story_founduriziel();
    b_story_encounteredhighpriest();
    b_story_showedurizieltoxardas();
    b_story_exploresunkentower();
    createinvitem(hero, ore_armor_m);
    createinvitem(hero, itarruneteleport1);
    b_story_loadsword();
    b_kapitelwechsel(6);
    b_story_urizielloaded();
    info_clearchoices(storyhelper_info5 /*13466*/);
    ai_stopprocessinfos(self);
};

func void storyhelper_back5() {
    info_clearchoices(storyhelper_info5 /*13466*/);
};

instance overlayhuman(c_npc) {
    name = "OverlayHuman";
    guild = gil_bau;
    level = 10;
    voice = 11;
    id = b_assignambientinfos_mine_grd_7.slf /*3001*/;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 7;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 18;
    attribute[atr_hitpoints] /*0*/ = 18;
    mdl_setvisual(overlayhuman, "HUMANS.MDS");
    mdl_applyoverlaymds(overlayhuman, "Humans_1hST1.mds");
    mdl_applyoverlaymds(overlayhuman, "Humans_1hST2.mds");
    mdl_applyoverlaymds(overlayhuman, "Humans_2hST1.mds");
    mdl_applyoverlaymds(overlayhuman, "Humans_2hST2.mds");
    mdl_applyoverlaymds(overlayhuman, "Humans_BowT1.mds");
    mdl_applyoverlaymds(overlayhuman, "Humans_BowT2.mds");
    mdl_applyoverlaymds(overlayhuman, "Humans_CBowT1.mds");
    mdl_applyoverlaymds(overlayhuman, "Humans_CBowT2.mds");
    mdl_applyoverlaymds(overlayhuman, "Humans_Acrobatic.mds");
    mdl_applyoverlaymds(overlayhuman, "Humans_Arrogance.mds");
    mdl_applyoverlaymds(overlayhuman, "Humans_Militia.mds");
    mdl_applyoverlaymds(overlayhuman, "Humans_Mage.mds");
    mdl_applyoverlaymds(overlayhuman, "Humans_Relaxed.mds");
    mdl_applyoverlaymds(overlayhuman, "Humans_Tired.mds");
    mdl_applyoverlaymds(overlayhuman, "Humans_drunken.mds");
    mdl_applyoverlaymds(overlayhuman, "Humans_Swim.mds");
    mdl_applyoverlaymds(overlayhuman, "Humans_Sprint.mds");
    mdl_applyoverlaymds(overlayhuman, "Humans_Torch.mds");
    mdl_applyoverlaymds(overlayhuman, "Humans_Flee.mds");
    mdl_setvisualbody(overlayhuman, "hum_body_Naked0", default, default, "Hum_Head_Bald", default, default, -1);
};

instance overlayorc(c_npc) {
    name = "Orc Rockefeller";
    guild = gil_orcwarrior;
    level = 4;
    attribute[atr_strength] /*4*/ = 15;
    attribute[atr_dexterity] /*5*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 20;
    attribute[atr_hitpoints] /*0*/ = 20;
    protection[prot_edge] /*2*/ = 5;
    protection[prot_blunt] /*1*/ = 5;
    protection[prot_point] /*6*/ = 5;
    protection[prot_fire] /*3*/ = 5;
    protection[prot_magic] /*5*/ = 5;
    mdl_setvisual(overlayorc, "orc.mds");
    mdl_applyoverlaymds(overlayorc, "Orc_Drunken.mds");
    mdl_applyoverlaymds(overlayorc, "Orc_Torch.mds");
    mdl_setvisualbody(overlayorc, "Orc_BodyWarrior", default, default, "Orc_Head", default, default, -1);
};

instance babe_rockefeller(npc_default) {
    name = "babe rockefeller";
    guild = gil_bab;
    level = 1;
    flags = 0;
    flags = npc_flag_immortal;
    voice = 19;
    id = 110;
    attribute[atr_strength] /*4*/ = 6;
    attribute[atr_dexterity] /*5*/ = 8;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 10;
    attribute[atr_hitpoints] /*0*/ = 10;
    mdl_setvisual(babe_rockefeller, "Babe.MDS");
    mdl_setvisualbody(babe_rockefeller, "Bab_body_Naked0", 0, 1, "Bab_Head_Hair1", 0, default, -1);
    fight_tactic = fai_human_coward;
    createinvitem(babe_rockefeller, bab_armor_nude);
    createinvitem(babe_rockefeller, bab_armor_bikini);
    createinvitem(babe_rockefeller, itmibrush);
    createinvitem(babe_rockefeller, itmiwedel);
    createinvitem(babe_rockefeller, itmilute);
    createinvitems(babe_rockefeller, itfo_mutton_01, 20);
    createinvitems(babe_rockefeller, itfoapple, 5);
    createinvitems(babe_rockefeller, itfoloaf, 5);
    createinvitems(babe_rockefeller, itfomutton, 20);
    createinvitems(babe_rockefeller, itfocheese, 5);
    createinvitems(babe_rockefeller, itforice, 5);
    createinvitems(babe_rockefeller, itfosoup, 5);
    createinvitems(babe_rockefeller, itfomeatbugragout, 5);
    createinvitems(babe_rockefeller, itfocrawlersoup, 5);
    createinvitems(babe_rockefeller, itfobooze, 10);
    createinvitems(babe_rockefeller, itfowine, 5);
    createinvitems(babe_rockefeller, itfo_wineberrys_01, 5);
    createinvitems(babe_rockefeller, itfobeer, 5);
};

instance l5(npc_default) {
    name = "l5";
    npctype = npctype_main;
    guild = gil_none;
    level = 5;
    voice = 15;
    id = 0;
    exp = inextremo_thomastheforger /*7500*/;
    exp_next = nov_1320_novize_callsleeper /*10500*/;
    lp = 90;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 5;
    attribute[atr_mana] /*2*/ = 5;
    attribute[atr_hitpoints_max] /*1*/ = 100;
    attribute[atr_hitpoints] /*0*/ = 100;
    mdl_setvisual(l5, "HUMANS.MDS");
    mdl_setvisualbody(l5, "hum_body_Naked0", 4, 1, "Hum_Head_Pony", 9, 0, sfb_armor_l /*4131*/);
    createinvitem(l5, vlk_armor_l);
    createinvitem(l5, vlk_armor_m);
    createinvitem(l5, sfb_armor_l);
    createinvitem(l5, nov_armor_l);
    createinvitem(l5, itmw_1h_club_01);
    createinvitem(l5, itmw_1h_poker_01);
    createinvitem(l5, itmw_1h_sickle_01);
    createinvitem(l5, itmw_1h_mace_light_01);
    createinvitem(l5, itmw_1h_hatchet_01);
    createinvitem(l5, itmw_1h_sword_old_01);
    createinvitem(l5, itmw_1h_nailmace_01);
    createinvitem(l5, itmw_1h_sword_short_01);
    createinvitem(l5, itmw_1h_sword_short_02);
    createinvitem(l5, itmw_1h_sword_short_03);
    createinvitem(l5, itmw_1h_sword_short_04);
    createinvitem(l5, itmw_1h_axe_old_01);
    createinvitem(l5, itmw_1h_scythe_01);
    createinvitem(l5, itmw_2h_staff_01);
    createinvitem(l5, itmw_2h_staff_02);
    createinvitem(l5, itmw_2h_staff_03);
    createinvitem(l5, itmw_1h_mace_01);
    createinvitem(l5, itmw_1h_mace_02);
    createinvitem(l5, itrw_bow_small_02);
    createinvitem(l5, itrw_bow_small_03);
    createinvitem(l5, itrw_bow_small_04);
    createinvitems(l5, itamarrow, 50);
    createinvitems(l5, itminugget, 200);
    createinvitems(l5, itkelockpick, 10);
    createinvitems(l5, itlstorch, 20);
    equipitem(l5, itmw_1h_sword_short_05 /*4390*/);
    equipitem(l5, itrw_bow_small_01 /*4871*/);
    start_aistate = zs_firespit;
};

instance l10(npc_default) {
    name = "L10 ";
    npctype = npctype_main;
    guild = gil_none;
    level = 10;
    voice = 15;
    id = 0;
    exp = 27500;
    exp_next = 33000;
    lp = 165;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 5;
    attribute[atr_mana] /*2*/ = 5;
    attribute[atr_hitpoints_max] /*1*/ = 160;
    attribute[atr_hitpoints] /*0*/ = 160;
    mdl_setvisual(l10, "HUMANS.MDS");
    mdl_setvisualbody(l10, "hum_body_Naked0", 4, 1, "Hum_Head_Pony", 9, 0, -1);
    createinvitem(l10, stt_armor_m);
    createinvitem(l10, stt_armor_h);
    createinvitem(l10, org_armor_l);
    createinvitem(l10, org_armor_m);
    createinvitem(l10, nov_armor_m);
    createinvitem(l10, nov_armor_h);
    createinvitem(l10, itmw_1h_mace_03);
    createinvitem(l10, itmw_1h_mace_04);
    createinvitem(l10, itmw_1h_sword_01);
    createinvitem(l10, itmw_1h_sword_02);
    createinvitem(l10, itmw_1h_sword_03);
    createinvitem(l10, itmw_1h_sword_04);
    createinvitem(l10, itmw_1h_sword_05);
    createinvitem(l10, itmw_1h_mace_war_01);
    createinvitem(l10, itmw_1h_mace_war_02);
    createinvitem(l10, itmw_1h_mace_war_03);
    createinvitem(l10, itmw_1h_mace_war_04);
    createinvitem(l10, itmw_1h_sword_long_01);
    createinvitem(l10, itrw_bow_small_05);
    createinvitem(l10, itrw_bow_long_01);
    createinvitem(l10, itrw_bow_long_02);
    createinvitems(l10, itamarrow, 100);
    createinvitems(l10, itminugget, 400);
    createinvitems(l10, itkelockpick, 20);
    createinvitems(l10, itlstorch, 20);
};

instance l15(npc_default) {
    name = "L15 ";
    npctype = npctype_main;
    guild = gil_none;
    level = 15;
    voice = 15;
    id = 0;
    exp = 60000;
    exp_next = 68000;
    lp = 240;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 5;
    attribute[atr_mana] /*2*/ = 5;
    attribute[atr_hitpoints_max] /*1*/ = 220;
    attribute[atr_hitpoints] /*0*/ = 220;
    mdl_setvisual(l15, "HUMANS.MDS");
    mdl_setvisualbody(l15, "hum_body_Naked0", 4, 1, "Hum_Head_Pony", 9, 0, -1);
    createinvitem(l15, grd_armor_l);
    createinvitem(l15, grd_armor_m);
    createinvitem(l15, org_armor_h);
    createinvitem(l15, tpl_armor_l);
    createinvitem(l15, tpl_armor_m);
    createinvitem(l15, kdf_armor_l);
    createinvitem(l15, kdf_armor_h);
    createinvitem(l15, itmw_1h_sword_long_02);
    createinvitem(l15, itmw_1h_sword_long_03);
    createinvitem(l15, itmw_1h_sword_long_04);
    createinvitem(l15, itmw_1h_sword_long_05);
    createinvitem(l15, itmw_1h_warhammer_01);
    createinvitem(l15, itmw_1h_warhammer_02);
    createinvitem(l15, itmw_1h_warhammer_03);
    createinvitem(l15, itmw_1h_axe_02);
    createinvitem(l15, itmw_1h_axe_03);
    createinvitem(l15, itmw_1h_sword_broad_01);
    createinvitem(l15, itrw_bow_long_03);
    createinvitem(l15, itrw_bow_long_04);
    createinvitem(l15, itrw_bow_long_05);
    createinvitems(l15, itamarrow, 100);
    createinvitems(l15, itminugget, 400);
    createinvitems(l15, itkelockpick, 20);
    createinvitems(l15, itlstorch, 20);
};

instance l20(npc_default) {
    name = "L20 ";
    npctype = npctype_main;
    guild = gil_none;
    level = 20;
    voice = 15;
    id = 0;
    exp = 105000;
    exp_next = 115500;
    lp = 315;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 5;
    attribute[atr_mana] /*2*/ = 5;
    attribute[atr_hitpoints_max] /*1*/ = 280;
    attribute[atr_hitpoints] /*0*/ = 280;
    mdl_setvisual(l20, "HUMANS.MDS");
    mdl_setvisualbody(l20, "hum_body_Naked0", 4, 1, "Hum_Head_Pony", 9, 0, -1);
    createinvitem(l20, grd_armor_h);
    createinvitem(l20, sld_armor_m);
    createinvitem(l20, sld_armor_h);
    createinvitem(l20, tpl_armor_h);
    createinvitem(l20, kdw_armor_l);
    createinvitem(l20, itmw_1h_sword_broad_02);
    createinvitem(l20, itmw_1h_sword_broad_03);
    createinvitem(l20, itmw_1h_sword_broad_04);
    createinvitem(l20, itmw_2h_sword_old_01);
    createinvitem(l20, itmw_1h_sword_bastard_01);
    createinvitem(l20, itmw_1h_sword_bastard_02);
    createinvitem(l20, itmw_1h_sword_bastard_03);
    createinvitem(l20, itmw_1h_sword_bastard_04);
    createinvitem(l20, itmw_2h_axe_old_01);
    createinvitem(l20, itmw_2h_axe_old_02);
    createinvitem(l20, itmw_2h_axe_old_03);
    createinvitem(l20, itmw_2h_sword_light_01);
    createinvitem(l20, itrw_bow_long_06);
    createinvitem(l20, itrw_bow_long_07);
    createinvitem(l20, itrw_bow_long_08);
    createinvitems(l20, itamarrow, 100);
    createinvitems(l20, itminugget, 400);
    createinvitems(l20, itkelockpick, 20);
    createinvitems(l20, itlstorch, 20);
};

instance l25(npc_default) {
    name = "L25 ";
    npctype = npctype_main;
    guild = gil_none;
    level = 25;
    voice = 15;
    id = 0;
    exp = 162500;
    exp_next = 175500;
    lp = 390;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 5;
    attribute[atr_mana] /*2*/ = 5;
    attribute[atr_hitpoints_max] /*1*/ = 340;
    attribute[atr_hitpoints] /*0*/ = 340;
    mdl_setvisual(l25, "HUMANS.MDS");
    mdl_setvisualbody(l25, "hum_body_Naked0", 4, 1, "Hum_Head_Pony", 9, 0, -1);
    createinvitem(l25, crw_armor_h);
    createinvitem(l25, kdw_armor_h);
    createinvitem(l25, dmb_armor_m);
    createinvitem(l25, ore_armor_m);
    createinvitem(l25, itmw_2h_sword_light_02);
    createinvitem(l25, itmw_2h_sword_light_03);
    createinvitem(l25, itmw_2h_sword_light_04);
    createinvitem(l25, itmw_2h_sword_light_05);
    createinvitem(l25, itmw_2h_axe_light_01);
    createinvitem(l25, itmw_2h_axe_light_02);
    createinvitem(l25, itmw_2h_axe_light_03);
    createinvitem(l25, itmw_2h_sword_01);
    createinvitem(l25, itmw_2h_sword_02);
    createinvitem(l25, itmw_2h_sword_03);
    createinvitem(l25, itrw_bow_long_09);
    createinvitem(l25, itrw_bow_war_01);
    createinvitem(l25, itrw_bow_war_02);
    createinvitems(l25, itamarrow, 100);
    createinvitems(l25, itminugget, 400);
    createinvitems(l25, itkelockpick, 20);
    createinvitems(l25, itlstorch, 20);
};

instance testratte(mst_default_molerat) {
    name = "junge Molerat";
    attribute[atr_strength] /*4*/ = 5;
    attribute[atr_dexterity] /*5*/ = 5;
    attribute[atr_hitpoints_max] /*1*/ = 400;
    attribute[atr_hitpoints] /*0*/ = 400;
    protection[prot_blunt] /*1*/ = 8;
    protection[prot_edge] /*2*/ = 8;
    set_molerat_visuals();
    mdl_setmodelscale(testratte, 0.9, 0.9, 0.9);
    fight_tactic = fai_monster_master;
    npc_settofistmode(testratte);
    createinvitems(testratte, itfomuttonraw, 1);
};

instance fonttestbook(c_item) {
    name = "zeichenglumpsche_ascii";
    mainflag = item_kat_docs;
    flags = item_mission;
    visual = "ItWr_Book_02_05.3ds";
    material = mat_leather;
    scemename = "MAP";
    on_state = usefonttestbook;
    value = 100;
    description = "";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = "";
    count[5] = 0;
};

func void usefonttestbook() {
    var int ndocid;

    ndocid = doc_create();
    doc_setpages(ndocid, 2);
    doc_setpage(ndocid, 0, "Book_Mage_L.tga", 0);
    doc_setpage(ndocid, 1, "Book_Mage_R.tga", 0);
    doc_setmargins(ndocid, 0, 275, 20, 30, 20, 1);
    doc_setfont(ndocid, 0, font_book_text);
    doc_printline(ndocid, 0, "a***A***");
    doc_setfont(ndocid, 0, font_book_heading);
    doc_printline(ndocid, 0, "a***A***");
    doc_setfont(ndocid, 0, "font_15_white.tga");
    doc_printline(ndocid, 0, "a***A***");
    doc_setfont(ndocid, 0, "font_default.tga");
    doc_printline(ndocid, 0, "a***A***");
    doc_setfont(ndocid, 0, font_old_10);
    doc_printline(ndocid, 0, "a***A***");
    doc_setfont(ndocid, 0, font_old_20);
    doc_printline(ndocid, 0, "a***A***");
    doc_setmargins(ndocid, -1, 30, 20, 275, 20, 1);
    doc_setfont(ndocid, 1, font_book_text);
    doc_printline(ndocid, 1, "******");
    doc_printline(ndocid, 1, "******");
    doc_printline(ndocid, 1, "******");
    doc_printline(ndocid, 1, "******");
    doc_printline(ndocid, 1, "******");
    doc_printline(ndocid, 1, "*****");
    doc_show(ndocid);
};

instance lukor_bugfixbook(c_item) {
    name = "Zwinge Baal Lukor in den Followmode";
    mainflag = item_kat_docs;
    flags = item_mission;
    visual = "ItWr_Book_02_05.3ds";
    material = mat_leather;
    scemename = "MAP";
    on_state = uselukor_bugfixbook;
    value = 100;
    description = "";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = "";
    count[5] = 0;
};

func void uselukor_bugfixbook() {
    var int ndocid;
    var c_npc bugfix_baallukor;

    ndocid = doc_create();
    doc_setpages(ndocid, 2);
    doc_setpage(ndocid, 0, "Book_Mage_L.tga", 0);
    doc_setpage(ndocid, 1, "Book_Mage_R.tga", 0);
    doc_setfont(ndocid, -1, font_book_text);
    doc_setmargins(ndocid, 0, 275, 20, 30, 20, 1);
    doc_printline(ndocid, 0, "Zwinge Baal Lukor");
    doc_printline(ndocid, 0, "in den Followmode");
    doc_printlines(ndocid, 0, "");
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, "");
    doc_printline(ndocid, 0, "");
    doc_setmargins(ndocid, -1, 30, 20, 275, 20, 1);
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printlines(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printlines(ndocid, 1, "");
    doc_show(ndocid);
    bugfix_baallukor = hlp_getnpc(gur_1211_baallukor);
    npc_exchangeroutine(bugfix_baallukor, "Follow");
    npc_removeinvitem(hero, lukor_bugfixbook /*13487*/);
    wld_removeitem(lukor_bugfixbook);
};

instance lester_bugfixbook(c_item) {
    name = "Schicke Lester nach Hause";
    mainflag = item_kat_docs;
    flags = item_mission;
    visual = "ItWr_Book_02_05.3ds";
    material = mat_leather;
    scemename = "MAP";
    on_state = uselester_bugfixbook;
    value = 100;
    description = "";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = "";
    count[5] = 0;
};

func void uselester_bugfixbook() {
    var int ndocid;
    var c_npc bugfix_lester;

    ndocid = doc_create();
    doc_setpages(ndocid, 2);
    doc_setpage(ndocid, 0, "Book_Mage_L.tga", 0);
    doc_setpage(ndocid, 1, "Book_Mage_R.tga", 0);
    doc_setfont(ndocid, -1, font_book_text);
    doc_setmargins(ndocid, 0, 275, 20, 30, 20, 1);
    doc_printline(ndocid, 0, "Zwinge Baal Lukor");
    doc_printline(ndocid, 0, "in den Followmode");
    doc_printlines(ndocid, 0, "");
    doc_printline(ndocid, 0, "");
    doc_printlines(ndocid, 0, "");
    doc_printline(ndocid, 0, "");
    doc_setmargins(ndocid, -1, 30, 20, 275, 20, 1);
    doc_printline(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printlines(ndocid, 1, "");
    doc_printline(ndocid, 1, "");
    doc_printlines(ndocid, 1, "");
    doc_show(ndocid);
    bugfix_lester = hlp_getnpc(pc_psionic);
    npc_exchangeroutine(bugfix_lester, "start");
    npc_removeinvitem(hero, lester_bugfixbook /*13491*/);
    wld_removeitem(lester_bugfixbook);
};

instance stt_test_schatten(npc_testdefault) {
    name = "Testschatten";
    guild = gil_stt;
    level = 13;
    voice = 12;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 40;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 196;
    attribute[atr_hitpoints] /*0*/ = 196;
    mdl_setvisual(stt_test_schatten, "HUMANS.MDS");
    mdl_applyoverlaymds(stt_test_schatten, "Humans_Relaxed.mds");
    mdl_setvisualbody(stt_test_schatten, "hum_body_Naked0", 0, 1, "Hum_Head_Pony", 55, 1, stt_armor_m /*4123*/);
    b_scale(stt_test_schatten);
    mdl_setmodelfatness(stt_test_schatten, 0.0);
    aivar[22] = true;
    fight_tactic = fai_human_strong;
    npc_settalentskill(stt_test_schatten, npc_talent_1h, 2);
    npc_settalentskill(stt_test_schatten, npc_talent_sneak, 1);
    npc_settalentskill(stt_test_schatten, npc_talent_pickpocket, 1);
    npc_settalentvalue(stt_test_schatten, npc_talent_pickpocket, 60);
    npc_settalentskill(stt_test_schatten, npc_talent_picklock, 1);
    npc_settalentvalue(stt_test_schatten, npc_talent_picklock, 60);
    npc_settalentskill(stt_test_schatten, npc_talent_bow, 1);
    createinvitem(stt_test_schatten, itmw_1h_sword_01);
    createinvitem(stt_test_schatten, itrw_bow_small_02);
    createinvitems(stt_test_schatten, itamarrow, 10);
    createinvitems(stt_test_schatten, itfo_potion_water_01, 4);
    createinvitems(stt_test_schatten, itfoapple, 5);
    createinvitems(stt_test_schatten, itfobeer, 3);
    createinvitems(stt_test_schatten, itfo_potion_health_01, 4);
    start_aistate = zs_testhangaround;
};

instance grd_test_gardist(npc_testdefault) {
    name = name_gardist;
    npctype = npctype_guard;
    guild = gil_grd;
    level = 10;
    voice = 7;
    attribute[atr_strength] /*4*/ = 35;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 160;
    attribute[atr_hitpoints] /*0*/ = 160;
    mdl_setvisual(grd_test_gardist, "HUMANS.MDS");
    mdl_applyoverlaymds(grd_test_gardist, "Humans_Militia.mds");
    mdl_setvisualbody(grd_test_gardist, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 19, 1, grd_armor_l /*4125*/);
    b_scale(grd_test_gardist);
    mdl_setmodelfatness(grd_test_gardist, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(grd_test_gardist, npc_talent_1h, 1);
    npc_settalentskill(grd_test_gardist, npc_talent_1h, 1);
    createinvitem(grd_test_gardist, itmw_1h_sword_01);
    createinvitem(grd_test_gardist, itfoapple);
    createinvitems(grd_test_gardist, itminugget, 10);
    start_aistate = zs_testhangaround;
};

instance vlk_test_buddler(npc_testdefault) {
    name = name_buddler;
    npctype = npctype_ambient;
    guild = gil_vlk;
    level = 2;
    voice = 1;
    attribute[atr_strength] /*4*/ = 13;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 64;
    attribute[atr_hitpoints] /*0*/ = 64;
    mdl_setvisual(vlk_test_buddler, "HUMANS.MDS");
    mdl_applyoverlaymds(vlk_test_buddler, "Humans_Tired.mds");
    mdl_setvisualbody(vlk_test_buddler, "hum_body_Naked0", 3, 0, "Hum_Head_FatBald", 0, 1, vlk_armor_l /*4121*/);
    b_scale(vlk_test_buddler);
    mdl_setmodelfatness(vlk_test_buddler, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(vlk_test_buddler, itmw_1h_nailmace_01);
    createinvitem(vlk_test_buddler, itmwpickaxe);
    createinvitem(vlk_test_buddler, itfoloaf);
    createinvitem(vlk_test_buddler, itfobeer);
    createinvitem(vlk_test_buddler, itlstorch);
    start_aistate = zs_testhangaround;
};

instance sld_test_soeldner(npc_testdefault) {
    name = name_soeldner;
    npctype = npctype_guard;
    guild = gil_sld;
    level = 10;
    voice = 7;
    attribute[atr_strength] /*4*/ = 35;
    attribute[atr_dexterity] /*5*/ = 15;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 160;
    attribute[atr_hitpoints] /*0*/ = 160;
    mdl_setvisual(sld_test_soeldner, "HUMANS.MDS");
    mdl_applyoverlaymds(sld_test_soeldner, "Humans_Militia.mds");
    mdl_setvisualbody(sld_test_soeldner, "hum_body_Naked0", 0, 1, "Hum_Head_FatBald", 19, 1, sld_armor_m /*4136*/);
    b_scale(sld_test_soeldner);
    mdl_setmodelfatness(sld_test_soeldner, 0.0);
    fight_tactic = fai_human_strong;
    npc_settalentskill(sld_test_soeldner, npc_talent_1h, 1);
    npc_settalentskill(sld_test_soeldner, npc_talent_1h, 1);
    createinvitem(sld_test_soeldner, itmw_1h_sword_01);
    createinvitem(sld_test_soeldner, itfoapple);
    createinvitems(sld_test_soeldner, itminugget, 10);
    start_aistate = zs_guard;
};

instance sfb_test_schuerfer(npc_testdefault) {
    name = name_schuerfer;
    npctype = npctype_ambient;
    guild = gil_sfb;
    level = 2;
    voice = 1;
    attribute[atr_strength] /*4*/ = 13;
    attribute[atr_dexterity] /*5*/ = 10;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 64;
    attribute[atr_hitpoints] /*0*/ = 64;
    mdl_setvisual(sfb_test_schuerfer, "HUMANS.MDS");
    mdl_applyoverlaymds(sfb_test_schuerfer, "Humans_Tired.mds");
    mdl_setvisualbody(sfb_test_schuerfer, "hum_body_Naked0", 3, 0, "Hum_Head_FatBald", 0, 1, sfb_armor_l /*4131*/);
    b_scale(sfb_test_schuerfer);
    mdl_setmodelfatness(sfb_test_schuerfer, 0.0);
    fight_tactic = fai_human_coward;
    createinvitem(sfb_test_schuerfer, itmw_1h_nailmace_01);
    createinvitem(sfb_test_schuerfer, itmwpickaxe);
    createinvitem(sfb_test_schuerfer, itfoloaf);
    createinvitem(sfb_test_schuerfer, itfobeer);
    createinvitem(sfb_test_schuerfer, itlstorch);
    start_aistate = zs_pickore;
};

instance pc_mini(c_npc) {
    name = "Mini";
    guild = gil_none;
    level = 10;
    voice = 11;
    id = b_assignambientinfos_mine_grd_7.slf /*3001*/;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 7;
    attribute[atr_mana_max] /*3*/ = 10;
    attribute[atr_mana] /*2*/ = 10;
    attribute[atr_hitpoints_max] /*1*/ = 18;
    attribute[atr_hitpoints] /*0*/ = 18;
    mdl_setvisual(pc_mini, "HUMANS.MDS");
    mdl_setvisualbody(pc_mini, "hum_body_Naked0", 3, 1, "Hum_Head_Pony", 77, default, -1);
    fight_tactic = fai_human_coward;
};

instance overlaytestmodell(c_npc) {
    name = "ATestmodell";
    guild = gil_bau;
    level = 10;
    voice = 11;
    id = b_assignambientinfos_mine_grd_7.slf /*3001*/;
    attribute[atr_strength] /*4*/ = 10;
    attribute[atr_dexterity] /*5*/ = 7;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 18;
    attribute[atr_hitpoints] /*0*/ = 18;
    mdl_setvisual(overlaytestmodell, "HUMANS.MDS");
    mdl_applyoverlaymds(overlaytestmodell, "Humans_1hST1.mds");
    mdl_applyoverlaymds(overlaytestmodell, "Humans_1hST2.mds");
    mdl_applyoverlaymds(overlaytestmodell, "Humans_2hST1.mds");
    mdl_applyoverlaymds(overlaytestmodell, "Humans_2hST2.mds");
    mdl_applyoverlaymds(overlaytestmodell, "Humans_BowT1.mds");
    mdl_applyoverlaymds(overlaytestmodell, "Humans_BowT2.mds");
    mdl_applyoverlaymds(overlaytestmodell, "Humans_CBowT1.mds");
    mdl_applyoverlaymds(overlaytestmodell, "Humans_CBowT2.mds");
    mdl_applyoverlaymds(overlaytestmodell, "Humans_Acrobatic.mds");
    mdl_applyoverlaymds(overlaytestmodell, "Humans_Arrogance.mds");
    mdl_applyoverlaymds(overlaytestmodell, "Humans_Militia.mds");
    mdl_applyoverlaymds(overlaytestmodell, "Humans_Mage.mds");
    mdl_applyoverlaymds(overlaytestmodell, "Humans_Relaxed.mds");
    mdl_applyoverlaymds(overlaytestmodell, "Humans_Tired.mds");
    mdl_applyoverlaymds(overlaytestmodell, "Humans_drunken.mds");
    mdl_applyoverlaymds(overlaytestmodell, "Humans_Swim.mds");
    mdl_applyoverlaymds(overlaytestmodell, "Humans_Sprint.mds");
    mdl_setvisualbody(overlaytestmodell, "hum_body_Naked0", default, default, "Hum_Head_Bald", default, default, -1);
    b_scale(overlaytestmodell);
    fight_tactic = fai_human_coward;
};

instance bathbabe(c_npc) {
    name = str_badenixe;
    guild = gil_ebr;
    level = 3;
    flags = npc_flag_immortal;
    voice = 11;
    id = 3009;
    attribute[atr_strength] /*4*/ = 7;
    attribute[atr_dexterity] /*5*/ = 11;
    attribute[atr_mana_max] /*3*/ = 0;
    attribute[atr_mana] /*2*/ = 0;
    attribute[atr_hitpoints_max] /*1*/ = 13;
    attribute[atr_hitpoints] /*0*/ = 13;
    mdl_setvisual(bathbabe, "BABE.MDS");
    mdl_setvisualbody(bathbabe, "Bab_body_Naked0", default, 1, "Bab_Head_Hair1", 3, default, -1);
    start_aistate = zs_bathing_babe;
};

instance pc_nyul(npc_default) {
    name = "PC_Nyul";
    npctype = npctype_main;
    guild = gil_none;
    level = 10;
    voice = 15;
    id = 0;
    attribute[atr_strength] /*4*/ = 30;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 400;
    attribute[atr_mana] /*2*/ = 400;
    attribute[atr_hitpoints_max] /*1*/ = 100;
    attribute[atr_hitpoints] /*0*/ = 100;
    mdl_setvisual(pc_nyul, "HUMANS.MDS");
    mdl_setvisualbody(pc_nyul, "hum_body_Naked0", 4, 1, "Hum_Head_Pony", 9, 0, -1);
    equipitem(pc_nyul, itmw_2h_staff_02 /*4394*/);
    createinvitem(pc_nyul, itmw_1h_sword_long_05);
    equipitem(pc_nyul, itrw_bow_long_01 /*4876*/);
    createinvitem(pc_nyul, itrw_crossbow_01);
    createinvitems(pc_nyul, itamarrow, 100);
    createinvitems(pc_nyul, itambolt, 100);
    createinvitem(pc_nyul, ebr_armor_h2);
    createinvitem(pc_nyul, itarrunelight);
    createinvitem(pc_nyul, itarrunefirebolt);
    createinvitem(pc_nyul, itarrunefireball);
    createinvitem(pc_nyul, itarrunefirestorm);
    createinvitem(pc_nyul, itarrunefirerain);
    createinvitem(pc_nyul, itarruneteleport1);
    createinvitem(pc_nyul, itarruneteleport2);
    createinvitem(pc_nyul, itarruneteleport3);
    createinvitems(pc_nyul, itarscrollteleport4, 20);
    createinvitem(pc_nyul, itarruneteleport5);
    createinvitem(pc_nyul, itarruneheal);
    createinvitem(pc_nyul, itarrunechainlightning);
    createinvitem(pc_nyul, itarrunethunderbolt);
    createinvitem(pc_nyul, itarrunethunderball);
    createinvitem(pc_nyul, itarruneicecube);
    createinvitem(pc_nyul, itarruneicewave);
    createinvitem(pc_nyul, itarrunedestroyundead);
    createinvitems(pc_nyul, itarscrolltrfbloodfly, 20);
    createinvitems(pc_nyul, itarscrolltrfcrawler, 20);
    createinvitems(pc_nyul, itarscrolltrflurker, 20);
    createinvitems(pc_nyul, itarscrolltrfmeatbug, 20);
    createinvitems(pc_nyul, itarscrolltrfmolerat, 20);
    createinvitems(pc_nyul, itarscrolltrforcdog, 20);
    createinvitems(pc_nyul, itarscrolltrfscavenger, 20);
    createinvitems(pc_nyul, itarscrolltrfshadowbeast, 20);
    createinvitems(pc_nyul, itarscrolltrfsnapper, 20);
    createinvitems(pc_nyul, itarscrolltrfwaran, 20);
    createinvitems(pc_nyul, itarscrolltrfwolf, 20);
    createinvitems(pc_nyul, itarscrollsummondemon, 20);
    createinvitems(pc_nyul, itarscrollsummonskeletons, 20);
    createinvitems(pc_nyul, itarscrollsummongolem, 20);
    createinvitems(pc_nyul, itarscrollarmyofdarkness, 20);
    createinvitem(pc_nyul, itarrunewindfist);
    createinvitem(pc_nyul, itarrunestormfist);
    createinvitem(pc_nyul, itarrunetelekinesis);
    createinvitem(pc_nyul, itarrunecharm);
    createinvitem(pc_nyul, itarrunesleep);
    createinvitem(pc_nyul, itarrunepyrokinesis);
    createinvitem(pc_nyul, itarrunecontrol);
    createinvitem(pc_nyul, itarrunebreathofdeath);
    createinvitems(pc_nyul, itarscrollfear, 20);
    createinvitems(pc_nyul, itarscrollberzerk, 20);
    createinvitems(pc_nyul, itarscrollshrink, 20);
    createinvitems(pc_nyul, itfo_mutton_01, 20);
    createinvitems(pc_nyul, itfobeer, 20);
    createinvitems(pc_nyul, itfo_plants_trollberrys_01, 20);
    createinvitems(pc_nyul, itkelockpick, 20);
    createinvitems(pc_nyul, itlstorch, 20);
    createinvitems(pc_nyul, itminugget, 1000);
    createinvitem(pc_nyul, itwrworldmap);
    createinvitems(pc_nyul, itfo_potion_mana_01, 10);
    createinvitems(pc_nyul, itfo_potion_health_01, 10);
};

instance nyul_16(npc_default) {
    name = "Me";
    npctype = npctype_main;
    guild = gil_grd;
    level = 16;
    voice = 15;
    id = 0;
    exp = 68000;
    exp_next = 76500;
    attribute[atr_strength] /*4*/ = 80;
    attribute[atr_dexterity] /*5*/ = 30;
    attribute[atr_mana_max] /*3*/ = 15;
    attribute[atr_mana] /*2*/ = 15;
    attribute[atr_hitpoints_max] /*1*/ = 232;
    attribute[atr_hitpoints] /*0*/ = 232;
    mdl_setvisual(nyul_16, "HUMANS.MDS");
    mdl_setvisualbody(nyul_16, "hum_body_Naked0", 4, 1, "Hum_Head_Pony", 9, 0, grd_armor_m /*4126*/);
    npc_settalentskill(nyul_16, npc_talent_picklock, 1);
    npc_settalentvalue(nyul_16, npc_talent_picklock, 60);
    npc_settalentskill(nyul_16, npc_talent_acrobat, 1);
    npc_settalentskill(nyul_16, npc_talent_1h, 2);
    npc_settalentskill(nyul_16, npc_talent_2h, 2);
    npc_settalentskill(nyul_16, npc_talent_bow, 1);
    createinvitem(nyul_16, itmw_2h_sword_old_01);
    createinvitem(nyul_16, itwrworldmap);
    createinvitems(nyul_16, itamarrow, 200);
    createinvitems(nyul_16, itarscrollfireball, 5);
    createinvitems(nyul_16, itarscrollthunderbolt, 10);
    createinvitems(nyul_16, itarscrollthunderball, 5);
    createinvitems(nyul_16, itarscrollchainlightning, 5);
    createinvitems(nyul_16, itarscrollicecube, 5);
    createinvitems(nyul_16, itarscrollwindfist, 10);
    createinvitems(nyul_16, itfo_mutton_01, 20);
    createinvitems(nyul_16, itfobeer, 20);
    createinvitems(nyul_16, itfo_plants_trollberrys_01, 20);
    createinvitems(nyul_16, itkelockpick, 30);
    createinvitems(nyul_16, itlstorch, 30);
    createinvitems(nyul_16, itminugget, 1000);
    createinvitems(nyul_16, itfo_potion_mana_03, 20);
    createinvitems(nyul_16, itfo_potion_health_03, 20);
    equipitem(nyul_16, itmw_1h_sword_bastard_04 /*4429*/);
    equipitem(nyul_16, itrw_bow_long_06 /*4881*/);
};

instance nyul_21(npc_default) {
    name = "Me";
    npctype = npctype_main;
    guild = gil_sld;
    level = 21;
    voice = 15;
    id = 0;
    exp = 115500;
    exp_next = 126500;
    attribute[atr_strength] /*4*/ = 70;
    attribute[atr_dexterity] /*5*/ = 20;
    attribute[atr_mana_max] /*3*/ = 15;
    attribute[atr_mana] /*2*/ = 15;
    attribute[atr_hitpoints_max] /*1*/ = 292;
    attribute[atr_hitpoints] /*0*/ = 292;
    mdl_setvisual(nyul_21, "HUMANS.MDS");
    mdl_setvisualbody(nyul_21, "hum_body_Naked0", 4, 1, "Hum_Head_Pony", 9, 0, crw_armor_h /*4151*/);
    npc_settalentskill(nyul_21, npc_talent_picklock, 1);
    npc_settalentvalue(nyul_21, npc_talent_picklock, 60);
    npc_settalentskill(nyul_21, npc_talent_acrobat, 1);
    npc_settalentskill(nyul_21, npc_talent_1h, 2);
    npc_settalentskill(nyul_21, npc_talent_2h, 2);
    npc_settalentskill(nyul_21, npc_talent_bow, 1);
    createinvitem(nyul_21, itarrunelight);
    createinvitem(nyul_21, itarrunefirebolt);
    createinvitem(nyul_21, itarruneteleport2);
    createinvitem(nyul_21, itwrworldmap);
    createinvitem(nyul_21, ulumulu);
    createinvitems(nyul_21, itamarrow, 100);
    createinvitems(nyul_21, itarscrollfireball, 5);
    createinvitems(nyul_21, itarscrollthunderbolt, 10);
    createinvitems(nyul_21, itarscrollthunderball, 5);
    createinvitems(nyul_21, itarscrollchainlightning, 5);
    createinvitems(nyul_21, itarscrollicecube, 5);
    createinvitems(nyul_21, itarscrollwindfist, 10);
    createinvitems(nyul_21, itfo_mutton_01, 20);
    createinvitems(nyul_21, itfobeer, 20);
    createinvitems(nyul_21, itfo_plants_trollberrys_01, 20);
    createinvitems(nyul_21, itkelockpick, 30);
    createinvitems(nyul_21, itlstorch, 30);
    createinvitems(nyul_21, itminugget, 1000);
    createinvitems(nyul_21, itfo_potion_mana_03, 20);
    createinvitems(nyul_21, itfo_potion_health_03, 20);
    equipitem(nyul_21, itmw_2h_sword_03 /*4443*/);
    equipitem(nyul_21, itrw_bow_long_01 /*4876*/);
};

instance itwrlevelmap(c_item) {
    name = "Map of Test Level";
    mainflag = item_kat_docs;
    flags = 0;
    visual = "ItWrMap.3ds";
    material = mat_leather;
    scemename = "MAP";
    on_state = uselevelmap;
    value = 15;
    description = "";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = "";
    count[5] = 0;
};

func void uselevelmap() {
    var int ndocid;

    ndocid = doc_createmap();
    doc_setpages(ndocid, 1);
    doc_setpage(ndocid, 0, "Map_X.TGA", 1);
    doc_setfont(ndocid, -1, font_old_20);
    doc_setmargins(ndocid, -1, 10, 10, 10, 10, 1);
    doc_printline(ndocid, -1, "Level Map");
    doc_show(ndocid);
};

instance itwrbookoftales(c_item) {
    name = "Book of Tales";
    mainflag = item_kat_docs;
    flags = 0;
    visual = "ItWrMap.3ds";
    material = mat_leather;
    scemename = "MAP";
    on_state = usebookoftales;
    value = 15;
    description = "";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = "";
    count[5] = 0;
};

func void usebookoftales() {
    var int ndocid;

    ndocid = doc_create();
    doc_setpages(ndocid, 2);
    doc_setpage(ndocid, 0, "BOOK_LEFT.TGA", 0);
    doc_setpage(ndocid, 1, "BOOK_RIGHT.TGA", 0);
    doc_setfont(ndocid, -1, font_old_10);
    doc_setmargins(ndocid, -1, 10, 10, 10, 10, 1);
    doc_printline(ndocid, -1, "HEADER");
    doc_printline(ndocid, -1, "");
    doc_printlines(ndocid, 0, "One line on the left");
    doc_printlines(ndocid, 1, "One line on the right");
    doc_show(ndocid);
};

instance itmw1hswordburning(c_item) {
    name = "Legendary short sword of burning";
    mainflag = item_kat_nf;
    flags = item_swd;
    visual = "ItMw1hSword01.3DS";
    material = mat_metal;
    damagetotal = 191;
    damage[dam_index_edge] /*2*/ = 1;
    damage[dam_index_fire] /*3*/ = 120;
    damage[dam_index_magic] /*5*/ = 70;
    damagetype = (dam_edge | dam_fire) | dam_magic;
    value = 20000;
    description = "Legendary Short Sword of Burning";
    text = "";
    count = 0;
    text[1] = "This is a fucking good sword for";
    count[1] = 0;
    text[2] = "killing all fucking creatures who";
    count[2] = 0;
    text[3] = "trying to fuck with you!";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = "Damage";
    count[5] = damagetotal;
};

instance itmw2hswordburning(c_item) {
    name = "Legendary heavy sword of burning";
    mainflag = item_kat_nf;
    flags = item_2hd_swd;
    visual = "ItMw2hSword01.3DS";
    material = mat_metal;
    damagetotal = 250;
    damagetype = dam_fire;
    value = 30000;
    description = "Legendary Heavy Sword of Burning";
    text = "";
    count = 0;
    text[1] = "Nothing restists the burning touch";
    count[1] = 0;
    text[2] = "of this legendary shword that was";
    count[2] = 0;
    text[3] = "already believe to be lost forever";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = "Damage";
    count[5] = damagetotal;
};

instance itrwwarbowburning(c_item) {
    name = "Legendary bow of burning";
    mainflag = item_kat_ff;
    flags = item_bow;
    visual = "ItRw_Bow_War_01.mms";
    material = mat_wood;
    damagetotal = 200;
    damage[dam_index_point] /*6*/ = 75;
    damage[dam_index_fire] /*3*/ = 75;
    damage[dam_index_fly] /*4*/ = 50;
    damagetype = (dam_fire | dam_point) | dam_fly;
    value = 30000;
    description = "Legendary War Bow of Burning";
    text = "";
    count = 0;
    text[1] = "Carved in the ancient times before";
    count[1] = 0;
    text[2] = "the creation of mankind, this bow is";
    count[2] = 0;
    text[3] = "the mightiest ranged weapon ever";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = "Damage";
    count[5] = damagetotal;
};

instance itarrobemithril(c_item) {
    name = "Ledengary mithril robe";
    mainflag = item_kat_armor;
    flags = 0;
    wear = wear_torso;
    visual = "dmbm.3ds";
    visual_change = "Hum_DMBM_ARMOR.asc";
    visual_skin = 0;
    material = mat_metal;
    ownerguild = gil_none;
    disguiseguild = gil_none;
    protection[prot_edge] /*2*/ = 20;
    protection[prot_blunt] /*1*/ = 20;
    protection[prot_point] /*6*/ = 20;
    protection[prot_fire] /*3*/ = 20;
    protection[prot_magic] /*5*/ = 20;
    value = 1098;
    description = "";
    text = "";
    count = 0;
    text[1] = "";
    count[1] = 0;
    text[2] = "";
    count[2] = 0;
    text[3] = "";
    count[3] = 0;
    text[4] = "";
    count[4] = 0;
    text[5] = "";
    count[5] = 0;
};

instance pc_roman(npc_default) {
    name = "Roman der Romulaner";
    guild = gil_none;
    level = 50;
    voice = 11;
    id = info_xardas_return /*9995*/;
    attribute[atr_hitpoints_max] /*1*/ = 50;
    attribute[atr_mana_max] /*3*/ = 50;
    attribute[atr_hitpoints] /*0*/ = 25;
    attribute[atr_mana] /*2*/ = 50;
    attribute[atr_strength] /*4*/ = 50;
    attribute[atr_dexterity] /*5*/ = 50;
    mdl_setvisual(pc_roman, "HUMANS.MDS");
    mdl_setvisualbody(pc_roman, "HUM_BODY_NAKED0", 0, 0, "Hum_Head_Fighter", 1, 2, itarrobemithril /*13515*/);
    createinvitem(pc_roman, itwrlevelmap);
    equipitem(pc_roman, itrwwarbowburning /*13514*/);
    equipitem(pc_roman, itmw1hswordburning /*13512*/);
    equipitem(pc_roman, itmw2hswordburning /*13513*/);
};

instance allround_testmodell(npc_default) {
    name = "Allrounder";
    guild = gil_none;
    level = 250;
    flags = npc_flag_immortal;
    voice = 11;
    id = 9999;
    attribute[atr_hitpoints_max] /*1*/ = 250;
    attribute[atr_mana_max] /*3*/ = 250;
    attribute[atr_hitpoints] /*0*/ = 250;
    attribute[atr_mana] /*2*/ = 250;
    attribute[atr_strength] /*4*/ = 250;
    attribute[atr_dexterity] /*5*/ = 250;
    mdl_setvisual(allround_testmodell, "HUMANS.MDS");
    mdl_setvisualbody(allround_testmodell, "HUM_BODY_NAKED0", 0, 0, "Hum_Head_Fighter", 1, 2, grd_armor_h /*4127*/);
    fight_tactic = fai_human_strong;
    npc_setpermattitude(allround_testmodell, att_hostile);
    npc_setattitude(allround_testmodell, att_hostile);
    npc_settalentskill(allround_testmodell, npc_talent_acrobat, 3);
    npc_settalentvalue(allround_testmodell, npc_talent_acrobat, 100);
    npc_settalentskill(allround_testmodell, npc_talent_picklock, 3);
    npc_settalentvalue(allround_testmodell, npc_talent_picklock, 0);
    npc_settalentskill(allround_testmodell, npc_talent_pickpocket, 3);
    npc_settalentvalue(allround_testmodell, npc_talent_pickpocket, 0);
    npc_settalentskill(allround_testmodell, npc_talent_sneak, 3);
    npc_settalentskill(allround_testmodell, npc_talent_1h, 3);
    npc_settalentskill(allround_testmodell, npc_talent_2h, 3);
    npc_settalentskill(allround_testmodell, npc_talent_bow, 3);
    npc_settalentskill(allround_testmodell, npc_talent_crossbow, 3);
    npc_settalentskill(allround_testmodell, npc_talent_mage, 8);
    npc_settalentskill(allround_testmodell, npc_talent_firemaster, 3);
    createinvitem(allround_testmodell, itarrobemithril);
    createinvitem(allround_testmodell, itarrunelight);
    createinvitem(allround_testmodell, itarrunefirebolt);
    createinvitem(allround_testmodell, itarrunefireball);
    createinvitem(allround_testmodell, itarrunefirestorm);
    createinvitem(allround_testmodell, itarrunefirerain);
    createinvitem(allround_testmodell, itarruneteleport1);
    createinvitem(allround_testmodell, itarruneteleport2);
    createinvitem(allround_testmodell, itarruneteleport3);
    createinvitem(allround_testmodell, itarruneteleport5);
    createinvitem(allround_testmodell, itarruneheal);
    createinvitem(allround_testmodell, itarrunechainlightning);
    createinvitem(allround_testmodell, itarrunethunderbolt);
    createinvitem(allround_testmodell, itarrunethunderball);
    createinvitem(allround_testmodell, itarruneicecube);
    createinvitem(allround_testmodell, itarruneicewave);
    createinvitem(allround_testmodell, itarrunedestroyundead);
    createinvitem(allround_testmodell, itarrunewindfist);
    createinvitem(allround_testmodell, itarrunestormfist);
    createinvitem(allround_testmodell, itarrunetelekinesis);
    createinvitem(allround_testmodell, itarrunecharm);
    createinvitem(allround_testmodell, itarrunesleep);
    createinvitem(allround_testmodell, itarrunepyrokinesis);
    createinvitem(allround_testmodell, itarrunecontrol);
    createinvitem(allround_testmodell, itarscrolllight);
    createinvitem(allround_testmodell, itarscrollfirebolt);
    createinvitem(allround_testmodell, itarscrollfireball);
    createinvitem(allround_testmodell, itarscrollfirestorm);
    createinvitem(allround_testmodell, itarscrollfirerain);
    createinvitem(allround_testmodell, itarscrollteleport1);
    createinvitem(allround_testmodell, itarscrollteleport2);
    createinvitem(allround_testmodell, itarscrollteleport3);
    createinvitem(allround_testmodell, itarscrollteleport4);
    createinvitem(allround_testmodell, itarscrollteleport5);
    createinvitem(allround_testmodell, itarscrollheal);
    createinvitem(allround_testmodell, itarscrolltrfbloodfly);
    createinvitem(allround_testmodell, itarscrolltrfcrawler);
    createinvitem(allround_testmodell, itarscrolltrflurker);
    createinvitem(allround_testmodell, itarscrolltrfmeatbug);
    createinvitem(allround_testmodell, itarscrolltrfmolerat);
    createinvitem(allround_testmodell, itarscrolltrforcdog);
    createinvitem(allround_testmodell, itarscrolltrfscavenger);
    createinvitem(allround_testmodell, itarscrolltrfshadowbeast);
    createinvitem(allround_testmodell, itarscrolltrfsnapper);
    createinvitem(allround_testmodell, itarscrolltrfwaran);
    createinvitem(allround_testmodell, itarscrolltrfwolf);
    createinvitem(allround_testmodell, itarscrollchainlightning);
    createinvitem(allround_testmodell, itarscrollthunderbolt);
    createinvitem(allround_testmodell, itarscrollthunderball);
    createinvitem(allround_testmodell, itarscrollicecube);
    createinvitem(allround_testmodell, itarscrollicewave);
    createinvitem(allround_testmodell, itarscrollsummondemon);
    createinvitem(allround_testmodell, itarscrollsummonskeletons);
    createinvitem(allround_testmodell, itarscrollsummongolem);
    createinvitem(allround_testmodell, itarscrollarmyofdarkness);
    createinvitem(allround_testmodell, itarscrolldestroyundead);
    createinvitem(allround_testmodell, itarscrollwindfist);
    createinvitem(allround_testmodell, itarscrollstormfist);
    createinvitem(allround_testmodell, itarscrolltelekinesis);
    createinvitem(allround_testmodell, itarscrollcharm);
    createinvitem(allround_testmodell, itarscrollsleep);
    createinvitem(allround_testmodell, itarscrollpyrokinesis);
    createinvitem(allround_testmodell, itarscrollcontrol);
    createinvitem(allround_testmodell, itarscrollfear);
    createinvitem(allround_testmodell, itarscrollberzerk);
    createinvitem(allround_testmodell, itarscrollshrink);
    createinvitem(allround_testmodell, itwrlevelmap);
    createinvitem(allround_testmodell, itwrbookoftales);
    createinvitems(allround_testmodell, itamarrow, 50);
    createinvitems(allround_testmodell, itfoapple, 10);
    createinvitems(allround_testmodell, itfocheese, 10);
    createinvitems(allround_testmodell, itfoloaf, 10);
    createinvitems(allround_testmodell, itfobeer, 10);
    createinvitems(allround_testmodell, itfowine, 10);
    equipitem(allround_testmodell, itmw_2h_sword_heavy_01 /*4444*/);
    start_aistate = zs_testempty;
};

func void zs_testempty() {
    npc_percenable(self, perc_assesstalk, zs_testfinishmove);
    printscreen("Looking at player ...", -1, 50, font_old_20, 2);
    ai_lookatnpc(self, hero);
};

func void zs_testempty_loop() {
};

func void zs_testempty_end() {
};

func void zs_testsmoke() {
    b_choosejoint(self);
    ai_usemob(self, "SMOKE", 1);
};

func int zs_testsmoke_loop() {
    ai_wait(self, 1.0);
    return 1;
};

func void zs_testsmoke_end() {
    ai_usemob(self, "SMOKE", -1);
    ai_useitemtostate(self, itmijoint_1 /*4511*/, -1);
};

var int m_nguild;

func void zs_testguild() {
    if (m_nguild == 0) {
        m_nguild = gil_none;
    }
    else if (m_nguild == gil_none) {
        m_nguild = gil_grd;
    }
    else if (m_nguild == gil_grd) {
        m_nguild = gil_vlk;
    }
    else {
        if (m_nguild == gil_vlk) {
            m_nguild = gil_none;
        };
    };
    npc_settrueguild(hero, m_nguild);
};

func int zs_testguild_loop() {
    return 1;
};

func void zs_testguild_end() {
};

func void zs_testinfos() {
    ai_processinfos(self);
};

func int zs_testinfos_loop() {
    return 1;
};

func void zs_testinfos_end() {
};

var int g_nmana;

func void zs_testspell() {
    printscreen("Increasing Mana ...", -1, 50, font_old_20, 3);
    g_nmana = g_nmana + 1;
    if (g_nmana > 50) {
        g_nmana = 25;
    };
    if (g_nmana < 25) {
        g_nmana = 25;
    };
    if (npc_hasspell(self, g_nspell)) {
        printscreen("Readying spell ...", -1, 40, font_old_20, 3);
        ai_readyspell(self, spl_fireball, g_nmana);
    };
};

func int zs_testspell_loop() {
    return 1;
};

func void zs_testspell_end() {
};

var int g_nspell;

func void zs_testmagic() {
    printscreen("Unreadying spell ...", -1, 30, font_old_20, 3);
    ai_unreadyspell(self);
    if (npc_hasspell(self, g_nspell)) {
        printscreen("Readying spell ...", -1, 40, font_old_20, 3);
        ai_readyspell(self, g_nspell, 50);
    }
    else {
        printscreen("Spell unavailable ...", -1, 60, font_old_20, 3);
    };
    g_nspell = g_nspell + 1;
    if (g_nspell > spl_destroyundead) {
        g_nspell = spl_light;
    };
};

func int zs_testmagic_loop() {
    return 1;
};

func void zs_testmagic_end() {
};

func void zs_testpatrol() {
    npc_percenable(self, perc_movemob, zs_testmovemob);
    ai_gotowp(self, "WP_OUT");
    ai_aligntofp(self);
};

func void zs_testpatrol_loop() {
};

func void zs_testpatrol_end() {
};

func void zs_testmovemob() {
    printscreen("Stopping ...", -1, 30, font_old_20, 3);
    npc_clearaiqueue(self);
    ai_standup(self);
};

func void zs_testmovemob_loop() {
    if (!npc_iswayblocked(self)) {
        printscreen("Way is free now ...", -1, 40, font_old_20, 3);
        ai_startstate(self, zs_testpatrol, 0, "  ");
    };
};

func void zs_testmovemob_end() {
};

func void zs_testdraw() {
    printscreen("Arming ranged weapon ...", -1, 50, font_old_20, 2);
    ai_standup(self);
    ai_equipbestrangedweapon(self);
    ai_readyrangedweapon(self);
    printscreen("Aiming at player ...", -1, 60, font_old_20, 2);
    ai_aimat(self, hero);
    printscreen("Next time I will shoot ...", -1, 70, font_old_20, 2);
    npc_percenable(self, perc_assesstalk, zs_testshoot);
};

func void zs_testdraw_loop() {
};

func void zs_testdraw_end() {
};

func void zs_testshoot() {
    printscreen("Shooting at player ...", -1, 50, font_old_20, 2);
    ai_shootat(self, hero);
    printscreen("Standing up ...", -1, 60, font_old_20, 2);
    ai_standup(self);
    printscreen("Removing weapon ...", -1, 70, font_old_20, 2);
    ai_removeweapon(self);
    ai_startstate(self, zs_testempty, 0, "  ");
};

func int zs_testshoot_loop() {
    return 1;
};

func void zs_testshoot_end() {
};

func void zs_testfinishmove() {
    printscreen("Arming weapon ...", -1, 20, font_old_20, 2);
    ai_standup(self);
    ai_equipbestmeleeweapon(self);
    ai_readymeleeweapon(self);
    npc_setattitude(self, att_hostile);
    npc_settarget(self, hero);
};

func void zs_testfinishmove_loop() {
    printscreen("Attacking hero ...", -1, 25, font_old_20, 2);
    ai_attack(self);
    if (npc_isinstate(hero, zs_unconscious)) {
        printscreen("Finishing hero ...", -1, 30, font_old_20, 2);
        ai_finishingmove(self, hero);
        ai_standup(self);
        ai_removeweapon(self);
        npc_setattitude(self, att_neutral);
        ai_startstate(self, zs_testempty, 0, "  ");
    };
};

func void zs_testfinishmove_end() {
};

func void dailyroute_test_empty() {
};

instance mission_test_empty(c_mission) {
    name = "Mission_Test_Empty";
    description = "Mission_Test_Empty";
    important = 1;
    offerconditions = mis_con_off_te;
    successconditions = mis_con_suc_te;
    failureconditions = mis_con_fai_te;
    obsoleteconditions = mis_con_obs_te;
    offer = mis_off_te;
    success = mis_suc_te;
    failure = mis_fai_te;
    obsolete = mis_obs_te;
    running = mis_run_te;
};

func int mis_con_off_te() {
    return 1;
};

func int mis_con_suc_te() {
    return 1;
};

func int mis_con_fai_te() {
    return 0;
};

func int mis_con_obs_te() {
    return 0;
};

func void mis_off_te() {
    ai_asktext(self, NOFUNC, NOFUNC, "Yes", "No");
};

func void mis_suc_te() {
    print("Empty Mission succeeded");
};

func void mis_fai_te() {
    print("Empty Mission failed");
};

func void mis_obs_te() {
    print("Empty Mission became obsolete");
};

func void mis_run_te() {
    print("Empty Mission is running");
};

instance mission_test_default(c_mission) {
    name = "Mission_Test_Default";
    description = "Mission_Test_Default";
    important = 1;
    offerconditions = mis_con_off_td;
    successconditions = mis_con_suc_td;
    failureconditions = mis_con_fai_td;
    obsoleteconditions = mis_con_obs_td;
    offer = mis_off_td;
    success = mis_suc_td;
    failure = mis_fai_td;
    obsolete = mis_obs_td;
    running = mis_run_td;
};

func int mis_con_off_td() {
    return 1;
};

func int mis_con_suc_td() {
    return 1;
};

func int mis_con_fai_td() {
    return 0;
};

func int mis_con_obs_td() {
    return 0;
};

func void mis_off_td() {
    ai_asktext(self, NOFUNC, NOFUNC, "Yep", "Nope");
};

func void mis_suc_td() {
    print("Default Mission succeeded");
};

func void mis_fai_td() {
    print("Default Mission failed");
};

func void mis_obs_td() {
    print("Default Mission became obsolete");
};

func void mis_run_td() {
    print("Default Mission is running");
};

instance trade_test(c_itemreact) {
    npc = allround_testmodell /*13517*/;
    trade_item = itfoapple /*4302*/;
    trade_amount = 10;
    requested_item = itfobeer /*4326*/;
    requested_amount = 2;
    reaction = trade_test_check;
};

func int trade_test_check() {
    var string strtradeamount;
    var string strtradeitem;
    var string strrequestedamount;
    var string strrequesteditem;

    strtradeamount = "Trade amount : ";
    strtradeamount = concatstrings(strtradeamount, inttostring(trade_test.trade_amount));
    strtradeitem = "Trade item : ";
    strtradeitem = concatstrings(strtradeitem, inttostring(trade_test.trade_item));
    strrequestedamount = "Requested amount : ";
    strrequestedamount = concatstrings(strrequestedamount, inttostring(trade_test.requested_amount));
    strrequesteditem = "Requested item : ";
    strrequesteditem = concatstrings(strrequesteditem, inttostring(trade_test.requested_item));
    printscreen(strtradeamount, 10, 20, font_old_20, 3);
    printscreen(strtradeitem, 10, 30, font_old_20, 3);
    printscreen(strrequestedamount, 10, 40, font_old_20, 3);
    printscreen(strrequesteditem, 10, 50, font_old_20, 3);
    if (trade_test.requested_amount == 2) {
        return 1;
    };
    return 0;
};

instance info_test_trade(c_info) {
    npc = allround_testmodell /*13517*/;
    nr = 666;
    condition = info_test_trade_success;
    information = info_test_trade_procedure;
    trade = true;
    description = "Allrounder's Trade";
};

func int info_test_trade_success() {
    return 1;
};

func void info_test_trade_procedure() {
    printscreen("Info_Test_Trade_Procedure()", -1, 50, font_old_20, 10);
};

instance info_test_trade_permanent(c_info) {
    npc = allround_testmodell /*13517*/;
    nr = 666;
    condition = info_test_trade_permanent_success;
    information = info_test_trade_permanent_procedure;
    permanent = true;
    trade = true;
    description = "Allrounder's Permanent Trade";
};

func int info_test_trade_permanent_success() {
    return 1;
};

func void info_test_trade_permanent_procedure() {
    printscreen("Info_Test_Trade_Permanent_Procedure()", -1, 50, font_old_20, 10);
};

instance info_test_permanent(c_info) {
    npc = allround_testmodell /*13517*/;
    nr = 666;
    condition = info_test_permanent_success;
    information = info_test_permanent_procedure;
    permanent = true;
    description = "Allrounder's Permanent Info";
};

func int info_test_permanent_success() {
    return 1;
};

func void info_test_permanent_procedure() {
    printscreen("Info_Test_Permanent_Procedure()", -1, 50, font_old_20, 10);
};

instance info_test_important(c_info) {
    npc = allround_testmodell /*13517*/;
    nr = 666;
    condition = info_test_important_success;
    information = info_test_important_procedure;
    important = true;
    description = "Allrounder's Important Info";
};

func int info_test_important_success() {
    return 1;
};

func void info_test_important_procedure() {
    printscreen("Info_Test_Important_Procedure()", -1, 50, font_old_20, 10);
};

instance info_test_important_permanent(c_info) {
    npc = allround_testmodell /*13517*/;
    nr = 666;
    condition = info_test_important_permanent_success;
    information = info_test_important_permanent_procedure;
    permanent = true;
    important = true;
    description = "Allrounder's Important Permanent Info";
};

func int info_test_important_permanent_success() {
    return 1;
};

func void info_test_important_permanent_procedure() {
    printscreen("Info_Test_Important_Permanent_Procedure()", -1, 50, font_old_20, 10);
};

instance info_test_normal(c_info) {
    npc = allround_testmodell /*13517*/;
    nr = 666;
    condition = info_test_success_normal;
    information = info_test_procedure_normal;
    description = "Allrounder's Normal Info";
};

func int info_test_success_normal() {
    return 1;
};

func void info_test_procedure_normal() {
    printscreen("Info_Test_Procedure_Normal()", -1, 50, font_old_20, 10);
};

instance info_test_choice(c_info) {
    npc = allround_testmodell /*13517*/;
    nr = 666;
    condition = info_test_success_choice;
    information = info_test_procedure_choice;
    description = "Allrounder's Choice Info";
};

func int info_test_success_choice() {
    return 1;
};

func void info_test_procedure_choice() {
    printscreen("Info_Test_Procedure_Choice()", -1, 50, font_old_20, 10);
    info_clearchoices(info_test_choice /*13599*/);
    info_addchoice(info_test_choice /*13599*/, "Yes", info_test_procedure_choice_yes);
    info_addchoice(info_test_choice /*13599*/, "No", info_test_procedure_choice_no);
    info_addchoice(info_test_choice /*13599*/, "Don't know", info_test_procedure_choice_unsure);
    info_addchoice(info_test_choice /*13599*/, "Exit", info_test_procedure_choice_exit);
};

func void info_test_procedure_choice_yes() {
    info_clearchoices(info_test_choice /*13599*/);
};

func void info_test_procedure_choice_no() {
    info_clearchoices(info_test_choice /*13599*/);
};

func void info_test_procedure_choice_unsure() {
    info_clearchoices(info_test_choice /*13599*/);
    info_addchoice(info_test_choice /*13599*/, "Yes", info_test_procedure_choice_yes);
    info_addchoice(info_test_choice /*13599*/, "No", info_test_procedure_choice_no);
    info_addchoice(info_test_choice /*13599*/, "Exit", info_test_procedure_choice_exit);
};

func void info_test_procedure_choice_exit() {
    info_clearchoices(info_test_choice /*13599*/);
};

instance info_test_permanent_choice(c_info) {
    npc = allround_testmodell /*13517*/;
    nr = 666;
    condition = info_test_success_permanent_choice;
    information = info_test_procedure_permanent_choice;
    permanent = true;
    description = "Allrounder's Permanent Choice Info";
};

func int info_test_success_permanent_choice() {
    return 1;
};

func void info_test_procedure_permanent_choice() {
    printscreen("Info_Test_Procedure_Permanent_Choice()", -1, 50, font_old_20, 10);
    info_clearchoices(info_test_permanent_choice /*13606*/);
    info_addchoice(info_test_permanent_choice /*13606*/, "Ok", info_test_procedure_permanent_choice_yes);
    info_addchoice(info_test_permanent_choice /*13606*/, "Fuck you", info_test_procedure_permanent_choice_no);
    info_addchoice(info_test_permanent_choice /*13606*/, "Hmm...", info_test_procedure_permanent_choice_unsure);
    info_addchoice(info_test_permanent_choice /*13606*/, "(Leave)", info_test_procedure_permanent_choice_exit);
};

func void info_test_procedure_permanent_choice_yes() {
    info_clearchoices(info_test_permanent_choice /*13606*/);
};

func void info_test_procedure_permanent_choice_no() {
    info_clearchoices(info_test_permanent_choice /*13606*/);
};

func void info_test_procedure_permanent_choice_unsure() {
};

func void info_test_procedure_permanent_choice_exit() {
    info_clearchoices(info_test_permanent_choice /*13606*/);
    ai_stopprocessinfos(self);
};

instance info_test_permanent_important_choice(c_info) {
    npc = allround_testmodell /*13517*/;
    nr = 666;
    condition = info_test_success_permanent_important_choice;
    information = info_test_procedure_permanent_important_choice;
    permanent = true;
    important = true;
    description = "Allrounder's Permanent Important Choice Info";
};

func int info_test_success_permanent_important_choice() {
    return 1;
};

func void info_test_procedure_permanent_important_choice() {
    printscreen("Info_Test_Procedure_Permanent_Important_Choice()", -1, 50, font_old_20, 10);
    info_clearchoices(info_test_permanent_important_choice /*13613*/);
    info_addchoice(info_test_permanent_important_choice /*13613*/, "Yes", info_test_procedure_permanent_important_choice_yes);
    info_addchoice(info_test_permanent_important_choice /*13613*/, "No", info_test_procedure_permanent_important_choice_no);
    info_addchoice(info_test_permanent_important_choice /*13613*/, "Don't know", info_test_procedure_permanent_important_choice_unsure);
    info_addchoice(info_test_permanent_important_choice /*13613*/, "Bye", info_test_procedure_permanent_important_choice_exit);
};

func void info_test_procedure_permanent_important_choice_yes() {
    info_clearchoices(info_test_permanent_important_choice /*13613*/);
};

func void info_test_procedure_permanent_important_choice_no() {
    info_clearchoices(info_test_permanent_important_choice /*13613*/);
};

func void info_test_procedure_permanent_important_choice_unsure() {
};

func void info_test_procedure_permanent_important_choice_exit() {
    info_clearchoices(info_test_permanent_important_choice /*13613*/);
    ai_stopprocessinfos(self);
};

const string _str_font_onscreen = "font_old_10_white.tga";

const string _str_sound_picklock_success = "PICKLOCK_SUCCESS";

const string _str_sound_picklock_failure = "PICKLOCK_FAILURE";

const string _str_sound_picklock_unlock = "PICKLOCK_UNLOCK";

const string _str_sound_picklock_broken = "PICKLOCK_BROKEN";

func void g_printscreen(var string strmessage) {
    printscreen(strmessage, -1, 10, _str_font_onscreen, 3);
};

func int g_cansteal() {
    if ((other.npctype != npctype_friend) && (other.npctype != npctype_main)) {
        return true;
    }
    else {
        printscreen(_str_message_cannotsteal, -1, _ypos_message_cannotsteal, _str_font_onscreen, _time_message_cannotsteal);
        return false;
    };
};

func void g_cannotcast(var int bisplayer, var int ncircleneeded, var int ncirclepossessed) {
    var int ndifference;
    var string strdifference;
    var string strmessage;

    ndifference = ncircleneeded - ncirclepossessed;
    strdifference = inttostring(ndifference);
    if (bisplayer) {
        strmessage = _str_cannotuse_pre_player;
    }
    else {
        strmessage = concatstrings(self.name, _str_cannotuse_pre_npc);
        strmessage = concatstrings(strmessage, inttostring(self.id));
        strmessage = concatstrings(strmessage, _str_cannotuse_post_npc);
    };
    strmessage = concatstrings(strmessage, strdifference);
    strmessage = concatstrings(strmessage, _str_cannotuse_levels);
    g_printscreen(strmessage);
};

func void g_cannotuse(var int bisplayer, var int nattribute, var int nvalue) {
    var int nattributevalue;
    var string strattribute;
    var int ndifference;
    var string strdifference;
    var string strmessage;

    if (nattribute == atr_hitpoints) {
        strattribute = _str_attribute_hitpoints;
        nattributevalue = self.attribute[atr_hitpoints] /*0*/;
    }
    else if (nattribute == atr_hitpoints_max) {
        strattribute = _str_attribute_hitpoints_max;
        nattributevalue = self.attribute[atr_hitpoints_max] /*1*/;
    }
    else if (nattribute == atr_mana) {
        strattribute = _str_attribute_mana;
        nattributevalue = self.attribute[atr_mana] /*2*/;
    }
    else if (nattribute == atr_mana_max) {
        strattribute = _str_attribute_mana_max;
        nattributevalue = self.attribute[atr_mana_max] /*3*/;
    }
    else if (nattribute == atr_strength) {
        strattribute = _str_attribute_strength;
        nattributevalue = self.attribute[atr_strength] /*4*/;
    }
    else if (nattribute == atr_dexterity) {
        strattribute = _str_attribute_dexterity;
        nattributevalue = self.attribute[atr_dexterity] /*5*/;
    }
    else {
        strattribute = _str_invalid;
        nattributevalue = 0;
    };
    ndifference = nvalue - nattributevalue;
    strdifference = inttostring(ndifference);
    if (bisplayer) {
        strmessage = _str_cannotuse_pre_player;
    }
    else {
        return;
        strmessage = concatstrings(self.name, _str_cannotuse_pre_npc);
        strmessage = concatstrings(strmessage, inttostring(self.id));
        strmessage = concatstrings(strmessage, _str_cannotuse_post_npc);
    };
    strmessage = concatstrings(strmessage, strdifference);
    strmessage = concatstrings(strmessage, " ");
    strmessage = concatstrings(strmessage, _str_cannotuse_points);
    strmessage = concatstrings(strmessage, strattribute);
    strmessage = concatstrings(strmessage, _str_cannotuse_post);
    if (bisplayer) {
        g_printscreen(strmessage);
    };
};

func void g_picklock(var int bsuccess, var int bbrokenopen) {
    var string strsoundfx;
    var string strmessage;
    var int strypos;

    strsoundfx = _str_invalid;
    strmessage = _str_invalid;
    if (bsuccess) {
        if (bbrokenopen) {
            strsoundfx = _str_sound_picklock_unlock;
            strmessage = _str_message_picklock_unlock;
            strypos = _ypos_message_picklock_unlock;
        }
        else {
            strsoundfx = _str_sound_picklock_success;
            strmessage = _str_message_picklock_success;
            strypos = _ypos_message_picklock_success;
        };
    }
    else if (bbrokenopen) {
        strsoundfx = _str_sound_picklock_broken;
        strmessage = _str_message_picklock_broken;
        strypos = _ypos_message_picklock_broken;
    }
    else {
        strsoundfx = _str_sound_picklock_failure;
        strmessage = _str_message_picklock_failure;
        strypos = _ypos_message_picklock_failure;
    };
    snd_play3d(self, strsoundfx);
    printscreen(strmessage, -1, strypos, _str_font_onscreen, _time_message_picklock);
};

func void event_om_crawler_01() {
    wld_insertnpc(minecrawler /*6773*/, "OM_CAVE3_28");
    wld_insertnpc(minecrawler /*6773*/, "OM_CAVE3_28");
    wld_insertnpc(minecrawler /*6773*/, "OM_059");
    wld_insertnpc(minecrawler /*6773*/, "OM_059");
    wld_insertnpc(minecrawler /*6773*/, "OM_060");
};

func void evt_tpl_01_func_01() {
    wld_insertnpc(skeleton /*6825*/, "EVT_TPL_01_SPAWN_01");
    wld_insertnpc(skeleton /*6825*/, "EVT_TPL_01_SPAWN_02");
};

func void evt_tpl_07_func_01() {
    wld_insertnpc(otdemon /*6740*/, "TPL_096");
};

func void evt_tpl_07_func_02() {
    wld_insertnpc(otdemon /*6740*/, "TPL_096");
};

func void evt_tpl_07_func_03() {
    wld_insertnpc(orc_priest_2 /*7778*/, "TPL_096");
};

func void evt_tpl_08_func_01() {
    wld_insertnpc(orc_priest_3 /*7780*/, "TPL_124");
};

func void evt_tpl_13_func_01() {
    wld_insertnpc(otminecrawler /*6780*/, "EVT_TPL_13_SPAWN_RIGHT_03");
    wld_insertnpc(otminecrawler /*6780*/, "EVT_TPL_13_SPAWN_RIGHT_04");
    wld_insertnpc(otminecrawler /*6780*/, "EVT_TPL_13_SPAWN_LEFT_03");
};

func void evt_tpl_13_func_02() {
};

func void evt_tpl_13_func_03() {
    wld_insertnpc(otdemon /*6740*/, "EVT_TPL_13_SPAWN_FP_ROAM_ROOMRIGHT_01");
    wld_insertnpc(otdemon /*6740*/, "EVT_TPL_13_SPAWN_FP_ROAM_ROOMLEFT_02");
    wld_insertnpc(otdemon /*6740*/, "EVT_TPL_13_SPAWN_FP_ROAM_ROOMCENTER_01");
};

func void evt_tpl_16_func_01() {
    wld_insertnpc(otdemon /*6740*/, "EVT_TPL_16_SPAWN_01");
};

func void evt_tpl_sleeperdemon_01() {
    ai_playani(sleeper, "T_HURT");
    wld_insertnpc(demonlord /*6743*/, "TPL_410");
};

func void evt_tpl_sleeperdemon_02() {
    ai_playani(sleeper, "T_HURT");
    wld_insertnpc(demonlord /*6743*/, "TPL_389");
};

func void evt_tpl_sleeperdemon_03() {
    ai_playani(sleeper, "T_HURT");
    wld_insertnpc(demonlord /*6743*/, "TPL_391");
};

func void evt_tpl_sleeperdemon_04() {
    ai_playani(sleeper, "T_HURT");
    wld_insertnpc(demonlord /*6743*/, "TPL_409");
};

func void evt_tpl_sleeperdemon_05() {
    ai_playani(sleeper, "T_HURT");
    wld_insertnpc(demonlord /*6743*/, "TPL_390");
};

var int _str_message_wheel_stucks_again;

func int mc_oldmine_asghan() {
    printdebugnpc(pd_item_mobsi, "MC_OLDMINE_ASGHAN");
    if (npc_knowsinfo(hero, grd_263_asghan_open_now /*9396*/) && (_str_message_wheel_stucks_again == 0)) {
        ai_usemob(hero, "VWHEEL", 1);
        ai_usemob(hero, "VWHEEL", -1);
        _str_message_wheel_stucks_again = 1;
        return true;
    }
    else {
        g_printscreen(_str_message_wheel_stucks);
        return false;
    };
};

func int mc_oldmine_entrance() {
    printdebugnpc(pd_item_mobsi, "MC_OLDMINE_ENTRANCE");
    printglobals(pd_item_mobsi);
    if ((kapitel >= 4) && hlp_isvalidnpc(self)) {
        printdebugnpc(pd_item_mobsi, "...blockiert");
        if (npc_isplayer(self)) {
            g_printscreen(_str_message_wheel_stucks);
        };
        return false;
    }
    else {
        printdebugnpc(pd_item_mobsi, "...bedienbar");
        return true;
    };
};

func int mc_monasteryruin_gate() {
    printdebugnpc(pd_item_mobsi, "MC_MONASTERYRUIN_GATE");
    if (monasteryruin_gateopen == false) {
        printdebugnpc(pd_item_mobsi, "...noch nie ge*ffnet");
        ai_usemob(hero, "VWHEEL", 1);
        ai_usemob(hero, "VWHEEL", -1);
        monasteryruin_gateopen = true;
        return true;
    }
    else {
        printdebugnpc(pd_item_mobsi, "...schonmal ge*ffnet");
        return true;
    };
};

func int mc_ogy_gate() {
    printdebugnpc(pd_item_mobsi, "MC_OGY_GATE");
    if (corangar_gotoogy) {
        printdebugnpc(pd_item_mobsi, "...closed");
        return true;
    }
    else {
        printdebugnpc(pd_item_mobsi, "...open");
        g_printscreen(_str_message_wheel_stucks);
        return false;
    };
};

var int fm_gateopen;

func int mc_fm_gate() {
    printdebugnpc(pd_item_mobsi, "MC_FM_GATE");
    if ((kapitel == 4) && (fm_gateopen == false)) {
        printdebugnpc(pd_item_mobsi, "...closed");
        ai_usemob(hero, "VWHEEL", 1);
        ai_usemob(hero, "VWHEEL", -1);
        fm_gateopen = true;
        b_exchangeroutine(pc_fighter /*7949*/, "WaitFM");
        return true;
    }
    else {
        printdebugnpc(pd_item_mobsi, "...open");
        if (!fm_gateopen) {
            g_printscreen(_str_message_wheel_stucks);
        };
        return false;
    };
};

func int evt_trollschlucht_gate_trigger() {
    printdebugnpc(pd_item_mobsi, "EVT_TROLLSCHLUCHT_GATE_TRIGGER");
    if (saturas_bringfoci > 0) {
        if (troll_wheel == 0) {
            g_printscreen(_str_message_wheel_stucks);
            troll_wheel = 1;
            return false;
        }
        else if (troll_wheel == 1) {
            g_printscreen(_str_message_wheel_stucks);
            return false;
        }
        else if (troll_wheel == 2) {
            ai_usemob(hero, "VWHEEL", 1);
            ai_usemob(hero, "VWHEEL", -1);
            troll_wheel = 3;
            wld_insertnpc(blackgobbowarrior /*6726*/, "LOCATION_12_13");
            wld_insertnpc(blackgobbowarrior /*6726*/, "LOCATION_12_13");
            wld_insertnpc(blackgobbowarrior /*6726*/, "LOCATION_12_13");
            wld_insertnpc(blackgobbowarrior /*6726*/, "LOCATION_12_13");
            wld_insertnpc(blackgobbowarrior /*6726*/, "LOCATION_12_14");
            wld_insertnpc(blackgobbowarrior /*6726*/, "LOCATION_12_14");
            wld_insertnpc(blackgobbowarrior /*6726*/, "LOCATION_12_14");
            wld_insertnpc(blackgobbowarrior /*6726*/, "LOCATION_12_14");
            return true;
        }
        else {
            return false;
        };
    }
    else {
        g_printscreen(_str_message_wheel_stucks);
    };
};

var int orccity_gateopen;

func int mc_orccity_gate() {
    printdebugnpc(pd_item_mobsi, "MC_OrcCity_Gate");
    if ((kapitel >= 5) && (orccity_gateopen == false)) {
        printdebugnpc(pd_item_mobsi, "...closed");
        ai_usemob(hero, "VWHEEL", 1);
        ai_usemob(hero, "VWHEEL", -1);
        orccity_gateopen = true;
        return true;
    }
    else {
        printdebugnpc(pd_item_mobsi, "...open");
        if (!orccity_gateopen) {
            g_printscreen(_str_message_wheel_stucks);
        };
        return false;
    };
};

func int mc_orccity_sunctum_outergate() {
    printdebugnpc(pd_item_mobsi, "MC_OrcCity_Sanctum_OuterGate");
    orccity_sanctum_outergatetried = true;
    if (((kapitel >= 5) && npc_hasitems(hero, itmi_stuff_idol_sleeper_01)) && (orccity_sanctum_outergateopen == false)) {
        printdebugnpc(pd_item_mobsi, "...closed");
        g_printscreen(_str_message_oclever_moves);
        ai_usemob(hero, "LEVER", 1);
        ai_usemob(hero, "LEVER", -1);
        orccity_sanctum_outergateopen = true;
        return true;
    }
    else {
        printdebugnpc(pd_item_mobsi, "...open");
        if (!orccity_sanctum_outergateopen) {
            g_printscreen(_str_message_oclever_stucks);
        };
        return false;
    };
};

func void pc_sleep(var int t) {
    ai_stopprocessinfos(self);
    self.aivar[33] = false;
    if (wld_istime(0, 0, t, 0)) {
        wld_settime(t, 0);
    }
    else {
        t = t + 24;
        wld_settime(t, 0);
    };
    printscreen(print_mes_sleep, -1, -1, font_old_20, 3);
    hero.attribute[atr_hitpoints] /*0*/ = hero.attribute[atr_hitpoints_max] /*1*/;
    hero.attribute[atr_mana] /*2*/ = hero.attribute[atr_mana_max] /*3*/;
    printglobals(pd_item_mobsi);
    npc_sendpassiveperc(hero, perc_assessenterroom, NULL, hero);
};

func void sleepabit_s1() {
    var c_npc her;
    var c_npc rock;

    her = hlp_getnpc(pc_hero);
    rock = hlp_getnpc(pc_rockefeller);
    if ((hlp_getinstanceid(self) == hlp_getinstanceid(her)) || (hlp_getinstanceid(self) == hlp_getinstanceid(rock))) {
        self.aivar[33] = true;
        ai_processinfos(her);
    };
};

instance pc_nosleep(c_info) {
    npc = pc_hero /*7967*/;
    nr = 999;
    condition = pc_nosleep_condition;
    information = pc_nosleep_info;
    permanent = true;
    description = dialog_ende;
};

func int pc_nosleep_condition() {
    return 1;
};

func void pc_nosleep_info() {
    ai_stopprocessinfos(self);
    self.aivar[33] = false;
};

instance pc_sleeptime_morning(c_info) {
    npc = pc_hero /*7967*/;
    nr = 0;
    condition = pc_sleeptime_morning_condition;
    information = pc_sleeptime_morning_info;
    permanent = true;
    description = "Ñïàòü äî óòðà.";
};

func int pc_sleeptime_morning_condition() {
    return 1;
};

func void pc_sleeptime_morning_info() {
    pc_sleep(8);
};

instance pc_sleeptime_noon(c_info) {
    npc = pc_hero /*7967*/;
    nr = 0;
    condition = pc_sleeptime_noon_condition;
    information = pc_sleeptime_noon_info;
    permanent = true;
    description = "Ñïàòü äî ïîëóäíÿ.";
};

func int pc_sleeptime_noon_condition() {
    return 1;
};

func void pc_sleeptime_noon_info() {
    pc_sleep(12);
};

instance pc_sleeptime_evening(c_info) {
    npc = pc_hero /*7967*/;
    nr = 0;
    condition = pc_sleeptime_evening_condition;
    information = pc_sleeptime_evening_info;
    permanent = true;
    description = "Ñïàòü äî âå÷åðà.";
};

func int pc_sleeptime_evening_condition() {
    return 1;
};

func void pc_sleeptime_evening_info() {
    pc_sleep(19);
};

instance pc_sleeptime_midnight(c_info) {
    npc = pc_hero /*7967*/;
    nr = 0;
    condition = pc_sleeptime_midnight_condition;
    information = pc_sleeptime_midnight_info;
    permanent = true;
    description = "Ñïàòü äî ïîëóíî÷è.";
};

func int pc_sleeptime_midnight_condition() {
    return 1;
};

func void pc_sleeptime_midnight_info() {
    pc_sleep(0);
};

